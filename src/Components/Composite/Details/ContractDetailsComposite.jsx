import React, { Component } from "react";
import * as Utilities from "../../../JS/Utilities";
import * as KeyCodes from "../../../JS/KeyCodes";
import * as Constants from "../../../JS/Constants";
import * as RestAPIs from "../../../JS/RestApis";
import {
  contractAttributeEntity,
  contractItemAttributeEntity,
} from "../../../JS/AttributeEntity";
import { connect } from "react-redux";
import axios from "axios";
import lodash from "lodash";
import ErrorBoundary from "../../ErrorBoundary";
import { emptyContract } from "../../../JS/DefaultEntities";
import TMDetailsHeader from "../../UIBase/Common/TMDetailsHeader";
import {
  functionGroups,
  fnContract,
  fnContractForceClose,
  fnKPIInformation,
} from "../../../JS/FunctionGroups";
import { LoadingPage } from "../../UIBase/Common/LoadingPage";
import { TMDetailsUserActions } from "../../UIBase/Common/TMDetailsUserActions";
import { contractValidationDef } from "../../../JS/ValidationDef";
import ContractDetails from "../../UIBase/Details/ContractDetails";
import { contractPlanValidationDef } from "../../../JS/DetailsTableValidationDef";
import NotifyEvent from "../../../JS/NotifyEvent";
import { toast } from "react-toastify";
import TruckShipmentProject from "../../Composite/Entity/TruckShipmentComposite";
import { TranslationConsumer } from "@scuf/localization";
import { Button, Modal } from "@scuf/common";
import RailDispatchProject from "../../Composite/Entity/RailDispatchComposite";
import * as DateFieldsInEntities from "../../../JS/DateFieldsInEntities";
import TMDetailsKPILayout from "../Common/TMDetailsKPILayout";
import { kpiContractDetail } from "../../../JS/KPIPageName";
import UserAuthenticationLayout from "../Common/UserAuthentication";
class ContractDetailsComposite extends Component {
  state = {
    contract: {},
    modContract: {},
    validationErrors: Utilities.getInitialValidationErrors(
      contractValidationDef
    ),
    modContractItems: [],
    terminalOptions: [],
    volumeUOMOptions: [],
    weightUOMOptions: [],
    carrierOptions: [],
    isReadyToRender: false,
    saveEnabled: false,
    selectedPlanRow: [],
    finishedProductOptions: [],
    customerDestinationOptions: {},
    attributeMetaDataList: [],
    compartmentAttributeMetaDataList: [],
    modAttributeMetaDataList: [],
    attributeValidationErrors: [],
    expandedRows: [],
    isEnableForceClose: false,
    isShowTruckShipment: false,
    isShowBackButton: false,
    isShowRailDispatch: false,
    isAutoGeneratedContractCode: false,
    isAllowtoUpdate: false,
    updatedContractStatus: "",
    contractKPIList: [],

    scheduledContractUpdate: false,
    showAuthenticationLayout: false,
    showForceCloseAuthenticationLayout: false,
    tempContract: {},
    tempContactStatusObj: {},
  };

  componentDidMount() {
    Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);
    let isNewContract = false;
    if (this.props.selectedRow.Common_Code === undefined) isNewContract = true;
    //this.getContract(isNewContract);
    this.getAttributes(isNewContract);
    this.getTerminalList();
    this.getUOMList();
    this.getCarrierList();
    this.getFinishedProductList();
    this.getCustomerDestinationList();
  }

  getAttributes(isNewContract) {
    try {
      axios(
        RestAPIs.GetAttributesMetaData,
        Utilities.getAuthenticationObjectforPost(
          [contractAttributeEntity, contractItemAttributeEntity],
          this.props.tokenDetails.tokenInfo
        )
      ).then((response) => {
        var result = response.data;
        if (result.IsSuccess === true) {
          this.setState(
            {
              attributeMetaDataList: lodash.cloneDeep(
                result.EntityResult.CONTRACT
              ),
              attributeValidationErrors:
                Utilities.getAttributeInitialValidationErrors(
                  result.EntityResult.CONTRACT
                ),
              compartmentAttributeMetaDataList: lodash.cloneDeep(
                result.EntityResult.CONTRACT_ITEM
              ),
            },
            () => this.getContract(isNewContract)
          );
        } else {
          console.log("Failed to get Attributes");
        }
      });
    } catch (error) {
      console.log("Error while getting Attributes:", error);
    }
  }

  componentWillReceiveProps(nextProps) {
    try {
      if (
        this.state.contract.ContractCode !== "" &&
        nextProps.selectedRow.Common_Code === undefined &&
        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo
      ) {
        this.getContract(true);
        let validationErrors = { ...this.state.validationErrors };
        Object.keys(validationErrors).forEach((key) => {
          validationErrors[key] = "";
        });
        this.setState({ validationErrors });
      }
    } catch (error) {
      console.log(
        "ContractDetailsComposite:Error occured on componentWillReceiveProps",
        error
      );
    }
  }

  getCustomerDestinationList() {
    axios(
      RestAPIs.GetCustomerDestinations +
      "?ShareholderCode=" +
      this.props.selectedShareholder +
      "&TransportationType=" +
      this.props.transportationType,
      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)
    )
      .then((response) => {
        var result = response.data;
        // console.log(response);

        if (result.IsSuccess === true) {
          if (Array.isArray(result.EntityResult)) {
            let shareholderCustomers = result.EntityResult.filter(
              (shareholderCust) =>
                shareholderCust.ShareholderCode ===
                this.props.selectedShareholder
            );
            if (shareholderCustomers.length > 0) {
              let customerDestinationOptions =
                shareholderCustomers[0].CustomerDestinationsList;
              this.setState({ customerDestinationOptions });
            } else {
              console.log("no customers identified for shareholder");
            }
          } else {
            console.log("customerdestinations not identified for shareholder");
          }
        }
      })
      .catch((error) => {
        console.log("Error while getting Customer List:", error);
      });
  }

  getFinishedProductList() {
    axios(
      RestAPIs.GetFinishedProductCodes +
      "?ShareholderCode=" +
      this.props.selectedShareholder,
      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)
    ).then((response) => {
      var result = response.data;
      if (result.IsSuccess === true) {
        if (
          Array.isArray(result.EntityResult) &&
          result.EntityResult.length > 0
        ) {
          let finishedProductOptions = Utilities.transferListtoOptions(
            result.EntityResult
          );
          this.setState({ finishedProductOptions });
        }
      }
    });
  }

  getUOMList() {
    axios(
      RestAPIs.GetUOMList,
      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)
    )
      .then((response) => {
        // console.log(response);
        var result = response.data;
        if (result.IsSuccess === true) {
          if (result.EntityResult !== null) {
            let weightUOMs = result.EntityResult.MASS;
            let weightUOMOptions = [];
            weightUOMs.forEach((weightOption) => {
              weightUOMOptions.push({
                text: weightOption,
                value: weightOption,
              });
            });

            let volumeUOMs = result.EntityResult.VOLUME;
            let volumeUOMOptions = [];
            volumeUOMs.forEach((volumeOption) => {
              volumeUOMOptions.push({
                text: volumeOption,
                value: volumeOption,
              });
            });

            // let lengthUOMs = result.EntityResult.LENGTH;
            // let lengthUOMOptions = [];
            // lengthUOMs.forEach((lengthOption) => {
            //   lengthUOMOptions.push({
            //     text: lengthOption,
            //     value: lengthOption,
            //   });
            // });

            this.setState({
              volumeUOMOptions,
              weightUOMOptions,
            });
          }
        } else {
          console.log("Error in getUOM:", result.ErrorList);
        }
      })
      .catch((error) => {
        console.log("Error while getting getUOM:", error);
      });
  }

  getTerminalList() {
    try {
      axios(
        RestAPIs.GetTerminals,
        Utilities.getAuthenticationObjectforPost(
          [this.props.selectedShareholder],
          this.props.tokenDetails.tokenInfo
        )
      ).then((response) => {
        let result = response.data;
        if (result.IsSuccess === true) {
          if (
            Array.isArray(result.EntityResult) &&
            result.EntityResult.length > 0
          )
            this.setState({ terminalOptions: result.EntityResult });
        }
      });
    } catch (err) {
      console.log("Contract Composite:Error occured on getTerminalsList", err);
    }
  }
  getContract(isNewContract) {
    if (isNewContract) {
      //this.terminalOptions = [];
      emptyContract.StartDate = new Date();
      //emptyContract.EndDate = new Date();
      emptyContract.TerminalCodes =
        this.state.terminalOptions.length === 1
          ? [...this.state.terminalOptions]
          : [];
      this.handleResetAttributeValidationError();
      this.setState(
        {
          contract: lodash.cloneDeep(emptyContract),
          modContract: this.GetAutoGeneratedContractCode(
            lodash.cloneDeep(emptyContract)
          ),
          modContractItems: [],
          isReadyToRender: true,
          modAttributeMetaDataList: [],
          contractKPIList: [],
          saveEnabled: Utilities.isInFunction(
            this.props.userDetails.EntityResult.FunctionsList,
            functionGroups.add,
            fnContract
          ),
          isEnableForceClose: false,
        },
        () => {
          if (this.props.userDetails.EntityResult.IsEnterpriseNode === false)
            this.localNodeAttribute();
        }
      );

      return;
    }

    let keyCode = [
      {
        key: KeyCodes.contractCode,
        value:
          this.props.selectedRow.Common_Code === undefined
            ? this.state.modContract.ContractCode
            : this.props.selectedRow.Common_Code,
      },
    ];
    let obj = {
      ShareHolderCode: this.props.selectedShareholder,
      keyDataCode: KeyCodes.contractCode,
      KeyCodes: keyCode,
    };
    axios(
      RestAPIs.GetContract,
      Utilities.getAuthenticationObjectforPost(
        obj,
        this.props.tokenDetails.tokenInfo
      )
    )
      .then((response) => {
        let result = response.data;

        if (result.IsSuccess === true) {
          let modContractItems = [];
          if (
            result.EntityResult !== null &&
            result.EntityResult.ContractItems !== null &&
            result.EntityResult.ContractItems.length > 0
          ) {
            modContractItems = Utilities.addSeqNumberToListObject(
              lodash.cloneDeep(result.EntityResult.ContractItems)
            );
          }
          var foceCloseStatus =
            Utilities.isInFunction(
              this.props.userDetails.EntityResult.FunctionsList,
              functionGroups.modify,
              fnContractForceClose
            ) && result.EntityResult.Status !== Constants.contractStatus.CLOSED;
          this.setState(
            {
              isReadyToRender: true,
              contract: lodash.cloneDeep(result.EntityResult),
              modContract: lodash.cloneDeep(result.EntityResult),
              modContractItems: lodash.cloneDeep(modContractItems),
              isEnableForceClose: foceCloseStatus,
              updatedContractStatus: result.EntityResult.Status,
              saveEnabled: Utilities.isInFunction(
                this.props.userDetails.EntityResult.FunctionsList,
                functionGroups.modify,
                fnContract
              ) && result.EntityResult.Status!== Constants.contractStatus.CLOSED,
            },
            () => {
              this.getKPIList(this.props.selectedShareholder, result.EntityResult.ContractCode)
              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {
                this.terminalSelectionChange(result.EntityResult.TerminalCodes);
              } else {
                this.localNodeAttribute();
              }
            }
          );
        } else {
          this.setState({
            modContract: lodash.cloneDeep(emptyContract),
            contract: lodash.cloneDeep(emptyContract),
            isReadyToRender: true,
          });
          console.log("Error in GetContract:", result.ErrorList);
        }
      })
      .catch((error) => {
        console.log("Error while getting Contract:", error);
      });
  }

  GetAutoGeneratedContractCode(contract) {
    let modContract = contract;
    axios(
      RestAPIs.GetAutoGeneratedContractCode,
      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)
    )
      .then((response) => {
        var result = response.data;
        if (result.IsSuccess === true) {
          if (
            result.EntityResult !== null &&
            result.EntityResult !== undefined &&
            result.EntityResult !== ""
          ) {
            modContract.ContractCode = result.EntityResult;
            this.setState({ isAutoGeneratedContractCode: true });
          } else {
            this.setState({ isAutoGeneratedContractCode: false });
          }
        }
      })
      .catch((error) => {
        console.log("Error while getting AutoGeneratedShipmentCode:", error);
      });
    return modContract;
  }

  handleResetAttributeValidationError() {
    try {
      var attributeMetaDataList = lodash.cloneDeep(
        this.state.attributeMetaDataList
      );
      this.setState({
        attributeValidationErrors:
          Utilities.getAttributeInitialValidationErrors(attributeMetaDataList),
      });
    } catch (error) {
      console.log(
        "ContractDetailsComposite:Error occured on handleResetAttributeValidationError",
        error
      );
    }
  }

  terminalSelectionChange(selectedTerminals) {
    try {
      let attributesTerminalsList = [];
      var attributeMetaDataList = [];
      var modAttributeMetaDataList = [];

      attributeMetaDataList = lodash.cloneDeep(
        this.state.attributeMetaDataList
      );
      modAttributeMetaDataList = lodash.cloneDeep(
        this.state.modAttributeMetaDataList
      );

      const attributeValidationErrors = lodash.cloneDeep(
        this.state.attributeValidationErrors
      );

      var modContract = lodash.cloneDeep(this.state.modContract);

      selectedTerminals.forEach((terminal) => {
        var existitem = modAttributeMetaDataList.find((selectedAttribute) => {
          return selectedAttribute.TerminalCode === terminal;
        });

        if (existitem === undefined) {
          attributeMetaDataList.forEach(function (attributeMetaData) {
            if (attributeMetaData.TerminalCode === terminal) {
              if (
                modContract.Attributes !== undefined &&
                modContract.Attributes !== null &&
                Array.isArray(modContract.Attributes)
              ) {
                var Attributevalue = modContract.Attributes.find(
                  (contractAttribute) => {
                    return contractAttribute.TerminalCode === terminal;
                  }
                );
              }

              if (Attributevalue !== undefined) {
                attributeMetaData.attributeMetaDataList.forEach(function (
                  attributeMetaData
                ) {
                  var valueAttribute = Attributevalue.ListOfAttributeData.find(
                    (x) => {
                      return x.AttributeCode === attributeMetaData.Code;
                    }
                  );
                  if (valueAttribute !== undefined)
                    attributeMetaData.DefaultValue =
                      valueAttribute.AttributeValue;
                });
              }
              attributesTerminalsList.push(attributeMetaData);
            }
          });
        } else {
          attributesTerminalsList.push(existitem);
        }
      });

      modAttributeMetaDataList = [];
      modAttributeMetaDataList = attributesTerminalsList;
      modAttributeMetaDataList = Utilities.attributesConvertoDecimal(
        modAttributeMetaDataList
      );
      attributeValidationErrors.forEach((attributeValidation) => {
        var existTerminal = selectedTerminals.find((selectedTerminals) => {
          return attributeValidation.TerminalCode === selectedTerminals;
        });
        if (existTerminal === undefined) {
          Object.keys(attributeValidation.attributeValidationErrors).forEach(
            (key) => (attributeValidation.attributeValidationErrors[key] = "")
          );
        }
      });

      this.formCompartmentAttributes(selectedTerminals);

      this.setState({ modAttributeMetaDataList, attributeValidationErrors });
    } catch (error) {
      console.log(
        "ContractDetailsComposite:Error occured on terminalSelectionChange",
        error
      );
    }
  }

  formCompartmentAttributes(selectedTerminals) {
    try {
      let attributes = lodash.cloneDeep(
        this.state.compartmentAttributeMetaDataList
      );

      attributes = attributes.filter(function (attTerminal) {
        return selectedTerminals.some(function (selTerminal) {
          return attTerminal.TerminalCode === selTerminal;
        });
      });
      let modContractItems = lodash.cloneDeep(this.state.modContractItems);

      modContractItems.forEach((comp) => {
        let compAttributes = [];
        attributes.forEach((att) => {
          att.attributeMetaDataList.forEach((attribute) => {
            compAttributes.push({
              AttributeCode: attribute.Code,
              AttributeName: attribute.DisplayName,
              AttributeValue: attribute.DefaultValue,
              TerminalCode: attribute.TerminalCode,
              IsMandatory: attribute.IsMandatory,
              DataType: attribute.DataType,
              IsReadonly: attribute.IsReadonly,
              MinValue: attribute.MinValue,
              MaxValue: attribute.MaxValue,
              ValidationFormat: attribute.ValidationFormat,
              compSequenceNo: "",
            });
          });
        });
        let attributesforNewComp = lodash.cloneDeep(compAttributes);

        if (
          comp.Code === null &&
          (comp.AttributesforUI === null || comp.AttributesforUI === undefined)
        ) {
          comp.AttributesforUI = [];
          attributesforNewComp.forEach((assignedAttributes) => {
            assignedAttributes.compSequenceNo = comp.SeqNumber;
            comp.AttributesforUI.push(assignedAttributes);
          });
        } else {
          if (
            comp.AttributesforUI !== null &&
            comp.AttributesforUI !== undefined
          ) {
            comp.AttributesforUI = comp.AttributesforUI.filter(function (
              attTerminal
            ) {
              return selectedTerminals.some(function (selTerminal) {
                return attTerminal.TerminalCode === selTerminal;
              });
            });

            compAttributes = compAttributes.filter(function (attTerminal) {
              return !comp.AttributesforUI.some(function (selTerminal) {
                return attTerminal.TerminalCode === selTerminal.TerminalCode;
              });
            });
          } else comp.AttributesforUI = [];

          let tempCompAttributes = lodash.cloneDeep(compAttributes);
          if (
            Array.isArray(comp.Attributes) &&
            comp.Attributes !== null &&
            comp.Attributes !== undefined &&
            comp.Attributes.length > 0
          ) {
            let selectedTerminalAttributes = comp.Attributes.filter(function (
              attTerminal
            ) {
              return selectedTerminals.some(function (selTerminal) {
                return attTerminal.TerminalCode === selTerminal;
              });
            });
            selectedTerminalAttributes.forEach((att) => {
              att.ListOfAttributeData.forEach((attData) => {
                let tempAttIndex = tempCompAttributes.findIndex(
                  (item) =>
                    item.TerminalCode === att.TerminalCode &&
                    item.AttributeCode === attData.AttributeCode
                );
                if (tempAttIndex >= 0)
                  tempCompAttributes[tempAttIndex].AttributeValue =
                    attData.AttributeValue;
              });
            });
            tempCompAttributes.forEach((assignedAttributes) => {
              assignedAttributes.compSequenceNo = comp.SeqNumber;
              comp.AttributesforUI.push(assignedAttributes);
            });
          } else {
            compAttributes.forEach((assignedAttributes) => {
              assignedAttributes.compSequenceNo = comp.SeqNumber;
              comp.AttributesforUI.push(assignedAttributes);
            });
          }
        }
        this.toggleExpand(comp, true, true);
        if (comp.AttributesforUI !== undefined && comp.AttributesforUI != null)
          comp.AttributesforUI = Utilities.compartmentAttributesConvertoDecimal(
            comp.AttributesforUI
          );
        comp.AttributesforUI = Utilities.addSeqNumberToListObject(
          comp.AttributesforUI
        );
      });
      this.setState({ modContractItems });
    } catch (error) {
      console.log(
        "ContractDetailsComposite:Error in forming Compartment Attributes",
        error
      );
    }
  }

  fillAttributeDetails(modContract, attributeList) {
    try {
      attributeList = Utilities.attributesDatatypeConversion(attributeList);
      modContract.Attributes = Utilities.fillAttributeDetails(attributeList);

      // For Compartment Attributes
      modContract.ContractItems.forEach((comp) => {
        if (comp.AttributesforUI !== undefined && comp.AttributesforUI != null)
          comp.AttributesforUI =
            Utilities.compartmentAttributesDatatypeConversion(
              comp.AttributesforUI
            );
        let selectedTerminals = [];
        if (this.props.userDetails.EntityResult.IsEnterpriseNode)
          selectedTerminals = lodash.cloneDeep(modContract.TerminalCodes);
        else {
          var compAttributeMetaDataList = lodash.cloneDeep(
            this.state.compartmentAttributeMetaDataList
          );
          if (compAttributeMetaDataList.length > 0)
            selectedTerminals = [compAttributeMetaDataList[0].TerminalCode];
        }
        let terminalAttributes = [];
        comp.Attributes = [];
        selectedTerminals.forEach((terminal) => {
          if (
            comp.AttributesforUI !== null &&
            comp.AttributesforUI !== undefined
          )
            terminalAttributes = comp.AttributesforUI.filter(function (
              attTerminal
            ) {
              return attTerminal.TerminalCode === terminal;
            });

          let attribute = {
            ListOfAttributeData: [],
          };

          attribute.TerminalCode = terminal;
          terminalAttributes.forEach((termAtt) => {
            if (termAtt.AttributeValue !== "" || termAtt.IsMandatory === true)
              attribute.ListOfAttributeData.push({
                AttributeCode: termAtt.AttributeCode,
                AttributeValue: termAtt.AttributeValue,
              });
            //})
            //comp.Attributes.push(attribute);
          });
          if (
            attribute.ListOfAttributeData !== null &&
            attribute.ListOfAttributeData !== undefined &&
            attribute.ListOfAttributeData.length > 0
          )
            comp.Attributes.push(attribute);
        });
      });
      return modContract;
    } catch (error) {
      console.log(
        "ContractDetailsComposite:Error occured on fillAttributeDetails",
        error
      );
    }
  }

  localNodeAttribute() {
    try {
      var attributeMetaDataList = lodash.cloneDeep(
        this.state.attributeMetaDataList
      );
      if (
        Array.isArray(attributeMetaDataList) &&
        attributeMetaDataList.length > 0
      )
        this.terminalSelectionChange([attributeMetaDataList[0].TerminalCode]);
      else {
        var compAttributeMetaDataList = lodash.cloneDeep(
          this.state.compartmentAttributeMetaDataList
        );
        if (
          Array.isArray(compAttributeMetaDataList) &&
          compAttributeMetaDataList.length > 0
        )
          this.formCompartmentAttributes([
            compAttributeMetaDataList[0].TerminalCode,
          ]);
      }
    } catch (error) {
      console.log(
        "ContractDetailsComposite:Error occured on localNodeAttribute",
        error
      );
    }
  }

  handleAttributeDataChange = (attribute, value) => {
    try {
      let matchedAttributes = [];
      let modAttributeMetaDataList = lodash.cloneDeep(
        this.state.modAttributeMetaDataList
      );
      let matchedAttributesList = modAttributeMetaDataList.filter(
        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode
      );
      if (
        matchedAttributesList.length > 0 &&
        Array.isArray(matchedAttributesList[0].attributeMetaDataList)
      ) {
        matchedAttributes =
          matchedAttributesList[0].attributeMetaDataList.filter(
            (modattribute) => modattribute.Code === attribute.Code
          );
      }
      if (matchedAttributes.length > 0) {
        matchedAttributes[0].DefaultValue = value;
      }
      const attributeValidationErrors = lodash.cloneDeep(
        this.state.attributeValidationErrors
      );

      attributeValidationErrors.forEach((attributeValidation) => {
        if (attributeValidation.TerminalCode === attribute.TerminalCode) {
          attributeValidation.attributeValidationErrors[attribute.Code] =
            Utilities.valiateAttributeField(attribute, value);
        }
      });
      this.setState({ attributeValidationErrors, modAttributeMetaDataList });
    } catch (error) {
      console.log(
        "ContractDetailsComposite:Error occured on handleAttributeDataChange",
        error
      );
    }
  };

  handleCompAttributeCellDataEdit = (compAttribute, value) => {
    let modContractItems = lodash.cloneDeep(this.state.modContractItems);
    let compIndex = modContractItems.findIndex(
      (item) => item.SeqNumber === compAttribute.rowData.compSequenceNo
    );
    if (compIndex >= 0)
      modContractItems[compIndex].AttributesforUI[
        // compAttribute.rowIndex
        compAttribute.rowData.SeqNumber - 1
      ].AttributeValue = value;
    this.setState({ modContractItems });
    if (compIndex >= 0)
      this.toggleExpand(modContractItems[compIndex], true, true);
  };

  handleChange = (propertyName, data) => {
    try {
      let modContract = lodash.cloneDeep(this.state.modContract);
      modContract[propertyName] = data;
      //this.setState({ modContract });

      if (propertyName === "CustomerCode") {
        let destOptions = this.state.customerDestinationOptions[data];
        const modContractItems = lodash.cloneDeep(this.state.modContractItems);
        if (modContractItems.length > 0) {
          if (destOptions !== undefined && Array.isArray(destOptions)) {
            if (destOptions.length === 1) {
              modContractItems.forEach((plan) => {
                plan.DestinationCode = destOptions[0];
              });
            }
            if (destOptions.length === 0 || destOptions.length > 1)
              modContractItems.forEach((plan) => {
                plan.DestinationCode = null;
              });

            this.setState({ modContractItems });
          }
        }
      }
      const validationErrors = { ...this.state.validationErrors };
      if (modContract.Active === this.state.contract.Active) {
        if (
          this.state.contract.Remarks === modContract.Remarks ||
          modContract.Remarks === ""
        ) {
          validationErrors.Remarks = "";
        }
        // if (modContract.Remarks === "")
        //   modContract.Remarks = this.state.contract.Remarks;
      }
      if (propertyName === "Active") {
        if (modContract.Active !== this.state.contract.Active) {
          modContract.Remarks = "";
        }
      }
      if (contractValidationDef[propertyName] !== undefined) {
        validationErrors[propertyName] = Utilities.validateField(
          contractValidationDef[propertyName],
          data
        );
      }
      this.setState({ validationErrors, modContract }, () => {
        if (propertyName === "TerminalCodes") {
          this.terminalSelectionChange(data);
        }
      });
    } catch (error) {
      console.log(
        "ContractDetailsComposite:Error occured on handleChange",
        error
      );
    }
  };

  handleRowSelectionChange = (planRow) => {
    this.setState({ selectedPlanRow: planRow });
  };
  handleCellDataEdit = (newVal, cellData) => {
    let modContractItems = lodash.cloneDeep(this.state.modContractItems);

    modContractItems[cellData.rowIndex][cellData.field] = newVal;

    this.setState({ modContractItems });
  };

  handleAddPlan = () => {
    if (!this.props.userDetails.EntityResult.IsArchived) {
      try {
        let newPlan = {
          // primaryKey: null,
          Attributes: null,
          BlockedQuantity: null,
          ContractCode: null,
          CustomerCode: null,
          DestinationCode: null,
          EndDate: null,
          FinishedProductCode: null,
          FinishdedProductType: null,
          ItemCode: null,
          LoadedQuantity: null,
          Quantity: null,
          QuantityUOM: null,
          RemainingQuantity: null,
          ShareholderCode: null,
          StartDate: null,
        };
        // const { modTrailer } = { ...this.state };
        let modContractItems = lodash.cloneDeep(this.state.modContractItems);
        let destOptions =
          this.state.customerDestinationOptions[
          this.state.modContract.CustomerCode
          ];
        if (
          destOptions !== undefined &&
          Array.isArray(destOptions) &&
          destOptions.length === 1
        ) {
          newPlan.DestinationCode = destOptions[0];
        }
        // newComp.Code = Utilities.generateCompartmentCode(
        //   modTrailer.Compartments
        // ).toString();
        newPlan.SeqNumber =
          Utilities.getMaxSeqNumberfromListObject(modContractItems);

        modContractItems.push(newPlan);

        this.setState(
          {
            modContractItems,
            selectedPlanRow: [],
          },
          () => {
            if (
              this.props.userDetails.EntityResult.IsEnterpriseNode === false
            ) {
              var attributeMetaDataList = lodash.cloneDeep(
                this.state.compartmentAttributeMetaDataList
              );
              if (attributeMetaDataList.length > 0)
                this.formCompartmentAttributes([
                  attributeMetaDataList[0].TerminalCode,
                ]);
            } else
              this.formCompartmentAttributes(
                this.state.modContract.TerminalCodes
              );
          }
        );
      } catch (error) {
        console.log(
          "ContractDetailsComposite:Error occured on handleAddCompartment",
          error
        );
      }
    }
  };

  handleDeletePlan = () => {
    if (!this.props.userDetails.EntityResult.IsArchived) {
      try {
        if (
          this.state.selectedPlanRow != null &&
          this.state.selectedPlanRow.length > 0
        ) {
          if (this.state.modContractItems.length > 0) {
            let modContractItems = lodash.cloneDeep(
              this.state.modContractItems
            );

            this.state.selectedPlanRow.forEach((obj, index) => {
              modContractItems = modContractItems.filter((plan, cindex) => {
                return plan.SeqNumber !== obj.SeqNumber;
              });
            });

            this.setState({ modContractItems });
          }
        }

        this.setState({ selectedPlanRow: [] });
      } catch (error) {
        console.log(
          "ContractDetailsComposite:Error occured on handleDeleteCompartment",
          error
        );
      }
    }
  };
  handleDateTextChange = (propertyName, value, error) => {
    try {
      let validationErrors = { ...this.state.validationErrors };
      let modContract = { ...this.state.modContract };
      validationErrors[propertyName] = error;
      modContract[propertyName] = value;
      this.setState({ validationErrors, modContract });
    } catch (error) {
      console.log(
        "ContractDetailsComposite:Error occured on handleDateTextChange",
        error
      );
    }
  };

  handleAllTerminalsChange = (checked) => {
    try {
      const modContract = lodash.cloneDeep(this.state.modContract);
      if (checked) modContract.TerminalCodes = [...this.state.terminalOptions];
      else modContract.TerminalCodes = [];
      this.setState({ modContract });
      this.terminalSelectionChange(modContract.TerminalCodes);
    } catch (error) {
      console.log(
        "ContractComposite:Error occured on handleAllTerminasChange",
        error
      );
    }
  };

  fillDetails() {
    try {
      let modContract = lodash.cloneDeep(this.state.modContract);

      modContract.ShareholderCode = this.props.selectedShareholder;

      modContract.TransportationType = this.props.transportationType;
      if (modContract.ContractType !== null && modContract.ContractType !== "")
        modContract.ContractType = Constants.contractType.DEFAULT_CONTRACT_TYPE;

      if (modContract.Status !== null && modContract.Status !== "")
        modContract.Status = Constants.contractStatus.CREATED;

      modContract.ContractItems = lodash.cloneDeep(this.state.modContractItems);
      if (
        modContract.ContractItems !== null &&
        modContract.ContractItems.length > 0
      ) {
        modContract.ContractItems.forEach((plan) => {
          plan.ContractCode = modContract.ContractCode;
          plan.ShareholderCode = modContract.ShareholderCode;
          plan.CustomerCode = modContract.CustomerCode;
          if (plan.Quantity !== null && plan.Quantity !== "")
            plan.Quantity = plan.Quantity.toLocaleString();

          delete plan.SeqNumber;
          if (
            plan.AttributesforUI !== undefined &&
            plan.AttributesforUI != null
          )
            plan.AttributesforUI =
              Utilities.compartmentAttributesConverttoLocaleString(
                plan.AttributesforUI
              );
        });
      }

      return modContract;
    } catch (err) {
      console.log("ContractDetailsComposite:Error occured on filldetails", err);
    }
  }

  convertStringtoDecimal(modContract, attributeList) {
    try {
      modContract.ContractItems.forEach((plan) => {
        plan.Quantity = Utilities.convertStringtoDecimal(plan.Quantity);
      });
      modContract = this.fillAttributeDetails(modContract, attributeList);
      return modContract;
    } catch (err) {
      console.log("convertStringtoDecimal error contract details", err);
    }
  }


  addUpdateContract = () => {
    try {
      this.setState({ saveEnabled: false });
      let tempContract = lodash.cloneDeep(this.state.tempContract);

      this.state.contract.ContractCode === ""
      ? this.createContract(tempContract)
      : this.updateContract(tempContract);

    } catch (error) {
      console.log("Contract Composite : Error in addUpdateContract");
    }
  };

  handleSave = () => {
    try {
      if (this.state.updatedContractStatus === Constants.contractStatus.SCHEDULED && this.state.scheduledContractUpdate === false) {
        this.setState({ isAllowtoUpdate: true });
      }
      else {
        let returnValue = Object.values(this.state.validationErrors).every(
          function (value) {
            return value === "";
          }
        );
        if (returnValue) {
       //   this.setState({ saveEnabled: false });
          let modContract = this.fillDetails();
          let attributeList = Utilities.attributesConverttoLocaleString(
            this.state.modAttributeMetaDataList
          );

          if (this.validateSave(modContract, attributeList)) {
            modContract = this.convertStringtoDecimal(modContract, attributeList);
            modContract = Utilities.convertDatesToString(
              DateFieldsInEntities.DatesInEntity.Contract,
              modContract
            );
            modContract.ContractItems.forEach(
              (ci) =>
              (ci = Utilities.convertDatesToString(
                DateFieldsInEntities.DatesInEntity.ContractItem,
                ci
              ))
            );
            
            let showAuthenticationLayout =
            this.props.userDetails.EntityResult.IsWebPortalUser !== true
              ? true
              : false;
          let tempContract = lodash.cloneDeep(modContract);
          this.setState({ showAuthenticationLayout, tempContract }, () => {
            if (showAuthenticationLayout === false) {
              this.addUpdateContract();
            }
        });

            modContract = Utilities.convertStringToDates(
              DateFieldsInEntities.DatesInEntity.Contract,
              modContract
            );
            modContract.ContractItems.forEach(
              (ci) =>
              (ci = Utilities.convertStringToDates(
                DateFieldsInEntities.DatesInEntity.ContractItem,
                ci
              ))
            );
          } else {
            this.setState({ saveEnabled: true });
          }
        }
      }
    } catch (error) {
      console.log(
        "ContractDetailsComposite:Error occured on handleSave",
        error
      );
    }
  };

  validateSave(modContract, attributeList) {
    const validationErrors = { ...this.state.validationErrors };
    Object.keys(contractValidationDef).forEach(function (key) {
      if (modContract[key] !== undefined)
        validationErrors[key] = Utilities.validateField(
          contractValidationDef[key],
          modContract[key]
        );
    });

    if (modContract.Active !== this.state.contract.Active) {
      if (modContract.Remarks === "") {
        validationErrors["Remarks"] = "ShipmentOrder_RemarksRequired";
      }
    }

    let notification = {
      messageType: "critical",
      message: "ContractInfo_SavedStatus",
      messageResultDetails: [],
    };

    var attributeValidationErrors = lodash.cloneDeep(
      this.state.attributeValidationErrors
    );

    attributeList.forEach((attribute) => {
      attributeValidationErrors.forEach((attributeValidation) => {
        if (attributeValidation.TerminalCode === attribute.TerminalCode) {
          attribute.attributeMetaDataList.forEach((attributeMetaData) => {
            attributeValidation.attributeValidationErrors[
              attributeMetaData.Code
            ] = Utilities.valiateAttributeField(
              attributeMetaData,
              attributeMetaData.DefaultValue
            );
          });
        }
      });
    });

    this.setState({ validationErrors, attributeValidationErrors });

    let returnValue = true;
    attributeValidationErrors.forEach((x) => {
      if (returnValue) {
        returnValue = Object.values(x.attributeValidationErrors).every(
          function (value) {
            return value === "";
          }
        );
      } else {
        return returnValue;
      }
    });

    if (returnValue)
      returnValue = Object.values(validationErrors).every(function (value) {
        return value === "";
      });
    else return returnValue;

    if (modContract.ContractItems.length > 0) {
      modContract.ContractItems.forEach((com) => {
        contractPlanValidationDef.forEach((col) => {
          let err = "";

          if (col.validator !== undefined) {
            err = Utilities.validateField(col.validator, com[col.field]);
          }

          // if (col.field === "Quantity" && err === "") {
          //   let quantity = Utilities.convertStringtoDecimal(
          //     com.Quantity
          //   ).toString();
          //   if (quantity.length > 15) err = "Common_MaxLengthExceeded";
          // }

          if (err !== "") {
            notification.messageResultDetails.push({
              keyFields: [col.displayName],
              keyValues: [com[col.field]],
              isSuccess: false,
              errorMessage: err,
            });
          }
        });

        if (com.AttributesforUI !== null && com.AttributesforUI !== undefined) {
          com.AttributesforUI.forEach((item) => {
            let errMsg = Utilities.valiateAttributeField(
              item,
              item.AttributeValue
            );
            if (errMsg !== "") {
              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {
                notification.messageResultDetails.push({
                  keyFields: ["CompAttributeTerminal", item.AttributeName],
                  keyValues: [item.TerminalCode, item.AttributeValue],
                  isSuccess: false,
                  errorMessage: errMsg,
                });
              } else {
                notification.messageResultDetails.push({
                  keyFields: [item.AttributeName],
                  keyValues: [item.AttributeValue],
                  isSuccess: false,
                  errorMessage: errMsg,
                });
              }
            }
          });
        }
        this.toggleExpand(com, true, true);
      });
    } else {
      notification.messageResultDetails.push({
        keyFields: ["ContractInfo_ContractCode"],
        keyValues: [modContract.ContractCode],
        isSuccess: false,
        errorMessage: "ErrMsg_Contract_NoItems",
      });
    }

    this.setState({ validationErrors });
    returnValue = Object.values(validationErrors).every(function (value) {
      return value === "";
    });
    if (notification.messageResultDetails.length > 0) {
      this.props.onSaved(this.state.modContract, "update", notification);
      return false;
    }
    return returnValue;
  }

  toggleExpand = (data, open, isTerminalAdded = false) => {
    //console.log("Data in Toggle", data)
    let expandedRows = this.state.expandedRows;
    let expandedRowIndex = expandedRows.findIndex(
      (item) => item.SeqNumber === data.SeqNumber
    );
    if (open) {
      if (isTerminalAdded && expandedRowIndex >= 0) {
        expandedRows.splice(expandedRowIndex, 1);
        expandedRows.push(data);
      } else if (expandedRowIndex >= 0) {
        expandedRows.splice(expandedRowIndex, 1);
      }
    } else {
      if (expandedRowIndex >= 0) {
        expandedRows = expandedRows.filter(
          (x) => x.Code !== data.Code && x.SeqNumber !== data.SeqNumber
        );
      } else expandedRows.push(data);
    }
    this.setState({ expandedRows });
  };

  createContract(modContract) {
    this.handleAuthenticationClose();
    let keyCode = [
      {
        key: KeyCodes.contractCode,
        value: modContract.ContractCode,
      },
    ];

    let obj = {
      ShareHolderCode: this.props.selectedShareholder,
      keyDataCode: KeyCodes.contractCode,
      KeyCodes: keyCode,
      Entity: modContract,
    };

    let notification = {
      messageType: "critical",
      message: "ContractInfo_SavedStatus",
      messageResultDetails: [
        {
          keyFields: ["ContractInfo_ContractCode"],
          keyValues: [modContract.ContractCode],
          isSuccess: false,
          errorMessage: "",
        },
      ],
    };
    axios(
      RestAPIs.CreateContract,
      Utilities.getAuthenticationObjectforPost(
        obj,
        this.props.tokenDetails.tokenInfo
      )
    )
      .then((response) => {
        let result = response.data;
        notification.messageType = result.IsSuccess ? "success" : "critical";
        notification.messageResultDetails[0].isSuccess = result.IsSuccess;
        if (result.IsSuccess === true) {
          this.setState({
            // trailer: lodash.cloneDeep(modTrailer),
            // modTrailer: lodash.cloneDeep(modTrailer),
            saveEnabled: Utilities.isInFunction(
              this.props.userDetails.EntityResult.FunctionsList,
              functionGroups.modify,
              fnContract
            ),
          });

          this.getContract(false);
        } else {
          notification.messageResultDetails[0].errorMessage =
            result.ErrorList[0];
          this.setState({
            saveEnabled: Utilities.isInFunction(
              this.props.userDetails.EntityResult.FunctionsList,
              functionGroups.add,
              fnContract
            ),
          });
          console.log("Error in CreateContract:", result.ErrorList);
        }

        this.props.onSaved(this.state.modContract, "add", notification);
      })
      .catch((error) => {
        this.setState({
          saveEnabled: Utilities.isInFunction(
            this.props.userDetails.EntityResult.FunctionsList,
            functionGroups.add,
            fnContract
          ),
        });
        notification.messageResultDetails[0].errorMessage = error;
        this.props.onSaved(this.state.modContract, "add", notification);
      });
  }

  updateContract(modContract) {
    this.handleAuthenticationClose();
    let keyCode = [
      {
        key: KeyCodes.contractCode,
        value: modContract.ContractCode,
      },
    ];

    let obj = {
      ShareHolderCode: this.props.selectedShareholder,
      keyDataCode: KeyCodes.contractCode,
      KeyCodes: keyCode,
      Entity: modContract,
    };

    let notification = {
      messageType: "critical",
      message: "ContractInfo_SavedStatus",
      messageResultDetails: [
        {
          keyFields: ["ContractInfo_ContractCode"],
          keyValues: [modContract.ContractCode],
          isSuccess: false,
          errorMessage: "",
        },
      ],
    };
    axios(
      RestAPIs.UpdateContract,
      Utilities.getAuthenticationObjectforPost(
        obj,
        this.props.tokenDetails.tokenInfo
      )
    )
      .then((response) => {
        let result = response.data;
        notification.messageType = result.IsSuccess ? "success" : "critical";
        notification.messageResultDetails[0].isSuccess = result.IsSuccess;
        if (result.IsSuccess === true) {
          this.setState({
            // trailer: lodash.cloneDeep(modTrailer),
            // modTrailer: lodash.cloneDeep(modTrailer),
            saveEnabled: Utilities.isInFunction(
              this.props.userDetails.EntityResult.FunctionsList,
              functionGroups.modify,
              fnContract
            ),
          });
          this.getContract(false);
        } else {
          this.setState({
            saveEnabled: Utilities.isInFunction(
              this.props.userDetails.EntityResult.FunctionsList,
              functionGroups.modify,
              fnContract
            ),
          });
          notification.messageResultDetails[0].errorMessage =
            result.ErrorList[0];
          console.log("Error in UpdateContract:", result.ErrorList);
        }

        this.props.onSaved(this.state.modContract, "update", notification);
      })
      .catch((error) => {
        notification.messageResultDetails[0].errorMessage = error;
        this.props.onSaved(this.state.modContract, "modify", notification);
        this.setState({
          saveEnabled: Utilities.isInFunction(
            this.props.userDetails.EntityResult.FunctionsList,
            functionGroups.modify,
            fnContract
          ),
        });
      });
  }

  handleReset = () => {
    try {
      let modContractItems = Utilities.addSeqNumberToListObject(
        lodash.cloneDeep(this.state.contract.ContractItems)
      );
      this.setState(
        {
          modContract: lodash.cloneDeep(this.state.contract),
          modContractItems: modContractItems,
          modAttributeMetaDataList: [],
        },
        () => {
          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {
            this.terminalSelectionChange(this.state.contract.TerminalCodes);
            this.handleResetAttributeValidationError();
          } else {
            this.localNodeAttribute();
            this.handleResetAttributeValidationError();
          }
        }
      );
      let validationErrors = { ...this.state.validationErrors };
      Object.keys(validationErrors).forEach((key) => {
        validationErrors[key] = "";
      });
      this.setState({ validationErrors });
    } catch (error) {
      console.log(
        "ContractDetailsComposite:Error occured on handleReset",
        error
      );
    }
  };
  getCarrierList() {
    axios(
      RestAPIs.GetCarrierCodes +
      "?ShareholderCode=" +
      this.props.selectedShareholder +
      "&Transportationtype=" +
      this.props.transportationType,
      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)
    )
      .then((response) => {
        let result = response.data;

        if (result.IsSuccess === true) {
          if (
            result.EntityResult !== null &&
            Array.isArray(result.EntityResult)
          ) {
            // const carrierOptions = [];
            // result.EntityResult.Table.forEach((carrier) => {
            //   carrierOptions.push({
            //     text: carrier.Common_Code,
            //     value: carrier.Common_Name,
            //   });
            // });

            let carrierOptions = Utilities.transferListtoOptions(
              result.EntityResult
            );
            this.setState({ carrierOptions });
          }
        } else {
          console.log("Error in GetCarrierListForRole:", result.ErrorList);
        }
      })
      .catch((error) => {
        console.log("Error while getting Carrier List:", error);
      });
  }

  handleForceClose = () => {
    try {
      let modContract = lodash.cloneDeep(this.state.modContract);
      const validationErrors = { ...this.state.validationErrors };

      if (modContract.Remarks === null || modContract.Remarks === "") {
        validationErrors["Remarks"] = "ShipmentOrder_RemarksRequired";
      }
      this.setState({ validationErrors });

      let returnValue = Object.values(validationErrors).every(function (value) {
        return value === "";
      });

      let contactStatusObj = {
        Shareholder: this.props.selectedShareholder,
        ContractCode: modContract.ContractCode,
        ForceClose: true,
        ForceCloseReason: modContract.Remarks,
        NewContractStatus: null,
      };
      
      if (returnValue === true)
      {

        let showForceCloseAuthenticationLayout =
        this.props.userDetails.EntityResult.IsWebPortalUser !== true
          ? true
          : false;
      let tempContactStatusObj = lodash.cloneDeep(contactStatusObj);
      this.setState({ showForceCloseAuthenticationLayout, tempContactStatusObj }, () => {
        if (showForceCloseAuthenticationLayout === false) {
          this.updateContractStatus();
        }
    });


      } 
      
    } catch (error) {
      console.log(
        "ContractDetailsComposite:Error occured on handleForceClose",
        error
      );
    }
  };

  updateContractStatus = () => {

    let contactStatusObj= lodash.cloneDeep(this.state.tempContactStatusObj);
    
    let obj = {
      ShareHolderCode: this.props.selectedShareholder,
      keyDataCode: KeyCodes.contractCode,
      //KeyCodes: keyCode,
      Entity: contactStatusObj,
    };
    let notification = {
      messageType: "critical",
      message: "ContractInfo_SavedStatus",
      messageResultDetails: [
        {
          keyFields: ["ContractInfo_ContractCode"],
          keyValues: [contactStatusObj.ContractCode],
          isSuccess: false,
          errorMessage: "",
        },
      ],
    };
    axios(
      RestAPIs.UpdateContractStatus,
      Utilities.getAuthenticationObjectforPost(
        obj,
        this.props.tokenDetails.tokenInfo
      )
    ).then((response) => {
      let result = response.data;
      notification.messageType = result.IsSuccess ? "success" : "critical";
      notification.messageResultDetails[0].isSuccess = result.IsSuccess;
      if (result.IsSuccess === true) {
        this.getContract(false);
      } else {
        notification.messageResultDetails[0].errorMessage = result.ErrorList[0];
      }
      toast(
        <ErrorBoundary>
          <NotifyEvent notificationMessage={notification}></NotifyEvent>
        </ErrorBoundary>,
        {
          autoClose: notification.messageType === "success" ? 10000 : false,
        }
      );
    });
  }

  handleViewShipments = () => {
    this.setState(
      {
        isShowTruckShipment: true,
        isShowBackButton: true,
      },
      () => this.props.handleOperationVisibility(false)
    );
  };

  handleViewDispatch = () => {
    this.setState(
      {
        isShowRailDispatch: true,
        isShowBackButton: true,
      },
      () => this.props.handleOperationVisibility(false)
    );
  };

  handleBack = () => {
    this.setState(
      {
        isShowTruckShipment: false,
        isShowRailDispatch: false,
        isShowBackButton: false,
      },
      () => {
        this.props.handleOperationVisibility(true);
        this.getContract(false);
      }
    );
  };

  handleShowBackButton = (status) => {
    this.setState({
      isShowBackButton: status,
    });
  };

  confirmAllowToUpdate = () => {
    return (
      <TranslationConsumer>
        {(t) => (
          <Modal open={this.state.isAllowtoUpdate} size="small">
            <Modal.Content>
              <div className="col col-lg-12">
                <h5>{t("Contract_ConfirmAllowToUpdate")}</h5>
              </div>
            </Modal.Content>
            <Modal.Footer>
              <Button
                type="primary"
                content={t("AccessCardInfo_Ok")}
                onClick={() => {
                  this.setState({ isAllowtoUpdate: false, scheduledContractUpdate: true }, () => {
                    this.handleSave();
                  });
                }}
              />
              <Button
                type="primary"
                content={t("Cancel")}
                onClick={() => {
                  this.setState({ isAllowtoUpdate: false, saveEnabled: true });
                }}
              />
            </Modal.Footer>
          </Modal>
        )}
      </TranslationConsumer>
    );
  };
  //Get KPI for contract
  getKPIList(shareholder, contractCode) {
    let KPIView = Utilities.isInFunction(
      this.props.userDetails.EntityResult.FunctionsList,
      functionGroups.view,
      fnKPIInformation
    );
    if (KPIView === true) {

      var transportationType = this.props.transportationType;
      let Parameters = transportationType === Constants.TransportationType.ROAD ? [{ key: "ShareholderCode", value: shareholder }, {
        key: "ContractCode", value: contractCode
      }] : [{
        key: "ContractCode", value: contractCode
      }];
      let objKPIRequestData = {
        PageName: kpiContractDetail,
        TransportationType: transportationType,
        InputParameters: Parameters
      };
      axios(
        RestAPIs.GetKPI,
        Utilities.getAuthenticationObjectforPost(
          objKPIRequestData,
          this.props.tokenDetails.tokenInfo
        )
      )
        .then((response) => {
          var result = response.data;
          if (result.IsSuccess === true) {
            this.setState({
              contractKPIList: result.EntityResult.ListKPIDetails,
            });
          } else {
            this.setState({ contractKPIList: [] });
            console.log("Error in contract KPIList:", result.ErrorList);
          }
        })
        .catch((error) => {
          console.log("Error while getting Contract KPIList:", error);
        });
    }
  }

  handleOperation() {
    if (this.state.showAuthenticationLayout)
      return this.addUpdateContract;
    else if (this.state.showForceCloseAuthenticationLayout)
      return this.updateContractStatus;
    
  }

  getFunctionGroupName() {
     if (this.state.showForceCloseAuthenticationLayout)
      return fnContractForceClose;
    else if (this.state.showAuthenticationLayout)
      return fnContract;
  }

  handleAuthenticationClose = () => {
    this.setState({
      showAuthenticationLayout: false,
      showForceCloseAuthenticationLayout: false,
    });
  };

  render() {
    let listOptions = {
      terminalCodes: this.state.terminalOptions,
      contractTypeOptions: Utilities.transferListtoOptions(
        Object.keys(Constants.contractType)
      ),
      carrierOptions: this.state.carrierOptions,
      unitOfVolume: this.state.volumeUOMOptions,
      unitOfWeight: this.state.weightUOMOptions,
      finishedProductOptions: this.state.finishedProductOptions,
      customerDestinationOptions: this.state.customerDestinationOptions,
    };
    const popUpContents = [
      {
        fieldName: "ShipmentOrder_LastUpdated",
        fieldValue:
          new Date(
            this.state.modContract.LastUpdatedTime
          ).toLocaleDateString() +
          " " +
          new Date(this.state.modContract.LastUpdatedTime).toLocaleTimeString(),
      },
      {
        fieldName: "ShipmentOrder_LastActiveTime",
        fieldValue:
          this.state.modContract.LastActiveTime !== undefined &&
            this.state.modContract.LastActiveTime !== null
            ? new Date(
              this.state.modContract.LastActiveTime
            ).toLocaleDateString() +
            " " +
            new Date(
              this.state.modContract.LastActiveTime
            ).toLocaleTimeString()
            : "",
      },
      {
        fieldName: "ShipmentOrder_CreatedTime",
        fieldValue:
          new Date(this.state.modContract.CreatedTime).toLocaleDateString() +
          " " +
          new Date(this.state.modContract.CreatedTime).toLocaleTimeString(),
      },
    ];

    return this.state.isReadyToRender ? (
      <div>
        {this.state.isShowTruckShipment ||
          this.state.isShowRailDispatch ? null : (
          <ErrorBoundary>
            <TMDetailsHeader
              entityCode={this.state.contract.ContractCode}
              newEntityName="ContractInfo_Title"
              popUpContents={popUpContents}
            ></TMDetailsHeader>
          </ErrorBoundary>
        )}
        {this.state.isShowTruckShipment ? (
          <ErrorBoundary>
            <TruckShipmentProject
              shipmentSource={Constants.shipmentFrom.Contract}
              shipmentSourceCode={this.state.modContract.ContractCode}
              selectedShareholder={this.props.selectedShareholder}
              shipmentSourceCompartmentItems={this.state.modContractItems}
              shipmentSourceDetails={this.state.modContract}
              isShowBackButton={this.handleShowBackButton}
            />
          </ErrorBoundary>
        ) : this.state.isShowRailDispatch ? (
          <ErrorBoundary>
            <RailDispatchProject
              shipmentSource={Constants.shipmentFrom.Contract}
              shipmentSourceCode={this.state.modContract.ContractCode}
              selectedShareholder={this.props.selectedShareholder}
              shipmentSourceCompartmentItems={this.state.modContractItems}
              shipmentSourceDetails={this.state.modContract}
              isShowBackButton={this.handleShowBackButton}
            />
          </ErrorBoundary>
        ) : (
          <> <TMDetailsKPILayout KPIList={this.state.contractKPIList}> </TMDetailsKPILayout>
            <ErrorBoundary>
              <ContractDetails
                contract={this.state.contract}
                modContract={this.state.modContract}
                modContractItems={this.state.modContractItems}
                validationErrors={this.state.validationErrors}
                listOptions={listOptions}
                onFieldChange={this.handleChange}
                onDateTextChange={this.handleDateTextChange}
                onAllTerminalsChange={this.handleAllTerminalsChange}
                handleAddPlan={this.handleAddPlan}
                handleDeletePlan={this.handleDeletePlan}
                selectedPlanRow={this.state.selectedPlanRow}
                handleRowSelectionChange={this.handleRowSelectionChange}
                handleCellDataEdit={this.handleCellDataEdit}
                isEnterpriseNode={
                  this.props.userDetails.EntityResult.IsEnterpriseNode
                }
                attributeValidationErrors={this.state.attributeValidationErrors}
                onAttributeDataChange={this.handleAttributeDataChange}
                handleCompAttributeCellDataEdit={
                  this.handleCompAttributeCellDataEdit
                }
                modAttributeMetaDataList={this.state.modAttributeMetaDataList}
                toggleExpand={this.toggleExpand}
                expandedRows={this.state.expandedRows}
                compartmentDetailsPageSize={
                  this.props.userDetails.EntityResult.PageAttibutes
                    .WebPortalListPageSize
                }
                handleForceClose={this.handleForceClose}
                isEnableForceClose={this.state.isEnableForceClose}
                handleViewShipments={this.handleViewShipments}
                handleViewDispatch={this.handleViewDispatch}
                isAutoGeneratedContractCode={
                  this.state.isAutoGeneratedContractCode
                }
              ></ContractDetails>
            </ErrorBoundary></>
        )}
        {this.state.isShowTruckShipment || this.state.isShowRailDispatch ? (
          this.state.isShowBackButton ? (
            <div className="row">
              <div className="col col-lg-8" style={{ marginTop: "1%" }}>
                <TranslationConsumer>
                  {(t) => (
                    <Button
                      className="backButton"
                      onClick={this.handleBack}
                      content={t("Back")}
                    ></Button>
                  )}
                </TranslationConsumer>
              </div>
            </div>
          ) : null
        ) : (
          <ErrorBoundary>
            <TMDetailsUserActions
              handleBack={this.props.onBack}
              handleSave={this.handleSave}
              handleReset={this.handleReset}
              saveEnabled={this.state.saveEnabled}
            ></TMDetailsUserActions>
          </ErrorBoundary>
        )}
        {this.state.isAllowtoUpdate ? this.confirmAllowToUpdate() : null}

        {this.state.showAuthenticationLayout || this.state.showForceCloseAuthenticationLayout ? (
          <UserAuthenticationLayout
            Username={this.props.userDetails.EntityResult.UserName}
            functionName={
              this.state.contract.ContractCode   === ""
                ? functionGroups.add
                : functionGroups.modify
            }
            functionGroup={this.getFunctionGroupName()}
            handleOperation={this.handleOperation()}
            handleClose={this.handleAuthenticationClose}
          ></UserAuthenticationLayout>
        ) : null}

      </div>
    ) : (
      <LoadingPage message="Loading"></LoadingPage>
    );
  }
}

const mapStateToProps = (state) => {
  return {
    userDetails: state.getUserDetails.userDetails,
    tokenDetails: state.getUserDetails.TokenAuth,
  };
};

export default connect(mapStateToProps)(ContractDetailsComposite);
