import React, { useState } from "react";
import {
  Select,
  Modal,
  Icon,
  Input,
  DatePicker,
  Tab,
  Checkbox,
  Button,
  Accordion,
  Badge,
  Tooltip,
} from "@scuf/common";
import { useTranslation } from "@scuf/localization";
import { AttributeDetails } from "../Details/AttributeDetails";
import PropTypes from "prop-types";
import { DataTable } from "@scuf/datatable";
import { AssociatedTerminals } from "../Common/AssociatedTerminals";
import { fnSBC } from "../../../JS/FunctionGroups";
import {
  getOptionsWithSelect,
  getCurrentDateFormat,
  handleIsRequiredCompartmentCell,
} from "../../../JS/functionalUtilities";
import * as Constants from "../../../JS/Constants";
import ErrorBoundary from "../../ErrorBoundary";
import * as Utilities from "../../../JS/Utilities";
//import { convertStringtoDecimal } from "../../../JS/Utilities";

TruckShipmentDetails.propTypes = {
  shipment: PropTypes.object.isRequired,
  modShipment: PropTypes.object.isRequired,
  modCustomValues: PropTypes.object.isRequired,
  //modAssociations: PropTypes.array.isRequired,
  modCompartmentPlans: PropTypes.array.isRequired,
  modProductPlans: PropTypes.array.isRequired,
  modLoadingDetails: PropTypes.array.isRequired,
  loadingDetails: PropTypes.array.isRequired,
  expandedRows: PropTypes.array.isRequired,
  validationErrors: PropTypes.object.isRequired,
  listOptions: PropTypes.shape({
    terminalCodes: PropTypes.array,
    quantityUOMOptions: PropTypes.array,
    vehicleOptions: PropTypes.array,
    driverOptions: PropTypes.array,
    compSeqOptions: PropTypes.array,
    finishedProductOptions: PropTypes.array,
    shipmentFromOptions: PropTypes.array,
    customerDestinationOptions: PropTypes.array,
    transloadingOptions: PropTypes.array,
    marineReceiptCompCodes: PropTypes.array,
    marineReceiptCodes: PropTypes.array,
  }).isRequired,
  onFieldChange: PropTypes.func.isRequired,
  onDateTextChange: PropTypes.func.isRequired,
  onAllTerminalsChange: PropTypes.func.isRequired,
  handleCompartmentPlanCellDataEdit: PropTypes.func.isRequired,
  handleProductPlanCellDataEdit: PropTypes.func.isRequired,
  selectedProductPlans: PropTypes.array.isRequired,
  selectedCompartmentPlans: PropTypes.array.isRequired,
  handleCompartmentPlansSelectionChange: PropTypes.func.isRequired,
  handleProductPlansSelectionChange: PropTypes.func.isRequired,
  handleAddCompartmentPlan: PropTypes.func.isRequired,
  handleDeleteCompartmentPlan: PropTypes.func.isRequired,
  handleAddProductPlan: PropTypes.func.isRequired,
  handleDeleteProductPlan: PropTypes.func.isRequired,
  onActiveStatusChange: PropTypes.func.isRequired,
  onVehicleChange: PropTypes.func.isRequired,
  onVehicleSearchChange: PropTypes.func.isRequired,
  onDriverSearchChange: PropTypes.func.isRequired,
  toggleExpand: PropTypes.func.isRequired,
  isEnterpriseNode: PropTypes.bool.isRequired,
  //IsWebPortalUser: PropTypes.bool.isRequired,
  isDisableSubmitForApproval: PropTypes.bool.isRequired,
  shipmentType: PropTypes.string.isRequired,
  attributeValidationErrors: PropTypes.object.isRequired,
  handleAttributeCellDataEdit: PropTypes.func.isRequired,
  handleCompAttributeCellDataEdit: PropTypes.func.isRequired,
  handleProdPlanAttributeCellDataEdit: PropTypes.func.isRequired,
  onTabChange: PropTypes.func.isRequired,
  attributeToggleExpand: PropTypes.func.isRequired,
  handleTopUpDecantApproval: PropTypes.func.isRequired,
  selectedAttributeList: PropTypes.object.isRequired,
  activeTab: PropTypes.number.isRequired,
  compartmentDetailsPageSize: PropTypes.number.isRequired,
  prodTypeTab: PropTypes.array.isRequired,
  compTypeTab: PropTypes.array.isRequired,
  LoadTypeTab: PropTypes.array.isRequired,
  customerInventoryTab: PropTypes.array.isRequired,
  productAllocationTab: PropTypes.array.isRequired,
  //productAllocationShareholderTab: PropTypes.array.isRequired,
  customerInventory: PropTypes.array.isRequired,
  isSlotbookinginUI: PropTypes.bool.isRequired,
  productAllocationList: PropTypes.array.isRequired,
  productShareholderAllocationList: PropTypes.array.isRequired,
  ProdAllocEntity: PropTypes.string.isRequired,
  handleCellCheck: PropTypes.func.isRequired,
  handleLoadingDetailsChange: PropTypes.func.isRequired,
  ddlTopUpDecantStatus: PropTypes.string.isRequired,
  isMarineTransloading: PropTypes.bool.isRequired,
  isRailTransloading: PropTypes.bool.isRequired,
  isPlanned: PropTypes.bool.isRequired,
  updateTransloadingInfo: PropTypes.func.isRequired,
  handleTransLoadCompSeq: PropTypes.func,
  shipmentSource: PropTypes.number,
  isAutoGeneratedShipmentCode: PropTypes.bool.isRequired,
  isEnforcingEnabled: PropTypes.bool.isRequired,
  isBonded: PropTypes.bool.isRequired,
  overrideSequence: PropTypes.func.isRequired,
  isOverrideSequenceButtonEnabled: PropTypes.bool.isRequired,
  updateShipmentBondNo: PropTypes.func.isRequired,
  updateShipmentAllowed: PropTypes.bool.isRequired,
  ShipmentBay: PropTypes.string.isRequired,
  UpdateShipmentDriver: PropTypes.func.isRequired,
  isWebportalCarrierRoleUser: PropTypes.bool.isRequired,
};

TruckShipmentDetails.defaultProps = {
  listOptions: {
    quantityUOMOptions: [],
    vehicleOptions: [],
    terminalCodes: [],
    driverOptions: [],
    compSeqOptions: [],
    finishedProductOptions: [],
    customerDestinationOptions: {},
    shipmentFromOptions: [],
    transloadingOptions: [],
  },
  isEnterpriseNode: false,
  //IsWebPortalUser: false,
  isDisableSubmitForApproval: true,
  isSlotbookinginUI: false,
  isEnforcingEnabled: false,
  isBonded: false,
  ShipmentBay: "",
};

export default function TruckShipmentDetails({
  shipment,
  modShipment,
  modCustomValues,
  modCompartmentPlans,
  modProductPlans,
  modLoadingDetails,
  loadingDetails,
  validationErrors,
  listOptions,
  onFieldChange,
  onDateTextChange,
  onAllTerminalsChange,
  selectedProductPlans,
  selectedCompartmentPlans,
  handleCompartmentPlansSelectionChange,
  handleProductPlansSelectionChange,
  handleCompartmentPlanCellDataEdit,
  handleProductPlanCellDataEdit,
  handleAddCompartmentPlan,
  handleDeleteCompartmentPlan,
  handleAddProductPlan,
  handleDeleteProductPlan,
  onActiveStatusChange,
  onVehicleChange,
  onVehicleSearchChange,
  onDriverSearchChange,
  isEnterpriseNode,
  shipmentType,
  prodTypeTab,
  compTypeTab,
  LoadTypeTab,
  customerInventoryTab,
  expandedRows,
  toggleExpand,
  attributeValidationErrors,
  handleAttributeCellDataEdit,
  handleCompAttributeCellDataEdit,
  handleProdPlanAttributeCellDataEdit,
  selectedAttributeList,
  compartmentDetailsPageSize,
  attributeToggleExpand,
  customerInventory,
  activeTab,
  onTabChange,
  //IsWebPortalUser,
  handleTopUpDecantApproval,
  //isDisableSubmitForApproval,
  isSlotbookinginUI,
  productAllocationTab,
  handleCellCheck,
  handleLoadingDetailsChange,
  productAllocationList,
  productShareholderAllocationList,
  ProdAllocEntity,
  ddlTopUpDecantStatus,
  isMarineTransloading,
  isRailTransloading,
  isPlanned,
  updateTransloadingInfo,
  handleTransLoadCompSeq,
  shipmentSource,
  isAutoGeneratedShipmentCode,
  isEnforcingEnabled,
  isBonded,
  overrideSequence,
  isOverrideSequenceButtonEnabled,
  updateShipmentBondNo,
  updateShipmentAllowed,
  ShipmentBay,
  UpdateShipmentDriver,
  isWebportalCarrierRoleUser
}) {
  const [t] = useTranslation();
  const [modelOpen, setModelOpen] = useState(false);
  const [modCellData, setModCellData] = useState({});
  const [modTopUpEnable, setModTopUpEnable] = useState(false);
  if (
    modCustomValues["EnableTopUpDecant"] === "TRUE" &&
    modCustomValues["TopUpDecantAllow"] === "TRUE" &&
    modCustomValues["f_ViewShipTopUpDecantApprovalAccess"] === "TRUE" &&
    modCustomValues["TopUpDecantStatusText"] ===
      Constants.TopUpDecantApprovalStatus.SUBMITTED
  ) {
    modCustomValues["TopUpDecantStatusVisible"] = "FALSE";
    modCustomValues["TopUpDecantStatusDropDownVisible"] = "TRUE";
  }
  let submitBtnName =
    modCustomValues["f_ViewShipTopUpDecantApprovalAccess"] === "TRUE"
      ? "ViewShipmentTopUpDecant_AutoApproved"
      : "ViewShipmentTopUpDecant_SubmitForApproved";

  if (modCustomValues["TopUpDecantApprovalEnabled"] === "TRUE")
    submitBtnName = "ViewShipmentTopUpDecant_AutoApproved";

  function displayTMModalForceCompleteConfirm() {
    return (
      <Modal open={modelOpen} size="small">
        <Modal.Content>
          <div>
            <b>{t("ForceToComplete")}</b>
          </div>
        </Modal.Content>
        <Modal.Footer>
          <Button
            type="secondary"
            content={t("Cancel")}
            onClick={() => {
              setModelOpen(false);
              handleCellCheck(modCellData, false);
            }}
          />
          <Button
            type="primary"
            content={t("Confirm")}
            onClick={() => {
              setModelOpen(false);
              handleCellCheck(modCellData, true);
            }}
          />
        </Modal.Footer>
      </Modal>
    );
  }

  const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {
    let attributeValidation = [];
    attributeValidation = attributeValidationErrors.find(
      (selectedAttribute) => {
        return selectedAttribute.TerminalCode === terminal;
      }
    );
    return attributeValidation.attributeValidationErrors;
  };

  const handleAttributeType = (data) => {
    const attribute = data.rowData;

    const handleAttributeDateValue = (dateval) => {
      var chars = dateval.split("-");
      return new Date(chars[0], chars[1] - 1, chars[2]);
    };
    const convertAttributeDatetoString = (data, value) => {
      var Dateval = new Date(value);
      value =
        Dateval.getFullYear() +
        "-" +
        ("0" + (Dateval.getMonth() + 1)).slice(-2) +
        "-" +
        ("0" + Dateval.getDate()).slice(-2);
      attribute.AttributeType === Constants.shipmentType.COMPARTMENT
        ? handleCompAttributeCellDataEdit(data, value)
        : handleProdPlanAttributeCellDataEdit(data, value);
      //handleCompAttributeCellDataEdit(attribute,value);
    };

    try {
      return attribute.DataType.toLowerCase() ===
        Constants.DataType.STRING.toLowerCase() ? (
        <Input
          fluid
          value={attribute.AttributeValue}
          disabled={attribute.IsReadonly}
          onChange={(value) =>
            attribute.AttributeType === Constants.shipmentType.COMPARTMENT
              ? handleCompAttributeCellDataEdit(data, value)
              : handleProdPlanAttributeCellDataEdit(data, value)
          }
          reserveSpace={false}
        />
      ) : attribute.DataType.toLowerCase() ===
        Constants.DataType.INT.toLowerCase() ? (
        <Input
          fluid
          value={attribute.AttributeValue}
          disabled={attribute.IsReadonly}
          onChange={(value) =>
            attribute.AttributeType === Constants.shipmentType.COMPARTMENT
              ? handleCompAttributeCellDataEdit(data, value)
              : handleProdPlanAttributeCellDataEdit(data, value)
          }
          reserveSpace={false}
        />
      ) : attribute.DataType.toLowerCase() ===
          Constants.DataType.FLOAT.toLowerCase() ||
        attribute.DataType.toLowerCase() ===
          Constants.DataType.LONG.toLowerCase() ||
        attribute.DataType.toLowerCase() ===
          Constants.DataType.DOUBLE.toLowerCase() ? (
        <Input
          fluid
          value={attribute.AttributeValue}
          disabled={attribute.IsReadonly}
          onChange={(value) =>
            attribute.AttributeType === Constants.shipmentType.COMPARTMENT
              ? handleCompAttributeCellDataEdit(data, value)
              : handleProdPlanAttributeCellDataEdit(data, value)
          }
          reserveSpace={false}
        />
      ) : attribute.DataType.toLowerCase() ===
        Constants.DataType.BOOL.toLowerCase() ? (
        <Checkbox
          checked={
            attribute.AttributeValue.toString().toLowerCase() === "true"
              ? true
              : false
          }
          disabled={attribute.IsReadonly}
          onChange={(value) =>
            attribute.AttributeType === Constants.shipmentType.COMPARTMENT
              ? handleCompAttributeCellDataEdit(data, value)
              : handleProdPlanAttributeCellDataEdit(data, value)
          }
        ></Checkbox>
      ) : attribute.DataType.toLowerCase() ===
        Constants.DataType.DATETIME.toLowerCase() ? (
        <DatePicker
          fluid
          value={
            attribute.AttributeValue === null ||
            attribute.AttributeValue === undefined ||
            attribute.AttributeValue === ""
              ? ""
              : handleAttributeDateValue(attribute.AttributeValue)
          }
          disabled={attribute.IsReadonly}
          showYearSelector="true"
          minuteStep={1}
          onChange={(value) => convertAttributeDatetoString(data, value)}
          reserveSpace={false}
        />
      ) : null;
    } catch (error) {
      console.log(
        "TruckShipmentDetails:Error occured on handleAttributeType",
        error
      );
    }
  };

  const handleIsRequiredCompAttributes = (data) => {
    return data.rowData.IsMandatory ? (
      <div>
        <span>{data.rowData.AttributeName}</span>
        <div class="ui red circular empty label badge  circle-padding" />
      </div>
    ) : (
      <div>
        <span>{data.rowData.AttributeName}</span>
      </div>
    );
  };

  const attributeExpanderTemplate = (data) => {
    //const open = expandedRows.includes(data.rowData);
    const open =
      expandedRows.findIndex((x) => x.SeqNumber === data.rowData.SeqNumber) >= 0
        ? true
        : false;

    return (
      <div
        onClick={() => attributeToggleExpand(data.rowData, open)}
        className="compartmentIcon gridButtonFontColor"
      >
        <span>{open ? t("Hide_Attributes") : t("View_Attributes")}</span>
        <Icon
          root="common"
          name={open ? "caret-up" : "caret-down"}
          className="margin_l10"
        />
      </div>
    );
  };

  function attributeRowExpansionTemplate(data) {
    return Array.isArray(data.AttributesforUI) &&
      data.AttributesforUI.length > 0 ? (
      <div className="childTable ChildGridViewAllShipmentLoadingDetails">
        <DataTable
          data={data.AttributesforUI}
          rows={compartmentDetailsPageSize}
        >
          {isEnterpriseNode ? (
            <DataTable.Column
              className="compColHeight"
              key="TerminalCode"
              field="TerminalCode"
              header={t("CompartmentTerminal")}
              editable={false}
            ></DataTable.Column>
          ) : (
            ""
          )}
          <DataTable.Column
            className="compColHeight"
            key="AttributeName"
            header={t("CompartmentAttributeName")}
            renderer={handleIsRequiredCompAttributes}
            editable={false}
          ></DataTable.Column>
          <DataTable.Column
            className="compColHeight"
            header={t("CompartmentAttributeValue")}
            renderer={handleAttributeType}
          />
          {Array.isArray(data.AttributesforUI) &&
          data.AttributesforUI.length > compartmentDetailsPageSize ? (
            <DataTable.Pagination />
          ) : (
            ""
          )}
        </DataTable>
      </div>
    ) : (
      <div className="compartmentIcon">
        <div className="gridButtonAlignLeft">
          {t("CustomerInventory_NoRecordsFound")}
        </div>
      </div>
    );
  }

  const handleCustomEditDropDown = (cellData, dropDownoptions, type) => {
    try {
      if (type === Constants.shipmentType.COMPARTMENT)
        return (
          <Select
            className="selectDropwdown"
            value={modCompartmentPlans[cellData.rowIndex][cellData.field]}
            fluid
            options={dropDownoptions}
            onChange={(value) =>
              handleCompartmentPlanCellDataEdit(value, cellData)
            }
            onFocus={() => {
              if (
                cellData.field === "TransCompSequenceNumber" &&
                modCompartmentPlans[cellData.rowIndex]["TransReceiptCode"] !==
                  null
              )
                handleTransLoadCompSeq(
                  modCompartmentPlans[cellData.rowIndex]["TransReceiptCode"]
                );
            }}
            indicator="required"
            reserveSpace={false}
            search={true}
            noResultsMessage={t("noResultsMessage")}
          />
        );
      else
        return (
          <Select
            className="selectDropwdown"
            value={modProductPlans[cellData.rowIndex][cellData.field]}
            fluid
            options={dropDownoptions}
            onChange={(value) => handleProductPlanCellDataEdit(value, cellData)}
            indicator="required"
            reserveSpace={false}
            search={true}
            noResultsMessage={t("noResultsMessage")}
          />
        );
    } catch (error) {
      console.log(
        shipmentType + ":Error occured on handleCustomEditDropDown",
        error
      );
    }
  };
  const handleCustomerEditDropDown = (cellData, type) => {
    let customerOptions = [];
    if (
      listOptions.customerDestinationOptions !== undefined &&
      listOptions.customerDestinationOptions !== null
    ) {
      Object.keys(listOptions.customerDestinationOptions).forEach((customer) =>
        customerOptions.push({ text: customer, value: customer })
      );
    }
    return handleCustomEditDropDown(cellData, customerOptions, type);
  };
  const handleDestinationEditDropDown = (cellData, type) => {
    let destinationOptions = [];
    if (
      listOptions.customerDestinationOptions !== undefined &&
      listOptions.customerDestinationOptions !== null
    ) {
      if (
        listOptions.customerDestinationOptions[
          cellData.rowData.CustomerCode
        ] !== undefined &&
        Array.isArray(
          listOptions.customerDestinationOptions[cellData.rowData.CustomerCode]
        )
      ) {
        listOptions.customerDestinationOptions[
          cellData.rowData.CustomerCode
        ].forEach((destination) =>
          destinationOptions.push({ text: destination, value: destination })
        );
      }
    }
    return handleCustomEditDropDown(cellData, destinationOptions, type);
  };
  const handleCustomEditTextBox = (cellData, type) => {
    if (type === Constants.shipmentType.COMPARTMENT)
      return (
        <Input
          fluid
          value={modCompartmentPlans[cellData.rowIndex][cellData.field]}
          onChange={(value) =>
            handleCompartmentPlanCellDataEdit(value, cellData)
          }
          reserveSpace={false}
        />
      );
    else
      return (
        <Input
          fluid
          value={modProductPlans[cellData.rowIndex][cellData.field]}
          onChange={(value) => handleProductPlanCellDataEdit(value, cellData)}
          reserveSpace={false}
        />
      );
  };

  const decimalDisplayValues = (cellData) => {
    const { value } = cellData;
    if (typeof value === "number" && value !== null) {
      return value.toLocaleString();
    } else {
      return value;
    }
  };

  const getBlendSpecData = () => {
    //let compBlendInfo = "";
    //let stringLength = 0;

    let blendSpec = [];

    for (let idx = 0; idx < modLoadingDetails.length; idx++) {
      let compStatus = Constants.ShipmentCompartmentStatus["EMPTY"];
      compStatus = modLoadingDetails[idx]?.Compartment_Status
        ? Constants.ShipmentCompartmentStatus[
            modLoadingDetails[idx]?.Compartment_Status
          ]
        : compStatus;

      if (compStatus === Constants.ShipmentCompartmentStatus.EMPTY) {
        blendSpec.push(
          <>
            <Tooltip
              element={
                <Badge className="EmptyLabelStyle">
                  {modLoadingDetails[idx]?.SeqNo}
                </Badge>
              }
              content={t("Spec_ToolTip_NotLoaded")}
              size="mini"
            />
          </>
        );
        //compBlendInfo = compBlendInfo + `<span class="EmptyLabelStyle">${modLoadingDetails[idx]?.SeqNo}</span>`;
      } else {
        modLoadingDetails[idx]?.BlendState === 1
          ? blendSpec.push(
              <>
                <Tooltip
                  element={
                    <Badge className="InSpecLabelStyle" color="green">
                      {modLoadingDetails[idx]?.SeqNo}
                    </Badge>
                  }
                  content={t("Spec_ToolTip_InSpec")}
                  size="mini"
                />
              </>
            )
          : //compBlendInfo = compBlendInfo + `<span class="InSpecLabelStyle">${modLoadingDetails[idx]?.SeqNo}</span>`
          modLoadingDetails[idx]?.BlendState === 2
          ? blendSpec.push(
              <>
                <Tooltip
                  element={
                    <Badge
                      className="OffSpecCorrectableLabelStyle"
                      color="orange"
                    >
                      {modLoadingDetails[idx]?.SeqNo}
                    </Badge>
                  }
                  content={t("Spec_ToolTip_OffSpecCorrectable")}
                  size="mini"
                />
              </>
            )
          : //compBlendInfo = compBlendInfo + `<span class="OffSpecCorrectableLabelStyle">${modLoadingDetails[idx]?.SeqNo}</span>`
          modLoadingDetails[idx]?.BlendState === 3
          ? blendSpec.push(
              <>
                <Tooltip
                  element={
                    <Badge
                      className="OffSpecNotCorrectableLabelStyle"
                      color="red"
                    >
                      {modLoadingDetails[idx]?.SeqNo}
                    </Badge>
                  }
                  content={t("Spec_ToolTip_OffSpecNotCorrectable")}
                  size="mini"
                />
              </>
            )
          : //compBlendInfo = compBlendInfo + `<span class="OffSpecNotCorrectableLabelStyle">${modLoadingDetails[idx]?.SeqNo}</span>`
            //compBlendInfo = compBlendInfo + `<span class="EmptyLabelStyle">${modLoadingDetails[idx]?.SeqNo}</span>`
            blendSpec.push(
              <>
                <Tooltip
                  element={
                    <Badge className="EmptyLabelStyle">
                      {modLoadingDetails[idx]?.SeqNo}
                    </Badge>
                  }
                  content={t("Spec_ToolTip_NotLoaded")}
                  size="mini"
                />
              </>
            );
      }
    }
    return blendSpec;
  };

  const getVehicleHSEValue = () => {
    let hseStatus = "";
    try {
      let hSEInpectionStatus = Constants.HSEInspectionStatus.NOT_DONE;
      if (modShipment.HSEInspectionStatus) {
        hSEInpectionStatus = modShipment.HSEInspectionStatus;
      }
      if (
        Constants.ShipmentStatus[modShipment.Status.toUpperCase()] ===
        Constants.ShipmentStatus.CLOSED
      ) {
        hseStatus = Object.keys(Constants.HSEInspectionStatus).find(
          (key) => Constants.HSEInspectionStatus[key] === hSEInpectionStatus
        );
      } else {
        hseStatus = modCustomValues.VehicleHSEStatus;
      }
    } catch (error) {
      console.log("Error in getVehicleHSEValue" + error);
    }
    return hseStatus;
  };

  const expanderTemplate = (data) => {
    const open =
      expandedRows.findIndex((x) => x.SeqNumber === data.rowData.SeqNumber) >= 0
        ? true
        : false;
    return (
      <div
        onClick={() => toggleExpand(data.rowData, open)}
        className="compartmentIcon gridButtonFontColor"
      >
        {/* <span>{open ? t("Hide_Attributes") : t("View_Attributes")}</span> */}
        <Icon
          root="common"
          name={open ? "slidercontrols-minus" : "ellipsis-horizontal"}
          className="margin_l10"
        />
      </div>
    );
  };

  const handleForceComplete = (data) => {
    //let modChkForceCompleted = modCustomValues.EnableChkForceCompleted === "TRUE" ? false : true;
    let chkForceCompleted = false;
    if (
      data.rowData.Compartment_Status !== null ||
      data.rowData.Compartment_Status !== undefined
    )
      chkForceCompleted =
        Constants.ShipmentStatus[modShipment.Status] ===
          Constants.ShipmentStatus.CLOSED ||
        Constants.ShipmentCompartmentStatus[data.rowData.Compartment_Status] ===
          Constants.ShipmentCompartmentStatus.COMPLETED ||
        Constants.ShipmentCompartmentStatus[data.rowData.Compartment_Status] ===
          Constants.ShipmentCompartmentStatus.LOADING ||
        Constants.ShipmentCompartmentStatus[data.rowData.Compartment_Status] ===
          Constants.ShipmentCompartmentStatus.FORCE_COMPLETED
          ? true
          : false;

    return (
      <Checkbox
        className="forceCompleteChkBox"
        disabled={
          modCustomValues.EnableChkForceCompleted === "FALSE"
            ? true
            : data.rowData.Compartment_Status !== null ||
              data.rowData.Compartment_Status !== undefined
            ? chkForceCompleted
            : false
        }
        checked={data.rowData.Force_Complete}
        onChange={(cellData) => {
          //console.log("CellData", cellData)
          //e.stopPropagation();
          setModCellData(data);
          if (cellData) {
            setModelOpen(true);
          } else {
            handleCellCheck(data, cellData);
          }
        }}
      />
    );
  };

  const handleInputTextBox = (data) => {
    let field = data.field;
    let topUpdecantedComps = loadingDetails.Table.filter((item) => {
      return (
        item.TopUpDecantQuantity !== "" &&
        item.TopUpDecantQuantity !== null &&
        item.TopUpDecantQuantity !== undefined
      );
    });
    return (
      <Input
        fluid
        value={data.rowData[field]} //Top_Up_Decant_Quantity}
        onChange={(value) => handleLoadingDetailsChange(value, data)}
        onFocus={() => {
          setModTopUpEnable(false);
          if (field === "Top_Up_Decant_Quantity" || field === "Notes")
            setModTopUpEnable(true);
          else setModTopUpEnable(false);
        }}
        disabled={
          field === "Top_Up_Decant_Quantity" || field === "Notes"
            ? modCustomValues["EnableTopUpDecant"] === "TRUE" &&
              (Constants.ShipmentStatus[modShipment.Status] ===
                Constants.ShipmentStatus.PARTIALLY_LOADED ||
                Constants.ShipmentStatus[modShipment.Status] ===
                  Constants.ShipmentStatus.MANUALLY_LOADED ||
                Constants.ShipmentStatus[modShipment.Status] ===
                  Constants.ShipmentStatus.AUTO_LOADED) &&
              (Constants.ShipmentCompartmentStatus[
                data.rowData.Compartment_Status
              ] === Constants.ShipmentCompartmentStatus.COMPLETED ||
                Constants.ShipmentCompartmentStatus[
                  data.rowData.Compartment_Status
                ] === Constants.ShipmentCompartmentStatus.PART_FILLED ||
                Constants.ShipmentCompartmentStatus[
                  data.rowData.Compartment_Status
                ] === Constants.ShipmentCompartmentStatus.OVER_FILLED) &&
              topUpdecantedComps.length === 0
              ? false
              : true
            : field === "Adjust_Plan"
            ? Constants.ShipmentStatus[modShipment.Status] ===
              Constants.ShipmentStatus.CLOSED
              ? true
              : false
            : false
        }
        reserveSpace={false}
      />
    );
  };

  function rowExpansionTemplate(data) {
    let compData = [];
    compData.push(data);
    return Array.isArray(compData) && compData.length > 0 ? (
      <div className="ChildGridViewAllShipmentLoadingDetails">
        <DataTable data={compData}>
          <DataTable.Column
            className="compColHeight"
            key="Left_Quantity"
            field="Left_Quantity"
            header={t("Shipment_Compartment_Left_Quantity")}
          ></DataTable.Column>
          <DataTable.Column
            className="compColHeight"
            field={"Adjust_Plan"}
            header={t("ViewShipment_AdjustmentToPlannedQuantity")}
            renderer={handleInputTextBox}
          />
          <DataTable.Column
            className="compColHeight"
            field="Top_Up_Decant_Quantity"
            header={t("ViewShipment_TopUpDecantQty")}
            renderer={handleInputTextBox}
          />
          <DataTable.Column
            className="compColHeight"
            field="Notes"
            header={t("ViewShipment_Notes")}
            renderer={handleInputTextBox}
          />
        </DataTable>
        {compData[0].BaseProductDetails.map((item) => {
          let itemList = [item];
          return (
            <>
              <DataTable data={itemList}>
                <DataTable.Column
                  className="compColHeight"
                  field={"baseproductcode"}
                  header={t("BaseProductCode")}
                  editable={false}
                />
                <DataTable.Column
                  className="compColHeight"
                  field="plannedquantity"
                  header={t("ViewShipmentCompartment_PlannedQuantity")}
                  editable={false}
                />
                <DataTable.Column
                  className="compColHeight"
                  field="revisedplannedquantity"
                  header={t("ViewShipmentCompartment_AdjustedQuantity")}
                  editable={false}
                />
                <DataTable.Column
                  className="compColHeight"
                  field="loadedquantity"
                  header={t("ContractInfo_LoadedQty")}
                  editable={false}
                />
                <DataTable.Column
                  className="compColHeight"
                  field="adjustedquantity"
                  header={t("ViewAllShipment_AdjustedQuantity")}
                  editable={false}
                />
                <DataTable.Column
                  className="compColHeight"
                  field="TotalQuantity"
                  header={t("TankMeter_TotalQuantity")}
                  editable={false}
                />
                <DataTable.Column
                  className="compColHeight"
                  field="LeftQuantity"
                  header={t("Shipment_Compartment_Left_Quantity")}
                  editable={false}
                />
              </DataTable>
              {item.AdditiveProductDetails !== null &&
              item.AdditiveProductDetails !== undefined &&
              item.AdditiveProductDetails.length > 0 ? (
                <DataTable data={item.AdditiveProductDetails}>
                  <DataTable.Column
                    className="compColHeight"
                    field={"additivecode"}
                    header={t("ViewShipment_AdditiveCode")}
                    editable={false}
                  />
                  <DataTable.Column
                    className="compColHeight"
                    field="plannedquantity"
                    header={t("ViewShipmentCompartment_PlannedQuantity")}
                    editable={false}
                  />
                  <DataTable.Column
                    className="compColHeight"
                    field="revisedplannedquantity"
                    header={t("ViewShipmentCompartment_AdjustedQuantity")}
                    editable={false}
                  />
                  <DataTable.Column
                    className="compColHeight"
                    field="loadedquantity"
                    header={t("ContractInfo_LoadedQty")}
                    editable={false}
                  />
                  <DataTable.Column
                    className="compColHeight"
                    field="adjustedquantity"
                    header={t("ViewAllShipment_AdjustedQuantity")}
                    editable={false}
                  />
                  <DataTable.Column
                    className="compColHeight"
                    field="TotalQuantity"
                    header={t("TankMeter_TotalQuantity")}
                    editable={false}
                  />
                  <DataTable.Column
                    className="compColHeight"
                    field="LeftQuantity"
                    header={t("Shipment_Compartment_Left_Quantity")}
                    editable={false}
                  />
                </DataTable>
              ) : (
                ""
              )}
            </>
          );
        })}
      </div>
    ) : (
      <div className="compartmentIcon">
        <div className="gridButtonAlignLeft">
          {t("CustomerInventory_NoRecordsFound")}
        </div>
      </div>
    );
  }

  return (
    <div>
      <div className="detailsContainer">
        <div className="row">
          <div className="col-12 col-md-6 col-lg-4">
            <Input
              fluid
              value={modShipment.ShipmentCode}
              label={t("ShipmentCompDetail_ShipmentNumber")}
              indicator="required"
              disabled={
                isAutoGeneratedShipmentCode
                  ? true
                  : shipment.ShipmentCode !== ""
              }
              onChange={(data) => onFieldChange("ShipmentCode", data)}
              error={t(validationErrors.ShipmentCode)}
              reserveSpace={false}
            />
          </div>
          <div className="col-12 col-md-6 col-lg-4">
            <Input
              fluid
              value={modShipment.Status === null ? "" : modShipment.Status}
              label={t("ShipmentCompDetail_ShipmentStatus")}
              disabled={true}
            />
          </div>
          <div className="col-12 col-md-6 col-lg-4">
            <DatePicker
              fluid
              value={new Date(modShipment.ScheduledDate)}
              label={t("ShipmentCompDetail_ScheduledDate")}
              displayFormat={getCurrentDateFormat()}
              type="datetime"
              showYearSelector="true"
              minuteStep={1}
              disablePast={
                modCustomValues[
                  "ShipConfigNumberofDaysBeforeOldShipmentsCreationIsAllowed"
                ] !== null &&
                modCustomValues[
                  "ShipConfigNumberofDaysBeforeOldShipmentsCreationIsAllowed"
                ] !== undefined
                  ? false
                  : true
              }
              indicator="required"
              onChange={(data) => onFieldChange("ScheduledDate", data)}
              onTextChange={(value, error) => {
                onDateTextChange("ScheduledDate", value, error);
              }}
              error={t(validationErrors.ScheduledDate)}
              reserveSpace={false}
              disabled={
                shipment.ShipmentCode !== ""
                  ? updateShipmentAllowed !== true
                  : false
                //shipment.Status !== "READY"// || shipment.CreatedFromEntity !== 0
              }
            />
          </div>
          <div className="col-12 col-md-6 col-lg-4">
            <Select
              fluid
              placeholder={t("FinishedProductInfo_Select")}
              label={t("ShipmentCompDetail_Vehicle")}
              value={
                modShipment.VehicleCode === null ? "" : modShipment.VehicleCode
              }
              options={listOptions.vehicleOptions}
              onChange={(data) => {
                onVehicleChange(data);
              }}
              indicator="required"
              search={true}
              noResultsMessage={t("noResultsMessage")}
              error={t(validationErrors.VehicleCode)}
              reserveSpace={false}
              disabled={
                shipment.ShipmentCode !== ""
                  ? updateShipmentAllowed !== true
                  : false
                //shipment.Status !== "READY"// ||
                //shipment.CreatedFromEntity !== 0
              }
              onSearch={onVehicleSearchChange}
            />
          </div>
          <div className="col-12 col-md-6 col-lg-4">
            <Input
              fluid
              value={
                modShipment.CarrierCode === null ? "" : modShipment.CarrierCode
              }
              label={t("ShipmentCompDetail_CarrierCompany")}
              disabled={true}
              error={t(validationErrors.CarrierCode)}
              reserveSpace={false}
            />
          </div>
          <div className="col-12 col-md-6 col-lg-4">
          <div style={{ display: "flex", justifyContent: "space-between" }}>
            <Select  className={isWebportalCarrierRoleUser?"pr-2":""}
              fluid
              placeholder={t("FinishedProductInfo_Select")}
              label={t("ShipmentCompDetail_Driver")}
              value={
                modShipment.DriverCode === null ? "" : modShipment.DriverCode
              }
              options={getOptionsWithSelect(
                listOptions.driverOptions,
                t("Common_Select")
              )}
              onChange={(data) => {
                onFieldChange("DriverCode", data);
              }}
              search={true}
              disabled={ (isWebportalCarrierRoleUser && modShipment.Status === Constants.Shipment_Status.READY)?false:(shipment.ShipmentCode !== ""
              ? updateShipmentAllowed !== true
              : false) }
              noResultsMessage={t("noResultsMessage")}
              onSearch={onDriverSearchChange}
            />

            {isWebportalCarrierRoleUser ? (

                  <Tooltip
                  content={t("ShipmentCompDetail_BtnSave")}
                  element={
                    <Button  className="iconBtn mt-auto"
                    type="primary"
                  
                    onClick={() => {
                      UpdateShipmentDriver();
                    }}
                    disabled={modShipment.Status === Constants.Shipment_Status.READY ? false : true}
                  ><Icon root="building" name="save" size="large" className="mt-auto"/>
                  
                  </Button>
                  }
                  position="left center"
                  event="hover"
                  hoverable={true}
                  />

                      ) : (
                        ""
                      )}
             
             </div>
          </div>
          {(isMarineTransloading === true || isRailTransloading === true) &&
          isEnterpriseNode === false &&
          shipmentType === fnSBC ? (
            <div className="col-12 col-md-6 col-lg-4">
              <Select
                fluid
                placeholder={t("FinishedProductInfo_Select")}
                label={t("Ship_transLoad_source")}
                value={
                  modShipment.TransloadSourceType === null
                    ? ""
                    : modShipment.TransloadSourceType
                }
                options={Utilities.transferListtoOptions(
                  listOptions.transloadingOptions
                )}
                onChange={(data) => onFieldChange("TransloadSourceType", data)}
                //indicator="required"
                //error={t(validationErrors.ShipmentQuantityUOM)}
                reserveSpace={false}
                disabled={
                  shipment.ShipmentCode !== ""
                    ? updateShipmentAllowed !== true
                    : false
                  //shipment.Status !== "READY"
                }
                search={true}
                noResultsMessage={t("noResultsMessage")}
              />
            </div>
          ) : null}
          <div className="col-12 col-md-6 col-lg-4">
            <Select
              fluid
              placeholder={t("FinishedProductInfo_Select")}
              label={t("ShipmentCompDetail_UOM")}
              value={
                modShipment.ShipmentQuantityUOM === null
                  ? ""
                  : modShipment.ShipmentQuantityUOM
              }
              options={listOptions.quantityUOMOptions}
              onChange={(data) => onFieldChange("ShipmentQuantityUOM", data)}
              indicator="required"
              error={t(validationErrors.ShipmentQuantityUOM)}
              reserveSpace={false}
              disabled={
                shipment.ShipmentCode !== ""
                  ? updateShipmentAllowed !== true
                  : false
                //shipment.Status !== "READY"// || shipment.CreatedFromEntity !== 0
              }
              search={true}
              noResultsMessage={t("noResultsMessage")}
            />
          </div>
          <div className="col-12 col-md-6 col-lg-4">
            <Input
              fluid
              value={
                modShipment.Description === null ? "" : modShipment.Description
              }
              onChange={(data) => onFieldChange("Description", data)}
              label={t("CarrierDetails_Desc")}
              error={t(validationErrors.Description)}
              reserveSpace={false}
              disabled={
                shipment.ShipmentCode !== ""
                  ? updateShipmentAllowed !== true
                  : false
                //shipment.Status !== "READY" //|| shipment.CreatedFromEntity !== 0
              }
            />
          </div>
          <div className="col-12 col-md-6 col-lg-4">
            <Select
              fluid
              placeholder={t("FinishedProductInfo_Select")}
              label={t("ShipmentProdDetail_CreatedFrom")}
              value={modShipment.CreatedFromEntity}
              onChange={(data) => onFieldChange("CreatedFromEntity", data)}
              options={listOptions.shipmentFromOptions}
              disabled={
                shipment.ShipmentCode !== "" || shipmentSource !== undefined
                  ? true
                  : false
              }
            />
          </div>
          {isEnforcingEnabled ? (
            <div className="col-12 col-md-6 col-lg-4">
              <Input
                fluid
                value={
                  modShipment.PlannedTripNo === null
                    ? ""
                    : modShipment.PlannedTripNo
                }
                onChange={(data) => onFieldChange("PlannedTripNo", data)}
                label={t("ShipmentCompDetail_ShipmentSequence")}
                reserveSpace={false}
                disabled={
                  shipment.ShipmentCode !== ""
                    ? updateShipmentAllowed !== true
                    : false
                  //shipment.Status !== "READY" //|| shipment.CreatedFromEntity !== 0
                }
              />
            </div>
          ) : (
            ""
          )}
          {isEnforcingEnabled ? (
            <div className="col-12 col-md-6 col-lg-4">
              <div
                className="ui single-input fluid disabled"
                style={{ width: "50%", float: "left" }}
              >
                <div class="ui input-label">
                  <span className="input-label-message">
                    {t("ShipmentCompDetail_OverrideSequence")}
                  </span>
                </div>
                <div className="input-wrap">
                  <Checkbox
                    //className="LabelEnabled"
                    //label={t("ViewShipment_IsForceClosed")}
                    checked={modShipment.IsPriority}
                    disabled={true}
                  />
                </div>
              </div>
              {shipment.Status === "READY" ? (
                <div style={{ width: "50%", float: "right" }}>
                  <Button
                    className="shipmentRecordWeightButton"
                    content={
                      modShipment.IsPriority
                        ? t("ShipmentCompDetail_OverrideReset")
                        : t("ShipmentCompDetail_OverrideSet")
                    }
                    disabled={
                      shipment.ShipmentCode === "" ||
                      !isOverrideSequenceButtonEnabled
                    }
                    onClick={overrideSequence}
                  ></Button>
                </div>
              ) : (
                ""
              )}
            </div>
          ) : (
            ""
          )}
          {isBonded ? (
            <div className="col-12 col-md-6 col-lg-4">
              <div
                className="ui single-input fluid disabled"
                style={{ width: "30%", float: "left" }}
              >
                <div class="ui input-label">
                  <span className="input-label-message">
                    {t("VehicleInfo_Bonded")}
                  </span>
                </div>
                <div className="input-wrap">
                  <Checkbox
                    //className="LabelEnabled"
                    //label={t("ViewShipment_IsForceClosed")}
                    onChange={(data) => onFieldChange("IsBonded", data)}
                    checked={modShipment.IsBonded}
                    disabled={
                      shipment.ShipmentCode !== ""
                        ? updateShipmentAllowed !== true
                        : false
                      //shipment.Status !== "READY"
                    }
                  />
                </div>
              </div>
              {modShipment.IsBonded ? (
                <div style={{ width: "70%", float: "right" }}>
                  <Input
                    fluid
                    value={
                      modShipment.ShipmentBondNo === null
                        ? ""
                        : modShipment.ShipmentBondNo
                    }
                    onChange={(data) => onFieldChange("ShipmentBondNo", data)}
                    label={t("ShipmentCompDetail_ShipmentBondNo")}
                    reserveSpace={false}
                    disabled={
                      shipment.ShipmentCode !== "" &&
                      modCustomValues["BondUpdateAllow"] !== "TRUE"
                    }
                  />
                </div>
              ) : (
                ""
              )}
            </div>
          ) : (
            ""
          )}
          {shipment.ShipmentCode !== "" && //shipmentSource === undefined &&
          isPlanned !== false &&
          modShipment.IsBonded &&
          isBonded &&
          modCustomValues["BondUpdateAllow"] === "TRUE" ? (
            <div className="col-12 col-md-6 col-lg-4">
              <Button
                content={t("ShipmentCompDetail_SaveShipmentBondNo")}
                disabled={modCustomValues["BondUpdateAllow"] !== "TRUE"}
                onClick={updateShipmentBondNo}
              ></Button>
            </div>
          ) : (
            ""
          )}
          {shipment.ShipmentCode !== "" && //shipmentSource === undefined &&
          isPlanned !== false ? (
            <div className="col-12 col-md-6 col-lg-4">
              <Input
                fluid
                value={modCustomValues.VehicleAccessCard}
                editable={false}
                label={t("ViewShipment_VehicleAccessCard")}
                reserveSpace={false}
                disabled={true}
              />
            </div>
          ) : (
            ""
          )}
          {shipment.ShipmentCode !== "" && //shipmentSource === undefined &&
          isPlanned !== false ? (
            <div className="col-12 col-md-6 col-lg-4">
              <Input
                fluid
                value={
                  modShipment.ShipmentType === 0
                    ? Constants.shipmentType.COMPARTMENT
                    : Constants.shipmentType.PRODUCT
                }
                editable={false}
                label={t("ViewShipmentStatus_ShipmentType")}
                //error={t(validationErrors.Description)}
                reserveSpace={false}
                disabled={true}
              />
            </div>
          ) : (
            ""
          )}
          {shipment.ShipmentCode !== "" && //shipmentSource === undefined &&
          isPlanned !== false &&
          modCustomValues["TopUpDecantStatusVisible"] === "TRUE" ? (
            <div className="col-12 col-md-6 col-lg-4">
              <Input
                fluid
                value={modCustomValues.TopUpDecantStatusText}
                label={t("ViewShipment_TopUpDecantStatus")}
                reserveSpace={false}
                disabled={true}
              />
            </div>
          ) : (
            ""
          )}
          {shipment.ShipmentCode !== "" && //shipmentSource === undefined &&
          isPlanned !== false &&
          modCustomValues["TopUpDecantStatusDropDownVisible"] === "TRUE" ? (
            <div className="col-12 col-md-6 col-lg-4">
              <Select
                fluid
                placeholder={t("FinishedProductInfo_Select")}
                label={t("ViewShipment_TopUpDecantStatus")}
                value={ddlTopUpDecantStatus}
                options={getOptionsWithSelect(
                  listOptions.topUpDecantOptions,
                  t("Common_Select")
                )}
                onChange={(data) => onFieldChange("ddlTopUpDecant", data)}
                noResultsMessage={t("noResultsMessage")}
              />
            </div>
          ) : (
            ""
          )}
          {shipment.ShipmentCode !== "" && //shipmentSource === undefined &&
          isPlanned !== false ? (
            <div className="col-12 col-md-6 col-lg-4">
              <Input
                fluid
                value={modShipment.ForceClosureReason}
                label={t("ViewShipment_CloseHeader")}
                //error={t(validationErrors.Description)}
                reserveSpace={false}
                disabled={true}
              />
            </div>
          ) : (
            ""
          )}
          {shipment.ShipmentCode !== "" && //shipmentSource === undefined &&
          isPlanned !== false ? (
            <div className="col-12 col-md-6 col-lg-4">
              <div className="ui single-input fluid disabled">
                <div class="ui input-label">
                  <span className="input-label-message">
                    {t("ViewShipment_IsForceClosed")}
                  </span>
                </div>
                <div className="input-wrap">
                  <Checkbox
                    //className="LabelEnabled"
                    //label={t("ViewShipment_IsForceClosed")}
                    checked={modShipment.ForceClosed}
                    disabled={true}
                  />
                </div>
              </div>
            </div>
          ) : (
            ""
          )}

          {shipment.ShipmentCode !== "" && //shipmentSource === undefined &&
          isPlanned !== false &&
          isSlotbookinginUI ? (
            <div className="col-12 col-md-6 col-lg-4 ddlSelectAll">
              <div className="ui single-input fluid disabled">
                <div class="ui input-label">
                  <span className="input-label-message">
                    {t("ViewShipment_IsSlotBooked")}
                  </span>
                </div>
                <div className="input-wrap">
                  <label style={{ fontWeight: "bold" }}>
                    {modShipment.SlotBooked ? "Booked" : "Not Booked"}
                  </label>
                  {/* <Checkbox
                                            //className="LabelEnabled"
                                            //label={t("ViewShipment_IsSlotBooked")}
                                            checked={modShipment.SlotBooked}
                                            disabled={true}
                                        /> */}
                </div>
              </div>
            </div>
          ) : (
            ""
          )}
          {shipment.ShipmentCode !== "" && //shipmentSource === undefined &&
          shipment.Status !== "READY" &&
          shipment.Status !== "CLOSE" &&
          isPlanned !== false &&
          ShipmentBay !== null &&
          ShipmentBay !== "" &&
          ShipmentBay !== undefined ? (
            <div className="col-12 col-md-6 col-lg-4 ddlSelectAll">
              <div className="ui single-input fluid disabled">
                <div class="ui input-label">
                  <span className="input-label-message">
                    {t("ViewAllocateBay_AllocatedBay")}
                    {":"}
                  </span>
                </div>
                <div className="input-wrap">
                  <label style={{ fontWeight: "bold" }}>{ShipmentBay}</label>
                </div>
              </div>
            </div>
          ) : (
            ""
          )}
          {shipment.ShipmentCode !== "" && //shipmentSource === undefined &&
          isPlanned !== false ? (
            <div className="col-12 col-md-6 col-lg-4">
              <label>{t("ViewShipment_CompBlendState")}</label>
              <br />
              {/* <div dangerouslySetInnerHTML={getBlendSpecData()}> </div.*/}
              <div> {getBlendSpecData()}</div>
              {/* {getBlendSpecData()} */}
            </div>
          ) : (
            ""
          )}

          {shipment.ShipmentCode !== "" && //shipmentSource === undefined &&
          isPlanned !== false &&
          modCustomValues.VehicleHSEEnabled === "TRUE" ? (
            <div className="col-12 col-md-6 col-lg-4">
              {/* Need to disable based on lookup value */}
              <Input
                fluid
                value={getVehicleHSEValue()}
                // modShipment.HSEInspectionStatus
                // }
                label={t("VehHSE_Inspection")}
                //error={t(validationErrors.Description)}
                reserveSpace={false}
                disabled={true}
              />
            </div>
          ) : (
            ""
          )}
          {shipment.ShipmentCode !== "" && //shipmentSource === undefined &&
          isPlanned !== false ? (
            // && isEnterpriseNode
            <div className="col-12 col-md-6 col-lg-4">
              <Select
                fluid
                placeholder="Select"
                value={modShipment.ActualTerminalCode}
                label={t("Shipment_LoadedTerminal")}
                options={Utilities.transferListtoOptions([
                  modShipment.ActualTerminalCode,
                ])}
                disabled={true}
                multiple={true}
                reserveSpace={false}
              />
            </div>
          ) : (
            ""
          )}

          <div className="col-12 col-md-6 col-lg-4">
            <Select
              fluid
              placeholder={t("FinishedProductInfo_Select")}
              label={t("Cust_Status")}
              value={modShipment.Active}
              options={[
                { text: t("ViewShipment_Ok"), value: true },
                { text: t("ViewShipmentStatus_Inactive"), value: false },
              ]}
              onChange={(data) => onActiveStatusChange(data)}
              disabled={
                //shipment.Status !== "READY" ||
                //shipment.CreatedFromEntity !== 0 ||
                updateShipmentAllowed !== true || shipment.ShipmentCode === ""
              }
            />
          </div>
          <div className="col-12 col-md-6 col-lg-4">
            <Input
              fluid
              value={modShipment.Remarks === null ? "" : modShipment.Remarks}
              label={t("Cust_Remarks")}
              onChange={(data) => onFieldChange("Remarks", data)}
              indicator={
                modShipment.Active !== shipment.Active ? "required" : ""
              }
              error={t(validationErrors.Remarks)}
              reserveSpace={false}
              disabled={
                shipment.ShipmentCode !== ""
                  ? updateShipmentAllowed !== true
                  : false
                //shipment.Status !== "READY" //|| shipment.CreatedFromEntity !== 0
              }
            />
          </div>
          {isEnterpriseNode ? (
            <div className="col-12 col-md-6 col-lg-4">
              <AssociatedTerminals
                terminalList={listOptions.terminalCodes}
                selectedTerminal={modShipment.TerminalCodes}
                error={t(validationErrors.TerminalCodes)}
                onFieldChange={onFieldChange}
                onCheckChange={onAllTerminalsChange}
              ></AssociatedTerminals>
            </div>
          ) : (
            ""
          )}
        </div>

        {selectedAttributeList.length > 0
          ? selectedAttributeList.map((attire) => (
              <ErrorBoundary>
                <Accordion>
                  <Accordion.Content
                    className="attributeAccordian"
                    title={
                      isEnterpriseNode
                        ? attire.TerminalCode + " - " + t("Attributes_Header")
                        : t("Attributes_Header")
                    }
                  >
                    <AttributeDetails
                      selectedAttributeList={attire.attributeMetaDataList}
                      handleCellDataEdit={handleAttributeCellDataEdit}
                      attributeValidationErrors={handleValidationErrorFilter(
                        attributeValidationErrors,
                        attire.TerminalCode
                      )}
                    ></AttributeDetails>
                  </Accordion.Content>
                </Accordion>
              </ErrorBoundary>
            ))
          : null}
        <div className="shipmentTabAlignment">
          <Tab
            activeIndex={activeTab}
            onTabChange={(activeIndex) => {
              onTabChange(activeIndex);
            }}
          >
            {prodTypeTab.map((index) => {
              return (
                <Tab.Pane
                  key={index}
                  title={t("Shipment_Product_Planning_Tab_Header")}
                  // disabled={shipmentType === fnSBC}
                >
                  <div className="row compartmentRow">
                    <div className="col col-md-8 col-lg-9 col col-xl-9">
                      {/* <h4>{shipmentType === fnSBC ? t("ShipmentCompDetail_PlanHeader") : t("ShipmentProdDetail_PlanHeader")}</h4> */}
                    </div>
                    <div className="col col-md-4 col-lg-3 col-xl-3">
                      <div className="compartmentIconContainer">
                        <div
                          onClick={handleAddProductPlan}
                          className="compartmentIcon"
                        >
                          <div>
                            <Icon
                              root="common"
                              name="badge-plus"
                              size="medium"
                            />
                          </div>
                          <div className="margin_l10">
                            <h5 className="font14">
                              {t("FinishedProductInfo_Add")}
                            </h5>
                          </div>
                        </div>

                        <div
                          onClick={handleDeleteProductPlan}
                          className="compartmentIcon margin_l30"
                        >
                          <div>
                            <Icon root="common" name="delete" size="medium" />
                          </div>
                          <div className="margin_l10">
                            <h5 className="font14">{t("DestAdd_Delete")}</h5>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="row marginRightZero tableScroll">
                    <div className="col-12 detailsTable">
                      <DataTable
                        data={modProductPlans}
                        rowExpansionTemplate={attributeRowExpansionTemplate}
                        selectionMode="multiple"
                        selection={selectedProductPlans}
                        onSelectionChange={handleProductPlansSelectionChange}
                        scrollable={true}
                        scrollHeight="320px"
                        expandedRows={expandedRows}
                      >
                        {(() => {
                          switch (modShipment.CreatedFromEntity) {
                            case 2:
                              return (
                                <DataTable.Column
                                  className="compColHeight colminWidth"
                                  key="ContractCode"
                                  field="ContractCode"
                                  header={handleIsRequiredCompartmentCell(
                                    t("ShipmentProdDetail_ContractCode")
                                  )}
                                  editable={
                                    modShipment.Status ===
                                    Constants.Shipment_Status.READY
                                      ? true
                                      : false
                                  }
                                  editFieldType="text"
                                  customEditRenderer={(celldata) =>
                                    handleCustomEditDropDown(
                                      celldata,
                                      listOptions.contractCodeOptions,
                                      Constants.shipmentType.PRODUCT
                                    )
                                  }
                                ></DataTable.Column>
                              );
                            case 1:
                              return (
                                <DataTable.Column
                                  className="compColHeight colminWidth"
                                  key="OrderCode"
                                  field="OrderCode"
                                  header={handleIsRequiredCompartmentCell(
                                    t("ShipmentCompDetail_OrderCode")
                                  )}
                                  editable={
                                    modShipment.Status ===
                                    Constants.Shipment_Status.READY
                                      ? true
                                      : false
                                  }
                                  editFieldType="text"
                                  customEditRenderer={(celldata) =>
                                    handleCustomEditDropDown(
                                      celldata,
                                      listOptions.orderCodeOptions,
                                      Constants.shipmentType.PRODUCT
                                    )
                                  }
                                ></DataTable.Column>
                              );
                            default:
                              return "";
                          }
                        })()}

                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="FinishedProductCode"
                          field="FinishedProductCode"
                          header={handleIsRequiredCompartmentCell(
                            t("ContractInfo_Product")
                          )}
                          editable={
                            modShipment.Status ===
                            Constants.Shipment_Status.READY
                              ? true
                              : false
                          }
                          editFieldType="text"
                          customEditRenderer={(celldata) =>
                            handleCustomEditDropDown(
                              celldata,
                              listOptions.finishedProductOptions,
                              Constants.shipmentType.PRODUCT
                            )
                          }
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="CustomerCode"
                          field="CustomerCode"
                          header={handleIsRequiredCompartmentCell(
                            t("ShipmentCompDetail_Customer")
                          )}
                          editable={
                            modShipment.Status ===
                            Constants.Shipment_Status.READY
                              ? true
                              : false
                          }
                          editFieldType="text"
                          customEditRenderer={(celldata) =>
                            handleCustomerEditDropDown(
                              celldata,
                              Constants.shipmentType.PRODUCT
                            )
                          }
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="DestinationCode"
                          field="DestinationCode"
                          header={handleIsRequiredCompartmentCell(
                            t("ContractInfo_Destination")
                          )}
                          editable={
                            modShipment.Status ===
                            Constants.Shipment_Status.READY
                              ? true
                              : false
                          }
                          editFieldType="text"
                          customEditRenderer={(celldata) =>
                            handleDestinationEditDropDown(
                              celldata,
                              Constants.shipmentType.PRODUCT
                            )
                          }
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="Quantity"
                          field="Quantity"
                          header={handleIsRequiredCompartmentCell(
                            t("ShipmentCompDetail_Quantity")
                          )}
                          editable={
                            modShipment.Status ===
                            Constants.Shipment_Status.READY
                              ? true
                              : false
                          }
                          editFieldType="text"
                          renderer={(cellData) =>
                            decimalDisplayValues(cellData)
                          }
                          customEditRenderer={(cellData) =>
                            handleCustomEditTextBox(
                              cellData,
                              Constants.shipmentType.PRODUCT
                            )
                          }
                        ></DataTable.Column>
                        <DataTable.Column
                          initialWidth="200px"
                          renderer={attributeExpanderTemplate}
                        />
                      </DataTable>
                    </div>
                  </div>
                </Tab.Pane>
              );
              //}
            })}
            {compTypeTab.map((index) => {
              return (
                <Tab.Pane
                  title={t("Shipment_Compartment_Planning_Tab_Header")}
                  key={index}
                  // disabled={shipmentType[0] === fnSBP &&
                  //     (modShipment.ShipmentDetailsInfo === null || modShipment.ShipmentDetailsInfo === undefined || modShipment.ShipmentDetailsInfo.length === 0)}
                >
                  <div className="row compartmentRow">
                    <div className="col col-md-8 col-lg-9 col col-xl-9">
                      {/* <h4>{shipmentType === fnSBC ? t("ShipmentCompDetail_PlanHeader") : t("ShipmentProdDetail_PlanHeader")}</h4> */}
                    </div>
                    <div className="col col-md-4 col-lg-3 col-xl-3">
                      <div className="compartmentIconContainer">
                        <div
                          onClick={handleAddCompartmentPlan}
                          className="compartmentIcon"
                        >
                          <div>
                            <Icon
                              root="common"
                              name="badge-plus"
                              size="medium"
                            />
                          </div>
                          <div className="margin_l10">
                            <h5 className="font14">
                              {t("FinishedProductInfo_Add")}
                            </h5>
                          </div>
                        </div>

                        <div
                          onClick={handleDeleteCompartmentPlan}
                          className="compartmentIcon margin_l30"
                        >
                          <div>
                            <Icon root="common" name="delete" size="medium" />
                          </div>
                          <div className="margin_l10">
                            <h5 className="font14">{t("DestAdd_Delete")}</h5>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="row marginRightZero tableScroll">
                    <div className="col-12 detailsTable">
                      <DataTable
                        data={modCompartmentPlans}
                        rowExpansionTemplate={attributeRowExpansionTemplate}
                        selectionMode="multiple"
                        selection={selectedCompartmentPlans}
                        onSelectionChange={
                          handleCompartmentPlansSelectionChange
                        }
                        scrollable={true}
                        scrollHeight="320px"
                        expandedRows={expandedRows}
                      >
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="CompartmentSeqNoInVehicle"
                          field="CompartmentSeqNoInVehicle"
                          header={handleIsRequiredCompartmentCell(
                            t("ShipmentCompDetail_CompSeqInVehicle")
                          )}
                          editable={
                            modShipment.Status ===
                            Constants.Shipment_Status.READY
                              ? true
                              : false
                          }
                          editFieldType="text"
                          customEditRenderer={(celldata) =>
                            handleCustomEditDropDown(
                              celldata,
                              listOptions.compSeqOptions,
                              Constants.shipmentType.COMPARTMENT
                            )
                          }
                        ></DataTable.Column>
                        {(() => {
                          switch (modShipment.CreatedFromEntity) {
                            case 2:
                              return (
                                <DataTable.Column
                                  className="compColHeight colminWidth"
                                  key="ContractCode"
                                  field="ContractCode"
                                  header={handleIsRequiredCompartmentCell(
                                    t("ShipmentProdDetail_ContractCode")
                                  )}
                                  editable={
                                    modShipment.Status ===
                                    Constants.Shipment_Status.READY
                                      ? true
                                      : false
                                  }
                                  editFieldType="text"
                                  customEditRenderer={(cellData) =>
                                    handleCustomEditDropDown(
                                      cellData,
                                      listOptions.contractCodeOptions,
                                      Constants.shipmentType.COMPARTMENT
                                    )
                                  }
                                ></DataTable.Column>
                              );
                            case 1:
                              return (
                                <DataTable.Column
                                  className="compColHeight colminWidth"
                                  key="OrderCode"
                                  field="OrderCode"
                                  header={handleIsRequiredCompartmentCell(
                                    t("ShipmentCompDetail_OrderCode")
                                  )}
                                  editable={
                                    modShipment.Status ===
                                    Constants.Shipment_Status.READY
                                      ? true
                                      : false
                                  }
                                  editFieldType="text"
                                  customEditRenderer={(cellData) =>
                                    handleCustomEditDropDown(
                                      cellData,
                                      listOptions.orderCodeOptions,
                                      Constants.shipmentType.COMPARTMENT
                                    )
                                  }
                                ></DataTable.Column>
                              );
                            default:
                              return "";
                          }
                        })()}

                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="FinishedProductCode"
                          field="FinishedProductCode"
                          header={handleIsRequiredCompartmentCell(
                            t("ContractInfo_Product")
                          )}
                          editable={
                            modShipment.Status ===
                            Constants.Shipment_Status.READY
                              ? true
                              : false
                          }
                          editFieldType="text"
                          customEditRenderer={(celldata) =>
                            handleCustomEditDropDown(
                              celldata,
                              listOptions.finishedProductOptions,
                              Constants.shipmentType.COMPARTMENT
                            )
                          }
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="CustomerCode"
                          field="CustomerCode"
                          header={handleIsRequiredCompartmentCell(
                            t("ShipmentCompDetail_Customer")
                          )}
                          editable={
                            modShipment.Status ===
                            Constants.Shipment_Status.READY
                              ? true
                              : false
                          }
                          editFieldType="text"
                          customEditRenderer={(celldata) =>
                            handleCustomerEditDropDown(
                              celldata,
                              Constants.shipmentType.COMPARTMENT
                            )
                          }
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="DestinationCode"
                          field="DestinationCode"
                          header={handleIsRequiredCompartmentCell(
                            t("ContractInfo_Destination")
                          )}
                          editable={
                            modShipment.Status ===
                            Constants.Shipment_Status.READY
                              ? true
                              : false
                          }
                          editFieldType="text"
                          customEditRenderer={(celldata) =>
                            handleDestinationEditDropDown(
                              celldata,
                              Constants.shipmentType.COMPARTMENT
                            )
                          }
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="Quantity"
                          field="Quantity"
                          header={handleIsRequiredCompartmentCell(
                            t("ShipmentCompDetail_Quantity")
                          )}
                          editable={
                            modShipment.Status ===
                            Constants.Shipment_Status.READY
                              ? true
                              : false
                          }
                          editFieldType="text"
                          renderer={(cellData) =>
                            decimalDisplayValues(cellData)
                          }
                          customEditRenderer={(cellData) =>
                            handleCustomEditTextBox(
                              cellData,
                              Constants.shipmentType.COMPARTMENT
                            )
                          }
                        ></DataTable.Column>
                        {modShipment.TransloadSourceType === "MARINE" ? (
                          <DataTable.Column
                            className="compColHeight colminWidth"
                            key="TransReceiptCode"
                            field="TransReceiptCode"
                            header={t("Receipt_Code")}
                            editable={true}
                            editFieldType="text"
                            customEditRenderer={(celldata) =>
                              handleCustomEditDropDown(
                                celldata,
                                listOptions.marineReceiptCodes,
                                Constants.shipmentType.COMPARTMENT
                              )
                            }
                          ></DataTable.Column>
                        ) : (
                          ""
                        )}
                        {modShipment.TransloadSourceType === "MARINE" ? (
                          <DataTable.Column
                            className="compColHeight colminWidth"
                            key="TransCompSequenceNumber"
                            field="TransCompSequenceNumber"
                            header={t("Transload_receipt_Comp_No")}
                            editable={true}
                            editFieldType="text"
                            customEditRenderer={(celldata) =>
                              handleCustomEditDropDown(
                                celldata,
                                listOptions.marineReceiptCompCodes,
                                Constants.shipmentType.COMPARTMENT
                              )
                            }
                          ></DataTable.Column>
                        ) : (
                          ""
                        )}
                        <DataTable.Column
                          initialWidth="200px"
                          renderer={attributeExpanderTemplate}
                        />
                      </DataTable>
                    </div>
                    {!isEnterpriseNode &&
                    isMarineTransloading &&
                    modShipment.TransloadSourceType != null &&
                    modShipment.TransloadSourceType === "MARINE" &&
                    shipmentType === fnSBC ? (
                      <div
                        className="col col-md-8 col-lg-9 col col-xl-12"
                        style={{ textAlign: "right" }}
                      >
                        <Button
                          content={t("shp_trans_receipt_update")}
                          disabled={
                            modCustomValues["f_ShipCompEditAccess"] ===
                              "TRUE" &&
                            Constants.ShipmentStatus[modShipment.Status] !==
                              Constants.ShipmentStatus.READY &&
                            Constants.ShipmentStatus[modShipment.Status] !==
                              Constants.ShipmentStatus.LOADING &&
                            Constants.ShipmentStatus[modShipment.Status] !==
                              Constants.ShipmentStatus.AUTO_LOADED &&
                            Constants.ShipmentStatus[modShipment.Status] !==
                              Constants.ShipmentStatus.MANUALLY_LOADED &&
                            Constants.ShipmentStatus[modShipment.Status] !==
                              Constants.ShipmentStatus.CLOSED
                              ? false
                              : true
                          }
                          onClick={updateTransloadingInfo}
                        ></Button>
                      </div>
                    ) : (
                      ""
                    )}
                  </div>
                </Tab.Pane>
              );
            })}
            {LoadTypeTab.map((index) => {
              return (
                <Tab.Pane
                  key={index}
                  title={t("Shipment_Compartment_Details_Tab_Header")}
                  // disabled={modShipment.ShipmentCode === "" || modShipment.ShipmentCode === undefined || modShipment.ShipmentCode === null
                  //     || modShipment.ShipmentDestinationCompartmentsInfo === null || modShipment.ShipmentDestinationCompartmentsInfo === undefined || modShipment.ShipmentDestinationCompartmentsInfo.length === 0}
                >
                  <div className="row marginRightZero tableScroll">
                    <div className="col-12 detailsTable">
                      <DataTable
                        data={modLoadingDetails}
                        rowExpansionTemplate={rowExpansionTemplate}
                        expandedRows={expandedRows}
                        scrollable={true}
                        scrollHeight="320px"
                      >
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="Trailer_Code"
                          field="Trailer_Code"
                          header={t("ShipmentCompDetail_wcTrailerCode")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="Compartment_Code"
                          field="Compartment_Code"
                          header={t("ShipmentCompDetail_wcCompartmentCode")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="Compartment_Status"
                          field="Compartment_Status"
                          header={t("ViewShipmentStatus_Status")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="Finished_Product"
                          field="Finished_Product"
                          header={t("ViewShipment_FinishedProductCode")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="Planned_Quantity"
                          field="Planned_Quantity"
                          header={t("ViewShipmentCompartment_PlannedQuantity")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="Revised_Planned_Quantity"
                          field="Revised_Planned_Quantity"
                          header={t("ViewShipmentCompartment_AdjustedQuantity")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="Loaded_Quantity"
                          field="Loaded_Quantity"
                          header={t("ReceiptByCompartmentList_LoadedQuantity")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          initialWidth="135px"
                          header={t("ViewShipment_ForceComplete")}
                          renderer={handleForceComplete}
                        />
                        <DataTable.Column
                          initialWidth="50px"
                          renderer={expanderTemplate}
                        />
                      </DataTable>
                    </div>
                    {!isEnterpriseNode ? (
                      <div
                        className="col col-md-8 col-lg-9 col col-xl-12"
                        style={{ textAlign: "right" }}
                      >
                        <Button
                          content={t(submitBtnName)}
                          disabled={modTopUpEnable ? false : true}
                          onClick={() =>
                            handleTopUpDecantApproval("Approve", submitBtnName)
                          }
                        ></Button>
                      </div>
                    ) : (
                      ""
                    )}
                    {/* {!isEnterpriseNode ? <div style={{ marginRight: "0.6rem", marginBottom: "1rem" }}>
                                        <Button
                                            content={t("save")}
                                            disabled={modTopUpEnable &&
                                                Constants.ShipmentStatus[modShipment.Status] !== Constants.ShipmentStatus.READY &&
                                                Constants.ShipmentStatus[modShipment.Status] !== Constants.ShipmentStatus.CHECKED_IN &&
                                                Constants.ShipmentStatus[modShipment.Status] !== Constants.ShipmentStatus.QUEUED ? true : false}
                                            onClick={() => handleTopUpDecantApproval("SaveCompartment")}
                                        ></Button>
                                    </div> : ("")} */}
                  </div>
                </Tab.Pane>
              );
            })}
            {customerInventoryTab.map((index) => {
              return (
                <Tab.Pane
                  key={index}
                  title={t("CustomerInventory_Details")}
                  // disabled={modShipment.ShipmentCode === "" || modShipment.ShipmentCode === undefined || modShipment.ShipmentCode === null
                  //     || modCustomValues.CustomerInventory === "FALSE" || isEnterpriseNode}
                >
                  <div className="row marginRightZero tableScroll">
                    <div className="col-12 detailsTable">
                      <DataTable
                        data={customerInventory}
                        scrollable={true}
                        scrollHeight="320px"
                      >
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="CustomerCode"
                          field="CustomerCode"
                          header={t("Customer_Code")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="BaseProductCode"
                          field="BaseProductCode"
                          header={t("BaseProductInfo_BaseProdCode")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="PlannedQuantity"
                          field="PlannedQuantity"
                          header={t("ViewShipmentCompartment_PlannedQuantity")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="GrossActualQuantity"
                          field="GrossActualQuantity"
                          header={t("LocalTransactionsMapping_LoadedQuantity")}
                        ></DataTable.Column>
                      </DataTable>
                    </div>
                  </div>
                </Tab.Pane>
              );
            })}
            {productAllocationTab.map((index) => {
              return (
                <Tab.Pane
                  key={index}
                  title={
                    ProdAllocEntity.toUpperCase().includes("CUSTOMER")
                      ? t("Product_Allocation_Customer_Header")
                      : t("Product_Allocation_Carrier_Header")
                  }
                >
                  <div className="row marginRightZero tableScroll">
                    <div className="col-12 detailsTable">
                      <DataTable
                        data={productAllocationList}
                        scrollable={true}
                        scrollHeight="320px"
                      >
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="customercode"
                          field="customercode"
                          header={
                            ProdAllocEntity.toUpperCase().includes("CUSTOMER")
                              ? t("Customer_Code")
                              : t("Entity_Carrier_Code")
                          }
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="productcode"
                          field="productcode"
                          header={t("ProductAllocation_Product_Code")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="allocationtype"
                          field="allocationtype"
                          header={t("ProductAllocation_Allocation_Type")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="allocationperiod"
                          field="allocationperiod"
                          header={t(
                            "ProductAllocationItemInfo_AllocationFrequency"
                          )}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="startdate"
                          field="startdate"
                          header={t("ContractInfo_StartDate")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="enddate"
                          field="enddate"
                          header={t("ContractInfo_EndDate")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="allocatedqty"
                          field="allocatedqty"
                          header={t("ProductAllocationItemInfo_AllocatedQty")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="blockedqty"
                          field="blockedqty"
                          header={t("ProductAllocationItemInfo_BlockedQty")}
                        ></DataTable.Column>
                        <DataTable.Column
                          className="compColHeight colminWidth"
                          key="loadedqty"
                          field="loadedqty"
                          header={t("ProductAllocationItemInfo_LoadedQty")}
                        ></DataTable.Column>
                      </DataTable>
                    </div>
                  </div>
                  {productShareholderAllocationList.length > 0 ? (
                    <div className="row marginRightZero tableScroll">
                      <div className="col-12 detailsTable">
                        <DataTable
                          data={productShareholderAllocationList}
                          scrollable={true}
                          scrollHeight="320px"
                        >
                          <DataTable.Column
                            className="compColHeight colminWidth"
                            key="customercode"
                            field="customercode"
                            header={t("Customer_Code")}
                          ></DataTable.Column>
                          <DataTable.Column
                            className="compColHeight colminWidth"
                            key="productcode"
                            field="productcode"
                            header={t("ProductAllocation_Product_Code")}
                          ></DataTable.Column>
                          <DataTable.Column
                            className="compColHeight colminWidth"
                            key="allocationtype"
                            field="allocationtype"
                            header={t("ProductAllocation_Allocation_Type")}
                          ></DataTable.Column>
                          <DataTable.Column
                            className="compColHeight colminWidth"
                            key="allocationperiod"
                            field="allocationperiod"
                            header={t(
                              "ProductAllocationItemInfo_AllocationFrequency"
                            )}
                          ></DataTable.Column>
                          <DataTable.Column
                            className="compColHeight colminWidth"
                            key="startdate"
                            field="startdate"
                            header={t("ContractInfo_StartDate")}
                          ></DataTable.Column>
                          <DataTable.Column
                            className="compColHeight colminWidth"
                            key="enddate"
                            field="enddate"
                            header={t("ContractInfo_EndDate")}
                          ></DataTable.Column>
                          <DataTable.Column
                            className="compColHeight colminWidth"
                            key="allocatedqty"
                            field="allocatedqty"
                            header={t("ProductAllocationItemInfo_AllocatedQty")}
                          ></DataTable.Column>
                          <DataTable.Column
                            className="compColHeight colminWidth"
                            key="blockedqty"
                            field="blockedqty"
                            header={t("ProductAllocationItemInfo_BlockedQty")}
                          ></DataTable.Column>
                          <DataTable.Column
                            className="compColHeight colminWidth"
                            key="loadedqty"
                            field="loadedqty"
                            header={t("ProductAllocationItemInfo_LoadedQty")}
                          ></DataTable.Column>
                        </DataTable>
                      </div>
                    </div>
                  ) : (
                    ""
                  )}
                </Tab.Pane>
              );
            })}
          </Tab>
        </div>
        {/* //)} */}
      </div>
      {displayTMModalForceCompleteConfirm()}
    </div>
  );
}
