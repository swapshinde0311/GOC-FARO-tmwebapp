{"version":3,"file":"static/js/429.9382ced7.chunk.js","mappings":"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","sources":["Components/Composite/Common/TMDetailsKPILayout.jsx","Components/UIBase/Details/TankGroupDetails.jsx","Components/Composite/Details/TankGroupDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nexport default function TMDetailsKPILayout({\r\n    KPIList,\r\n    pageName,\r\n    rowHeight,\r\n    widgetHeight,\r\n    isDraggable,\r\n    isResizable,\r\n    kpiDisplayTopBreakpoint\r\n}) {\r\n    const [KPIDisplays, setKPIDisplays] = useState(1);\r\n\r\n    const kpiDiv = React.useRef(null);\r\n\r\n    const hideKpis = () => {\r\n        let currentScrollPos = window.pageYOffset;\r\n        let KPIDisplay = KPIDisplays;\r\n\r\n        // hide kpis based on div position to top of the window \r\n        if (kpiDiv.current && kpiDiv.current.getBoundingClientRect().top < kpiDisplayTopBreakpoint) {\r\n            KPIDisplay = 0;\r\n        }\r\n        // show the kpis once at top of the screen\r\n        else if (currentScrollPos === 0) {\r\n            KPIDisplay = 1\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n\r\n        setKPIDisplays(KPIDisplay);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            window.addEventListener(\"scroll\", hideKpis);\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // remove listener on unmount\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", hideKpis)\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div ref={kpiDiv}>\r\n            {KPIDisplays === 1 ? <TranslationConsumer>\r\n                {(t) => (\r\n                    <div style={{ marginTop: \"6px\" }}>\r\n                        <ErrorBoundary>\r\n                            <KPIDashboardLayout\r\n                                kpiList={KPIList}\r\n                                isDraggable={isDraggable}\r\n                                isResizable={isResizable}\r\n                                rowHeight={rowHeight}\r\n                                widgetHeight={widgetHeight}\r\n                                pageName={pageName}\r\n                            ></KPIDashboardLayout>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n\r\n                )}\r\n            </TranslationConsumer> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nTMDetailsKPILayout.propTypes = {\r\n    kpiDisplayTopBreakpoint: PropTypes.number\r\n}\r\n\r\nTMDetailsKPILayout.defaultProps = {\r\n    kpiDisplayTopBreakpoint: 100\r\n}","import React from \"react\";\r\nimport { Select, Input, Badge } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\n\r\nTankGroupDetails.propTypes = {\r\n    tankGroup: PropTypes.object.isRequired,\r\n    modTankGroup: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    onActiveStatusChange: PropTypes.func.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        baseProduct: PropTypes.array,\r\n    }).isRequired,\r\n    isEnterpriseNode: PropTypes.bool.isRequired,\r\n    handleSelectTankCode: PropTypes.func.isRequired,\r\n    onTerminalChange: PropTypes.func.isRequired,\r\n}\r\n\r\nTankGroupDetails.defaultProps = {\r\n    listOptions: {\r\n        baseProduct: [],\r\n        terminalCode: []\r\n    },\r\n    isEnterpriseNode: false\r\n}\r\n\r\nexport function TankGroupDetails({\r\n    tankGroup,\r\n    modTankGroup,\r\n    validationErrors,\r\n    onFieldChange,\r\n    onActiveStatusChange,\r\n    listOptions,\r\n    isEnterpriseNode,\r\n    handleSelectTankCode,\r\n    onTerminalChange\r\n}) {\r\n\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modTankGroup.Code}\r\n                                indicator=\"required\"\r\n                                disabled={tankGroup.Code !== \"\"}\r\n                                onChange={(data) => onFieldChange(\"Code\", data)}\r\n                                label={t(\"TankGroupInfo_Code\")}\r\n                                error={t(validationErrors.Code)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modTankGroup.Name}\r\n                                onChange={(data) => onFieldChange(\"Name\", data)}\r\n                                label={t(\"TankGroupInfo_Name\")}\r\n                                error={t(validationErrors.Name)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modTankGroup.Description}\r\n                                label={t(\"TankInfo_Description\")}\r\n                                onChange={(data) => onFieldChange(\"Description\", data)}\r\n                                error={t(validationErrors.Description)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        {isEnterpriseNode ? (\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Select\r\n                                    fluid\r\n                                    placeholder={t(\"Common_Select\")}\r\n                                    label={t(\"TerminalCodes\")}\r\n                                    value={modTankGroup.TerminalCode}\r\n                                    options={listOptions.terminalCode}\r\n                                    onChange={(data) => {\r\n                                        onTerminalChange(data);\r\n                                    }}\r\n                                    indicator=\"required\"\r\n                                    error={t(validationErrors.TerminalCode)}\r\n                                    reserveSpace={false}\r\n                                    disabled={tankGroup.Code !== \"\"}\r\n                                    search={true}\r\n                                    noResultsMessage={t(\"noResultsMessage\")}\r\n                                />\r\n                            </div>\r\n                        ) : (\"\")\r\n                        }\r\n\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"TankGroupInfo_BaseProduct\")}\r\n                                value={modTankGroup.BaseProductCode}\r\n                                options={listOptions.baseProduct}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"BaseProductCode\", data);\r\n                                }}\r\n                                indicator=\"required\"\r\n                                error={t(validationErrors.BaseProductCode)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                disabled={(modTankGroup.TankCollection.length > 0 || modTankGroup.MeterCollection.length > 0)}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"BaseProductList_Status\")}\r\n                                value={modTankGroup.Active}\r\n                                options={[\r\n                                    { text: t(\"ViewShipment_Ok\"), value: true },\r\n                                    { text: t(\"ViewShipmentStatus_Inactive\"), value: false },\r\n                                ]}\r\n                                onChange={(data) => onActiveStatusChange(data)}\r\n                                error={t(validationErrors.Active)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                disabled={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modTankGroup.Remarks}\r\n                                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                                label={t(\"BaseProductList_Remarks\")}\r\n                                error={t(validationErrors.Remarks)}\r\n                                indicator={modTankGroup.Active !== tankGroup.Active ? \"required\" : \"\"}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        {\r\n                            tankGroup.Code !== \"\" ? (\r\n                                <>\r\n                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                        <div>{t(\"TankGroupInfo_AssociatedTank\")}</div>\r\n                                        <div className=\"associatedTank-wrap\">\r\n                                            {\r\n                                                modTankGroup.TankCollection.map((tank) => {\r\n                                                    return (\r\n                                                        <div className=\"associatedTank-wrap-list\">\r\n                                                            <label><span>{tank}</span>{tank === modTankGroup.ActiveTankCode ? (<Badge className='badge-TankGroup' color='green'>{t(\"TankGroupInfo_Active\")}</Badge>) : (<a href=\"#/\" onClick={() => handleSelectTankCode(tank)} className=\"tankGroupAnchorTag\">{t(\"TankGroupInfo_TankActivate\")}</a>)}</label>\r\n                                                        </div>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                        <Select\r\n                                            fluid\r\n                                            placeholder={t(\"Common_Select\")}\r\n                                            label={t(\"TankGroupInfo_AssociatedMeter\")}\r\n                                            value={modTankGroup.MeterCollection}\r\n                                            options={Utilities.transferListtoOptions(modTankGroup.MeterCollection)}\r\n                                            //options={modTankGroup.MeterCollection}\r\n                                            reserveSpace={false}\r\n                                            disabled={true}\r\n                                            search={true}\r\n                                            noResultsMessage={t(\"noResultsMessage\")}\r\n                                            multiple={true}\r\n                                        />\r\n                                    </div></>\r\n                            ) : (\"\")\r\n                        }\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { TankGroupDetails } from \"../../UIBase/Details/TankGroupDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { emptyTankGroup } from \"../../../JS/DefaultEntities\";\r\nimport { tankGroupValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport {\r\n  functionGroups,\r\n  fnTankGroup,\r\n  fnKPIInformation,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport { toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiTankGroupDetail } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\nclass TankGroupDetailsComposite extends Component {\r\n  state = {\r\n    tankGroup: lodash.cloneDeep(emptyTankGroup),\r\n    modTankGroup: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      tankGroupValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    saveEnabled: false,\r\n    baseProductOptions: [],\r\n    terminalOptions: [],\r\n    tankGroupKPIList: [],\r\n    showAuthenticationLayout: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getTankGroup(this.props.selectedRow);\r\n      if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n        this.getTerminal();\r\n      } else {\r\n        this.getBaseProducts(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankGroupDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.tankGroup.Code !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getTankGroup(nextProps.selectedRow);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankGroupDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTankGroup(tankGroupRow) {\r\n    if (tankGroupRow.Common_Code === undefined) {\r\n      this.setState({\r\n        tankGroup: lodash.cloneDeep(emptyTankGroup),\r\n        modTankGroup: lodash.cloneDeep(emptyTankGroup),\r\n        isReadyToRender: true,\r\n        tankGroupKPIList: [],\r\n        saveEnabled: Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          fnTankGroup\r\n        ),\r\n      });\r\n      return;\r\n    }\r\n\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.tankGroupCode,\r\n        value: tankGroupRow.Common_Code,\r\n      },\r\n      {\r\n        key: KeyCodes.terminalCode,\r\n        value:\r\n          tankGroupRow.TerminalCode !== \"\" ? tankGroupRow.TerminalCode : null,\r\n      },\r\n    ];\r\n    var obj = {\r\n      keyDataCode: KeyCodes.tankGroupCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetTankGroup,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              isReadyToRender: true,\r\n              tankGroup: lodash.cloneDeep(result.EntityResult),\r\n              modTankGroup: lodash.cloneDeep(result.EntityResult),\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnTankGroup\r\n              ),\r\n            },\r\n            () => {\r\n              this.getKPIList(result.EntityResult.Code);\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                this.getBaseProducts(result.EntityResult.TerminalCode);\r\n              }\r\n            }\r\n          );\r\n        } else {\r\n          this.setState({\r\n            tankGroup: lodash.cloneDeep(emptyTankGroup),\r\n            modTankGroup: lodash.cloneDeep(emptyTankGroup),\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in getTankGroup:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting TankGroup:\", error, tankGroupRow);\r\n      });\r\n  }\r\n\r\n  getBaseProducts(terminalcode) {\r\n    axios(\r\n      RestAPIs.GetAllBaseProduct + \"?TerminalCode=\" + terminalcode,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let baseProductOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ baseProductOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getBaseProducts:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting BaseProducts:\", error);\r\n      });\r\n  }\r\n\r\n  getTerminal() {\r\n    axios(\r\n      RestAPIs.GetTerminals,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let terminalOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ terminalOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getTerminal:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Terminal:\", error);\r\n      });\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modTankGroup = lodash.cloneDeep(this.state.modTankGroup);\r\n\r\n      modTankGroup[propertyName] = data;\r\n      this.setState({ modTankGroup });\r\n\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (tankGroupValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          tankGroupValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankGroupDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleTerminalChange = (data) => {\r\n    try {\r\n      const modTankGroup = lodash.cloneDeep(this.state.modTankGroup);\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      modTankGroup[\"TerminalCode\"] = data;\r\n      validationErrors[\"TerminalCode\"] = \"\";\r\n      this.setState({ modTankGroup, validationErrors });\r\n      this.getBaseProducts(data);\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankGroupDetailsComposite:Error occured on handleTerminalChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modTankGroup = lodash.cloneDeep(this.state.modTankGroup);\r\n      modTankGroup.Active = value;\r\n      if (modTankGroup.Active !== this.state.tankGroup.Active)\r\n        modTankGroup.Remarks = \"\";\r\n      this.setState({ modTankGroup });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  handleSelectTankCode = (value) => {\r\n    try {\r\n      let modTankGroup = lodash.cloneDeep(this.state.modTankGroup);\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"TankGroupInfo_TankActivateSuccess\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"TankGroupInfo_Code\"],\r\n            keyValues: [modTankGroup.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.tankGroupCode,\r\n          value: modTankGroup.Code,\r\n        },\r\n        {\r\n          key: KeyCodes.tankCode,\r\n          value: value,\r\n        },\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value:\r\n            modTankGroup.TerminalCode !== \"\" ? modTankGroup.TerminalCode : null,\r\n        },\r\n      ];\r\n      var obj = {\r\n        keyDataCode: KeyCodes.tankGroupCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.ActivateTank,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getTankGroup({\r\n            Common_Code: modTankGroup.Code,\r\n            TerminalCode: modTankGroup.TerminalCode,\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n      let modTankGroup = lodash.cloneDeep(this.state.modTankGroup);\r\n      if (this.validateSave(modTankGroup)) {\r\n        let showAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n        this.setState({ showAuthenticationLayout }, () => {\r\n          if (showAuthenticationLayout === false) {\r\n            this.saveTankGroup();\r\n          }\r\n        });\r\n       \r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankGroupDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  saveTankGroup = () => {\r\n    this.setState({ saveEnabled: false });\r\n    let modTankGroup = lodash.cloneDeep(this.state.modTankGroup);\r\n    this.state.tankGroup.Code === \"\"\r\n      ? this.createTankGroup(modTankGroup)\r\n      : this.updateTankGroup(modTankGroup);\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n  validateSave(modTankGroup) {\r\n    const validationErrors = { ...this.state.validationErrors };\r\n\r\n    Object.keys(tankGroupValidationDef).forEach(function (key) {\r\n      if (modTankGroup[key] !== undefined)\r\n        validationErrors[key] = Utilities.validateField(\r\n          tankGroupValidationDef[key],\r\n          modTankGroup[key]\r\n        );\r\n    });\r\n\r\n    if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n      if (\r\n        modTankGroup.TerminalCode === null ||\r\n        modTankGroup.TerminalCode === \"\"\r\n      ) {\r\n        validationErrors[\"TerminalCode\"] = \"TankGroupInfo_TerminalRequired\";\r\n      } else {\r\n        validationErrors[\"TerminalCode\"] = \"\";\r\n      }\r\n    }\r\n\r\n    this.setState({ validationErrors });\r\n\r\n    var returnValue = Object.values(validationErrors).every(function (value) {\r\n      return value === \"\";\r\n    });\r\n    return returnValue;\r\n  }\r\n\r\n  createTankGroup(modTankGroup) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.tankGroupCode,\r\n        value: modTankGroup.Code,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.tankGroupCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modTankGroup,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"TankGroupInfo_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"TankGroupInfo_Code\"],\r\n          keyValues: [modTankGroup.Code],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.CreateTankGroup,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnTankGroup\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () =>\r\n              this.getTankGroup({\r\n                Common_Code: modTankGroup.Code,\r\n                TerminalCode: modTankGroup.TerminalCode,\r\n              })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnTankGroup\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in createTankGroup:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modTankGroup, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnTankGroup\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modTankGroup, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  updateTankGroup(modTankGroup) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.tankGroupCode,\r\n        value: modTankGroup.Code,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.tankGroupCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modTankGroup,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"TankGroupInfo_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"TankGroupInfo_Code\"],\r\n          keyValues: [modTankGroup.Code],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateTankGroup,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnTankGroup\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () =>\r\n              this.getTankGroup({\r\n                Common_Code: modTankGroup.Code,\r\n                TerminalCode: modTankGroup.TerminalCode,\r\n              })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnTankGroup\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in updateTankGroup:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modTankGroup, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.modify,\r\n            fnTankGroup\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modTankGroup, \"modify\", notification);\r\n      });\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n      const tankGroup = lodash.cloneDeep(this.state.tankGroup);\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState({\r\n        modTankGroup: { ...tankGroup },\r\n        selectedCompRow: [],\r\n        validationErrors,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankGroupDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  //Get KPI for Tank Group\r\n  getKPIList(tankGroupCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      let objKPIRequestData = {\r\n        PageName: kpiTankGroupDetail,\r\n        InputParameters: [{ key: \"TankGroupCode\", value: tankGroupCode }],\r\n      };\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              tankGroupKPIList: result.EntityResult.ListKPIDetails,\r\n            });\r\n          } else {\r\n            this.setState({ tankGroupKPIList: [] });\r\n            console.log(\"Error in tank group KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting tank group KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n  render() {\r\n    const listOptions = {\r\n      baseProduct: this.state.baseProductOptions,\r\n      terminalCode: this.state.terminalOptions,\r\n    };\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"BaseProductInfo_LastUpdated\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modTankGroup.LastUpdatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modTankGroup.LastUpdatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"BaseProductInfo_Created\",\r\n        fieldValue:\r\n          new Date(this.state.modTankGroup.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modTankGroup.CreatedTime).toLocaleTimeString(),\r\n      },\r\n    ];\r\n\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.tankGroup.Code}\r\n            newEntityName=\"TankGroupInfo_NewTankGroup\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <TMDetailsKPILayout KPIList={this.state.tankGroupKPIList}>\r\n          {\" \"}\r\n        </TMDetailsKPILayout>\r\n        <ErrorBoundary>\r\n          <TankGroupDetails\r\n            tankGroup={this.state.tankGroup}\r\n            modTankGroup={this.state.modTankGroup}\r\n            validationErrors={this.state.validationErrors}\r\n            onFieldChange={this.handleChange}\r\n            listOptions={listOptions}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            handleSelectTankCode={this.handleSelectTankCode}\r\n            onTerminalChange={this.handleTerminalChange}\r\n          ></TankGroupDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.tankGroup.Code === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnTankGroup}\r\n            handleOperation={this.saveTankGroup}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TankGroupDetailsComposite);\r\n\r\nTankGroupDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n"],"names":["TMDetailsKPILayout","_ref","KPIList","pageName","rowHeight","widgetHeight","isDraggable","isResizable","kpiDisplayTopBreakpoint","KPIDisplays","setKPIDisplays","useState","kpiDiv","React","hideKpis","currentScrollPos","window","pageYOffset","KPIDisplay","current","getBoundingClientRect","top","useEffect","addEventListener","removeEventListener","_jsx","ref","children","TranslationConsumer","t","style","marginTop","ErrorBoundary","KPIDashboardLayout","kpiList","defaultProps","TankGroupDetails","tankGroup","modTankGroup","validationErrors","onFieldChange","onActiveStatusChange","listOptions","isEnterpriseNode","handleSelectTankCode","onTerminalChange","className","_jsxs","Input","fluid","value","Code","indicator","disabled","onChange","data","label","error","reserveSpace","Name","Description","Select","placeholder","TerminalCode","options","terminalCode","search","noResultsMessage","BaseProductCode","baseProduct","TankCollection","length","MeterCollection","Active","text","Remarks","_Fragment","map","tank","ActiveTankCode","Badge","color","href","onClick","Utilities","multiple","TankGroupDetailsComposite","Component","constructor","arguments","state","lodash","emptyTankGroup","tankGroupValidationDef","isReadyToRender","saveEnabled","baseProductOptions","terminalOptions","tankGroupKPIList","showAuthenticationLayout","handleChange","propertyName","this","setState","undefined","console","log","handleTerminalChange","getBaseProducts","handleActiveStatusChange","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","keyCode","key","KeyCodes","obj","keyDataCode","axios","RestAPIs","props","tokenDetails","tokenInfo","then","response","result","IsSuccess","getTankGroup","Common_Code","ErrorList","toast","NotifyEvent","notificationMessage","autoClose","handleSave","validateSave","userDetails","EntityResult","IsWebPortalUser","saveTankGroup","createTankGroup","updateTankGroup","handleAuthenticationClose","handleReset","Object","keys","forEach","selectedCompRow","componentDidMount","IsArchived","selectedRow","IsEnterpriseNode","getTerminal","componentWillReceiveProps","nextProps","tankGroupRow","FunctionsList","functionGroups","modify","fnTankGroup","getKPIList","catch","add","terminalcode","Array","isArray","values","every","Entity","onSaved","tankGroupCode","view","fnKPIInformation","objKPIRequestData","PageName","kpiTankGroupDetail","InputParameters","ListKPIDetails","render","popUpContents","fieldName","fieldValue","Date","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","CreatedTime","TMDetailsHeader","entityCode","newEntityName","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","margin","Popup","element","Icon","marginLeft","root","name","size","position","List","content","Content","Button","float"],"sourceRoot":""}