{"version":3,"file":"static/js/7408.040ef61a.chunk.js","mappings":"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","sources":["Components/UIBase/Details/SMSConfigurationDetails.jsx","Components/Composite/Details/SMSConfigurationDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Select, Input, Button, TextArea, Radio } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\n\r\nSMSConfigurationDetails.propTypes = {\r\n    smsConfiguration: PropTypes.object.isRequired,\r\n    modSMSConfiguration: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        entityTypeOptions: PropTypes.array.isRequired,\r\n        entityParamTypeOptions: PropTypes.array.isRequired,\r\n        entityParamFieldOptions: PropTypes.array.isRequired,\r\n    }).isRequired,\r\n    RecipientDetails: PropTypes.array.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    onAddParamClick: PropTypes.func.isRequired,\r\n    handleParamField: PropTypes.func.isRequired,\r\n    onActiveStatusChange: PropTypes.func.isRequired\r\n};\r\n\r\nSMSConfigurationDetails.defaultProps = {\r\n    listOptions: {\r\n        entityTypeOptions: [],\r\n        entityParamTypeOptions: [],\r\n        entityParamFieldOptions: [],\r\n    },\r\n};\r\n\r\nexport default function SMSConfigurationDetails({\r\n    smsConfiguration,\r\n    modSMSConfiguration,\r\n    validationErrors,\r\n    listOptions,\r\n    RecipientDetails,\r\n    onFieldChange,\r\n    onAddParamClick,\r\n    handleParamField,\r\n    onActiveStatusChange\r\n}) {\r\n    const radioButton = (data) => {\r\n        var recipient = RecipientDetails.filter(x => x.Recipient === data.rowData.Recipient)\r\n        return (\r\n            <div>\r\n                <Radio\r\n                    checked={data.field === \"To\" ? recipient[0].To : recipient[0].None}\r\n                    onChange={() => onFieldChange(data.field === \"To\" ? \"To\" : \"None\", recipient[0].Recipient)}\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modSMSConfiguration.SMSMessageCode}\r\n                                indicator=\"required\"\r\n                                disabled={smsConfiguration.SMSMessageCode !== \"\"}\r\n                                onChange={(data) => onFieldChange(\"SMSMessageCode\", data)}\r\n                                label={t(\"SMSConfiguration_Code\")}\r\n                                error={t(validationErrors.SMSMessageCode)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"SMSConfiguration_EntityType\")}\r\n                                value={modSMSConfiguration.EmailSMSEntityType}\r\n                                options={listOptions.entityTypeOptions}\r\n                                onChange={(data) => onFieldChange(\"EmailSMSEntityType\", data)}\r\n                                indicator=\"required\"\r\n                                error={t(validationErrors.EmailSMSEntityType)}\r\n                                reserveSpace={false}\r\n                                search={false}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                                disabled={smsConfiguration.EmailSMSEntityType !== \"\" && smsConfiguration.EmailSMSEntityType !== undefined ? true : false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"SMSConfiguration_EntityParamType\")}\r\n                                value={modSMSConfiguration.EntityParamType}\r\n                                options={listOptions.entityParamTypeOptions}\r\n                                onChange={(data) => onFieldChange(\"EntityParamType\", data)}\r\n                                error={t(validationErrors.EntityParamType)}\r\n                                reserveSpace={false}\r\n                                search={false}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <div className=\"rect-box listbox\">\r\n                                <div>{t(\"SMSConfiguration_EntityParamField\")}</div>\r\n                                <ul>\r\n                                    {\r\n                                        listOptions.entityParamFieldOptions !== undefined && listOptions.entityParamFieldOptions.length > 0 &&\r\n                                        listOptions.entityParamFieldOptions.map((list, index) => {\r\n                                            return (\r\n                                                <li\r\n                                                    className={list.value === modSMSConfiguration.SelectedParamField ? 'selected-list' : ''}\r\n                                                    key={index}\r\n                                                    onClick={() => handleParamField(list.value)}\r\n                                                >\r\n                                                    {list.text}\r\n                                                </li>)\r\n                                        })\r\n                                    }\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Button\r\n                                className=\"associateParamFieldBtn\"\r\n                                content={t(\"SMSConfig_AddParamField\")}\r\n                                onClick={() => onAddParamClick()}\r\n                                disabled={modSMSConfiguration.SelectedParamField === \"\" ||\r\n                                    modSMSConfiguration.SelectedParamField === undefined ? true : false}\r\n                            ></Button>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <TextArea\r\n                                fluid={true}\r\n                                label={t(\"SMSConfiguration_SMSMessage\")}\r\n                                value={modSMSConfiguration.MessageText}\r\n                                onChange={(data) => onFieldChange(\"MessageText\", data)}\r\n                                error={t(validationErrors.MessageText)}\r\n                                indicator=\"required\"\r\n                            >\r\n                            </TextArea>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"Cust_Status\")}\r\n                                value={modSMSConfiguration.Active}\r\n                                options={[\r\n                                    { text: t(\"ViewShipment_Ok\"), value: true },\r\n                                    { text: t(\"ViewShipmentStatus_Inactive\"), value: false },\r\n                                ]}\r\n                                onChange={(data) => onActiveStatusChange(data)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={\r\n                                    modSMSConfiguration.Remarks === null\r\n                                        ? \"\"\r\n                                        : modSMSConfiguration.Remarks\r\n                                }\r\n                                label={t(\"Cust_Remarks\")}\r\n                                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                                reserveSpace={false}\r\n                                error={t(validationErrors.Remarks)}\r\n                                indicator={modSMSConfiguration.Active !== smsConfiguration.Active ? \"required\" : \"\"}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className={modSMSConfiguration.EmailSMSEntityType !== \"\" && modSMSConfiguration.EmailSMSEntityType !== undefined ? \"row\" : \"hidden\"}>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <label>\r\n                                {t(\"SMSConfiguration_RecipientList\")}\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"col-12 detailsTable\">\r\n                            <DataTable\r\n                                data={RecipientDetails}\r\n                                scrollable={true}\r\n                                scrollHeight=\"320px\"\r\n                            >\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"Recipient\"\r\n                                    field=\"Recipient\"\r\n                                    header={t(\"SMSConfiguration_Recipient\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"To\"\r\n                                    field=\"To\"\r\n                                    header={t(\"SMSConfiguration_To\")}\r\n                                    renderer={radioButton}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"None\"\r\n                                    field=\"None\"\r\n                                    header={t(\"SMSConfiguration_None\")}\r\n                                    renderer={radioButton}\r\n                                />\r\n                            </DataTable>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}","import React, { Component } from \"react\";\r\nimport { emptySMSConfiguration } from \"../../../JS/DefaultEntities\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { connect } from \"react-redux\";\r\nimport lodash from \"lodash\";\r\nimport axios from \"axios\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport SMSConfigurationDetails from \"../../UIBase/Details/SMSConfigurationDetails\";\r\nimport { functionGroups, fnSMSConfiguration } from \"../../../JS/FunctionGroups\";\r\nimport { smsConfigurationValidationDef } from \"../../../JS/ValidationDef\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass SMSConfigurationDetailsComposite extends Component {\r\n  state = {\r\n    smsConfiguration: {},\r\n    modSMSConfiguration: {},\r\n    entityDetails: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      smsConfigurationValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    saveEnabled: false,\r\n    entityTypeOptions: [],\r\n    entityParamTypeOptions: [],\r\n    entityParamFieldOptions: [],\r\n    RecipientDetails: [],\r\n    showAuthenticationLayout: false,\r\n    tempSMSConfiguration: {},\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.smsConfiguration.SMSMessageCode !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getSMSConfiguration(nextProps.selectedRow);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"SMSConfigurationDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getSMSConfiguration(smsConfigRow) {\r\n    try {\r\n      if (smsConfigRow.Common_Code === undefined) {\r\n        this.setState({\r\n          smsConfiguration: lodash.cloneDeep(emptySMSConfiguration),\r\n          modSMSConfiguration: lodash.cloneDeep(emptySMSConfiguration),\r\n          isReadyToRender: true,\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnSMSConfiguration\r\n          ),\r\n          entityParamTypeOptions: [],\r\n          entityParamFieldOptions: [],\r\n          RecipientDetails: [],\r\n        });\r\n        return;\r\n      }\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.smsConfigurationCode,\r\n          value: smsConfigRow.Common_Code,\r\n        },\r\n      ];\r\n      var obj = {\r\n        keyDataCode: KeyCodes.smsConfigurationCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetSMSConfiguration,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              isReadyToRender: true,\r\n              smsConfiguration: result.EntityResult,\r\n              modSMSConfiguration: lodash.cloneDeep(result.EntityResult),\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnSMSConfiguration\r\n              ),\r\n            });\r\n            this.getEntityParameterType(result.EntityResult.EmailSMSEntityType);\r\n            this.getRecipientList(result.EntityResult.EmailSMSEntityType);\r\n          } else {\r\n            this.setState({\r\n              smsConfiguration: lodash.cloneDeep(emptySMSConfiguration),\r\n              modSMSConfiguration: lodash.cloneDeep(emptySMSConfiguration),\r\n              isReadyToRender: true,\r\n              selColor: \"\",\r\n            });\r\n            console.log(\"Error in getSMSConfiguration:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"Error while getting SMS Configuration:\",\r\n            error,\r\n            smsConfigRow\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"Error while getting SMS Configuration:\",\r\n        error)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      this.getEntityDetails();\r\n      this.getSMSConfiguration(this.props.selectedRow);\r\n    } catch (error) {\r\n      console.log(\r\n        \"SMSConfigurationDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getEntityDetails() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetEntityTypeRecipientList,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (\r\n              result.EntityResult !== null &&\r\n              result.EntityResult !== undefined\r\n            ) {\r\n              let entityTypeOptions = this.state.entityTypeOptions;\r\n              entityTypeOptions = Utilities.transferListtoOptions(\r\n                Object.keys(result.EntityResult)\r\n              );\r\n              this.setState({\r\n                entityDetails: result.EntityResult,\r\n                entityTypeOptions,\r\n              });\r\n            }\r\n          } else {\r\n            console.log(\"Error in getEntityDetails:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Entity Details:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while getting Entity Details:\", error);\r\n    }\r\n  }\r\n\r\n  getEntityParameterType(entityType) {\r\n    try {\r\n      const entityDetails = lodash.cloneDeep(this.state.entityDetails);\r\n      let entityParamTypeOptions = this.state.entityParamTypeOptions;\r\n      entityParamTypeOptions = [];\r\n      entityParamTypeOptions = Utilities.transferListtoOptions([\r\n        entityDetails[entityType].Key,\r\n      ]);\r\n      this.setState({\r\n        entityParamTypeOptions,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"SMSConfigurationDetailsComposite:Error occured on getEntityParameterType\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      let modSMSConfiguration = lodash.cloneDeep(\r\n        this.state.modSMSConfiguration\r\n      );\r\n      modSMSConfiguration[propertyName] = data;\r\n      if (propertyName === \"EmailSMSEntityType\") {\r\n        this.getEntityParameterType(data);\r\n        this.getRecipientList(data);\r\n      }\r\n\r\n      if (propertyName === \"EntityParamType\") this.getEntityParamFields(data);\r\n\r\n      let RecipientDetails = this.state.RecipientDetails;\r\n      if (propertyName === \"To\") {\r\n        RecipientDetails.forEach((x) => {\r\n          if (x.Recipient === data) {\r\n            x.To = true;\r\n            x.None = false;\r\n          }\r\n        });\r\n        this.setState({ RecipientDetails });\r\n      }\r\n      if (propertyName === \"None\") {\r\n        RecipientDetails.forEach((x) => {\r\n          if (x.Recipient === data) {\r\n            x.To = false;\r\n            x.None = true;\r\n          }\r\n        });\r\n        this.setState({ RecipientDetails });\r\n      }\r\n\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      if (smsConfigurationValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          smsConfigurationValidationDef[propertyName],\r\n          data\r\n        );\r\n      }\r\n      this.setState({ validationErrors, modSMSConfiguration });\r\n    } catch (error) {\r\n      console.log(\r\n        \"SMSConfigurationDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleParamField = (selectedParamField) => {\r\n    var modSMSConfiguration = lodash.cloneDeep(this.state.modSMSConfiguration);\r\n    modSMSConfiguration.SelectedParamField = selectedParamField;\r\n\r\n    this.setState({\r\n      modSMSConfiguration,\r\n    });\r\n  };\r\n\r\n  handleAddParamterClick = () => {\r\n    try {\r\n      var modSMSConfiguration = lodash.cloneDeep(this.state.modSMSConfiguration);\r\n      let strParamField =\r\n        \" [\" +\r\n        modSMSConfiguration.EntityParamType +\r\n        \"_\" +\r\n        modSMSConfiguration.SelectedParamField +\r\n        \"] \";\r\n      modSMSConfiguration.MessageText =\r\n        modSMSConfiguration.MessageText + strParamField;\r\n\r\n      this.setState({ modSMSConfiguration });\r\n    } catch (err) {\r\n      console.log(\"Error in handleAddParameterClick\",err)\r\n    }\r\n  };\r\n\r\n  getEntityParamFields(paramType) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetEntityParamFields + paramType,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (\r\n              result.EntityResult !== null &&\r\n              result.EntityResult !== undefined\r\n            ) {\r\n              let entityParamFieldOptions = this.state.entityParamFieldOptions;\r\n              entityParamFieldOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult\r\n              );\r\n              this.setState({\r\n                entityParamFieldOptions,\r\n              });\r\n            }\r\n          } else {\r\n            console.log(\"Error in getEntityParamFields:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Entity Param Fields:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while getting Entity Param Fields:\", error);\r\n    }\r\n  }\r\n\r\n  getRecipientList(entityType) {\r\n    try {\r\n      let RecipientDetails = lodash.cloneDeep(this.state.RecipientDetails);\r\n      const modSMSConfiguration = lodash.cloneDeep(\r\n        this.state.modSMSConfiguration\r\n      );\r\n      let entityDetails = lodash.cloneDeep(this.state.entityDetails);\r\n      RecipientDetails = [];\r\n      entityDetails[entityType].Value.forEach((recipient) => {\r\n        let recipientRow = {\r\n          Recipient: recipient,\r\n          To:\r\n            modSMSConfiguration.RecipientList.indexOf(recipient) >= 0\r\n              ? true\r\n              : false,\r\n          None:\r\n            modSMSConfiguration.RecipientList.indexOf(recipient) >= 0\r\n              ? false\r\n              : true,\r\n        };\r\n        RecipientDetails.push(recipientRow);\r\n      });\r\n      this.setState({\r\n        RecipientDetails,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"SMSConfigurationDetailsComposite:Error occured on getRecipientList\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  saveSMSConfiguration = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempSMSConfiguration = lodash.cloneDeep(this.state.tempSMSConfiguration);\r\n      this.state.smsConfiguration.SMSMessageCode === \"\"\r\n        ? this.createSMSConfiguration(tempSMSConfiguration)\r\n        : this.updateSMSConfiguration(tempSMSConfiguration);\r\n    } catch (error) {\r\n      console.log(\"SMSConfigurationgDetailsComposite : Error in saveSMSConfiguration\");\r\n    }\r\n  };\r\n  handleSave = () => {\r\n    try {\r\n      let modSMSConfiguration = lodash.cloneDeep(\r\n        this.state.modSMSConfiguration\r\n      );\r\n      const RecipientDetails = lodash.cloneDeep(this.state.RecipientDetails);\r\n      modSMSConfiguration.RecipientList = this.formRecipientList(\r\n        RecipientDetails\r\n      );\r\n      // this.setState({ saveEnabled: false });\r\n      if (this.validateSave(modSMSConfiguration)) {\r\n        let tempSMSConfiguration = lodash.cloneDeep(modSMSConfiguration);\r\n        let showAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n        this.setState({ showAuthenticationLayout, tempSMSConfiguration }, () => {\r\n          if (showAuthenticationLayout === false) {\r\n            this.saveSMSConfiguration();\r\n          }\r\n        });\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"SMSConfigurationDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  formRecipientList(recipientDetails) {\r\n    let recipientList = \"\";\r\n    try {\r\n      if (Array.isArray(recipientDetails)) {\r\n        recipientDetails.forEach((recipient) => {\r\n          if (recipient.To === true) recipientList += recipient.Recipient + \",\";\r\n        });\r\n        if (recipientList !== \"\" && recipientList !== undefined)\r\n          recipientList = recipientList.slice(0, -1);\r\n      }\r\n    } catch (error) {}\r\n    return recipientList;\r\n  }\r\n\r\n  validateSave(modSMSConfiguration) {\r\n    try {\r\n      var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      Object.keys(smsConfigurationValidationDef).forEach(function (key) {\r\n        validationErrors[key] = Utilities.validateField(\r\n          smsConfigurationValidationDef[key],\r\n          modSMSConfiguration[key]\r\n        );\r\n      });\r\n\r\n      let recipientListError = \"\";\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"SMSConfig_SavedStatus\",\r\n        messageResultDetails: [],\r\n      };\r\n\r\n      if (modSMSConfiguration.Active !== this.state.smsConfiguration.Active) {\r\n        if (\r\n          modSMSConfiguration.Remarks === null ||\r\n          modSMSConfiguration.Remarks === \"\"\r\n        ) {\r\n          validationErrors[\"Remarks\"] = \"Receipt_RemarksRequired\";\r\n        }\r\n      }\r\n      if (\r\n        modSMSConfiguration.RecipientList === \"\" ||\r\n        modSMSConfiguration.RecipientList === null ||\r\n        modSMSConfiguration.RecipientList === undefined\r\n      ) {\r\n        recipientListError = \"SMSConfiguration_RecipientListEmptyError\";\r\n\r\n        if (recipientListError !== \"\") {\r\n          notification.messageResultDetails.push({\r\n            keyFields: [\"SMSConfiguration_RecipientList\"],\r\n            keyValues: [modSMSConfiguration.RecipientList],\r\n            isSuccess: false,\r\n            errorMessage: recipientListError,\r\n          });\r\n        }\r\n        if (\r\n          modSMSConfiguration.SMSMessageCode !== \"\" &&\r\n          modSMSConfiguration.EmailSMSEntityType !== \"\"\r\n        ) {\r\n          this.props.onSaved(modSMSConfiguration, \"update\", notification);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      this.setState({ validationErrors });\r\n      var returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n      return returnValue;\r\n    } catch (error) {\r\n      console.log(\"Error in validate save\",error)\r\n    }\r\n  }\r\n\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modSMSConfiguration = lodash.cloneDeep(\r\n        this.state.modSMSConfiguration\r\n      );\r\n      modSMSConfiguration.Active = value;\r\n      if (modSMSConfiguration.Active !== this.state.smsConfiguration.Active)\r\n        modSMSConfiguration.Remarks = \"\";\r\n      this.setState({ modSMSConfiguration });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  createSMSConfiguration(modSMSConfiguration) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.smsConfigurationCode,\r\n          value: modSMSConfiguration.SMSMessageCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        keyDataCode: KeyCodes.smsConfigurationCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modSMSConfiguration,\r\n      };\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"SMSConfig_SavedStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"SMSConfiguration_Code\"],\r\n            keyValues: [modSMSConfiguration.SMSMessageCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.CreateSMSConfiguration,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.setState(\r\n              {\r\n                saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnSMSConfiguration\r\n                ),\r\n              },\r\n              () =>\r\n                this.getSMSConfiguration({\r\n                  Common_Code: modSMSConfiguration.SMSMessageCode,\r\n                })\r\n            );\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            this.setState({\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.add,\r\n                fnSMSConfiguration\r\n              ),\r\n            });\r\n            console.log(\"Error in createSMSConfiguration:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(modSMSConfiguration, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnSMSConfiguration\r\n            ),\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(modSMSConfiguration, \"add\", notification);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in createSMSConfiguration\",error)\r\n    }\r\n  }\r\n\r\n  updateSMSConfiguration(modSMSConfiguration) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.smsConfigurationCode,\r\n          value: modSMSConfiguration.SMSMessageCode,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        keyDataCode: KeyCodes.smsConfigurationCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modSMSConfiguration,\r\n      };\r\n\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"SMSConfig_SavedStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"SMSConfiguration_Code\"],\r\n            keyValues: [modSMSConfiguration.SMSMessageCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.UpdateSMSConfiguration,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.setState(\r\n              {\r\n                saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnSMSConfiguration\r\n                ),\r\n              },\r\n              () =>\r\n                this.getSMSConfiguration({\r\n                  Common_Code: modSMSConfiguration.SMSMessageCode,\r\n                })\r\n            );\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            this.setState({\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnSMSConfiguration\r\n              ),\r\n            });\r\n            console.log(\"Error in updateSMSConfiguration:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(modSMSConfiguration, \"update\", notification);\r\n        })\r\n        .catch((error) => {\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(modSMSConfiguration, \"modify\", notification);\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnSMSConfiguration\r\n            ),\r\n          });\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in updateSMSConfiguration:\",error)\r\n    }\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      let modSMSConfiguration = lodash.cloneDeep(this.state.smsConfiguration);\r\n      modSMSConfiguration.EntityParamType = \"\";\r\n      this.setState({\r\n        modSMSConfiguration,\r\n        validationErrors,\r\n        entityParamFieldOptions: [],\r\n      });\r\n\r\n      this.getEntityParameterType(\r\n        this.state.smsConfiguration.EmailSMSEntityType\r\n      );\r\n      this.getRecipientList(this.state.smsConfiguration.EmailSMSEntityType);\r\n    } catch (error) {\r\n      console.log(\r\n        \"SMSConfigurationDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  \r\n  render() {\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"DriverInfo_LastUpdated\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modSMSConfiguration.LastUpdatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modSMSConfiguration.LastUpdatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"DriverInfo_LastActive\",\r\n        fieldValue:\r\n          this.state.modSMSConfiguration.LastActiveTime !== undefined &&\r\n          this.state.modSMSConfiguration.LastActiveTime !== null\r\n            ? new Date(\r\n                this.state.modSMSConfiguration.LastActiveTime\r\n              ).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(\r\n                this.state.modSMSConfiguration.LastActiveTime\r\n              ).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"DriverInfo_CreatedTime\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modSMSConfiguration.CreatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modSMSConfiguration.CreatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n    ];\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.smsConfiguration.SMSMessageCode}\r\n            newEntityName=\"SMSConfigurationDetails_PageTitle\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <SMSConfigurationDetails\r\n            smsConfiguration={this.state.smsConfiguration}\r\n            modSMSConfiguration={this.state.modSMSConfiguration}\r\n            validationErrors={this.state.validationErrors}\r\n            listOptions={{\r\n              entityTypeOptions: this.state.entityTypeOptions,\r\n              entityParamTypeOptions: this.state.entityParamTypeOptions,\r\n              entityParamFieldOptions: this.state.entityParamFieldOptions,\r\n            }}\r\n            RecipientDetails={this.state.RecipientDetails}\r\n            onFieldChange={this.handleChange}\r\n            handleParamField={this.handleParamField}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            onAddParamClick={this.handleAddParamterClick}\r\n          ></SMSConfigurationDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.smsConfiguration.SMSMessageCode === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnSMSConfiguration}\r\n            handleOperation={this.saveSMSConfiguration}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(SMSConfigurationDetailsComposite);\r\n\r\nSMSConfigurationDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  //selectedShareholder: PropTypes.string.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n"],"names":["SMSConfigurationDetails","_ref","smsConfiguration","modSMSConfiguration","validationErrors","listOptions","RecipientDetails","onFieldChange","onAddParamClick","handleParamField","onActiveStatusChange","radioButton","data","recipient","filter","x","Recipient","rowData","_jsx","children","Radio","checked","field","To","None","onChange","TranslationConsumer","t","_jsxs","className","Input","fluid","value","SMSMessageCode","indicator","disabled","label","error","reserveSpace","Select","placeholder","EmailSMSEntityType","options","entityTypeOptions","search","noResultsMessage","undefined","EntityParamType","entityParamTypeOptions","entityParamFieldOptions","length","map","list","index","SelectedParamField","onClick","text","Button","content","TextArea","MessageText","Active","Remarks","DataTable","scrollable","scrollHeight","Column","header","renderer","defaultProps","SMSConfigurationDetailsComposite","Component","constructor","arguments","state","entityDetails","Utilities","smsConfigurationValidationDef","isReadyToRender","saveEnabled","showAuthenticationLayout","tempSMSConfiguration","handleChange","propertyName","lodash","this","getEntityParameterType","getRecipientList","getEntityParamFields","forEach","setState","console","log","selectedParamField","handleAddParamterClick","strParamField","err","saveSMSConfiguration","createSMSConfiguration","updateSMSConfiguration","handleSave","RecipientList","formRecipientList","validateSave","props","userDetails","EntityResult","IsWebPortalUser","handleActiveStatusChange","handleReset","Object","keys","key","handleAuthenticationClose","componentWillReceiveProps","nextProps","selectedRow","Common_Code","tokenDetails","tokenInfo","getSMSConfiguration","smsConfigRow","emptySMSConfiguration","FunctionsList","functionGroups","add","fnSMSConfiguration","keyCode","KeyCodes","obj","keyDataCode","axios","RestAPIs","then","response","result","IsSuccess","modify","selColor","ErrorList","catch","componentDidMount","getEntityDetails","entityType","Key","paramType","Value","recipientRow","indexOf","push","recipientDetails","recipientList","Array","isArray","slice","recipientListError","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","values","every","onSaved","Entity","render","popUpContents","fieldName","fieldValue","Date","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","LastActiveTime","CreatedTime","ErrorBoundary","TMDetailsHeader","entityCode","newEntityName","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","style","margin","Popup","element","Icon","marginLeft","root","name","size","position","List","Content","float"],"sourceRoot":""}