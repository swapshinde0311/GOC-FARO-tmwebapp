{"version":3,"file":"static/js/4478.152f2791.chunk.js","mappings":"sMAoDO,SAASA,EAAaC,GAazB,IAb0B,oBAC5BC,EAAmB,eACnBC,EAAc,aACdC,EAAY,oBACZC,EAAmB,oBACnBC,EAAmB,SACnBC,EAAQ,MACRC,EAAK,aACLC,EAAY,WACZC,EAAU,sBACVC,EAAqB,WACrBC,EAAU,cACVC,GACDZ,EACC,MAAOa,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GA2C3C,SAASG,IACHjB,EAAoBkB,MAClBX,EAAaY,OAAS,EACCH,GAAP,IAAdD,GAGJT,IAGN,CAgHA,OACEc,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAMC,MAAO,CAAEC,WAAY,aAAcC,QAAS,OAAQC,SAAA,EACvEC,EAAAA,EAAAA,KAAA,OACEL,UAAU,8CACVC,MAAO,CAAEE,QAAS,OAAQC,UAE1BL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAMC,MAAO,CAAEK,UAAW,OAAQJ,WAAY,IAAKE,SAAA,EAChEC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,+CAA8CI,UAC3DL,EAAAA,EAAAA,MAACQ,EAAAA,EAAa,CAAAH,SAAA,CAAC,KAhKrBC,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAV,EAAAA,EAAAA,MAACW,EAAAA,WAAU,CAAAN,SAAA,CACRxB,EAAe+B,QAAQC,KAAKC,IAEzBR,EAAAA,EAAAA,KAACK,EAAAA,WAAWI,KAAI,CACdC,QAASA,UAEqBC,IAA1B5B,GAC0B,OAA1BA,GAEAA,EACEyB,EAAWI,SACXrC,EAAe+B,QAEnB,EACAP,SAGDK,EAAEI,EAAWK,eAFTL,EAAWI,aAMtBZ,EAAAA,EAAAA,KAACK,EAAAA,WAAWI,KAAI,CAAAV,SACbK,EAAE7B,EAAesC,eADEtC,EAAeqC,qBA2IvCZ,EAAAA,EAAAA,KAAA,OACEL,UAAU,+CACZI,UAEEC,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAJ,EAAAA,EAAAA,KAAA,OACEL,UAAU,kBACVC,MAAO,CAAEkB,eAAgB,cAAef,UAExB,IAAfjB,EACC,IAEAY,EAAAA,EAAAA,MAAAqB,EAAAA,SAAA,CAAAhB,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAAD,UACEL,EAAAA,EAAAA,MAAA,MAAIC,UAAU,UAASI,SAAA,CAAEK,EAAE,sBAAsB,UAEnDJ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,WAAUI,UACvBC,EAAAA,EAAAA,KAACgB,EAAAA,OACC,CACAC,YAAab,EAAE,sBACfc,MAAOzC,EACP0C,UAAW7C,EAAoB8C,YAC/BC,QAnMfC,EAAAA,GAAgC9C,GAoMjB+C,SAAWL,GAAUxC,EAAoBwC,iBAhE7DlB,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAV,EAAAA,EAAAA,MAAC8B,EAAAA,MAAK,CAACC,KAAMvC,EAAWwC,KAAK,QAAO3B,SAAA,EAClCC,EAAAA,EAAAA,KAACwB,EAAAA,MAAMG,QAAO,CAAA5B,UACZC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAIK,EAAE,yBAGVV,EAAAA,EAAAA,MAAC8B,EAAAA,MAAMI,OAAM,CAAA7B,SAAA,EACXC,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLC,KAAK,YACLC,QAAS3B,EAAE,UACXM,QAASA,IAAMvB,GAAa,MAE9Ba,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLC,KAAK,UACLC,QAAS3B,EAAE,8BACXM,QAASA,KACPvB,GAAa,GACbR,GAAU,kBA0DtBqB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,4CAA2CI,UAvJ1DL,EAAAA,EAAAA,MAAA,OACEE,MAAO,CAAEoC,MAAO,QAASC,QAAS,eAAgBhC,UAAW,QAASF,SAAA,CAErEf,GAAagB,EAAAA,EAAAA,KAACkC,EAAAA,MAAK,CAClBC,SAAS,eACTxC,UAAU,mBACVyC,SACEpC,EAAAA,EAAAA,KAAA,OACEL,WACGrB,EAAoBkB,IACjB,cACA,sBAAwB,YAE9BkB,QAASnB,EAAiBQ,UAE1BC,EAAAA,EAAAA,KAACqC,EAAAA,KAAI,CACHC,KAAK,SACLC,KAAK,aACLb,KAAK,QACLc,MAAM,YAIZC,GAAG,QACHhB,KAAMpC,EAAUU,UAEhBC,EAAAA,EAAAA,KAAA,OAAK0C,aAAcA,IAAMpD,GAAa,GAAOS,UAC3CC,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAJ,EAAAA,EAAAA,KAAC2C,EAAAA,aAAY,CAAA5C,UACXL,EAAAA,EAAAA,MAACiD,EAAAA,aAAY,CAAA5C,SAAA,EACXC,EAAAA,EAAAA,KAAC2C,EAAAA,aAAaC,OAAM,CAAA7C,SACjBK,EAAE,mBAEJvB,EAAa0B,KAAKsC,IAEf7C,EAAAA,EAAAA,KAAC2C,EAAAA,aAAalC,KAAI,CAChBC,QAASA,KAAMoC,OA3CfC,EA2C8BF,EAAKG,UA1CzD1D,GAAa,QACbV,EAAMmE,GAFR,IAAwBA,CA2C8C,EAAAhD,SAE7CK,EAAEyC,EAAKI,2BASf,GACVhE,GAAgBe,EAAAA,EAAAA,KAAA,OACfJ,MAAO,CAAEsD,WAAY,QACrBxC,QAASA,KACHpC,EAAoB6E,QACtBhE,GAAa,EAGf,EAEFQ,WACGrB,EAAoB6E,OACjB,cACA,sBAAwB,YAC7BpD,UAEDC,EAAAA,EAAAA,KAACqC,EAAAA,KAAI,CAACC,KAAK,SAASC,KAAK,SAASb,KAAK,QAAQc,MAAM,YAC9C,UA2FjB,CAxPApE,EAAcgF,aAAe,CAC3B9E,oBAAqB,CAAEkB,KAAK,EAAO2D,QAAQ,EAAO/B,aAAa,GAC/D7C,eAAgB,CACd8E,SAAU,GACVzC,SAAU,GACVC,aAAc,GACdyC,UAAW,CAAC,EACZhD,QAAS,GACTiD,aAAa,GAEf/E,aAAc,GACdC,oBAAqB,GACrBI,aAAc,GACdC,YAAY,EACZE,YAAY,EACZC,eAAe,G,SC/CV,SAASuE,EAAsBnF,GAclC,IAdmC,oBACrCC,EAAmB,eACnBC,EAAc,aACdC,EAAY,oBACZC,EAAmB,oBACnBC,EAAmB,SACnBC,EAAQ,MACRC,EAAK,aACLC,EAAY,WACZC,EAAU,sBACVC,EAAqB,WACrBC,EAAU,cACVC,GAEDZ,EACC,OACE2B,EAAAA,EAAAA,KAAC5B,EAAa,CACZE,oBAAqBA,EACrBC,eAAgBA,EAChBC,aAAcA,EACdC,oBAAqBA,EACrBC,oBAAqBA,EACrBC,SAAUA,EACVC,MAAOA,EACPC,aAAcA,EACdC,WAAYA,EACZC,sBAAuBA,EACvBC,WAAYA,EACZC,cAAeA,GAGrB,C,+NCfA,MAAMwE,UAAiCC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KAC/CC,MAAQ,CACNC,oBAAqB,GACrBC,kBAAmB,EACnBC,iBAAkB,EAClBC,eAAgB,EAChBC,eAAgB,EAChBC,QAAQ,GACRC,SAAS,CAAC,GA8FZ,KAEAC,uBAAyB,CAACC,EAAOC,KAC/B,MAAM,MAAErD,GAAUqD,EAAMC,OAClBC,EAAc,IAAIC,KAAKb,MAAMC,qBAEnC,IAAIa,EAAgBC,WAAW1D,GAM/B,GAJc,KAAVA,IACFyD,EAAgB,GAGdE,MAAMF,IAAkBA,EAAgB,GAAKA,EAAgB,IAE/D,YADAG,MAAM,qDAIuBL,EAAYM,QACzC,CAACC,EAAK5D,EAAa6D,IACbA,IAAQX,EACHU,EAAML,EAERK,EAAM5D,EAAY8D,YAE3B,IAG4B,KAC5BT,EAAYH,GAAOY,WAAaP,EAEhCF,EAAYU,SAAQ,CAAC/D,EAAa6D,KAEhC7D,EAAYgE,cACThE,EAAY8D,WAAa,IAAOR,KAAKb,MAAME,kBAG9C3C,EAAYiE,aACTjE,EAAY8D,WAAa,IAAOR,KAAKb,MAAMG,iBAC9C5C,EAAYkE,OACTlE,EAAY8D,WAAa,IAAOR,KAAKb,MAAMI,eAC9C7C,EAAYmE,KACTnE,EAAY8D,WAAa,IAAOR,KAAKb,MAAMK,cAAc,IAG9DQ,KAAKc,SAAS,CAAE1B,oBAAqBW,KAErCK,MAAM,gCACR,EACA,KAEFW,oBAAuBrE,GACdsE,IAAAA,KAAWC,EAAAA,IAAsB,CACtCC,cAAe,mCACfC,gBAAiBzE,EAAY0E,YAC7BZ,WAAY9D,EAAY8D,WACxBE,cAAehE,EAAYgE,cAC3BC,aAAcjE,EAAYiE,aAC1BC,OAAQlE,EAAYkE,OACpBC,KAAMnE,EAAYmE,OAEpB,KAqGFQ,YAAc,KACZ,MAAMtB,EAAcC,KAAKb,MAAMC,oBAAoBvD,KAAKa,IAAW,IAC9DA,EACH8D,WAAY,EACZE,cAAe,MAGjBV,KAAKc,SAAS,CAAE1B,oBAAqBW,GAAc,CACnD,CApQFuB,iBAAAA,GACEC,QAAQC,IAAI,4BACZ,IACE5E,EAAAA,GAAqBoD,KAAKyB,MAAMC,YAAYC,aAAaC,YAErD5B,KAAKyB,MAAMC,YAAYC,aAAaE,cACtC7B,KAAK8B,wBACP9B,KAAK+B,qBACL/B,KAAKgC,gBACP,CAAE,MAAOC,GACPV,QAAQC,IACN,8DACAS,EAEJ,CACF,CAOAF,kBAAAA,GACE,IACEf,IACEC,EAAAA,IAAsB,kCACtBrE,EAAAA,GACEoD,KAAKyB,MAAMS,aAAaC,YAE1BC,MAAMC,IACN,IAAIC,EAASD,EAASE,KAEtB,GADAhB,QAAQC,IAAI,yBAADgB,OAA0BC,KAAKC,UAAUJ,MAC3B,IAArBA,EAAOK,UAAoB,CAC7B,MAAMC,EAAsBN,EAAOX,aAC7BtC,EAAoBuD,EAAoB,GAAGC,kBAC3CvD,EAAmBsD,EAAoB,GAAGE,iBAC1CvD,EAAiBqD,EAAoB,GAAGG,eACxCvD,EAAiBoD,EAAoB,GAAGI,eACxCvD,EAAUmD,EAAoB,GAAGnD,QAEvCO,KAAKc,SAAS,CACZ1B,oBAAqBwD,EACrBvD,kBAAmBA,EACnBC,iBAAkBA,EAClBC,eAAgBA,EAChBC,eAAgBA,EAChBC,QAASA,GAEb,IAEJ,CAAE,MAAOwC,GACPV,QAAQC,IACN,6DACAS,EAEJ,CACF,CAiHAgB,wBAAAA,GACE,IACE,MAAMC,EAAkB,CAAEC,OAAQnD,KAAKb,MAAMC,qBAE7CmC,QAAQC,IAAI,6DAADgB,OACoDC,KAAKC,UAChEQ,KAGJ3B,QAAQC,IAAI,2CACZ,IAOI4B,EAAM,CACRC,YAAa,GACbC,SATY,CACZ,CACEC,IAAKD,EAAAA,GACL9G,MAAO,0BAOTgH,MAAOxD,KAAKb,MAAMC,qBAGhBqE,EAAe,CACjBC,YAAa,UACbC,QAAS,uCACTC,qBAAsB,CACpB,CACEC,UAAW,GACXC,UAAW,GACXC,WAAW,EACXC,aAAc,MAIpBhD,IACEC,EAAAA,IACArE,EAAAA,GACEwG,EACApD,KAAKyB,MAAMS,aAAaC,YAGzBC,MAAMC,IACL,IAAIC,EAASD,EAASE,KACtBhB,QAAQC,IAAI,6DAADgB,OACoDC,KAAKC,UAChEJ,KAGJmB,EAAaC,YAAcpB,EAAOK,UAAY,UAAY,WAC1Dc,EAAaG,qBAAqB,GAAGG,UAAYzB,EAAOK,UACxDc,EAAaE,QAAU,uCACvBpC,QAAQC,IAAI,6DAADgB,OACoDC,KAAKC,UAChEe,EAAaE,WAGjBpC,QAAQC,IACN,sDACAc,EACD,IAEF2B,OAAOhC,IAENwB,EAAaG,qBAAqB,GAAGI,aACnC,iCAAiC,KAEvCE,EAAAA,EAAAA,QACE5I,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC6I,EAAAA,EAAW,CAACC,oBAAqBX,MAEpC,CACEY,UAAwC,YAA7BZ,EAAaC,aAA4B,KAG1D,CAAE,MAAOzB,GACPV,QAAQC,IACN,uDACAS,EAEJ,CACF,CAYAqC,kBAAAA,CAAmBC,EAAWC,GAG1BA,EAAUnF,oBAAsBW,KAAKb,MAAME,mBAC3CmF,EAAUlF,mBAAqBU,KAAKb,MAAMG,kBAC1CkF,EAAU/E,UAAYO,KAAKb,MAAMM,SAEjCO,KAAKgC,gBAET,CACAA,cAAAA,GAEE,MAAM,kBAAE3C,EAAiB,iBAAEC,EAAgB,QAAEG,GAAYO,KAAKb,MACxDsF,EAAoBnF,EAAmBD,EAAqB,IAClEkC,QAAQC,IAAI,4BAA4B/B,GAExC,MAAMC,EAAW,CACfgF,MAAO,OACPC,gBAAgB,GAADnC,OAAK/C,GACpBhC,SAAU,WACVmH,OAAQ,IACRC,UAAW,SACX/G,MAAO,UACPgH,OAAO,GAADtC,OAAKiC,EAAgB,MAG7BzE,KAAKc,SAAS,CAAEpB,YAClB,CAIAqF,MAAAA,GACE,MAAM,kBAAE1F,EAAiB,iBAAEC,EAAgB,SAAEI,GAAaM,KAAKb,MACzDsF,EAAoBnF,EAAmBD,EAAqB,IAC5D2F,EAAkB3F,EAAoBC,EAe5C,OACEtE,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EACEC,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAACwD,EAAAA,EAAsB,CACrBjF,eAAgBmG,KAAKyB,MAAMwD,WAC3BnL,aAAckG,KAAKyB,MAAMC,YAAYC,aAAauD,gBAClD7K,sBAAuB2F,KAAKyB,MAAMpH,sBAClCD,YAAY,EACZE,YAAY,EACZC,eAAe,OAGnBe,EAAAA,EAAAA,KAAA,OAAKL,UAAU,oBAAmBI,UAChCC,EAAAA,EAAAA,KAAA,OAAAD,UACEL,EAAAA,EAAAA,MAAA,SAAOC,UAAU,YAAWI,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SAAAD,UACEL,EAAAA,EAAAA,MAAA,MAAAK,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBAEJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBAIRC,EAAAA,EAAAA,KAAA,SAAAD,SACG2E,KAAKb,MAAMC,oBAAoBvD,KAAI,CAACa,EAAakD,KAChD5E,EAAAA,EAAAA,MAAA,MAAAK,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKqB,EAAYyI,QACjB7J,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,SACE8B,KAAK,OACLZ,MAAOE,EAAY8D,WACnB3D,SAAWgD,GACTG,KAAKL,uBAAuBC,EAAOC,GAErCuF,OAAQA,IAAMpF,KAAKe,oBAAoBnB,QAI3CtE,EAAAA,EAAAA,KAAA,MAAAD,SAAKqB,EAAYiE,gBACjBrF,EAAAA,EAAAA,KAAA,MAAAD,SAAKqB,EAAYkE,WAdVhB,QAmBbtE,EAAAA,EAAAA,KAAA,SAAAD,UACEL,EAAAA,EAAAA,MAAA,MAAAK,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,SAEJC,EAAAA,EAAAA,KAAA,MAAAD,SAAK2E,KAAKb,MAAMG,oBAChBhE,EAAAA,EAAAA,KAAA,MAAAD,SAAK2E,KAAKb,MAAMI,8BAO1BjE,EAAAA,EAAAA,KAAA,OAAKL,UAAU,yBAAwBI,UACrCC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,6BAA4BI,UACzCL,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEoC,MAAO,SAAUjC,SAAA,EAC7BC,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLE,QAAS,QACTpC,UAAU,eACVe,QAASgE,KAAKqB,eAEhB/F,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLE,QAAS,OACTrB,QAASA,IAAMgE,KAAKiD,qCAM5BjI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBI,SAAA,EAC7BL,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBC,EAAAA,EAAAA,KAAA,OAGEJ,MAAOwE,EAASrE,SAAA,GAAAmH,OAEZiC,EAAiBY,QAAQ,GAAE,UAGnC/J,EAAAA,EAAAA,KAAA,OAAKL,UAAU,gBAAeI,UAC5BL,EAAAA,EAAAA,MAAA,KAAAK,SAAA,CAAG,aAAWgE,EAAkB,cAGpCrE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWI,SAAA,EACtBL,EAAAA,EAAAA,MAAA,KAAGC,UAAU,kBAAiBI,SAAA,CAAC,qBAAmB2J,EAAgB,SAClEhK,EAAAA,EAAAA,MAAA,KAAAK,SAAA,CAAG,iBAAeiE,EAAiB,eAWzChE,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAACgK,EAAAA,eAAc,CACbC,iBAAiB,EACjBC,cAAc,EACdC,aAAa,EACbC,aAAa,EACbjI,SAAS,eACTkI,eAAe,gCAKzB,EAGF,MAMA,GAAeC,EAAAA,EAAAA,KANUzG,IAChB,CACLuC,YAAavC,EAAM0G,eAAenE,YAClCQ,aAAc/C,EAAM0G,eAAeC,aAGvC,CAAwC/G,E,gFCtcjC,SAASgH,EAAoBpM,GAKhC,IALiC,WACnCqM,EAAU,WACVC,EAAU,YACV5E,EAAW,YACX6E,GACDvM,EACC,OACE2B,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAV,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBI,SAAA,EACrCC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BI,UACvCC,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLlC,UAAU,aACVe,QAASgK,EACT3I,QAAS3B,EAAE,aAGfJ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BI,UACvCL,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEoC,MAAO,SAAUjC,SAAA,EAC7BC,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLE,QAAS3B,EAAE,uBACXT,UAAU,eACVe,QAASqF,KAEX/F,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLE,QAAS3B,EAAE,QACXe,UAAWyJ,EACXlK,QAASiK,aAWzB,CAvCAF,EAAqBrH,aAAe,CAAEwH,aAAa,E,upCCV5C,MAAMC,EAAc,cACdC,EAAqB,qBACrBC,EAAkB,kBAClBC,EAAa,aACbC,EAAe,eACfC,EAAc,cACdC,EAAqB,qBACrBC,EAAiB,iBACjBC,EAAc,cACdC,EAAkB,kBAClBC,EAAsB,sBACtBC,EAAe,eACfC,EAAY,YACZC,EAAc,cAEdC,EAAqB,qBACrBC,EAAoB,oBACpBC,EAAe,eACfC,EAAe,eAEfC,EAAmB,mBACnBC,EAAkB,kBAClBC,EAAgB,gBAChBC,EAAY,YAEZC,EAAkB,kBAElBC,EAAuB,uBACvBC,EAAuB,uBACvBC,EAAsB,sBACtBC,EAAyB,yBAEzBC,EAAkB,kBAClBC,EAAe,eAGfC,EAAe,eAEfC,EAAa,aAEbC,EAAa,aACbC,EAAiB,iBACjBC,EAAiB,iBACjBC,EAAU,UACVC,EAAU,UACVC,EAAkB,kBAClBC,EAAS,SACTC,EAAwB,wBAExBC,EAAiB,iBACjBC,EAAoB,qBACpBC,EAAU,UACVC,EAAoB,oBACpBC,EAAc,cACdC,EAAe,eACfC,EAAgB,gBAChBC,EAAW,WACXC,EAAY,YAEZC,EAAe,eACfC,EAAiB,iBACjBC,EAAgB,gBAChBC,GAAe,eAEfC,GAAgB,gBAChBC,GAAkB,kBAClBC,GAAsB,sBACtBC,GAAe,SAEfC,GAAiB,iBACjBC,GAAuB,SACvB1I,GAAgB,gBAChB2I,GAAkB,kBAClBC,GAAsB,sBACtBC,GAA4B,4BAC5BC,GAAuB,uBACvBC,GAAgB,gBAChBC,GAAiB,iBACjBC,GAAc,cACdC,GAAW,WACXC,GAAc,cACdC,GAAiB,iBACjBC,GAAU,UACVC,GAAgB,gBAChBC,GAAc,cACdC,GAAW,oBACXC,GAAoB,oBACpBC,GAAa,aACbC,GAAqB,qBACrBC,GAAiB,iBACjBC,GAAgB,gBAEhBC,GAAa,aACbC,GAAa,aACbC,GAAW,WACXC,GAAqB,qBACrBC,GAAsB,kBACtBC,GAAW,WACXC,GAAW,WACXC,GAAmB,mBACnBC,GAAmB,mBACnBC,GAAc,cACdC,GAAc,cACdC,GAAqB,qBACrBC,GAAwB,wBACxBC,GAA0B,0BAC1BC,GAAwB,wBACxBC,GAAwB,wBACxBC,GAAyB,yBACzBC,GAA4B,4BAC5BC,GAA6B,6BAC7BC,GAA0B,0BAC1BC,GAAe,eAEfC,GAAwB,wBACxBC,GAA+B,+BAC/BC,GAA6B,6BAC7BC,GAAuB,uBACvBC,GAAoB,oBACpBC,GAAc,cACdC,GAAwB,wBACxBC,GAAU,UACVC,GAAY,YACZC,GAAc,cACdC,GAAe,eACfC,GAAqB,qBACrBC,GAAkB,kBAClBC,GAAqB,qBAErBC,GAAkB,kBAClBC,GAAoB,oBACpBC,GAAmB,mBACnBC,GAAmC,mCAMnCC,GAAe,eACfC,GAAe,eACfC,GAAgB,e,2FCtHd,SAAStJ,EAAWxK,GAA2B,IAA1B,oBAAEyK,GAAqBzK,EAEzD,SAAS+T,EAAoB/J,GAC3B,IAEE,OADqBA,EAAQgK,MAAMC,EAAAA,IACb,EACxB,CAAE,MAAO3L,GAEP,OADAV,QAAQC,IAAIS,GACL,EACT,CACF,CACA,SAAS4L,EAA8BlK,GACrC,IACE,IAAImK,EAAiBnK,EAAQgK,MAAMC,EAAAA,IAEnC,OADAE,EAAeC,OAAO,EAAG,GAClBD,CACT,CAAE,MAAO7L,GAEP,OADAV,QAAQC,IAAIS,GACL,EACT,CACF,CAEA,OACE3G,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAJ,EAAAA,EAAAA,KAAC0S,EAAAA,aAAY,CACX/S,UAAU,qBACVgT,SAAU7J,EAAoBV,YAE9BwK,SAAS,EACTC,MAAOzS,EAAE0I,EAAoBT,SAC/BtI,SAEG+I,EAAoBR,qBAAqB/H,KAAKuS,IAC7C,IAAIC,EAAmB,GACvB,GAAID,EAAcvK,UAAU9I,OAAS,EACnC,IAAK,IAAIuT,EAAI,EAAGA,EAAIF,EAAcvK,UAAU9I,OAAQuT,IAClDD,EACEA,EACA3S,EAAE0S,EAAcvK,UAAUyK,IAC1B,MACAF,EAActK,UAAUwK,GACxB,KAGN,OACEtT,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EACEL,EAAAA,EAAAA,MAAA,QACEE,MAAO,CAAE4C,MAAOsQ,EAAcrK,UAAY,UAAY,WAAY1I,SAAA,CAEjEgT,EACAD,EAAcrK,UACXrI,EAAE,wCACFA,EAAE,wCACJ,MACAA,EACEgS,EAAoBU,EAAcpK,cAClC6J,EACEO,EAAcpK,mBAItB1I,EAAAA,EAAAA,KAAA,WACI,OAOpB,C","sources":["Components/UIBase/Common/TMUserActions.jsx","Components/Composite/Common/TMUserActionsComposite.jsx","Components/Composite/Entity/TankShareholderComposite.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","JS/KeyCodes.js","JS/NotifyEvent.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Icon,\r\n  Breadcrumb,\r\n  Select,\r\n  Modal,\r\n  Button,\r\n  Popup,\r\n  VerticalMenu,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nTMUserActions.propTypes = {\r\n  operationsVisibilty: PropTypes.shape({\r\n    add: PropTypes.bool,\r\n    delete: PropTypes.bool,\r\n    shareholder: PropTypes.bool,\r\n  }).isRequired,\r\n  breadcrumbItem: PropTypes.shape({\r\n    itemName: PropTypes.string,\r\n    itemCode: PropTypes.string,\r\n    itemProps: PropTypes.any,\r\n    localizedKey: PropTypes.string,\r\n    parents: PropTypes.array,\r\n    isComponent: PropTypes.bool,\r\n  }).isRequired,\r\n  shareholders: PropTypes.array.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onShareholderChange: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onAdd: PropTypes.func.isRequired,\r\n  popUpContent: PropTypes.array,\r\n};\r\nTMUserActions.defaultProps = {\r\n  operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n  breadcrumbItem: {\r\n    itemName: \"\",\r\n    itemCode: \"\",\r\n    localizedKey: \"\",\r\n    itemProps: {},\r\n    parents: [],\r\n    isComponent: false,\r\n  },\r\n  shareholders: [],\r\n  selectedShareholder: \"\",\r\n  popUpContent: [],\r\n  shrVisible: true,\r\n  addVisible: true,\r\n  deleteVisible: true\r\n};\r\nexport function TMUserActions({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [popUpOpen, setPopUpOpen] = useState(false);\r\n  function getShareholderDropdownOptions() {\r\n    return Utilities.transferListtoOptions(shareholders);\r\n    // var List = [];\r\n    // shareholders.forEach((element) => {\r\n    //   List.push({ text: element, value: element });\r\n    // });\r\n    // return List;\r\n  }\r\n\r\n  function buildBreadcrumb() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {breadcrumbItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item\r\n                  onClick={() => {\r\n                    if (\r\n                      handleBreadCrumbClick !== undefined &&\r\n                      handleBreadCrumbClick !== null\r\n                    ) {\r\n                      handleBreadCrumbClick(\r\n                        parentitem.itemCode,\r\n                        breadcrumbItem.parents\r\n                      );\r\n                    }\r\n                  }}\r\n                  key={parentitem.itemCode}\r\n                >\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={breadcrumbItem.itemCode}>\r\n              {t(breadcrumbItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  function handlePopUpClick() {\r\n    if (operationsVisibilty.add) {\r\n      if (popUpContent.length > 0) {\r\n        if (popUpOpen === false) setPopUpOpen(true);\r\n        else setPopUpOpen(false);\r\n      } else {\r\n        onAdd();\r\n      }\r\n    }\r\n  }\r\n\r\n  function popUpMenuClick(menuItem) {\r\n    setPopUpOpen(false);\r\n    onAdd(menuItem);\r\n  }\r\n  function displayIcons() {\r\n    return (\r\n      <div\r\n        style={{ float: \"right\", display: \"inline-block\", marginTop: \"10px\" }}\r\n      >\r\n        {addVisible ? <Popup\r\n          position=\"bottom right\"\r\n          className=\"popup-theme-wrap\"\r\n          element={\r\n            <div\r\n              className={\r\n                (operationsVisibilty.add\r\n                  ? \"iconCircle \"\r\n                  : \"iconCircleDisable \") + \"iconblock\"\r\n              }\r\n              onClick={handlePopUpClick}\r\n            >\r\n              <Icon\r\n                root=\"common\"\r\n                name=\"badge-plus\"\r\n                size=\"small\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          }\r\n          on=\"click\"\r\n          open={popUpOpen}\r\n        >\r\n          <div onMouseLeave={() => setPopUpOpen(false)}>\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <VerticalMenu>\r\n                  <VerticalMenu>\r\n                    <VerticalMenu.Header>\r\n                      {t(\"Common_Create\")}\r\n                    </VerticalMenu.Header>\r\n                    {popUpContent.map((item) => {\r\n                      return (\r\n                        <VerticalMenu.Item\r\n                          onClick={() => popUpMenuClick(item.fieldName)}\r\n                        >\r\n                          {t(item.fieldValue)}\r\n                        </VerticalMenu.Item>\r\n                      );\r\n                    })}\r\n                  </VerticalMenu>\r\n                </VerticalMenu>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        </Popup> : \"\"}\r\n        {deleteVisible ? <div\r\n          style={{ marginLeft: \"10px\" }}\r\n          onClick={() => {\r\n            if (operationsVisibilty.delete) {\r\n              setModelOpen(true);\r\n              //displayTMModalforDelete();\r\n              //onDelete();\r\n            }\r\n          }}\r\n          className={\r\n            (operationsVisibilty.delete\r\n              ? \"iconCircle \"\r\n              : \"iconCircleDisable \") + \"iconblock\"\r\n          }\r\n        >\r\n          <Icon root=\"common\" name=\"delete\" size=\"small\" color=\"white\" />\r\n        </div> : \"\"}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayTMModalforDelete() {\r\n    //console.log(\"entered to display modal actions\");\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  onDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n    //return <TMModal open={true}></TMModal>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\" style={{ alignItems: \"flex-start\", padding: \"0px\" }}>\r\n      <div\r\n        className=\"col-9 col-sm-9 col-md-9 col-lg-10 col-xl-10\"\r\n        style={{ padding: \"0px\" }}\r\n      >\r\n        <div className=\"row\" style={{ marginTop: \"10px\", alignItems: \"\" }}>\r\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n            <ErrorBoundary> {buildBreadcrumb()}</ErrorBoundary>\r\n          </div>\r\n          <div\r\n            className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-4\"\r\n          //style={{ verticalAlign: \"middle\" }}\r\n          >\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <div\r\n                  className=\"compartmentIcon\"\r\n                  style={{ justifyContent: \"flex-start\" }}\r\n                >\r\n                  {shrVisible === false ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <div>\r\n                        <h4 className=\"shrText\">{t(\"Common_Shareholder\")}:</h4>\r\n                      </div>\r\n                      <div className=\"opSelect\">\r\n                        <Select\r\n                          //className=\"opSelect\"\r\n                          placeholder={t(\"Common_Shareholder\")}\r\n                          value={selectedShareholder}\r\n                          disabled={!operationsVisibilty.shareholder}\r\n                          options={getShareholderDropdownOptions()}\r\n                          onChange={(value) => onShareholderChange(value)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n\r\n          {displayTMModalforDelete()}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-3 col-sm-3 col-md-3 col-lg-2 col-xl-2\">\r\n        {displayIcons()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TMUserActions } from \"../../UIBase/Common/TMUserActions\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nexport function TMUserActionsComposite({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n\r\n}) {\r\n  return (\r\n    <TMUserActions\r\n      operationsVisibilty={operationsVisibilty}\r\n      breadcrumbItem={breadcrumbItem}\r\n      shareholders={shareholders}\r\n      selectedShareholder={selectedShareholder}\r\n      onShareholderChange={onShareholderChange}\r\n      onDelete={onDelete}\r\n      onAdd={onAdd}\r\n      popUpContent={popUpContent}\r\n      shrVisible={shrVisible}\r\n      handleBreadCrumbClick={handleBreadCrumbClick}\r\n      addVisible={addVisible}\r\n      deleteVisible={deleteVisible}\r\n    ></TMUserActions>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button } from \"@scuf/common\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\n//import { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport \"../../../CSS/styles.css\";\r\nimport \"../../../CSS/tankShareholder.css\"; // Customized CSS Imported\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\n\r\nclass TankShareholderComposite extends Component {\r\n  state = {\r\n    TankShareholderList: [],\r\n    totalTankCapacity: 0,\r\n    totalGrossVolume: 0,\r\n    totalNetVolume: 0,\r\n    totalGrossMass: 0,\r\n    BPColor:\"\",\r\n    tankfill:{}\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(\"componentDidMount Called\");\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n\r\n      if (this.props.userDetails.EntityResult.IsDCHEnabled)\r\n        this.getExternalSystemInfo();\r\n      this.getTankShareholder();\r\n      this.updateTankFill();\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankShareholderComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  //7Aug2024\r\n  // handleChangeVolume = (e) => {\r\n  //   this.setState({ totalGrossVolume: e.target.value });\r\n  // };\r\n\r\n  getTankShareholder() {\r\n    try {\r\n      axios(\r\n        RestAPIs.ProjectGet + \"?inputString=GetTankShareholder\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        console.log(`handleStartUnloading: ${JSON.stringify(result)}`);\r\n        if (result.IsSuccess === true) {\r\n          const tankShareholderList = result.EntityResult;\r\n          const totalTankCapacity = tankShareholderList[0].TotalTankCapacity;\r\n          const totalGrossVolume = tankShareholderList[0].TotalGrossVolume;\r\n          const totalNetVolume = tankShareholderList[0].TotalNetVolume;\r\n          const totalGrossMass = tankShareholderList[0].TotalGrossMass;\r\n          const BPColor = tankShareholderList[0].BPColor;\r\n\r\n          this.setState({\r\n            TankShareholderList: tankShareholderList,\r\n            totalTankCapacity: totalTankCapacity,\r\n            totalGrossVolume: totalGrossVolume,\r\n            totalNetVolume: totalNetVolume,\r\n            totalGrossMass: totalGrossMass,\r\n            BPColor: BPColor,\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptComposite:Error occured on handleStartUnloading\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  // handlePercentageChange = (index, event) => {\r\n  //   const { value } = event.target;\r\n  //   const updatedList = [...this.state.TankShareholderList];\r\n\r\n  //   let newPercentage = parseFloat(value);\r\n\r\n  //   if (value === \"\") {\r\n  //     newPercentage = 0;\r\n  //   }\r\n\r\n  //   if (isNaN(newPercentage) || newPercentage < 0 || newPercentage > 100) {\r\n  //     alert(\"Please enter a valid percentage between 0 and 100\");\r\n  //     return;\r\n  //   }\r\n\r\n  //   const totalEnteredPercentage = updatedList.reduce((acc, shareholder, idx) => {\r\n  //     if (idx === index) {\r\n  //       return acc + newPercentage;\r\n  //     }\r\n  //     return acc + shareholder.Percentage;\r\n  //   }, 0);\r\n\r\n  //   if (totalEnteredPercentage <= 100) {\r\n  //     updatedList[index].Percentage = newPercentage;\r\n\r\n  //     updatedList.forEach((shareholder, idx) => {\r\n  //       shareholder.TotalCapacity = (shareholder.Percentage / 100) * this.state.totalTankCapacity;\r\n  //     });\r\n\r\n  //     this.setState({ TankShareholderList: updatedList });\r\n  //   } else {\r\n  //     alert(\"Total percentage exceeds 100%\");\r\n  //   }\r\n  // };\r\n\r\n  handlePercentageChange = (index, event) => {\r\n    const { value } = event.target;\r\n    const updatedList = [...this.state.TankShareholderList];\r\n\r\n    let newPercentage = parseFloat(value);\r\n\r\n    if (value === \"\") {\r\n      newPercentage = 0;\r\n    }\r\n\r\n    if (isNaN(newPercentage) || newPercentage < 0 || newPercentage > 100) {\r\n      alert(\"Please enter a valid percentage between 0 and 100\");\r\n      return;\r\n    }\r\n\r\n    const totalEnteredPercentage = updatedList.reduce(\r\n      (acc, shareholder, idx) => {\r\n        if (idx === index) {\r\n          return acc + newPercentage;\r\n        }\r\n        return acc + shareholder.Percentage;\r\n      },\r\n      0\r\n    );\r\n\r\n    if (totalEnteredPercentage <= 100) {\r\n      updatedList[index].Percentage = newPercentage;\r\n\r\n      updatedList.forEach((shareholder, idx) => {\r\n        // Calculate TotalCapacity based on TotalTankCapacity\r\n        shareholder.TotalCapacity =\r\n          (shareholder.Percentage / 100) * this.state.totalTankCapacity;\r\n\r\n        // Calculate AvailableQty based on TotalGrossVolume,TotalNetVolume,TotalGrossMass\r\n        shareholder.AvailableQty =\r\n          (shareholder.Percentage / 100) * this.state.totalGrossVolume;\r\n        shareholder.NetQty =\r\n          (shareholder.Percentage / 100) * this.state.totalNetVolume;\r\n        shareholder.KGAr =\r\n          (shareholder.Percentage / 100) * this.state.totalGrossMass;\r\n      });\r\n\r\n      this.setState({ TankShareholderList: updatedList });\r\n    } else {\r\n      alert(\"Total percentage exceeds 100%\");\r\n    }\r\n  };\r\n\r\n  saveTankShareholder = (shareholder) => {\r\n    return axios.post(RestAPIs.ProjectPost, {\r\n      OperationName: \"INSERTSHAREHOLDERSTOCKPERCENTAGE\",\r\n      ShareHolderCode: shareholder.Shareholder,\r\n      Percentage: shareholder.Percentage,\r\n      TotalCapacity: shareholder.TotalCapacity,\r\n      AvailableQty: shareholder.AvailableQty,\r\n      NetQty: shareholder.NetQty,\r\n      KGAr: shareholder.KGAr,\r\n    });\r\n  };\r\n\r\n  // handleSave = () => {\r\n  //   const promises = this.state.TankShareholderList.map((shareholder) => {\r\n  //     return this.saveTankShareholder(shareholder);\r\n  //   });\r\n\r\n  //   Promise.all(promises)\r\n  //     .then((responses) => {\r\n  //       responses.forEach((response, index) => {\r\n  //         console.log(`TankShareholder saved successfully for ${this.state.TankShareholderList[index].Shareholder}`, response);\r\n  //       });\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.log('Error while saving TankShareholder', error);\r\n  //     });\r\n  // };\r\n\r\n  handleSaveTankSharholder() {\r\n    try {\r\n      const TankShareholder = { values: this.state.TankShareholderList };\r\n\r\n      console.log(\r\n        `handleSave in handleSaveTankSharholder() TankShareholder: ${JSON.stringify(\r\n          TankShareholder\r\n        )}`\r\n      );\r\n      console.log(\"handleSave in handleSaveTankSharholder:\");\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.OperationName,\r\n          value: \"UPDATETANKSHAREHOLDER\",\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        keyDataCode: \"\",\r\n        KeyCodes: keyCode,\r\n        Input: this.state.TankShareholderList,\r\n      };\r\n\r\n      let notification = {\r\n        messageType: \"success\",\r\n        message: \"TankShareholder Updated successfully\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [],\r\n            keyValues: [],\r\n            isSuccess: true,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.ProjectPost,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          console.log(\r\n            `handleSave in handleSaveTankSharholder() TankShareholder: ${JSON.stringify(\r\n              result\r\n            )}`\r\n          );\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          notification.message = \"TankShareholder Updated Successfully\";\r\n          console.log(\r\n            `handleSave in handleSaveTankSharholder() TankShareholder: ${JSON.stringify(\r\n              notification.message\r\n            )}`\r\n          );\r\n          console.log(\r\n            \"ProjectPost api in TankSharholder response result =\",\r\n            result\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          //alert('Error creating TankSharholder receipt:', error.message);\r\n          notification.messageResultDetails[0].errorMessage =\r\n            \"Error creating TankShareholder \";\r\n        });\r\n      toast(\r\n        <ErrorBoundary>\r\n          <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n        </ErrorBoundary>,\r\n        {\r\n          autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"handleSaveTankSharholder Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleReset = () => {\r\n    const updatedList = this.state.TankShareholderList.map((shareholder) => ({\r\n      ...shareholder,\r\n      Percentage: 0,\r\n      TotalCapacity: 0,\r\n    }));\r\n\r\n    this.setState({ TankShareholderList: updatedList });\r\n  };\r\n  //New\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Update tankfill when relevant state changes\r\n    if (\r\n      prevState.totalTankCapacity !== this.state.totalTankCapacity ||\r\n      prevState.totalGrossVolume !== this.state.totalGrossVolume ||\r\n      prevState.BPColor !== this.state.BPColor\r\n    ) {\r\n      this.updateTankFill();\r\n    }\r\n  }\r\n  updateTankFill() {\r\n\r\n    const { totalTankCapacity, totalGrossVolume, BPColor } = this.state;\r\n    const percentageFilled = (totalGrossVolume / totalTankCapacity) * 100;\r\n    console.log(\"BPColor in updateTankFill\",BPColor)\r\n    \r\n    const tankfill = {\r\n      width: \"100%\",\r\n      backgroundColor: `${BPColor}`,\r\n      position: \"absolute\",\r\n      bottom: \"0\",\r\n      textAlign: \"center\",\r\n      color: \"#1b1c1d\",\r\n      height: `${percentageFilled}%`,\r\n    };\r\n\r\n    this.setState({ tankfill });\r\n  }\r\n  //END\r\n\r\n\r\n  render() {\r\n    const { totalTankCapacity, totalGrossVolume, tankfill } = this.state;\r\n    const percentageFilled = (totalGrossVolume / totalTankCapacity) * 100;\r\n    const remainingVolume = totalTankCapacity - totalGrossVolume;\r\n    // var tankfill = {\r\n    //   width: '100%',\r\n    //   //backgroundColor: `'${this.state.BPColor}'`,\r\n    //   backgroundColor: '#f47021',\r\n    //   //backgroundColor: BPColor,\r\n    //   position: 'absolute',\r\n    //   bottom: '0',\r\n    //   textAlign: 'center',\r\n    //   color: '#fff',\r\n    //   paddingleft: '20px',\r\n    //   //height: `'${percentageFilled}%'`\r\n    //   //height: '30%'\r\n    // };\r\n    //this.setState({tankfill});\r\n    return (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMUserActionsComposite\r\n            breadcrumbItem={this.props.activeItem}\r\n            shareholders={this.props.userDetails.EntityResult.ShareholderList}\r\n            handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n            shrVisible={false}\r\n            addVisible={false}\r\n            deleteVisible={false}\r\n          ></TMUserActionsComposite>\r\n        </ErrorBoundary>\r\n        <div className=\"detailsContainer1\">\r\n          <div>\r\n            <table className=\"tableTank\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Shareholder</th>\r\n                  <th>Percentage(%)</th>\r\n                  {/* <th>Total Capacity</th> */}\r\n                  <th>Available Quantity</th>\r\n                  <th>Net Quantity</th>\r\n                  {/* <th>KG/Ar</th> */}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.TankShareholderList.map((shareholder, index) => (\r\n                  <tr key={index}>\r\n                    <td>{shareholder.Code}</td>\r\n                    <td>\r\n                      <input\r\n                        type=\"text\"\r\n                        value={shareholder.Percentage}\r\n                        onChange={(event) =>\r\n                          this.handlePercentageChange(index, event)\r\n                        }\r\n                        onBlur={() => this.saveTankShareholder(index)}\r\n                      />\r\n                    </td>\r\n                    {/* <td>{shareholder.TotalCapacity}</td> */}\r\n                    <td>{shareholder.AvailableQty}</td>\r\n                    <td>{shareholder.NetQty}</td>\r\n                    {/* <td>{shareholder.KGAr}</td> */}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n              <tfoot>\r\n                <tr>\r\n                  <td>Total</td>\r\n                  <td>100</td>\r\n                  {/* <td>{this.state.totalTankCapacity}</td> */}\r\n                  <td>{this.state.totalGrossVolume}</td>\r\n                  <td>{this.state.totalNetVolume}</td>\r\n                  {/* <td>{this.state.totalGrossMass}</td> */}\r\n                </tr>\r\n              </tfoot>\r\n            </table>\r\n          </div>\r\n        </div>\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-12 col-lg-12\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={\"Reset\"}\r\n                className=\"cancelButton\"\r\n                onClick={this.handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={\"Save\"}\r\n                onClick={() => this.handleSaveTankSharholder()}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"tank-container\">\r\n          <div>\r\n            <div className=\"tank\">\r\n              <div\r\n                // className=\"tank-fill\"\r\n                // style={{ height: `${percentageFilled}%` }}\r\n                style={tankfill}\r\n              >\r\n                {`${percentageFilled.toFixed(2)}%`}\r\n              </div>\r\n            </div>\r\n            <div className=\"tank-capacity\">\r\n              <p>Capacity: {totalTankCapacity} L</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"tank-info\">\r\n              <p className=\"tank-infoVolume\">Remaining Volume: {remainingVolume} L</p>\r\n              <p>Gross Volume: {totalGrossVolume} L</p>  \r\n          </div>\r\n          {/* <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max={totalTankCapacity}\r\n            value={totalGrossVolume}\r\n            onChange={this.handleChangeVolume}\r\n          /> */}\r\n        </div>\r\n\r\n        <ErrorBoundary>\r\n          <ToastContainer\r\n            hideProgressBar={true}\r\n            closeOnClick={false}\r\n            closeButton={true}\r\n            newestOnTop={true}\r\n            position=\"bottom-right\"\r\n            toastClassName=\"toast-notification-wrap\"\r\n          />\r\n        </ErrorBoundary>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(TankShareholderComposite);\r\n\r\nTankShareholderComposite.propTypes = {\r\n  activeItem: PropTypes.object,\r\n  userDetails: PropTypes.object.isRequired,\r\n  tokenDetails: PropTypes.object.isRequired,\r\n  handleBreadCrumbClick: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","export const carrierCode = \"CarrierCode\";\r\nexport const transportationType = \"TransportationType\";\r\nexport const shareholderCode = \"ShareHolderCode\";\r\nexport const driverCode = \"DriverCode\";\r\nexport const customerCode = \"CustomerCode\";\r\nexport const trailerCode = \"TrailerCode\";\r\nexport const originTerminalCode = \"OriginTerminalCode\";\r\nexport const primeMoverCode = \"PrimeMoverCode\";\r\nexport const vehicleCode = \"VehicleCode\";\r\nexport const destinationCode = \"DestinationCode\";\r\nexport const finishedProductCode = \"FinishedProductCode\";\r\nexport const shipmentCode = \"ShipmentCode\";\r\nexport const orderCode = \"OrderCode\";\r\nexport const receiptCode = \"ReceiptCode\";\r\nexport const suppliercode = \"SupplierCode\";\r\nexport const marineDispatchCode = \"MarineDispatchCode\";\r\nexport const marineReceiptCode = \"MarineReceiptCode\";\r\nexport const supplierCode = \"SupplierCode\";\r\nexport const contractCode = \"ContractCode\";\r\n\r\nexport const railDispatchCode = \"RailDispatchCode\";\r\nexport const railReceiptCode = \"RailReceiptCode\";\r\nexport const railRouteCode = \"RailRouteCode\";\r\nexport const wagonCode = \"WagonCode\";\r\n\r\nexport const compartmentCode = \"CompartmentCode\";\r\n\r\nexport const smsConfigurationCode = \"SMSConfigurationCode\";\r\nexport const pipelineDispatchCode = \"PipelineDispatchCode\";\r\nexport const pipelineReceiptCode = \"PipelineReceiptCode\";\r\nexport const EmailConfigurationCode = \"EmailConfigurationCode\";\r\n\r\nexport const baseProductCode = \"BaseProductCode\";\r\nexport const locationCode = \"LocationCode\";\r\nexport const gantryCode = \"GantryCode\";\r\n\r\nexport const siteViewType = \"SiteViewType\";\r\n\r\nexport const entityCode = \"EntityCode\";\r\n\r\nexport const entityType = \"EntityType\";\r\nexport const cardReaderCode = \"CardReaderCode\";\r\nexport const accessCardCode = \"AccessCardCode\";\r\nexport const bcuCode = \"BcuCode\";\r\nexport const deuCode = \"DeuCode\";\r\nexport const weighBridgeCode = \"WeighBridgeCode\";\r\nexport const weight = \"Weight\";\r\nexport const outOfToleranceAllowed = \"OutOfToleranceAllowed\";\r\n\r\nexport const loadingArmCode = \"LoadingArmCode\";\r\nexport const transportaionType = \"TransportationType\";\r\nexport const bayCode = \"BayCode\";\r\nexport const TransactionNumber = \"TransactionNumber\";\r\nexport const BatchNumber = \"BatchNumber\";\r\nexport const terminalCode = \"TerminalCode\";\r\nexport const tankGroupCode = \"TankGroupCode\";\r\nexport const tankCode = \"TankCode\";\r\nexport const meterCode = \"MeterCode\";\r\n\r\nexport const shipmentType = \"ShipmentType\";\r\nexport const shipmentStatus = \"ShipmentStatus\";\r\nexport const meterLineType = \"MeterLineType\";\r\nexport const dispatchCode = \"DispatchCode\";\r\nexport const railReceiptStatus = \"RailReceiptStatus\";\r\nexport const receiptStatus = \"ReceiptStatus\";\r\nexport const fptTansactionID = \"FPTransactionID\";\r\nexport const productCategoryType = \"ProductCategoryType\";\r\nexport const marineReason = \"Reason\";\r\n\r\nexport const sealMasterCode = \"SealMasterCode\";\r\nexport const marineDispatchReason = \"Reason\";\r\nexport const OperationName = \"OperationName\";\r\nexport const FPTransactionID = \"FPTransactionID\";\r\nexport const ProductCategoryType = \"ProductCategoryType\";\r\nexport const compartmentSeqNoInVehicle = \"CompartmentSeqNoInVehicle\";\r\nexport const adjustedPlanQuantity = \"AdjustedPlanQuantity\";\r\nexport const forceComplete = \"ForceComplete\";\r\nexport const dispatchStatus = \"DispatchStatus\";\r\nexport const HolidayDate = \"HolidayDate\";\r\nexport const ActionID = \"ActionID\";\r\nexport const EODTimePrev = \"EODTimePrev\";\r\nexport const TerminalAction = \"TerminalAction\";\r\nexport const EODTime = \"EODTime\";\r\nexport const MonthStartDay = \"MonthStartDay\";\r\nexport const captainCode = \"CaptainCode\";\r\nexport const userType = \"GeneralTMUserType\";\r\nexport const generalTMUserCode = \"GeneralTMUserCode\";\r\nexport const isPriority = \"IsPriority\";\r\nexport const actualTerminalCode = \"ActualTerminalCode\";\r\nexport const shipmentBondNo = \"ShipmentBondNo\"\r\nexport const receiptBondNo = \"ReceiptBondNo\"\r\nexport const marineReceiptStatus = \"MarineReceiptStatus\";\r\nexport const deviceType = \"DeviceType\";\r\nexport const deviceCode = \"DeviceCode\";\r\nexport const bayGroup = \"BayGroup\";\r\nexport const pipelineHeaderCode = \"PipelineHeaderCode\";\r\nexport const exchangePartnerName = \"ExchangePartner\";\r\nexport const personID = \"PersonID\";\r\nexport const userName = \"UserName\";\r\nexport const pipelinePlanCode = \"PipelinePlanCode\";\r\nexport const pipelinePlanType = \"PipelinePlanType\";\r\nexport const channelCode = \"ChannelCode\";\r\nexport const ProcessName = \"ProcessName\";\r\nexport const reconciliationCode = \"ReconciliationCode\";\r\nexport const NotificationGroupCode = \"NotificationGroupCode\";\r\nexport const NotificationGroupStatus = \"NotificationGroupStatus\";\r\nexport const NotificationGroupDesc = \"NotificationGroupDesc\";\r\nexport const NotificationResSource = \"NotificationResSource\";\r\nexport const NotificationResMsgCode = \"NotificationResMsgCode\";\r\nexport const NotificationOrigResSource = \"NotificationOrigResSource\";\r\nexport const NotificationOrigResMsgCode = \"NotificationOrigResMsgCode\";\r\nexport const NotificationMessageCode = \"NotificationMessageCode\"\r\nexport const positionType = \"PositionType\";\r\nexport const roleName = \"RoleName\";\r\nexport const exchangeAgreementCode = \"ExchangeAgreementCode\";\r\nexport const ProductTransferAgreementCode = \"ProductTransferAgreementCode\";\r\nexport const ShareholderAgreementStatus = \"ShareholderAgreementStatus\";\r\nexport const RequestorShareholder = \"RequestorShareholder\";\r\nexport const LenderShareholder = \"LenderShareholder\";\r\nexport const requestCode = \"RequestCode\";\r\nexport const TransferReferenceCode = \"TransferReferenceCode\";\r\nexport const ShiftID = \"ShiftID\";\r\nexport const ShiftName = \"ShiftName\";\r\nexport const printerName = \"PrinterName\";\r\nexport const locationtype = \"LocationType\";\r\nexport const forceClosureReason = \"ForceClosureReason\";\r\nexport const TransactionType = \"TransactionType\";\r\nexport const CustomerRecipeCode = \"CustomerRecipeCode\";\r\n\r\nexport const coaTemplateCode = \"COATemplateCode\";\r\nexport const coaManagementCode = \"COAManagementCode\";\r\nexport const coaParameterCode = \"COAParameterCode\";\r\nexport const coaManagementFinishedProductCode = \"COAManagementFinishedProductCode\";\r\nexport const coaCustomerCode = \"COACustomerCode\";\r\nexport const coaFinishedProductCode = \"COAFinishedProductCode\";\r\nexport const coaAssignmentCode = \"COAAssignmentCode\";\r\nexport const coaTransportationType = \"COATransportationType\";\r\nexport const coaTransactionType = \"COATransactionType\";\r\nexport const coaSeqNumber = \"COASeqNumber\";\r\nexport const forecastDate = \"ForecastDate\";\r\nexport const forecastTanks = \"ForecastTanks\";","import React from \"react\";\r\nimport { Notification } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { delimiter } from \"./Constants\";\r\nimport PropTypes from \"prop-types\";\r\nNotifyEvent.propTypes = {\r\n  notificationMessage: PropTypes.shape({\r\n    messageType: PropTypes.oneOf([\"success\", \"critical\"]),\r\n    message: PropTypes.string,\r\n    messageResultDetails: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        keyFields: PropTypes.arrayOf(PropTypes.string),\r\n        KeyValues: PropTypes.arrayOf(PropTypes.string),\r\n        isSuccess: PropTypes.bool,\r\n        errorMessage: PropTypes.string,\r\n      })\r\n    ),\r\n  }).isRequired,\r\n  //closeToast: PropTypes.bool,\r\n};\r\n// notifiaionMessage={messageType:\"success/critical\",message:\"title of message\",\r\n// messageResultDetails:[{keyFields:[Array Of Key Codes],KeyValues:[Array of Key Values],isSuccess,ErrorMessage}]}\r\nexport default function NotifyEvent({ notificationMessage }) {\r\n\r\n  function getLocalizedMessage(message) {\r\n    try {\r\n      let messageOptions = message.split(delimiter);\r\n      return messageOptions[0];\r\n    } catch (error) {\r\n      console.log(error);\r\n      return \"\";\r\n    }\r\n  }\r\n  function getLocalizedMessageParameters(message) {\r\n    try {\r\n      let messageOptions = message.split(delimiter);\r\n      messageOptions.splice(0, 1);\r\n      return messageOptions;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <Notification\r\n          className=\"toast-notification\"\r\n          severity={notificationMessage.messageType}\r\n          // onCloseClick={closeToast}\r\n          hasIcon={true}\r\n          title={t(notificationMessage.message)}\r\n        //onDetailsClick={() => alert(details)}\r\n        >\r\n          {notificationMessage.messageResultDetails.map((messageResult) => {\r\n            var entityKeyDetails = \"\";\r\n            if (messageResult.keyFields.length > 0) {\r\n              for (var i = 0; i < messageResult.keyFields.length; i++) {\r\n                entityKeyDetails =\r\n                  entityKeyDetails +\r\n                  t(messageResult.keyFields[i]) +\r\n                  \" : \" +\r\n                  messageResult.keyValues[i] +\r\n                  \", \";\r\n              }\r\n            }\r\n            return (\r\n              <div>\r\n                <span\r\n                  style={{ color: messageResult.isSuccess ? \"#7eb338\" : \"#F15A4F\" }}\r\n                >\r\n                  {entityKeyDetails}\r\n                  {messageResult.isSuccess\r\n                    ? t(\"NotificationList_MessageType_Success\")\r\n                    : t(\"NotificationList_MessageType_Failure\") +\r\n                    \" : \" +\r\n                    t(\r\n                      getLocalizedMessage(messageResult.errorMessage),\r\n                      getLocalizedMessageParameters(\r\n                        messageResult.errorMessage\r\n                      )\r\n                    )}\r\n                </span>\r\n                <br></br>\r\n              </div>\r\n            );\r\n          })}\r\n        </Notification>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n"],"names":["TMUserActions","_ref","operationsVisibilty","breadcrumbItem","shareholders","selectedShareholder","onShareholderChange","onDelete","onAdd","popUpContent","shrVisible","handleBreadCrumbClick","addVisible","deleteVisible","modelOpen","setModelOpen","useState","popUpOpen","setPopUpOpen","handlePopUpClick","add","length","_jsxs","className","style","alignItems","padding","children","_jsx","marginTop","ErrorBoundary","TranslationConsumer","t","Breadcrumb","parents","map","parentitem","Item","onClick","undefined","itemCode","localizedKey","justifyContent","_Fragment","Select","placeholder","value","disabled","shareholder","options","Utilities","onChange","Modal","open","size","Content","Footer","Button","type","content","float","display","Popup","position","element","Icon","root","name","color","on","onMouseLeave","VerticalMenu","Header","item","popUpMenuClick","menuItem","fieldName","fieldValue","marginLeft","delete","defaultProps","itemName","itemProps","isComponent","TMUserActionsComposite","TankShareholderComposite","Component","constructor","arguments","state","TankShareholderList","totalTankCapacity","totalGrossVolume","totalNetVolume","totalGrossMass","BPColor","tankfill","handlePercentageChange","index","event","target","updatedList","this","newPercentage","parseFloat","isNaN","alert","reduce","acc","idx","Percentage","forEach","TotalCapacity","AvailableQty","NetQty","KGAr","setState","saveTankShareholder","axios","RestAPIs","OperationName","ShareHolderCode","Shareholder","handleReset","componentDidMount","console","log","props","userDetails","EntityResult","IsArchived","IsDCHEnabled","getExternalSystemInfo","getTankShareholder","updateTankFill","error","tokenDetails","tokenInfo","then","response","result","data","concat","JSON","stringify","IsSuccess","tankShareholderList","TotalTankCapacity","TotalGrossVolume","TotalNetVolume","TotalGrossMass","handleSaveTankSharholder","TankShareholder","values","obj","keyDataCode","KeyCodes","key","Input","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","catch","toast","NotifyEvent","notificationMessage","autoClose","componentDidUpdate","prevProps","prevState","percentageFilled","width","backgroundColor","bottom","textAlign","height","render","remainingVolume","activeItem","ShareholderList","Code","onBlur","toFixed","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","toastClassName","connect","getUserDetails","TokenAuth","TMDetailsUserActions","handleBack","handleSave","saveEnabled","carrierCode","transportationType","shareholderCode","driverCode","customerCode","trailerCode","originTerminalCode","primeMoverCode","vehicleCode","destinationCode","finishedProductCode","shipmentCode","orderCode","receiptCode","marineDispatchCode","marineReceiptCode","supplierCode","contractCode","railDispatchCode","railReceiptCode","railRouteCode","wagonCode","compartmentCode","smsConfigurationCode","pipelineDispatchCode","pipelineReceiptCode","EmailConfigurationCode","baseProductCode","locationCode","siteViewType","entityCode","entityType","cardReaderCode","accessCardCode","bcuCode","deuCode","weighBridgeCode","weight","outOfToleranceAllowed","loadingArmCode","transportaionType","bayCode","TransactionNumber","BatchNumber","terminalCode","tankGroupCode","tankCode","meterCode","shipmentType","shipmentStatus","meterLineType","dispatchCode","receiptStatus","fptTansactionID","productCategoryType","marineReason","sealMasterCode","marineDispatchReason","FPTransactionID","ProductCategoryType","compartmentSeqNoInVehicle","adjustedPlanQuantity","forceComplete","dispatchStatus","HolidayDate","ActionID","EODTimePrev","TerminalAction","EODTime","MonthStartDay","captainCode","userType","generalTMUserCode","isPriority","actualTerminalCode","shipmentBondNo","receiptBondNo","deviceType","deviceCode","bayGroup","pipelineHeaderCode","exchangePartnerName","personID","userName","pipelinePlanCode","pipelinePlanType","channelCode","ProcessName","reconciliationCode","NotificationGroupCode","NotificationGroupStatus","NotificationGroupDesc","NotificationResSource","NotificationResMsgCode","NotificationOrigResSource","NotificationOrigResMsgCode","NotificationMessageCode","positionType","exchangeAgreementCode","ProductTransferAgreementCode","ShareholderAgreementStatus","RequestorShareholder","LenderShareholder","requestCode","TransferReferenceCode","ShiftID","ShiftName","printerName","locationtype","forceClosureReason","TransactionType","CustomerRecipeCode","coaTemplateCode","coaManagementCode","coaParameterCode","coaManagementFinishedProductCode","coaSeqNumber","forecastDate","forecastTanks","getLocalizedMessage","split","delimiter","getLocalizedMessageParameters","messageOptions","splice","Notification","severity","hasIcon","title","messageResult","entityKeyDetails","i"],"sourceRoot":""}