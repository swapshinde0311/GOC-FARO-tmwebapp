{"version":3,"file":"static/js/876.fc18b596.chunk.js","mappings":"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","sources":["Components/Composite/Details/ProductDemandForecastingDetailsComposite.jsx","JS/functionalUtilities.js"],"sourcesContent":["import { Button, DatePicker, Icon, Select, Tooltip } from '@scuf/common';\r\nimport { TranslationConsumer } from '@scuf/localization';\r\nimport React from 'react';\r\nimport * as wijmoPdf from \"@grapecity/wijmo.pdf\";\r\nimport * as wijmo from \"@grapecity/wijmo\";\r\nimport { toPng } from \"html-to-image\";\r\nimport PropTypes from 'prop-types';\r\nimport ErrorBoundary from '../../ErrorBoundary';\r\nimport { DataTable } from '@scuf/datatable';\r\nimport * as Utilities from '../../../JS/Utilities';\r\nimport { connect } from 'react-redux';\r\nimport LACSeriesChart from '../Common/Charts/LACSeriesChart';\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\nimport { LoadingPage } from '../../UIBase/Common/LoadingPage';\r\nimport DashboardCard from '../Common/Charts/WidgetOutlines/DashboardCard';\r\n\r\nclass ProductDemandForecastingDetailsComposite extends React.Component {\r\n    state = {\r\n        chartRef: React.createRef(),\r\n        isDownloading: false,\r\n    }\r\n\r\n    downloadBtnClick = (t, overallCapacity, inventory, uom) => {\r\n        this.setState({\r\n            isDownloading: true\r\n        }, () => {\r\n            let doc = new wijmoPdf.PdfDocument({\r\n                // method to execute on end\r\n                ended: (s, e) => {\r\n                    if (e.blob) {\r\n                        this.setState({ isDownloading: false }, () => {\r\n                            wijmoPdf.saveBlob(e.blob, \"ProductDemandForecast.pdf\");\r\n                        })\r\n                    }\r\n                },\r\n                pageSettings: {\r\n                    margins: {\r\n                        left: 20,\r\n                        top: 20,\r\n                        right: 20,\r\n                        bottom: 20,\r\n                    },\r\n                    layout: wijmoPdf.PdfPageOrientation.Portrait,\r\n                }\r\n            });\r\n\r\n            try {\r\n                toPng(\r\n                    this.state.chartRef.hostElement,\r\n                    { cacheBust: true }\r\n                ).then(url => {\r\n                    let colWidth = 140, rowHeight = 30;\r\n                    // report header\r\n                    doc.drawText(t(\"ProductDemandForecast_Report\"), null, null, {\r\n                        align: wijmoPdf.PdfTextHorizontalAlign.Center,\r\n                        font: new wijmoPdf.PdfFont('times', 16, 'normal', 'bold'),\r\n                        lineGap: 40\r\n                    });\r\n\r\n                    // base product details\r\n                    doc.drawText(t(\"ProductDemandForecast_Product\"), 0, doc.y, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold'),\r\n                        continued: true\r\n                    });\r\n\r\n                    doc.drawText(this.props.baseProduct, null, null, {\r\n                        continued: true,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'normal')\r\n                    });\r\n\r\n                    // exported date\r\n                    doc.drawText(t(\"ProductForecast_PrintDate\"), 265, doc.y, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold'),\r\n                        continued: true\r\n                    });\r\n                    doc.drawText(new Date().toLocaleString(), null, null, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'normal'),\r\n                    });\r\n\r\n                    // selected forecasting period\r\n                    doc.drawText(t(\"ProductDemandForecast_Duration\"), null, null, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold'),\r\n                        continued: true\r\n                    });\r\n\r\n                    doc.drawText(new Date().toLocaleDateString() + \" - \" + this.props.endDate.toLocaleDateString(), null, null, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'normal'),\r\n                        lineGap: 20\r\n                    });\r\n\r\n                    let x = 0;\r\n                    let y = doc.y;\r\n\r\n                    // selected tank details\r\n                    doc.paths.rect(x, y, 560, rowHeight).stroke();\r\n\r\n                    doc.drawText(t(\"Tank_Details_Label\") + \": \", x + 2, y + 2, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold'),\r\n                        continued: true\r\n                    });\r\n\r\n                    // overall capacity and available inventory of selected tanks\r\n                    doc.drawText(t(\"Overall_Capacity_Label\") + \"- \" + String(overallCapacity) + \" \" + uom + \", \" + t(\"Inventory_Label\") + \"- \" + String(inventory) + \" \" + uom, doc.x, y + 2, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'normal'),\r\n                    });\r\n\r\n                    y += rowHeight;\r\n\r\n                    // table to show list of selected tanks\r\n                    doc.paths.rect(x, y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"TankCode\"), x + 2, y + 2, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + colWidth, y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_Inventory\", [uom]), x + colWidth + 2, y + 2, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (2 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_Capacity\", [uom]), x + (2 * colWidth) + 2, y + 2, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (3 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"TankInfo_Mode\"), x + (3 * colWidth) + 2, y + 2, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n\r\n                    // columns in the tanks list data object\r\n                    let tankColumns = [\"Code\", \"Capacity\", \"GrossQuantity\", \"TankMode\"];\r\n                    // for each tank, create a table row and populate respective columns\r\n                    this.props.selectedTanks.forEach((tank) => {\r\n                        y += rowHeight;\r\n                        // if current 'y' position exceeds document height, add a new page\r\n                        if (y >= doc.height) {\r\n                            y = 0;\r\n                            doc.addPage();\r\n                        }\r\n\r\n                        // for each column, create a cell and populate data\r\n                        tankColumns.forEach((col, index) => {\r\n                            let cellText = tank[col] === null || tank[col] === undefined ?\r\n                                \"\" : String(tank[col]);\r\n                            if (col === \"Code\") {\r\n                                if (!tank[\"Active\"]) {\r\n                                    cellText += \" (\" + t(\"ProductForecast_InactiveTank\") + \")\";\r\n                                }\r\n                                else {\r\n                                    cellText += \" (\" + t(\"ProductForecast_ActiveTank\") + \")\";\r\n                                }\r\n                            }\r\n\r\n                            // create and populate table cell\r\n                            doc.paths.rect(x + (index * colWidth), y, colWidth, rowHeight).stroke();\r\n                            doc.drawText(cellText, x + (index * colWidth) + 2, y + 2, {\r\n                                font: new wijmoPdf.PdfFont(\"times\", 12, \"normal\", \"normal\"),\r\n                                width: colWidth - 2\r\n                            });\r\n                        });\r\n                    })\r\n\r\n                    // if current 'y' position is greater than half of doc height, add new page\r\n                    if (doc.y > doc.height / 2) {\r\n                        doc.addPage();\r\n                    }\r\n                    // else move 'y' position down by 3 units\r\n                    else {\r\n                        doc.moveDown(3);\r\n                    }\r\n\r\n                    let currentDate = new Date();\r\n                    currentDate.setHours(0, 0, 0, 0);\r\n                    doc.drawText(t(\"ProductDemandForecast_ForecastTableDetails\", [Utilities.DateDiffInDays(currentDate, this.props.endDate)]), 0, doc.y, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold'),\r\n                        lineGap: 20\r\n                    });\r\n\r\n                    // dividing the table into 7/8 columns based on Slot Availability feature\r\n                    colWidth = (this.props.isSlotEnabled ? 70 : 80); rowHeight = 40; y = doc.y;\r\n\r\n                    // add row headers for forecast details table\r\n                    doc.paths.rect(x, y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_Date\"), x + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + colWidth, y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_OpeningInventory\", [uom]), x + colWidth + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (2 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_OpeningUllage\", [uom]), x + (2 * colWidth) + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (3 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_PlannedReceipts\", [uom]), x + (3 * colWidth) + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (4 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_PlannedShipments\", [uom]), x + (4 * colWidth) + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (5 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_ClosingInventory\", [uom]), x + (5 * colWidth) + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (6 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_ClosingUllage\", [uom]), x + (6 * colWidth) + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n\r\n                    let forecastColumns = [\"ForecastDate\", \"OpenInventory\", \"OpenUllage\", \"PlannedReceiptQty\", \"ShipQtyDemand\", \"CloseInventory\", \"CloseUllage\"];\r\n\r\n                    // if slot availability feature is available, add Slot Availability column\r\n                    if (this.props.isSlotEnabled) {\r\n                        doc.paths.rect(x + (7 * colWidth), y, colWidth, rowHeight).stroke();\r\n                        doc.drawText(t(\"ProductForecast_SlotAvailability\"), x + (7 * colWidth) + 2, y + 2, {\r\n                            width: colWidth - 2,\r\n                            font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                        });\r\n\r\n                        forecastColumns.push([\"ROADSlots\", \"MarineSlots\"])\r\n                    }\r\n\r\n                    // add table row for each day\r\n                    this.props.forecastDetails.forEach(row => {\r\n                        y += rowHeight;\r\n                        // if current 'y' position exceeds document height, add a new page\r\n                        if (y >= doc.height - 20) {\r\n                            y = 0;\r\n                            doc.addPage();\r\n                        }\r\n\r\n                        // add table cell for each column\r\n                        forecastColumns.forEach((col, index) => {\r\n                            let cellText = \"\";\r\n                            let xPad = 2;\r\n                            doc.paths.rect(x + (index * colWidth), y, colWidth, rowHeight).stroke();\r\n                            // for slot availability column\r\n                            if (index === 7) {\r\n                                cellText = \"Not Available\"\r\n                                if (row[col[0]] > 0) {\r\n                                    cellText = \"Truck\";\r\n                                }\r\n                                if (row[col[1]] > 0) {\r\n                                    cellText = (cellText === \"Truck\") ? (cellText + \" | Marine\") : \"Marine\";\r\n                                }\r\n                            } else {\r\n                                cellText = String(row[col]);\r\n                            }\r\n\r\n                            // draw 'circle' based planned shipments quantity value\r\n                            if (col === \"ShipQtyDemand\") {\r\n                                // if shipments quantity is well below available inventory, draw green circle\r\n                                let color = \"green\";\r\n                                // mass/volume tolerance value based on product\r\n                                const tolerance = this.props.isVolume ? this.props.configuration.tolerance.Volume : this.props.configuration.tolerance.Mass;\r\n                                // if shipments quantity exceeds available inventory, draw red circle\r\n                                if (Number(row[col]) > row[\"OpenInventory\"]) {\r\n                                    color = \"red\";\r\n                                }\r\n                                // if shipments quantity is close the available inventory (based on tolerance), draw yellow circle\r\n                                else if (Number(row[col]) + Number(tolerance) > row[\"OpenInventory\"]) {\r\n                                    color = \"yellow\";\r\n                                }\r\n                                xPad = 12;\r\n                                doc.paths.circle(x + (index * colWidth) + 5, y + 6, 4).fill(new wijmo.Color(color));\r\n                            }\r\n\r\n                            doc.drawText(cellText, x + (index * colWidth) + xPad, y + 2, {\r\n                                width: colWidth - xPad,\r\n                                font: new wijmoPdf.PdfFont('times', 12, 'normal', 'normal')\r\n                            });\r\n                        });\r\n                    })\r\n\r\n                    // add new page for forecast overview chart\r\n                    doc.addPage();\r\n\r\n                    doc.drawText(t(\"ProductDemandForecast_ForecastOverview\"), null, null, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold'),\r\n                        lineGap: 20\r\n                    });\r\n\r\n                    // draw the image generated by 'toPng'\r\n                    doc.drawImage(url, undefined, undefined, {\r\n                        width: 560,\r\n                        align: wijmoPdf.PdfImageHorizontalAlign.Center,\r\n                    });\r\n\r\n                    // call end() method\r\n                    doc.end();\r\n                }).catch(error => {\r\n                    console.log(\"Error converting HTML to image: \", error);\r\n                    this.setState({ isDownloading: false });\r\n                })\r\n\r\n            }\r\n            catch (error) {\r\n                this.setState({ isDownloading: false });\r\n                console.log(\"Error generating PDF: \", error);\r\n            }\r\n        });\r\n    }\r\n\r\n    setRefs = (key, ref, sequence) => {\r\n        this.setState({\r\n            chartRef: ref\r\n        });\r\n    }\r\n\r\n    fetchChartConfiguration = (t, tolerance, uom, overAllCapacity) => {\r\n        let chartInfo = {}\r\n        if (Array.isArray(this.props.forecastDetails)) {\r\n            chartInfo = {\r\n                JSONFormat: '{\"Chart\": {\"ChartDetails\": {\"bindings\": {\"seriesSource\": \"Table\"}, \"common\": {\"bindingX\": \"ForecastDate\", \"ChartType\": \"Line\", \"name\": \"Days\"}, \"chartLegend\": {\"position\":\"Right\"}, \"seriesData\": [{\"name\": \"Default_lblShipment\", \"binding\": \"ShipQtyDemand\", \"chartType\": \"Column\"}, {\"name\": \"Inventory_Label\", \"binding\": \"OpenInventory\", \"chartType\": \"Area\"}], \"chartAxis\": [{\"wjProperty\": \"axisY\", \"title\": \"' + t(\"ProductForecast_Quantity\", [uom]) + '\", \"axisLine\": true, \"position\": \"Left\"}]}, \"Thresholds\": [{\"Value\":' + tolerance +\r\n                    ', \"Name\": \"Tolerance_Level\", \"tooltipContent\": {\"Label\":\"Tolerance_Level\", \"Value\": \"{y}\"}}, {\"Value\": ' + String(overAllCapacity) + ', \"Name\": \"Total_Capacity\", \"tooltipContent\": {\"Label\": \"Total_Capacity\", \"Value\":\"{y}\"}}]}}',\r\n                KPIData: { Table: this.props.forecastDetails }\r\n            }\r\n        }\r\n\r\n        return chartInfo;\r\n    }\r\n\r\n    render() {\r\n        let overAllCapacity = 0, inventory = 0;\r\n        // configured mass/volume uom based on product\r\n        const uom = (this.props.isVolume ? this.props.configuration.uoms.Volume : this.props.configuration.uoms.Mass);\r\n        // configured mass/volume tolerance based on product\r\n        const tolerance = String(this.props.isVolume ? this.props.configuration.tolerance.Volume : this.props.configuration.tolerance.Mass);\r\n\r\n        // calculate overallCapacity & available inventory for selected tanks\r\n        if (Array.isArray(this.props.selectedTanks)) {\r\n            this.props.selectedTanks.forEach(tank => {\r\n                overAllCapacity += Number(tank.Capacity);\r\n                inventory += Number(tank.GrossQuantity);\r\n            });\r\n        }\r\n\r\n        let currentDate = new Date();\r\n        currentDate.setHours(0, 0, 0, 0);\r\n\r\n        return (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <TranslationConsumer>\r\n                        {\r\n                            (t) => (\r\n                                <div>\r\n                                    <div className='row'>\r\n                                        <div className='col-12'>\r\n                                            <Button\r\n                                                className='btn-download-product-forecast'\r\n                                                type='primary'\r\n                                                onClick={() => this.downloadBtnClick(t, overAllCapacity, inventory, uom)}\r\n                                                disabled={!this.props.isChartDataReady || this.state.isDownloading}\r\n                                                actionType='button'>\r\n                                                {t(\"Chart_Download\")}\r\n                                            </Button>\r\n                                        </div>\r\n                                        <div className='col-12 col-md-12 col-lg-5 col-xxl-4'>\r\n                                            <div className='row'>\r\n                                                <div className='col-12'>\r\n                                                    <Select\r\n                                                        options={this.props.baseProductsList}\r\n                                                        multiple={false}\r\n                                                        disabled={this.state.isDownloading}\r\n                                                        placeholder={t(\"Common_Select\")}\r\n                                                        label={t(\"BPCode\")}\r\n                                                        value={this.props.baseProduct}\r\n                                                        onChange={val => this.props.onChange(\"BaseProduct\", val)}\r\n                                                        reserveSpace={false}\r\n                                                        error={t(this.props.validationErrors.BaseProduct)}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className='row'>\r\n                                                <div className='col-12 col-md-10 p-0'>\r\n                                                    <div className='row m-0 p-0'>\r\n                                                        <div className='col-12 col-md-6 product-demand-forecasting-date'>\r\n                                                            <DatePicker\r\n                                                                disabled={true}\r\n                                                                label={t(\"From\")}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                type=\"date\"\r\n                                                                reserveSpace={false}\r\n                                                                value={new Date()} />\r\n                                                        </div>\r\n                                                        <div className='col-12 col-md-6 product-demand-forecasting-date'>\r\n                                                            <DatePicker\r\n                                                                type=\"date\"\r\n                                                                disabled={this.state.isDownloading}\r\n                                                                label={t('To')}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                disablePast={true}\r\n                                                                onChange={val => this.props.onChange(\"EndDate\", val)}\r\n                                                                onTextChange={val => this.props.onChange(\"EndDate\", val)}\r\n                                                                value={this.props.endDate}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div>\r\n                                                        {\r\n                                                            this.props.validationErrors.EndDate !== \"\" ?\r\n                                                                <div className='col-12 below-text'>\r\n                                                                    <span className='ui error-message'>\r\n                                                                        {t(this.props.validationErrors.EndDate, [this.props.configuration.maxDuration])}\r\n                                                                    </span>\r\n                                                                </div> : null\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='col-12 col-md-2 mt-md-4 pl-md-0'>\r\n                                                    <Button\r\n                                                        type=\"primary\"\r\n                                                        className='product-demand-forecast-go-btn'\r\n                                                        actionType=\"button\"\r\n                                                        disabled={this.props.isLoading || this.state.isDownloading}\r\n                                                        onClick={this.props.onGoClick}>\r\n                                                        {t(\"Common_Go\")}\r\n                                                    </Button>\r\n                                                </div>\r\n                                            </div>\r\n                                            {\r\n                                                (this.props.baseProduct !== null &&\r\n                                                    this.props.baseProduct !== undefined &&\r\n                                                    this.props.baseProduct !== \"\") ?\r\n                                                    <>\r\n                                                        <div className='row'>\r\n                                                            <div className='col-12'>\r\n                                                                <span>\r\n                                                                    {t(\"Tank_Details_Label\")}: {t(\"Overall_Capacity_Label\")} {overAllCapacity} {uom} | {t(\"Inventory_Label\")}: {inventory} {uom}\r\n                                                                </span>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className='row'>\r\n                                                            {\r\n                                                                this.props.validationErrors.Tanks !== \"\" ?\r\n                                                                    <div className='col-12 below-text'>\r\n                                                                        <span className='ui error-message'>{t(this.props.validationErrors.Tanks)}</span>\r\n                                                                    </div> : null\r\n                                                            }\r\n                                                            <div className='col-12'>\r\n                                                                <DataTable\r\n                                                                    data={this.props.tanks}\r\n                                                                    lazy={true}\r\n                                                                    scrollable={true}\r\n                                                                    className='tank-grid-product-forecast'\r\n                                                                    scrollHeight=\"173px\"\r\n                                                                    showHeader={true}\r\n                                                                    selection={this.props.selectedTanks}\r\n                                                                    onSelectionChange={this.props.onTankSelection}\r\n                                                                    onSelectAll={this.props.onTankSelection}\r\n                                                                    selectionMode={\"multiple\"}\r\n                                                                >\r\n                                                                    <DataTable.Column\r\n                                                                        field='Code'\r\n                                                                        header={t(\"TankCode\")}\r\n                                                                        renderer={(cellData) => {\r\n                                                                            return (\r\n                                                                                <Tooltip\r\n                                                                                    element={\r\n                                                                                        <span\r\n                                                                                            style={{\r\n                                                                                                color: (cellData.rowData.Active ? \"#14b614\" : \"red\")\r\n                                                                                            }}>\r\n                                                                                            {cellData.value}\r\n                                                                                        </span>\r\n                                                                                    }\r\n                                                                                    hover={true}\r\n                                                                                    event=\"hover\"\r\n                                                                                    content={t(cellData.rowData.Active ? \"ProductForecast_ActiveTank\" : \"ProductForecast_InactiveTank\")}\r\n                                                                                />\r\n                                                                            );\r\n                                                                        }} />\r\n                                                                    <DataTable.Column field='GrossQuantity' header={t(\"ProductForecast_Inventory\", [uom])} />\r\n                                                                    <DataTable.Column field='Capacity' header={t(\"ProductForecast_Capacity\", [uom])} />\r\n                                                                    <DataTable.Column\r\n                                                                        field='TankMode'\r\n                                                                        header={t(\"TankInfo_Mode\")}\r\n                                                                        renderer={(cellData) => t(cellData.value)} />\r\n                                                                </DataTable>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </> : null\r\n                                            }\r\n                                        </div>\r\n                                        {\r\n                                            this.props.isChartDataReady ?\r\n                                                <div className='col-12 col-md-12 col-lg-7 col-xxl-8'>\r\n                                                    <DashboardCard\r\n                                                        header={t(\"ProductDemandForecast_ForecastOverview\")}\r\n                                                        childCount={0}\r\n                                                        isExportRequired={false}\r\n                                                        className=\"product-forecast-chart\">\r\n                                                        <LACSeriesChart\r\n                                                            kpiInfo={this.fetchChartConfiguration(t, tolerance, uom, overAllCapacity)}\r\n                                                            setChartRefs={this.setRefs}\r\n                                                        />\r\n                                                    </DashboardCard>\r\n                                                </div> : (\r\n                                                    this.props.isLoading ?\r\n                                                        <div className='col-12 col-md-12 col-lg-7 col-xxl-8'>\r\n                                                            <LoadingPage message=\"Loading\" />\r\n                                                        </div>\r\n                                                        : null\r\n                                                )\r\n                                        }\r\n                                    </div>\r\n                                    {\r\n                                        this.props.isChartDataReady ?\r\n                                            <div className='row'>\r\n                                                <div className='col-12 col-md-12 col-lg-6'>\r\n                                                    <span>\r\n                                                        {t(\r\n                                                            \"ProductDemandForecastGridHeader\",\r\n                                                            [\r\n                                                                Utilities.DateDiffInDays(currentDate, this.props.endDate),\r\n                                                                this.props.baseProduct,\r\n                                                                currentDate.toLocaleDateString(),\r\n                                                                this.props.endDate.toLocaleDateString()\r\n                                                            ]\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className='col-12 col-md-12 col-lg-6'>\r\n                                                    <span style={{ float: \"right\", fontStyle: \"italic\", color: \"#a0a0a0\" }}>\r\n                                                        {t(\"ProductDemandForecastDisclaimer\")}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className='col-12'>\r\n                                                    <DataTable\r\n                                                        data={this.props.forecastDetails}\r\n                                                        lazy={true}\r\n                                                        scrollable={true}\r\n                                                        scrollHeight={\"300px\"}\r\n                                                        showHeader={true}\r\n                                                        className=\"forecast-details-table\"\r\n                                                        columnResizeMode=\"fit\"\r\n                                                        resizableColumns={true}\r\n                                                    >\r\n                                                        <DataTable.Column field='ForecastDate' header={t(\"ProductForecast_Date\")} />\r\n                                                        <DataTable.Column field='OpenInventory' header={t(\"ProductForecast_OpeningInventory\", [uom])} />\r\n                                                        <DataTable.Column field='OpenUllage' header={t(\"ProductForecast_OpeningUllage\", [uom])} />\r\n                                                        <DataTable.Column field='PlannedReceiptQty' header={t(\"ProductForecast_PlannedReceipts\", [uom])} />\r\n                                                        <DataTable.Column\r\n                                                            field='ShipQtyDemand'\r\n                                                            header={t(\"ProductForecast_PlannedShipments\", [uom])}\r\n                                                            renderer={(cellData) => {\r\n                                                                let icon = null;\r\n                                                                if (cellData.value > cellData.rowData.OpenInventory) {\r\n                                                                    icon = <Icon root='building' className='pr-2' name=\"close-circled\" size=\"small\" color='red' />\r\n                                                                }\r\n                                                                else if ((cellData.value + Number(tolerance)) > cellData.rowData.OpenInventory) {\r\n                                                                    icon = <Icon name=\"badge-warning\" className='pr-2' color=\"yellow\" size=\"small\" />\r\n                                                                }\r\n                                                                else {\r\n                                                                    icon = <Icon root=\"common\" name='badge-check' className='pr-2' size=\"small\" color=\"green\" />\r\n                                                                }\r\n\r\n                                                                return (\r\n                                                                    <span>\r\n                                                                        {icon}\r\n                                                                        {cellData.value}\r\n                                                                    </span>\r\n                                                                )\r\n                                                            }} />\r\n                                                        <DataTable.Column field='CloseInventory' header={t(\"ProductForecast_ClosingInventory\", [uom])} />\r\n                                                        <DataTable.Column field='CloseUllage' header={t(\"ProductForecast_ClosingUllage\", [uom])} />\r\n                                                        {\r\n                                                            this.props.isSlotEnabled ?\r\n                                                                <DataTable.Column\r\n                                                                    field='ROADSlots'\r\n                                                                    header={\r\n                                                                        <span>\r\n                                                                            {t(\"ProductForecast_SlotAvailability\")}\r\n                                                                            <span className='px-1' style={{ fontSize: \"8px\" }}>({t(\"Common_Receipts\")})</span>\r\n                                                                        </span>\r\n                                                                    }\r\n                                                                    renderer={(cellData) => {\r\n                                                                        let roadColor = (cellData.rowData.ROADSlots === 0 ? \"red\" : \"inherit\");\r\n                                                                        let marineColor = (cellData.rowData.MarineSlots === 0 ? \"red\" : \"inherit\");\r\n                                                                        return (\r\n                                                                            <span>\r\n                                                                                <span\r\n                                                                                    className='icon-Road'\r\n                                                                                    style={{ color: roadColor }}></span>\r\n                                                                                <span\r\n                                                                                    className='pl-1'\r\n                                                                                    style={{ color: roadColor }}>\r\n                                                                                    {t(\"Common_Truck\")}\r\n                                                                                </span>\r\n                                                                                <span> | </span>\r\n                                                                                <span\r\n                                                                                    className='icon-Marine'\r\n                                                                                    style={{ color: marineColor }}>\r\n                                                                                </span>\r\n                                                                                <span\r\n                                                                                    className='pl-1'\r\n                                                                                    style={{ color: marineColor }}>\r\n                                                                                    {t(\"Marine\")}\r\n                                                                                </span>\r\n                                                                            </span>\r\n                                                                        )\r\n                                                                    }}\r\n                                                                /> : null\r\n                                                        }\r\n                                                    </DataTable>\r\n                                                </div>\r\n                                            </div> : (\r\n                                                this.props.isLoading ?\r\n                                                    <div className='row'>\r\n                                                        <div className='col-12'>\r\n                                                            <LoadingPage message=\"Loading\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    : null\r\n                                            )\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </TranslationConsumer>\r\n                </ErrorBoundary>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nProductDemandForecastingDetailsComposite.propTypes = {\r\n    baseProductsList: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    terminal: PropTypes.string.isRequired,\r\n    baseProduct: PropTypes.string.isRequired,\r\n    endDate: PropTypes.any.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    tanks: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    configuration: PropTypes.object.isRequired,\r\n    onGoClick: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n    forecastDetails: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    isChartDataReady: PropTypes.bool\r\n}\r\n\r\nProductDemandForecastingDetailsComposite.defaultProps = {\r\n    isChartDataReady: false,\r\n    isLoading: false\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProductDemandForecastingDetailsComposite);","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["ProductDemandForecastingDetailsComposite","React","constructor","arguments","state","chartRef","isDownloading","downloadBtnClick","t","overallCapacity","inventory","uom","this","setState","doc","wijmoPdf","ended","s","e","blob","pageSettings","margins","left","top","right","bottom","layout","Portrait","toPng","hostElement","cacheBust","then","url","colWidth","rowHeight","drawText","align","Center","font","lineGap","y","continued","props","baseProduct","Date","toLocaleString","toLocaleDateString","endDate","paths","rect","stroke","x","String","tankColumns","selectedTanks","forEach","tank","height","addPage","col","index","cellText","undefined","width","moveDown","currentDate","setHours","Utilities","isSlotEnabled","forecastColumns","push","forecastDetails","row","xPad","color","tolerance","isVolume","configuration","Volume","Mass","Number","circle","fill","wijmo","drawImage","end","catch","error","console","log","setRefs","key","ref","sequence","fetchChartConfiguration","overAllCapacity","chartInfo","Array","isArray","JSONFormat","KPIData","Table","render","uoms","Capacity","GrossQuantity","_jsx","children","ErrorBoundary","TranslationConsumer","_jsxs","className","Button","type","onClick","disabled","isChartDataReady","actionType","Select","options","baseProductsList","multiple","placeholder","label","value","onChange","val","reserveSpace","validationErrors","BaseProduct","DatePicker","displayFormat","getCurrentDateFormat","disablePast","onTextChange","EndDate","maxDuration","isLoading","onGoClick","_Fragment","Tanks","DataTable","data","tanks","lazy","scrollable","scrollHeight","showHeader","selection","onSelectionChange","onTankSelection","onSelectAll","selectionMode","Column","field","header","renderer","cellData","Tooltip","element","style","rowData","Active","hover","event","content","DashboardCard","childCount","isExportRequired","LACSeriesChart","kpiInfo","setChartRefs","LoadingPage","message","float","fontStyle","columnResizeMode","resizableColumns","icon","OpenInventory","Icon","root","name","size","fontSize","roadColor","ROADSlots","marineColor","MarineSlots","defaultProps","connect","userDetails","getUserDetails","tokenDetails","TokenAuth","getOptionsWithSelect","ddlOptions","selectOptionText","filter","option","text","length","unshift","language","window","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}