{"version":3,"file":"static/js/1132.a1ccba29.chunk.js","mappings":"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","sources":["Components/UIBase/Common/SiteDetailsUserActions.jsx","Components/UIBase/Common/TMDetailsHeader.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, Modal } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nSiteDetailsUserActions.propTypes = {\r\n  handleDelete: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n  isDeleteEnabled: PropTypes.bool\r\n};\r\n\r\nSiteDetailsUserActions.defaultProps = { saveEnabled: true, isDeleteEnabled: false };\r\nexport function SiteDetailsUserActions({\r\n  handleDelete,\r\n  handleSave,\r\n  isDeleteEnabled,\r\n  saveEnabled,\r\n  isEnterpriseNode,\r\n  isBCU,\r\n  handleSkipLocalLoadFetch\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  function displayTMModalforDelete() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  handleDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-12 pr-4 mt-2\" style={{ textAlign: \"right\" }}>\r\n              <Button\r\n                content={t(\"Loadingarm_Delete\")}\r\n                className={isEnterpriseNode === true || isDeleteEnabled !== true ? \"cancelENButton\" : \"cancelButton\"}\r\n                disabled={!isDeleteEnabled || (isEnterpriseNode === true ? true : false)}\r\n                onClick={() => {\r\n                  setModelOpen(true);\r\n                }}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled || (isEnterpriseNode === true ? true : false)}\r\n                onClick={handleSave}\r\n              ></Button>\r\n              {/* {\r\n                isBCU ? <Button\r\n                  content={t(\"DeviceInfo_SkipLocalLoadFetch\")}\r\n                  disabled={!saveEnabled || (isEnterpriseNode === true ? true : false)}\r\n                  onClick={handleSkipLocalLoadFetch}\r\n                ></Button> : null\r\n              } */}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n      {displayTMModalforDelete()}\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;"],"names":["SiteDetailsUserActions","_ref","handleDelete","handleSave","isDeleteEnabled","saveEnabled","isEnterpriseNode","isBCU","handleSkipLocalLoadFetch","modelOpen","setModelOpen","useState","_jsxs","children","_jsx","TranslationConsumer","t","className","style","textAlign","Button","content","disabled","onClick","Modal","open","size","Content","Footer","type","defaultProps","TMDetailsHeader","entityCode","newEntityName","popUpContents","margin","undefined","length","Popup","element","fieldName","fieldValue","Icon","marginLeft","root","name","position","List","map"],"sourceRoot":""}