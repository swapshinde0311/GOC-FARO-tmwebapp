{"version":3,"file":"static/js/9329.ec27349e.chunk.js","mappings":"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","sources":["Components/Composite/Entity/ReportsComposite.jsx","Components/UIBase/Common/TMReportViewer.jsx","Components/UIBase/Details/ReportDetails.jsx","JS/NotifyEvent.js","JS/functionalUtilities.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Breadcrumb,\r\n  Button,\r\n  Table,\r\n  Select,\r\n  DatePicker,\r\n  Input,\r\n} from \"@scuf/common\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport ReportDetails from \"../../UIBase/Details/ReportDetails\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport axios from \"axios\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport lodash from \"lodash\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { Loader } from \"@scuf/common\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport moment from \"moment\";\r\n\r\nclass ReportsComposite extends Component {\r\n  state = {\r\n    showReport: false,\r\n    reportList: [],\r\n    showReportParams: false,\r\n    parameters: [],\r\n    paramValues: {},\r\n    paramOptions: {},\r\n    disabledParams: {},\r\n    listLoading: true,\r\n    parameterLoading: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios(\r\n      RestAPIs.GetReportList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        if (response.data.IsSuccess) {\r\n          let reportList = response.data.EntityResult.ReportListCategories;\r\n          axios(\r\n            RestAPIs.GetReportServiceURI,\r\n            Utilities.getAuthenticationObjectforGet(\r\n              this.props.tokenDetails.tokenInfo\r\n            )\r\n          )\r\n            .then((response) => {\r\n              if (response.data.IsSuccess) {\r\n                this.reportServiceURI = response.data.EntityResult;\r\n                this.setState({ reportList: reportList, listLoading: false });\r\n              } else {\r\n                console.log(\r\n                  \"Error in fetching ReportServiceURI: \",\r\n                  response.data.ErrorList\r\n                );\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.log(\"Error in fetching ReportServiceURI: \", error);\r\n            });\r\n        } else {\r\n          console.log(\r\n            \"Error in fetching ReportList: \",\r\n            response.data.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error in fetching ReportList: \", error);\r\n      });\r\n  }\r\n\r\n  validateParams = (paramValues) => {\r\n    let cloneValidationErrors = { ...this.state.validationErrors };\r\n\r\n    let validationDef = this.validationDef;\r\n\r\n    Object.keys(validationDef).forEach(function (key) {\r\n      if (paramValues[key] !== undefined)\r\n        cloneValidationErrors[key] = Utilities.validateField(\r\n          validationDef[key],\r\n          paramValues[key]\r\n        );\r\n    });\r\n    this.setState({ validationErrors: cloneValidationErrors });\r\n    let returnValue = Object.values(cloneValidationErrors).every(function (\r\n      value\r\n    ) {\r\n      return value === \"\";\r\n    });\r\n\r\n    return returnValue;\r\n  };\r\n  handleShowReportClick = () => {\r\n    try {\r\n      let returnValue = Object.values(this.state.validationErrors).every(\r\n        function (value) {\r\n          return value === \"\";\r\n        }\r\n      );\r\n      if (returnValue) {\r\n        if (this.validateParams(this.state.paramValues)) {\r\n          this.setState({ showReport: true });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportsComposite: Error occured onhandleShowReportClick\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  buildBreadcrumb = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {this.props.activeItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item key={parentitem.itemCode}>\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={this.props.activeItem.itemCode}>\r\n              {t(this.props.activeItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  handleReportClick = (report) => {\r\n    this.setState({ parameterLoading: true });\r\n    axios(\r\n      RestAPIs.GetReportParams + \"?ReportName=\" + report,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        //console.log(response);\r\n        if (response.data.IsSuccess) {\r\n          let params = response.data.EntityResult.Parameters;\r\n          this.paramTables = response.data.EntityResult.ReportsData;\r\n          let cloneParamOptions = lodash.cloneDeep(this.state.paramOptions);\r\n          let cloneDisabledParams = lodash.cloneDeep(this.state.disabledParams);\r\n          let cloneParamValues = {\r\n            Culture: this.props.userDetails.EntityResult.UICulture,\r\n          };\r\n          this.validationDef = {};\r\n          this.reportName = response.data.EntityResult.ReportName;\r\n          if (\r\n            response.data.EntityResult.UserName !== undefined &&\r\n            response.data.EntityResult.UserName !== \"\" &&\r\n            response.data.EntityResult.UserName !== null\r\n          ) {\r\n            cloneParamValues[\"UserName\"] = response.data.EntityResult.UserName;\r\n          }\r\n          for (let i = 0; i < params.length; ++i) {\r\n            if (params[i].ControlType === \"DropDownList\") {\r\n              this.validationDef[params[i].ParamName] = [];\r\n              if (params[i].Required === true) {\r\n                this.validationDef[params[i].ParamName].push({\r\n                  minLength: 1,\r\n                  errorCode: \"Select_Value\",\r\n                });\r\n              }\r\n              if (\r\n                params[i].DependentControls === null ||\r\n                params[i].DependentControls.length === 0\r\n              ) {\r\n                let tableName = params[i].TableName;\r\n                let fieldName = params[i].FieldName;\r\n                let list = this.paramTables[tableName];\r\n                let optionsSet = new Set(list.map((row) => row[fieldName]));\r\n                optionsSet = [...optionsSet];\r\n                let optionsValues = Utilities.transferListtoOptions(optionsSet);\r\n                cloneParamValues[params[i].ParamName] = null;\r\n                if (!params[i].IsOnlyForEnterprise && !params[i].Required) {\r\n                  optionsValues.unshift({ text: \"All\", value: 0 });\r\n                  cloneParamValues[params[i].ParamName] = 0;\r\n                }\r\n                cloneParamOptions[params[i].ParamName] = optionsValues;\r\n                cloneDisabledParams[params[i].ParamName] = false;\r\n              } else {\r\n                if (!params[i].IsOnlyForEnterprise && !params[i].Required) {\r\n                  let optionsValues = [{ text: \"All\", value: 0 }];\r\n                  cloneParamOptions[params[i].ParamName] = optionsValues;\r\n                  cloneDisabledParams[params[i].ParamName] = true;\r\n                  cloneParamValues[params[i].ParamName] = 0;\r\n                }\r\n                else if (params[i].Required) {\r\n                  let optionsValues = [{ text: \"Select\", value: \"\" }];\r\n                  cloneParamOptions[params[i].ParamName] = optionsValues;\r\n                  cloneDisabledParams[params[i].ParamName] = true;\r\n                  cloneParamValues[params[i].ParamName] = \"\";\r\n                }\r\n                else {\r\n                  cloneParamValues[params[i].ParamName] = 0;\r\n                }\r\n              }\r\n            } else if (\r\n              params[i].ControlType === \"DateTime\" ||\r\n              params[i].ControlType === \"Date\"\r\n            ) {\r\n              //this.validationDef[params[i].ParamName] = [];\r\n              if (params[i].Required === true) {\r\n                let def = [\r\n                  { minLength: 1, errorCode: \"Select_Date\" },\r\n                  { isDate: true, errorCode: \"Valid_Date\" },\r\n                ];\r\n\r\n                this.validationDef[params[i].ParamName] = def;\r\n              }\r\n              if (!this.props.userDetails.EntityResult.IsWebPortalUser) {\r\n                cloneParamValues[params[i].ParamName] = new Date();\r\n              } else {\r\n                // UTC offset difference between enNode and Web Portal\r\n                // Note: offSet from API will be positive for timezones ahead of UTC and negative for timezones behind UTC\r\n                // Note: offSet from JS will be negative for timezones ahead of UTC and positive for timezones behind UTC\r\n                let enNodeOffset =\r\n                  this.props.userDetails.EntityResult.TimeZoneOffset +\r\n                  new Date().getTimezoneOffset();\r\n\r\n                cloneParamValues[params[i].ParamName] = moment(new Date())\r\n                  .add(enNodeOffset, \"m\")\r\n                  .toDate();\r\n              }\r\n            } else if (params[i].ControlType === \"Text\") {\r\n              if (params[i].Required === true) {\r\n                const codeExpression = \"^[0-9a-zA-Z-_]+$\";\r\n                const codeError = \"Code_ValidInputCharacters\";\r\n                let def = [\r\n                  { minLength: 1, errorCode: \"Mandatory_Field\" },\r\n                  { expression: codeExpression, errorCode: codeError },\r\n                ];\r\n\r\n                this.validationDef[params[i].ParamName] = def;\r\n              }\r\n              cloneParamValues[params[i].ParamName] = null;\r\n            }\r\n          }\r\n\r\n          this.setState({\r\n            parameters: [...response.data.EntityResult.Parameters],\r\n            paramOptions: cloneParamOptions,\r\n            disabledParams: cloneDisabledParams,\r\n            paramValues: cloneParamValues,\r\n            showReportParams: true,\r\n            validationErrors: Utilities.getInitialValidationErrors(\r\n              this.validationDef\r\n            ),\r\n            parameterLoading: false,\r\n          });\r\n        } else {\r\n          console.log(\"Get Report Params error:\", response.data.ErrorList);\r\n          this.setState({ parameterLoading: false, showReportParams: false });\r\n        }\r\n\r\n        // console.log(this.state);\r\n\r\n        // console.log(response);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error occured on handleReportClick\", err);\r\n        this.setState({ parameterLoading: false, showReportParams: false });\r\n      });\r\n  };\r\n\r\n  handleBack = () => {\r\n    this.setState({ showReport: false });\r\n  };\r\n\r\n  onDropDownChange = (data, parameter) => {\r\n    let cloneParamValues = lodash.cloneDeep(this.state.paramValues);\r\n    let cloneDisabledParams = lodash.cloneDeep(this.state.disabledParams);\r\n    let cloneParamOptions = lodash.cloneDeep(this.state.paramOptions);\r\n    let cloneValidationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    if (data !== undefined && data !== null) {\r\n      cloneParamValues[parameter.ParamName] = data;\r\n      if (this.validationDef[parameter.ParamName] !== undefined) {\r\n        cloneValidationErrors[parameter.ParamName] = Utilities.validateField(\r\n          this.validationDef[parameter.ParamName],\r\n          data\r\n        );\r\n      }\r\n\r\n      let refreshControls = parameter.RefreshControls;\r\n\r\n      for (let i = 0; i < refreshControls.length; ++i) {\r\n        cloneDisabledParams[refreshControls[i]] = false;\r\n        let refreshParameter = this.state.parameters.find(\r\n          ({ ParamName }) => ParamName === refreshControls[i]\r\n        );\r\n\r\n        let paramTable = this.paramTables[refreshParameter.TableName];\r\n        let dependentControls = refreshParameter.DependentControls;\r\n        //console.log(\"paramtable\", paramTable);\r\n        //console.log(\"depenedentControls\", dependentControls);\r\n        for (let j = 0; j < dependentControls.length; ++j) {\r\n          let dependantParam = this.state.parameters.find(\r\n            ({ ParamName }) => ParamName === dependentControls[j]\r\n          );\r\n\r\n          if (cloneParamValues[dependentControls[j]] !== 0) {\r\n            paramTable = paramTable.filter(\r\n              (obj) => obj[dependantParam.FieldName] ===\r\n                cloneParamValues[dependentControls[j]]\r\n            );\r\n          }\r\n        }\r\n\r\n        let optionsSet = new Set(\r\n          paramTable.map((row) => row[refreshParameter.FieldName])\r\n        );\r\n        // console.log(\"optionset\", optionsSet);\r\n        optionsSet = [...optionsSet];\r\n\r\n        let optionsValues = Utilities.transferListtoOptions(optionsSet);\r\n        if (!refreshParameter.Required && !refreshParameter.IsOnlyForEnterprise) {\r\n          optionsValues.unshift({ text: \"All\", value: 0 });\r\n        }\r\n        else if (refreshParameter.Required) {\r\n          optionsValues.unshift({ text: \"Select\", value: \"\" });\r\n          cloneParamValues[refreshParameter.ParamName] = \"\";\r\n        }\r\n        else {\r\n          cloneParamValues[refreshParameter.ParamName] = 0;\r\n        }\r\n        cloneParamOptions[refreshParameter.ParamName] = optionsValues;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      paramValues: cloneParamValues,\r\n      disabledParams: cloneDisabledParams,\r\n      paramOptions: cloneParamOptions,\r\n      validationErrors: cloneValidationErrors,\r\n    });\r\n  };\r\n\r\n  onFieldChange = (ParamName, date) => {\r\n    let cloneParamValues = lodash.cloneDeep(this.state.paramValues);\r\n    let cloneValidationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    cloneParamValues[ParamName] = date;\r\n\r\n    if (this.validationDef[ParamName] !== undefined) {\r\n      cloneValidationErrors[ParamName] = Utilities.validateField(\r\n        this.validationDef[ParamName],\r\n        date\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      paramValues: cloneParamValues,\r\n      validationErrors: cloneValidationErrors,\r\n    });\r\n  };\r\n\r\n  onDateTextChange = (ParamName, value, error) => {\r\n    let cloneParamValues = lodash.cloneDeep(this.state.paramValues);\r\n    let cloneValidationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n\r\n    cloneValidationErrors[ParamName] = error;\r\n    cloneParamValues[ParamName] = value;\r\n\r\n    this.setState({\r\n      paramValues: cloneParamValues,\r\n      validationErrors: cloneValidationErrors,\r\n    });\r\n  };\r\n  buildReportParams = () => {\r\n    return this.state.parameters.map((parameter) => {\r\n      if (parameter.ControlType === \"DropDownList\") {\r\n        return (\r\n          <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <Select\r\n                  fluid\r\n                  placeholder={t(\"FinishedProductInfo_Select\")}\r\n                  indicator={parameter.Required ? \"required\" : \"\"}\r\n                  label={t(parameter.LocalisedParamName)}\r\n                  value={\r\n                    this.state.paramValues[parameter.ParamName] === undefined\r\n                      ? \"\"\r\n                      : this.state.paramValues[parameter.ParamName]\r\n                  }\r\n                  disabled={this.state.disabledParams[parameter.ParamName]}\r\n                  options={\r\n                    this.state.paramOptions[parameter.ParamName] === undefined\r\n                      ? []\r\n                      : this.state.paramOptions[parameter.ParamName]\r\n                  }\r\n                  onChange={(data) => this.onDropDownChange(data, parameter)}\r\n                  error={t(this.state.validationErrors[parameter.ParamName])}\r\n                  reserveSpace={false}\r\n                />\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        );\r\n      } else if (parameter.ControlType === \"DateTime\") {\r\n        return (\r\n          <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <DatePicker\r\n                  fluid\r\n                  //value={modCarrier.PermitExpiryDate.toISOString()}\r\n                  value={\r\n                    this.state.paramValues[parameter.ParamName] === null\r\n                      ? \"\"\r\n                      : new Date(this.state.paramValues[parameter.ParamName])\r\n                  }\r\n                  type=\"datetime\"\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  label={t(parameter.LocalisedParamName)}\r\n                  showYearSelector=\"true\"\r\n                  //disablePast={true}\r\n                  indicator={parameter.Required ? \"required\" : \"\"}\r\n                  onChange={(data) =>\r\n                    this.onFieldChange(parameter.ParamName, data)\r\n                  }\r\n                  onTextChange={(value, error) => {\r\n                    this.onDateTextChange(parameter.ParamName, value, error);\r\n                  }}\r\n                  error={t(this.state.validationErrors[parameter.ParamName])}\r\n                  reserveSpace={false}\r\n                />\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        );\r\n      } else if (parameter.ControlType === \"Text\") {\r\n        return (\r\n          <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <Input\r\n                  fluid\r\n                  value={\r\n                    this.state.paramValues[parameter.ParamName] === null\r\n                      ? \"\"\r\n                      : this.state.paramValues[parameter.ParamName]\r\n                  }\r\n                  onChange={(data) =>\r\n                    this.onFieldChange(parameter.ParamName, data)\r\n                  }\r\n                  indicator={parameter.Required ? \"required\" : \"\"}\r\n                  label={t(parameter.LocalisedParamName)}\r\n                  error={t(this.state.validationErrors[parameter.ParamName])}\r\n                  reserveSpace={false}\r\n                />\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        );\r\n      } else if (parameter.ControlType === \"Date\") {\r\n        return (\r\n          <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <DatePicker\r\n                  fluid\r\n                  //value={modCarrier.PermitExpiryDate.toISOString()}\r\n                  value={\r\n                    this.state.paramValues[parameter.ParamName] === null\r\n                      ? \"\"\r\n                      : new Date(this.state.paramValues[parameter.ParamName])\r\n                  }\r\n                  // type=\"datetime\"\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  label={t(parameter.LocalisedParamName)}\r\n                  showYearSelector=\"true\"\r\n                  //disablePast={true}\r\n                  indicator={parameter.Required ? \"required\" : \"\"}\r\n                  onChange={(data) =>\r\n                    this.onFieldChange(parameter.ParamName, data.toISOString())\r\n                  }\r\n                  onTextChange={(value, error) => {\r\n                    this.onDateTextChange(parameter.ParamName, value, error);\r\n                  }}\r\n                  error={t(this.state.validationErrors[parameter.ParamName])}\r\n                  reserveSpace={false}\r\n                />\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  renderModal() {\r\n    let path = null;\r\n    if (this.props.userDetails.EntityResult.IsArchived) {\r\n      path = \"TM/\" + Constants.TMReportArchive + \"/\" + this.reportName;\r\n    } else {\r\n      path = \"TM/\" + Constants.TMReports + \"/\" + this.reportName;\r\n    }\r\n\r\n    return (\r\n      <ReportDetails\r\n        showReport={this.state.showReport}\r\n        handleBack={this.handleBack}\r\n        handleModalClose={this.handleBack}\r\n        // proxyServerHost=\"http://epksr5115dit:3625/TMWebAPI/\"\r\n        proxyServerHost={RestAPIs.WebAPIURL}\r\n        reportServiceHost={this.reportServiceURI}\r\n        filePath={path}\r\n        parameters={this.getChangedReportParameters()}\r\n      />\r\n    );\r\n  }\r\n\r\n  getChangedReportParameters = () => {\r\n    let modParamValues = lodash.cloneDeep(this.state.paramValues);\r\n    try {\r\n      Object.keys(modParamValues).forEach((paramKey) => {\r\n        if (modParamValues[paramKey] instanceof Date) {\r\n          if (!this.props.userDetails.EntityResult.IsWebPortalUser) {\r\n            modParamValues[paramKey] = modParamValues[paramKey]\r\n              .toISOString()\r\n              .replace(\"Z\", \"\");\r\n          } else {\r\n            // UTC offset difference between enNode and Web Portal\r\n            // Note: offSet from API will be positive for timezones ahead of UTC and negative for timezones behind UTC\r\n            // Note: offSet from JS will be negative for timezones ahead of UTC and positive for timezones behind UTC\r\n            let enNodeOffset =\r\n              this.props.userDetails.EntityResult.TimeZoneOffset +\r\n              new Date().getTimezoneOffset();\r\n\r\n            // subtract EN Node offset from UTC time.\r\n            modParamValues[paramKey] = moment(\r\n              moment(modParamValues[paramKey]).utc().format()\r\n            )\r\n              .subtract(enNodeOffset, \"m\")\r\n              .toISOString()\r\n              .replace(\"Z\", \"\");\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error while getChangedReportParameters\", error);\r\n    }\r\n\r\n    return modParamValues;\r\n  };\r\n\r\n  handleReportPrintClick = () => {\r\n    try {\r\n      let returnValue = Object.values(this.state.validationErrors).every(\r\n        function (value) {\r\n          return value === \"\";\r\n        }\r\n      );\r\n      if (returnValue) {\r\n        if (this.validateParams(this.state.paramValues)) {\r\n          let paramKeys = Object.keys(this.state.paramValues);\r\n          let reportParams = [];\r\n          for (let i = 0; i < paramKeys.length; ++i) {\r\n            reportParams.push(paramKeys[i]);\r\n            reportParams.push(this.state.paramValues[paramKeys[i]]);\r\n          }\r\n          let obj = {\r\n            Entity: {\r\n              ReportName: this.reportName,\r\n              ReportParams: reportParams,\r\n            },\r\n          };\r\n          let notification = {\r\n            messageType: \"critical\",\r\n            message: \"ReportPrintStatus\",\r\n            messageResultDetails: [\r\n              {\r\n                keyFields: [],\r\n                keyValues: [],\r\n                isSuccess: false,\r\n                errorMessage: \"\",\r\n              },\r\n            ],\r\n          };\r\n\r\n          axios(\r\n            RestAPIs.ReportPrint,\r\n            Utilities.getAuthenticationObjectforPost(\r\n              obj,\r\n              this.props.tokenDetails.tokenInfo\r\n            )\r\n          ).then((response) => {\r\n            notification.messageType = response.data.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess =\r\n              response.data.IsSuccess;\r\n            if (response.data.IsSuccess) {\r\n            } else {\r\n              notification.messageResultDetails[0].errorMessage =\r\n                response.data.ErrorList[0];\r\n            }\r\n\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportsComposite: Error occured onhandleReportPrintClick\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {\" \"}\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <div>\r\n              <div className=\"row\" style={{ marginTop: \"10px\" }}>\r\n                <div className=\"col-12 col-sm-12 col-md-12 col-lg-5 col-xl-7\">\r\n                  <ErrorBoundary> {this.buildBreadcrumb()}</ErrorBoundary>\r\n                </div>\r\n              </div>\r\n              {this.state.parameterLoading ? (\r\n                <div className={`authLoading parameterLoader`}>\r\n                  <Loader\r\n                    text=\" \"\r\n                    className={`globalLoaderPositionPosition`}\r\n                  ></Loader>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              {this.state.listLoading ? (\r\n                <LoadingPage message=\"Loading\"></LoadingPage>\r\n              ) : (\r\n                <>\r\n                  <div className=\"detailsContainer\">\r\n                    <div className=\"row  reportTable\">\r\n                      {this.state.reportList.map((reportCategoryList) => {\r\n                        if (reportCategoryList.ReportListItems.Table.length > 0)\r\n                          return (\r\n                            <div className=\"col-12 col-md-6 col-lg-4 fixed-top\">\r\n                              <Table>\r\n                                <Table.Header>\r\n                                  <Table.HeaderCell\r\n                                    content={t(\r\n                                      reportCategoryList.ReportCategory\r\n                                    )}\r\n                                  />\r\n                                </Table.Header>\r\n                                <Table.Body>\r\n                                  {reportCategoryList.ReportListItems.Table.map(\r\n                                    (reportItem) => {\r\n                                      return (\r\n                                        <Table.Row>\r\n                                          <Table.Cell\r\n                                            onClick={() =>\r\n                                              this.handleReportClick(\r\n                                                reportItem.ReportName\r\n                                              )\r\n                                            }\r\n                                            style={{\r\n                                              cursor: \"pointer\",\r\n                                              fontWeight:\r\n                                                this.reportName ===\r\n                                                  reportItem.ReportName\r\n                                                  ? \"bold\"\r\n                                                  : \"normal\",\r\n                                              borderLeft:\r\n                                                this.reportName ===\r\n                                                  reportItem.ReportName\r\n                                                  ? \"5px solid #1274B7\"\r\n                                                  : \"\",\r\n                                            }}\r\n                                          >\r\n                                            {t(reportItem.ReportName)}\r\n                                          </Table.Cell>\r\n                                        </Table.Row>\r\n                                      );\r\n                                    }\r\n                                  )}\r\n                                </Table.Body>\r\n                              </Table>\r\n                            </div>\r\n                          );\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                  {this.state.showReportParams ? (\r\n                    <div className=\"detailsContainer\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-12 col-md-12 col-lg-12\">\r\n                          <h5> {t(this.reportName)}</h5>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"row\">{this.buildReportParams()}</div>\r\n                      {this.renderModal()}\r\n                      <div\r\n                        className=\"row\"\r\n                        style={{\r\n                          // display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          // flexWrap: \"wrap\",\r\n                        }}\r\n                      >\r\n                        {!this.props.userDetails.EntityResult\r\n                          .IsWebPortalUser ? (\r\n                          <div className=\"col-12 col-md-6 col-lg-3\">\r\n                            <Button\r\n                              onClick={this.handleReportPrintClick}\r\n                              content={t(\"EOD_Print\")}\r\n                            ></Button>\r\n                          </div>\r\n                        ) : null}\r\n                        <div className=\"col-12 col-md-6 col-lg-3\">\r\n                          <Button\r\n                            onClick={this.handleShowReportClick}\r\n                            content={t(\"Report_Show\")}\r\n                          ></Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n          )}\r\n        </TranslationConsumer>\r\n        <ErrorBoundary>\r\n          <ToastContainer\r\n            hideProgressBar={true}\r\n            closeOnClick={false}\r\n            closeButton={true}\r\n            newestOnTop={true}\r\n            position=\"bottom-right\"\r\n            toastClassName=\"toast-notification-wrap\"\r\n          />\r\n        </ErrorBoundary>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ReportsComposite);\r\n","import React from \"react\";\r\nimport * as WjCore from \"@grapecity/wijmo\";\r\nimport { ReportViewer } from \"@grapecity/wijmo.react.viewer\";\r\nimport * as wjViewer from \"@grapecity/wijmo.viewer\";\r\nimport \"@grapecity/wijmo.styles/wijmo.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Constants from \"./../../../JS/Constants\";\r\nimport { connect } from \"react-redux\";\r\n\r\nTMReportViewer.propTypes = {\r\n  proxyServerHost: PropTypes.string.isRequired,\r\n  reportServiceHost: PropTypes.string.isRequired,\r\n  parameters: PropTypes.object.isRequired,\r\n};\r\n\r\nTMReportViewer.defaultProps = {\r\n  parameters: {},\r\n};\r\n\r\nWjCore.setLicenseKey(Constants.wizmoKey);\r\n\r\nfunction TMReportViewer({\r\n  proxyServerHost,\r\n  reportServiceHost,\r\n  parameters,\r\n  filePath,\r\n  ...props\r\n}) {\r\n  //   const [proxyHost, setProxyHost] = useState(\r\n  //     \"http://localhost:8888/TMWebProxyAPI/\"\r\n  //   );\r\n  //   const [reportServiceHost, setReportServiceHost] = useState(\r\n  //     \"http://localhost:5632/\"\r\n  //   );\r\n  //   const [reportUrl, setReportUrl] = useState(proxyHost + \"api/report\");\r\n  //   const [filePath, setFilePath] = useState(\r\n  //     \"TM/\" + \"TMReports/\" + \"CarrierCompanyReport\"\r\n  //   );\r\n  const reportUrl = proxyServerHost + \"api/report\";\r\n  //const filePath = \"TM/\" + \"TMReports/\" + reportName;\r\n\r\n  const beforeXhrRequestSend = (s, event) => {\r\n    // use this event for Authorization purpose\r\n    const prevBeforeSend = event.settings.beforeSend;\r\n    event.settings.beforeSend = function (xhr) {\r\n      prevBeforeSend && prevBeforeSend(xhr);\r\n      //here you may add the params for XMLHttpRequest as required\r\n      if (!props.userDetails.EntityResult.IsWebPortalUser)\r\n        xhr.withCredentials = true;\r\n      if (xhr.URL_DEBUG.indexOf(\"parameters\") > -1) {\r\n        xhr.onreadystatechange = function () {\r\n          if (this.readyState === 4 && this.status === 200) {\r\n            var host = s.hostElement;\r\n            setTimeout(() => {\r\n              var splitter = host.querySelector(\".wj-viewer-splitter\");\r\n              var param = host\r\n                .querySelector(\".wj-viewer-tabsleft\")\r\n                .querySelectorAll(\"li\")[2];\r\n              if (!param.disabled) {\r\n                param.className = \"hidden\";\r\n                splitter.click();\r\n              }\r\n            }, 1000);\r\n          }\r\n        };\r\n      }\r\n    };\r\n  };\r\n  let header = {\r\n    Authorization: \"Bearer \" + props.tokenDetails.tokenInfo,\r\n  };\r\n\r\n  // let header = {\r\n  //   Authorization: \"Bearer \" + \"fiewjfjewifi\",\r\n  // };\r\n\r\n  const initViewer = (s, event) => {\r\n    wjViewer._ReportService.prototype.load = function (data) {\r\n      var _this = this;\r\n      var promise = new wjViewer._Promise();\r\n      if (!this._checkReportController(promise)) {\r\n        return promise;\r\n      }\r\n      this.httpRequest(this._getReportInstancesUrl(), {\r\n        method: \"POST\",\r\n        data: data,\r\n      }).then(\r\n        function (xhr) {\r\n          var v = wjViewer._parseReportExecutionInfo(xhr.responseText);\r\n          _this._instanceId = v.id;\r\n          _this._status = wjViewer._ExecutionStatus.loaded;\r\n          _this._outlinesLocation = v.outlinesLocation;\r\n          _this._statusLocation = v.statusLocation.replace(\r\n            reportServiceHost,\r\n            proxyServerHost\r\n          );\r\n          _this._pageSettingsLocation = v.pageSettingsLocation;\r\n          _this._featuresLocation = v.featuresLocation;\r\n          _this._parametersLocation = v.parametersLocation;\r\n          promise.resolve(v);\r\n        },\r\n        function (xhr) {\r\n          promise.reject(_this._getError(xhr));\r\n        }\r\n      );\r\n      return promise;\r\n    };\r\n  };\r\n\r\n  //console.log(props.userDetails.EntityResult.IsWebPortalUser, header);\r\n  return (\r\n    <div>\r\n      {props.userDetails.EntityResult.IsWebPortalUser ? (\r\n        <div>\r\n          <ReportViewer\r\n            requestHeaders={header}\r\n            style={{ height: \"80vh\" }}\r\n            parameters={parameters}\r\n            serviceUrl={reportUrl}\r\n            filePath={filePath}\r\n            initialized={initViewer}\r\n            beforeSendRequest={beforeXhrRequestSend}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <ReportViewer\r\n            //requestHeaders={header}\r\n            style={{ height: \"80vh\" }}\r\n            parameters={parameters}\r\n            serviceUrl={reportUrl}\r\n            filePath={filePath}\r\n            initialized={initViewer}\r\n            beforeSendRequest={beforeXhrRequestSend}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TMReportViewer);\r\n","import React from \"react\";\r\nimport { Modal, Button, Header } from \"@scuf/common\";\r\nimport TMReportViewer from \"../Common/TMReportViewer\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nReportDetails.propTypes = {\r\n  proxyServerHost: PropTypes.string.isRequired,\r\n  reportServiceHost: PropTypes.string.isRequired,\r\n  filePath: PropTypes.string.isRequired,\r\n  handleBack: PropTypes.func.isRequired,\r\n  showReport: PropTypes.bool.isRequired,\r\n  handleModalClose: PropTypes.func.isRequired,\r\n  parameters: PropTypes.object.isRequired,\r\n};\r\nReportDetails.defaultProps = {\r\n  parameters: {},\r\n};\r\nexport default function ReportDetails({\r\n  proxyServerHost,\r\n  reportServiceHost,\r\n  filePath,\r\n  handleBack,\r\n  showReport,\r\n  handleModalClose,\r\n  parameters,\r\n}) {\r\n  const [t] = useTranslation();\r\n\r\n  return (\r\n    <Modal\r\n      style={{ padding: \"0px\" }}\r\n      size=\"fullscreen\"\r\n      open={showReport}\r\n      // onClose={handleModalClose}\r\n    >\r\n      <div>\r\n        <Header title={t(\"Header_TerminalManager\")} menu={false} />\r\n        <TMReportViewer\r\n          proxyServerHost={proxyServerHost}\r\n          reportServiceHost={reportServiceHost}\r\n          filePath={filePath}\r\n          parameters={parameters}\r\n        />\r\n        <div style={{ marginTop: \"10px\", marginLeft: \"20px\" }}>\r\n          <Button\r\n            className=\"backButton\"\r\n            onClick={handleBack}\r\n            content={t(\"Report_Back\")}\r\n          ></Button>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Notification } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { delimiter } from \"./Constants\";\r\nimport PropTypes from \"prop-types\";\r\nNotifyEvent.propTypes = {\r\n  notificationMessage: PropTypes.shape({\r\n    messageType: PropTypes.oneOf([\"success\", \"critical\"]),\r\n    message: PropTypes.string,\r\n    messageResultDetails: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        keyFields: PropTypes.arrayOf(PropTypes.string),\r\n        KeyValues: PropTypes.arrayOf(PropTypes.string),\r\n        isSuccess: PropTypes.bool,\r\n        errorMessage: PropTypes.string,\r\n      })\r\n    ),\r\n  }).isRequired,\r\n  //closeToast: PropTypes.bool,\r\n};\r\n// notifiaionMessage={messageType:\"success/critical\",message:\"title of message\",\r\n// messageResultDetails:[{keyFields:[Array Of Key Codes],KeyValues:[Array of Key Values],isSuccess,ErrorMessage}]}\r\nexport default function NotifyEvent({ notificationMessage }) {\r\n\r\n  function getLocalizedMessage(message) {\r\n    try {\r\n      let messageOptions = message.split(delimiter);\r\n      return messageOptions[0];\r\n    } catch (error) {\r\n      console.log(error);\r\n      return \"\";\r\n    }\r\n  }\r\n  function getLocalizedMessageParameters(message) {\r\n    try {\r\n      let messageOptions = message.split(delimiter);\r\n      messageOptions.splice(0, 1);\r\n      return messageOptions;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <Notification\r\n          className=\"toast-notification\"\r\n          severity={notificationMessage.messageType}\r\n          // onCloseClick={closeToast}\r\n          hasIcon={true}\r\n          title={t(notificationMessage.message)}\r\n        //onDetailsClick={() => alert(details)}\r\n        >\r\n          {notificationMessage.messageResultDetails.map((messageResult) => {\r\n            var entityKeyDetails = \"\";\r\n            if (messageResult.keyFields.length > 0) {\r\n              for (var i = 0; i < messageResult.keyFields.length; i++) {\r\n                entityKeyDetails =\r\n                  entityKeyDetails +\r\n                  t(messageResult.keyFields[i]) +\r\n                  \" : \" +\r\n                  messageResult.keyValues[i] +\r\n                  \", \";\r\n              }\r\n            }\r\n            return (\r\n              <div>\r\n                <span\r\n                  style={{ color: messageResult.isSuccess ? \"#7eb338\" : \"#F15A4F\" }}\r\n                >\r\n                  {entityKeyDetails}\r\n                  {messageResult.isSuccess\r\n                    ? t(\"NotificationList_MessageType_Success\")\r\n                    : t(\"NotificationList_MessageType_Failure\") +\r\n                    \" : \" +\r\n                    t(\r\n                      getLocalizedMessage(messageResult.errorMessage),\r\n                      getLocalizedMessageParameters(\r\n                        messageResult.errorMessage\r\n                      )\r\n                    )}\r\n                </span>\r\n                <br></br>\r\n              </div>\r\n            );\r\n          })}\r\n        </Notification>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["ReportsComposite","Component","constructor","arguments","state","showReport","reportList","showReportParams","parameters","paramValues","paramOptions","disabledParams","listLoading","parameterLoading","validateParams","cloneValidationErrors","this","validationErrors","validationDef","Object","keys","forEach","key","undefined","Utilities","setState","values","every","value","handleShowReportClick","error","console","log","buildBreadcrumb","_jsx","TranslationConsumer","children","t","_jsxs","Breadcrumb","props","activeItem","parents","map","parentitem","Item","localizedKey","itemCode","handleReportClick","report","axios","RestAPIs","tokenDetails","tokenInfo","then","response","data","IsSuccess","params","EntityResult","Parameters","paramTables","ReportsData","cloneParamOptions","lodash","cloneDisabledParams","cloneParamValues","Culture","userDetails","UICulture","reportName","ReportName","UserName","i","length","ControlType","ParamName","Required","push","minLength","errorCode","DependentControls","tableName","TableName","fieldName","FieldName","list","optionsSet","Set","row","optionsValues","IsOnlyForEnterprise","unshift","text","def","isDate","IsWebPortalUser","enNodeOffset","TimeZoneOffset","Date","getTimezoneOffset","moment","add","toDate","expression","ErrorList","catch","err","handleBack","onDropDownChange","parameter","refreshControls","RefreshControls","refreshParameter","find","_ref","paramTable","dependentControls","j","dependantParam","_ref2","filter","obj","onFieldChange","date","onDateTextChange","buildReportParams","className","Select","fluid","placeholder","indicator","label","LocalisedParamName","disabled","options","onChange","reserveSpace","DatePicker","type","displayFormat","getCurrentDateFormat","showYearSelector","onTextChange","Input","toISOString","getChangedReportParameters","modParamValues","paramKey","utc","format","subtract","replace","handleReportPrintClick","paramKeys","reportParams","Entity","ReportParams","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","toast","ErrorBoundary","NotifyEvent","notificationMessage","autoClose","componentDidMount","ReportListCategories","reportServiceURI","renderModal","path","IsArchived","Constants","ReportDetails","handleModalClose","proxyServerHost","reportServiceHost","filePath","render","style","marginTop","Loader","LoadingPage","_Fragment","reportCategoryList","ReportListItems","Table","Header","HeaderCell","content","ReportCategory","Body","reportItem","Row","Cell","onClick","cursor","fontWeight","borderLeft","justifyContent","Button","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","position","toastClassName","connect","getUserDetails","TokenAuth","TMReportViewer","reportUrl","beforeXhrRequestSend","s","event","prevBeforeSend","settings","beforeSend","xhr","withCredentials","URL_DEBUG","indexOf","onreadystatechange","readyState","status","host","hostElement","setTimeout","splitter","querySelector","param","querySelectorAll","click","header","Authorization","initViewer","wjViewer","prototype","load","_this","promise","_checkReportController","httpRequest","_getReportInstancesUrl","method","v","responseText","_instanceId","id","_status","loaded","_outlinesLocation","outlinesLocation","_statusLocation","statusLocation","_pageSettingsLocation","pageSettingsLocation","_featuresLocation","featuresLocation","_parametersLocation","parametersLocation","resolve","reject","_getError","ReportViewer","requestHeaders","height","serviceUrl","initialized","beforeSendRequest","defaultProps","WjCore","useTranslation","Modal","padding","size","open","title","menu","marginLeft","getLocalizedMessage","split","delimiter","getLocalizedMessageParameters","messageOptions","splice","Notification","severity","hasIcon","messageResult","entityKeyDetails","color","getOptionsWithSelect","ddlOptions","selectOptionText","Array","isArray","option","language","window","navigator","userLanguage","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}