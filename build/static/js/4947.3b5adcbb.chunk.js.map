{"version":3,"file":"static/js/4947.3b5adcbb.chunk.js","mappings":"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","sources":["Components/UIBase/Details/PipelineReceiptManualEntryDetails.jsx","Components/Composite/Details/PipelineReceiptManualEntryDetailsComposite.jsx"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Input, Select, DatePicker, Tab, Accordion } from \"@scuf/common\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\n\r\nPipelineReceiptManualEntryDetails.propTypes = {\r\n  modPipelineSnapshotInfo: PropTypes.object.isRequired,\r\n  modPipelineTankTransactionSnapshotInfo: PropTypes.object.isRequired,\r\n  modPipelineMeterTransactionSnapshotInfo: PropTypes.object.isRequired,\r\n  receipt: PropTypes.object.isRequired,\r\n  tankValidationErrors: PropTypes.object.isRequired,\r\n  meterValidationErrors: PropTypes.object.isRequired,\r\n  modAttributeMetaDataList: PropTypes.array.isRequired,\r\n  onAttributeDataChange: PropTypes.func.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    quantityUOMOptions: PropTypes.array,\r\n    densityUOMS: PropTypes.array,\r\n    temperatureUOMs: PropTypes.array,\r\n    volumeUOMs: PropTypes.array,\r\n    pressureUOMs: PropTypes.array,\r\n    tankCodes: PropTypes.array,\r\n    meterCodes: PropTypes.array,\r\n  }).isRequired,\r\n  attributeValidationErrors: PropTypes.array.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onTabChange: PropTypes.func.isRequired,\r\n  activeIndex: PropTypes.number.isRequired,\r\n  isMeterRequired: PropTypes.bool.isRequired,\r\n  isTankRequired: PropTypes.bool.isRequired,\r\n  onDateTextChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport function PipelineReceiptManualEntryDetails({\r\n  modPipelineSnapshotInfo,\r\n  modPipelineTankTransactionSnapshotInfo,\r\n  modPipelineMeterTransactionSnapshotInfo,\r\n  tankValidationErrors,\r\n  meterValidationErrors,\r\n  listOptions,\r\n  modAttributeMetaDataList,\r\n  attributeValidationErrors,\r\n  onFieldChange,\r\n  onTabChange,\r\n  onAttributeDataChange,\r\n  activeIndex,\r\n  receipt,\r\n  isMeterRequired,\r\n  isTankRequired,\r\n  onDateTextChange,\r\n}) {\r\n  const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n    let attributeValidation = [];\r\n    if (attributeValidationErrors !== undefined)\r\n      attributeValidation = attributeValidationErrors.find(\r\n        (selectedAttribute) => {\r\n          return selectedAttribute.TerminalCode === terminal;\r\n        }\r\n      );\r\n    return attributeValidation.attributeValidationErrors;\r\n  };\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div>\r\n          <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={receipt.FinishedProductCode}\r\n                  label={t(\"PipelineDispatch_FinishedProductCode\")}\r\n                  disabled={true}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={receipt.PipelineReceiptCode}\r\n                  label={t(\"PipelineEntry_PipelineReceiptCode\")}\r\n                  disabled={true}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={receipt.PipelineHeaderCode}\r\n                  label={t(\"PipelineEntry_PipelineHeaderCode\")}\r\n                  disabled={true}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  value={listOptions.tankCodes}\r\n                  label={t(\"PipelineEntry_PlanedTank\")}\r\n                  options={Utilities.transferListtoOptions(\r\n                    listOptions.tankCodes\r\n                  )}\r\n                  disabled={true}\r\n                  multiple={true}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  value={listOptions.meterCodes}\r\n                  label={t(\"PipelineEntry_PlanedMeter\")}\r\n                  options={Utilities.transferListtoOptions(\r\n                    listOptions.meterCodes\r\n                  )}\r\n                  disabled={true}\r\n                  multiple={true}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <DatePicker\r\n                  fluid\r\n                  value={\r\n                    new Date(\r\n                      modPipelineTankTransactionSnapshotInfo.ScanStartTime\r\n                    )\r\n                  }\r\n                  label={t(\"PipelineEntry_CaptureStartTime\")}\r\n                  type=\"datetime\"\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  disablePast={false}\r\n                  disableFuture={true}\r\n                  indicator=\"required\"\r\n                  onChange={(data) =>\r\n                    onFieldChange(\"Tank\", \"ScanStartTime\", data)\r\n                  }\r\n                  onTextChange={(value, error) => {\r\n                    onDateTextChange(\"ScanStartTime\", value, error);\r\n                  }}\r\n                  error={t(tankValidationErrors.ScanStartTime)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <DatePicker\r\n                  fluid\r\n                  value={\r\n                    new Date(modPipelineTankTransactionSnapshotInfo.ScanEndTime)\r\n                  }\r\n                  label={t(\"PipelineEntry_CaptureEndTime\")}\r\n                  type=\"datetime\"\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  disablePast={false}\r\n                  disableFuture={true}\r\n                  indicator=\"required\"\r\n                  onChange={(data) =>\r\n                    onFieldChange(\"Tank\", \"ScanEndTime\", data)\r\n                  }\r\n                  onTextChange={(value, error) => {\r\n                    onDateTextChange(\"ScanEndTime\", value, error);\r\n                  }}\r\n                  error={t(tankValidationErrors.ScanEndTime)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modPipelineSnapshotInfo.Remarks}\r\n                  label={t(\"LoadingDetailsEntry_Remarks\")}\r\n                  onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                  reserveSpace={false}\r\n                  error={t(tankValidationErrors.Remarks)}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {modAttributeMetaDataList.length > 0\r\n              ? modAttributeMetaDataList.map((attire) => (\r\n                  <ErrorBoundary>\r\n                    <Accordion>\r\n                      <Accordion.Content\r\n                        className=\"attributeAccordian\"\r\n                        title={t(\"Attributes_Header\")}\r\n                      >\r\n                        <AttributeDetails\r\n                          selectedAttributeList={attire.attributeMetaDataList}\r\n                          handleCellDataEdit={onAttributeDataChange}\r\n                          attributeValidationErrors={handleValidationErrorFilter(\r\n                            attributeValidationErrors,\r\n                            attire.TerminalCode\r\n                          )}\r\n                        ></AttributeDetails>\r\n                      </Accordion.Content>\r\n                    </Accordion>\r\n                  </ErrorBoundary>\r\n                ))\r\n              : null}\r\n\r\n            <Tab\r\n              activeIndex={activeIndex}\r\n              onTabChange={(index) => onTabChange(index)}\r\n            >\r\n              <Tab.Pane title={t(\"Pipeline_Header_meter_Level_Trasaction\")}>\r\n                <div className=\"row\">\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      placeholder={t(\"Common_Select\")}\r\n                      label={t(\"PipelineEntry_PipelineMeterCode\")}\r\n                      value={modPipelineMeterTransactionSnapshotInfo.MeterCode}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Meter\", \"MeterCode\", data)\r\n                      }\r\n                      indicator={isMeterRequired ? \"required\" : null}\r\n                      error={t(meterValidationErrors.MeterCode)}\r\n                      options={Utilities.transferListtoOptions(\r\n                        listOptions.meterCodes\r\n                      )}\r\n                      reserveSpace={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineMeterTransactionSnapshotInfo.GrossStartTotalizer\r\n                      }\r\n                      label={t(\"PipelineMeter_StartGrossTotalizer\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Meter\", \"GrossStartTotalizer\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(meterValidationErrors.GrossStartTotalizer)}\r\n                      indicator={\r\n                        modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineMeterTransactionSnapshotInfo.NetStartTotalizer\r\n                      }\r\n                      label={t(\"PipelineMeter_StartNetTotalizer\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Meter\", \"NetStartTotalizer\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(meterValidationErrors.NetStartTotalizer)}\r\n                      indicator={\r\n                        modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineMeterTransactionSnapshotInfo.GrossEndTotalizer\r\n                      }\r\n                      label={t(\"PipelineMeter_EndGrossTotalizer\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Meter\", \"GrossEndTotalizer\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(meterValidationErrors.GrossEndTotalizer)}\r\n                      indicator={\r\n                        modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineMeterTransactionSnapshotInfo.NetEndTotalizer\r\n                      }\r\n                      label={t(\"TankMeter_EndNetTotalizer\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Meter\", \"NetEndTotalizer\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(meterValidationErrors.NetEndTotalizer)}\r\n                      indicator={\r\n                        modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineMeterTransactionSnapshotInfo.Temperature\r\n                      }\r\n                      label={t(\"LoadingDetailsEntry_Temperature\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Meter\", \"Temperature\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(meterValidationErrors.Temperature)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={\r\n                        modPipelineMeterTransactionSnapshotInfo.TemperatureUOM\r\n                      }\r\n                      options={listOptions.temperatureUOMs}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"MarineDispatchManualEntry_TemperatureUOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Meter\", \"TemperatureUOM\", data)\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(meterValidationErrors.TemperatureUOM)}\r\n                      indicator={\r\n                        modPipelineMeterTransactionSnapshotInfo.Temperature !==\r\n                        \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modPipelineMeterTransactionSnapshotInfo.Density}\r\n                      label={t(\"Density\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Meter\", \"Density\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(meterValidationErrors.Density)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modPipelineMeterTransactionSnapshotInfo.DensityUOM}\r\n                      options={listOptions.densityUOMS}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"BaseProductInfox_UOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Meter\", \"DensityUOM\", data)\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(meterValidationErrors.DensityUOM)}\r\n                      indicator={\r\n                        modPipelineMeterTransactionSnapshotInfo.Density !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Tab.Pane>\r\n              <Tab.Pane title={t(\"Pipeline_Tank_Level_Trasaction\")}>\r\n                <div className=\"row\">\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      placeholder={t(\"Common_Select\")}\r\n                      label={t(\"AtgConfigure_TankCode\")}\r\n                      value={modPipelineTankTransactionSnapshotInfo.TankCode}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"TankCode\", data)\r\n                      }\r\n                      indicator={isTankRequired ? \"required\" : null}\r\n                      error={t(tankValidationErrors.TankCode)}\r\n                      options={Utilities.transferListtoOptions(\r\n                        listOptions.tankCodes\r\n                      )}\r\n                      reserveSpace={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.GrossMass}\r\n                      label={t(\"TankInfo_GrossMass\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"GrossMass\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.GrossMass)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.MassUOM}\r\n                      options={listOptions.quantityUOMOptions}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"TankEODEntry_MassQuantityUOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"MassUOM\", data)\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(tankValidationErrors.MassUOM)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.GrossMass !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineTankTransactionSnapshotInfo.GrossStartVolume\r\n                      }\r\n                      label={t(\"Gross_start_Volume\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"GrossStartVolume\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.GrossStartVolume)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.TankCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineTankTransactionSnapshotInfo.NetStartVolume\r\n                      }\r\n                      label={t(\"Net_start_Volume\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"NetStartVolume\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.NetStartVolume)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.TankCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineTankTransactionSnapshotInfo.GrossEndVolume\r\n                      }\r\n                      label={t(\"Gross_end_Volume\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"GrossEndVolume\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.GrossEndVolume)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.TankCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineTankTransactionSnapshotInfo.NetEndVolume\r\n                      }\r\n                      label={t(\"Net_end_Volume\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"NetEndVolume\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.NetEndVolume)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.TankCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.VolumeUOM}\r\n                      options={listOptions.volumeUOMs}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"TankTransaction_VolumeUom\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"VolumeUOM\", data)\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(tankValidationErrors.VolumeUOM)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.TankCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.Temperature}\r\n                      label={t(\"LoadingDetailsEntry_Temperature\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"Temperature\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.Temperature)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={\r\n                        modPipelineTankTransactionSnapshotInfo.TemperatureUOM\r\n                      }\r\n                      options={listOptions.temperatureUOMs}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"MarineDispatchManualEntry_TemperatureUOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"TemperatureUOM\", data)\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(tankValidationErrors.TemperatureUOM)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.Temperature !==\r\n                        \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.Density}\r\n                      label={t(\"Density\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"Density\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.Density)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.DensityUOM}\r\n                      options={listOptions.densityUOMS}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"BaseProductInfox_UOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"DensityUOM\", data)\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(tankValidationErrors.DensityUOM)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.Density !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.Pressure}\r\n                      label={t(\"LoadingDetailsEntry_Pressure\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"Pressure\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.Pressure)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.PressureUOM}\r\n                      options={listOptions.pressureUOMs}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"BCU_PressureUOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Tank\", \"PressureUOM\", data)\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(tankValidationErrors.PressureUOM)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.Pressure !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Tab.Pane>\r\n            </Tab>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport axios from \"axios\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { PipelineReceiptManualEntryDetails } from \"../../UIBase/Details/PipelineReceiptManualEntryDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport {\r\n  emptyPipelineCommonTransactionSnapshotInfo,\r\n  emptyPipelineSnapshotInfo,\r\n} from \"../../../JS/DefaultEntities\";\r\nimport lodash from \"lodash\";\r\nimport { PipelineDispatchManualEntryValidationDef } from \"../../../JS/ValidationDef\";\r\nimport { pipelineTransactionsAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport { functionGroups,fnPipelineReceiptManualEntry} from \"../../../JS/FunctionGroups\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass PipelineReceiptManualEntryDetailsComposite extends Component {\r\n  state = {\r\n    modPipelineSnapshotInfo: lodash.cloneDeep(emptyPipelineSnapshotInfo),\r\n    modPipelineTankTransactionSnapshotInfo: lodash.cloneDeep(\r\n      emptyPipelineCommonTransactionSnapshotInfo\r\n    ),\r\n    modPipelineMeterTransactionSnapshotInfo: lodash.cloneDeep(\r\n      emptyPipelineCommonTransactionSnapshotInfo\r\n    ),\r\n    quantityUOMOptions: [],\r\n    densityUOMS: [],\r\n    temperatureUOMs: [],\r\n    volumeUOMs: [],\r\n    pressureUOMs: [],\r\n    tankCodes: [],\r\n    meterCodes: [],\r\n    tankValidationErrors: Utilities.getInitialValidationErrors(\r\n      PipelineDispatchManualEntryValidationDef\r\n    ),\r\n    meterValidationErrors: Utilities.getInitialValidationErrors(\r\n      PipelineDispatchManualEntryValidationDef\r\n    ),\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    activeIndex: 0,\r\n    manualEntrySaveEnable: true,\r\n    showAuthenticationLayout: false,\r\n    tempPipelineSnapshotInfo: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.GetUOMList();\r\n      this.getAttributes();\r\n      this.setDefaultValues();\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptManualEntryDetailsComposite : Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  setDefaultValues() {\r\n    try {\r\n      let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n        this.state.modPipelineTankTransactionSnapshotInfo\r\n      );\r\n      let modPipelineMeterTransactionSnapshotInfo = lodash.cloneDeep(\r\n        this.state.modPipelineMeterTransactionSnapshotInfo\r\n      );\r\n      modPipelineTankTransactionSnapshotInfo.VolumeUOM =\r\n        this.props.receipt.QuantityUOM;\r\n      modPipelineTankTransactionSnapshotInfo.ScanStartTime = new Date();\r\n      modPipelineTankTransactionSnapshotInfo.ScanEndTime = new Date();\r\n      modPipelineMeterTransactionSnapshotInfo.TemperatureUOM =\r\n        this.props.userDetails.EntityResult.PageAttibutes.DefaultUOMS.TemperatureUOM;\r\n      modPipelineMeterTransactionSnapshotInfo.DensityUOM =\r\n        this.props.userDetails.EntityResult.PageAttibutes.DefaultUOMS.DensityUOM;\r\n\r\n      this.setState(\r\n        {\r\n          modPipelineTankTransactionSnapshotInfo,\r\n          modPipelineMeterTransactionSnapshotInfo,\r\n        },\r\n        () => {\r\n          this.getmeterCodes();\r\n          this.getTankCodes();\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptManualEntryDetailsComposite : Error occured while setting default values\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTankDetails(modPipelineTankTransactionSnapshotInfo) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.tankCode,\r\n          value: modPipelineTankTransactionSnapshotInfo.TankCode,\r\n        },\r\n\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value:\r\n            this.props.receipt.TerminalCodes !== null &&\r\n            this.props.receipt.TerminalCodes.length > 0\r\n              ? this.props.receipt.TerminalCodes[0]\r\n              : null,\r\n        },\r\n      ];\r\n      var obj = {\r\n        keyDataCode: KeyCodes.tankCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetTank,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          if (result.IsSuccess) {\r\n            let tank = result.EntityResult;\r\n            modPipelineTankTransactionSnapshotInfo.PressureUOM =\r\n              tank.PressureUOM;\r\n            modPipelineTankTransactionSnapshotInfo.MassUOM = tank.GrossMassUOM;\r\n            modPipelineTankTransactionSnapshotInfo.DensityUOM = tank.DensityUOM;\r\n            modPipelineTankTransactionSnapshotInfo.TemperatureUOM =\r\n              tank.TemperatureUOM;\r\n            this.setState({ modPipelineTankTransactionSnapshotInfo });\r\n          } else {\r\n            this.setState({ modPipelineTankTransactionSnapshotInfo });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"PipelineReceiptManualEntryDetailsComposite : Error while getting Tank Details\",\r\n            error\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptManualEntryDetailsComposite : Error in getting Tank Details\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getmeterCodes() {\r\n    try {\r\n      let receipt = lodash.cloneDeep(this.props.receipt);\r\n      this.setState({ meterCodes: [receipt.PipelineHeaderMeterCode] }, () => {\r\n        if (this.props.isMeterRequired && this.state.meterCodes.length === 1) {\r\n          let modPipelineMeterTransactionSnapshotInfo = lodash.cloneDeep(\r\n            this.state.modPipelineMeterTransactionSnapshotInfo\r\n          );\r\n\r\n          modPipelineMeterTransactionSnapshotInfo.MeterCode =\r\n            this.state.meterCodes[0];\r\n\r\n          this.setState({ modPipelineMeterTransactionSnapshotInfo });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptManualEntryDetailsComposite : Error in getting meter codes\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTankCodes() {\r\n    try {\r\n      let fpCode =\r\n        this.props.receipt.FinishedProductCode === null ||\r\n        this.props.receipt.FinishedProductCode === undefined\r\n          ? \"\"\r\n          : this.props.receipt.FinishedProductCode;\r\n      let shCode = this.props.selectedShareholder;\r\n\r\n      axios(\r\n        RestAPIs.GetDispatchPlannedTanks +\r\n          \"?shCode=\" +\r\n          shCode +\r\n          \"&finishedProductCode=\" +\r\n          fpCode,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult !== null) {\r\n              let tankCodes = [];\r\n              tankCodes = result.EntityResult;\r\n              this.setState({ tankCodes }, () => {\r\n                if (this.props.isTankRequired && tankCodes.length === 1) {\r\n                  let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n                    this.state.modPipelineTankTransactionSnapshotInfo\r\n                  );\r\n\r\n                  modPipelineTankTransactionSnapshotInfo.TankCode =\r\n                    tankCodes[0];\r\n\r\n                  this.getTankDetails(modPipelineTankTransactionSnapshotInfo);\r\n                }\r\n              });\r\n            }\r\n          } else {\r\n            console.log(\r\n              \"PipelineReceiptManualEntryDetailsComposite: Error in getTankCodes:\",\r\n              result.ErrorList\r\n            );\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"PipelineReceiptManualEntryDetailsComposite: Error while getting getTankCodes:\",\r\n            error\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptManualEntryDetailsComposite : error in getting tank codes\"\r\n      );\r\n    }\r\n  }\r\n\r\n  addUnLoadingDetails = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempPipelineSnapshotInfo = lodash.cloneDeep(this.state.tempPipelineSnapshotInfo);\r\n\r\n      this.CreateManualEntry(tempPipelineSnapshotInfo);\r\n\r\n    } catch (error) {\r\n      console.log(\"Pipeline Receipt Manual Entry Composite : Error in addUnLoadingDetails\");\r\n    }\r\n  };\r\n  \r\n  handleSave = () => {\r\n    try {\r\n     // this.setState({ manualEntrySaveEnable: false });\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      if (this.validateSave(attributeList)) {\r\n        let pipelineSnapShotInfo = this.fillDetails(attributeList);\r\n        \r\n        let showAuthenticationLayout =this.props.userDetails.EntityResult.IsWebPortalUser !== true? true: false;\r\n        \r\n        let tempPipelineSnapshotInfo = lodash.cloneDeep(pipelineSnapShotInfo);\r\n        this.setState({ showAuthenticationLayout, tempPipelineSnapshotInfo }, () => {\r\n          if (showAuthenticationLayout === false) {\r\n            this.addUnLoadingDetails();\r\n          }\r\n      });\r\n        \r\n      } else this.setState({ manualEntrySaveEnable: true });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptManualEntryDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  CreateManualEntry(request) {\r\n    this.handleAuthenticationClose();\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shareholderCode,\r\n        value: this.props.selectedShareholder,\r\n      },\r\n      {\r\n        key: KeyCodes.receiptCode,\r\n        value: this.props.receipt.PipelineReceiptCode,\r\n      },\r\n    ];\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"PipelineReceipt_ManualEntryCreateStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"PipelineReceiptDetails_ReceiptCode\"],\r\n          keyValues: [this.props.receipt.PipelineReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.pipelineReceiptCode,\r\n      KeyCodes: keyCode,\r\n      Entity: request,\r\n    };\r\n    axios(\r\n      RestAPIs.CreatePipelineReceiptManualEntry,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              manualEntrySaveEnable: true,\r\n              modPipelineMeterTransactionSnapshotInfo: lodash.cloneDeep(\r\n                emptyPipelineCommonTransactionSnapshotInfo\r\n              ),\r\n              modPipelineTankTransactionSnapshotInfo: lodash.cloneDeep(\r\n                emptyPipelineCommonTransactionSnapshotInfo\r\n              ),\r\n            },\r\n            () => {\r\n              this.setDefaultValues();\r\n              var attributeMetaDataList = lodash.cloneDeep(\r\n                this.state.attributeMetaDataList\r\n              );\r\n              this.formAttributesForUI(attributeMetaDataList);\r\n            }\r\n          );\r\n        } else {\r\n          notification.message = \"MarineDispatchManualEntry_SaveFailure\";\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState(\r\n            {\r\n              manualEntrySaveEnable: true,\r\n              modPipelineMeterTransactionSnapshotInfo: lodash.cloneDeep(\r\n                emptyPipelineCommonTransactionSnapshotInfo\r\n              ),\r\n              modPipelineTankTransactionSnapshotInfo: lodash.cloneDeep(\r\n                emptyPipelineCommonTransactionSnapshotInfo\r\n              ),\r\n            },\r\n            () => {\r\n              this.setDefaultValues();\r\n              var attributeMetaDataList = lodash.cloneDeep(\r\n                this.state.attributeMetaDataList\r\n              );\r\n              this.formAttributesForUI(attributeMetaDataList);\r\n            }\r\n          );\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        console.log(\r\n          \"PipelineReceiptManualEntryDetailsComposite: Error while creating Manual Entry:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  fillDetails(attributeList) {\r\n    let request = {\r\n      pipelineSnapshotInfoList: [],\r\n      commonTransactionSnapshotInfoList: [],\r\n    };\r\n    try {\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      let Attributes = Utilities.fillAttributeDetails(attributeList);\r\n      let modPipelineSnapshotInfo = lodash.cloneDeep(\r\n        this.state.modPipelineSnapshotInfo\r\n      );\r\n      let pipelineSnapShotInfoList = [];\r\n      modPipelineSnapshotInfo.PlanCode =\r\n        this.props.receipt.PipelineReceiptCode === null ||\r\n        this.props.receipt.PipelineReceiptCode === \"\"\r\n          ? \"\"\r\n          : this.props.receipt.PipelineReceiptCode;\r\n      modPipelineSnapshotInfo.PipelineHeaderCode =\r\n        this.props.receipt.PipelineHeaderCode === null ||\r\n        this.props.receipt.PipelineHeaderCode === \"\"\r\n          ? \"\"\r\n          : this.props.receipt.PipelineHeaderCode;\r\n      modPipelineSnapshotInfo.TransactionType = Constants.PipeLineType.RECEIPT;\r\n\r\n      modPipelineSnapshotInfo.ShareholderCode =\r\n        this.props.selectedShareholder === null ||\r\n        this.props.selectedShareholder === \"\"\r\n          ? \"\"\r\n          : this.props.selectedShareholder;\r\n\r\n      pipelineSnapShotInfoList.push(modPipelineSnapshotInfo);\r\n\r\n      let commonTransactionSnapshotInfoList = [];\r\n      let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n        this.state.modPipelineTankTransactionSnapshotInfo\r\n      );\r\n      //Fill Tank Details\r\n      if (\r\n        modPipelineTankTransactionSnapshotInfo.TankCode !== \"\" &&\r\n        modPipelineTankTransactionSnapshotInfo.TankCode !== null\r\n      ) {\r\n        // request.tankCode = modPipelineTankTransactionSnapshotInfo.TankCode;\r\n\r\n        let commonTransactionTankStartSnapShot = lodash.cloneDeep(\r\n          emptyPipelineCommonTransactionSnapshotInfo\r\n        );\r\n        let commonTransactionTankEndSnapShot = lodash.cloneDeep(\r\n          emptyPipelineCommonTransactionSnapshotInfo\r\n        );\r\n\r\n        commonTransactionTankStartSnapShot.TransactionType =\r\n          Constants.PipeLineType.RECEIPT;\r\n        commonTransactionTankEndSnapShot.TransactionType =\r\n          Constants.PipeLineType.RECEIPT;\r\n\r\n        commonTransactionTankStartSnapShot.ScanTime =\r\n          modPipelineTankTransactionSnapshotInfo.ScanStartTime;\r\n        commonTransactionTankEndSnapShot.ScanTime =\r\n          modPipelineTankTransactionSnapshotInfo.ScanEndTime;\r\n\r\n        if (\r\n          modPipelineSnapshotInfo.PipelineHeaderCode !== null &&\r\n          modPipelineSnapshotInfo.PipelineHeaderCode !== \"\"\r\n        ) {\r\n          commonTransactionTankStartSnapShot.PipelineHeaderCode =\r\n            modPipelineSnapshotInfo.PipelineHeaderCode;\r\n          commonTransactionTankEndSnapShot.PipelineHeaderCode =\r\n            modPipelineSnapshotInfo.PipelineHeaderCode;\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.TankCode !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.TankCode !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.TankCode =\r\n            modPipelineTankTransactionSnapshotInfo.TankCode;\r\n          commonTransactionTankEndSnapShot.TankCode =\r\n            modPipelineTankTransactionSnapshotInfo.TankCode;\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.MeterCode !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.MeterCode !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.MeterCode =\r\n            modPipelineTankTransactionSnapshotInfo.MeterCode;\r\n          commonTransactionTankEndSnapShot.MeterCode =\r\n            modPipelineTankTransactionSnapshotInfo.MeterCode;\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.FlowRate !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.FlowRate !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.FlowRate =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.FlowRate\r\n            );\r\n          commonTransactionTankEndSnapShot.FlowRate =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.FlowRate\r\n            );\r\n        }\r\n\r\n        commonTransactionTankStartSnapShot.FlowRateUOM =\r\n          modPipelineTankTransactionSnapshotInfo.FlowRateUOM;\r\n        commonTransactionTankEndSnapShot.FlowRateUOM =\r\n          modPipelineTankTransactionSnapshotInfo.FlowRateUOM;\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.GrossStartTotalizer !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.GrossStartTotalizer !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.GrossTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.GrossStartTotalizer\r\n            );\r\n          commonTransactionTankEndSnapShot.GrossTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.GrossEndTotalizer\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.NetStartTotalizer !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.NetStartTotalizer !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.NetTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.NetStartTotalizer\r\n            );\r\n          commonTransactionTankEndSnapShot.NetTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.NetEndTotalizer\r\n            );\r\n        }\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.NetEndTotalizer !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.NetEndTotalizer !== null\r\n        ) {\r\n          commonTransactionTankEndSnapShot.NetTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.NetEndTotalizer\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.GrossStartVolume !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.GrossStartVolume !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.GrossVolume =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.GrossStartVolume\r\n            );\r\n        }\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.GrossEndVolume !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.GrossEndVolume !== null\r\n        ) {\r\n          commonTransactionTankEndSnapShot.GrossVolume =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.GrossEndVolume\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.NetStartVolume !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.NetStartVolume !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.NetVolume =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.NetStartVolume\r\n            );\r\n        }\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.NetEndVolume !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.NetEndVolume !== null\r\n        ) {\r\n          commonTransactionTankEndSnapShot.NetVolume =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.NetEndVolume\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.Temperature !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.Temperature !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.Temperature =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.Temperature\r\n            );\r\n          commonTransactionTankEndSnapShot.Temperature =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.Temperature\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.TemperatureUOM !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.TemperatureUOM !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.TemperatureUOM =\r\n            modPipelineTankTransactionSnapshotInfo.TemperatureUOM;\r\n          commonTransactionTankEndSnapShot.TemperatureUOM =\r\n            modPipelineTankTransactionSnapshotInfo.TemperatureUOM;\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.Density !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.Density !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.Density =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.Density\r\n            );\r\n          commonTransactionTankEndSnapShot.Density =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.Density\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.DensityUOM !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.DensityUOM !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.DensityUOM =\r\n            modPipelineTankTransactionSnapshotInfo.DensityUOM;\r\n          commonTransactionTankEndSnapShot.DensityUOM =\r\n            modPipelineTankTransactionSnapshotInfo.DensityUOM;\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.GrossMass !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.GrossMass !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.GrossMass =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.GrossMass\r\n            );\r\n          commonTransactionTankEndSnapShot.GrossMass =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.GrossMass\r\n            );\r\n\r\n          commonTransactionTankStartSnapShot.MassUOM =\r\n            modPipelineTankTransactionSnapshotInfo.MassUOM;\r\n          commonTransactionTankEndSnapShot.MassUOM =\r\n            modPipelineTankTransactionSnapshotInfo.MassUOM;\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.Pressure !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.Pressure !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.Pressure =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.Pressure\r\n            );\r\n          commonTransactionTankEndSnapShot.Pressure =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.Pressure\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.PressureUOM !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.PressureUOM !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.PressureUOM =\r\n            modPipelineTankTransactionSnapshotInfo.PressureUOM;\r\n          commonTransactionTankEndSnapShot.PressureUOM =\r\n            modPipelineTankTransactionSnapshotInfo.PressureUOM;\r\n        }\r\n        commonTransactionTankStartSnapShot.IsManualEntry = true;\r\n        commonTransactionTankEndSnapShot.IsManualEntry = true;\r\n\r\n        commonTransactionTankStartSnapShot.LastUpdatedBy =\r\n          this.props.userDetails.EntityResult.Firstname +\r\n          \" \" +\r\n          this.props.userDetails.EntityResult.LastName;\r\n        commonTransactionTankEndSnapShot.LastUpdatedBy =\r\n          this.props.userDetails.EntityResult.Firstname +\r\n          \" \" +\r\n          this.props.userDetails.EntityResult.LastName;\r\n\r\n        //Attributes : TODO\r\n        commonTransactionTankStartSnapShot.Attributes = Attributes;\r\n        commonTransactionTankEndSnapShot.Attributes = Attributes;\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.VolumeUOM !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.VolumeUOM !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.IsStart = true;\r\n          commonTransactionTankStartSnapShot.IsEnd = false;\r\n          commonTransactionTankEndSnapShot.IsStart = false;\r\n          commonTransactionTankEndSnapShot.IsEnd = true;\r\n\r\n          commonTransactionTankStartSnapShot.VolumeUOM =\r\n            modPipelineTankTransactionSnapshotInfo.VolumeUOM;\r\n          commonTransactionTankEndSnapShot.VolumeUOM =\r\n            modPipelineTankTransactionSnapshotInfo.VolumeUOM;\r\n        }\r\n\r\n        commonTransactionSnapshotInfoList.push(\r\n          commonTransactionTankStartSnapShot\r\n        );\r\n        commonTransactionSnapshotInfoList.push(\r\n          commonTransactionTankEndSnapShot\r\n        );\r\n      }\r\n\r\n      //Fill Meter Details\r\n      let modPipelineMeterTransactionSnapshotInfo = lodash.cloneDeep(\r\n        this.state.modPipelineMeterTransactionSnapshotInfo\r\n      );\r\n\r\n      if (\r\n        modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\" &&\r\n        modPipelineMeterTransactionSnapshotInfo.MeterCode !== undefined\r\n      ) {\r\n        let commonTransactionMeterStartSnapshotInfo = lodash.cloneDeep(\r\n          emptyPipelineCommonTransactionSnapshotInfo\r\n        );\r\n        let commonTransactionMeterEndSnapshotInfo = lodash.cloneDeep(\r\n          emptyPipelineCommonTransactionSnapshotInfo\r\n        );\r\n\r\n        commonTransactionMeterStartSnapshotInfo.TransactionType =\r\n          Constants.PipeLineType.RECEIPT;\r\n        commonTransactionMeterEndSnapshotInfo.TransactionType =\r\n          Constants.PipeLineType.RECEIPT;\r\n\r\n        if (\r\n          modPipelineSnapshotInfo.PipelineHeaderCode !== null &&\r\n          modPipelineSnapshotInfo.PipelineHeaderCode !== \"\"\r\n        ) {\r\n          commonTransactionMeterStartSnapshotInfo.PipelineHeaderCode =\r\n            modPipelineSnapshotInfo.PipelineHeaderCode;\r\n          commonTransactionMeterEndSnapshotInfo.PipelineHeaderCode =\r\n            modPipelineSnapshotInfo.PipelineHeaderCode;\r\n        } else {\r\n          commonTransactionMeterStartSnapshotInfo.PipelineHeaderCode = \"\";\r\n          commonTransactionMeterEndSnapshotInfo.PipelineHeaderCode = \"\";\r\n        }\r\n\r\n        if (\r\n          modPipelineMeterTransactionSnapshotInfo.Density !== \"\" &&\r\n          modPipelineMeterTransactionSnapshotInfo.Density !== null\r\n        ) {\r\n          commonTransactionMeterStartSnapshotInfo.Density =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.Density\r\n            );\r\n          commonTransactionMeterEndSnapshotInfo.Density =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.Density\r\n            );\r\n        } else {\r\n          commonTransactionMeterStartSnapshotInfo.Density = 0;\r\n          commonTransactionMeterEndSnapshotInfo.Density = 0;\r\n        }\r\n\r\n        commonTransactionMeterStartSnapshotInfo.DensityUOM =\r\n          modPipelineMeterTransactionSnapshotInfo.DensityUOM;\r\n        commonTransactionMeterEndSnapshotInfo.DensityUOM =\r\n          modPipelineMeterTransactionSnapshotInfo.DensityUOM;\r\n\r\n        commonTransactionMeterStartSnapshotInfo.IsManualEntry = true;\r\n        commonTransactionMeterEndSnapshotInfo.IsManualEntry = true;\r\n\r\n        if (\r\n          modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\" &&\r\n          modPipelineMeterTransactionSnapshotInfo.MeterCode !== null\r\n        ) {\r\n          commonTransactionMeterStartSnapshotInfo.MeterCode =\r\n            modPipelineMeterTransactionSnapshotInfo.MeterCode;\r\n          commonTransactionMeterEndSnapshotInfo.MeterCode =\r\n            modPipelineMeterTransactionSnapshotInfo.MeterCode;\r\n        }\r\n\r\n        if (\r\n          modPipelineMeterTransactionSnapshotInfo.Temperature !== \"\" &&\r\n          modPipelineMeterTransactionSnapshotInfo.Temperature !== null\r\n        ) {\r\n          commonTransactionMeterStartSnapshotInfo.Temperature =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.Temperature\r\n            );\r\n          commonTransactionMeterEndSnapshotInfo.Temperature =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.Temperature\r\n            );\r\n        }\r\n\r\n        commonTransactionMeterStartSnapshotInfo.TemperatureUOM =\r\n          modPipelineMeterTransactionSnapshotInfo.TemperatureUOM;\r\n        commonTransactionMeterEndSnapshotInfo.TemperatureUOM =\r\n          modPipelineMeterTransactionSnapshotInfo.TemperatureUOM;\r\n\r\n        if (\r\n          modPipelineMeterTransactionSnapshotInfo.GrossStartTotalizer !== \"\" &&\r\n          modPipelineMeterTransactionSnapshotInfo.GrossEndTotalizer !== null\r\n        ) {\r\n          commonTransactionMeterStartSnapshotInfo.GrossTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.GrossStartTotalizer\r\n            );\r\n          commonTransactionMeterEndSnapshotInfo.GrossTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.GrossEndTotalizer\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineMeterTransactionSnapshotInfo.NetStartTotalizer !== \"\" &&\r\n          modPipelineMeterTransactionSnapshotInfo.NetEndTotalizer !== null\r\n        ) {\r\n          commonTransactionMeterStartSnapshotInfo.NetTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.NetStartTotalizer\r\n            );\r\n          commonTransactionMeterEndSnapshotInfo.NetTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.NetEndTotalizer\r\n            );\r\n        }\r\n\r\n        commonTransactionMeterStartSnapshotInfo.ScanTime =\r\n          modPipelineTankTransactionSnapshotInfo.ScanStartTime;\r\n        commonTransactionMeterEndSnapshotInfo.ScanTime =\r\n          modPipelineTankTransactionSnapshotInfo.ScanEndTime;\r\n\r\n        commonTransactionMeterStartSnapshotInfo.LastUpdatedBy =\r\n          this.props.userDetails.EntityResult.Firstname +\r\n          \" \" +\r\n          this.props.userDetails.EntityResult.LastName;\r\n        commonTransactionMeterEndSnapshotInfo.LastUpdatedBy =\r\n          this.props.userDetails.EntityResult.Firstname +\r\n          \" \" +\r\n          this.props.userDetails.EntityResult.LastName;\r\n\r\n        commonTransactionMeterStartSnapshotInfo.Attributes = Attributes;\r\n        commonTransactionMeterEndSnapshotInfo.Attributes = Attributes;\r\n\r\n        commonTransactionMeterStartSnapshotInfo.IsStart = true;\r\n        commonTransactionMeterStartSnapshotInfo.IsEnd = false;\r\n\r\n        commonTransactionMeterEndSnapshotInfo.IsStart = false;\r\n        commonTransactionMeterEndSnapshotInfo.IsEnd = true;\r\n\r\n        commonTransactionSnapshotInfoList.push(\r\n          commonTransactionMeterStartSnapshotInfo\r\n        );\r\n        commonTransactionSnapshotInfoList.push(\r\n          commonTransactionMeterEndSnapshotInfo\r\n        );\r\n      }\r\n\r\n      request.pipelineSnapshotInfoList = pipelineSnapShotInfoList;\r\n      request.commonTransactionSnapshotInfoList =\r\n        commonTransactionSnapshotInfoList;\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptManualEntryDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n    return request;\r\n  }\r\n\r\n  validateSave(attributeList) {\r\n    const tankValidationErrors = { ...this.state.tankValidationErrors };\r\n    const meterValidationErrors = { ...this.state.meterValidationErrors };\r\n\r\n    let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n      this.state.modPipelineTankTransactionSnapshotInfo\r\n    );\r\n    let modPipelineMeterTransactionSnapshotInfo = lodash.cloneDeep(\r\n      this.state.modPipelineMeterTransactionSnapshotInfo\r\n    );\r\n\r\n    Object.keys(PipelineDispatchManualEntryValidationDef).forEach(function (\r\n      key\r\n    ) {\r\n      if (modPipelineTankTransactionSnapshotInfo[key] !== undefined)\r\n        tankValidationErrors[key] = Utilities.validateField(\r\n          PipelineDispatchManualEntryValidationDef[key],\r\n          modPipelineTankTransactionSnapshotInfo[key]\r\n        );\r\n    });\r\n\r\n    Object.keys(PipelineDispatchManualEntryValidationDef).forEach(function (\r\n      key\r\n    ) {\r\n      if (modPipelineMeterTransactionSnapshotInfo[key] !== undefined)\r\n        meterValidationErrors[key] = Utilities.validateField(\r\n          PipelineDispatchManualEntryValidationDef[key],\r\n          modPipelineMeterTransactionSnapshotInfo[key]\r\n        );\r\n    });\r\n    //Date validation\r\n    if (\r\n      modPipelineTankTransactionSnapshotInfo.ScanStartTime >=\r\n      modPipelineTankTransactionSnapshotInfo.ScanEndTime\r\n    ) {\r\n      tankValidationErrors[\"ScanStartTime\"] =\r\n        \"MarineDispatchManualEntry_ErrorLoadTime\";\r\n    }\r\n    if (\r\n      (modPipelineMeterTransactionSnapshotInfo.MeterCode === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.MeterCode === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.MeterCode === undefined) &&\r\n      this.props.isMeterRequired\r\n    )\r\n      meterValidationErrors[\"MeterCode\"] =\r\n        \"PipelineReceiptDetails_MandatoryHeaderMeterCode\";\r\n\r\n    if (\r\n      modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\" &&\r\n      modPipelineMeterTransactionSnapshotInfo.MeterCode !== null &&\r\n      modPipelineMeterTransactionSnapshotInfo.MeterCode !== undefined\r\n    ) {\r\n      if (\r\n        modPipelineMeterTransactionSnapshotInfo.GrossStartTotalizer === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.GrossStartTotalizer === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.GrossStartTotalizer ===\r\n          undefined\r\n      )\r\n        meterValidationErrors[\"GrossStartTotalizer\"] =\r\n          \"PipelineEntry_MandatoryStartGrossTotalizer\";\r\n      if (\r\n        modPipelineMeterTransactionSnapshotInfo.GrossEndTotalizer === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.GrossEndTotalizer === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.GrossEndTotalizer === undefined\r\n      )\r\n        meterValidationErrors[\"GrossEndTotalizer\"] =\r\n          \"PipelineEntry_MandatoryEndGrossTotalizer\";\r\n      if (\r\n        modPipelineMeterTransactionSnapshotInfo.NetStartTotalizer === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.NetStartTotalizer === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.NetStartTotalizer === undefined\r\n      )\r\n        meterValidationErrors[\"NetStartTotalizer\"] =\r\n          \"PipelineEntry_MandatoryStartNetTotalizer\";\r\n      if (\r\n        modPipelineMeterTransactionSnapshotInfo.NetEndTotalizer === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.NetEndTotalizer === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.NetEndTotalizer === undefined\r\n      )\r\n        meterValidationErrors[\"NetEndTotalizer\"] =\r\n          \"PipelineEntry_MandatoryEndNetTotalizer\";\r\n    }\r\n\r\n    if (\r\n      modPipelineMeterTransactionSnapshotInfo.Temperature !== \"\" &&\r\n      modPipelineMeterTransactionSnapshotInfo.Temperature !== null &&\r\n      modPipelineMeterTransactionSnapshotInfo.Temperature !== undefined &&\r\n      (modPipelineMeterTransactionSnapshotInfo.TemperatureUOM === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.TemperatureUOM === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.TemperatureUOM === undefined)\r\n    )\r\n      meterValidationErrors[\"TemperatureUOM\"] = \"BCU_TemperatureUOMRequired\";\r\n    if (\r\n      modPipelineMeterTransactionSnapshotInfo.Density !== \"\" &&\r\n      modPipelineMeterTransactionSnapshotInfo.Density !== null &&\r\n      modPipelineMeterTransactionSnapshotInfo.Density !== undefined &&\r\n      (modPipelineMeterTransactionSnapshotInfo.DensityUOM === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.DensityUOM === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.DensityUOM === undefined)\r\n    )\r\n      meterValidationErrors[\"DensityUOM\"] =\r\n        \"Reconciliation_DensityUOMMandatory\";\r\n\r\n    if (\r\n      this.props.isTankRequired &&\r\n      (modPipelineTankTransactionSnapshotInfo.TankCode === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.TankCode === null ||\r\n        modPipelineTankTransactionSnapshotInfo.TankCode === undefined)\r\n    )\r\n      tankValidationErrors[\"TankCode\"] = \"PipelineEntry_MandatoryTankCode\";\r\n\r\n    if (\r\n      modPipelineTankTransactionSnapshotInfo.TankCode !== \"\" &&\r\n      modPipelineTankTransactionSnapshotInfo.TankCode !== null &&\r\n      modPipelineTankTransactionSnapshotInfo.TankCode !== undefined\r\n    ) {\r\n      if (\r\n        modPipelineTankTransactionSnapshotInfo.GrossStartVolume === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.GrossStartVolume === null ||\r\n        modPipelineTankTransactionSnapshotInfo.GrossStartVolume === undefined\r\n      )\r\n        tankValidationErrors[\"GrossStartVolume\"] =\r\n          \"PipelineEntry_MandatoryStartGrossVolume\";\r\n      if (\r\n        modPipelineTankTransactionSnapshotInfo.GrossEndVolume === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.GrossEndVolume === null ||\r\n        modPipelineTankTransactionSnapshotInfo.GrossEndVolume === undefined\r\n      )\r\n        tankValidationErrors[\"GrossEndVolume\"] =\r\n          \"PipelineEntry_MandatoryEndGrossVolume\";\r\n      if (\r\n        modPipelineTankTransactionSnapshotInfo.NetStartVolume === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.NetStartVolume === null ||\r\n        modPipelineTankTransactionSnapshotInfo.NetStartVolume === undefined\r\n      )\r\n        tankValidationErrors[\"NetStartVolume\"] =\r\n          \"PipelineEntry_MandatoryStartNetVolume\";\r\n      if (\r\n        modPipelineTankTransactionSnapshotInfo.NetEndVolume === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.NetEndVolume === null ||\r\n        modPipelineTankTransactionSnapshotInfo.NetEndVolume === undefined\r\n      )\r\n        tankValidationErrors[\"NetEndVolume\"] =\r\n          \"PipelineEntry_MandatoryEndNetVolume\";\r\n      if (\r\n        modPipelineTankTransactionSnapshotInfo.VolumeUOM === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.VolumeUOM === null ||\r\n        modPipelineTankTransactionSnapshotInfo.VolumeUOM === undefined\r\n      )\r\n        tankValidationErrors[\"VolumeUOM\"] =\r\n          \"PipelineEntry_MandatoryEndNetTotalizer\";\r\n    }\r\n\r\n    if (\r\n      modPipelineTankTransactionSnapshotInfo.GrossMass !== \"\" &&\r\n      modPipelineTankTransactionSnapshotInfo.GrossMass !== null &&\r\n      modPipelineTankTransactionSnapshotInfo.GrossMass !== undefined &&\r\n      (modPipelineTankTransactionSnapshotInfo.MassUOM === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.MassUOM === null ||\r\n        modPipelineTankTransactionSnapshotInfo.MassUOM === undefined)\r\n    )\r\n      tankValidationErrors[\"MassUOM\"] = \"PipelineEntry_MandatoryMassUOM\";\r\n    if (\r\n      modPipelineTankTransactionSnapshotInfo.Temperature !== \"\" &&\r\n      modPipelineTankTransactionSnapshotInfo.Temperature !== null &&\r\n      modPipelineTankTransactionSnapshotInfo.Temperature !== undefined &&\r\n      (modPipelineTankTransactionSnapshotInfo.TemperatureUOM === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.TemperatureUOM === null ||\r\n        modPipelineTankTransactionSnapshotInfo.TemperatureUOM === undefined)\r\n    )\r\n      tankValidationErrors[\"TemperatureUOM\"] = \"BCU_TemperatureUOMRequired\";\r\n    if (\r\n      modPipelineTankTransactionSnapshotInfo.Density !== \"\" &&\r\n      modPipelineTankTransactionSnapshotInfo.Density !== null &&\r\n      modPipelineTankTransactionSnapshotInfo.Density !== undefined &&\r\n      (modPipelineTankTransactionSnapshotInfo.DensityUOM === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.DensityUOM === null ||\r\n        modPipelineTankTransactionSnapshotInfo.DensityUOM === undefined)\r\n    )\r\n      tankValidationErrors[\"DensityUOM\"] = \"Reconciliation_DensityUOMMandatory\";\r\n    if (\r\n      modPipelineTankTransactionSnapshotInfo.Pressure !== \"\" &&\r\n      modPipelineTankTransactionSnapshotInfo.Pressure !== null &&\r\n      modPipelineTankTransactionSnapshotInfo.Pressure !== undefined &&\r\n      (modPipelineTankTransactionSnapshotInfo.PressureUOM === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.PressureUOM === null ||\r\n        modPipelineTankTransactionSnapshotInfo.PressureUOM === undefined)\r\n    )\r\n      tankValidationErrors[\"PressureUOM\"] =\r\n        \"PipelineEntry_MandatoryPressureUOM\";\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({\r\n      tankValidationErrors,\r\n      meterValidationErrors,\r\n      attributeValidationErrors,\r\n    });\r\n\r\n    var returnValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n\r\n    if (returnValue)\r\n      returnValue = Object.values(tankValidationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n    if (returnValue)\r\n      returnValue = Object.values(meterValidationErrors).every(function (\r\n        value\r\n      ) {\r\n        return value === \"\";\r\n      });\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n        emptyPipelineCommonTransactionSnapshotInfo\r\n      );\r\n      let modPipelineMeterTransactionSnapshotInfo = lodash.cloneDeep(\r\n        emptyPipelineCommonTransactionSnapshotInfo\r\n      );\r\n      if (\r\n        this.state.isMeterRequired &&\r\n        this.state.meterCodes !== null &&\r\n        this.state.meterCodes.length === 1\r\n      ) {\r\n        modPipelineMeterTransactionSnapshotInfo.MeterCode =\r\n          this.state.meterCodes[0];\r\n      }\r\n\r\n      const tankValidationErrors = { ...this.state.tankValidationErrors };\r\n      const meterValidationErrors = { ...this.state.meterValidationErrors };\r\n      Object.keys(tankValidationErrors).forEach(function (key) {\r\n        tankValidationErrors[key] = \"\";\r\n      });\r\n\r\n      Object.keys(meterValidationErrors).forEach(function (key) {\r\n        meterValidationErrors[key] = \"\";\r\n      });\r\n\r\n      this.setState(\r\n        {\r\n          modPipelineMeterTransactionSnapshotInfo,\r\n          modPipelineTankTransactionSnapshotInfo,\r\n          tankValidationErrors,\r\n          meterValidationErrors,\r\n        },\r\n        () => {\r\n          this.setDefaultValues();\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\"PipelineReceiptManualEntryDetailsComposite: Error in reset\");\r\n    }\r\n  };\r\n\r\n  formAttributesForUI(attributeMetaDataList) {\r\n    try {\r\n      if (attributeMetaDataList.PIPELINETRANSACTIONS.length > 0) {\r\n        let modAttributeMetaDataList = [];\r\n        let selectedTerminals =\r\n          attributeMetaDataList.PIPELINETRANSACTIONS[0].TerminalCode;\r\n        attributeMetaDataList.PIPELINETRANSACTIONS.forEach(function (\r\n          attributeMetaData\r\n        ) {\r\n          if (attributeMetaData.TerminalCode === selectedTerminals) {\r\n            modAttributeMetaDataList.push(attributeMetaData);\r\n          }\r\n        });\r\n        this.setState({\r\n          modAttributeMetaDataList,\r\n        });\r\n        let attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n            (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n          );\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetails : Error in forming attributes for UI\"\r\n      );\r\n    }\r\n  }\r\n\r\n  getAttributes() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [pipelineTransactionsAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.PIPELINETRANSACTIONS\r\n                ),\r\n            },\r\n            () => {\r\n              this.formAttributesForUI(result.EntityResult);\r\n            }\r\n          );\r\n        } else {\r\n          console.log(\"Failed to get Attributes\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getting Attributes:\", error);\r\n    }\r\n  }\r\n\r\n  GetUOMList() {\r\n    try {\r\n      if (this.props.UOMS !== null && this.props.UOMS !== undefined) {\r\n        let UOMS = this.props.UOMS;\r\n        let quantityUOMOptions = [];\r\n        let densityUOMS = [];\r\n        let temperatureUOMs = [];\r\n        let volumeUOMs = [];\r\n        let pressureUOMs = [];\r\n\r\n        if (Array.isArray(UOMS.VOLUME)) {\r\n          volumeUOMs = Utilities.transferListtoOptions(UOMS.VOLUME);\r\n        }\r\n        if (Array.isArray(UOMS.MASS)) {\r\n          quantityUOMOptions = Utilities.transferListtoOptions(UOMS.MASS);\r\n        }\r\n        if (Array.isArray(UOMS.DENSITY)) {\r\n          densityUOMS = Utilities.transferListtoOptions(UOMS.DENSITY);\r\n        }\r\n        if (Array.isArray(UOMS.TEMPERATURE)) {\r\n          temperatureUOMs = Utilities.transferListtoOptions(UOMS.TEMPERATURE);\r\n        }\r\n        if (Array.isArray(UOMS.PRESSURE)) {\r\n          pressureUOMs = Utilities.transferListtoOptions(UOMS.PRESSURE);\r\n        }\r\n\r\n        this.setState({\r\n          quantityUOMOptions,\r\n          densityUOMS,\r\n          temperatureUOMs,\r\n          volumeUOMs,\r\n          pressureUOMs,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptManualEntryDetailsComposite : Error in getting UOMS\"\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChange = (source = \"\", propertyName, data) => {\r\n    try {\r\n      if (source === \"Tank\") {\r\n        let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n          this.state.modPipelineTankTransactionSnapshotInfo\r\n        );\r\n        const tankValidationErrors = lodash.cloneDeep(\r\n          this.state.tankValidationErrors\r\n        );\r\n        modPipelineTankTransactionSnapshotInfo[propertyName] = data;\r\n        if (propertyName === \"TankCode\") {\r\n          this.getTankDetails(modPipelineTankTransactionSnapshotInfo);\r\n        } else if (propertyName === \"ScanEndTime\") {\r\n          tankValidationErrors.ScanStartTime = \"\";\r\n          this.setState({ modPipelineTankTransactionSnapshotInfo });\r\n        } else {\r\n          this.setState({ modPipelineTankTransactionSnapshotInfo });\r\n        }\r\n        if (\r\n          PipelineDispatchManualEntryValidationDef[propertyName] !== undefined\r\n        ) {\r\n          tankValidationErrors[propertyName] = Utilities.validateField(\r\n            PipelineDispatchManualEntryValidationDef[propertyName],\r\n            data\r\n          );\r\n          this.setState({ tankValidationErrors });\r\n        }\r\n      } else if (source === \"Meter\") {\r\n        let modPipelineMeterTransactionSnapshotInfo = lodash.cloneDeep(\r\n          this.state.modPipelineMeterTransactionSnapshotInfo\r\n        );\r\n        modPipelineMeterTransactionSnapshotInfo[propertyName] = data;\r\n        const meterValidationErrors = lodash.cloneDeep(\r\n          this.state.meterValidationErrors\r\n        );\r\n        if (\r\n          PipelineDispatchManualEntryValidationDef[propertyName] !== undefined\r\n        ) {\r\n          meterValidationErrors[propertyName] = Utilities.validateField(\r\n            PipelineDispatchManualEntryValidationDef[propertyName],\r\n            data\r\n          );\r\n        }\r\n\r\n        this.setState({\r\n          modPipelineMeterTransactionSnapshotInfo,\r\n          meterValidationErrors,\r\n        });\r\n      } else {\r\n        let modPipelineSnapshotInfo = lodash.clone(\r\n          this.state.modPipelineSnapshotInfo\r\n        );\r\n        modPipelineSnapshotInfo[propertyName] = data;\r\n\r\n        const tankValidationErrors = lodash.cloneDeep(\r\n          this.state.tankValidationErrors\r\n        );\r\n        if (\r\n          PipelineDispatchManualEntryValidationDef[propertyName] !== undefined\r\n        ) {\r\n          tankValidationErrors[propertyName] = Utilities.validateField(\r\n            PipelineDispatchManualEntryValidationDef[propertyName],\r\n            data\r\n          );\r\n\r\n          this.setState({\r\n            modPipelineSnapshotInfo,\r\n            tankValidationErrors,\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptManualEntryDetailsComposite : Error in handle change\"\r\n      );\r\n    }\r\n  };\r\n\r\n  handleDateTextChange = (propertyName, value, error) => {\r\n    try {\r\n      let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n        this.state.modPipelineTankTransactionSnapshotInfo\r\n      );\r\n      const tankValidationErrors = lodash.cloneDeep(\r\n        this.state.tankValidationErrors\r\n      );\r\n      tankValidationErrors[propertyName] = error;\r\n      modPipelineTankTransactionSnapshotInfo[propertyName] = value;\r\n      this.setState({\r\n        tankValidationErrors,\r\n        modPipelineTankTransactionSnapshotInfo,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptManualEntryDetailsComposite:Error occured on handleDateTextChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleTabChange = (index) => {\r\n    this.setState({\r\n      activeIndex: index,\r\n    });\r\n  };\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchtManualEntryDetailsComposite:Error occured on handleAttributeCellDataEditFP\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleTabChange = (index) => {\r\n    this.setState({\r\n      activeIndex: index,\r\n    });\r\n  };\r\n\r\n  \r\n \r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const listOptions = {\r\n      quantityUOMOptions: this.state.quantityUOMOptions,\r\n      densityUOMS: this.state.densityUOMS,\r\n      temperatureUOMs: this.state.temperatureUOMs,\r\n      volumeUOMs: this.state.volumeUOMs,\r\n      pressureUOMs: this.state.pressureUOMs,\r\n      tankCodes: this.state.tankCodes,\r\n      meterCodes: this.state.meterCodes,\r\n    };\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            <ErrorBoundary>\r\n              <PipelineReceiptManualEntryDetails\r\n                onFieldChange={this.handleChange}\r\n                onTabChange={this.handleTabChange}\r\n                listOptions={listOptions}\r\n                receipt={this.props.receipt}\r\n                modPipelineSnapshotInfo={this.state.modPipelineSnapshotInfo}\r\n                modPipelineTankTransactionSnapshotInfo={\r\n                  this.state.modPipelineTankTransactionSnapshotInfo\r\n                }\r\n                modPipelineMeterTransactionSnapshotInfo={\r\n                  this.state.modPipelineMeterTransactionSnapshotInfo\r\n                }\r\n                tankValidationErrors={this.state.tankValidationErrors}\r\n                meterValidationErrors={this.state.meterValidationErrors}\r\n                modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n                onAttributeDataChange={this.handleAttributeDataChange}\r\n                attributeValidationErrors={this.state.attributeValidationErrors}\r\n                activeIndex={this.state.activeIndex}\r\n                isMeterRequired={this.props.isMeterRequired}\r\n                isTankRequired={this.props.isTankRequired}\r\n                onDateTextChange={this.handleDateTextChange}\r\n              ></PipelineReceiptManualEntryDetails>\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n              <TMDetailsUserActions\r\n                handleBack={this.props.handleBack}\r\n                handleSave={this.handleSave}\r\n                handleReset={this.handleReset}\r\n                saveEnabled={this.state.manualEntrySaveEnable}\r\n              ></TMDetailsUserActions>\r\n            </ErrorBoundary>\r\n\r\n            {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={functionGroups.add}\r\n            functionGroup={fnPipelineReceiptManualEntry}\r\n            handleOperation={this.addUnLoadingDetails}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(\r\n  PipelineReceiptManualEntryDetailsComposite\r\n);\r\n\r\nPipelineReceiptManualEntryDetailsComposite.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  receipt: PropTypes.string.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n};\r\n"],"names":["PipelineReceiptManualEntryDetails","_ref","modPipelineSnapshotInfo","modPipelineTankTransactionSnapshotInfo","modPipelineMeterTransactionSnapshotInfo","tankValidationErrors","meterValidationErrors","listOptions","modAttributeMetaDataList","attributeValidationErrors","onFieldChange","onTabChange","onAttributeDataChange","activeIndex","receipt","isMeterRequired","isTankRequired","onDateTextChange","handleValidationErrorFilter","terminal","attributeValidation","undefined","find","selectedAttribute","TerminalCode","_jsx","TranslationConsumer","children","t","_jsxs","className","Input","fluid","value","FinishedProductCode","label","disabled","reserveSpace","PipelineReceiptCode","PipelineHeaderCode","Select","tankCodes","options","Utilities","multiple","meterCodes","DatePicker","Date","ScanStartTime","type","displayFormat","getCurrentDateFormat","disablePast","disableFuture","indicator","onChange","data","onTextChange","error","ScanEndTime","Remarks","length","map","attire","ErrorBoundary","Accordion","Content","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","handleCellDataEdit","Tab","index","Pane","placeholder","MeterCode","noResultsMessage","GrossStartTotalizer","NetStartTotalizer","GrossEndTotalizer","NetEndTotalizer","Temperature","TemperatureUOM","temperatureUOMs","search","Density","DensityUOM","densityUOMS","TankCode","GrossMass","MassUOM","quantityUOMOptions","GrossStartVolume","NetStartVolume","GrossEndVolume","NetEndVolume","VolumeUOM","volumeUOMs","Pressure","PressureUOM","pressureUOMs","PipelineReceiptManualEntryDetailsComposite","Component","constructor","_this","arguments","this","state","lodash","emptyPipelineSnapshotInfo","emptyPipelineCommonTransactionSnapshotInfo","PipelineDispatchManualEntryValidationDef","manualEntrySaveEnable","showAuthenticationLayout","tempPipelineSnapshotInfo","addUnLoadingDetails","setState","saveEnabled","CreateManualEntry","console","log","handleSave","attributeList","validateSave","pipelineSnapShotInfo","fillDetails","props","userDetails","EntityResult","IsWebPortalUser","handleReset","Object","keys","forEach","key","setDefaultValues","handleChange","source","propertyName","getTankDetails","handleDateTextChange","handleTabChange","handleAttributeDataChange","attribute","matchedAttributes","matchedAttributesList","filter","modattribute","Array","isArray","Code","DefaultValue","handleAuthenticationClose","componentDidMount","IsArchived","GetUOMList","getAttributes","QuantityUOM","PageAttibutes","DefaultUOMS","getmeterCodes","getTankCodes","keyCode","KeyCodes","TerminalCodes","obj","keyDataCode","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","IsSuccess","tank","GrossMassUOM","catch","PipelineHeaderMeterCode","fpCode","shCode","selectedShareholder","ErrorList","request","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","ShareHolderCode","Entity","formAttributesForUI","toast","NotifyEvent","notificationMessage","autoClose","pipelineSnapshotInfoList","commonTransactionSnapshotInfoList","Attributes","pipelineSnapShotInfoList","PlanCode","TransactionType","Constants","RECEIPT","ShareholderCode","push","commonTransactionTankStartSnapShot","commonTransactionTankEndSnapShot","ScanTime","FlowRate","FlowRateUOM","GrossTotalizer","NetTotalizer","GrossVolume","NetVolume","IsManualEntry","LastUpdatedBy","Firstname","LastName","IsStart","IsEnd","commonTransactionMeterStartSnapshotInfo","commonTransactionMeterEndSnapshotInfo","attributeMetaData","returnValue","x","values","every","PIPELINETRANSACTIONS","selectedTerminals","pipelineTransactionsAttributeEntity","UOMS","VOLUME","MASS","DENSITY","TEMPERATURE","PRESSURE","render","TMDetailsUserActions","handleBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroups","add","functionGroup","fnPipelineReceiptManualEntry","handleOperation","handleClose","connect","getUserDetails","TokenAuth"],"sourceRoot":""}