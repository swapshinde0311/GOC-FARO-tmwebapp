{"version":3,"file":"static/js/5218.2a35541d.chunk.js","mappings":"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","sources":["Components/UIBase/Common/TMUserActions.jsx","Components/Composite/Common/TMUserActionsComposite.jsx","Components/UIBase/Details/MapTransactionsDetail.jsx","Components/Composite/Details/MapTransactionsDetailComposite.jsx","Components/Composite/Entity/MapTransactionsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","JS/KeyCodes.js","JS/functionalUtilities.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Icon,\r\n  Breadcrumb,\r\n  Select,\r\n  Modal,\r\n  Button,\r\n  Popup,\r\n  VerticalMenu,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nTMUserActions.propTypes = {\r\n  operationsVisibilty: PropTypes.shape({\r\n    add: PropTypes.bool,\r\n    delete: PropTypes.bool,\r\n    shareholder: PropTypes.bool,\r\n  }).isRequired,\r\n  breadcrumbItem: PropTypes.shape({\r\n    itemName: PropTypes.string,\r\n    itemCode: PropTypes.string,\r\n    itemProps: PropTypes.any,\r\n    localizedKey: PropTypes.string,\r\n    parents: PropTypes.array,\r\n    isComponent: PropTypes.bool,\r\n  }).isRequired,\r\n  shareholders: PropTypes.array.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onShareholderChange: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onAdd: PropTypes.func.isRequired,\r\n  popUpContent: PropTypes.array,\r\n};\r\nTMUserActions.defaultProps = {\r\n  operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n  breadcrumbItem: {\r\n    itemName: \"\",\r\n    itemCode: \"\",\r\n    localizedKey: \"\",\r\n    itemProps: {},\r\n    parents: [],\r\n    isComponent: false,\r\n  },\r\n  shareholders: [],\r\n  selectedShareholder: \"\",\r\n  popUpContent: [],\r\n  shrVisible: true,\r\n  addVisible: true,\r\n  deleteVisible: true\r\n};\r\nexport function TMUserActions({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [popUpOpen, setPopUpOpen] = useState(false);\r\n  function getShareholderDropdownOptions() {\r\n    return Utilities.transferListtoOptions(shareholders);\r\n    // var List = [];\r\n    // shareholders.forEach((element) => {\r\n    //   List.push({ text: element, value: element });\r\n    // });\r\n    // return List;\r\n  }\r\n\r\n  function buildBreadcrumb() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {breadcrumbItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item\r\n                  onClick={() => {\r\n                    if (\r\n                      handleBreadCrumbClick !== undefined &&\r\n                      handleBreadCrumbClick !== null\r\n                    ) {\r\n                      handleBreadCrumbClick(\r\n                        parentitem.itemCode,\r\n                        breadcrumbItem.parents\r\n                      );\r\n                    }\r\n                  }}\r\n                  key={parentitem.itemCode}\r\n                >\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={breadcrumbItem.itemCode}>\r\n              {t(breadcrumbItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  function handlePopUpClick() {\r\n    if (operationsVisibilty.add) {\r\n      if (popUpContent.length > 0) {\r\n        if (popUpOpen === false) setPopUpOpen(true);\r\n        else setPopUpOpen(false);\r\n      } else {\r\n        onAdd();\r\n      }\r\n    }\r\n  }\r\n\r\n  function popUpMenuClick(menuItem) {\r\n    setPopUpOpen(false);\r\n    onAdd(menuItem);\r\n  }\r\n  function displayIcons() {\r\n    return (\r\n      <div\r\n        style={{ float: \"right\", display: \"inline-block\", marginTop: \"10px\" }}\r\n      >\r\n        {addVisible ? <Popup\r\n          position=\"bottom right\"\r\n          className=\"popup-theme-wrap\"\r\n          element={\r\n            <div\r\n              className={\r\n                (operationsVisibilty.add\r\n                  ? \"iconCircle \"\r\n                  : \"iconCircleDisable \") + \"iconblock\"\r\n              }\r\n              onClick={handlePopUpClick}\r\n            >\r\n              <Icon\r\n                root=\"common\"\r\n                name=\"badge-plus\"\r\n                size=\"small\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          }\r\n          on=\"click\"\r\n          open={popUpOpen}\r\n        >\r\n          <div onMouseLeave={() => setPopUpOpen(false)}>\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <VerticalMenu>\r\n                  <VerticalMenu>\r\n                    <VerticalMenu.Header>\r\n                      {t(\"Common_Create\")}\r\n                    </VerticalMenu.Header>\r\n                    {popUpContent.map((item) => {\r\n                      return (\r\n                        <VerticalMenu.Item\r\n                          onClick={() => popUpMenuClick(item.fieldName)}\r\n                        >\r\n                          {t(item.fieldValue)}\r\n                        </VerticalMenu.Item>\r\n                      );\r\n                    })}\r\n                  </VerticalMenu>\r\n                </VerticalMenu>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        </Popup> : \"\"}\r\n        {deleteVisible ? <div\r\n          style={{ marginLeft: \"10px\" }}\r\n          onClick={() => {\r\n            if (operationsVisibilty.delete) {\r\n              setModelOpen(true);\r\n              //displayTMModalforDelete();\r\n              //onDelete();\r\n            }\r\n          }}\r\n          className={\r\n            (operationsVisibilty.delete\r\n              ? \"iconCircle \"\r\n              : \"iconCircleDisable \") + \"iconblock\"\r\n          }\r\n        >\r\n          <Icon root=\"common\" name=\"delete\" size=\"small\" color=\"white\" />\r\n        </div> : \"\"}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayTMModalforDelete() {\r\n    //console.log(\"entered to display modal actions\");\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  onDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n    //return <TMModal open={true}></TMModal>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\" style={{ alignItems: \"flex-start\", padding: \"0px\" }}>\r\n      <div\r\n        className=\"col-9 col-sm-9 col-md-9 col-lg-10 col-xl-10\"\r\n        style={{ padding: \"0px\" }}\r\n      >\r\n        <div className=\"row\" style={{ marginTop: \"10px\", alignItems: \"\" }}>\r\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n            <ErrorBoundary> {buildBreadcrumb()}</ErrorBoundary>\r\n          </div>\r\n          <div\r\n            className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-4\"\r\n          //style={{ verticalAlign: \"middle\" }}\r\n          >\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <div\r\n                  className=\"compartmentIcon\"\r\n                  style={{ justifyContent: \"flex-start\" }}\r\n                >\r\n                  {shrVisible === false ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <div>\r\n                        <h4 className=\"shrText\">{t(\"Common_Shareholder\")}:</h4>\r\n                      </div>\r\n                      <div className=\"opSelect\">\r\n                        <Select\r\n                          //className=\"opSelect\"\r\n                          placeholder={t(\"Common_Shareholder\")}\r\n                          value={selectedShareholder}\r\n                          disabled={!operationsVisibilty.shareholder}\r\n                          options={getShareholderDropdownOptions()}\r\n                          onChange={(value) => onShareholderChange(value)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n\r\n          {displayTMModalforDelete()}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-3 col-sm-3 col-md-3 col-lg-2 col-xl-2\">\r\n        {displayIcons()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TMUserActions } from \"../../UIBase/Common/TMUserActions\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nexport function TMUserActionsComposite({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n\r\n}) {\r\n  return (\r\n    <TMUserActions\r\n      operationsVisibilty={operationsVisibilty}\r\n      breadcrumbItem={breadcrumbItem}\r\n      shareholders={shareholders}\r\n      selectedShareholder={selectedShareholder}\r\n      onShareholderChange={onShareholderChange}\r\n      onDelete={onDelete}\r\n      onAdd={onAdd}\r\n      popUpContent={popUpContent}\r\n      shrVisible={shrVisible}\r\n      handleBreadCrumbClick={handleBreadCrumbClick}\r\n      addVisible={addVisible}\r\n      deleteVisible={deleteVisible}\r\n    ></TMUserActions>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer, useTranslation } from \"@scuf/localization\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport { Input, Select } from \"@scuf/common\";\r\nimport {\r\n  getOptionsWithSelect,\r\n  handleIsRequiredCompartmentCell,\r\n} from \"../../../JS/functionalUtilities\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\n\r\nMapTransactionsDetail.propTypes = {\r\n  modMapTransactions: PropTypes.object.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  otherData: PropTypes.object.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    transportationTypes: PropTypes.array.isRequired,\r\n    transactionTypes: PropTypes.array.isRequired,\r\n    shareholderCodes: PropTypes.array.isRequired,\r\n    dispatchReceiptCodes: PropTypes.array.isRequired,\r\n    transactionCodes: PropTypes.array.isRequired,\r\n    tankCodes: PropTypes.array.isRequired,\r\n    railReceiptCodes: PropTypes.array.isRequired,\r\n    railWagonCodes: PropTypes.array.isRequired,\r\n    marineReceiptCodes: PropTypes.array.isRequired,\r\n  }).isRequired,\r\n  onTransactionSearchChange: PropTypes.func.isRequired,\r\n  onReceiptSearchChange: PropTypes.func.isRequired,\r\n  selectedCompRow: PropTypes.array.isRequired,\r\n  handleComRowSelectionChange: PropTypes.func.isRequired,\r\n  handleComRowClick: PropTypes.func.isRequired,\r\n  selectLocalTransactionRow: PropTypes.array.isRequired,\r\n  handleLocalTranRowSelectionChange: PropTypes.func.isRequired,\r\n  handleLocalTranRowClick: PropTypes.func.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  handleCellDataEdit: PropTypes.func.isRequired,\r\n  handleGetTanksForMeter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport function MapTransactionsDetail({\r\n  modMapTransactions,\r\n  validationErrors,\r\n  otherData,\r\n  listOptions,\r\n  onTransactionSearchChange,\r\n  onReceiptSearchChange,\r\n  selectedCompRow,\r\n  handleComRowSelectionChange,\r\n  handleComRowClick,\r\n  selectLocalTransactionRow,\r\n  handleLocalTranRowSelectionChange,\r\n  handleLocalTranRowClick,\r\n  onFieldChange,\r\n  handleCellDataEdit,\r\n  handleGetTanksForMeter,\r\n}) {\r\n  const [t] = useTranslation();\r\n\r\n  const handleBatchTankCodeDropDown = (cellData) => {\r\n    return (\r\n      <Select\r\n        className=\"selectDropwdown\"\r\n        value={otherData.BatchInfoForUI[cellData.rowIndex][cellData.field]}\r\n        fluid\r\n        options={listOptions.tankCodes}\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        indicator=\"required\"\r\n        reserveSpace={false}\r\n        search={true}\r\n        noResultsMessage={t(\"noResultsMessage\")}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleTankEditDropDown = (cellData) => {\r\n    if (\r\n      modMapTransactions.TransLoadBcu === false &&\r\n      otherData.BatchInfoForUI[cellData.rowIndex].ProductType ===\r\n        \"Report_BaseProduct\"\r\n    ) {\r\n      handleGetTanksForMeter(\r\n        otherData.BatchInfoForUI[cellData.rowIndex].MeterCode\r\n      );\r\n      return handleBatchTankCodeDropDown(cellData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                indicator=\"required\"\r\n                placeholder={t(\"Common_Select\")}\r\n                label={t(\"MeterUnaccountedTransaction_Type\")}\r\n                options={listOptions.transactionTypes}\r\n                value={modMapTransactions.TransactionType}\r\n                onChange={(data) => onFieldChange(\"TransactionType\", data)}\r\n                reserveSpace={false}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                indicator=\"required\"\r\n                placeholder={t(\"Common_Select\")}\r\n                label={t(\"Common_TransactionCode\")}\r\n                options={getOptionsWithSelect(\r\n                  listOptions.transactionCodes,\r\n                  t(\"Common_Select\")\r\n                )}\r\n                value={modMapTransactions.TransactionCode}\r\n                onChange={(data) => onFieldChange(\"TransactionCode\", data)}\r\n                reserveSpace={false}\r\n                search={true}\r\n                onSearch={onTransactionSearchChange}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n              />\r\n            </div>\r\n            {modMapTransactions.TransportationType ===\r\n            Constants.TransportationType.ROAD ? (\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  indicator=\"required\"\r\n                  placeholder={t(\"Common_Select\")}\r\n                  label={t(\"RailDispatchPlanDetail_ShareHolderCode\")}\r\n                  options={listOptions.shareholderCodes}\r\n                  value={modMapTransactions.ShareholderCode}\r\n                  onChange={(data) => onFieldChange(\"ShareholderCode\", data)}\r\n                  reserveSpace={false}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                />\r\n              </div>\r\n            ) : null}\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                label={t(\"RailDispatchLoadSpotAssign_ScheduledDate\")}\r\n                value={\r\n                  otherData.ScheduledDate === \"\"\r\n                    ? \"\"\r\n                    : new Date(otherData.ScheduledDate).toLocaleDateString()\r\n                }\r\n                reserveSpace={false}\r\n                disabled={true}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                label={t(\"Common_TransactionStatus\")}\r\n                value={otherData.Status}\r\n                reserveSpace={false}\r\n                disabled={true}\r\n              />\r\n            </div>\r\n            {modMapTransactions.TransportationType ===\r\n            Constants.TransportationType.ROAD ? (\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  label={t(\"Report_DriverCode\")}\r\n                  value={otherData.DriverCode}\r\n                  reserveSpace={false}\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            ) : null}\r\n            {(modMapTransactions.TransportationType === Constants.TransportationType.ROAD\r\n            || modMapTransactions.TransportationType === Constants.TransportationType.MARINE)\r\n              ? (\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  label={ modMapTransactions.TransportationType ===\r\n                    Constants.TransportationType.ROAD\r\n                      ? t(\"Vehicle_Code\")\r\n                      : t(\"Vessel_Code\")  \r\n                    } \r\n                  reserveSpace={false}\r\n                  value={otherData.VehicleCode}\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n\r\n          {otherData.DispatchReceiptInfoForUI.length > 0 ? (\r\n            <div>\r\n              <div className=\"col col-md-8 col-lg-9 col col-xl-9\">\r\n                <h4>{t(\"PCDET_SHPDetailsPopup_Title\")}</h4>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col-12 detailsTable\">\r\n                  <DataTable\r\n                    data={otherData.DispatchReceiptInfoForUI}\r\n                    selectionMode=\"single\"\r\n                    selection={selectedCompRow}\r\n                    onSelectionChange={handleComRowSelectionChange}\r\n                    onCellClick={(data) => handleComRowClick(data.rowData)}\r\n                    scrollable={true}\r\n                    scrollHeight=\"300px\"\r\n                  >\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"CompartmentSeqNoInVehicle\"\r\n                      field=\"CompartmentSeqNoInVehicle\"\r\n                      header={\r\n                        modMapTransactions.TransportationType ===\r\n                        Constants.TransportationType.ROAD\r\n                          ? t(\"ShipmentProdDetail_CompSeqInVehicle\")\r\n                          : t(\"ViewShipmentStatus_PlannedTripNo\")\r\n                      }\r\n                    ></DataTable.Column>\r\n                     {modMapTransactions.TransportationType ===\r\n                    (Constants.TransportationType.ROAD || Constants.TransportationType.RAIL) ? (\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"TrailerCode\"\r\n                      field=\"TrailerCode\"\r\n                      header={\r\n                        modMapTransactions.TransportationType ===\r\n                        Constants.TransportationType.ROAD\r\n                          ? t(\"Marine_ShipmentCompDetail_wcTrailerCode\")\r\n                          : t(\"RailWagonConfigurationDetails_RailWagonCode\")\r\n                      }\r\n                    ></DataTable.Column>\r\n                    ) : null}\r\n                    {modMapTransactions.TransportationType ===\r\n                    Constants.TransportationType.RAIL ? (\r\n                      <DataTable.Column\r\n                        className=\"compColHeight\"\r\n                        key=\"ShareholderCode\"\r\n                        field=\"ShareholderCode\"\r\n                        header={t(\"Report_Shareholder\")}\r\n                      ></DataTable.Column>\r\n                    ) : null}\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"FinishedProductCode\"\r\n                      field=\"FinishedProductCode\"\r\n                      header={t(\"FinishedProductList_Code\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"CustomerOrSupplierCode\"\r\n                      field=\"CustomerOrSupplierCode\"\r\n                      header={\r\n                        modMapTransactions.TransactionType === \"RECEIPT\"\r\n                          ? t(\"Supplier_Code\")\r\n                          : t(\"Customer_Code\")\r\n                      }\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"DestinationOrOriginTerminalCode\"\r\n                      field=\"DestinationOrOriginTerminalCode\"\r\n                      header={\r\n                        modMapTransactions.TransactionType === \"RECEIPT\"\r\n                          ? t(\"OriginTerminal_Code\")\r\n                          : t(\"ShipmentProdDetail_DestinationCode\")\r\n                      }\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"PlannedQuantity\"\r\n                      field=\"PlannedQuantity\"\r\n                      header={t(\"ViewMarineShipmentList_PlannedQuantity\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"ActualQuantity\"\r\n                      field=\"ActualQuantity\"\r\n                      header={\r\n                        modMapTransactions.TransactionType === \"RECEIPT\"\r\n                          ? t(\"UnLoadingInfo_UnloadQuantity\")\r\n                          : t(\"ShipmentOrder_LoadedQuantity\")\r\n                      }\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"Status\"\r\n                      field=\"Status\"\r\n                      header={t(\"ShipmentProdDetail_Status\")}\r\n                      renderer={(cellData) => {\r\n                        if (\r\n                          otherData.DispatchReceiptInfoForUI[cellData.rowIndex][\r\n                            cellData.field\r\n                          ] !== null\r\n                        ) {\r\n                          return Utilities.getKeyByValue(\r\n                            modMapTransactions.TransactionType === \"RECEIPT\"? Constants.ReceiptCompartmentStatus: Constants.ShipmentCompartmentStatus,\r\n                            otherData.DispatchReceiptInfoForUI[\r\n                              cellData.rowIndex\r\n                            ][cellData.field]\r\n                          );\r\n                        }\r\n                      }}\r\n                    ></DataTable.Column>\r\n                  </DataTable>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          {otherData.LocalTranInfoForUI.length > 0 ? (\r\n            <div>\r\n              <div className=\"col col-md-8 col-lg-9 col col-xl-9\">\r\n                <h4>{t(\"UnmatchedLocalTrans_PageTitle\")}</h4>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col-12 detailsTable\">\r\n                  <DataTable\r\n                    data={otherData.LocalTranInfoForUI}\r\n                    selectionMode=\"single\"\r\n                    selection={selectLocalTransactionRow}\r\n                    onSelectionChange={handleLocalTranRowSelectionChange}\r\n                    onCellClick={(data) =>\r\n                      handleLocalTranRowClick(data.rowData)\r\n                    }\r\n                    scrollable={true}\r\n                    scrollHeight=\"300px\"\r\n                    search={true}\r\n                    searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                  >\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"LocationCode\"\r\n                      field=\"LocationCode\"\r\n                      header= { modMapTransactions.TransportationType ===\r\n                      Constants.TransportationType.MARINE\r\n                        ? t(\"LocationInfo_BerthCode\")\r\n                        : t(\"Bay_Code\")  \r\n                      }\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"BCUCode\"\r\n                      field=\"BCUCode\"\r\n                      header={t(\"BCU_Code\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"TransactionID\"\r\n                      field=\"TransactionID\"\r\n                      header={t(\"ViewRailLoadingDetails_TransactionNo\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"BatchID\"\r\n                      field=\"BatchID\"\r\n                      header={t(\"UnmatchedLocalTrans_BatchNo\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"VehicleCode\"\r\n                      field=\"VehicleCode\"\r\n                      header= { modMapTransactions.TransportationType ===\r\n                        Constants.TransportationType.ROAD\r\n                          ? t(\"Vehicle_Code\")\r\n                          : t(\"Vessel_Code\")  \r\n                        } \r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"CompartmentNo\"\r\n                      field=\"CompartmentNo\"\r\n                      header={t(\"ViewShipmentStatus_SeqNo\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"ArmNo\"\r\n                      field=\"ArmNo\"\r\n                      header={t(\"Meter_ArmNo\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"LoadNumber\"\r\n                      field=\"LoadNumber\"\r\n                      header={t(\"LocalTransactionsMapping_LoadNumber\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"GrossQuantity\"\r\n                      field=\"GrossQuantity\"\r\n                      header={t(\"GrossQuantity\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"StartTime\"\r\n                      field=\"StartTime\"\r\n                      header={t(\"ViewShipmentTrailer_StartTime\")}\r\n                      renderer={(cellData) => {\r\n                        if (\r\n                          otherData.LocalTranInfoForUI[cellData.rowIndex][\r\n                            cellData.field\r\n                          ]\r\n                        ) {\r\n                          return new Date(\r\n                            otherData.LocalTranInfoForUI[cellData.rowIndex][\r\n                              cellData.field\r\n                            ]\r\n                          ).toLocaleString();\r\n                        }\r\n                      }}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"EndTime\"\r\n                      field=\"EndTime\"\r\n                      header={t(\"ViewShipmentTrailer_EndTime\")}\r\n                      renderer={(cellData) => {\r\n                        if (\r\n                          otherData.LocalTranInfoForUI[cellData.rowIndex][\r\n                            cellData.field\r\n                          ]\r\n                        ) {\r\n                          return new Date(\r\n                            otherData.LocalTranInfoForUI[cellData.rowIndex][\r\n                              cellData.field\r\n                            ]\r\n                          ).toLocaleString();\r\n                        }\r\n                      }}\r\n                    ></DataTable.Column>\r\n                  </DataTable>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          {otherData.BatchInfoForUI.length > 0 ? (\r\n            <div>\r\n              <div className=\"col col-md-8 col-lg-9 col col-xl-9\">\r\n                <h4>{t(\"LocalTransactions_BatchDetails\")}</h4>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col-12 detailsTable\">\r\n                  <DataTable\r\n                    data={otherData.BatchInfoForUI}\r\n                    scrollable={true}\r\n                    scrollHeight=\"300px\"\r\n                  >\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"ProductCode\"\r\n                      field=\"ProductCode\"\r\n                      header={t(\"ContractInfo_Product\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"ProductType\"\r\n                      field=\"ProductType\"\r\n                      header={t(\"ProductType_Title\")}\r\n                      renderer={(cellData) => {\r\n                        return t(\r\n                          otherData.BatchInfoForUI[cellData.rowIndex][\r\n                            cellData.field\r\n                          ]\r\n                        );\r\n                      }}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"MeterCode\"\r\n                      field=\"MeterCode\"\r\n                      header={t(\"Meter_Code\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"TankCode\"\r\n                      field=\"TankCode\"\r\n                      header={handleIsRequiredCompartmentCell(t(\"TankCode\"))}\r\n                      editable={true}\r\n                      editFieldType=\"text\"\r\n                      customEditRenderer={(cellData) =>\r\n                        handleTankEditDropDown(cellData)\r\n                      }\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"GrossQuantity\"\r\n                      field=\"GrossQuantity\"\r\n                      header={t(\"GrossQuantity\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"NetQuantity\"\r\n                      field=\"NetQuantity\"\r\n                      header={t(\"NetQuantity\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"StartTotalizer\"\r\n                      field=\"StartTotalizer\"\r\n                      header={t(\"StartTotalizer\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"EndTotalizer\"\r\n                      field=\"EndTotalizer\"\r\n                      header={t(\"EndTotalizer\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"Density\"\r\n                      field=\"Density\"\r\n                      header={t(\"Density\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"Pressure\"\r\n                      field=\"Pressure\"\r\n                      header={t(\"Pressure\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"Temperature\"\r\n                      field=\"Temperature\"\r\n                      header={t(\"Temperature\")}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"StartTime\"\r\n                      field=\"StartTime\"\r\n                      header={t(\"StartTime\")}\r\n                      renderer={(cellData) => {\r\n                        if (\r\n                          otherData.BatchInfoForUI[cellData.rowIndex][\r\n                            cellData.field\r\n                          ]\r\n                        ) {\r\n                          return new Date(\r\n                            otherData.BatchInfoForUI[cellData.rowIndex][\r\n                              cellData.field\r\n                            ]\r\n                          ).toLocaleString();\r\n                        }\r\n                      }}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"EndTime\"\r\n                      field=\"EndTime\"\r\n                      header={t(\"EndTime\")}\r\n                      renderer={(cellData) => {\r\n                        if (\r\n                          otherData.BatchInfoForUI[cellData.rowIndex][\r\n                            cellData.field\r\n                          ]\r\n                        ) {\r\n                          return new Date(\r\n                            otherData.BatchInfoForUI[cellData.rowIndex][\r\n                              cellData.field\r\n                            ]\r\n                          ).toLocaleString();\r\n                        }\r\n                      }}\r\n                    ></DataTable.Column>\r\n                  </DataTable>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          {modMapTransactions.TransLoadBcu === true &&\r\n          modMapTransactions.TransLoadSource ===\r\n            Constants.TransportationType.RAIL ? (\r\n            <div className=\"row\">\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  indicator=\"required\"\r\n                  placeholder={t(\"Common_Select\")}\r\n                  label={t(\"Rail_Receipt_Code\")}\r\n                  options={getOptionsWithSelect(\r\n                    listOptions.receiptCodes,\r\n                    t(\"Common_Select\")\r\n                  )}\r\n                  value={modMapTransactions.EntityCode}\r\n                  onChange={(data) => onFieldChange(\"EntityCode\", data)}\r\n                  error={t(validationErrors.EntityCode)}\r\n                  reserveSpace={false}\r\n                  search={true}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                  onSearch={onReceiptSearchChange}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  indicator=\"required\"\r\n                  placeholder={t(\"Common_Select\")}\r\n                  label={t(\"RailWagonConfigurationDetails_RailWagonCode\")}\r\n                  options={listOptions.railWagonCodes}\r\n                  value={modMapTransactions.WagonCode}\r\n                  onChange={(data) => onFieldChange(\"WagonCode\", data)}\r\n                  error={t(validationErrors.WagonCode)}\r\n                  reserveSpace={false}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          {modMapTransactions.TransLoadBcu === true &&\r\n          modMapTransactions.TransLoadSource ===\r\n            Constants.TransportationType.MARINE ? (\r\n            <div className=\"row\">\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  indicator=\"required\"\r\n                  placeholder={t(\"Common_Select\")}\r\n                  label={t(\"LD_Marine_ReceiptCode\")}\r\n                  options={getOptionsWithSelect(\r\n                    listOptions.receiptCodes,\r\n                    t(\"Common_Select\")\r\n                  )}\r\n                  value={modMapTransactions.EntityCode}\r\n                  onChange={(data) => onFieldChange(\"EntityCode\", data)}\r\n                  error={t(validationErrors.EntityCode)}\r\n                  reserveSpace={false}\r\n                  search={true}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                  onSearch={onReceiptSearchChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { MapTransactionsDetail } from \"../../UIBase/Details/MapTransactionsDetail\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { emptyMapTransactions } from \"../../../JS/DefaultEntities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as getUserDetails from \"../../../Redux/Actions/GetUserDetails\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { mapTransactionsValidationDef } from \"../../../JS/ValidationDef\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport lodash from \"lodash\";\r\nimport { Button,Input,Modal } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport {  toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\n\r\nclass MapTransactionsDetailComposite extends Component {\r\n  state = {\r\n    modMapTransactions: lodash.cloneDeep(emptyMapTransactions),\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      mapTransactionsValidationDef\r\n    ),\r\n    otherData: {\r\n      ScheduledDate: \"\",\r\n      Status: \"\",\r\n      IsValidStatus: true,\r\n      DriverCode: \"\",\r\n      VehicleCode: \"\",\r\n      ProductCode: \"\",\r\n      LocalTranInfoForUI: [],\r\n      BatchInfoForUI: [],\r\n      DispatchReceiptInfoForUI: [],\r\n    },\r\n    isReadyToRender: true,\r\n    transportationTypeOptions: [],\r\n    transactionTypeOptions: [],\r\n    shareholderCodeOptions: [],\r\n    dispatchReceiptCodeOptions: [],\r\n    transactionCodeOptions: [],\r\n    transactionCodeSearchOptions: [],\r\n    tankCodeOptions: [],\r\n    selectedCompRow: [],\r\n    selectLocalTransactionRow: [],\r\n    receiptCodeOptions: [],\r\n    receiptCodeSearchOptions: [],\r\n    railWagonCodeOptions: [],\r\n    latestMeterCode: \"\",\r\n    closeRailShipment: \"ViewRailDispatchList_CloseRailShipment\",\r\n    printBOL: \"ViewRailDispatchList_PrintBOL\",\r\n    isCloseEnabled: false,\r\n    isPrintEnabled: false,\r\n    reasonForClosure:\"\",\r\n    launchPopup: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getTransactionTypes();\r\n      this.getShareholders();\r\n    } catch (error) {\r\n      console.log(\"MapTransactionsDetail:Error occurred on \", error);\r\n    }\r\n  }\r\n\r\n  getTransactionTypes() {\r\n    const data = {\r\n      shipment: \"DISPATCH\",\r\n      receipt: \"RECEIPT\",\r\n    };\r\n    // this.props.transportationType === Constants.TransportationType.ROAD\r\n    //   ? {\r\n    //       shipment: \"DISPATCH\",\r\n    //       receipt: \"RECEIPT\",\r\n    //     }\r\n    //   : {\r\n    //       shipment: \"DISPATCH\",\r\n    //       receipt: \"RECEIPT\",\r\n    //     };\r\n    const transactionTypeOptions = [];\r\n    for (let key in data) {\r\n      transactionTypeOptions.push({ text: data[key], value: data[key] });\r\n    }\r\n    this.setState({ transactionTypeOptions });\r\n  }\r\n\r\n  getShareholders() {\r\n    const shareholderCodeOptions = Utilities.transferListtoOptions(\r\n      this.props.userDetails.EntityResult.ShareholderList\r\n    );\r\n    const modMapTransactions = lodash.cloneDeep(this.state.modMapTransactions);\r\n    modMapTransactions.ShareholderCode = this.props.selectedShareholder;\r\n    modMapTransactions.TransportationType = this.props.transportationType;\r\n    this.getTransactionCodes(modMapTransactions);\r\n    this.setState({ modMapTransactions, shareholderCodeOptions });\r\n  }\r\n\r\n  getTransactionCodes(mapTransactions) {\r\n    try {\r\n      const notification = {\r\n        messageType: \"critical\",\r\n        message: \"LocalTransaction_MatchTransaction\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Common_TransactionCode\"],\r\n            keyValues: [mapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      const obj = {\r\n        TransportationType: this.props.transportationType,\r\n        TransactionType: mapTransactions.TransactionType,\r\n        ShareholderCode: mapTransactions.ShareholderCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetDispatchOrReceiptCodes,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult === null) {\r\n              console.log(\r\n                \"Error in GetDispatchOrReceiptCodes:\",\r\n                result.ErrorList\r\n              );\r\n            } else if (Array.isArray(result.EntityResult.Table)) {\r\n              const transactionCodeList = [];\r\n              for (let item of result.EntityResult.Table) {\r\n                transactionCodeList.push(item.Code);\r\n              }\r\n              const transactionCodeOptions =\r\n                Utilities.transferListtoOptions(transactionCodeList);\r\n              let transactionCodeSearchOptions = lodash.cloneDeep(\r\n                transactionCodeOptions\r\n              );\r\n              if (\r\n                transactionCodeOptions.length > Constants.filteredOptionsCount\r\n              ) {\r\n                transactionCodeSearchOptions =\r\n                  transactionCodeSearchOptions.slice(\r\n                    0,\r\n                    Constants.filteredOptionsCount\r\n                  );\r\n              }\r\n              this.setState({\r\n                transactionCodeOptions,\r\n                transactionCodeSearchOptions,\r\n              });\r\n            }\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            console.log(\"Error in getTransactionCodes:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting getTransactionCodes:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on getTransactionCodes\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getRoadDispatch(modMapTransactions, otherData) {\r\n    try {\r\n      const notification = {\r\n        messageType: \"critical\",\r\n        message: \"LocalTransaction_MatchTransaction\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Common_TransactionCode\"],\r\n            keyValues: [modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      const keyCode = [\r\n        {\r\n          key: KeyCodes.shipmentCode,\r\n          value: modMapTransactions.TransactionCode,\r\n        },\r\n      ];\r\n      const obj = {\r\n        ShareHolderCode: modMapTransactions.ShareholderCode,\r\n        keyDataCode: KeyCodes.shipmentCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetShipment,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.getShipmentStatusOperations(result.EntityResult);\r\n            \r\n            modMapTransactions.TransLoadSource =\r\n              result.EntityResult.TransloadSourceType;\r\n            otherData.ScheduledDate = result.EntityResult.ScheduledDate;\r\n            otherData.Status = result.EntityResult.Status;\r\n            otherData.DriverCode = result.EntityResult.DriverCode;\r\n            otherData.VehicleCode = result.EntityResult.VehicleCode;\r\n            otherData.DispatchReceiptInfoForUI = [];\r\n            if (\r\n              result.EntityResult.ShipmentCompartments != null &&\r\n              result.EntityResult.ShipmentCompartments.length > 0\r\n            ) {\r\n              const compartments =\r\n                result.EntityResult.ShipmentCompartments.sort(\r\n                  (item1, item2) => {\r\n                    if (\r\n                      item1.CompartmentSeqNoInVehicle <\r\n                      item2.CompartmentSeqNoInVehicle\r\n                    ) {\r\n                      return -1;\r\n                    } else if (\r\n                      item1.CompartmentSeqNoInVehicle >\r\n                      item2.CompartmentSeqNoInVehicle\r\n                    ) {\r\n                      return 1;\r\n                    } else {\r\n                      return 0;\r\n                    }\r\n                  }\r\n                );\r\n              compartments.forEach((element) => {\r\n                const compartmentInfo = {\r\n                  ID: \"\",\r\n                  ShareholderCode: element.ShareholderCode,\r\n                  CarrierCompanyCode: result.EntityResult.CarrierCode,\r\n                  TrailerCode: element.TrailerCode,\r\n                  CompartmentCode: element.CompartmentCode,\r\n                  CompartmentSeqNoInVehicle: element.CompartmentSeqNoInVehicle,\r\n                  FinishedProductCode: element.FinishedProductCode,\r\n                  CustomerOrSupplierCode: \"\",\r\n                  DestinationOrOriginTerminalCode: \"\",\r\n                  PlannedQuantity:\r\n                    element.Quantity === null\r\n                      ? \"0 \" + element.QuantityUOM\r\n                      : element.Quantity.toLocaleString() +\r\n                        \" \" +\r\n                        element.QuantityUOM,\r\n                  ActualQuantity:\r\n                    element.LoadedQuantity === null\r\n                      ? \"0 \" + element.QuantityUOM\r\n                      : element.LoadedQuantity.toLocaleString() +\r\n                        \" \" +\r\n                        element.QuantityUOM,\r\n                  Status: element.ShipmentCompartmentStatus,\r\n                };\r\n                result.EntityResult.ShipmentDestinationCompartmentsInfo.forEach(\r\n                  (element) => {\r\n                    if (\r\n                      element.CompartmentCode ===\r\n                      compartmentInfo.CompartmentCode\r\n                    ) {\r\n                      compartmentInfo.CustomerOrSupplierCode =\r\n                        element.CustomerCode;\r\n                      compartmentInfo.DestinationOrOriginTerminalCode =\r\n                        element.DestinationCode;\r\n                    }\r\n                  }\r\n                );\r\n                otherData.DispatchReceiptInfoForUI.push(compartmentInfo);\r\n              });\r\n              if (\r\n                otherData.Status !== \"INTERRUPTED\" &&\r\n                otherData.Status !== \"PARTIALLY_LOADED\" &&\r\n                otherData.Status !== \"QUEUED\"\r\n              ) {\r\n                notification.messageType = \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = false;\r\n                notification.messageResultDetails[0].errorMessage =\r\n                  \"MapTransactions_TransactionNotInValidState\";\r\n                this.props.onNotice(notification);\r\n                otherData.IsValidStatus = false;\r\n              } else {\r\n                otherData.IsValidStatus = true;\r\n              }\r\n              this.setState({\r\n                modMapTransactions,\r\n                otherData,\r\n              });\r\n            } else {\r\n              notification.messageType = \"critical\";\r\n              notification.messageResultDetails[0].isSuccess = false;\r\n              notification.messageResultDetails[0].errorMessage =\r\n                \"LocalTransaction_CompartmentPlanNotAvailable\";\r\n              this.props.onNotice(notification);\r\n            }\r\n          } else {\r\n            console.log(\"Error in getRoadDispatch: \", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"Error while getting getRoadDispatch: \",\r\n            error,\r\n            modMapTransactions.TransactionCode\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on getRoadDispatch\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getCloseModalPopupText()\r\n  {\r\n    \r\n    //default label values\r\n    var popupVariables= {\r\n    popupHeaderLabel:  \"ViewShipment_CloseHeader\",\r\n    msgStatusHeader : \"ViewAllShipment_ShipmentClose\",\r\n    errorMsg: \"Enter_ReasonForCloseure\",\r\n    keyField : \"ShipmentCompDetail_ShipmentNumber\",\r\n    }\r\n\r\n    if((this.state.modMapTransactions.TransactionType === \"DISPATCH\" || this.state.modMapTransactions.TransactionType === \"SHIPMENT\") && (this.state.modMapTransactions.TransportationType===\"MARINE\" || this.state.modMapTransactions.TransportationType===\"RAIL\"))\r\n    {\r\n      popupVariables.popupHeaderLabel= \"ViewRailDispatchList_ForceCloseHeader\";\r\n      popupVariables.msgStatusHeader=\"RailDispatch_CloseDispatchStatus\";\r\n      popupVariables.errorMsg=\"ViewRailDispatchList_ReasonForCloseure\";\r\n      popupVariables.keyField=\"ViewRailDispatchDetails_DispatchCode\";\r\n  }\r\n  else if(this.state.modMapTransactions.TransactionType === \"RECEIPT\" )\r\n    {\r\n      popupVariables.popupHeaderLabel= \"Receipt_ForceCloseHeader\";\r\n      popupVariables.msgStatusHeader= \"ViewReceipt_CloseStatus\";\r\n      popupVariables.errorMsg= \"Enter_Receipt_ReasonForCloseure\";\r\n      popupVariables.keyField= \"Receipt_Code\";\r\n    }\r\n  return popupVariables;\r\n  }\r\n\r\n  getRoadReceipt(modMapTransactions, otherData) {\r\n    try {\r\n      const notification = {\r\n        messageType: \"critical\",\r\n        message: \"LocalTransaction_MatchTransaction\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Common_TransactionCode\"],\r\n            keyValues: [modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      const keyCode = [\r\n        {\r\n          key: KeyCodes.receiptCode,\r\n          value: modMapTransactions.TransactionCode,\r\n        },\r\n      ];\r\n      const obj = {\r\n        ShareHolderCode: modMapTransactions.ShareholderCode,\r\n        keyDataCode: KeyCodes.receiptCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetReceipt,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n\r\n            this.getReciptsStatusOperations(result.EntityResult.ReceiptStatus,result.EntityResult.IsVolumeBased);\r\n\r\n            modMapTransactions.TransLoadSource =\r\n              result.EntityResult.TransloadSourceType;\r\n            otherData.ScheduledDate = result.EntityResult.ScheduledDate;\r\n            otherData.Status = result.EntityResult.ReceiptStatus;\r\n            otherData.DriverCode = result.EntityResult.DriverCode;\r\n            otherData.VehicleCode = result.EntityResult.VehicleCode;\r\n            otherData.DispatchReceiptInfoForUI = [];\r\n            if (\r\n              result.EntityResult.ReceiptCompartmentsInfo !== null &&\r\n              result.EntityResult.ReceiptCompartmentsInfo.length > 0\r\n            ) {\r\n              const compartments =\r\n                result.EntityResult.ReceiptCompartmentsInfo.sort(\r\n                  (item1, item2) => {\r\n                    if (\r\n                      item1.CompartmentSeqNoInVehicle <\r\n                      item2.CompartmentSeqNoInVehicle\r\n                    ) {\r\n                      return -1;\r\n                    } else if (\r\n                      item1.CompartmentSeqNoInVehicle >\r\n                      item2.CompartmentSeqNoInVehicle\r\n                    ) {\r\n                      return 1;\r\n                    } else {\r\n                      return 0;\r\n                    }\r\n                  }\r\n                );\r\n              compartments.forEach((element) => {\r\n                const compartmentInfo = {\r\n                  ID: \"\",\r\n                  ShareholderCode: element.ShareholderCode,\r\n                  CarrierCompanyCode: result.EntityResult.CarrierCode,\r\n                  TrailerCode: element.TrailerCode,\r\n                  CompartmentCode: element.CompartmentCode,\r\n                  CompartmentSeqNoInVehicle: element.CompartmentSeqNoInVehicle,\r\n                  FinishedProductCode: element.FinishedProductCode,\r\n                  CustomerOrSupplierCode: \"\",\r\n                  DestinationOrOriginTerminalCode: \"\",\r\n                  PlannedQuantity:\r\n                    element.Quantity === null\r\n                      ? \"0 \" + element.QuantityUOM\r\n                      : element.Quantity.toLocaleString() +\r\n                        \" \" +\r\n                        element.QuantityUOM,\r\n                  ActualQuantity:\r\n                    element.UnLoadedQuantity === null\r\n                      ? \"0 \" + element.QuantityUOM\r\n                      : element.UnLoadedQuantity.toLocaleString() +\r\n                        \" \" +\r\n                        element.UnLoadedQuantityUOM,\r\n                  Status: element.ReceiptCompartmentStatus,\r\n                  UnLoadedQuantity: 0,\r\n                };\r\n                result.EntityResult.ReceiptOriginTerminalCompartmentsInfo.forEach(\r\n                  (element) => {\r\n                    if (\r\n                      element.CompartmentCode ===\r\n                      compartmentInfo.CompartmentCode\r\n                    ) {\r\n                      compartmentInfo.CustomerOrSupplierCode =\r\n                        element.SupplierCode;\r\n                      compartmentInfo.DestinationOrOriginTerminalCode =\r\n                        element.OriginTerminalCode;\r\n                    }\r\n                  }\r\n                );\r\n                otherData.DispatchReceiptInfoForUI.push(compartmentInfo);\r\n              });\r\n              if (\r\n                otherData.Status !== \"INTERRUPTED\" &&\r\n                otherData.Status !== \"PARTIALLY_UNLOADED\" &&\r\n                otherData.Status !== \"QUEUED\"\r\n              ) {\r\n                notification.messageType = \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = false;\r\n                notification.messageResultDetails[0].errorMessage =\r\n                  \"MapTransactions_TransactionNotInValidState\";\r\n                this.props.onNotice(notification);\r\n                otherData.IsValidStatus = false;\r\n              } else {\r\n                otherData.IsValidStatus = true;\r\n              }\r\n              this.setState({\r\n                modMapTransactions,\r\n                otherData,\r\n              });\r\n            } else {\r\n              notification.messageType = \"critical\";\r\n              notification.messageResultDetails[0].isSuccess = false;\r\n              notification.messageResultDetails[0].errorMessage =\r\n                \"LocalTransaction_CompartmentPlanNotAvailable\";\r\n              this.props.onNotice(notification);\r\n            }\r\n          } else {\r\n            console.log(\"Error in getRoadReceipt:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"Error while getting getRoadReceipt:\",\r\n            error,\r\n            modMapTransactions.TransactionCode\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on GetRoadReceipt\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getRailDispatch(modMapTransactions, otherData) {\r\n    try {\r\n      const notification = {\r\n        messageType: \"critical\",\r\n        message: \"LocalTransaction_MatchTransaction\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Common_TransactionCode\"],\r\n            keyValues: [modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      const keyCode = [\r\n        {\r\n          key: KeyCodes.railDispatchCode,\r\n          value: modMapTransactions.TransactionCode,\r\n        },\r\n      ];\r\n      const obj = {\r\n        ShareHolderCode: modMapTransactions.ShareholderCode,\r\n        keyDataCode: KeyCodes.railDispatchCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetRailDispatch,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n\r\n            this.GetRailDispatchOperations(result.EntityResult.DispatchStatus);\r\n\r\n            modMapTransactions.TransLoadSource = null;\r\n            otherData.ScheduledDate = result.EntityResult.ScheduledDate;\r\n            otherData.Status = result.EntityResult.DispatchStatus;\r\n            otherData.DispatchReceiptInfoForUI = [];\r\n            if (\r\n              result.EntityResult.DispatchCompartmentPlanList !== null &&\r\n              result.EntityResult.DispatchCompartmentPlanList.length > 0\r\n            ) {\r\n              let ID = 1;\r\n              result.EntityResult.DispatchCompartmentPlanList.forEach(\r\n                (element) => {\r\n                  const compartmentInfo = {\r\n                    ID: ID++,\r\n                    ShareholderCode: element.ShareholderCode,\r\n                    CarrierCompanyCode: element.CarrierCompanyCode,\r\n                    TrailerCode: element.TrailerCode,\r\n                    CompartmentCode: element.CompartmentCode,\r\n                    CompartmentSeqNoInVehicle: element.SequenceNo,\r\n                    FinishedProductCode: element.FinishedProductCode,\r\n                    CustomerOrSupplierCode: \"\",\r\n                    DestinationOrOriginTerminalCode: \"\",\r\n                    PlannedQuantity:\r\n                      element.PlannedQuantity === null ||\r\n                      element.PlanQuantityUOM === null\r\n                        ? \"\"\r\n                        : element.PlannedQuantity.toLocaleString() +\r\n                          \" \" +\r\n                          element.PlanQuantityUOM,\r\n                    ActualQuantity:\r\n                      element.LoadedQuantity === null ||\r\n                      element.PlanQuantityUOM === null\r\n                        ? \"\"\r\n                        : element.LoadedQuantity.toLocaleString() +\r\n                          \" \" +\r\n                          element.LoadedQuantityUOM,\r\n                    Status: element.DispatchCompartmentStatus,\r\n                  };\r\n                  result.EntityResult.DispatchCompartmentDetailPlanList.forEach(\r\n                    (element) => {\r\n                      if (\r\n                        element.CompartmentCode ===\r\n                        compartmentInfo.CompartmentCode\r\n                      ) {\r\n                        compartmentInfo.CustomerOrSupplierCode =\r\n                          element.CustomerCode;\r\n                        compartmentInfo.DestinationOrOriginTerminalCode =\r\n                          element.DestinationCode;\r\n                      }\r\n                    }\r\n                  );\r\n                  otherData.DispatchReceiptInfoForUI.push(compartmentInfo);\r\n                }\r\n              );\r\n              this.setState({\r\n                modMapTransactions,\r\n                otherData,\r\n              });\r\n            } else {\r\n              notification.messageType = \"critical\";\r\n              notification.messageResultDetails[0].isSuccess = false;\r\n              notification.messageResultDetails[0].errorMessage =\r\n                \"MapTransactions_WagonPlanningInDispatchNotAvailable\";\r\n              this.props.onNotice(notification);\r\n            }\r\n          } else {\r\n            console.log(\"Error in getRailDispatch:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"Error while getting getRailDispatch:\",\r\n            error,\r\n            modMapTransactions.TransactionCode\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on getRailDispatch\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getRailReceipt(modMapTransactions, otherData) {\r\n    try {\r\n      const notification = {\r\n        messageType: \"critical\",\r\n        message: \"LocalTransaction_MatchTransaction\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Common_TransactionCode\"],\r\n            keyValues: [modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      const keyCode = [\r\n        {\r\n          key: KeyCodes.railReceiptCode,\r\n          value: modMapTransactions.TransactionCode,\r\n        },\r\n      ];\r\n      const obj = {\r\n        ShareHolderCode: modMapTransactions.ShareholderCode,\r\n        keyDataCode: KeyCodes.railReceiptCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetRailReceipt,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.GetRailReceiptOperations(result.EntityResult.ReceiptStatus);\r\n            modMapTransactions.TransLoadSource = null;\r\n            otherData.ScheduledDate = result.EntityResult.ScheduledDate;\r\n            otherData.Status = result.EntityResult.ReceiptStatus;\r\n            otherData.DispatchReceiptInfoForUI = [];\r\n            if (\r\n              result.EntityResult.RailMarineReceiptCompartmentPlanList !==\r\n                null &&\r\n              result.EntityResult.RailMarineReceiptCompartmentPlanList.length >\r\n                0\r\n            ) {\r\n              result.EntityResult.RailMarineReceiptCompartmentPlanList.forEach(\r\n                (element) => {\r\n                  const compartmentInfo = {\r\n                    ID: \"\",\r\n                    ShareholderCode: element.ShareholderCode,\r\n                    CarrierCompanyCode: element.CarrierCompanyCode,\r\n                    TrailerCode: element.TrailerCode,\r\n                    CompartmentCode: element.CompartmentCode,\r\n                    CompartmentSeqNoInVehicle: element.SequenceNo,\r\n                    FinishedProductCode: element.FinishedProductCode,\r\n                    CustomerOrSupplierCode: \"\",\r\n                    DestinationOrOriginTerminalCode: \"\",\r\n                    PlannedQuantity:\r\n                      element.PlannedQuantity === null ||\r\n                      element.PlanQuantityUOM === null\r\n                        ? \"\"\r\n                        : element.PlannedQuantity.toLocaleString() +\r\n                          \" \" +\r\n                          element.PlanQuantityUOM,\r\n                    ActualQuantity:\r\n                      element.UnloadedQuantity === null ||\r\n                      element.UnloadedQuantityUOM === null\r\n                        ? \"\"\r\n                        : element.UnloadedQuantity.toLocaleString() +\r\n                          \" \" +\r\n                          element.UnloadedQuantityUOM,\r\n                    Status: element.ReceiptCompartmentStatus,\r\n                  };\r\n                  result.EntityResult.RailMarineReceiptCompartmentDetailPlanList.forEach(\r\n                    (element) => {\r\n                      if (\r\n                        element.CompartmentCode ===\r\n                        compartmentInfo.CompartmentCode\r\n                      ) {\r\n                        compartmentInfo.CustomerOrSupplierCode =\r\n                          element.SupplierCode;\r\n                        compartmentInfo.DestinationOrOriginTerminalCode =\r\n                          element.OriginTerminalCode;\r\n                      }\r\n                    }\r\n                  );\r\n                  otherData.DispatchReceiptInfoForUI.push(compartmentInfo);\r\n                }\r\n              );\r\n              this.setState({\r\n                modMapTransactions,\r\n                otherData,\r\n              });\r\n            } else {\r\n              notification.messageType = \"critical\";\r\n              notification.messageResultDetails[0].isSuccess = false;\r\n              notification.messageResultDetails[0].errorMessage =\r\n                \"MapTransactions_WagonPlanningInDispatchNotAvailable\";\r\n              this.props.onNotice(notification);\r\n            }\r\n          } else {\r\n            console.log(\"Error in getRailReceipt:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"Error while getting getRailReceipt:\",\r\n            error,\r\n            modMapTransactions.TransactionCode\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on getRailReceipt\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleShipmentReceiptClose()\r\n  {\r\n    try {\r\n      if(this.props.transportationType===\"ROAD\")\r\n      {\r\n      if(this.state.modMapTransactions.TransactionType===\"SHIPMENT\" || this.state.modMapTransactions.TransactionType===\"DISPATCH\")\r\n      {\r\n        this.handleTruckShipmentClose();\r\n      }\r\n      else\r\n      {\r\n        this.handleTruckReceiptClose();\r\n      }\r\n    }\r\n    else\r\n    if(this.props.transportationType===\"MARINE\")\r\n      {\r\n      if(this.state.modMapTransactions.TransactionType===\"SHIPMENT\" || this.state.modMapTransactions.TransactionType===\"DISPATCH\")\r\n      {\r\n        this.handleMarineShipmentClose();\r\n      }\r\n      else\r\n      {\r\n        this.handleMarineReceiptClose();\r\n      }\r\n    }\r\n    if(this.props.transportationType===\"RAIL\")\r\n      {\r\n      if(this.state.modMapTransactions.TransactionType===\"SHIPMENT\" || this.state.modMapTransactions.TransactionType===\"DISPATCH\")\r\n      {\r\n        this.handleRailShipmentClose();\r\n      }\r\n      else\r\n      {\r\n        this.handleRailReceiptClose();\r\n      }\r\n    }\r\n    }\r\n    catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on handleShipmentReceiptClose\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  handleTruckShipmentClose() {\r\n    try {\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"ViewAllShipment_ShipmentClose\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [this.state.keyField],\r\n            keyValues: [this.state.modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      let entity = this.formCloseShipmentRequest();\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.shareholderCode,\r\n          value: this.state.selectedShareholder,\r\n        },\r\n        {\r\n          key: KeyCodes.shipmentCode,\r\n          value: this.state.modMapTransactions.TransactionCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.shipmentCode,\r\n        KeyCodes: keyCode,\r\n        Entity: entity,\r\n      };\r\n      axios(\r\n        RestAPIs.CloseShipment,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            const otherData = lodash.cloneDeep(this.state.otherData);\r\n            otherData.Status=Constants.Shipment_Status.CLOSED ;\r\n            this.setState({\r\n              isPrintEnabled:true,otherData:otherData,})\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while shipment close:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while closing the shipment:\", error);\r\n    }\r\n  }\r\n\r\n  handleTruckReceiptClose() {\r\n    try {\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"ViewReceipt_CloseSuccess\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"ReceiptCode\"],\r\n            keyValues: [this.state.modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.shareholderCode,\r\n          value: this.props.selectedShareholder,\r\n        },\r\n        {\r\n          key: KeyCodes.receiptStatus,\r\n          value: this.state.otherData.Status,\r\n        },\r\n        {\r\n          key: KeyCodes.receiptCode,\r\n          value: this.state.modMapTransactions.TransactionCode,\r\n        },\r\n        {\r\n          key: KeyCodes.driverCode,\r\n          value: this.state.otherData.DriverCoderiverCode,\r\n        },\r\n        {\r\n          key: KeyCodes.forceClosureReason,\r\n          value: this.state.reasonForClosure\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.receiptCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.ReceiptClose,\r\n        Utilities.getAuthenticationObjectforPost(obj, this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            const otherData = lodash.cloneDeep(this.state.otherData);\r\n            otherData.Status=Constants.Shipment_Status.CLOSED ;\r\n            this.setState({\r\n              isPrintEnabled:true,otherData:otherData,})\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while shipment close:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while closing the shipment:\", error);\r\n    }\r\n  }\r\n\r\n  handleMarineShipmentClose() {\r\n    try {\r\n \r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.marineDispatchCode,\r\n          value: this.state.modMapTransactions.TransactionCode,\r\n        },\r\n        {\r\n          key: KeyCodes.marineDispatchReason,\r\n          value: this.state.reasonForClosure,\r\n        },\r\n      ];\r\n      var obj = {\r\n        keyDataCode: KeyCodes.marineDispatchCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"ViewMarineDispatch_CloseShipment_status\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Marine_ShipmentCompDetail_ShipmentNumber\"],\r\n            keyValues: [this.state.modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.MarineDispatchCloseShipment,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            const otherData = lodash.cloneDeep(this.state.otherData);\r\n            otherData.Status=Constants.Shipment_Status.CLOSED ;\r\n            this.setState({\r\n              isPrintEnabled:true,otherData:otherData,})\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while Marine shipment close:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while closing the Marine shipment:\", error);\r\n    }\r\n  }\r\n\r\n  handleMarineReceiptClose() {\r\n    try {\r\n \r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.marineReceiptCode,\r\n          value: this.state.modMapTransactions.TransactionCode,\r\n        },\r\n        {\r\n          key: KeyCodes.marineReason,\r\n          value: this.state.reasonForClosure,\r\n        },\r\n      ];\r\n      var obj = {\r\n        keyDataCode: KeyCodes.marineReceiptCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n       \r\n      var notification = {\r\n        messageType: \"success\",\r\n        message: \"ViewMarineReceipt_CloseReceipt_status\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Marine_ReceiptCompDetail_ShipmentNumber\"],\r\n            keyValues: [this.state.modMapTransactions.TransactionCode],\r\n            isSuccess: true,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.MarineReceiptCloseReceipt,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            const otherData = lodash.cloneDeep(this.state.otherData);\r\n            otherData.Status=Constants.Shipment_Status.CLOSED ;\r\n            this.setState({\r\n              isPrintEnabled:true,otherData:otherData,})\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while Marine Receipt close:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while closing the Marine Receipt:\", error);\r\n    }\r\n  }\r\n\r\n  handleRailShipmentClose() {\r\n    try {\r\n \r\n      \r\n      const obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        KeyCodes: [\r\n          {\r\n            key: \"RailDispatchCode\",\r\n            value: this.state.modMapTransactions.TransactionCode,\r\n          },\r\n        ],\r\n        Entity: {\r\n          Reason: this.state.reasonForClosure,\r\n          DispatchCode: this.state.modMapTransactions.TransactionCode,\r\n          DispatchStatus: this.state.otherData.Status,\r\n        },\r\n      };\r\n\r\n      const notification = {\r\n        messageType: \"critical\",\r\n        message: \"ViewRailDispatch_CloseDispatch_status\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"RailDispatchPlanDetail_DispatchCode\"],\r\n            keyValues: [this.state.modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.ForceCloseRailDispatch,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            const otherData = lodash.cloneDeep(this.state.otherData);\r\n            otherData.Status=Constants.Shipment_Status.CLOSED ;\r\n            this.setState({\r\n              isPrintEnabled:true,otherData:otherData,})\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while Rail shipment close:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while closing the Rail shipment:\", error);\r\n    }\r\n  }\r\n\r\n  handleRailReceiptClose() {\r\n    try {\r\n \r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.railReceiptCode,\r\n          value: this.state.modMapTransactions.TransactionCode,\r\n        },\r\n      ];\r\n\r\n      let entity = {\r\n        Reason: this.state.reasonForClosure,\r\n        ReceiptCode: this.state.modMapTransactions.TransactionCode,\r\n        ReceiptStatus: this.state.otherData.Status,\r\n      };\r\n      const obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        KeyCodes: keyCode,\r\n        Entity: entity,\r\n      };\r\n      var notification = {\r\n        messageType: \"success\",\r\n        message: \"ViewRailReceipt_CloseReceipt_status\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Receipt_Code\"],\r\n            keyValues: [this.state.modMapTransactions.TransactionCode],\r\n            isSuccess: true,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.ForceCloseRailReceipt,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            const otherData = lodash.cloneDeep(this.state.otherData);\r\n            otherData.Status=Constants.Shipment_Status.CLOSED ;\r\n            this.setState({\r\n              isPrintEnabled:true,otherData:otherData,})\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while Rail Receipt close:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while closing the Rail Receipt:\", error);\r\n    }\r\n  }\r\n\r\n  formCloseShipmentRequest() {\r\n    try {\r\n      //let loadingDetails = lodash.cloneDeep(this.state.staticLoadingDetails)\r\n      let ViewAllTruckShipmentLoadingDetails = {\r\n        topUpDecantApprovalStatus: \"\",\r\n        topUpDecantEnabled: \"\",\r\n        Remarks: \"\",\r\n        listShipmentCompartmentInfo: [],\r\n        listShipmentLoadingCompData: [],\r\n      };\r\n       \r\n      ViewAllTruckShipmentLoadingDetails.Remarks = this.state.reasonForClosure;\r\n\r\n      return ViewAllTruckShipmentLoadingDetails;\r\n    } catch (error) {\r\n      console.log(\r\n        \"Error while forming request for closing the shipment:\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getMarineDispatch(modMapTransactions, otherData) {\r\n    try {\r\n      const notification = {\r\n        messageType: \"critical\",\r\n        message: \"LocalTransaction_MatchTransaction\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Common_TransactionCode\"],\r\n            keyValues: [modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      const keyCode = [\r\n        {\r\n          key: KeyCodes.marineDispatchCode,\r\n          value: modMapTransactions.TransactionCode,\r\n        },\r\n      ];\r\n      const obj = {\r\n        ShareHolderCode: modMapTransactions.ShareholderCode,\r\n        keyDataCode: KeyCodes.marineDispatchCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetMarineDispatch,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.getMarineShipmentStatusOperations(result.EntityResult.DispatchStatus);\r\n            notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            modMapTransactions.TransLoadSource = null;\r\n            otherData.ScheduledDate = result.EntityResult.ScheduledDate;\r\n            otherData.Status = result.EntityResult.DispatchStatus;\r\n            otherData.VehicleCode=  result.EntityResult.VesselCode;\r\n            otherData.DispatchReceiptInfoForUI = [];\r\n            if (\r\n              result.EntityResult.DispatchCompartmentPlanList !== null &&\r\n              result.EntityResult.DispatchCompartmentPlanList.length > 0\r\n            ) {\r\n              let ID = 1;\r\n              result.EntityResult.DispatchCompartmentPlanList.forEach(\r\n                (element) => {\r\n                  const compartmentInfo = {\r\n                    ID: ID++,\r\n                    ShareholderCode: element.ShareholderCode,\r\n                    CarrierCompanyCode: element.CarrierCompanyCode,\r\n                    TrailerCode: element.TrailerCode,\r\n                    CompartmentCode: element.CompartmentCode,\r\n                    CompartmentSeqNoInVehicle: element.CompartmentSeqNoInVehicle,\r\n                    FinishedProductCode: element.FinishedProductCode,\r\n                    CustomerOrSupplierCode: \"\",\r\n                    DestinationOrOriginTerminalCode: \"\",\r\n                    PlannedQuantity:\r\n                      element.PlannedQuantity === null ||\r\n                      element.PlanQuantityUOM === null\r\n                        ? \"\"\r\n                        : element.PlannedQuantity.toLocaleString() +\r\n                          \" \" +\r\n                          element.PlanQuantityUOM,\r\n                    ActualQuantity:\r\n                      element.LoadedQuantity === null ||\r\n                      element.PlanQuantityUOM === null\r\n                        ? \"\"\r\n                        : element.LoadedQuantity.toLocaleString() +\r\n                          \" \" +\r\n                          element.LoadedQuantityUOM,\r\n                    Status: element.DispatchCompartmentStatus,\r\n                  };\r\n                  result.EntityResult.DispatchCompartmentDetailPlanList.forEach(\r\n                    (element) => {\r\n                      if (\r\n                        element.CompartmentCode ===\r\n                        compartmentInfo.CompartmentCode\r\n                      ) {\r\n                        compartmentInfo.CustomerOrSupplierCode =\r\n                          element.CustomerCode;\r\n                        compartmentInfo.DestinationOrOriginTerminalCode =\r\n                          element.DestinationCode;\r\n                      }\r\n                    }\r\n                  );\r\n                  otherData.DispatchReceiptInfoForUI.push(compartmentInfo);\r\n                }\r\n              );\r\n              if (\r\n                otherData.Status !== \"INTERRUPTED\" &&\r\n                otherData.Status !== \"PARTIALLY_LOADED\" &&\r\n                otherData.Status !== \"QUEUED\"\r\n              ) {\r\n                notification.messageType = \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = false;\r\n                notification.messageResultDetails[0].errorMessage =\r\n                  \"MapTransactions_TransactionNotInValidState\";\r\n                this.props.onNotice(notification);\r\n                otherData.IsValidStatus = false;\r\n              } else {\r\n                otherData.IsValidStatus = true;\r\n              }\r\n              this.setState({\r\n                modMapTransactions,\r\n                otherData,\r\n              });\r\n            } else {\r\n              notification.messageType = \"critical\";\r\n              notification.messageResultDetails[0].isSuccess = false;\r\n              notification.messageResultDetails[0].errorMessage =\r\n                \"MapTransactions_WagonPlanningInDispatchNotAvailable\";\r\n              this.props.onNotice(notification);\r\n            }\r\n          } else {\r\n            console.log(\"Error in getMarineDispatch:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"Error while getting getMarineDispatch:\",\r\n            error,\r\n            modMapTransactions.TransactionCode\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on getMarineDispatch\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getMarineReceipt(modMapTransactions, otherData) {\r\n    try {\r\n      const notification = {\r\n        messageType: \"critical\",\r\n        message: \"LocalTransaction_MatchTransaction\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Common_TransactionCode\"],\r\n            keyValues: [modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      const keyCode = [\r\n        {\r\n          key: KeyCodes.marineReceiptCode,\r\n          value: modMapTransactions.TransactionCode,\r\n        },\r\n      ];\r\n      const obj = {\r\n        ShareHolderCode: modMapTransactions.ShareholderCode,\r\n        keyDataCode: KeyCodes.marineReceiptCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetMarineReceipt,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.getMarineReceiptStatusOperations(result.EntityResult.ReceiptStatus);\r\n            modMapTransactions.TransLoadSource = null;\r\n            otherData.ScheduledDate = result.EntityResult.ScheduledDate;\r\n            otherData.Status = result.EntityResult.ReceiptStatus;\r\n            otherData.VehicleCode=  result.EntityResult.VesselCode;\r\n            otherData.DispatchReceiptInfoForUI = [];\r\n            if (\r\n              result.EntityResult.RailMarineReceiptCompartmentPlanList !==\r\n                null &&\r\n              result.EntityResult.RailMarineReceiptCompartmentPlanList.length >\r\n                0\r\n            ) {\r\n              result.EntityResult.RailMarineReceiptCompartmentPlanList.forEach(\r\n                (element) => {\r\n                  const compartmentInfo = {\r\n                    ID: \"\",\r\n                    ShareholderCode: element.ShareholderCode,\r\n                    CarrierCompanyCode: element.CarrierCompanyCode,\r\n                    TrailerCode: element.TrailerCode,\r\n                    CompartmentCode: element.CompartmentCode,\r\n                    CompartmentSeqNoInVehicle: element.CompartmentSeqNoInVehicle,\r\n                    FinishedProductCode: element.FinishedProductCode,\r\n                    CustomerOrSupplierCode: \"\",\r\n                    DestinationOrOriginTerminalCode: \"\",\r\n                    PlannedQuantity:\r\n                      element.PlannedQuantity === null ||\r\n                      element.PlanQuantityUOM === null\r\n                        ? \"\"\r\n                        : element.PlannedQuantity.toLocaleString() +\r\n                          \" \" +\r\n                          element.PlanQuantityUOM,\r\n                    ActualQuantity:\r\n                      element.UnloadedQuantity === null ||\r\n                      element.UnloadedQuantityUOM === null\r\n                        ? \"\"\r\n                        : element.UnloadedQuantity.toLocaleString() +\r\n                          \" \" +\r\n                          element.UnloadedQuantityUOM,\r\n                    Status: element.ReceiptCompartmentStatus,\r\n                  };\r\n                  result.EntityResult.RailMarineReceiptCompartmentDetailPlanList.forEach(\r\n                    (element) => {\r\n                      if (\r\n                        element.CompartmentCode ===\r\n                        compartmentInfo.CompartmentCode\r\n                      ) {\r\n                        compartmentInfo.CustomerOrSupplierCode =\r\n                          element.SupplierCode;\r\n                        compartmentInfo.DestinationOrOriginTerminalCode =\r\n                          element.OriginTerminalCode;\r\n                      }\r\n                    }\r\n                  );\r\n                  otherData.DispatchReceiptInfoForUI.push(compartmentInfo);\r\n                }\r\n              );\r\n              if (\r\n                otherData.Status !== \"INTERRUPTED\" &&\r\n                otherData.Status !== \"PARTIALLY_UNLOADED\" &&\r\n                otherData.Status !== \"QUEUED\"\r\n              ) {\r\n                notification.messageType = \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = false;\r\n                notification.messageResultDetails[0].errorMessage =\r\n                  \"MapTransactions_TransactionNotInValidState\";\r\n                this.props.onNotice(notification);\r\n                otherData.IsValidStatus = false;\r\n              } else {\r\n                otherData.IsValidStatus = true;\r\n              }\r\n              \r\n              this.setState({\r\n                modMapTransactions,\r\n                otherData,\r\n              });\r\n            } else {\r\n              notification.messageType = \"critical\";\r\n              notification.messageResultDetails[0].isSuccess = false;\r\n              notification.messageResultDetails[0].errorMessage =\r\n                \"MapTransactions_WagonPlanningInDispatchNotAvailable\";\r\n              this.props.onNotice(notification);\r\n            }\r\n          } else {\r\n            console.log(\"Error in getMarineReceipt:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"Error while getting getMarineReceipt:\",\r\n            error,\r\n            modMapTransactions.TransactionCode\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on getMarineReceipt\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getLocalTransactions(otherData, compartmentStatus) {\r\n    try {\r\n      const notification = {\r\n        messageType: \"critical\",\r\n        message: \"LocalTransaction_MatchTransaction\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Common_TransactionCode\"],\r\n            keyValues: [this.state.modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      const obj = {\r\n        TransactionType: this.state.modMapTransactions.TransactionType,\r\n        TransportationType: this.props.transportationType,\r\n        ProductCode: otherData.ProductCode,\r\n        ShareholderCode: this.state.modMapTransactions.ShareholderCode,\r\n        LocationCode: \"\",\r\n        DispatchReceiptStatus: otherData.Status,\r\n        CompartmentStatus: compartmentStatus,\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.GetLocalTransactions,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            otherData.LocalTranInfoForUI = result.EntityResult.Table;\r\n            this.setState({ otherData });\r\n            if (result.EntityResult.Table.length === 0) {\r\n              notification.messageType = \"critical\";\r\n              notification.messageResultDetails[0].isSuccess = false;\r\n              notification.messageResultDetails[0].errorMessage =\r\n                \"MapTransactions_NoLocalTransactions\";\r\n              this.props.onNotice(notification);\r\n            }\r\n          } else {\r\n            otherData.LocalTranInfoForUI = [];\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            this.setState({ otherData });\r\n            this.props.onNotice(notification);\r\n            console.log(\"Error in getLocalTransactions:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while get LocalTransactions:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on getLocalTransactions\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getBatchDetails(transaction) {\r\n    try {\r\n      const modMapTransactions = lodash.cloneDeep(\r\n        this.state.modMapTransactions\r\n      );\r\n      const otherData = lodash.cloneDeep(this.state.otherData);\r\n      const notification = {\r\n        messageType: \"critical\",\r\n        message: \"LocalTransaction_MatchTransaction\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Common_TransactionCode\"],\r\n            keyValues: [modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      const keyCode = [\r\n        {\r\n          key: KeyCodes.bcuCode,\r\n          value: transaction.BCUCode,\r\n        },\r\n        {\r\n          key: KeyCodes.TransactionNumber,\r\n          value: transaction.TransactionID,\r\n        },\r\n        {\r\n          key: KeyCodes.BatchNumber,\r\n          value: transaction.BatchID,\r\n        },\r\n      ];\r\n      const obj = {\r\n        ShareHolderCode: modMapTransactions.ShareholderCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetBatchDetails,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            // if (\r\n            //   modMapTransactions.TransportationType ===\r\n            //   Constants.TransportationType.RAIL\r\n            // ) {\r\n            //   modMapTransactions.LoadingDetails = result.EntityResult;\r\n            // } else {\r\n            //   modMapTransactions.LoadingDetails = result.EntityResult;\r\n            // }\r\n            modMapTransactions.LoadingDetails = result.EntityResult;\r\n            otherData.BatchInfoForUI = this.getBatchDetailsForUI(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ modMapTransactions, otherData });\r\n          } else {\r\n            otherData.BatchInfoForUI = [];\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            this.setState({ modMapTransactions, otherData });\r\n            this.props.onNotice(notification);\r\n            console.log(\"Error in GetLocalTransactions:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting GetLocalTransactions:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on getBatchDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getBatchDetailsForUI(loadingInfoList) {\r\n    let detailList = [];\r\n    try {\r\n      let recordID = 1;\r\n      loadingInfoList.forEach((loadingInfo) => {\r\n        detailList.push(\r\n          this.getBatchInfoFromLoadingDetails(\r\n            loadingInfo.LoadingDetailFPinfo,\r\n            0 /*ProductTypeForUI.FinishedProduct*/,\r\n            recordID++\r\n          )\r\n        );\r\n        if (\r\n          loadingInfo.ArrLoadingDetailBP !== null &&\r\n          loadingInfo.ArrLoadingDetailBP !== undefined &&\r\n          Array.isArray(loadingInfo.ArrLoadingDetailBP)\r\n        ) {\r\n          loadingInfo.ArrLoadingDetailBP.forEach((baseProductInfo) => {\r\n            detailList.push(\r\n              this.getBatchInfoFromLoadingDetails(\r\n                baseProductInfo,\r\n                1 /*ProductTypeForUI.BaseProduct*/,\r\n                recordID++\r\n              )\r\n            );\r\n          });\r\n        }\r\n        if (\r\n          loadingInfo.ArrLoadingDetailAdditive !== null &&\r\n          loadingInfo.ArrLoadingDetailAdditive !== undefined &&\r\n          Array.isArray(loadingInfo.ArrLoadingDetailAdditive)\r\n        ) {\r\n          loadingInfo.ArrLoadingDetailAdditive.forEach((additiveInfo) => {\r\n            detailList.push(\r\n              this.getBatchInfoFromLoadingDetails(\r\n                additiveInfo,\r\n                2 /*ProductTypeForUI.Additive*/,\r\n                recordID++\r\n              )\r\n            );\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getting GetBatchDetailsForUI:\", error);\r\n    }\r\n    return detailList;\r\n  }\r\n\r\n  getBatchInfoFromLoadingDetails(loading, productType, recordID) {\r\n    const batchInfo = {\r\n      ID: recordID,\r\n      ProductCode: \"\",\r\n      ProductType: \"\",\r\n      TankCode: \"\",\r\n      MeterCode: loading.MeterCode,\r\n      GrossQuantity:\r\n        loading.GrossQuantity === null\r\n          ? \"0 \" + loading.QuantityUOM\r\n          : loading.GrossQuantity.toLocaleString() + \" \" + loading.QuantityUOM,\r\n      NetQuantity:\r\n        loading.NetQuantity === null\r\n          ? \"0 \" + loading.QuantityUOM\r\n          : loading.NetQuantity.toLocaleString() + \" \" + loading.QuantityUOM,\r\n      StartTotalizer:\r\n        loading.StartTotalizer === null\r\n          ? \"\"\r\n          : loading.StartTotalizer.toLocaleString(),\r\n      EndTotalizer:\r\n        loading.EndTotalizer === null\r\n          ? \"\"\r\n          : loading.EndTotalizer.toLocaleString(),\r\n      Density:\r\n        loading.ProductDensity === null\r\n          ? \"\"\r\n          : loading.ProductDensity.toLocaleString() +\r\n            \" \" +\r\n            loading.ProductDensityUOM,\r\n      Pressure:\r\n        loading.Pressure === null\r\n          ? \"\"\r\n          : loading.Pressure.toLocaleString() + \" \" + loading.PressureUOM,\r\n      Temperature:\r\n        loading.Temperature === null\r\n          ? \"\"\r\n          : loading.Temperature.toLocaleString() + \" \" + loading.TemperatureUOM,\r\n      StartTime: loading.StartTime,\r\n      EndTime: loading.EndTime,\r\n    };\r\n    switch (productType) {\r\n      case 0: //ProductTypeForUI.FinishedProduct:\r\n        batchInfo.ProductCode = loading.FinishedProductCode;\r\n        batchInfo.ProductType = \"RailDispatchManualEntry_FinishedProduct\";\r\n        break;\r\n\r\n      case 1: //ProductTypeForUI.BaseProduct:\r\n        batchInfo.ProductCode = loading.BaseProductCode;\r\n        batchInfo.ProductType = \"Report_BaseProduct\";\r\n        break;\r\n\r\n      case 2: //ProductTypeForUI.Additive:\r\n        batchInfo.ProductCode = loading.AdditiveProductCode;\r\n        batchInfo.ProductType = \"ViewShipment_Additive\";\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    return batchInfo;\r\n  }\r\n\r\n  getBCUDeviceDetails(deviceCode) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.bcuCode,\r\n          value: deviceCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.bcuCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetBCUDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          const modMapTransactions = lodash.cloneDeep(\r\n            this.state.modMapTransactions\r\n          );\r\n          if (result.EntityResult.IsTransloading === true) {\r\n            modMapTransactions.TransLoadBcu = true;\r\n            this.getReceiptCodes(modMapTransactions);\r\n          } else {\r\n            modMapTransactions.TransLoadBcu = false;\r\n          }\r\n          this.setState({ modMapTransactions });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsComposite: Error while getting getBCUDeviceDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getReceiptCodes(mapTransactions) {\r\n    try {\r\n      const notification = {\r\n        messageType: \"critical\",\r\n        message: \"LocalTransaction_MatchTransaction\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Common_TransactionCode\"],\r\n            keyValues: [mapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      const obj = {\r\n        TransportationType: this.props.transportationType,\r\n        TransactionType: \"RECEIPT\",\r\n        ShareholderCode: mapTransactions.ShareholderCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetDispatchOrReceiptCodes,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult === null) {\r\n              console.log(\"Error in getReceiptCodes:\", result.ErrorList);\r\n            } else if (Array.isArray(result.EntityResult.Table)) {\r\n              const receiptCodeOptions = [];\r\n              result.EntityResult.Table.forEach((item) => {\r\n                receiptCodeOptions.push({\r\n                  text: item.Code,\r\n                  value: item.Code,\r\n                });\r\n              });\r\n              let receiptCodeSearchOptions =\r\n                lodash.cloneDeep(receiptCodeOptions);\r\n              if (receiptCodeOptions.length > Constants.filteredOptionsCount) {\r\n                receiptCodeSearchOptions = receiptCodeSearchOptions.slice(\r\n                  0,\r\n                  Constants.filteredOptionsCount\r\n                );\r\n              }\r\n              this.setState({\r\n                receiptCodeOptions,\r\n                receiptCodeSearchOptions,\r\n              });\r\n            }\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            console.log(\"Error in getReceiptCodes:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting getReceiptCodes:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on getReceiptCodes\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleReceiptCodeSearchChange = (receiptCode) => {\r\n    try {\r\n      let receiptCodeSearchOptions = this.state.receiptCodeOptions.filter(\r\n        (item) => item.value.toLowerCase().includes(receiptCode.toLowerCase())\r\n      );\r\n\r\n      if (receiptCodeSearchOptions.length > Constants.filteredOptionsCount) {\r\n        receiptCodeSearchOptions = receiptCodeSearchOptions.slice(\r\n          0,\r\n          Constants.filteredOptionsCount\r\n        );\r\n      }\r\n\r\n      this.setState({\r\n        receiptCodeSearchOptions,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionDetailComposite: Error occurred on handleReceiptCodeSearchChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getReceiptCodeSearchOptions() {\r\n    let receiptCodeSearchOptions = lodash.cloneDeep(\r\n      this.state.receiptCodeSearchOptions\r\n    );\r\n    let modReceiptCode = this.state.modMapTransactions.EntityCode;\r\n    if (\r\n      modReceiptCode !== null &&\r\n      modReceiptCode !== \"\" &&\r\n      modReceiptCode !== undefined\r\n    ) {\r\n      let selectedReceiptCode = receiptCodeSearchOptions.find(\r\n        (element) =>\r\n          element.value.toLowerCase() === modReceiptCode.toLowerCase()\r\n      );\r\n      if (selectedReceiptCode === undefined) {\r\n        receiptCodeSearchOptions.push({\r\n          text: modReceiptCode,\r\n          value: modReceiptCode,\r\n        });\r\n      }\r\n    }\r\n    return receiptCodeSearchOptions;\r\n  }\r\n\r\n  getWagonCodes(modMapTransactions) {\r\n    try {\r\n      const keyCode = [\r\n        {\r\n          key: KeyCodes.railReceiptCode,\r\n          value: modMapTransactions.EntityCode,\r\n        },\r\n      ];\r\n      const obj = {\r\n        ShareHolderCode: modMapTransactions.ShareholderCode,\r\n        keyDataCode: KeyCodes.railReceiptCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetRailReceipt,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            const wagonCodeList = [];\r\n            if (\r\n              Array.isArray(\r\n                result.EntityResult.RailMarineReceiptCompartmentPlanList\r\n              )\r\n            ) {\r\n              for (let item of result.EntityResult\r\n                .RailMarineReceiptCompartmentPlanList) {\r\n                if (!wagonCodeList.includes(item.TrailerCode)) {\r\n                  wagonCodeList.push(item.TrailerCode);\r\n                }\r\n              }\r\n            }\r\n            this.setState({\r\n              railWagonCodeOptions:\r\n                Utilities.transferListtoOptions(wagonCodeList),\r\n            });\r\n          } else {\r\n            console.log(\"Error in getRailReceipt:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"Error while getting getRailReceipt:\",\r\n            error,\r\n            modMapTransactions.TransactionCode\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on getWagonCodes\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleGetTanksForMeter = (meterCode) => {\r\n    try {\r\n      if (meterCode === this.state.latestMeterCode) {\r\n        return;\r\n      } else {\r\n        this.setState({ latestMeterCode: meterCode });\r\n      }\r\n      axios(\r\n        RestAPIs.GetTanksForMeter + \"?meterCode=\" + meterCode,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (Array.isArray(result.EntityResult)) {\r\n              this.setState({\r\n                tankCodeOptions: Utilities.transferListtoOptions(\r\n                  result.EntityResult\r\n                ),\r\n              });\r\n            }\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting TanksForMeter:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on TanksForMeter\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  onTransactionCodeClear = (data) => {\r\n    const modMapTransactions = lodash.cloneDeep(this.state.modMapTransactions);\r\n    modMapTransactions.TransactionCode = \"\";\r\n    this.setState({ modMapTransactions, isReadyToRender: true });\r\n  };\r\n\r\n  handleComRowSelectionChange = (selection) => {\r\n    try {\r\n      if (this.state.otherData.IsValidStatus !== true) {\r\n        return;\r\n      }\r\n      const row = selection[0];\r\n      const modMapTransactions = lodash.cloneDeep(\r\n        this.state.modMapTransactions\r\n      );\r\n      const otherData = lodash.cloneDeep(this.state.otherData);\r\n      if (row !== undefined) {\r\n        otherData.ProductCode = row.FinishedProductCode;\r\n        this.getLocalTransactions(otherData, row.Status);\r\n      } else {\r\n        otherData.LocalTranInfoForUI = [];\r\n        otherData.BatchInfoForUI = [];\r\n        modMapTransactions.LoadingDetails = [];\r\n        modMapTransactions.RailMarineTransactions = [];\r\n        modMapTransactions.TransLoadBcu = false;\r\n      }\r\n      this.setState({\r\n        modMapTransactions,\r\n        otherData,\r\n        selectLocalTransactionRow: [],\r\n        selectedCompRow: selection,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionDetailComposite: Error occurred on handleComRowSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleComRowClick = (row) => {\r\n    try {\r\n      if (this.state.otherData.IsValidStatus !== true) {\r\n        return;\r\n      }\r\n      const otherData = lodash.cloneDeep(this.state.otherData);\r\n      otherData.ProductCode = row.FinishedProductCode;\r\n      this.setState({\r\n        selectedCompRow: [row],\r\n        otherData,\r\n      });\r\n      this.getLocalTransactions(otherData, row.Status);\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionDetailComposite: Error occurred on handleComRowClick\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleLocalTranRowSelectionChange = (selection) => {\r\n    try {\r\n      const row = selection[0];\r\n      const modMapTransactions = lodash.cloneDeep(\r\n        this.state.modMapTransactions\r\n      );\r\n      const otherData = lodash.cloneDeep(this.state.otherData);\r\n      if (row !== undefined) {\r\n        this.getBCUDeviceDetails(row.BCUCode);\r\n        this.getBatchDetails(row);\r\n      } else {\r\n        otherData.BatchInfoForUI = [];\r\n        modMapTransactions.LoadingDetails = [];\r\n        modMapTransactions.RailMarineTransactions = [];\r\n        modMapTransactions.TransLoadBcu = false;\r\n      }\r\n      this.setState({\r\n        modMapTransactions,\r\n        otherData,\r\n        selectLocalTransactionRow: selection,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionDetailComposite: Error occurred on handleLocalTranRowSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleLocalTranRowClick = (row) => {\r\n    try {\r\n      this.getBCUDeviceDetails(row.BCUCode);\r\n      this.getBatchDetails(row);\r\n      this.setState({\r\n        selectLocalTransactionRow: [row],\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionDetailComposite: Error occurred on handleLocalTranRowClick\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      if (\r\n        propertyName === \"TransactionType\" &&\r\n        (data === \"DISPATCH\" || data === \"SHIPMENT\")\r\n      ) {\r\n        \r\n        var closeRailShipment=\"ViewShipment_CloseShipment\";\r\n        \r\n        if(data === \"DISPATCH\")\r\n        {\r\n        closeRailShipment=\"ViewRailDispatchList_CloseRailShipment\";\r\n        }\r\n        this.setState({\r\n          closeRailShipment: closeRailShipment,\r\n          printBOL: \"ViewRailDispatchList_PrintBOL\",\r\n          isCloseEnabled: false,isPrintEnabled:false\r\n        });\r\n      } else if (propertyName === \"TransactionType\" && data === \"RECEIPT\") {\r\n        this.setState({\r\n          closeRailShipment: \"ViewMarineReceiptList_CloseReceipt\",\r\n          printBOL: \"ViewRailReceipt_PrintBOD\",\r\n          isCloseEnabled: false,isPrintEnabled:false\r\n        });\r\n      }\r\n\r\n      const modMapTransactions = lodash.cloneDeep(\r\n        this.state.modMapTransactions\r\n      );\r\n      const otherData = lodash.cloneDeep(this.state.otherData);\r\n      modMapTransactions[propertyName] = data;\r\n\r\n      if (\r\n        (propertyName === \"TransactionType\" ||\r\n          propertyName === \"ShareholderCode\") &&\r\n        modMapTransactions.TransportationType !== \"\" &&\r\n        modMapTransactions.TransactionType !== \"\" &&\r\n        modMapTransactions.ShareholderCode !== \"\"\r\n      ) {\r\n        this.getTransactionCodes(modMapTransactions);\r\n        modMapTransactions.TransactionCode = \"\";\r\n        otherData.ScheduledDate = \"\";\r\n        otherData.Status = \"\";\r\n        otherData.DriverCode = \"\";\r\n        otherData.VehicleCode = \"\";\r\n      }\r\n\r\n      if (propertyName === \"TransactionCode\")\r\n      this.setState({isCloseEnabled: false,isPrintEnabled:false,launchPopup:false});\r\n\r\n      if (propertyName === \"TransactionCode\" && data !== null && data !== \"\") {\r\n        if (\r\n          modMapTransactions.TransportationType ===\r\n          Constants.TransportationType.ROAD\r\n        ) {\r\n          if (\r\n            modMapTransactions.TransactionType === \"DISPATCH\" ||\r\n            modMapTransactions.TransactionType === \"SHIPMENT\"\r\n          ) {\r\n            this.getRoadDispatch(modMapTransactions, otherData);\r\n          } else if (modMapTransactions.TransactionType === \"RECEIPT\") {\r\n            this.getRoadReceipt(modMapTransactions, otherData);\r\n          }\r\n        } else if (\r\n          modMapTransactions.TransportationType ===\r\n          Constants.TransportationType.RAIL\r\n        ) {\r\n          if (modMapTransactions.TransactionType === \"DISPATCH\") {\r\n            this.getRailDispatch(modMapTransactions, otherData);\r\n          } else if (modMapTransactions.TransactionType === \"RECEIPT\") {\r\n            this.getRailReceipt(modMapTransactions, otherData);\r\n          }\r\n        }\r\n        else if (\r\n          modMapTransactions.TransportationType ===\r\n          Constants.TransportationType.MARINE\r\n        ) {\r\n          if (modMapTransactions.TransactionType === \"DISPATCH\") {\r\n            this.getMarineDispatch(modMapTransactions, otherData);\r\n          } else if (modMapTransactions.TransactionType === \"RECEIPT\") {\r\n            this.getMarineReceipt(modMapTransactions, otherData);\r\n          }\r\n        }\r\n      } else {\r\n        modMapTransactions.TransactionCode = \"\";\r\n        otherData.ScheduledDate = \"\";\r\n        otherData.Status = \"\";\r\n        otherData.DriverCode = \"\";\r\n        otherData.VehicleCode = \"\";\r\n      }\r\n\r\n      if (propertyName === \"WagonCode\") {\r\n        this.getWagonCodes(modMapTransactions);\r\n      }\r\n\r\n      otherData.LocalTranInfoForUI = [];\r\n      otherData.BatchInfoForUI = [];\r\n      otherData.DispatchReceiptInfoForUI = [];\r\n      modMapTransactions.LoadingDetails = [];\r\n      modMapTransactions.RailMarineTransactions = [];\r\n      modMapTransactions.BatchDetailsList = [];\r\n      this.setState({\r\n        modMapTransactions,\r\n        otherData,\r\n        selectLocalTransactionRow: [],\r\n        selectedCompRow: [],\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionDetailComposite: Error occurred on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  GetRailDispatchOperations(transactionStatus) {\r\n    try {\r\n      \r\n      const obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        KeyCodes: [\r\n          {\r\n            key: \"RailDispatchStatus\",\r\n            value: transactionStatus,\r\n          },\r\n          {\r\n            key: \"DispatchCode\",\r\n            value: this.state.modMapTransactions.TransactionCode,\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.GetRailDispatchOperations,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n      .then((response) => {\r\n        var result = response.data;\r\n       var isCloseEnabled= false;\r\n       var isPrintEnabled= false;\r\n\r\n        if(result.EntityResult!==null)\r\n        {\r\n          if(result.EntityResult[\"ViewRailDispatch_CloseDispatch\"]===true)\r\n          {\r\n            isCloseEnabled= true;\r\n          }\r\n\r\n          if(result.EntityResult[\"ViewRailDispatch_PrintBOL\"]===true)\r\n          {\r\n            isPrintEnabled= true;\r\n          }\r\n        }\r\n          \r\n        this.setState({ isCloseEnabled: isCloseEnabled,isPrintEnabled:isPrintEnabled, });\r\n      })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting getRailReceiptStatusOperations:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  GetRailReceiptOperations(transactionStatus) {\r\n    try {\r\n      \r\n      var obj = {\r\n        Reason: this.state.reasonForClosure,\r\n        ReceiptCode: this.state.modMapTransactions.TransactionCode,\r\n        ReceiptStatus: transactionStatus,\r\n      };\r\n      axios(\r\n        RestAPIs.GetRailReceiptOperations,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n      .then((response) => {\r\n        var result = response.data;\r\n       var isCloseEnabled= false;\r\n       var isPrintEnabled= false;\r\n\r\n        if(result.EntityResult!==null)\r\n        {\r\n          if(result.EntityResult[\"ViewRailReceipt_CloseReceipt\"]===true)\r\n          {\r\n            isCloseEnabled= true;\r\n          }\r\n\r\n          if(result.EntityResult[\"ViewRailReceipt_PrintBOD\"]===true)\r\n          {\r\n            isPrintEnabled= true;\r\n          }\r\n        }\r\n          \r\n        this.setState({ isCloseEnabled: isCloseEnabled,isPrintEnabled:isPrintEnabled, });\r\n      })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting getRailReceiptStatusOperations:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  getMarineReceiptStatusOperations(transactionStatus) {\r\n    try {\r\n      \r\n      axios(\r\n        RestAPIs.GetMarineReceiptOperations +\r\n        \"?MarineReceiptStatus=\" +\r\n        transactionStatus,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n      .then((response) => {\r\n        var result = response.data;\r\n       var isCloseEnabled= false;\r\n       var isPrintEnabled= false;\r\n\r\n        if(result.EntityResult!==null)\r\n        {\r\n          if(result.EntityResult[\"ViewMarineReceiptList_CloseReceipt\"]===true)\r\n          {\r\n            isCloseEnabled= true;\r\n          }\r\n\r\n          if(result.EntityResult[\"ViewMarineReceiptList_PrintBOD\"]===true)\r\n          {\r\n            isPrintEnabled= true;\r\n          }\r\n        }\r\n          \r\n        this.setState({ isCloseEnabled: isCloseEnabled,isPrintEnabled:isPrintEnabled, });\r\n      })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting getMarineShipmentStatusOperations:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  getMarineShipmentStatusOperations(transactionStatus) {\r\n    try {\r\n      \r\n      axios(\r\n        RestAPIs.GetMarineDispatchOperations +\r\n        \"?DispatchStatus=\" +\r\n        transactionStatus,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n      .then((response) => {\r\n        var result = response.data;\r\n       var isCloseEnabled= false;\r\n       var isPrintEnabled= false;\r\n\r\n        if(result.EntityResult!==null)\r\n        {\r\n          if(result.EntityResult[\"ViewMarineShipmentList_CloseMarineShipment\"]===true)\r\n          {\r\n            isCloseEnabled= true;\r\n          }\r\n\r\n          if(result.EntityResult[\"ViewMarineShipmentList_PrintBOL\"]===true)\r\n          {\r\n            isPrintEnabled= true;\r\n          }\r\n        }\r\n          \r\n        this.setState({ isCloseEnabled: isCloseEnabled,isPrintEnabled:isPrintEnabled, });\r\n      })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting getMarineReceiptStatusOperations:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  getReciptsStatusOperations(receiptStatus,isVolumneBased) {\r\n    try {\r\n      \r\n      var selectedShareholder = this.props.selectedShareholder;\r\n      axios(\r\n        RestAPIs.GetReceiptOperations +\r\n        \"?receiptStatus=\" +\r\n        receiptStatus +\r\n        \"&IsVolumneBased=\" +\r\n        isVolumneBased +\r\n        \"&shareholder=\" +\r\n        selectedShareholder,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n      .then((response) => {\r\n        var result = response.data;\r\n       var isCloseEnabled= false;\r\n       var isPrintEnabled= false;\r\n\r\n        if(result.EntityResult!==null)\r\n        {\r\n          if(result.EntityResult[\"ViewReceipt_CloseReceipt\"]===true)\r\n          {\r\n            isCloseEnabled= true;\r\n          }\r\n\r\n          if(result.EntityResult[\"ViewReceipt_PrintBOD\"]===true)\r\n          {\r\n            isPrintEnabled= true;\r\n          }\r\n        }\r\n          \r\n        this.setState({ isCloseEnabled: isCloseEnabled,isPrintEnabled:isPrintEnabled, });\r\n      })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting getReceiptStatusOperations:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  getShipmentStatusOperations(modShipment) {\r\n    try {\r\n      let obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: 0,\r\n        KeyCodes: null,\r\n        Entity: modShipment,\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.GetShipmentOperations,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n         var isCloseEnabled= false;\r\n         var isPrintEnabled= false;\r\n\r\n          if(result.EntityResult!==null)\r\n          {\r\n            if(result.EntityResult[\"ViewShipment_CloseShipment\"]===true)\r\n            {\r\n              isCloseEnabled= true;\r\n            }\r\n\r\n            if(result.EntityResult[\"ViewShipmentStatus_PrintBOL\"]===true)\r\n            {\r\n              isPrintEnabled= true;\r\n            }\r\n          }\r\n            \r\n          this.setState({ isCloseEnabled: isCloseEnabled,isPrintEnabled:isPrintEnabled, });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"Error while getting getShipmentStatusOperations:\",\r\n            error\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  \r\n  handleCellDataEdit = (newVal, cellData) => {\r\n    const otherData = lodash.cloneDeep(this.state.otherData);\r\n    otherData.BatchInfoForUI[cellData.rowIndex][cellData.field] = newVal;\r\n    this.setState({ otherData });\r\n  };\r\n\r\n  handleTransactionCodeSearchChange = (transactionCode) => {\r\n    try {\r\n      this.setState({ isCloseEnabled: false,isPrintEnabled:false, launchPopup:false});\r\n      let transactionCodeSearchOptions =\r\n        this.state.transactionCodeOptions.filter((item) =>\r\n          item.value.toLowerCase().includes(transactionCode.toLowerCase())\r\n        );\r\n\r\n      if (\r\n        transactionCodeSearchOptions.length > Constants.filteredOptionsCount\r\n      ) {\r\n        transactionCodeSearchOptions = transactionCodeSearchOptions.slice(\r\n          0,\r\n          Constants.filteredOptionsCount\r\n        );\r\n      }\r\n\r\n      this.setState({\r\n        transactionCodeSearchOptions,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionDetailComposite: Error occurred on handleTransactionCodeSearchChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getTransactionCodeSearchOptions() {\r\n    let transactionCodeSearchOptions = lodash.cloneDeep(\r\n      this.state.transactionCodeSearchOptions\r\n    );\r\n    let modTransactionCode = this.state.modMapTransactions.TransactionCode;\r\n    if (\r\n      modTransactionCode !== null &&\r\n      modTransactionCode !== \"\" &&\r\n      modTransactionCode !== undefined\r\n    ) {\r\n      let selectedTransactionCode = transactionCodeSearchOptions.find(\r\n        (element) =>\r\n          element.value.toLowerCase() === modTransactionCode.toLowerCase()\r\n      );\r\n      if (selectedTransactionCode === undefined) {\r\n        transactionCodeSearchOptions.push({\r\n          text: modTransactionCode,\r\n          value: modTransactionCode,\r\n        });\r\n      }\r\n    }\r\n    return transactionCodeSearchOptions;\r\n  }\r\n\r\n  \r\n\r\n  handlePrint = () => {\r\n    try {\r\n      if(this.props.transportationType===\"ROAD\")\r\n      {\r\n      if(this.state.modMapTransactions.TransactionType===\"SHIPMENT\" || this.state.modMapTransactions.TransactionType===\"DISPATCH\")\r\n      {\r\n        this.handleTruckShipmentPrintBOL();\r\n      }\r\n      else\r\n      {\r\n        this.handleTruckReceiptPrintBOD();\r\n      }\r\n    }\r\n    else if(this.props.transportationType===\"MARINE\")\r\n      {\r\n      if(this.state.modMapTransactions.TransactionType===\"SHIPMENT\" || this.state.modMapTransactions.TransactionType===\"DISPATCH\")\r\n      {\r\n        this.handleMarineShipmentPrintBOL();\r\n      }\r\n      else\r\n      {\r\n        this.handleMarineReceiptPrintBOD();\r\n      }\r\n    }\r\n    else if(this.props.transportationType===\"RAIL\")\r\n      {\r\n      if(this.state.modMapTransactions.TransactionType===\"SHIPMENT\" || this.state.modMapTransactions.TransactionType===\"DISPATCH\")\r\n      {\r\n        this.handleRailShipmentPrintBOL();\r\n      }\r\n      else\r\n      {\r\n        this.handleRailReceiptPrintBOD();\r\n      }\r\n    }\r\n    }\r\n    catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on handlePrint\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  matchMapTransactions = () => {\r\n    try {\r\n      const otherData = lodash.cloneDeep(this.state.otherData);\r\n      const modMapTransactions = lodash.cloneDeep(\r\n        this.state.modMapTransactions\r\n      );\r\n      modMapTransactions.TransportationType = this.props.transportationType;\r\n      modMapTransactions.BatchDetailsList = lodash.cloneDeep(\r\n        this.state.otherData.BatchInfoForUI\r\n      );\r\n      [modMapTransactions.ActualQuantity, modMapTransactions.QuantityUOM] =\r\n        this.state.selectedCompRow[0].ActualQuantity.split(\" \");\r\n\r\n      modMapTransactions.LoadingDetails[0].CommonInfo.TrailerCode =\r\n        this.state.selectedCompRow[0].TrailerCode;\r\n      modMapTransactions.LoadingDetails[0].CommonInfo.CarrierCode =\r\n        this.state.selectedCompRow[0].CarrierCompanyCode;\r\n      modMapTransactions.LoadingDetails[0].CommonInfo.ShareHolderCode =\r\n        modMapTransactions.ShareholderCode;\r\n      modMapTransactions.LoadingDetails[0].CommonInfo.CompartmentSeqNoInVehicle =\r\n        this.state.selectedCompRow[0].CompartmentSeqNoInVehicle;\r\n      modMapTransactions.LoadingDetails[0].IsLocalLoaded = false;\r\n      modMapTransactions.LoadingDetails[0].CommonInfo.TransactionType =\r\n        modMapTransactions.TransactionType;\r\n      modMapTransactions.LoadingDetails[0].CommonInfo.TransportationType =\r\n        modMapTransactions.TransportationType;\r\n      if (\r\n        modMapTransactions.TransportationType ===\r\n        Constants.TransportationType.ROAD\r\n      ) {\r\n        modMapTransactions.LoadingDetails[0].CommonInfo.VehicleCode =\r\n          otherData.VehicleCode;\r\n      }\r\n      if (modMapTransactions.TransactionType === \"DISPATCH\") {\r\n        modMapTransactions.LoadingDetails[0].CommonInfo.ShipmentCode =\r\n          modMapTransactions.TransactionCode;\r\n        modMapTransactions.LoadingDetails[0].CommonInfo.ReceiptCode = \"\";\r\n      } else {\r\n        modMapTransactions.LoadingDetails[0].CommonInfo.ReceiptCode =\r\n          modMapTransactions.TransactionCode;\r\n        modMapTransactions.LoadingDetails[0].CommonInfo.ShipmentCode = \"\";\r\n      }\r\n      for (let batchDetail of modMapTransactions.BatchDetailsList) {\r\n        if (\r\n          batchDetail.TankCode !== undefined &&\r\n          batchDetail.TankCode !== null &&\r\n          batchDetail.TankCode !== \"\"\r\n        ) {\r\n          modMapTransactions.LoadingDetails[0].ArrLoadingDetailBP.forEach(\r\n            (bp) => {\r\n              if (bp.BaseProductCode === batchDetail.ProductCode) {\r\n                bp.TankCode = batchDetail.TankCode;\r\n              }\r\n            }\r\n          );\r\n          modMapTransactions.LoadingDetails[0].ArrLoadingDetailAdditive.forEach(\r\n            (adv) => {\r\n              if (adv.AdditiveProductCode === batchDetail.ProductCode) {\r\n                adv.TankCode = batchDetail.TankCode;\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }\r\n\r\n      if (\r\n        modMapTransactions.TransportationType ===\r\n        Constants.TransportationType.RAIL\r\n      ) {\r\n        modMapTransactions.RailMarineTransactions =\r\n          this.ConvertLoadingDetailsFromRoadToRail(\r\n            modMapTransactions.LoadingDetails\r\n          );\r\n      }\r\n\r\n      if (\r\n        modMapTransactions.TransportationType ===\r\n        Constants.TransportationType.MARINE\r\n      ) {\r\n        modMapTransactions.RailMarineTransactions =\r\n          this.ConvertLoadingDetailsFromRoadToMarine(\r\n            modMapTransactions.LoadingDetails\r\n          );\r\n      }\r\n\r\n      modMapTransactions.FinishedProductCode =\r\n        this.state.selectedCompRow[0].FinishedProductCode;\r\n      modMapTransactions.CompartmentCode =\r\n        this.state.selectedCompRow[0].CompartmentCode;\r\n      modMapTransactions.CompartmentSeqNoInVehicle =\r\n        this.state.selectedCompRow[0].CompartmentSeqNoInVehicle;\r\n\r\n      modMapTransactions.BcuCode =\r\n        this.state.selectLocalTransactionRow[0].BCUCode;\r\n      modMapTransactions.BatchID =\r\n        this.state.selectLocalTransactionRow[0].BatchID;\r\n      modMapTransactions.TransactionID =\r\n        this.state.selectLocalTransactionRow[0].TransactionID;\r\n\r\n      if (!this.validateMatch(modMapTransactions)) {\r\n        return;\r\n      }\r\n\r\n      const notification = {\r\n        messageType: \"critical\",\r\n        message: \"LocalTransaction_MatchTransaction\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"Common_TransactionCode\"],\r\n            keyValues: [modMapTransactions.TransactionCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.MatchMapTransactions,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          modMapTransactions,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            const otherData = lodash.cloneDeep(this.state.otherData);\r\n            otherData.LocalTranInfoForUI = [];\r\n            otherData.BatchInfoForUI = [];\r\n            this.setState({\r\n              selectedCompRow: [],\r\n              selectLocalTransactionRow: [],\r\n            });\r\n            if (\r\n              modMapTransactions.TransportationType ===\r\n              Constants.TransportationType.ROAD\r\n            ) {\r\n              if (modMapTransactions.TransactionType === \"DISPATCH\") {\r\n                this.getRoadDispatch(modMapTransactions, otherData);\r\n              } else if (modMapTransactions.TransactionType === \"RECEIPT\") {\r\n                this.getRoadReceipt(modMapTransactions, otherData);\r\n              }\r\n            } else if (\r\n              modMapTransactions.TransportationType ===\r\n              Constants.TransportationType.RAIL\r\n            ) {\r\n              if (modMapTransactions.TransactionType === \"DISPATCH\") {\r\n                this.getRailDispatch(modMapTransactions, otherData);\r\n              } else if (modMapTransactions.TransactionType === \"RECEIPT\") {\r\n                this.getRailReceipt(modMapTransactions, otherData);\r\n              }\r\n            }\r\n            else if (\r\n              modMapTransactions.TransportationType ===\r\n              Constants.TransportationType.MARINE\r\n            ) {\r\n              if (modMapTransactions.TransactionType === \"DISPATCH\") {\r\n                this.getMarineDispatch(modMapTransactions, otherData);\r\n              } else if (modMapTransactions.TransactionType === \"RECEIPT\") {\r\n                this.getMarineReceipt(modMapTransactions, otherData);\r\n              }\r\n            }\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            console.log(\"Error in matchMapTransactions:\", result.ErrorList);\r\n          }\r\n          this.props.onNotice(notification);\r\n        })\r\n        .catch((error) => {\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onNotice(notification);\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsDetailsConposite:Error occured on matchMapTransactions\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  ConvertLoadingDetailsFromRoadToRail(roadLoadingDetails) {\r\n    let railLoadingDetails = [];\r\n    try {\r\n      for (let ldInfo of roadLoadingDetails) {\r\n        let railLDInfo = {\r\n          IsLocalLoaded: false,\r\n          CommonInfo: {},\r\n          TransactionFPinfo: {},\r\n          ArrTransactionBP: [],\r\n          ArrTransactionAdditive: [],\r\n        };\r\n\r\n        railLDInfo.CommonInfo.BayCode = ldInfo.CommonInfo.BayCode;\r\n        railLDInfo.CommonInfo.BCUCode = ldInfo.CommonInfo.BCUCode;\r\n\r\n        railLDInfo.CommonInfo.CarrierCode = ldInfo.CommonInfo.CarrierCode;\r\n        railLDInfo.CommonInfo.CompartmentCode =\r\n          ldInfo.CommonInfo.CompartmentCode;\r\n        railLDInfo.CommonInfo.CompartmentSeqNoInTrailer =\r\n          ldInfo.CommonInfo.CompartmentSeqNoInTrailer;\r\n        railLDInfo.CommonInfo.CompartmentSeqNoInVehicle =\r\n          ldInfo.CommonInfo.CompartmentSeqNoInVehicle;\r\n\r\n        railLDInfo.CommonInfo.DispatchCode = ldInfo.CommonInfo.ShipmentCode;\r\n        railLDInfo.CommonInfo.GeneralTMUserCode = ldInfo.CommonInfo.DriverCode;\r\n        railLDInfo.CommonInfo.LoadingType =\r\n          ldInfo.CommonInfo.LoadingDetailsType;\r\n        railLDInfo.CommonInfo.OfficerName = ldInfo.CommonInfo.DriverCode;\r\n\r\n        railLDInfo.CommonInfo.ReceiptCode = ldInfo.CommonInfo.ReceiptCode;\r\n        railLDInfo.CommonInfo.TrailerCode = ldInfo.CommonInfo.TrailerCode;\r\n        railLDInfo.CommonInfo.TransactionType =\r\n          ldInfo.CommonInfo.TransactionType;\r\n        railLDInfo.CommonInfo.TransportationType =\r\n          ldInfo.CommonInfo.TransportationType;\r\n        railLDInfo.CommonInfo.VehicleCode = ldInfo.CommonInfo.VehicleCode;\r\n\r\n        //FP\r\n\r\n        railLDInfo.TransactionFPinfo = this.CopyAttributes(\r\n          ldInfo.LoadingDetailFPinfo\r\n        );\r\n\r\n        //end FP\r\n\r\n        for (let ldbpInfo of ldInfo.ArrLoadingDetailBP) {\r\n          let RailMarineTransactionProductInfo = {};\r\n          RailMarineTransactionProductInfo = this.CopyAttributes(ldbpInfo);\r\n          RailMarineTransactionProductInfo.ShareHolderCode =\r\n            ldInfo.CommonInfo.ShareHolderCode;\r\n          railLDInfo.ArrTransactionBP.push(RailMarineTransactionProductInfo);\r\n        }\r\n\r\n        for (let ldbpInfo of ldInfo.ArrLoadingDetailAdditive) {\r\n          let RailMarineTransactionProductInfo = {};\r\n          RailMarineTransactionProductInfo = this.CopyAttributes(ldbpInfo);\r\n          RailMarineTransactionProductInfo.ShareHolderCode =\r\n            ldInfo.CommonInfo.ShareHolderCode;\r\n          railLDInfo.ArrTransactionAdditive.push(\r\n            RailMarineTransactionProductInfo\r\n          );\r\n        }\r\n\r\n        railLoadingDetails.push(railLDInfo);\r\n      }\r\n    } catch (ex) {\r\n      return null;\r\n    }\r\n\r\n    return railLoadingDetails;\r\n  }\r\n\r\n\r\n  ConvertLoadingDetailsFromRoadToMarine(roadLoadingDetails) {\r\n    let marineLoadingDetails = [];\r\n    try {\r\n      for (let ldInfo of roadLoadingDetails) {\r\n        let marineLDInfo = {\r\n          IsLocalLoaded: false,\r\n          CommonInfo: {},\r\n          TransactionFPinfo: {},\r\n          ArrTransactionBP: [],\r\n          ArrTransactionAdditive: [],\r\n        };\r\n\r\n        marineLDInfo.CommonInfo.BayCode = ldInfo.CommonInfo.BayCode;\r\n        marineLDInfo.CommonInfo.BCUCode = ldInfo.CommonInfo.BCUCode;\r\n\r\n        marineLDInfo.CommonInfo.CarrierCode = ldInfo.CommonInfo.CarrierCode;\r\n        marineLDInfo.CommonInfo.CompartmentCode =\r\n          ldInfo.CommonInfo.CompartmentCode;\r\n          marineLDInfo.CommonInfo.CompartmentSeqNoInTrailer =\r\n          ldInfo.CommonInfo.CompartmentSeqNoInTrailer;\r\n          marineLDInfo.CommonInfo.CompartmentSeqNoInVehicle =\r\n          ldInfo.CommonInfo.CompartmentSeqNoInVehicle;\r\n\r\n          marineLDInfo.CommonInfo.DispatchCode = ldInfo.CommonInfo.ShipmentCode;\r\n          marineLDInfo.CommonInfo.GeneralTMUserCode = ldInfo.CommonInfo.DriverCode;\r\n          marineLDInfo.CommonInfo.LoadingType =\r\n          ldInfo.CommonInfo.LoadingDetailsType;\r\n          marineLDInfo.CommonInfo.OfficerName = ldInfo.CommonInfo.DriverCode;\r\n\r\n          marineLDInfo.CommonInfo.ReceiptCode = ldInfo.CommonInfo.ReceiptCode;\r\n          marineLDInfo.CommonInfo.TrailerCode = ldInfo.CommonInfo.TrailerCode;\r\n          marineLDInfo.CommonInfo.TransactionType =\r\n          ldInfo.CommonInfo.TransactionType;\r\n          marineLDInfo.CommonInfo.TransportationType =\r\n          ldInfo.CommonInfo.TransportationType;\r\n          marineLDInfo.CommonInfo.VehicleCode = ldInfo.CommonInfo.VehicleCode;\r\n\r\n        //FP\r\n\r\n        marineLDInfo.TransactionFPinfo = this.CopyAttributes(\r\n          ldInfo.LoadingDetailFPinfo\r\n        );\r\n\r\n        //end FP\r\n\r\n        for (let ldbpInfo of ldInfo.ArrLoadingDetailBP) {\r\n          let RailMarineTransactionProductInfo = {};\r\n          RailMarineTransactionProductInfo = this.CopyAttributes(ldbpInfo);\r\n          RailMarineTransactionProductInfo.ShareHolderCode =\r\n            ldInfo.CommonInfo.ShareHolderCode;\r\n          marineLDInfo.ArrTransactionBP.push(RailMarineTransactionProductInfo);\r\n        }\r\n\r\n        for (let ldbpInfo of ldInfo.ArrLoadingDetailAdditive) {\r\n          let RailMarineTransactionProductInfo = {};\r\n          RailMarineTransactionProductInfo = this.CopyAttributes(ldbpInfo);\r\n          RailMarineTransactionProductInfo.ShareHolderCode =\r\n            ldInfo.CommonInfo.ShareHolderCode;\r\n          marineLDInfo.ArrTransactionAdditive.push(\r\n            RailMarineTransactionProductInfo\r\n          );\r\n        }\r\n\r\n        marineLoadingDetails.push(marineLDInfo);\r\n      }\r\n    } catch (ex) {\r\n      return null;\r\n    }\r\n\r\n    return marineLoadingDetails;\r\n  }\r\n\r\n  CopyAttributes(roadLoadingDetailsInfo) {\r\n    let railLoadingDetailsInfo = {};\r\n    railLoadingDetailsInfo.AdditiveProductCode =\r\n      roadLoadingDetailsInfo.AdditiveProductCode;\r\n    railLoadingDetailsInfo.ArmCode = roadLoadingDetailsInfo.LoadingArmCode;\r\n    railLoadingDetailsInfo.Attributes = roadLoadingDetailsInfo.Attributes;\r\n    railLoadingDetailsInfo.BaseProductCode =\r\n      roadLoadingDetailsInfo.BaseProductCode;\r\n\r\n    railLoadingDetailsInfo.CalculatedGross =\r\n      roadLoadingDetailsInfo.CalculatedGross;\r\n    railLoadingDetailsInfo.CalculatedNet = roadLoadingDetailsInfo.CalculatedNet;\r\n    railLoadingDetailsInfo.CalculatedValue =\r\n      roadLoadingDetailsInfo.CalculatedValue;\r\n    railLoadingDetailsInfo.CalculatedValueUOM =\r\n      roadLoadingDetailsInfo.CalculatedValueUOM;\r\n\r\n    railLoadingDetailsInfo.EndTime = roadLoadingDetailsInfo.EndTime;\r\n    railLoadingDetailsInfo.EndTotalizer = roadLoadingDetailsInfo.EndTotalizer;\r\n\r\n    railLoadingDetailsInfo.FinishedProductCode =\r\n      roadLoadingDetailsInfo.FinishedProductCode;\r\n    railLoadingDetailsInfo.FlangeNumber = roadLoadingDetailsInfo.FlangeNumber;\r\n    railLoadingDetailsInfo.FlowRate = roadLoadingDetailsInfo.FlowRate;\r\n    railLoadingDetailsInfo.FlowRateUOM = roadLoadingDetailsInfo.FlowRateUOM;\r\n\r\n    railLoadingDetailsInfo.GrossMass = roadLoadingDetailsInfo.WeightInVaccum;\r\n    railLoadingDetailsInfo.GrossQuantity = roadLoadingDetailsInfo.GrossQuantity;\r\n\r\n    railLoadingDetailsInfo.InjectorPosition =\r\n      roadLoadingDetailsInfo.InjectorPosition;\r\n    railLoadingDetailsInfo.IsInOffSpec = roadLoadingDetailsInfo.IsInOffSpec;\r\n\r\n    railLoadingDetailsInfo.KFactorCurrent =\r\n      roadLoadingDetailsInfo.KFactorCurrent;\r\n    railLoadingDetailsInfo.KFactorProved = roadLoadingDetailsInfo.KFactorProved;\r\n    railLoadingDetailsInfo.LeakageTotalizer =\r\n      roadLoadingDetailsInfo.LeakageTotalizer;\r\n\r\n    railLoadingDetailsInfo.MassUOM = roadLoadingDetailsInfo.WeightInVaccumUOM;\r\n    railLoadingDetailsInfo.MeterCode = roadLoadingDetailsInfo.MeterCode;\r\n\r\n    railLoadingDetailsInfo.NetEndTotalizer =\r\n      roadLoadingDetailsInfo.NetEndTotalizer;\r\n    railLoadingDetailsInfo.NetQuantity = roadLoadingDetailsInfo.NetQuantity;\r\n\r\n    railLoadingDetailsInfo.PresetQuantity =\r\n      roadLoadingDetailsInfo.PresetQuantity;\r\n    railLoadingDetailsInfo.Pressure = roadLoadingDetailsInfo.Pressure;\r\n    railLoadingDetailsInfo.PressureUOM = roadLoadingDetailsInfo.PressureUOM;\r\n    railLoadingDetailsInfo.ProductDensity =\r\n      roadLoadingDetailsInfo.ProductDensity;\r\n    railLoadingDetailsInfo.ProductDensityUOM =\r\n      roadLoadingDetailsInfo.ProductDensityUOM;\r\n\r\n    railLoadingDetailsInfo.QuantityUOM = roadLoadingDetailsInfo.QuantityUOM;\r\n\r\n    railLoadingDetailsInfo.ReferenceDensity =\r\n      roadLoadingDetailsInfo.ProductDensity;\r\n    railLoadingDetailsInfo.Remarks = roadLoadingDetailsInfo.Remarks;\r\n    railLoadingDetailsInfo.ResetQuantity = roadLoadingDetailsInfo.ResetQuantity;\r\n\r\n    railLoadingDetailsInfo.StartTime = roadLoadingDetailsInfo.StartTime;\r\n    railLoadingDetailsInfo.StartTotalizer =\r\n      roadLoadingDetailsInfo.StartTotalizer;\r\n\r\n    railLoadingDetailsInfo.TankCode = roadLoadingDetailsInfo.TankCode;\r\n    railLoadingDetailsInfo.Temperature = roadLoadingDetailsInfo.Temperature;\r\n    railLoadingDetailsInfo.TemperatureUOM =\r\n      roadLoadingDetailsInfo.TemperatureUOM;\r\n    railLoadingDetailsInfo.TransactionID = roadLoadingDetailsInfo.TransactionID;\r\n\r\n    railLoadingDetailsInfo.UnitPrice = roadLoadingDetailsInfo.UnitPrice;\r\n    railLoadingDetailsInfo.VapourGrossQuantity =\r\n      roadLoadingDetailsInfo.VapourGrossQuantity;\r\n    railLoadingDetailsInfo.VapourNetQuantity =\r\n      roadLoadingDetailsInfo.VapourNetQuantity;\r\n    railLoadingDetailsInfo.VapourUOM = roadLoadingDetailsInfo.VapourUOM;\r\n    railLoadingDetailsInfo.VCF = roadLoadingDetailsInfo.VCF;\r\n\r\n    railLoadingDetailsInfo.WeightInAir = roadLoadingDetailsInfo.WeightInAir;\r\n    railLoadingDetailsInfo.WeightInAirUOM =\r\n      roadLoadingDetailsInfo.WeightInAirUOM;\r\n    railLoadingDetailsInfo.WeightInVaccum =\r\n      roadLoadingDetailsInfo.WeightInVaccum;\r\n    railLoadingDetailsInfo.WeightInVaccumUOM =\r\n      roadLoadingDetailsInfo.WeightInVaccumUOM;\r\n    return railLoadingDetailsInfo;\r\n  }\r\n\r\n  validateMatch(modMapTransactions) {\r\n    const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    const validateField = [];\r\n    const notification = {\r\n      messageType: \"critical\",\r\n      message: \"LocalTransaction_MatchTransaction\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"Common_TransactionCode\"],\r\n          keyValues: [modMapTransactions.TransactionCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    if (modMapTransactions.TransLoadBcu === true) {\r\n      if (\r\n        modMapTransactions.TransLoadSource === Constants.TransportationType.RAIL\r\n      ) {\r\n        validateField.push(\"EntityCode\");\r\n        validateField.push(\"WagonCode\");\r\n      } else if (\r\n        modMapTransactions.TransLoadSource ===\r\n        Constants.TransportationType.MARINE\r\n      ) {\r\n        validateField.push(\"EntityCode\");\r\n      } else {\r\n        return true;\r\n      }\r\n    } else {\r\n      for (let batch of this.state.otherData.BatchInfoForUI) {\r\n        if (\r\n          batch.ProductType === \"Report_BaseProduct\" &&\r\n          (batch.TankCode === \"\" ||\r\n            batch.TankCode === undefined ||\r\n            batch.TankCode === null)\r\n        ) {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            \"ERRMSG_TANK_CODE_EMPTY\";\r\n          this.props.onNotice(notification);\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    validateField.forEach((key) => {\r\n      if (modMapTransactions[key] !== undefined) {\r\n        validationErrors[key] = Utilities.validateField(\r\n          mapTransactionsValidationDef[key],\r\n          modMapTransactions[key]\r\n        );\r\n      }\r\n    });\r\n    this.setState({ validationErrors });\r\n    let returnValue = Object.values(validationErrors).every((value) => {\r\n      return value === \"\";\r\n    });\r\n    return returnValue;\r\n  }\r\n  \r\n\r\n  handleTruckShipmentPrintBOL( ) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shareholderCode,\r\n        value: this.props.selectedShareholder,\r\n      },\r\n      {\r\n        key: KeyCodes.shipmentCode,\r\n        value: this.state.modMapTransactions.TransactionCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.shipmentCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.PrintBOL,\r\n      Utilities.getAuthenticationObjectforPost(obj, this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        this.notifyMsg(result);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while handleTruckShipmentPrintBOL:\", error);\r\n      });\r\n  }\r\n\r\n  handleTruckReceiptPrintBOD( ) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shareholderCode,\r\n        value: this.props.selectedShareholder,\r\n      },\r\n      {\r\n        key: KeyCodes.receiptStatus,\r\n        value: this.state.otherData.Status,\r\n      },\r\n      {\r\n        key: KeyCodes.receiptCode,\r\n        value:  this.state.modMapTransactions.TransactionCode,\r\n      },\r\n      {\r\n        key: KeyCodes.driverCode,\r\n        value: this.state.otherData.DriverCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.receiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.ReceiptPrintBOD,\r\n      Utilities.getAuthenticationObjectforPost(obj, this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        this.notifyMsg(result);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while handleTruckShipmentPrintBOD:\", error);\r\n      });\r\n  }\r\n\r\n  handleMarineShipmentPrintBOL( ) {\r\n     \r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.marineDispatchCode,\r\n        value: this.state.modMapTransactions.TransactionCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      keyDataCode: KeyCodes.marineDispatchCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n     \r\n    axios(\r\n      RestAPIs.MarineDispatchPrintBOL,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        this.notifyMsg(result);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while handleMarineShipmentPrintBOL:\", error);\r\n      });\r\n  }\r\n\r\n  handleMarineReceiptPrintBOD( ) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.marineReceiptCode,\r\n        value: this.state.modMapTransactions.TransactionCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      keyDataCode: KeyCodes.marineReceiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n\r\n     \r\n    axios(\r\n      RestAPIs.MarineReceiptPrintBOD,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        this.notifyMsg(result);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while handleTruckShipmentPrintBOD:\", error);\r\n      });\r\n  }\r\n\r\n  \r\n  handleRailShipmentPrintBOL( ) {\r\n    const obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      KeyCodes: [\r\n        {\r\n          key: \"RailDispatchCode\",\r\n          value: this.state.modMapTransactions.TransactionCode,\r\n        },\r\n      ],\r\n    };\r\n   \r\n    axios(\r\n      RestAPIs.RailDispatchPrintBOL,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        this.notifyMsg(result);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while handleTruckShipmentPrintBOD:\", error);\r\n      });\r\n  }\r\n\r\n  handleRailReceiptPrintBOD( ) {\r\n     \r\n    var shCode = this.state.selectedShareholder;\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.railReceiptCode,\r\n        value: this.state.modMapTransactions.TransactionCode,\r\n      },\r\n    ];\r\n    const obj = {\r\n      ShareHolderCode: shCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n\r\n   \r\n    axios(\r\n      RestAPIs.RailReceiptPrintBOD,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        this.notifyMsg(result);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while handleMarineShipmentPrintBOL:\", error);\r\n      });\r\n  }\r\n\r\n\r\nnotifyMsg(result)\r\n{\r\nvar msgCodes=  this.getCloseModalPopupText()\r\n\r\n var msgCode=\"PrintBOL_status\";\r\n if(this.state.modMapTransactions.TransactionType===\"RECEIPT\")\r\n {\r\n  msgCode=\"PrintBOD_status\";\r\n }\r\n  \r\n\r\n  let notification = {\r\n    messageType: \"critical\",\r\n    message: msgCode,\r\n    messageResultDetails: [\r\n      {\r\n        keyFields: [msgCodes.keyField],\r\n        keyValues: [this.state.modMapTransactions.TransactionCode],\r\n        isSuccess: false,\r\n        errorMessage: \"\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  notification.messageType = result.IsSuccess\r\n  ? \"success\"\r\n  : \"critical\";\r\nnotification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n\r\nnotification.messageResultDetails[0].errorMessage =\r\n  result.ErrorList[0];\r\n \r\ntoast(\r\n  <ErrorBoundary>\r\n    <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n  </ErrorBoundary>,\r\n  {\r\n    autoClose:\r\n    notification.messageType === \"success\" ? 10000 : false,\r\n  }\r\n);\r\n}\r\n\r\n\r\n  handleCloseTransaction()\r\n   {\r\n    this.setState({\r\n      launchPopup: true,\r\n      reasonForClosure: \"\",\r\n    });\r\n   }\r\n\r\n  handleCloseShipmentReceiptModal = () => {\r\n    var modalvariables= this.getCloseModalPopupText();\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isCloseEnabled} size=\"mini\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h3>\r\n                  {t(modalvariables.popupHeaderLabel) +\r\n                    \" : \" +\r\n                    this.state.modMapTransactions.TransactionCode}\r\n                </h3>\r\n              </div>\r\n             \r\n              <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                <div className=\"col col-lg-12\">\r\n                  <Input\r\n                    fluid\r\n                    value={this.state.reasonForClosure}\r\n                    label={t(\"ViewShipment_Reason\")}\r\n                    disbaled={false}\r\n                    reserveSpace={false}\r\n                    onChange={(value) => {\r\n                      this.setState({ reasonForClosure: value });\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  if (this.state.reasonForClosure === \"\") {\r\n                    let notification = {\r\n                      messageType: \"critical\",\r\n                      message: modalvariables.msgStatusHeader,\r\n                      messageResultDetails: [\r\n                        {\r\n                          keyFields: [modalvariables.keyField],\r\n                          keyValues: [this.state.modMapTransactions.TransactionCode],\r\n                          isSuccess: false,\r\n                          errorMessage:modalvariables.errorMsg,\r\n                        },\r\n                      ],\r\n                    };\r\n\r\n                    toast(\r\n                      <ErrorBoundary>\r\n                        <NotifyEvent\r\n                          notificationMessage={notification}\r\n                        ></NotifyEvent>\r\n                      </ErrorBoundary>,\r\n                      {\r\n                        autoClose:\r\n                          notification.messageType === \"success\"\r\n                            ? 10000\r\n                            : false,\r\n                      }\r\n                    );\r\n                  } else\r\n                    this.setState({ isCloseEnabled: false }, () => {\r\n                      this.handleShipmentReceiptClose();\r\n                    });\r\n                }}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => {\r\n                  this.setState({\r\n                    reasonForClosure: \"\",\r\n                    launchPopup: false,\r\n                  });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader newEntityName=\"LocalTransactionsMapping_lblPageTitle\"></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <MapTransactionsDetail\r\n            modMapTransactions={this.state.modMapTransactions}\r\n            validationErrors={this.state.validationErrors}\r\n            otherData={this.state.otherData}\r\n            listOptions={{\r\n              transportationTypes: this.state.transportationTypeOptions,\r\n              transactionTypes: this.state.transactionTypeOptions,\r\n              shareholderCodes: this.state.shareholderCodeOptions,\r\n              dispatchReceiptCodes: this.state.dispatchReceiptCodeOptions,\r\n              transactionCodes: this.getTransactionCodeSearchOptions(),\r\n              tankCodes: this.state.tankCodeOptions,\r\n              receiptCodes: this.getReceiptCodeSearchOptions(),\r\n              railWagonCodes: this.state.railWagonCodeOptions,\r\n            }}\r\n            transportationType={this.props.transportationType}\r\n            onTransactionSearchChange={this.handleTransactionCodeSearchChange}\r\n            onReceiptSearchChange={this.handleReceiptCodeSearchChange}\r\n            selectedCompRow={this.state.selectedCompRow}\r\n            handleComRowSelectionChange={this.handleComRowSelectionChange}\r\n            handleComRowClick={this.handleComRowClick}\r\n            selectLocalTransactionRow={this.state.selectLocalTransactionRow}\r\n            handleLocalTranRowSelectionChange={\r\n              this.handleLocalTranRowSelectionChange\r\n            }\r\n            handleLocalTranRowClick={this.handleLocalTranRowClick}\r\n            onFieldChange={this.handleChange}\r\n            handleGetTanksForMeter={this.handleGetTanksForMeter}\r\n            handleCellDataEdit={this.handleCellDataEdit}\r\n          ></MapTransactionsDetail>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <div className=\"row\">\r\n                <div className=\"col\" style={{ textAlign: \"right\" }}>\r\n                  <Button\r\n                    content={t(\"LocalTransaction_MatchTransaction\")}\r\n                    disabled={this.state.otherData.BatchInfoForUI.length === 0}\r\n                    onClick={() => this.matchMapTransactions()}\r\n                  ></Button>\r\n                  <Button\r\n                    content={t(this.state.closeRailShipment)}\r\n                    className={false ? \"cancelButton\" : \"\"}\r\n                    disabled={!this.state.isCloseEnabled}\r\n                    onClick={() => this.handleCloseTransaction()}\r\n                  ></Button>\r\n                  <Button\r\n                    content={t(this.state.printBOL)}\r\n                    disabled={!this.state.isPrintEnabled}\r\n                    onClick={() => this.handlePrint()}\r\n                  ></Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        </ErrorBoundary>\r\n        {this.state.launchPopup ? this.handleCloseShipmentReceiptModal() : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nconst mapReceiptToProps = (receipt) => {\r\n  return {\r\n    userActions: bindActionCreators(getUserDetails, receipt),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapReceiptToProps\r\n)(MapTransactionsDetailComposite);\r\n\r\nMapTransactionsDetailComposite.propTypes = {\r\n  onNotice: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\nimport { connect } from \"react-redux\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport MapTransactionsDetailComposite from \"../Details/MapTransactionsDetailComposite\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../../CSS/styles.css\";\r\n\r\nclass MapTransactionsComposite extends Component {\r\n  state = {\r\n    isReadyToRender: false,\r\n    operationsVisibility: { add: false, delete: false, shareholder: false },\r\n    selectedShareholder: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.setState({\r\n        isReadyToRender: true,\r\n        selectedShareholder:\r\n          this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsComposite:Error occurred on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  notifyEvent = (notification) => {\r\n    try {\r\n      toast(\r\n        <ErrorBoundary>\r\n          <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n        </ErrorBoundary>,\r\n        {\r\n          autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"MapTransactionsComposite: Error occurred on savedEvent\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMUserActionsComposite\r\n            operationsVisibility={this.state.operationsVisibility}\r\n            breadcrumbItem={this.props.activeItem}\r\n            shrVisible={false}\r\n            handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n            deleteVisible={false}\r\n          />\r\n        </ErrorBoundary>\r\n        {this.state.isReadyToRender ? (\r\n          <MapTransactionsDetailComposite\r\n            transportationType={\r\n              this.props.activeItem.itemProps.transportationType\r\n            }\r\n            Key=\"MapTransactionsDetail\"\r\n            onNotice={this.notifyEvent}\r\n            selectedShareholder={this.state.selectedShareholder}\r\n          ></MapTransactionsDetailComposite>\r\n        ) : (\r\n          <LoadingPage message=\"Loading\"></LoadingPage>\r\n        )}\r\n        <ErrorBoundary>\r\n          <ToastContainer\r\n            hideProgressBar={true}\r\n            closeOnClick={false}\r\n            closeButton={true}\r\n            newestOnTop={true}\r\n            position=\"bottom-right\"\r\n            toastClassName=\"toast-notification-wrap\"\r\n          />\r\n        </ErrorBoundary>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MapTransactionsComposite);\r\n\r\nMapTransactionsComposite.propTypes = {\r\n  activeItem: PropTypes.object,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","export const carrierCode = \"CarrierCode\";\r\nexport const transportationType = \"TransportationType\";\r\nexport const shareholderCode = \"ShareHolderCode\";\r\nexport const driverCode = \"DriverCode\";\r\nexport const customerCode = \"CustomerCode\";\r\nexport const trailerCode = \"TrailerCode\";\r\nexport const originTerminalCode = \"OriginTerminalCode\";\r\nexport const primeMoverCode = \"PrimeMoverCode\";\r\nexport const vehicleCode = \"VehicleCode\";\r\nexport const destinationCode = \"DestinationCode\";\r\nexport const finishedProductCode = \"FinishedProductCode\";\r\nexport const shipmentCode = \"ShipmentCode\";\r\nexport const orderCode = \"OrderCode\";\r\nexport const receiptCode = \"ReceiptCode\";\r\nexport const suppliercode = \"SupplierCode\";\r\nexport const marineDispatchCode = \"MarineDispatchCode\";\r\nexport const marineReceiptCode = \"MarineReceiptCode\";\r\nexport const supplierCode = \"SupplierCode\";\r\nexport const contractCode = \"ContractCode\";\r\n\r\nexport const railDispatchCode = \"RailDispatchCode\";\r\nexport const railReceiptCode = \"RailReceiptCode\";\r\nexport const railRouteCode = \"RailRouteCode\";\r\nexport const wagonCode = \"WagonCode\";\r\n\r\nexport const compartmentCode = \"CompartmentCode\";\r\n\r\nexport const smsConfigurationCode = \"SMSConfigurationCode\";\r\nexport const pipelineDispatchCode = \"PipelineDispatchCode\";\r\nexport const pipelineReceiptCode = \"PipelineReceiptCode\";\r\nexport const EmailConfigurationCode = \"EmailConfigurationCode\";\r\n\r\nexport const baseProductCode = \"BaseProductCode\";\r\nexport const locationCode = \"LocationCode\";\r\nexport const gantryCode = \"GantryCode\";\r\n\r\nexport const siteViewType = \"SiteViewType\";\r\n\r\nexport const entityCode = \"EntityCode\";\r\n\r\nexport const entityType = \"EntityType\";\r\nexport const cardReaderCode = \"CardReaderCode\";\r\nexport const accessCardCode = \"AccessCardCode\";\r\nexport const bcuCode = \"BcuCode\";\r\nexport const deuCode = \"DeuCode\";\r\nexport const weighBridgeCode = \"WeighBridgeCode\";\r\nexport const weight = \"Weight\";\r\nexport const outOfToleranceAllowed = \"OutOfToleranceAllowed\";\r\n\r\nexport const loadingArmCode = \"LoadingArmCode\";\r\nexport const transportaionType = \"TransportationType\";\r\nexport const bayCode = \"BayCode\";\r\nexport const TransactionNumber = \"TransactionNumber\";\r\nexport const BatchNumber = \"BatchNumber\";\r\nexport const terminalCode = \"TerminalCode\";\r\nexport const tankGroupCode = \"TankGroupCode\";\r\nexport const tankCode = \"TankCode\";\r\nexport const meterCode = \"MeterCode\";\r\n\r\nexport const shipmentType = \"ShipmentType\";\r\nexport const shipmentStatus = \"ShipmentStatus\";\r\nexport const meterLineType = \"MeterLineType\";\r\nexport const dispatchCode = \"DispatchCode\";\r\nexport const railReceiptStatus = \"RailReceiptStatus\";\r\nexport const receiptStatus = \"ReceiptStatus\";\r\nexport const fptTansactionID = \"FPTransactionID\";\r\nexport const productCategoryType = \"ProductCategoryType\";\r\nexport const marineReason = \"Reason\";\r\n\r\nexport const sealMasterCode = \"SealMasterCode\";\r\nexport const marineDispatchReason = \"Reason\";\r\nexport const OperationName = \"OperationName\";\r\nexport const FPTransactionID = \"FPTransactionID\";\r\nexport const ProductCategoryType = \"ProductCategoryType\";\r\nexport const compartmentSeqNoInVehicle = \"CompartmentSeqNoInVehicle\";\r\nexport const adjustedPlanQuantity = \"AdjustedPlanQuantity\";\r\nexport const forceComplete = \"ForceComplete\";\r\nexport const dispatchStatus = \"DispatchStatus\";\r\nexport const HolidayDate = \"HolidayDate\";\r\nexport const ActionID = \"ActionID\";\r\nexport const EODTimePrev = \"EODTimePrev\";\r\nexport const TerminalAction = \"TerminalAction\";\r\nexport const EODTime = \"EODTime\";\r\nexport const MonthStartDay = \"MonthStartDay\";\r\nexport const captainCode = \"CaptainCode\";\r\nexport const userType = \"GeneralTMUserType\";\r\nexport const generalTMUserCode = \"GeneralTMUserCode\";\r\nexport const isPriority = \"IsPriority\";\r\nexport const actualTerminalCode = \"ActualTerminalCode\";\r\nexport const shipmentBondNo = \"ShipmentBondNo\"\r\nexport const receiptBondNo = \"ReceiptBondNo\"\r\nexport const marineReceiptStatus = \"MarineReceiptStatus\";\r\nexport const deviceType = \"DeviceType\";\r\nexport const deviceCode = \"DeviceCode\";\r\nexport const bayGroup = \"BayGroup\";\r\nexport const pipelineHeaderCode = \"PipelineHeaderCode\";\r\nexport const exchangePartnerName = \"ExchangePartner\";\r\nexport const personID = \"PersonID\";\r\nexport const userName = \"UserName\";\r\nexport const pipelinePlanCode = \"PipelinePlanCode\";\r\nexport const pipelinePlanType = \"PipelinePlanType\";\r\nexport const channelCode = \"ChannelCode\";\r\nexport const ProcessName = \"ProcessName\";\r\nexport const reconciliationCode = \"ReconciliationCode\";\r\nexport const NotificationGroupCode = \"NotificationGroupCode\";\r\nexport const NotificationGroupStatus = \"NotificationGroupStatus\";\r\nexport const NotificationGroupDesc = \"NotificationGroupDesc\";\r\nexport const NotificationResSource = \"NotificationResSource\";\r\nexport const NotificationResMsgCode = \"NotificationResMsgCode\";\r\nexport const NotificationOrigResSource = \"NotificationOrigResSource\";\r\nexport const NotificationOrigResMsgCode = \"NotificationOrigResMsgCode\";\r\nexport const NotificationMessageCode = \"NotificationMessageCode\"\r\nexport const positionType = \"PositionType\";\r\nexport const roleName = \"RoleName\";\r\nexport const exchangeAgreementCode = \"ExchangeAgreementCode\";\r\nexport const ProductTransferAgreementCode = \"ProductTransferAgreementCode\";\r\nexport const ShareholderAgreementStatus = \"ShareholderAgreementStatus\";\r\nexport const RequestorShareholder = \"RequestorShareholder\";\r\nexport const LenderShareholder = \"LenderShareholder\";\r\nexport const requestCode = \"RequestCode\";\r\nexport const TransferReferenceCode = \"TransferReferenceCode\";\r\nexport const ShiftID = \"ShiftID\";\r\nexport const ShiftName = \"ShiftName\";\r\nexport const printerName = \"PrinterName\";\r\nexport const locationtype = \"LocationType\";\r\nexport const forceClosureReason = \"ForceClosureReason\";\r\nexport const TransactionType = \"TransactionType\";\r\nexport const CustomerRecipeCode = \"CustomerRecipeCode\";\r\n\r\nexport const coaTemplateCode = \"COATemplateCode\";\r\nexport const coaManagementCode = \"COAManagementCode\";\r\nexport const coaParameterCode = \"COAParameterCode\";\r\nexport const coaManagementFinishedProductCode = \"COAManagementFinishedProductCode\";\r\nexport const coaCustomerCode = \"COACustomerCode\";\r\nexport const coaFinishedProductCode = \"COAFinishedProductCode\";\r\nexport const coaAssignmentCode = \"COAAssignmentCode\";\r\nexport const coaTransportationType = \"COATransportationType\";\r\nexport const coaTransactionType = \"COATransactionType\";\r\nexport const coaSeqNumber = \"COASeqNumber\";\r\nexport const forecastDate = \"ForecastDate\";\r\nexport const forecastTanks = \"ForecastTanks\";","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["TMUserActions","_ref","operationsVisibilty","breadcrumbItem","shareholders","selectedShareholder","onShareholderChange","onDelete","onAdd","popUpContent","shrVisible","handleBreadCrumbClick","addVisible","deleteVisible","modelOpen","setModelOpen","useState","popUpOpen","setPopUpOpen","handlePopUpClick","add","length","_jsxs","className","style","alignItems","padding","children","_jsx","marginTop","ErrorBoundary","TranslationConsumer","t","Breadcrumb","parents","map","parentitem","Item","onClick","undefined","itemCode","localizedKey","justifyContent","_Fragment","Select","placeholder","value","disabled","shareholder","options","Utilities","onChange","Modal","open","size","Content","Footer","Button","type","content","float","display","Popup","position","element","Icon","root","name","color","on","onMouseLeave","VerticalMenu","Header","item","popUpMenuClick","menuItem","fieldName","fieldValue","marginLeft","delete","defaultProps","itemName","itemProps","isComponent","TMUserActionsComposite","MapTransactionsDetail","modMapTransactions","validationErrors","otherData","listOptions","onTransactionSearchChange","onReceiptSearchChange","selectedCompRow","handleComRowSelectionChange","handleComRowClick","selectLocalTransactionRow","handleLocalTranRowSelectionChange","handleLocalTranRowClick","onFieldChange","handleCellDataEdit","handleGetTanksForMeter","useTranslation","handleTankEditDropDown","cellData","TransLoadBcu","BatchInfoForUI","rowIndex","ProductType","MeterCode","field","fluid","tankCodes","indicator","reserveSpace","search","noResultsMessage","handleBatchTankCodeDropDown","label","transactionTypes","TransactionType","data","getOptionsWithSelect","transactionCodes","TransactionCode","onSearch","TransportationType","Constants","ROAD","shareholderCodes","ShareholderCode","Input","ScheduledDate","Date","toLocaleDateString","Status","DriverCode","MARINE","VehicleCode","DispatchReceiptInfoForUI","DataTable","selectionMode","selection","onSelectionChange","onCellClick","rowData","scrollable","scrollHeight","Column","header","RAIL","renderer","LocalTranInfoForUI","searchPlaceholder","toLocaleString","handleIsRequiredCompartmentCell","editable","editFieldType","customEditRenderer","TransLoadSource","receiptCodes","EntityCode","error","railWagonCodes","WagonCode","MapTransactionsDetailComposite","Component","constructor","arguments","state","lodash","emptyMapTransactions","mapTransactionsValidationDef","IsValidStatus","ProductCode","isReadyToRender","transportationTypeOptions","transactionTypeOptions","shareholderCodeOptions","dispatchReceiptCodeOptions","transactionCodeOptions","transactionCodeSearchOptions","tankCodeOptions","receiptCodeOptions","receiptCodeSearchOptions","railWagonCodeOptions","latestMeterCode","closeRailShipment","printBOL","isCloseEnabled","isPrintEnabled","reasonForClosure","launchPopup","handleReceiptCodeSearchChange","receiptCode","this","filter","toLowerCase","includes","slice","setState","console","log","meterCode","axios","RestAPIs","props","tokenDetails","tokenInfo","then","response","result","IsSuccess","Array","isArray","EntityResult","catch","onTransactionCodeClear","row","FinishedProductCode","getLocalTransactions","LoadingDetails","RailMarineTransactions","getBCUDeviceDetails","BCUCode","getBatchDetails","handleChange","propertyName","getTransactionCodes","getRoadDispatch","getRoadReceipt","getRailDispatch","getRailReceipt","getMarineDispatch","getMarineReceipt","getWagonCodes","BatchDetailsList","newVal","handleTransactionCodeSearchChange","transactionCode","handlePrint","transportationType","handleTruckShipmentPrintBOL","handleTruckReceiptPrintBOD","handleMarineShipmentPrintBOL","handleMarineReceiptPrintBOD","handleRailShipmentPrintBOL","handleRailReceiptPrintBOD","matchMapTransactions","ActualQuantity","QuantityUOM","split","CommonInfo","TrailerCode","CarrierCode","CarrierCompanyCode","ShareHolderCode","CompartmentSeqNoInVehicle","IsLocalLoaded","ShipmentCode","ReceiptCode","batchDetail","TankCode","ArrLoadingDetailBP","forEach","bp","BaseProductCode","ArrLoadingDetailAdditive","adv","AdditiveProductCode","ConvertLoadingDetailsFromRoadToRail","ConvertLoadingDetailsFromRoadToMarine","CompartmentCode","BcuCode","BatchID","TransactionID","validateMatch","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","ErrorList","onNotice","handleCloseShipmentReceiptModal","modalvariables","getCloseModalPopupText","popupHeaderLabel","flexWrap","disbaled","msgStatusHeader","keyField","errorMsg","toast","NotifyEvent","notificationMessage","autoClose","handleShipmentReceiptClose","componentDidMount","userDetails","IsArchived","getTransactionTypes","getShareholders","shipment","receipt","key","push","text","ShareholderList","mapTransactions","obj","Table","transactionCodeList","Code","keyCode","KeyCodes","keyDataCode","getShipmentStatusOperations","TransloadSourceType","ShipmentCompartments","sort","item1","item2","compartmentInfo","ID","CustomerOrSupplierCode","DestinationOrOriginTerminalCode","PlannedQuantity","Quantity","LoadedQuantity","ShipmentCompartmentStatus","ShipmentDestinationCompartmentsInfo","CustomerCode","DestinationCode","popupVariables","getReciptsStatusOperations","ReceiptStatus","IsVolumeBased","ReceiptCompartmentsInfo","UnLoadedQuantity","UnLoadedQuantityUOM","ReceiptCompartmentStatus","ReceiptOriginTerminalCompartmentsInfo","SupplierCode","OriginTerminalCode","GetRailDispatchOperations","DispatchStatus","DispatchCompartmentPlanList","SequenceNo","PlanQuantityUOM","LoadedQuantityUOM","DispatchCompartmentStatus","DispatchCompartmentDetailPlanList","GetRailReceiptOperations","RailMarineReceiptCompartmentPlanList","UnloadedQuantity","UnloadedQuantityUOM","RailMarineReceiptCompartmentDetailPlanList","handleTruckShipmentClose","handleTruckReceiptClose","handleMarineShipmentClose","handleMarineReceiptClose","handleRailShipmentClose","handleRailReceiptClose","entity","formCloseShipmentRequest","Entity","CLOSED","DriverCoderiverCode","Reason","DispatchCode","ViewAllTruckShipmentLoadingDetails","topUpDecantApprovalStatus","topUpDecantEnabled","Remarks","listShipmentCompartmentInfo","listShipmentLoadingCompData","getMarineShipmentStatusOperations","VesselCode","getMarineReceiptStatusOperations","compartmentStatus","LocationCode","DispatchReceiptStatus","CompartmentStatus","transaction","getBatchDetailsForUI","loadingInfoList","detailList","recordID","loadingInfo","getBatchInfoFromLoadingDetails","LoadingDetailFPinfo","baseProductInfo","additiveInfo","loading","productType","batchInfo","GrossQuantity","NetQuantity","StartTotalizer","EndTotalizer","Density","ProductDensity","ProductDensityUOM","Pressure","PressureUOM","Temperature","TemperatureUOM","StartTime","EndTime","deviceCode","IsTransloading","getReceiptCodes","getReceiptCodeSearchOptions","modReceiptCode","find","wagonCodeList","transactionStatus","receiptStatus","isVolumneBased","modShipment","getTransactionCodeSearchOptions","modTransactionCode","roadLoadingDetails","railLoadingDetails","ldInfo","railLDInfo","TransactionFPinfo","ArrTransactionBP","ArrTransactionAdditive","BayCode","CompartmentSeqNoInTrailer","GeneralTMUserCode","LoadingType","LoadingDetailsType","OfficerName","CopyAttributes","ldbpInfo","RailMarineTransactionProductInfo","ex","marineLoadingDetails","marineLDInfo","roadLoadingDetailsInfo","railLoadingDetailsInfo","ArmCode","LoadingArmCode","Attributes","CalculatedGross","CalculatedNet","CalculatedValue","CalculatedValueUOM","FlangeNumber","FlowRate","FlowRateUOM","GrossMass","WeightInVaccum","InjectorPosition","IsInOffSpec","KFactorCurrent","KFactorProved","LeakageTotalizer","MassUOM","WeightInVaccumUOM","NetEndTotalizer","PresetQuantity","ReferenceDensity","ResetQuantity","UnitPrice","VapourGrossQuantity","VapourNetQuantity","VapourUOM","VCF","WeightInAir","WeightInAirUOM","validateField","batch","Object","values","every","notifyMsg","msgCodes","msgCode","handleCloseTransaction","render","TMDetailsHeader","newEntityName","transportationTypes","dispatchReceiptCodes","textAlign","connect","getUserDetails","TokenAuth","userActions","bindActionCreators","MapTransactionsComposite","operationsVisibility","notifyEvent","PrimaryShareholder","activeItem","Key","LoadingPage","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","toastClassName","entityCode","popUpContents","margin","List","carrierCode","shareholderCode","driverCode","customerCode","trailerCode","originTerminalCode","primeMoverCode","vehicleCode","destinationCode","finishedProductCode","shipmentCode","orderCode","marineDispatchCode","marineReceiptCode","supplierCode","contractCode","railDispatchCode","railReceiptCode","railRouteCode","wagonCode","compartmentCode","smsConfigurationCode","pipelineDispatchCode","pipelineReceiptCode","EmailConfigurationCode","baseProductCode","locationCode","siteViewType","entityType","cardReaderCode","accessCardCode","bcuCode","deuCode","weighBridgeCode","weight","outOfToleranceAllowed","loadingArmCode","transportaionType","bayCode","TransactionNumber","BatchNumber","terminalCode","tankGroupCode","tankCode","shipmentType","shipmentStatus","meterLineType","dispatchCode","fptTansactionID","productCategoryType","marineReason","sealMasterCode","marineDispatchReason","OperationName","FPTransactionID","ProductCategoryType","compartmentSeqNoInVehicle","adjustedPlanQuantity","forceComplete","dispatchStatus","HolidayDate","ActionID","EODTimePrev","TerminalAction","EODTime","MonthStartDay","captainCode","userType","generalTMUserCode","isPriority","actualTerminalCode","shipmentBondNo","receiptBondNo","deviceType","bayGroup","pipelineHeaderCode","exchangePartnerName","personID","userName","pipelinePlanCode","pipelinePlanType","channelCode","ProcessName","reconciliationCode","NotificationGroupCode","NotificationGroupStatus","NotificationGroupDesc","NotificationResSource","NotificationResMsgCode","NotificationOrigResSource","NotificationOrigResMsgCode","NotificationMessageCode","positionType","exchangeAgreementCode","ProductTransferAgreementCode","ShareholderAgreementStatus","RequestorShareholder","LenderShareholder","requestCode","TransferReferenceCode","ShiftID","ShiftName","printerName","locationtype","forceClosureReason","CustomerRecipeCode","coaTemplateCode","coaManagementCode","coaParameterCode","coaManagementFinishedProductCode","coaSeqNumber","forecastDate","forecastTanks","ddlOptions","selectOptionText","option","unshift","getCurrentDateFormat","language","window","navigator","userLanguage","moment","longDateFormat","class"],"sourceRoot":""}