{"version":3,"file":"static/js/6507.7890ef58.chunk.js","mappings":"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","sources":["Components/Composite/Details/TruckShipmentSealDetailsComposite.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { sealCompValidationDef } from \"../../../JS/DetailsTableValidationDef\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport lodash from \"lodash\";\r\nimport axios from \"axios\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { toast } from \"react-toastify\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Modal, Button,  Input,  } from \"@scuf/common\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\n\r\nclass TruckShipmentSealDetailsComposite extends Component {\r\n  state = {\r\n    sealCompartments: this.props.sealCompartments,\r\n  };\r\n   \r\n\r\n  \r\n  updateSealCompartments=()=>{\r\n    let sealCompartments = lodash.cloneDeep(this.state.sealCompartments);\r\n    let sealCompList = [];\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ViewAllShipment_SealCompUpdate\",\r\n      messageResultDetails: [],\r\n    };\r\n  \r\n    sealCompartments.forEach((item) => {\r\n      sealCompList.push({\r\n        SealNo: item.SealNo,\r\n        CompNo: item.CompNo,\r\n        ShareholderCode: this.props.selectedShareholder,\r\n        ShipmentCode: this.props.transactionCode,\r\n      });\r\n\r\n      sealCompValidationDef.forEach((col) => {\r\n        let err = \"\";\r\n  \r\n        if (col.validator !== undefined) {\r\n          err = Utilities.validateField(\r\n            col.validator,\r\n            item[col.field]\r\n          );\r\n        }\r\n  \r\n        if (err !== \"\") {\r\n          notification.messageResultDetails.push({\r\n            keyFields: [\r\n              \"ShipmentCompDetail_CompSeqInVehicle\",\r\n              col.displayName,\r\n            ],\r\n            keyValues: [\r\n              item.CompNo,\r\n              item[col.field],\r\n            ],\r\n            isSuccess: false,\r\n            errorMessage: err,\r\n          });\r\n        }\r\n      });\r\n  \r\n    });\r\n  \r\n   \r\n  if (notification.messageResultDetails.length > 0 ) {\r\n    toast(\r\n      <ErrorBoundary>\r\n        <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n      </ErrorBoundary>,\r\n      {\r\n        autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n      }\r\n    );\r\n     return;\r\n  }\r\n  \r\n  \r\n  notification.messageResultDetails.push(\r\n    {\r\n          keyFields: [\"ShipmentCompDetail_ShipmentNumber\"],\r\n          keyValues: [this.props.transactionCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        });\r\n      \r\n  \r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shareholderCode,\r\n        value: this.props.selectedShareholder,\r\n      },\r\n      {\r\n        key: KeyCodes.shipmentCode,\r\n        value: this.props.transactionCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.shipmentCode,\r\n      KeyCodes: keyCode,\r\n      Entity: sealCompList,\r\n    };\r\n    axios(\r\n      RestAPIs.UpdateSealCompartments,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        notification.messageResultDetails[0].errorMessage = result.ErrorList[0];\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while update Shipment Seal Info:\", error);\r\n      });\r\n  }\r\n  \r\n  isNodeEnterpriseOrWebortal()\r\n  {\r\n    if (this.props.userDetails.EntityResult.IsEnterpriseNode || this.props.userDetails.EntityResult.IsWebPortalUser) {\r\n     return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n   handleSealNoInput = (data) => {\r\n    let cellInfo = data.rowData;\r\n    return (\r\n      <Input\r\n        fluid\r\n        value={cellInfo.SealNo}\r\n        disabled={false}\r\n        onChange={(celldata) => {\r\n          let sealCompartments = lodash.cloneDeep(this.state.sealCompartments);\r\n\r\n          let index = sealCompartments.findIndex((comp) => {\r\n            return comp.CompNo === cellInfo.CompNo;\r\n          });\r\n\r\n          if (index >= 0) sealCompartments[index].SealNo = celldata;\r\n\r\n          this.setState({ sealCompartments });\r\n        }}\r\n        reserveSpace={false}\r\n      />\r\n    );\r\n  };\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal\r\n            open={true}\r\n            size=\"large\"\r\n            className=\"sealCompartmentsPopUp\"\r\n          >\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h3>\r\n                  {t(\"ViewAllShipment_SealCompartment\") +\r\n                    \" : \" +\r\n                    this.props.transactionCode}\r\n                </h3>\r\n              </div>\r\n              <div className=\"col-12 detailsTable\">\r\n                <DataTable data={this.state.sealCompartments}>\r\n                  <DataTable.Column\r\n                    className=\"compColHeight\"\r\n                    field={\"CompNo\"}\r\n                    header={t(\"ViewShipment_CompartmentSeq\")}\r\n                    editable={false}\r\n                  />\r\n                  <DataTable.Column\r\n                    className=\"compColHeight\"\r\n                    field=\"FinishedProductCode\"\r\n                    header={t(\"ViewShipment_FinishedProductCode\")}\r\n                    editable={false}\r\n                  />\r\n                  <DataTable.Column\r\n                    className=\"compColHeight\"\r\n                    field=\"ShipmentCompartmentStatus\"\r\n                    header={t(\"ViewShipment_Status\")}\r\n                    editable={false}\r\n                  />\r\n                  <DataTable.Column\r\n                    className=\"compColHeight\"\r\n                    field=\"LoadedQuantityUOM\"\r\n                    header={t(\"ViewShipmentStatus_LoadedQuantity\")}\r\n                    editable={false}\r\n                  />\r\n                  <DataTable.Column\r\n                    className=\"compColHeight\"\r\n                    header={t(\"SealMaster_SealNo\")}\r\n                    renderer={(cellData) => this.handleSealNoInput(cellData)}\r\n                  />\r\n                </DataTable>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n            <Button\r\n              content={t(\"MarineEOD_Close\")}\r\n              className=\"cancelButton\"\r\n              onClick={this.props.handleSealClose}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              content={t(\"SealMaster_Save\")}\r\n              disabled={this.isNodeEnterpriseOrWebortal()}\r\n              onClick={this.updateSealCompartments}\r\n            />\r\n          </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TruckShipmentSealDetailsComposite);\r\n\r\nTruckShipmentSealDetailsComposite.propTypes = {\r\n  transactionCode: PropTypes.string.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  sealCompartments: PropTypes.object.isRequired,\r\n  handleSealClose: PropTypes.func.isRequired,\r\n};\r\n \r\n\r\n\r\n\r\n\r\n"],"names":["TruckShipmentSealDetailsComposite","Component","constructor","arguments","state","sealCompartments","this","props","updateSealCompartments","lodash","sealCompList","notification","messageType","message","messageResultDetails","forEach","item","push","SealNo","CompNo","ShareholderCode","selectedShareholder","ShipmentCode","transactionCode","sealCompValidationDef","col","err","undefined","validator","Utilities","field","keyFields","displayName","keyValues","isSuccess","errorMessage","length","toast","_jsx","ErrorBoundary","children","NotifyEvent","notificationMessage","autoClose","keyCode","key","KeyCodes","value","obj","ShareHolderCode","keyDataCode","Entity","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","data","IsSuccess","ErrorList","catch","error","console","log","handleSealNoInput","cellInfo","rowData","Input","fluid","disabled","onChange","celldata","index","findIndex","comp","setState","reserveSpace","isNodeEnterpriseOrWebortal","userDetails","EntityResult","IsEnterpriseNode","IsWebPortalUser","render","TranslationConsumer","t","_jsxs","Modal","open","size","className","Content","DataTable","Column","header","editable","renderer","cellData","Footer","Button","content","onClick","handleSealClose","type","connect","getUserDetails","TokenAuth"],"sourceRoot":""}