{"version":3,"file":"static/js/275.b391ac61.chunk.js","mappings":"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","sources":["Components/UIBase/Details/TruckShipmentManualEntryDetails.jsx","Components/Composite/Details/TruckShipmentManualEntryDetailsComposite.jsx"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Input, Select, DatePicker, Accordion, Tab } from \"@scuf/common\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nTruckShipmentManualEntryDetails.propTypes = {\r\n  modTruckManualEntryLoadingDetailsCommonInfo: PropTypes.object.isRequired,\r\n  modTruckManualEntryLoadingFPInfo: PropTypes.object.isRequired,\r\n  modRailMarineTransactionCommonInfo: PropTypes.object.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  validationErrorsForFP: PropTypes.object.isRequired,\r\n  currentCompTopUpReq: PropTypes.object.isRequired,\r\n  selectedAttributeBPList: PropTypes.object.isRequired,\r\n  bpAttributeValidationErrors: PropTypes.object.isRequired,\r\n  selectedAttributeAdvList: PropTypes.object.isRequired,\r\n  advAttributeValidationErrors: PropTypes.object.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    quantityUOMOptions: PropTypes.array,\r\n    densityUOMS: PropTypes.array,\r\n    temperatureUOMs: PropTypes.array,\r\n    calcValueUOM: PropTypes.array,\r\n    compartmentSeqNoInVehicleList: PropTypes.array,\r\n    Bays: PropTypes.array,\r\n    LoadingArms: PropTypes.array,\r\n    BCUs: PropTypes.array,\r\n    wagonCodes: PropTypes.array,\r\n    receiptCodes: PropTypes.array,\r\n    marineReceiptCompCodes: PropTypes.array,\r\n  }).isRequired,\r\n  modTruckManualEntryLoadingBPInfo: PropTypes.array.isRequired,\r\n  modTruckManualEntryLoadingAdvInfo: PropTypes.array.isRequired,\r\n  selectedAttributeList: PropTypes.array.isRequired,\r\n  attributeValidationErrors: PropTypes.array.isRequired,\r\n  productList: PropTypes.array.isRequired,\r\n  validationErrorsForBP: PropTypes.array.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onTabChange: PropTypes.func.isRequired,\r\n  onDateTextChange: PropTypes.func.isRequired,\r\n  handleAttributeCellDataEdit: PropTypes.func.isRequired,\r\n  handleAttributeCellDataEditBPandAdditive: PropTypes.func.isRequired,\r\n  activeIndex: PropTypes.number.isRequired,\r\n  transloadSource: PropTypes.string.isRequired,\r\n  isBCUTransload: PropTypes.bool.isRequired,\r\n  // railReceipts: PropTypes.array.isRequired,\r\n  // marineReceipts: PropTypes.array.isRequired,\r\n};\r\n\r\nTruckShipmentManualEntryDetails.defaultProps = {};\r\n\r\nexport function TruckShipmentManualEntryDetails({\r\n  modTruckManualEntryLoadingDetailsCommonInfo,\r\n  modTruckManualEntryLoadingFPInfo,\r\n  modTruckManualEntryLoadingBPInfo,\r\n  modTruckManualEntryLoadingAdvInfo,\r\n  modRailMarineTransactionCommonInfo,\r\n  validationErrors,\r\n  validationErrorsForFP,\r\n  validationErrorsForBP,\r\n  listOptions,\r\n  onFieldChange,\r\n  onTabChange,\r\n  productList,\r\n  activeIndex,\r\n  onDateTextChange,\r\n  selectedAttributeList,\r\n  attributeValidationErrors,\r\n  selectedAttributeBPList,\r\n  bpAttributeValidationErrors,\r\n  selectedAttributeAdvList,\r\n  advAttributeValidationErrors,\r\n  handleAttributeCellDataEdit,\r\n  handleAttributeCellDataEditBPandAdditive,\r\n  currentCompTopUpReq,\r\n  transloadSource,\r\n  isBCUTransload,\r\n\r\n  // railReceipts,\r\n  // marineReceipts\r\n}) {\r\n  console.log(\"In HTML\", modTruckManualEntryLoadingFPInfo);\r\n  const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n    let attributeValidation = [];\r\n    if (attributeValidationErrors !== undefined)\r\n      attributeValidation = attributeValidationErrors.find(\r\n        (selectedAttribute) => {\r\n          return selectedAttribute.TerminalCode === terminal;\r\n        }\r\n      );\r\n    return attributeValidation.attributeValidationErrors;\r\n  };\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div>\r\n          <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  placeholder=\"Select\"\r\n                  value={\r\n                    modTruckManualEntryLoadingDetailsCommonInfo.CompartmentSeqNoInVehicle\r\n                  }\r\n                  label={t(\"LoadingDetailsEntry_CompSeqNo\")}\r\n                  options={Utilities.transferListtoOptions(\r\n                    listOptions.compartmentSeqNoInVehicleList\r\n                  )}\r\n                  onChange={(data) =>\r\n                    onFieldChange(\"Common\", \"CompartmentSeqNoInVehicle\", data)\r\n                  }\r\n                  multiple={false}\r\n                  reserveSpace={false}\r\n                  search={false}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                  indicator=\"required\"\r\n                  error={t(validationErrors.CompartmentSeqNoInVehicle)}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <DatePicker\r\n                  fluid\r\n                  value={new Date(modTruckManualEntryLoadingFPInfo.StartTime)}\r\n                  label={t(\"LoadingDetailsEntry_loadStartTime\")}\r\n                  disablePast={false}\r\n                  type=\"datetime\"\r\n                  indicator=\"required\"\r\n                  onChange={(data) => onFieldChange(\"FP\", \"StartTime\", data)}\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  minuteStep={1}\r\n                  reserveSpace={false}\r\n                  disableFuture={true}\r\n                  onTextChange={(value, error) => {\r\n                    onDateTextChange(\"StartTime\", value, error);\r\n                  }}\r\n                  error={t(validationErrorsForFP.StartTime)}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <DatePicker\r\n                  fluid\r\n                  value={new Date(modTruckManualEntryLoadingFPInfo.EndTime)}\r\n                  label={t(\"LoadingDetailsEntry_loadEndTime\")}\r\n                  disablePast={false}\r\n                  type=\"datetime\"\r\n                  indicator=\"required\"\r\n                  onChange={(data) => onFieldChange(\"FP\", \"EndTime\", data)}\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  minuteStep={1}\r\n                  reserveSpace={false}\r\n                  disableFuture={true}\r\n                  onTextChange={(value, error) => {\r\n                    onDateTextChange(\"EndTime\", value, error);\r\n                  }}\r\n                  error={t(validationErrorsForFP.EndTime)}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  placeholder=\"Select\"\r\n                  value={modTruckManualEntryLoadingDetailsCommonInfo.BayCode}\r\n                  label={t(\"Bay_Bay\")}\r\n                  options={Utilities.transferListtoOptions(listOptions.Bays)}\r\n                  onChange={(data) => onFieldChange(\"Common\", \"BayCode\", data)}\r\n                  multiple={false}\r\n                  reserveSpace={false}\r\n                  search={false}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                  indicator=\"required\"\r\n                  error={t(validationErrors.BayCode)}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  placeholder=\"Select\"\r\n                  value={modTruckManualEntryLoadingDetailsCommonInfo.BCUCode}\r\n                  label={t(\"LoadingDetails_BCUCode\")}\r\n                  options={Utilities.transferListtoOptions(listOptions.BCUs)}\r\n                  onChange={(data) => onFieldChange(\"Common\", \"BCUCode\", data)}\r\n                  multiple={false}\r\n                  reserveSpace={false}\r\n                  search={false}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                  indicator=\"required\"\r\n                  error={t(validationErrors.BCUCode)}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  placeholder=\"Select\"\r\n                  value={modTruckManualEntryLoadingFPInfo.LoadingArmCode}\r\n                  label={t(\"Loadingarm_Loadingarm\")}\r\n                  options={Utilities.transferListtoOptions(\r\n                    listOptions.LoadingArms\r\n                  )}\r\n                  onChange={(data) =>\r\n                    onFieldChange(\"FP\", \"LoadingArmCode\", data)\r\n                  }\r\n                  multiple={false}\r\n                  reserveSpace={false}\r\n                  search={false}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                  error={t(validationErrorsForFP.LoadingArmCode)}\r\n                  indicator=\"required\"\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modTruckManualEntryLoadingFPInfo.FinishedProductCode}\r\n                  label={t(\"MarineDispatchManualEntry_FinishedProduct\")}\r\n                  disabled={true}\r\n                  onChange={(data) =>\r\n                    onFieldChange(\"FP\", \"FinishedProductCode\", data)\r\n                  }\r\n                  reserveSpace={false}\r\n                  error={t(validationErrorsForFP.FinishedProductCode)}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  placeholder=\"Select\"\r\n                  value={modTruckManualEntryLoadingFPInfo.QuantityUOM}\r\n                  label={t(\"LoadingDetailsEntry_QuantityUOM\")}\r\n                  indicator=\"required\"\r\n                  options={listOptions.quantityUOMOptions}\r\n                  onChange={(data) => onFieldChange(\"FP\", \"QuantityUOM\", data)}\r\n                  multiple={false}\r\n                  reserveSpace={false}\r\n                  search={false}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                  error={t(validationErrorsForFP.QuantityUOM)}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modTruckManualEntryLoadingFPInfo.TransactionID}\r\n                  label={t(\"LoadingDetailsEntry_TransactionNo\")}\r\n                  onChange={(data) =>\r\n                    onFieldChange(\"FP\", \"TransactionID\", data)\r\n                  }\r\n                  reserveSpace={false}\r\n                  error={t(validationErrorsForFP.TransactionID)}\r\n                />\r\n              </div>\r\n              {isBCUTransload ? (\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                  <Select\r\n                    fluid\r\n                    placeholder=\"Select\"\r\n                    value={modRailMarineTransactionCommonInfo.ReceiptCode}\r\n                    label={\r\n                      transloadSource === \"RAIL\"\r\n                        ? t(\"Rail_Receipt_Code_ME\")\r\n                        : t(\"LD_Marine_ReceiptCode\")\r\n                    }\r\n                    indicator=\"required\"\r\n                    options={listOptions.receiptCodes}\r\n                    onChange={(data) =>\r\n                      onFieldChange(\r\n                        transloadSource === \"RAIL\"\r\n                          ? \"RailTransload\"\r\n                          : \"MarineTransload\",\r\n                        \"ReceiptCode\",\r\n                        data\r\n                      )\r\n                    }\r\n                    multiple={false}\r\n                    reserveSpace={false}\r\n                    search={false}\r\n                    noResultsMessage={t(\"noResultsMessage\")}\r\n                    error={t(validationErrors.ReceiptCode)}\r\n                  />\r\n                </div>\r\n              ) : null}\r\n              {isBCUTransload && transloadSource === \"RAIL\" ? (\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                  <Select\r\n                    fluid\r\n                    placeholder=\"Select\"\r\n                    value={modRailMarineTransactionCommonInfo.TrailerCode}\r\n                    label={t(\"RailWagonConfigurationDetails_RailWagonCode\")}\r\n                    indicator=\"required\"\r\n                    options={listOptions.wagonCodes}\r\n                    onChange={(data) =>\r\n                      onFieldChange(\"RailTransload\", \"TrailerCode\", data)\r\n                    }\r\n                    multiple={false}\r\n                    reserveSpace={false}\r\n                    search={false}\r\n                    noResultsMessage={t(\"noResultsMessage\")}\r\n                    error={t(validationErrors.TrailerCode)}\r\n                  />\r\n                </div>\r\n              ) : null}\r\n              {isBCUTransload && transloadSource === \"MARINE\" ? (\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                  <Select\r\n                    fluid\r\n                    placeholder=\"Select\"\r\n                    value={\r\n                      modRailMarineTransactionCommonInfo.CompartmentSeqNoInVehicle\r\n                    }\r\n                    label={t(\"LD_Marine_ReceiptCompCode\")}\r\n                    indicator=\"required\"\r\n                    options={listOptions.marineReceiptCompCodes}\r\n                    onChange={(data) =>\r\n                      onFieldChange(\r\n                        \"MarineTransload\",\r\n                        \"CompartmentSeqNoInVehicle\",\r\n                        data\r\n                      )\r\n                    }\r\n                    multiple={false}\r\n                    reserveSpace={false}\r\n                    search={false}\r\n                    noResultsMessage={t(\"noResultsMessage\")}\r\n                    error={t(validationErrors.MarineReceiptCompCode)}\r\n                  />{\" \"}\r\n                </div>\r\n              ) : null}\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modTruckManualEntryLoadingFPInfo.Remarks}\r\n                  label={t(\"LoadingDetailsEntry_Remarks\")}\r\n                  onChange={(data) => onFieldChange(\"FP\", \"Remarks\", data)}\r\n                  reserveSpace={false}\r\n                  error={t(validationErrorsForFP.Remarks)}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <Tab\r\n              activeIndex={activeIndex}\r\n              onTabChange={(index) => onTabChange(index)}\r\n            >\r\n              <Tab.Pane\r\n                title={\r\n                  modTruckManualEntryLoadingFPInfo.FinishedProductCode === \"\"\r\n                    ? t(\"FinishedProduct\")\r\n                    : t(\"FinishedProduct\") +\r\n                      \"-\" +\r\n                      modTruckManualEntryLoadingFPInfo.FinishedProductCode\r\n                }\r\n              >\r\n                <div className=\"row\">\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.GrossQuantity}\r\n                      label={t(\"GrossQuantity\")}\r\n                      indicator=\"required\"\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"GrossQuantity\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(validationErrorsForFP.GrossQuantity)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.NetQuantity}\r\n                      label={t(\"NetQuantity\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"NetQuantity\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(validationErrorsForFP.NetQuantity)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.Temperature}\r\n                      label={t(\"Temperature\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"Temperature\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(validationErrorsForFP.Temperature)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.TemperatureUOM}\r\n                      options={listOptions.temperatureUOMs}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"MarineDispatchManualEntry_TemperatureUOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"TemperatureUOM\", data)\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(validationErrorsForFP.TemperatureUOM)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.ProductDensity}\r\n                      indicator={\r\n                        currentCompTopUpReq.IsWeightBased === \"0\"\r\n                          ? null\r\n                          : \"required\"\r\n                      }\r\n                      label={t(\"ViewShipment_Density\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"ProductDensity\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(validationErrorsForFP.ProductDensity)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.ProductDensityUOM}\r\n                      indicator={\r\n                        currentCompTopUpReq.IsWeightBased === \"0\"\r\n                          ? null\r\n                          : \"required\"\r\n                      }\r\n                      options={listOptions.densityUOMS}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"ViewShipment_DensityUOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"ProductDensityUOM\", data)\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(validationErrorsForFP.ProductDensityUOM)}\r\n                    />\r\n                  </div>\r\n                  {/* <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                        <Select\r\n                                            fluid\r\n                                            value={modTruckManualEntryLoadingFPInfo.TankCode}\r\n                                            options={Utilities.transferListtoOptions(\r\n                                                listOptions.tankCodes\r\n                                            )}\r\n                                            placeholder=\"Select\"\r\n                                            label={t(\"TankCode\")}\r\n                                            onChange={(data) => onFieldChange(\"FP\", \"TankCode\", data)}\r\n                                            multiple={false}\r\n                                            reserveSpace={false}\r\n                                            search={false}\r\n                                            noResultsMessage={t(\"noResultsMessage\")}\r\n                                            error={t(validationErrorsForFP.TankCode)}\r\n                                        />\r\n                                    </div> */}\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.MeterCode}\r\n                      options={Utilities.transferListtoOptions(\r\n                        listOptions.meterCodes\r\n                      )}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"Meter_Code\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"MeterCode\", data)\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(validationErrorsForFP.MeterCode)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.StartTotalizer}\r\n                      label={t(\"StartTotalizer\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"StartTotalizer\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(validationErrorsForFP.StartTotalizer)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.EndTotalizer}\r\n                      label={t(\"EndTotalizer\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"EndTotalizer\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(validationErrorsForFP.EndTotalizer)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.NetStartTotalizer}\r\n                      label={t(\"MarineDispatchManualEntry_NetStartTotalizer\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"NetStartTotalizer\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(validationErrorsForFP.NetStartTotalizer)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.NetEndTotalizer}\r\n                      label={t(\"MarineDispatchManualEntry_NetEndTotalizer\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"NetEndTotalizer\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(validationErrorsForFP.NetEndTotalizer)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.CalculatedGross}\r\n                      label={t(\"LoadingDetails_CalculatedGross\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"CalculatedGross\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(validationErrorsForFP.CalculatedGross)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modTruckManualEntryLoadingFPInfo.CalculatedNet}\r\n                      label={t(\"LoadingDetails_CalculatedNet\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"CalculatedNet\", data)\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(validationErrorsForFP.CalculatedNet)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={\r\n                        modTruckManualEntryLoadingFPInfo.CalculatedValueUOM\r\n                      }\r\n                      options={listOptions.calcValueUOM}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"LoadingDetails_CalculatedValueUOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"FP\", \"CalculatedValueUOM\", data)\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(validationErrorsForFP.CalculatedValueUOM)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                {selectedAttributeList.length > 0\r\n                  ? selectedAttributeList.map((attire) => (\r\n                      <ErrorBoundary>\r\n                        <Accordion>\r\n                          <Accordion.Content\r\n                            className=\"attributeAccordian\"\r\n                            title={t(\"Attributes_Header\")}\r\n                          >\r\n                            <AttributeDetails\r\n                              selectedAttributeList={\r\n                                attire.attributeMetaDataList\r\n                              }\r\n                              handleCellDataEdit={handleAttributeCellDataEdit}\r\n                              attributeValidationErrors={handleValidationErrorFilter(\r\n                                attributeValidationErrors,\r\n                                attire.TerminalCode\r\n                              )}\r\n                            ></AttributeDetails>\r\n                          </Accordion.Content>\r\n                        </Accordion>\r\n                      </ErrorBoundary>\r\n                    ))\r\n                  : null}\r\n              </Tab.Pane>\r\n              {productList.map((item, index) => {\r\n                let title = item.baseProductCode\r\n                  ? t(item.productType) +\r\n                    \"-\" +\r\n                    item.code +\r\n                    \"(\" +\r\n                    t(\"BPCode\") +\r\n                    \"-\" +\r\n                    item.baseProductCode +\r\n                    \")\"\r\n                  : t(item.productType) + \"-\" + item.code;\r\n                let advIndex = item.baseProductCode\r\n                  ? modTruckManualEntryLoadingAdvInfo.findIndex(\r\n                      (adv) => adv.AdditiveProductCode === item.code\r\n                    )\r\n                  : 0;\r\n                return (\r\n                  <Tab.Pane key={index} title={title}>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                          fluid\r\n                          value={\r\n                            item.baseProductCode\r\n                              ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                  .GrossQuantity\r\n                              : modTruckManualEntryLoadingBPInfo[index]\r\n                                  .GrossQuantity\r\n                          }\r\n                          label={t(\"GrossQuantity\")}\r\n                          indicator=\"required\"\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"GrossQuantity\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"GrossQuantity\", data)\r\n                          }\r\n                          reserveSpace={false}\r\n                          error={t(validationErrorsForBP[index].GrossQuantity)}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                          fluid\r\n                          value={\r\n                            item.baseProductCode\r\n                              ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                  .NetQuantity\r\n                              : modTruckManualEntryLoadingBPInfo[index]\r\n                                  .NetQuantity\r\n                          }\r\n                          label={t(\"NetQuantity\")}\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"NetQuantity\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"NetQuantity\", data)\r\n                          }\r\n                          reserveSpace={false}\r\n                          error={t(validationErrorsForBP[index].NetQuantity)}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                          fluid\r\n                          value={\r\n                            item.baseProductCode\r\n                              ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                  .Temperature\r\n                              : modTruckManualEntryLoadingBPInfo[index]\r\n                                  .Temperature\r\n                          }\r\n                          label={t(\"Temperature\")}\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"Temperature\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"Temperature\", data)\r\n                          }\r\n                          reserveSpace={false}\r\n                          error={t(validationErrorsForBP[index].Temperature)}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Select\r\n                          fluid\r\n                          value={\r\n                            modTruckManualEntryLoadingFPInfo.TemperatureUOM\r\n                          }\r\n                          options={listOptions.temperatureUOMs}\r\n                          placeholder=\"Select\"\r\n                          label={t(\"MarineDispatchManualEntry_TemperatureUOM\")}\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"TemperatureUOM\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"TemperatureUOM\", data)\r\n                          }\r\n                          multiple={false}\r\n                          reserveSpace={false}\r\n                          search={false}\r\n                          noResultsMessage={t(\"noResultsMessage\")}\r\n                          error={t(validationErrorsForBP[index].TemperatureUOM)}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                          fluid\r\n                          value={\r\n                            item.baseProductCode\r\n                              ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                  .ProductDensity\r\n                              : modTruckManualEntryLoadingBPInfo[index]\r\n                                  .ProductDensity\r\n                          }\r\n                          indicator={\r\n                            currentCompTopUpReq.IsWeightBased === \"0\"\r\n                              ? null\r\n                              : \"required\"\r\n                          }\r\n                          label={t(\"ViewShipment_Density\")}\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"ProductDensity\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"ProductDensity\", data)\r\n                          }\r\n                          reserveSpace={false}\r\n                          error={t(validationErrorsForBP[index].ProductDensity)}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Select\r\n                          fluid\r\n                          value={\r\n                            modTruckManualEntryLoadingFPInfo.ProductDensityUOM\r\n                          }\r\n                          indicator={\r\n                            currentCompTopUpReq.IsWeightBased === \"0\"\r\n                              ? null\r\n                              : \"required\"\r\n                          }\r\n                          options={listOptions.densityUOMS}\r\n                          placeholder=\"Select\"\r\n                          label={t(\"ViewShipment_DensityUOM\")}\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"ProductDensityUOM\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"ProductDensityUOM\", data)\r\n                          }\r\n                          multiple={false}\r\n                          reserveSpace={false}\r\n                          search={false}\r\n                          noResultsMessage={t(\"noResultsMessage\")}\r\n                          error={t(\r\n                            validationErrorsForBP[index].ProductDensityUOM\r\n                          )}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Select\r\n                          fluid\r\n                          value={\r\n                            item.baseProductCode\r\n                              ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                  .MeterCode\r\n                              : modTruckManualEntryLoadingBPInfo[index]\r\n                                  .MeterCode\r\n                          }\r\n                          options={Utilities.transferListtoOptions(\r\n                            listOptions.meterCodes\r\n                          )}\r\n                          placeholder=\"Select\"\r\n                          label={t(\"Meter_Code\")}\r\n                          indicator=\"required\"\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"MeterCode\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"MeterCode\", data)\r\n                          }\r\n                          multiple={false}\r\n                          reserveSpace={false}\r\n                          search={false}\r\n                          noResultsMessage={t(\"noResultsMessage\")}\r\n                          error={t(validationErrorsForBP[index].MeterCode)}\r\n                        />\r\n                      </div>\r\n\r\n                      {!isBCUTransload ? (\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                          <Select\r\n                            fluid\r\n                            value={\r\n                              item.baseProductCode\r\n                                ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                    .TankCode\r\n                                : modTruckManualEntryLoadingBPInfo[index]\r\n                                    .TankCode\r\n                            }\r\n                            options={Utilities.transferListtoOptions(\r\n                              listOptions.tankCodes\r\n                            )}\r\n                            placeholder=\"Select\"\r\n                            label={t(\"TankCode\")}\r\n                            onChange={(data) =>\r\n                              item.baseProductCode\r\n                                ? onFieldChange(\r\n                                    \"Additive\",\r\n                                    \"TankCode\",\r\n                                    data,\r\n                                    item.code\r\n                                  )\r\n                                : onFieldChange(\"BP\", \"TankCode\", data)\r\n                            }\r\n                            multiple={false}\r\n                            reserveSpace={false}\r\n                            search={false}\r\n                            noResultsMessage={t(\"noResultsMessage\")}\r\n                            error={t(validationErrorsForBP[index].TankCode)}\r\n                          />\r\n                        </div>\r\n                      ) : null}\r\n\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                          fluid\r\n                          value={\r\n                            item.baseProductCode\r\n                              ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                  .StartTotalizer\r\n                              : modTruckManualEntryLoadingBPInfo[index]\r\n                                  .StartTotalizer\r\n                          }\r\n                          label={t(\"StartTotalizer\")}\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"StartTotalizer\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"StartTotalizer\", data)\r\n                          }\r\n                          reserveSpace={false}\r\n                          error={t(validationErrorsForBP[index].StartTotalizer)}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                          fluid\r\n                          value={\r\n                            item.baseProductCode\r\n                              ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                  .EndTotalizer\r\n                              : modTruckManualEntryLoadingBPInfo[index]\r\n                                  .EndTotalizer\r\n                          }\r\n                          label={t(\"EndTotalizer\")}\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"EndTotalizer\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"EndTotalizer\", data)\r\n                          }\r\n                          reserveSpace={false}\r\n                          error={t(validationErrorsForBP[index].EndTotalizer)}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                          fluid\r\n                          value={\r\n                            item.baseProductCode\r\n                              ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                  .NetStartTotalizer\r\n                              : modTruckManualEntryLoadingBPInfo[index]\r\n                                  .NetStartTotalizer\r\n                          }\r\n                          label={t(\r\n                            \"MarineDispatchManualEntry_NetStartTotalizer\"\r\n                          )}\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"NetStartTotalizer\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"NetStartTotalizer\", data)\r\n                          }\r\n                          reserveSpace={false}\r\n                          error={t(\r\n                            validationErrorsForBP[index].NetStartTotalizer\r\n                          )}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                          fluid\r\n                          value={\r\n                            item.baseProductCode\r\n                              ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                  .NetEndTotalizer\r\n                              : modTruckManualEntryLoadingBPInfo[index]\r\n                                  .NetEndTotalizer\r\n                          }\r\n                          label={t(\"MarineDispatchManualEntry_NetEndTotalizer\")}\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"NetEndTotalizer\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"NetEndTotalizer\", data)\r\n                          }\r\n                          reserveSpace={false}\r\n                          error={t(\r\n                            validationErrorsForBP[index].NetEndTotalizer\r\n                          )}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                          fluid\r\n                          value={\r\n                            item.baseProductCode\r\n                              ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                  .CalculatedGross\r\n                              : modTruckManualEntryLoadingBPInfo[index]\r\n                                  .CalculatedGross\r\n                          }\r\n                          label={t(\"LoadingDetails_CalculatedGross\")}\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"CalculatedGross\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"CalculatedGross\", data)\r\n                          }\r\n                          reserveSpace={false}\r\n                          error={t(\r\n                            validationErrorsForBP[index].CalculatedGross\r\n                          )}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                          fluid\r\n                          value={\r\n                            item.baseProductCode\r\n                              ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                  .CalculatedNet\r\n                              : modTruckManualEntryLoadingBPInfo[index]\r\n                                  .CalculatedNet\r\n                          }\r\n                          label={t(\"LoadingDetails_CalculatedNet\")}\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"CalculatedNet\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"CalculatedNet\", data)\r\n                          }\r\n                          reserveSpace={false}\r\n                          error={t(validationErrorsForBP[index].CalculatedNet)}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Select\r\n                          fluid\r\n                          value={\r\n                            item.baseProductCode\r\n                              ? modTruckManualEntryLoadingAdvInfo[advIndex]\r\n                                  .CalculatedValueUOM\r\n                              : modTruckManualEntryLoadingBPInfo[index]\r\n                                  .CalculatedValueUOM\r\n                          }\r\n                          options={listOptions.calcValueUOM}\r\n                          placeholder=\"Select\"\r\n                          label={t(\"LoadingDetails_CalculatedValueUOM\")}\r\n                          onChange={(data) =>\r\n                            item.baseProductCode\r\n                              ? onFieldChange(\r\n                                  \"Additive\",\r\n                                  \"CalculatedValueUOM\",\r\n                                  data,\r\n                                  item.code\r\n                                )\r\n                              : onFieldChange(\"BP\", \"CalculatedValueUOM\", data)\r\n                          }\r\n                          multiple={false}\r\n                          reserveSpace={false}\r\n                          search={false}\r\n                          noResultsMessage={t(\"noResultsMessage\")}\r\n                          error={t(\r\n                            validationErrorsForBP[index].CalculatedValueUOM\r\n                          )}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    {item.baseProductCode\r\n                      ? Array.isArray(selectedAttributeAdvList[advIndex]) &&\r\n                        selectedAttributeAdvList[advIndex].length > 0\r\n                        ? selectedAttributeAdvList[advIndex].map((attire) => (\r\n                            <ErrorBoundary>\r\n                              <Accordion>\r\n                                <Accordion.Content\r\n                                  className=\"attributeAccordian\"\r\n                                  title={t(\"Attributes_Header\")}\r\n                                >\r\n                                  <AttributeDetails\r\n                                    selectedAttributeList={\r\n                                      attire.attributeMetaDataList\r\n                                    }\r\n                                    handleCellDataEdit={\r\n                                      handleAttributeCellDataEditBPandAdditive\r\n                                    }\r\n                                    attributeValidationErrors={handleValidationErrorFilter(\r\n                                      advAttributeValidationErrors[advIndex],\r\n                                      attire.TerminalCode\r\n                                    )}\r\n                                  ></AttributeDetails>\r\n                                </Accordion.Content>\r\n                              </Accordion>\r\n                            </ErrorBoundary>\r\n                          ))\r\n                        : null\r\n                      : Array.isArray(selectedAttributeBPList[index]) &&\r\n                        selectedAttributeBPList[index].length > 0\r\n                      ? selectedAttributeBPList[index].map((attire) => (\r\n                          <ErrorBoundary>\r\n                            <Accordion>\r\n                              <Accordion.Content\r\n                                className=\"attributeAccordian\"\r\n                                title={t(\"Attributes_Header\")}\r\n                              >\r\n                                <AttributeDetails\r\n                                  selectedAttributeList={\r\n                                    attire.attributeMetaDataList\r\n                                  }\r\n                                  handleCellDataEdit={\r\n                                    handleAttributeCellDataEditBPandAdditive\r\n                                  }\r\n                                  attributeValidationErrors={handleValidationErrorFilter(\r\n                                    bpAttributeValidationErrors[index],\r\n                                    attire.TerminalCode\r\n                                  )}\r\n                                ></AttributeDetails>\r\n                              </Accordion.Content>\r\n                            </Accordion>\r\n                          </ErrorBoundary>\r\n                        ))\r\n                      : null}\r\n                  </Tab.Pane>\r\n                );\r\n              })}\r\n            </Tab>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\n//import TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport { toast } from \"react-toastify\";\r\nimport { TruckShipmentManualEntryDetails } from \"../../UIBase/Details/TruckShipmentManualEntryDetails\";\r\n//import { Accordion, Tab } from \"@scuf/common\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport lodash from \"lodash\";\r\nimport {\r\n    emptyRailMarineTransactionCommonInfo,\r\n    emptyRailMarineFinishedProductInfoInfo,\r\n    emptyTruckManualEntryLoadingDetailsCommonInfo,\r\n    emptyTruckManualEntryLoadingProductInfo\r\n} from \"../../../JS/DefaultEntities\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport {\r\n    truckShipmentManualEntryProdValidationDef,\r\n    truckShipmentManualEntryCommonValidationDef,\r\n} from \"../../../JS/ValidationDef\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport axios from \"axios\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport {\r\n    shipmentLoadingDetailsFPAttributeEntity,\r\n    shipmentLoadingDetailsBPAttributeEntity,\r\n    shipmentLoadingDetailsAdvAttributeEntity\r\n} from \"../../../JS/AttributeEntity\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Modal, Button } from \"@scuf/common\";\r\nimport {functionGroups,fnSBC, fnLoadingDetails} from \"../../../JS/FunctionGroups\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass TruckShipmentManualEntryDetailsComposite extends Component {\r\n\r\n    state = {\r\n        modRailMarineTransactionCommonInfo: lodash.cloneDeep(emptyRailMarineTransactionCommonInfo),\r\n        modRailMarineFinishedProductInfoInfo: lodash.cloneDeep(emptyRailMarineFinishedProductInfoInfo),\r\n        modTruckManualEntryLoadingDetailsCommonInfo: lodash.cloneDeep(emptyTruckManualEntryLoadingDetailsCommonInfo),\r\n        modTruckManualEntryLoadingFPInfo: lodash.cloneDeep(emptyTruckManualEntryLoadingProductInfo),\r\n        modTruckManualEntryLoadingBPInfo: [],\r\n        modTruckManualEntryLoadingAdvInfo: [],\r\n        quantityUOMOptions: [],\r\n        densityUOMS: [],\r\n        temperatureUOMs: [],\r\n        calcValueUOM: [],\r\n        compartmentSeqNoInVehicleList: [],\r\n        Bays: [],\r\n        LoadingArms: [],\r\n        BCUs: [],\r\n        BaysandBCUs: [],\r\n        productList: [],\r\n        activeIndex: 0,\r\n        meterCodes: [],\r\n        tankCodes: [],\r\n        validationErrors: Utilities.getInitialValidationErrors(\r\n            truckShipmentManualEntryCommonValidationDef\r\n        ),\r\n        validationErrorsForFP: Utilities.getInitialValidationErrors(\r\n            truckShipmentManualEntryProdValidationDef\r\n        ),\r\n        attributeMetaDataList: [],\r\n        validationErrorsForBP: [],\r\n        selectedAttributeList: [],\r\n        attributeValidationErrors: [],\r\n        selectedAttributeBPList: {},\r\n        bpAttributeValidationErrors: {},\r\n        selectedAttributeAdvList: {},\r\n        advAttributeValidationErrors: {},\r\n        manualEntrySaveEnable: false,\r\n        isBCUTransload: false,\r\n        transloadSource: \"\",\r\n        currentCompTopUpReq: {},\r\n        updatedCompSeqNo: [],\r\n        railReceipt: [],\r\n        marineReceipt: [],\r\n        wagonCodes: [],\r\n        receiptCodes: [],\r\n        marineReceiptCompCodes: [],\r\n        carrierCode: \"\",\r\n        isComminglingAlert: false,\r\n\r\n        showAuthenticationLayout: false,\r\n        tempLoadingDetails: {},\r\n    };\r\n\r\n    componentDidMount() {\r\n        try {\r\n            this.setDefaultValues();\r\n            Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n            this.getAttributes();\r\n            this.getCompartmentSeqNo();\r\n            this.getmeterCodes();\r\n            this.getTankCodes();\r\n            this.GetUOMList();\r\n            this.GetBaysandBCUs();\r\n            this.setState({manualEntrySaveEnable : Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.modify,\r\n        fnSBC)})\r\n        } catch (error) {\r\n            console.log(\r\n                this.props.ShipmentType + \":Error occured on componentDidMount\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    setDefaultValues() {\r\n        emptyTruckManualEntryLoadingProductInfo.StartTime = new Date();\r\n        emptyTruckManualEntryLoadingProductInfo.EndTime = new Date();\r\n        emptyTruckManualEntryLoadingProductInfo.QuantityUOM = this.props.shipment.ShipmentQuantityUOM; // to display Ship Qty UOM, in place MOT UOM\r\n        this.setState({\r\n            modTruckManualEntryLoadingFPInfo: lodash.cloneDeep(emptyTruckManualEntryLoadingProductInfo),\r\n            modRailMarineTransactionCommonInfo: lodash.cloneDeep(emptyRailMarineTransactionCommonInfo),\r\n            modRailMarineFinishedProductInfoInfo: lodash.cloneDeep(emptyRailMarineFinishedProductInfoInfo),\r\n            modTruckManualEntryLoadingDetailsCommonInfo: lodash.cloneDeep(emptyTruckManualEntryLoadingDetailsCommonInfo),\r\n            modTruckManualEntryLoadingBPInfo: [],\r\n            modTruckManualEntryLoadingAdvInfo: [],\r\n            productList: [],\r\n        });\r\n    }\r\n    getAttributes() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetAttributesMetaData,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    [shipmentLoadingDetailsFPAttributeEntity, shipmentLoadingDetailsBPAttributeEntity, shipmentLoadingDetailsAdvAttributeEntity],\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        this.setState({\r\n                            attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n                            attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(result.EntityResult.LOADINGDETAILSFP),\r\n                        })\r\n                    } else {\r\n                        console.log(\"Failed to get Attributes\");\r\n                    }\r\n                })\r\n        } catch (error) {\r\n            console.log(\"Error while getting Attributes:\", error);\r\n        }\r\n    }\r\n\r\n    GetUOMList() {\r\n        axios(\r\n            RestAPIs.GetUOMList,\r\n            Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n\r\n                if (result.IsSuccess === true) {\r\n                    if (result.EntityResult !== null) {\r\n                        let quantityUOMOptions = [];\r\n                        let densityUOMS = [];\r\n                        let temperatureUOMs = [];\r\n                        let calcValueUOM = [];\r\n\r\n                        if (Array.isArray(result.EntityResult.VOLUME)) {\r\n                            calcValueUOM = Utilities.transferListtoOptions(\r\n                                result.EntityResult.VOLUME\r\n                            );\r\n                            quantityUOMOptions = Utilities.transferListtoOptions(\r\n                                result.EntityResult.VOLUME\r\n                            );\r\n                        }\r\n                        if (Array.isArray(result.EntityResult.MASS)) {\r\n                            let massUOMOptions = Utilities.transferListtoOptions(\r\n                                result.EntityResult.MASS\r\n                            );\r\n                            massUOMOptions.forEach((massUOM) => {\r\n                                quantityUOMOptions.push(massUOM);\r\n                                calcValueUOM.push(massUOM)\r\n                            }\r\n\r\n                            );\r\n                        }\r\n                        if (Array.isArray(result.EntityResult.DENSITY)) {\r\n                            densityUOMS = Utilities.transferListtoOptions(\r\n                                result.EntityResult.DENSITY\r\n                            );\r\n                        }\r\n                        if (Array.isArray(result.EntityResult.TEMPERATURE)) {\r\n                            temperatureUOMs = Utilities.transferListtoOptions(\r\n                                result.EntityResult.TEMPERATURE\r\n                            );\r\n                        }\r\n\r\n                        this.setState({ quantityUOMOptions, densityUOMS, calcValueUOM, temperatureUOMs });\r\n\r\n                    }\r\n                } else {\r\n                    console.log(\"TruckShipmentManualEntryDetailsComposite: Error in GetUOMList:\", result.ErrorList);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"TruckShipmentManualEntryDetailsComposite: Error while getting GetUOMList:\", error);\r\n            });\r\n    }\r\n\r\n    handleReset = () => {\r\n        try {\r\n\r\n            let modTruckManualEntryLoadingFPInfo = lodash.cloneDeep(emptyTruckManualEntryLoadingProductInfo)\r\n            modTruckManualEntryLoadingFPInfo.StartTime = new Date();\r\n            modTruckManualEntryLoadingFPInfo.EndTime = new Date();\r\n            modTruckManualEntryLoadingFPInfo.QuantityUOM = this.props.shipment.ShipmentQuantityUOM;\r\n\r\n            this.setState({\r\n                modRailMarineTransactionCommonInfo: lodash.cloneDeep(emptyRailMarineTransactionCommonInfo),\r\n                modRailMarineFinishedProductInfoInfo: lodash.cloneDeep(emptyRailMarineFinishedProductInfoInfo),\r\n                modTruckManualEntryLoadingDetailsCommonInfo: lodash.cloneDeep(emptyTruckManualEntryLoadingDetailsCommonInfo),\r\n                modTruckManualEntryLoadingFPInfo,\r\n                modTruckManualEntryLoadingBPInfo: [],\r\n                modTruckManualEntryLoadingAdvInfo: [],\r\n                LoadingArms: [],\r\n                BCUs: [],\r\n                productList: [],\r\n                activeIndex: 0,\r\n                validationErrors: Utilities.getInitialValidationErrors(\r\n                    truckShipmentManualEntryCommonValidationDef\r\n                ),\r\n                validationErrorsForFP: Utilities.getInitialValidationErrors(\r\n                    truckShipmentManualEntryProdValidationDef\r\n                ),\r\n                attributeMetaDataList: lodash.cloneDeep(this.state.attributeMetaDataList),\r\n                attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(this.state.attributeMetaDataList.LOADINGDETAILSFP),\r\n                validationErrorsForBP: [],\r\n                selectedAttributeList: [],\r\n                selectedAttributeBPList: {},\r\n                selectedAttributeAdvList: {},\r\n                bpAttributeValidationErrors: {},\r\n                advAttributeValidationErrors: {},\r\n                manualEntrySaveEnable : Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.modify,\r\n        fnSBC),\r\n                isBCUTransload: false,\r\n                transloadSource: \"\",\r\n                currentCompTopUpReq: {},\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"TruckShipmentManualEntryDetailsComposite:Error occured on handleReset\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    getCompartmentSeqNo(isAfterCreate = false) {\r\n        try {\r\n            var keyCode = [\r\n                {\r\n                    key: KeyCodes.shipmentCode,\r\n                    value: this.props.shipment.ShipmentCode,\r\n                }\r\n            ];\r\n            var obj = {\r\n                ShareHolderCode: this.props.selectedShareholder,\r\n                keyDataCode: KeyCodes.shipmentCode,\r\n                KeyCodes: keyCode,\r\n            };\r\n            axios(\r\n                RestAPIs.getCompartmentSeqNo,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n\r\n                    if (result.IsSuccess === true) {\r\n                        if (isAfterCreate)\r\n                            this.setState({ updatedCompSeqNo: result.EntityResult }, () => {\r\n                                this.setDefaultValues();\r\n                            })\r\n                        else\r\n                            this.setState({ compartmentSeqNoInVehicleList: result.EntityResult, updatedCompSeqNo: result.EntityResult }, () => {\r\n                                this.setDefaultValues();\r\n                            })\r\n\r\n                        // if (this.state.modTruckManualEntryLoadingDetailsCommonInfo &&\r\n                        //     this.state.modTruckManualEntryLoadingDetailsCommonInfo.CompartmentSeqNoInVehicle !== \"\"\r\n                        // ) {\r\n                        //     if (this.state.updatedCompSeqNo.includes(this.state.modTruckManualEntryLoadingDetailsCommonInfo.CompartmentSeqNoInVehicle.toString()))\r\n                        //         this.setState({ manualEntrySaveEnable: true });\r\n                        //     else\r\n                        //         this.setState({ manualEntrySaveEnable: false });\r\n                        // }\r\n                    } else {\r\n                        console.log(\"TruckShipmentManualEntryDetailsComposite: Error in getCompartmentSeqNo:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"TruckShipmentManualEntryDetailsComposite: Error while getting getCompartmentSeqNo:\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"TruckShipmentManualEntryDetailsComposite:Error occured in getCompartmentSeqNo\", error);\r\n        }\r\n\r\n    }\r\n\r\n    getTopUpRequestsofShipment(compSeqNo) {\r\n        try {\r\n            var keyCode = [\r\n                {\r\n                    key: KeyCodes.shipmentCode,\r\n                    value: this.props.shipment.ShipmentCode,\r\n                }\r\n            ];\r\n            var obj = {\r\n                ShareHolderCode: this.props.selectedShareholder,\r\n                keyDataCode: KeyCodes.shipmentCode,\r\n                KeyCodes: keyCode,\r\n            };\r\n            axios(\r\n                RestAPIs.GetTopUpRequestsOfShipment,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n\r\n                    if (result.IsSuccess === true) {\r\n\r\n                        if (Array.isArray(result.EntityResult.Table)) {\r\n                            let index = result.EntityResult.Table.findIndex((item) => {\r\n                                return item.COMPARTMENTSeqNoInVehicle.toString() === compSeqNo\r\n                            });\r\n\r\n                            this.setState({ currentCompTopUpReq: result.EntityResult.Table[index] })\r\n\r\n                        } else {\r\n                            console.log(\"TruckShipmentManualEntryDetailsComposite: Error in getTopUpRequestsofShipment:\", result.ErrorList);\r\n                        }\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"TruckShipmentManualEntryDetailsComposite: Error while getting getTopUpRequestsofShipment:\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"TruckShipmentManualEntryDetailsComposite:Error occured in getTopUpRequestsofShipment\", error);\r\n        }\r\n\r\n    }\r\n\r\n    GetBaysandBCUs() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetBaysandBCUs,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (result.EntityResult !== null) {\r\n                            let Bays = []\r\n                            let BaysandBCUs = result.EntityResult;\r\n                            if (Array.isArray(Object.keys(BaysandBCUs))) {\r\n                                Object.keys(BaysandBCUs).forEach(element => {\r\n                                    Bays.push(element)\r\n                                });\r\n                            }\r\n                            this.setState({ Bays, BaysandBCUs });\r\n                        }\r\n                    } else {\r\n                        console.log(\"TruckShipmentManualEntryDetailsComposite: Error in GetBaysandBCUs:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"TruckShipmentManualEntryDetailsComposite: Error while getting GetBaysandBCUs:\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"TruckShipmentManualEntryDetailsComposite: Error in GetBaysandBCUs:\", error);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    getmeterCodes() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetMeters,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (result.EntityResult !== null) {\r\n                            let meterCodes = []\r\n                            meterCodes = result.EntityResult\r\n                            this.setState({ meterCodes });\r\n                        }\r\n                    } else {\r\n                        console.log(\"TruckShipmentManualEntryDetailsComposite: Error in getmeterCodes:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"TruckShipmentManualEntryDetailsComposite: Error while getting getmeterCodes:\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"TruckShipmentManualEntryDetailsComposite: Error in getmeterCodes:\", error);\r\n        }\r\n    }\r\n\r\n    getTankCodes() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetTanks + \"?ShareholderCode=\" + this.props.selectedShareholder,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (result.EntityResult !== null) {\r\n                            let tankCodes = []\r\n                            tankCodes = result.EntityResult\r\n                            this.setState({ tankCodes });\r\n                        }\r\n                    } else {\r\n                        console.log(\"TruckShipmentManualEntryDetailsComposite: Error in getTankCodes:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"TruckShipmentManualEntryDetailsComposite: Error while getting getTankCodes:\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"TruckShipmentManualEntryDetailsComposite: Error in getTankCodes:\", error);\r\n        }\r\n    }\r\n\r\n    GetLoadingArms(BCUCode) {\r\n\r\n        let LoadingArmsForBCU = []\r\n\r\n        try {\r\n            let modTruckManualEntryLoadingFPInfo = lodash.cloneDeep(this.state.modTruckManualEntryLoadingFPInfo)\r\n\r\n            axios(\r\n                RestAPIs.GetLoadingArms + \"?bcuCode=\" + BCUCode,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (result.EntityResult !== null) {\r\n                            LoadingArmsForBCU = result.EntityResult;\r\n\r\n                            if (Array.isArray(LoadingArmsForBCU) && LoadingArmsForBCU.length === 1) {\r\n\r\n                                modTruckManualEntryLoadingFPInfo.LoadingArmCode = LoadingArmsForBCU[0];\r\n\r\n                                this.GetMetersForLA(BCUCode, LoadingArmsForBCU[0]);\r\n                            }\r\n                            this.setState({ LoadingArms: result.EntityResult, modTruckManualEntryLoadingFPInfo });\r\n                        }\r\n                    } else {\r\n                        console.log(\"TruckShipmentManualEntryDetailsComposite: Error in GetLoadingArms:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"TruckShipmentManualEntryDetailsComposite: Error while getting GetLoadingArms:\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"TruckShipmentManualEntryDetailsComposite: Error while getting GetLoadingArms:\", error);\r\n        }\r\n\r\n    }\r\n\r\n    GetMetersForLA(bcuCode, loadingArmCode) {\r\n\r\n\r\n        try {\r\n            var keyCode = [\r\n                {\r\n                    key: KeyCodes.siteViewType,\r\n                    value: Constants.siteViewType.ROAD_BCUVIEW,\r\n                },\r\n                {\r\n                    key: KeyCodes.bcuCode,\r\n                    value: bcuCode,\r\n                },\r\n                {\r\n                    key: KeyCodes.terminalCode,\r\n                    value: this.props.shipment.ActualTerminalCode,\r\n                },\r\n            ];\r\n            var obj = {\r\n                ShareHolderCode: \"\",\r\n                keyDataCode: KeyCodes.siteViewType,\r\n                KeyCodes: keyCode,\r\n            };\r\n            axios(\r\n                RestAPIs.GetBCUViewTree,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    if (\r\n                        Array.isArray(result.EntityResult) &&\r\n                        result.EntityResult.length > 0\r\n                    ) {\r\n\r\n                        let loadingArm = result.EntityResult[0].AssociatedArmsList.find(larm => larm.Code === loadingArmCode);\r\n                        if (loadingArm !== null) {\r\n                            let mainLineMeters = [];\r\n                            let additiveMeters = [];\r\n                            mainLineMeters = loadingArm.AssociatedMeterList.find(meter => meter.MeterLineType === \"MAINLINE\");\r\n                            additiveMeters = loadingArm.AssociatedMeterList.find(meter => meter.MeterLineType === \"ADDITIVE\");\r\n                            let bpMeterCode = '';\r\n                            let additiveMeterCode = '';\r\n                            if (mainLineMeters.MeterList.length === 1) {\r\n                                bpMeterCode = mainLineMeters.MeterList[0].Code;\r\n                            }\r\n                            if (additiveMeters.MeterList.length === 1) {\r\n                                additiveMeterCode = additiveMeters.MeterList[0].Code;\r\n                            }\r\n\r\n\r\n                            if (bpMeterCode !== '') {\r\n                                let modTruckManualEntryLoadingBPInfo = lodash.cloneDeep(this.state.modTruckManualEntryLoadingBPInfo);\r\n                                modTruckManualEntryLoadingBPInfo.forEach(item => { item.MeterCode = bpMeterCode; })\r\n                                this.setState({\r\n                                    modTruckManualEntryLoadingBPInfo\r\n                                });\r\n                            }\r\n\r\n                            if (additiveMeterCode !== '') {\r\n                                let modTruckManualEntryLoadingAdvInfo = lodash.cloneDeep(this.state.modTruckManualEntryLoadingAdvInfo);\r\n                                modTruckManualEntryLoadingAdvInfo.forEach(item => { item.MeterCode = additiveMeterCode; })\r\n                                this.setState({\r\n                                    modTruckManualEntryLoadingAdvInfo\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(\"SiteTreeView:Error occured in GetMetersForLA\", error);\r\n        }\r\n    }\r\n\r\n    getBCUs(BayCode) {\r\n        let BCUs = []\r\n        try {\r\n            let BaysandBCUs = lodash.cloneDeep(this.state.BaysandBCUs)\r\n\r\n            if (Object.keys(BaysandBCUs).length > 0) {\r\n                BCUs = BaysandBCUs[BayCode]\r\n            }\r\n\r\n            this.setState({ BCUs });\r\n        } catch (\r\n        error\r\n        ) {\r\n            console.log(\"TruckShipmentManualEntryDetailsComposite: Error in getBCUs:\", error);\r\n        }\r\n        return BCUs;\r\n    }\r\n\r\n    getFPReceipeDetails(compSequenceNo) {\r\n        try {\r\n            let modTruckManualEntryLoadingFPInfo = lodash.cloneDeep(this.state.modTruckManualEntryLoadingFPInfo)\r\n            let finishedProd = this.props.shipment.ShipmentDestinationCompartmentsInfo.find((comp) => {\r\n                return comp.CompartmentSeqNoInVehicle.toString() === compSequenceNo;\r\n            }).FinishedProductCode;\r\n            modTruckManualEntryLoadingFPInfo.FinishedProductCode = finishedProd\r\n\r\n            let validationErrorsForFP = lodash.cloneDeep(this.state.validationErrorsForFP)\r\n            validationErrorsForFP.FinishedProductCode = \"\"\r\n            this.setState({ modTruckManualEntryLoadingFPInfo, validationErrorsForFP })\r\n\r\n            axios(\r\n                RestAPIs.getFPReceipeDetails + \"?finishedProduct=\" + finishedProd + \"&shCode=\" + this.props.selectedShareholder,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (result.EntityResult !== null) {\r\n                            let productList = []\r\n                            let validationErrorsForBP = []\r\n                            let modTruckManualEntryLoadingBPInfo = []\r\n                            let modTruckManualEntryLoadingAdvInfo = []\r\n                            if (Array.isArray(result.EntityResult.Table)) {\r\n\r\n                                result.EntityResult.Table.forEach(\r\n                                    (item) => {\r\n                                        emptyTruckManualEntryLoadingProductInfo.AdditiveProductCode = null\r\n                                        emptyTruckManualEntryLoadingProductInfo.BaseProductCode = item.code\r\n                                        emptyTruckManualEntryLoadingProductInfo.QuantityUOM = this.props.shipment.ShipmentQuantityUOM\r\n                                        emptyTruckManualEntryLoadingProductInfo.CalculatedValueUOM = this.props.userDetails.EntityResult.PageAttibutes.DefaultUOMS.MassUOM\r\n                                        productList.push({\r\n                                            code: item.code,\r\n                                            productType: item.ProductTYPE,\r\n                                            baseProductCode: null\r\n                                        });\r\n                                        validationErrorsForBP.push(\r\n                                            Utilities.getInitialValidationErrors(\r\n                                                truckShipmentManualEntryProdValidationDef\r\n                                            ))\r\n                                        modTruckManualEntryLoadingBPInfo.push(\r\n                                            lodash.cloneDeep(emptyTruckManualEntryLoadingProductInfo)\r\n                                        )\r\n                                    }\r\n                                );\r\n                            }\r\n\r\n                            //let validationErrorsForAdditive = lodash.cloneDeep(this.state.validationErrorsForAdditive)\r\n                            if (Array.isArray(result.EntityResult.Table2)) {\r\n\r\n                                result.EntityResult.Table2.forEach(\r\n                                    (item) => {\r\n                                        emptyTruckManualEntryLoadingProductInfo.BaseProductCode = item.BaseProductCode\r\n                                        emptyTruckManualEntryLoadingProductInfo.AdditiveProductCode = item.AdditiveCode\r\n                                        productList.push({\r\n                                            code: item.AdditiveCode,\r\n                                            productType: item.producttype,\r\n                                            baseProductCode: item.BaseProductCode\r\n                                        });\r\n                                        validationErrorsForBP.push(\r\n                                            Utilities.getInitialValidationErrors(\r\n                                                truckShipmentManualEntryProdValidationDef\r\n                                            ))\r\n                                        modTruckManualEntryLoadingAdvInfo.push(\r\n                                            lodash.cloneDeep(emptyTruckManualEntryLoadingProductInfo)\r\n                                        )\r\n                                    }\r\n                                );\r\n                            }\r\n                            this.setState({\r\n                                productList, validationErrorsForBP, //validationErrorsForAdditive,\r\n                                modTruckManualEntryLoadingFPInfo, modTruckManualEntryLoadingAdvInfo, modTruckManualEntryLoadingBPInfo\r\n                            }, () => {\r\n                                this.handleAttributes()\r\n                            });\r\n                        }\r\n                    } else {\r\n                        console.log(\"TruckShipmentManualEntryDetailsComposite: Error in getFPReceiptDetails:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"TruckShipmentManualEntryDetailsComposite: Error while getting FPReceiptDetails:\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"TruckShipmentManualEntryDetailsComposite: Error while getting getFPReceiptDetails:\", error);\r\n        }\r\n\r\n    }\r\n\r\n    handleAttributes() {\r\n        let attributeMetaDataList = lodash.cloneDeep(this.state.attributeMetaDataList.LOADINGDETAILSFP);\r\n        let bpAttributeMetaDataList = lodash.cloneDeep(this.state.attributeMetaDataList.LOADINGDETAILSBP);\r\n        let advAttributeMetaDataList = lodash.cloneDeep(this.state.attributeMetaDataList.LOADINGDETAILSADDITIVE);\r\n        let selectedAttributeList = lodash.cloneDeep(this.state.selectedAttributeList)\r\n        let selectedAttributeBPList = lodash.cloneDeep(this.state.selectedAttributeBPList)\r\n        let selectedAttributeAdvList = lodash.cloneDeep(this.state.selectedAttributeAdvList)\r\n\r\n        if (attributeMetaDataList.length > 0) {\r\n            selectedAttributeList = this.formAttributesforEachTab(attributeMetaDataList)\r\n            this.setState({\r\n                selectedAttributeList\r\n            })\r\n            let attributeValidationErrors = lodash.cloneDeep(this.state.attributeValidationErrors)\r\n            attributeValidationErrors.forEach((attributeValidation) => {\r\n                Object.keys(attributeValidation.attributeValidationErrors).forEach((key) => (attributeValidation.attributeValidationErrors[key] = \"\"))\r\n            });\r\n        }\r\n\r\n        let bpAttributeValidationErrors = {}\r\n        let advAttributeValidationErrors = {}\r\n\r\n        if (bpAttributeMetaDataList.length > 0) {\r\n            let bpCode = Object.keys(lodash.cloneDeep(this.state.modTruckManualEntryLoadingBPInfo))\r\n            bpCode.forEach((code) => {\r\n                selectedAttributeBPList[code] = this.formAttributesforEachTab(bpAttributeMetaDataList)\r\n                if (Array.isArray(selectedAttributeBPList[code]))\r\n                    selectedAttributeBPList[code][0].attributeMetaDataList.forEach((item) => {\r\n                        let index = lodash.cloneDeep(code)\r\n                        item.index = index\r\n                    })\r\n                bpAttributeValidationErrors[code] = Utilities.getAttributeInitialValidationErrors(this.state.attributeMetaDataList.LOADINGDETAILSBP)\r\n            });\r\n            this.setState({ selectedAttributeBPList, bpAttributeValidationErrors })\r\n\r\n        }\r\n        if (advAttributeMetaDataList.length > 0) {\r\n            let advCode = Object.keys(lodash.cloneDeep(this.state.modTruckManualEntryLoadingAdvInfo))\r\n            advCode.forEach((code) => {\r\n                selectedAttributeAdvList[code] = this.formAttributesforEachTab(advAttributeMetaDataList)\r\n                advAttributeValidationErrors[code] = Utilities.getAttributeInitialValidationErrors(this.state.attributeMetaDataList.LOADINGDETAILSADDITIVE)\r\n            });\r\n            this.setState({ selectedAttributeAdvList, advAttributeValidationErrors })\r\n        }\r\n    }\r\n\r\n    formAttributesforEachTab(attributeMetaDataList) {\r\n        let selectedTerminals = attributeMetaDataList[0].TerminalCode\r\n\r\n        var selectedAttributeList = [];\r\n\r\n        attributeMetaDataList.forEach(function (attributeMetaData) {\r\n            if (attributeMetaData.TerminalCode === selectedTerminals) {\r\n                selectedAttributeList.push(attributeMetaData);\r\n            }\r\n        })\r\n\r\n        return selectedAttributeList\r\n    }\r\n\r\n    getBCUDetails(deviceCode) {\r\n        try {\r\n            var keyCode = [\r\n                {\r\n                    key: KeyCodes.bcuCode,\r\n                    value: deviceCode,\r\n                }\r\n            ];\r\n            var obj = {\r\n                ShareHolderCode: \"\",\r\n                keyDataCode: KeyCodes.bcuCode,\r\n                KeyCodes: keyCode,\r\n            };\r\n            axios(\r\n                RestAPIs.GetBCUDevice,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                let result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    let bcu = result.EntityResult\r\n\r\n                    let modTruckManualEntryLoadingFPInfo = lodash.cloneDeep(this.state.modTruckManualEntryLoadingFPInfo);\r\n                    let modTruckManualEntryLoadingBPInfo = lodash.cloneDeep(this.state.modTruckManualEntryLoadingBPInfo);\r\n                    modTruckManualEntryLoadingFPInfo.TemperatureUOM = bcu.TemperatureUOM;\r\n                    modTruckManualEntryLoadingFPInfo.ProductDensityUOM = bcu.DensityUOM;\r\n\r\n                    modTruckManualEntryLoadingBPInfo.forEach((BPInfo) => {\r\n                        BPInfo.TemperatureUOM = bcu.TemperatureUOM;\r\n                        BPInfo.ProductDensityUOM = bcu.DensityUOM;\r\n                    })\r\n\r\n                    this.setState({ modTruckManualEntryLoadingFPInfo, modTruckManualEntryLoadingBPInfo })\r\n\r\n                    if (bcu.ReceiptSource === Constants.TransportationType.RAIL) {\r\n                        this.setState({ isBCUTransload: true, transloadSource: Constants.TransportationType.RAIL }, () => {\r\n                            this.GetRailTransloadableReceipts()\r\n                        })\r\n                    }\r\n                    else if (bcu.ReceiptSource === Constants.TransportationType.MARINE) {\r\n                        this.setState({ isBCUTransload: true, transloadSource: Constants.TransportationType.MARINE }, () => {\r\n                            this.getMarineTransloadableReceipts()\r\n                        })\r\n                    }\r\n                    else\r\n                        this.setState({ isBCUTransload: false, transloadSource: \"\" })\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"TruckShipmentManualEntryDetailsComposite:Error while getting getBCUDeviceDetails\"\r\n            );\r\n        }\r\n    }\r\n\r\n    handleChange = (type, propertyName, data, additiveCode = null) => {\r\n        try {\r\n            let validationErrors = lodash.cloneDeep(this.state.validationErrors)\r\n            let validationErrorsForFP = lodash.cloneDeep(this.state.validationErrorsForFP)\r\n            let validationErrorsForBP = lodash.cloneDeep(this.state.validationErrorsForBP)\r\n\r\n            if (type === Constants.ViewAllShipmentFields.Common) {\r\n                let modTruckManualEntryLoadingDetailsCommonInfo = lodash.cloneDeep(this.state.modTruckManualEntryLoadingDetailsCommonInfo)\r\n                modTruckManualEntryLoadingDetailsCommonInfo[propertyName] = data\r\n\r\n                if (propertyName === Constants.ViewAllShipmentFields.CompartmentSeqNoInVehicle) {\r\n                    modTruckManualEntryLoadingDetailsCommonInfo = lodash.cloneDeep(emptyTruckManualEntryLoadingDetailsCommonInfo)\r\n                    modTruckManualEntryLoadingDetailsCommonInfo[propertyName] = data\r\n\r\n                    if (this.state.modTruckManualEntryLoadingDetailsCommonInfo\r\n                        //&& this.state.modTruckManualEntryLoadingDetailsCommonInfo.CompartmentSeqNoInVehicle !== \"\"\r\n                    ) {\r\n                        if (this.state.updatedCompSeqNo.includes(data.toString()))\r\n                            this.setState({ manualEntrySaveEnable : Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.modify,\r\n        fnSBC) });\r\n                        else\r\n                            this.setState({ manualEntrySaveEnable: false });\r\n                    }\r\n\r\n                    emptyTruckManualEntryLoadingProductInfo.QuantityUOM = this.props.shipment.ShipmentQuantityUOM;\r\n                    emptyTruckManualEntryLoadingProductInfo.CalculatedValueUOM = this.props.userDetails.EntityResult.PageAttibutes.DefaultUOMS.MassUOM;\r\n                    // emptyTruckManualEntryLoadingProductInfo.StartTime = new Date();\r\n                    // emptyTruckManualEntryLoadingProductInfo.EndTime = new Date();\r\n                    this.setState({\r\n                        modRailMarineTransactionCommonInfo: lodash.cloneDeep(emptyRailMarineTransactionCommonInfo),\r\n                        modRailMarineFinishedProductInfoInfo: lodash.cloneDeep(emptyRailMarineFinishedProductInfoInfo),\r\n                        modTruckManualEntryLoadingDetailsCommonInfo,\r\n                        modTruckManualEntryLoadingFPInfo: lodash.cloneDeep(emptyTruckManualEntryLoadingProductInfo),\r\n                        modTruckManualEntryLoadingBPInfo: [],\r\n                        modTruckManualEntryLoadingAdvInfo: [],\r\n                        LoadingArms: [],\r\n                        BCUs: [],\r\n                        productList: [],\r\n                        activeIndex: 0,\r\n                        validationErrors: Utilities.getInitialValidationErrors(\r\n                            truckShipmentManualEntryCommonValidationDef\r\n                        ),\r\n                        validationErrorsForFP: Utilities.getInitialValidationErrors(\r\n                            truckShipmentManualEntryProdValidationDef\r\n                        ),\r\n                        attributeMetaDataList: lodash.cloneDeep(this.state.attributeMetaDataList),\r\n                        attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(this.state.attributeMetaDataList.LOADINGDETAILSFP),\r\n                        validationErrorsForBP: [],\r\n                        selectedAttributeList: [],\r\n                        selectedAttributeBPList: {},\r\n                        selectedAttributeAdvList: {},\r\n                        bpAttributeValidationErrors: {},\r\n                        advAttributeValidationErrors: {},\r\n                        isBCUTransload: false,\r\n                        transloadSource: \"\",\r\n                        currentCompTopUpReq: {}\r\n                    }, () => {\r\n                        this.getTopUpRequestsofShipment(data)\r\n                        this.getFPReceipeDetails(data)\r\n                    })\r\n                }\r\n                else {\r\n                    if (propertyName === Constants.ViewAllShipmentFields.BAY) {\r\n\r\n                        let BCUs = this.getBCUs(data);\r\n\r\n                        if (BCUs.length > 0 && BCUs.length === 1) {\r\n                            modTruckManualEntryLoadingDetailsCommonInfo.BCUCode = BCUs[0];\r\n\r\n                            this.GetLoadingArms(BCUs[0]);\r\n\r\n                            this.getBCUDetails(BCUs[0])\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    if (propertyName === Constants.ViewAllShipmentFields.BCU) {\r\n                        this.GetLoadingArms(data)\r\n                        this.getBCUDetails(data)\r\n                    }\r\n\r\n                    if (\r\n                        truckShipmentManualEntryCommonValidationDef[propertyName] !== undefined\r\n                    ) {\r\n                        validationErrors[\r\n                            propertyName\r\n                        ] = Utilities.validateField(\r\n                            truckShipmentManualEntryCommonValidationDef[propertyName],\r\n                            data\r\n                        );\r\n                    }\r\n\r\n                    this.setState({ modTruckManualEntryLoadingDetailsCommonInfo, validationErrors })\r\n                }\r\n            }\r\n            if (type === Constants.ViewAllShipmentFields.FP) {\r\n                let modTruckManualEntryLoadingFPInfo = lodash.cloneDeep(this.state.modTruckManualEntryLoadingFPInfo)\r\n                modTruckManualEntryLoadingFPInfo[propertyName] = data\r\n\r\n\r\n                if (propertyName === Constants.ViewAllShipmentFields.LOADINGARM) {\r\n\r\n                    let modTruckManualEntryLoadingDetailsCommonInfo = lodash.cloneDeep(this.state.modTruckManualEntryLoadingDetailsCommonInfo)\r\n                    this.GetMetersForLA(modTruckManualEntryLoadingDetailsCommonInfo.BCUCode, data);\r\n                }\r\n\r\n                if (\r\n                    truckShipmentManualEntryProdValidationDef[propertyName] !== undefined\r\n                ) {\r\n                    validationErrorsForFP[\r\n                        propertyName\r\n                    ] = Utilities.validateField(\r\n                        truckShipmentManualEntryProdValidationDef[propertyName],\r\n                        data\r\n                    );\r\n                }\r\n\r\n                this.setState({ modTruckManualEntryLoadingFPInfo, validationErrorsForFP })\r\n            }\r\n            if (type === Constants.ViewAllShipmentFields.BP) {\r\n                let index = this.state.activeIndex - 1\r\n                let modTruckManualEntryLoadingBPInfo = lodash.cloneDeep(this.state.modTruckManualEntryLoadingBPInfo)\r\n                modTruckManualEntryLoadingBPInfo[index][propertyName] = data\r\n\r\n                if (\r\n                    truckShipmentManualEntryProdValidationDef[propertyName] !== undefined\r\n                ) {\r\n                    validationErrorsForBP[this.state.activeIndex - 1][\r\n                        propertyName\r\n                    ] = Utilities.validateField(\r\n                        truckShipmentManualEntryProdValidationDef[propertyName],\r\n                        data\r\n                    );\r\n                }\r\n\r\n                this.setState({ modTruckManualEntryLoadingBPInfo, validationErrorsForBP })\r\n            }\r\n            if (type === Constants.ViewAllShipmentFields.Adv) {\r\n                //let index = this.state.activeIndex - 1\r\n                let modTruckManualEntryLoadingAdvInfo = lodash.cloneDeep(this.state.modTruckManualEntryLoadingAdvInfo)\r\n                let advIndex = modTruckManualEntryLoadingAdvInfo.findIndex(\r\n                    (item) =>\r\n                        item.AdditiveProductCode === additiveCode\r\n                );\r\n                modTruckManualEntryLoadingAdvInfo[advIndex][propertyName] = data\r\n\r\n                if (\r\n                    truckShipmentManualEntryProdValidationDef[propertyName] !== undefined\r\n                ) {\r\n                    validationErrorsForBP[this.state.activeIndex - 1][\r\n                        propertyName\r\n                    ] = Utilities.validateField(\r\n                        truckShipmentManualEntryProdValidationDef[propertyName],\r\n                        data\r\n                    );\r\n                }\r\n\r\n                this.setState({ modTruckManualEntryLoadingAdvInfo, validationErrorsForBP })\r\n            }\r\n            if (type === Constants.ViewAllShipmentFields.RailTransload) {\r\n\r\n                let modRailMarineTransactionCommonInfo = lodash.cloneDeep(this.state.modRailMarineTransactionCommonInfo)\r\n                modRailMarineTransactionCommonInfo[propertyName] = data\r\n\r\n                this.setState({ modRailMarineTransactionCommonInfo }, () => {\r\n                    if (propertyName === \"ReceiptCode\")\r\n                        this.getRailReceipt(data)\r\n                })\r\n            }\r\n            if (type === Constants.ViewAllShipmentFields.MarineTransload) {\r\n\r\n                let modRailMarineTransactionCommonInfo = lodash.cloneDeep(this.state.modRailMarineTransactionCommonInfo)\r\n                modRailMarineTransactionCommonInfo[propertyName] = data\r\n\r\n                this.setState({ modRailMarineTransactionCommonInfo }, () => {\r\n                    if (propertyName === \"ReceiptCode\")\r\n                        this.getMarineReceipt(data)\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(\r\n                this.props.ShipmentType + \"TruckShipmentManualEntryDetailsComposite:Error occured on handleChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    getRailReceipt(commonCode) {\r\n        try {\r\n            const keyCode = [\r\n                {\r\n                    key: KeyCodes.railReceiptCode,\r\n                    value: commonCode,\r\n                },\r\n            ];\r\n            const obj = {\r\n                ShareHolderCode: this.props.selectedShareholder,\r\n                keyDataCode: KeyCodes.railReceiptCode,\r\n                KeyCodes: keyCode,\r\n            };\r\n            axios(\r\n                RestAPIs.GetRailReceipt,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    const result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (result.EntityResult !== null && result.EntityResult !== undefined) {\r\n                            let wagonCodes = []\r\n                            if (result.EntityResult.RailMarineReceiptCompartmentDetailPlanList !== undefined &&\r\n                                result.EntityResult.RailMarineReceiptCompartmentDetailPlanList !== null) {\r\n                                result.EntityResult.RailMarineReceiptCompartmentDetailPlanList.forEach((item) => {\r\n                                    if (item.IsTransloading === true)\r\n                                        wagonCodes.push(item.TrailerCode)\r\n                                })\r\n                            }\r\n\r\n                            let modRailMarineTransactionCommonInfo = lodash.cloneDeep(this.state.modRailMarineTransactionCommonInfo);\r\n                            if (wagonCodes.length === 1) {\r\n                                modRailMarineTransactionCommonInfo.TrailerCode = wagonCodes[0];\r\n                            }\r\n\r\n                            this.setState({ wagonCodes: Utilities.transferListtoOptions(wagonCodes), railReceipt: result.EntityResult, modRailMarineTransactionCommonInfo })\r\n                        }\r\n                        else {\r\n                            this.setState({ wagonCodes: [], railReceipt: {} })\r\n                        }\r\n                    } else {\r\n                        this.setState({ wagonCodes: [], railReceipt: {} })\r\n                        console.log(\"Error in getRailReceipt:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\r\n                        \"Error while getting getRailReceipt:\",\r\n                        error\r\n                    );\r\n                });\r\n        } catch (error) {\r\n            console.log(\r\n                \"MapTransactionsDetailsConposite:Error occured on getRailReceipt\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    getMarineReceipt(commonCode) {\r\n        var keyCode = [\r\n            {\r\n                key: KeyCodes.marineReceiptCode,\r\n                value: commonCode,\r\n            },\r\n            {\r\n                key: KeyCodes.transportationType,\r\n                value: Constants.TransportationType.MARINE,\r\n            },\r\n        ];\r\n        var obj = {\r\n            ShareHolderCode: this.props.selectedShareholder,\r\n            keyDataCode: KeyCodes.marineReceiptCode,\r\n            KeyCodes: keyCode,\r\n        };\r\n        axios(\r\n            RestAPIs.GetMarineReceipt,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    if (result.EntityResult !== null && result.EntityResult !== undefined) {\r\n                        let compCodes = []\r\n                        if (result.EntityResult.RailMarineReceiptCompartmentDetailPlanList !== undefined &&\r\n                            result.EntityResult.RailMarineReceiptCompartmentDetailPlanList !== null) {\r\n                            result.EntityResult.RailMarineReceiptCompartmentDetailPlanList.forEach((item) => {\r\n                                if (item.IsTransloading === true)\r\n                                    compCodes.push(item.CompartmentSeqNoInVehicle)\r\n                            })\r\n                        }\r\n                        let modRailMarineTransactionCommonInfo = lodash.cloneDeep(this.state.modRailMarineTransactionCommonInfo);\r\n\r\n                        modRailMarineTransactionCommonInfo.CompartmentSeqNoInVehicle = '';\r\n                        if (compCodes.length === 1) {\r\n                            modRailMarineTransactionCommonInfo.CompartmentSeqNoInVehicle = compCodes[0];\r\n                        }\r\n                        this.setState({ marineReceiptCompCodes: Utilities.transferListtoOptions(compCodes), marineReceipt: result.EntityResult, modRailMarineTransactionCommonInfo })\r\n                    }\r\n                    else {\r\n                        this.setState({ marineReceiptCompCodes: [], marineReceipt: {} })\r\n                    }\r\n                }\r\n                else {\r\n                    this.setState({ marineReceiptCompCodes: [], marineReceipt: {} })\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error while getting marineReceipt:\", error);\r\n            });\r\n    }\r\n\r\n    fillAttributeDetails() {\r\n        try {\r\n            let attributeList = lodash.cloneDeep(this.state.selectedAttributeList);\r\n            let modTruckManualEntryLoadingFPInfo = lodash.cloneDeep(\r\n                this.state.modTruckManualEntryLoadingFPInfo\r\n            );\r\n            let modTruckManualEntryLoadingBPInfo = lodash.cloneDeep(this.state.modTruckManualEntryLoadingBPInfo)\r\n            modTruckManualEntryLoadingFPInfo.Attributes = [];\r\n            attributeList.forEach((comp) => {\r\n                let attribute = {\r\n                    ListOfAttributeData: [],\r\n                };\r\n                attribute.TerminalCode = comp.TerminalCode;\r\n                comp.attributeMetaDataList.forEach((det) => {\r\n                    attribute.ListOfAttributeData.push({\r\n                        AttributeCode: det.Code,\r\n                        AttributeValue: det.DefaultValue,\r\n                    });\r\n                });\r\n                modTruckManualEntryLoadingFPInfo.Attributes.push(attribute);\r\n            });\r\n            modTruckManualEntryLoadingBPInfo.forEach((baseProduct) => {\r\n\r\n            })\r\n\r\n            this.setState({ modTruckManualEntryLoadingFPInfo });\r\n            return modTruckManualEntryLoadingFPInfo;\r\n        } catch (error) {\r\n            console.log(\r\n                \"TrailerDetailsComposite:Error occured on fillAttributeDetails\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    fillBPAttributeDetails(modTruckManualEntryLoadingBPInfo) {\r\n        // let BPCode = Object.keys(railMarineBaseProductInfo);\r\n        // BPCode.forEach((code) => {\r\n        //     try {\r\n        //         let attributeList = lodash.cloneDeep(\r\n        //             this.state.BPselectedAttributeList[code]\r\n        //         );\r\n        //         railMarineBaseProductInfo[code].Attributes = [];\r\n        //         attributeList.forEach((comp) => {\r\n        //             let attribute = {\r\n        //                 ListOfAttributeData: [],\r\n        //             };\r\n        //             attribute.TerminalCode = comp.TerminalCode;\r\n        //             comp.attributeMetaDataList.forEach((det) => {\r\n        //                 attribute.ListOfAttributeData.push({\r\n        //                     AttributeCode: det.Code,\r\n        //                     AttributeValue: det.DefaultValue,\r\n        //                 });\r\n        //             });\r\n        //             railMarineBaseProductInfo[code].Attributes.push(attribute);\r\n        //         });\r\n        //         this.setState({ railMarineBaseProductInfo });\r\n        //         return railMarineBaseProductInfo;\r\n        //     } catch (error) {\r\n        //         console.log(\r\n        //             \"MarineReceiptManualEntryDetails:Error occured on fillFPAttributeDetails\",\r\n        //             error\r\n        //         );\r\n        //     }\r\n        // });\r\n    }\r\n\r\n    GetRailTransloadableReceipts() {\r\n        axios(\r\n            RestAPIs.GetRailTransloadableReceipts,\r\n            Utilities.getAuthenticationObjectforGet(\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState({ receiptCodes: Utilities.transferListtoOptions(result.EntityResult) });\r\n                } else {\r\n                    this.setState({ receiptCodes: [] });\r\n                    console.log(\r\n                        \"Error in GetRailTransloadableReceipts:\",\r\n                        result.ErrorList\r\n                    );\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.setState({ receiptCodes: [] });\r\n                console.log(\"Error while GetRailTransloadableReceipts:\", error);\r\n            });\r\n    }\r\n\r\n    getMarineTransloadableReceipts() {\r\n        axios(\r\n            RestAPIs.GetMarineTransloadableReceipts,\r\n            Utilities.getAuthenticationObjectforGet(\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState(\r\n                        { receiptCodes: Utilities.transferListtoOptions(result.EntityResult) }\r\n                    );\r\n                } else {\r\n                    this.setState({ receiptCodes: [] })\r\n                    console.log(\r\n                        \"Error in GetMarineTransloadableReceipts:\",\r\n                        result.ErrorList\r\n                    );\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error while geting GetMarineTransloadableReceipts:\", error);\r\n            });\r\n    }\r\n\r\n    addLoadingDetails = () => {\r\n        try {\r\n          this.setState({ manualEntrySaveEnable: false });\r\n          let tempLoadingDetails = lodash.cloneDeep(this.state.tempLoadingDetails);\r\n          this.CreateManualEntry(tempLoadingDetails);\r\n        } catch (error) {\r\n          console.log(\"Truck Loading DetailsComposite : Error in saveVessel\");\r\n        }\r\n      };\r\n\r\n    handleSave = () => {\r\n        try {\r\n          //  this.setState({ manualEntrySaveEnable: false });\r\n            let modTruckManualEntryLoadingFPInfo = this.fillAttributeDetails();\r\n            //this.fillBPAttributeDetails(this.state.railMarineBaseProductInfo);\r\n            let LoadingDetailsInfoDetails = this.fillManualEntryDetails(modTruckManualEntryLoadingFPInfo)\r\n            if (this.validateSave()) {\r\n                \r\n                \r\n                let showAuthenticationLayout =\r\n                this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n                  ? true\r\n                  : false;\r\n              let tempLoadingDetails = lodash.cloneDeep(LoadingDetailsInfoDetails);\r\n              this.setState({ showAuthenticationLayout, tempLoadingDetails }, () => {\r\n                if (showAuthenticationLayout === false) {\r\n                  this.addLoadingDetails();\r\n                }\r\n            });\r\n\r\n\r\n            } else {\r\n                this.setState({ manualEntrySaveEnable : Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.modify,\r\n        fnSBC), showAuthenticationLayout:false,  });\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"MarineShipmentDetailsComposite:Error occured on handleSave\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    validateSave() {\r\n        try {\r\n            const {\r\n                modTruckManualEntryLoadingDetailsCommonInfo,\r\n                modTruckManualEntryLoadingFPInfo,\r\n                modTruckManualEntryLoadingBPInfo,\r\n                modTruckManualEntryLoadingAdvInfo,\r\n                currentCompTopUpReq,\r\n                modRailMarineTransactionCommonInfo\r\n            } = this.state;\r\n\r\n            const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n            const validationErrorsForFP = lodash.cloneDeep(this.state.validationErrorsForFP);\r\n            const validationErrorsForBP = lodash.cloneDeep(\r\n                this.state.validationErrorsForBP\r\n            );\r\n\r\n            let BPCode = Object.keys(modTruckManualEntryLoadingBPInfo);\r\n            let AdvCode = Object.keys(modTruckManualEntryLoadingAdvInfo);\r\n\r\n            let isWeightBased = currentCompTopUpReq !== undefined && currentCompTopUpReq.IsWeightBased !== \"0\" ? true : false;\r\n\r\n\r\n\r\n            Object.keys(truckShipmentManualEntryProdValidationDef).forEach(function (key) {\r\n                validationErrorsForFP[key] = Utilities.validateField(\r\n                    truckShipmentManualEntryProdValidationDef[key],\r\n                    modTruckManualEntryLoadingFPInfo[key]\r\n                );\r\n            });\r\n\r\n            if (isWeightBased) {\r\n                if (modTruckManualEntryLoadingFPInfo && modTruckManualEntryLoadingFPInfo.ProductDensity === \"\") {\r\n                    validationErrorsForFP[\"ProductDensity\"] = \"LoadingDetailsEntry_MandatoryDensity\";\r\n                }\r\n                if (modTruckManualEntryLoadingFPInfo && modTruckManualEntryLoadingFPInfo.ProductDensityUOM === \"\") {\r\n                    validationErrorsForFP[\"ProductDensityUOM\"] = \"LoadingDetailsEntry_MandatoryDensityUOM\";\r\n                }\r\n            }\r\n\r\n            Object.keys(truckShipmentManualEntryCommonValidationDef).forEach(function (key) {\r\n                validationErrors[key] = Utilities.validateField(\r\n                    truckShipmentManualEntryCommonValidationDef[key],\r\n                    modTruckManualEntryLoadingDetailsCommonInfo[key]\r\n                );\r\n            });\r\n\r\n            let bcuTransload = this.state.isBCUTransload;\r\n            let transloadSource = this.state.transloadSource;\r\n\r\n            Object.keys(truckShipmentManualEntryCommonValidationDef).forEach(function (key) {\r\n                if (key === \"ReceiptCode\" || key === \"MarineReceiptCompCode\" || key === \"TrailerCode\") {\r\n                    validationErrors[key] = \"\";\r\n\r\n                    if (bcuTransload) {\r\n                        if (transloadSource === \"RAIL\") {\r\n                            if (key === \"ReceiptCode\" && modRailMarineTransactionCommonInfo[key] === \"\")\r\n                                validationErrors[key] = \"Rail_Receipt_SelectReceipt\"\r\n                            if (key === \"TrailerCode\" && modRailMarineTransactionCommonInfo[key] === \"\")\r\n                                validationErrors[key] = \"RailDispatchWagonAssignment_RailWagonEmpty\"\r\n                        }\r\n                        if (transloadSource === \"MARINE\") {\r\n                            if (key === \"ReceiptCode\" && modRailMarineTransactionCommonInfo[key] === \"\")\r\n                                validationErrors[key] = \"MARINE_RECEIPT_EMPTY_X\"\r\n                            if (key === \"MarineReceiptCompCode\" && modRailMarineTransactionCommonInfo.CompartmentSeqNoInVehicle === \"\")\r\n                                validationErrors[key] = \"MarineReceiptManualEntry_MandatoryCompartmentSeqno\"\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.state.productList.map((item, index) => {\r\n                Object.keys(truckShipmentManualEntryProdValidationDef).forEach(function (\r\n                    key\r\n                ) {\r\n\r\n                    if (item.baseProductCode) {\r\n\r\n                        let advIndex = modTruckManualEntryLoadingAdvInfo.findIndex(\r\n                            (adv) =>\r\n                                adv.AdditiveProductCode === item.code\r\n                        )\r\n\r\n                        validationErrorsForBP[index][key] = Utilities.validateField(\r\n                            truckShipmentManualEntryProdValidationDef[key],\r\n                            modTruckManualEntryLoadingAdvInfo[advIndex][key]\r\n                        );\r\n\r\n                        if (isWeightBased) {\r\n                            if (modTruckManualEntryLoadingAdvInfo && modTruckManualEntryLoadingAdvInfo[advIndex].ProductDensity === \"\") {\r\n                                validationErrorsForBP[index][\"ProductDensity\"] = \"LoadingDetailsEntry_MandatoryDensity\";\r\n                            }\r\n                            if (modTruckManualEntryLoadingAdvInfo && modTruckManualEntryLoadingAdvInfo[advIndex].ProductDensityUOM === \"\") {\r\n                                validationErrorsForBP[index][\"ProductDensityUOM\"] = \"LoadingDetailsEntry_MandatoryDensityUOM\";\r\n                            }\r\n                        }\r\n\r\n                        if (modTruckManualEntryLoadingAdvInfo && modTruckManualEntryLoadingAdvInfo[advIndex].MeterCode === \"\") {\r\n                            validationErrorsForBP[index][\"MeterCode\"] = \"MeterCode_MandFiled\";\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n\r\n                        validationErrorsForBP[index][key] = Utilities.validateField(\r\n                            truckShipmentManualEntryProdValidationDef[key],\r\n                            modTruckManualEntryLoadingBPInfo[index][key]\r\n                        );\r\n\r\n\r\n                        if (isWeightBased) {\r\n                            if (modTruckManualEntryLoadingBPInfo && modTruckManualEntryLoadingBPInfo[index].ProductDensity === \"\") {\r\n                                validationErrorsForBP[index][\"ProductDensity\"] = \"LoadingDetailsEntry_MandatoryDensity\";\r\n                            }\r\n                            if (modTruckManualEntryLoadingBPInfo && modTruckManualEntryLoadingBPInfo[index].ProductDensityUOM === \"\") {\r\n                                validationErrorsForBP[index][\"ProductDensityUOM\"] = \"LoadingDetailsEntry_MandatoryDensityUOM\";\r\n                            }\r\n                        }\r\n\r\n                        if (modTruckManualEntryLoadingBPInfo && modTruckManualEntryLoadingBPInfo[index].MeterCode === \"\") {\r\n                            validationErrorsForBP[index][\"MeterCode\"] = \"MeterCode_MandFiled\";\r\n                        }\r\n                    }\r\n\r\n                });\r\n            });\r\n\r\n\r\n            if (\r\n                modTruckManualEntryLoadingFPInfo.StartTime >=\r\n                modTruckManualEntryLoadingFPInfo.EndTime\r\n            ) {\r\n                validationErrorsForFP[\"StartTime\"] =\r\n                    \"MarineDispatchManualEntry_ErrorLoadTime\";\r\n            }\r\n\r\n            this.setState({ validationErrors, validationErrorsForFP, validationErrorsForBP });\r\n\r\n            var returnValueBase = Object.values(validationErrors).every(function (\r\n                value\r\n            ) {\r\n                return value === \"\";\r\n            });\r\n\r\n            var returnValueFP = Object.values(validationErrorsForFP).every(function (\r\n                value\r\n            ) {\r\n                return value === \"\";\r\n            });\r\n            var returnValueAddition = true;\r\n            var times = 0;\r\n            this.state.productList.map((item, index) => {\r\n                returnValueAddition =\r\n                    returnValueAddition &&\r\n                    Object.values(validationErrorsForBP[index]).every(function (value) {\r\n                        return value === \"\";\r\n                    });\r\n                if (!returnValueAddition && times === 0) {\r\n                    times++;\r\n                    this.setState({\r\n                        activeIndex: index + 1,\r\n                    });\r\n                }\r\n            });\r\n            if (!returnValueFP) {\r\n                this.setState({\r\n                    activeIndex: 0,\r\n                });\r\n            }\r\n            var attributeValidationErrors = lodash.cloneDeep(\r\n                this.state.attributeValidationErrors\r\n            );\r\n            let selectedAttributeList = lodash.cloneDeep(\r\n                this.state.selectedAttributeList\r\n            );\r\n\r\n            selectedAttributeList.forEach((attribute) => {\r\n                attributeValidationErrors.forEach((attributeValidation) => {\r\n                    if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n                        attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n                            attributeValidation.attributeValidationErrors[\r\n                                attributeMetaData.Code\r\n                            ] = Utilities.valiateAttributeField(\r\n                                attributeMetaData,\r\n                                attributeMetaData.DefaultValue\r\n                            );\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n            this.setState({ attributeValidationErrors });\r\n\r\n            let returnAttributeFPValue = true;\r\n            attributeValidationErrors.forEach((x) => {\r\n                returnAttributeFPValue = Object.values(x.attributeValidationErrors).every(\r\n                    function (value) {\r\n                        return value === \"\";\r\n                    }\r\n                );\r\n            });\r\n\r\n\r\n            if (!returnAttributeFPValue) {\r\n                this.setState({ activeIndex: 0 });\r\n            }\r\n\r\n            let bpAttributeValidationErrors = lodash.cloneDeep(\r\n                this.state.bpAttributeValidationErrors\r\n            );\r\n            let selectedAttributeBPList = lodash.cloneDeep(\r\n                this.state.selectedAttributeBPList\r\n            );\r\n\r\n            BPCode.forEach((code) => {\r\n\r\n                if (Array.isArray(selectedAttributeBPList) && selectedAttributeBPList.length > 0) {\r\n                    selectedAttributeBPList[code].forEach((attribute) => {\r\n                        bpAttributeValidationErrors[code].forEach((attributeValidation) => {\r\n\r\n                            if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n                                attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n\r\n                                    attributeValidation.attributeValidationErrors[\r\n                                        attributeMetaData.Code\r\n                                    ] = Utilities.valiateAttributeField(\r\n                                        attributeMetaData,\r\n                                        attributeMetaData.DefaultValue\r\n                                    );\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n            this.setState({ bpAttributeValidationErrors });\r\n\r\n            let attributeBPValueList = BPCode.map((code) => {\r\n                let attributeBPValue = true;\r\n                if (Array.isArray(bpAttributeValidationErrors) && bpAttributeValidationErrors.length > 0)\r\n                    bpAttributeValidationErrors[code].forEach((x) => {\r\n                        attributeBPValue = Object.values(x.attributeValidationErrors).every(\r\n                            function (value) {\r\n                                return value === \"\";\r\n                            }\r\n                        );\r\n                    });\r\n                return attributeBPValue;\r\n            });\r\n\r\n            let attributeErrorIndex = attributeBPValueList.findIndex((item) => {\r\n                return item !== true;\r\n            });\r\n\r\n            if (attributeErrorIndex !== -1) {\r\n                this.setState({ activeIndex: attributeErrorIndex + 1 });\r\n            }\r\n            let returnAttributeBPValue = attributeBPValueList.every(function (value) {\r\n                return value === true;\r\n            });\r\n\r\n            let advAttributeValidationErrors = lodash.cloneDeep(\r\n                this.state.advAttributeValidationErrors\r\n            );\r\n            let selectedAttributeAdvList = lodash.cloneDeep(\r\n                this.state.selectedAttributeAdvList\r\n            );\r\n\r\n            AdvCode.forEach((code) => {\r\n                if (Array.isArray(selectedAttributeAdvList) && selectedAttributeAdvList.length > 0)\r\n                    selectedAttributeAdvList[code].forEach((attribute) => {\r\n                        advAttributeValidationErrors[code].forEach((attributeValidation) => {\r\n                            if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n                                attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n                                    attributeValidation.attributeValidationErrors[\r\n                                        attributeMetaData.Code\r\n                                    ] = Utilities.valiateAttributeField(\r\n                                        attributeMetaData,\r\n                                        attributeMetaData.DefaultValue\r\n                                    );\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n            });\r\n\r\n            this.setState({ advAttributeValidationErrors });\r\n\r\n            let attributeAdvValueList = AdvCode.map((code) => {\r\n                let attributeBPValue = true;\r\n                if (Array.isArray(advAttributeValidationErrors) && advAttributeValidationErrors.length > 0)\r\n                    advAttributeValidationErrors[code].forEach((x) => {\r\n                        attributeBPValue = Object.values(x.attributeValidationErrors).every(\r\n                            function (value) {\r\n                                return value === \"\";\r\n                            }\r\n                        );\r\n                    });\r\n                return attributeBPValue;\r\n            });\r\n\r\n            attributeErrorIndex = attributeAdvValueList.findIndex((item) => {\r\n                return item !== true;\r\n            });\r\n\r\n            if (attributeErrorIndex !== -1) {\r\n                this.setState({ activeIndex: attributeErrorIndex + 1 });\r\n            }\r\n\r\n\r\n            let returnAttributeAdvValue = attributeAdvValueList.every(function (value) {\r\n                return value === true;\r\n            });\r\n            return (\r\n                returnValueBase &&\r\n                returnValueFP &&\r\n                returnValueAddition &&\r\n                returnAttributeFPValue &&\r\n                returnAttributeBPValue &&\r\n                returnAttributeAdvValue\r\n            );\r\n        }\r\n        catch (error) {\r\n            var notification = {\r\n                messageType: \"critical\",\r\n                message: \"TruckShipment_ManualEntryCreateStatus\",\r\n                messageResultDetails: [\r\n                    {\r\n                        keyFields: [\"MarineDispatchManualEntry_CompSeqNo\"],\r\n                        keyValues: [this.state.modTruckManualEntryLoadingDetailsCommonInfo.CompartmentSeqNoInVehicle],\r\n                        isSuccess: false,\r\n                        errorMessage: \"ERRMSG_MANUALENTRY_CREATE\",\r\n                    },\r\n                ],\r\n            };\r\n\r\n            toast(\r\n                <ErrorBoundary>\r\n                    <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                </ErrorBoundary>,\r\n                {\r\n                    autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n                }\r\n            );\r\n            console.log(\"Error in Manual Entry\", error)\r\n            return false;\r\n        }\r\n    }\r\n\r\n    fillManualEntryDetails(modTruckManualEntryLoadingFPInfo) {\r\n\r\n        let LoadingDetailsInfoDetails = {\r\n            LoadingDetailsInfos: [],\r\n            RailMarineUnloadingDataList: [],\r\n            IsShipmentBonded: this.props.shipment.IsBonded,\r\n            IsBCUTransload: this.state.isBCUTransload,\r\n            TransloadSource: this.state.transloadSource\r\n        }\r\n        try {\r\n\r\n            let LoadingDetailsInfo = {\r\n                CommonInfo: {},\r\n                LoadingDetailFPinfo: {},\r\n                ArrLoadingDetailAdditive: [],\r\n                ArrLoadingDetailBP: [],\r\n                IsLocalLoaded: false,\r\n                TerminalCodes: []\r\n            }\r\n            let { modTruckManualEntryLoadingDetailsCommonInfo,\r\n                modTruckManualEntryLoadingBPInfo, modTruckManualEntryLoadingAdvInfo } = this.state;\r\n\r\n            //Filling Common Info :            \r\n            // if (modTruckManualEntryLoadingFPInfo.GrossQuantity > 0)\r\n            //     modTruckManualEntryLoadingDetailsCommonInfo.LoadingDetailsType = Constants.LoadingDetailsType.TOPUP.toString()\r\n            // else\r\n            //     modTruckManualEntryLoadingDetailsCommonInfo.LoadingDetailsType = Constants.LoadingDetailsType.DECANT.toString()\r\n\r\n            modTruckManualEntryLoadingDetailsCommonInfo.LoadingDetailsType = \"MANUAL\"//Constants.LoadingDetailsType.MANUAL\r\n            modTruckManualEntryLoadingDetailsCommonInfo.ShipmentCode = this.props.shipment.ShipmentCode\r\n            modTruckManualEntryLoadingDetailsCommonInfo.ShareHolderCode = this.props.selectedShareholder\r\n\r\n            //Copy Common INfo from FP to BP :\r\n            modTruckManualEntryLoadingBPInfo.forEach((BPInfo) => {\r\n                BPInfo.StartTime = modTruckManualEntryLoadingFPInfo.StartTime;\r\n                BPInfo.EndTime = modTruckManualEntryLoadingFPInfo.EndTime;\r\n                BPInfo.LoadingArmCode = modTruckManualEntryLoadingFPInfo.LoadingArmCode;\r\n                BPInfo.QuantityUOM = modTruckManualEntryLoadingFPInfo.QuantityUOM;\r\n                if (modTruckManualEntryLoadingFPInfo.TransactionID !== \"\")\r\n                    BPInfo.TransactionID = Utilities.convertStringtoDecimal(modTruckManualEntryLoadingFPInfo.TransactionID);\r\n                BPInfo.FinishedProductCode = modTruckManualEntryLoadingFPInfo.FinishedProductCode;\r\n            })\r\n\r\n            //Copy Common INfo from FP to Additive :\r\n            modTruckManualEntryLoadingAdvInfo.forEach((AdvInfo) => {\r\n                AdvInfo.StartTime = modTruckManualEntryLoadingFPInfo.StartTime;\r\n                AdvInfo.EndTime = modTruckManualEntryLoadingFPInfo.EndTime;\r\n                AdvInfo.LoadingArmCode = modTruckManualEntryLoadingFPInfo.LoadingArmCode;\r\n                AdvInfo.QuantityUOM = modTruckManualEntryLoadingFPInfo.QuantityUOM;\r\n                if (modTruckManualEntryLoadingFPInfo.TransactionID !== \"\")\r\n                    AdvInfo.TransactionID = Utilities.convertStringtoDecimal(modTruckManualEntryLoadingFPInfo.TransactionID);\r\n                // AdvInfo.TransactionID = modTruckManualEntryLoadingFPInfo.TransactionID;\r\n                AdvInfo.FinishedProductCode = modTruckManualEntryLoadingFPInfo.FinishedProductCode;\r\n            })\r\n\r\n            LoadingDetailsInfo.CommonInfo = lodash.cloneDeep(modTruckManualEntryLoadingDetailsCommonInfo);\r\n            LoadingDetailsInfo.LoadingDetailFPinfo = lodash.cloneDeep(modTruckManualEntryLoadingFPInfo);\r\n            LoadingDetailsInfo.ArrLoadingDetailAdditive = lodash.cloneDeep(modTruckManualEntryLoadingAdvInfo);\r\n            LoadingDetailsInfo.ArrLoadingDetailBP = lodash.cloneDeep(modTruckManualEntryLoadingBPInfo);\r\n\r\n            Object.keys(LoadingDetailsInfo.LoadingDetailFPinfo).forEach((key) => {\r\n                if (\r\n                    !(\r\n                        key.includes(\"UOM\") ||\r\n                        key === \"LoadingArmCode\" ||\r\n                        key === \"StartTime\" ||\r\n                        key === \"EndTime\" ||\r\n                        key === \"FinishedProductCode\" ||\r\n                        key === \"MeterCode\" ||\r\n                        key === \"TankCode\" ||\r\n                        key === \"Attributes\" ||\r\n                        key === \"BaseProductCode\" ||\r\n                        key === \"AdditiveProductCode\"\r\n                    )\r\n                ) {\r\n                    LoadingDetailsInfo.LoadingDetailFPinfo[key] = Utilities.convertStringtoDecimal(\r\n                        LoadingDetailsInfo.LoadingDetailFPinfo[key]\r\n                    );\r\n                }\r\n            });\r\n\r\n            LoadingDetailsInfo.CommonInfo[\"CompartmentSeqNoInVehicle\"] = Utilities.convertStringtoDecimal(\r\n                LoadingDetailsInfo.CommonInfo[\"CompartmentSeqNoInVehicle\"])\r\n\r\n            LoadingDetailsInfo.ArrLoadingDetailBP.forEach((baseproduct) => {\r\n                Object.keys(baseproduct).forEach((key) => {\r\n                    if (\r\n                        !(\r\n                            key.includes(\"UOM\") ||\r\n                            key === \"LoadingArmCode\" ||\r\n                            key === \"StartTime\" ||\r\n                            key === \"EndTime\" ||\r\n                            key === \"FinishedProductCode\" ||\r\n                            key === \"MeterCode\" ||\r\n                            key === \"TankCode\" ||\r\n                            key === \"Attributes\" ||\r\n                            key === \"BaseProductCode\" ||\r\n                            key === \"AdditiveProductCode\"\r\n                        )\r\n                    ) {\r\n                        baseproduct[\r\n                            key\r\n                        ] = Utilities.convertStringtoDecimal(\r\n                            baseproduct[key]\r\n                        );\r\n                    }\r\n                });\r\n            });\r\n\r\n            LoadingDetailsInfo.ArrLoadingDetailAdditive.forEach((advproduct) => {\r\n                Object.keys(advproduct).forEach((key) => {\r\n                    if (\r\n                        !(\r\n                            key.includes(\"UOM\") ||\r\n                            key === \"LoadingArmCode\" ||\r\n                            key === \"StartTime\" ||\r\n                            key === \"EndTime\" ||\r\n                            key === \"FinishedProductCode\" ||\r\n                            key === \"MeterCode\" ||\r\n                            key === \"TankCode\" ||\r\n                            key === \"Attributes\" ||\r\n                            key === \"BaseProductCode\" ||\r\n                            key === \"AdditiveProductCode\"\r\n                        )\r\n                    ) {\r\n                        advproduct[\r\n                            key\r\n                        ] = Utilities.convertStringtoDecimal(\r\n                            advproduct[key]\r\n                        );\r\n                    }\r\n                });\r\n            });\r\n            LoadingDetailsInfoDetails.LoadingDetailsInfos.push(LoadingDetailsInfo)\r\n            if (this.state.isBCUTransload)\r\n                LoadingDetailsInfoDetails.RailMarineUnloadingDataList = this.formTransloadInfo(LoadingDetailsInfo);\r\n            else\r\n                LoadingDetailsInfoDetails.RailMarineUnloadingDataList = [];\r\n\r\n        } catch (error) {\r\n            console.log(\"TruckShipmentManualEntryDetailsComposite:Error in creating request for Manual Entry\", error)\r\n        }\r\n\r\n        return LoadingDetailsInfoDetails;\r\n    }\r\n\r\n    formTransloadInfo(loadingInfo) {\r\n        let railMarineLoadingDataList = []\r\n        try {\r\n            let receiptDetail = this.state.transloadSource === \"RAIL\" ? lodash.cloneDeep(this.state.railReceipt) : lodash.cloneDeep(this.state.marineReceipt)\r\n\r\n            let finishedProduct = this.state.transloadSource === \"RAIL\" ?\r\n                receiptDetail.RailMarineReceiptCompartmentPlanList.filter(m => { return m.TrailerCode === this.state.modRailMarineTransactionCommonInfo.TrailerCode })[0].FinishedProductCode :\r\n                receiptDetail.RailMarineReceiptCompartmentPlanList.filter(m => { return m.CompartmentSeqNoInVehicle === this.state.modRailMarineTransactionCommonInfo.CompartmentSeqNoInVehicle })[0].FinishedProductCode;\r\n\r\n            let carrierCompanyCode = this.state.transloadSource === \"RAIL\" ?\r\n                receiptDetail.RailMarineReceiptCompartmentPlanList.filter(m => { return m.TrailerCode === this.state.modRailMarineTransactionCommonInfo.TrailerCode })[0].CarrierCompanyCode :\r\n                receiptDetail.RailMarineReceiptCompartmentPlanList.filter(m => { return m.CompartmentSeqNoInVehicle === this.state.modRailMarineTransactionCommonInfo.CompartmentSeqNoInVehicle })[0].CarrierCompanyCode;\r\n\r\n            this.setState({ carrierCode: carrierCompanyCode })\r\n            let RailMarineTransactionInfo = {\r\n                CommonInfo: {},\r\n                TransactionFPinfo: {},\r\n                ArrTransactionBP: [],\r\n                ArrTransactionAdditive: [],\r\n                IsLocalLoaded: false\r\n            }\r\n\r\n            // List < RailMarineTransactionInfo > loadingDataList = new List < RailMarineTransactionInfo > ();\r\n            // RailMarineTransactionInfo transactionInfo = new RailMarineTransactionInfo();\r\n            // RailMarineTransactionInfo.TransactionFPinfo = new RailMarineTransactionProductInfo();\r\n            RailMarineTransactionInfo.TransactionFPinfo.GrossQuantity = Utilities.convertStringtoDecimal(loadingInfo.LoadingDetailFPinfo.GrossQuantity);\r\n            RailMarineTransactionInfo.TransactionFPinfo.BaseProductCode = loadingInfo.LoadingDetailFPinfo.BaseProductCode;\r\n            RailMarineTransactionInfo.TransactionFPinfo.NetQuantity = Utilities.convertStringtoDecimal(loadingInfo.LoadingDetailFPinfo.NetQuantity);\r\n            RailMarineTransactionInfo.TransactionFPinfo.ProductDensity = Utilities.convertStringtoDecimal(loadingInfo.LoadingDetailFPinfo.ProductDensity);\r\n            RailMarineTransactionInfo.TransactionFPinfo.StartTotalizer = Utilities.convertStringtoDecimal(loadingInfo.LoadingDetailFPinfo.StartTotalizer);\r\n            RailMarineTransactionInfo.TransactionFPinfo.EndTotalizer = Utilities.convertStringtoDecimal(loadingInfo.LoadingDetailFPinfo.EndTotalizer);\r\n            RailMarineTransactionInfo.TransactionFPinfo.NetStartTotalizer = Utilities.convertStringtoDecimal(loadingInfo.LoadingDetailFPinfo.NetStartTotalizer);\r\n            RailMarineTransactionInfo.TransactionFPinfo.NetEndTotalizer = Utilities.convertStringtoDecimal(loadingInfo.LoadingDetailFPinfo.NetEndTotalizer);\r\n            RailMarineTransactionInfo.TransactionFPinfo.Temperature = Utilities.convertStringtoDecimal(loadingInfo.LoadingDetailFPinfo.Temperature);\r\n            RailMarineTransactionInfo.TransactionFPinfo.TemperatureUOM = loadingInfo.LoadingDetailFPinfo.TemperatureUOM;\r\n            RailMarineTransactionInfo.TransactionFPinfo.ProductDensityUOM = loadingInfo.LoadingDetailFPinfo.TemperatureUOM;\r\n            RailMarineTransactionInfo.TransactionFPinfo.MeterCode = loadingInfo.LoadingDetailFPinfo.MeterCode;\r\n            RailMarineTransactionInfo.TransactionFPinfo.CalculatedGross = Utilities.convertStringtoDecimal(loadingInfo.LoadingDetailFPinfo.CalculatedGross);\r\n            RailMarineTransactionInfo.TransactionFPinfo.CalculatedNet = Utilities.convertStringtoDecimal(loadingInfo.LoadingDetailFPinfo.CalculatedNet);\r\n            RailMarineTransactionInfo.TransactionFPinfo.CalculatedValueUOM = loadingInfo.LoadingDetailFPinfo.CalculatedValueUOM;\r\n            RailMarineTransactionInfo.TransactionFPinfo.FinishedProductCode = finishedProduct;\r\n            RailMarineTransactionInfo.TransactionFPinfo.QuantityUOM = loadingInfo.LoadingDetailFPinfo.QuantityUOM;\r\n            RailMarineTransactionInfo.TransactionFPinfo.StartTime = loadingInfo.LoadingDetailFPinfo.StartTime;\r\n            RailMarineTransactionInfo.TransactionFPinfo.EndTime = loadingInfo.LoadingDetailFPinfo.EndTime;\r\n\r\n            //loadingDataList.Add(transactionInfo);\r\n\r\n            // RailMarineTransactionProductInfo ldpdinfo = new RailMarineTransactionProductInfo();\r\n            RailMarineTransactionInfo.ArrTransactionBP.push(\r\n                {\r\n                    GrossQuantity: loadingInfo.ArrLoadingDetailBP[0].GrossQuantity,\r\n                    BaseProductCode: loadingInfo.ArrLoadingDetailBP[0].BaseProductCode,\r\n                    NetQuantity: loadingInfo.ArrLoadingDetailBP[0].NetQuantity,\r\n                    ProductDensity: loadingInfo.ArrLoadingDetailBP[0].ProductDensity,\r\n                    StartTotalizer: loadingInfo.ArrLoadingDetailBP[0].StartTotalizer,\r\n                    EndTotalizer: loadingInfo.ArrLoadingDetailBP[0].EndTotalizer,\r\n                    NetStartTotalizer: loadingInfo.ArrLoadingDetailBP[0].NetStartTotalizer,\r\n                    NetEndTotalizer: loadingInfo.ArrLoadingDetailBP[0].NetEndTotalizer,\r\n                    Temperature: loadingInfo.ArrLoadingDetailBP[0].Temperature,\r\n                    TemperatureUOM: loadingInfo.ArrLoadingDetailBP[0].TemperatureUOM,\r\n                    ProductDensityUOM: loadingInfo.ArrLoadingDetailBP[0].TemperatureUOM,\r\n                    MeterCode: loadingInfo.ArrLoadingDetailBP[0].MeterCode,\r\n                    CalculatedGross: loadingInfo.ArrLoadingDetailBP[0].CalculatedGross,\r\n                    CalculatedNet: loadingInfo.ArrLoadingDetailBP[0].CalculatedNet,\r\n                    CalculatedValueUOM: loadingInfo.ArrLoadingDetailBP[0].CalculatedValueUOM,\r\n                    StartTime: loadingInfo.LoadingDetailFPinfo.StartTime,\r\n                    EndTime: loadingInfo.LoadingDetailFPinfo.EndTime,\r\n                    ArmCode: loadingInfo.LoadingDetailFPinfo.LoadingArmCode,\r\n                    QuantityUOM: loadingInfo.LoadingDetailFPinfo.QuantityUOM,\r\n                    TransactionID: loadingInfo.LoadingDetailFPinfo.TransactionID,\r\n                    FinishedProductCode: finishedProduct,\r\n                    // transactionInfo.ArrTransactionBP = new List < RailMarineTransactionProductInfo > ();\r\n\r\n                    // transactionInfo.ArrTransactionBP.Add(ldpdinfo);\r\n                })\r\n\r\n            RailMarineTransactionInfo.ArrTransactionBP.forEach((BpProd) => {\r\n                Object.keys(BpProd).forEach((key) => {\r\n                    if (\r\n                        !(\r\n                            key.includes(\"UOM\") ||\r\n                            key === \"ArmCode\" ||\r\n                            key === \"StartTime\" ||\r\n                            key === \"EndTime\" ||\r\n                            key === \"FinishedProductCode\" ||\r\n                            key === \"MeterCode\" ||\r\n                            key === \"TankCode\" ||\r\n                            key === \"Attributes\" ||\r\n                            key === \"BaseProductCode\" ||\r\n                            key === \"AdditiveProductCode\"\r\n                        )\r\n                    ) {\r\n                        BpProd[\r\n                            key\r\n                        ] = Utilities.convertStringtoDecimal(\r\n                            BpProd[key]\r\n                        );\r\n                    }\r\n                });\r\n            });\r\n\r\n            // RailMarineTransactionInfo.CommonInfo = new RailMarineTransactionCommonInfo();\r\n            // transactionInfo.IsLocalLoaded = false;\r\n\r\n            RailMarineTransactionInfo.CommonInfo = this.state.modRailMarineTransactionCommonInfo\r\n\r\n            RailMarineTransactionInfo.CommonInfo.LoadingType = \"MANUAL\";\r\n            RailMarineTransactionInfo.CommonInfo.TransactionType = \"RECEIPT\";\r\n            RailMarineTransactionInfo.CommonInfo.TransportationType = this.state.transloadSource === \"RAIL\" ? Constants.TransportationType.RAIL.toString() : Constants.TransportationType.MARINE.toString();\r\n            RailMarineTransactionInfo.CommonInfo.BayCode = loadingInfo.CommonInfo.BayCode\r\n            RailMarineTransactionInfo.CommonInfo.BCUCode = loadingInfo.CommonInfo.BCUCode\r\n            //RailMarineTransactionInfo.CommonInfo.ReceiptCode = txtRailRecipt.Text;\r\n            //RailMarineTransactionInfo.CommonInfo.TrailerCode = ddlWagonCode.SelectedItem.Text;\r\n            // if (txtTransactionNumber.Text.Trim().Length > 0)\r\n            RailMarineTransactionInfo.TransactionFPinfo.TransactionID = loadingInfo.LoadingDetailFPinfo.TransactionID\r\n            RailMarineTransactionInfo.TransactionFPinfo.Remarks = loadingInfo.LoadingDetailFPinfo.Remarks;\r\n            RailMarineTransactionInfo.CommonInfo.CarrierCode = carrierCompanyCode;\r\n            RailMarineTransactionInfo.TransactionFPinfo.ArmCode = loadingInfo.LoadingDetailFPinfo.LoadingArmCode;\r\n\r\n            railMarineLoadingDataList.push(RailMarineTransactionInfo);\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in forming transloadingInfo\", error)\r\n        }\r\n        return railMarineLoadingDataList;\r\n    }\r\n\r\n    CreateManualEntry(LoadingDetailsInfoDetails) {\r\n        var keyCode = [\r\n            {\r\n                key: KeyCodes.shipmentCode,\r\n                value: this.props.shipment.ShipmentCode,\r\n            },\r\n            {\r\n                key: KeyCodes.finishedProductCode,\r\n                value: this.state.modTruckManualEntryLoadingFPInfo.FinishedProductCode,\r\n            },\r\n            {\r\n                key: KeyCodes.compartmentSeqNoInVehicle,\r\n                value: this.state.modTruckManualEntryLoadingDetailsCommonInfo.CompartmentSeqNoInVehicle,\r\n            },\r\n            {\r\n                key: KeyCodes.shareholderCode,\r\n                value: this.props.selectedShareholder,\r\n            },\r\n        ];\r\n\r\n        if (this.state.isBCUTransload)\r\n            if (this.state.transloadSource === \"MARINE\") {\r\n                keyCode.push({\r\n                    key: KeyCodes.marineReceiptCode,\r\n                    value: this.state.modRailMarineTransactionCommonInfo.ReceiptCode,\r\n                })\r\n                keyCode.push({\r\n                    key: KeyCodes.compartmentCode,\r\n                    value: this.state.modRailMarineTransactionCommonInfo.CompartmentSeqNoInVehicle,\r\n                })\r\n            }\r\n            else {\r\n                keyCode.push({\r\n                    key: KeyCodes.railReceiptCode,\r\n                    value: this.state.modRailMarineTransactionCommonInfo.ReceiptCode,\r\n                })\r\n                keyCode.push({\r\n                    key: KeyCodes.wagonCode,\r\n                    value: this.state.modRailMarineTransactionCommonInfo.TrailerCode,\r\n                })\r\n                keyCode.push({\r\n                    key: KeyCodes.carrierCode,\r\n                    value: this.state.carrierCode,\r\n                })\r\n            }\r\n\r\n        var notification = {\r\n            messageType: \"critical\",\r\n            message: \"TruckShipment_ManualEntryCreateStatus\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [\"MarineDispatchManualEntry_CompSeqNo\"],\r\n                    keyValues: [this.state.modTruckManualEntryLoadingDetailsCommonInfo.CompartmentSeqNoInVehicle],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n        var obj = {\r\n            ShareHolderCode: this.props.selectedShareholder,\r\n            keyDataCode: KeyCodes.shipmentCode,\r\n            KeyCodes: keyCode,\r\n            Entity: LoadingDetailsInfoDetails,\r\n        };\r\n        axios(\r\n            RestAPIs.TruckCreateManualEntry,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    if (result.ErrorList.length > 0 && result.ErrorList[0] !== \"\")\r\n                        this.setState({ manualEntrySaveEnable: false, isComminglingAlert: true,showAuthenticationLayout:false }, () => this.getCompartmentSeqNo(true));\r\n                    else\r\n                        this.setState({ manualEntrySaveEnable: false,showAuthenticationLayout:false }, () => this.getCompartmentSeqNo(true));\r\n                } else {\r\n                    notification.message = \"MarineDispatchManualEntry_SaveFailure\";\r\n                    notification.messageResultDetails[0].errorMessage =\r\n                        result.ErrorList[0];\r\n                    this.setState({ manualEntrySaveEnable : Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.modify,\r\n        fnSBC), showAuthenticationLayout:false, });\r\n                }\r\n                toast(\r\n                    <ErrorBoundary>\r\n                        <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                    </ErrorBoundary>,\r\n                    {\r\n                        autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n                    }\r\n                );\r\n            })\r\n            .catch((error) => {\r\n                this.setState({ showAuthenticationLayout:false });\r\n                notification.messageResultDetails[0].errorMessage = error;\r\n                console.log(\"TruckShipmentManualEntryDetailsComposite: Error while creating Manual Entry:\", error);\r\n            });\r\n    }\r\n\r\n    handleTabChange = (index) => {\r\n        this.setState({\r\n            activeIndex: index\r\n        });\r\n    };\r\n\r\n    handleDateTextChange = (propertyName, value, error) => {\r\n        try {\r\n            var validationErrorsForFP = lodash.cloneDeep(this.state.validationErrors);\r\n            var modTruckManualEntryLoadingFPInfo = lodash.cloneDeep(\r\n                this.state.modTruckManualEntryLoadingFPInfo\r\n            );\r\n            validationErrorsForFP[propertyName] = error;\r\n            modTruckManualEntryLoadingFPInfo[propertyName] = value;\r\n            this.setState({ validationErrorsForFP, modTruckManualEntryLoadingFPInfo });\r\n        } catch (error) {\r\n            console.log(\r\n                \"TruckShipmentManualEntryDetailsComposite:Error occured on handleDateTextChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    handleAttributeCellDataEditFP = (attribute, value) => {\r\n        try {\r\n            attribute.DefaultValue = value;\r\n            this.setState({\r\n                attribute: attribute\r\n            })\r\n            const attributeValidationErrors = lodash.cloneDeep(this.state.attributeValidationErrors);\r\n\r\n            attributeValidationErrors.forEach((attributeValidation) => {\r\n                if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n                    attributeValidation.attributeValidationErrors[attribute.Code] = Utilities.valiateAttributeField(attribute, value);\r\n                }\r\n            })\r\n            this.setState({ attributeValidationErrors });\r\n\r\n        }\r\n        catch (error) {\r\n            console.log(\r\n                \"TruckShipmentManualEntryDetailsComposite:Error occured on handleAttributeCellDataEditFP\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    ComminglingAlert = () => {\r\n        return (\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <Modal open={this.state.isComminglingAlert} size=\"small\">\r\n                        <Modal.Content>\r\n                            <div className=\"col col-lg-12\">\r\n                                <h5>{t(\"LoadingDetailsEntry_ComminglingError\").replace(\"{0}\", this.props.selectedShareholder).replace(\"{1}\", this.state.modTruckManualEntryLoadingFPInfo.TankCode)}</h5>\r\n                            </div>\r\n                        </Modal.Content>\r\n                        <Modal.Footer>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                content={t(\"AccessCardInfo_Ok\")}\r\n                                onClick={() => {\r\n                                    this.setState({ isComminglingAlert: false });\r\n                                }}\r\n                            />\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                )}\r\n            </TranslationConsumer>\r\n        );\r\n    };\r\n\r\n\r\n    handleAttributeCellDataEditBPandAdditive = (attribute, value) => {\r\n        try {\r\n            attribute.DefaultValue = value;\r\n            this.setState({\r\n                attribute: attribute\r\n            })\r\n            const attributeValidationErrors = lodash.cloneDeep(this.state.attributeValidationErrors);\r\n\r\n            attributeValidationErrors.forEach((attributeValidation) => {\r\n                if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n                    attributeValidation.attributeValidationErrors[attribute.Code] = Utilities.valiateAttributeField(attribute, value);\r\n                }\r\n            })\r\n            this.setState({ attributeValidationErrors });\r\n\r\n        }\r\n        catch (error) {\r\n            console.log(\r\n                \"TruckShipmentManualEntryDetailsComposite:Error occured on handleAttributeCellDataEditFP\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    handleAuthenticationClose = () => {\r\n        this.setState({\r\n          showAuthenticationLayout: false,\r\n        });\r\n      };\r\n\r\n    render() {\r\n        const listOptions = {\r\n            compartmentSeqNoInVehicleList: this.state.compartmentSeqNoInVehicleList,\r\n            quantityUOMOptions: this.state.quantityUOMOptions,\r\n            densityUOMS: this.state.densityUOMS,\r\n            temperatureUOMs: this.state.temperatureUOMs,\r\n            calcValueUOM: this.state.calcValueUOM,\r\n            LoadingArms: this.state.LoadingArms,\r\n            Bays: this.state.Bays,\r\n            BCUs: this.state.BCUs,\r\n            meterCodes: this.state.meterCodes,\r\n            tankCodes: this.state.tankCodes,\r\n            wagonCodes: this.state.wagonCodes,\r\n            receiptCodes: this.state.receiptCodes,\r\n            marineReceiptCompCodes: this.state.marineReceiptCompCodes\r\n        };\r\n        return (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <TruckShipmentManualEntryDetails\r\n                        onFieldChange={this.handleChange}\r\n                        onTabChange={this.handleTabChange}\r\n                        listOptions={listOptions}\r\n                        productList={this.state.productList}\r\n                        modTruckManualEntryLoadingDetailsCommonInfo={this.state.modTruckManualEntryLoadingDetailsCommonInfo}\r\n                        modTruckManualEntryLoadingFPInfo={this.state.modTruckManualEntryLoadingFPInfo}\r\n                        modTruckManualEntryLoadingBPInfo={this.state.modTruckManualEntryLoadingBPInfo}\r\n                        modTruckManualEntryLoadingAdvInfo={this.state.modTruckManualEntryLoadingAdvInfo}\r\n                        modRailMarineTransactionCommonInfo={this.state.modRailMarineTransactionCommonInfo}\r\n                        validationErrors={this.state.validationErrors}\r\n                        validationErrorsForFP={this.state.validationErrorsForFP}\r\n                        validationErrorsForBP={this.state.validationErrorsForBP}\r\n                        selectedAttributeList={this.state.selectedAttributeList}\r\n                        attributeValidationErrors={this.state.attributeValidationErrors}\r\n                        selectedAttributeBPList={this.state.selectedAttributeBPList}\r\n                        bpAttributeValidationErrors={this.state.bpAttributeValidationErrors}\r\n                        selectedAttributeAdvList={this.state.selectedAttributeAdvList}\r\n                        advAttributeValidationErrors={this.state.advAttributeValidationErrors}\r\n                        onDateTextChange={this.handleDateTextChange}\r\n                        currentCompTopUpReq={this.state.currentCompTopUpReq}\r\n                        handleAttributeCellDataEdit={this.handleAttributeCellDataEditFP}\r\n                        handleAttributeCellDataEditBPandAdditive={this.handleAttributeCellDataEditBPandAdditive}\r\n                        activeIndex={this.state.activeIndex}\r\n                        isBCUTransload={this.state.isBCUTransload}\r\n                        transloadSource={this.state.transloadSource}\r\n                        QuantityUOM={this.props.shipment.ShipmentQuantityUOM}\r\n                    // railReceipts={this.state.railReceipts}\r\n                    // marineReceipts={this.state.marineReceipts}\r\n                    // defaultUOMS={this.props.userDetails.EntityResult.PageAttibutes}\r\n                    ></TruckShipmentManualEntryDetails>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <TMDetailsUserActions\r\n                        handleBack={this.props.handleBack}\r\n                        handleSave={this.handleSave}\r\n                        handleReset={this.handleReset}\r\n                        saveEnabled={this.state.manualEntrySaveEnable}\r\n                    ></TMDetailsUserActions>\r\n                </ErrorBoundary>\r\n                {this.state.isComminglingAlert ? this.ComminglingAlert() : null}\r\n                {this.state.showAuthenticationLayout ? (\r\n                    <UserAuthenticationLayout\r\n                        Username={this.props.userDetails.EntityResult.UserName}\r\n                        functionName={functionGroups.add}\r\n                        functionGroup={fnLoadingDetails}\r\n                        handleOperation={this.addLoadingDetails}\r\n                        handleClose={this.handleAuthenticationClose}\r\n                    ></UserAuthenticationLayout>\r\n                    ) : null}\r\n            </div>);\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(\r\n    TruckShipmentManualEntryDetailsComposite\r\n);\r\n\r\nTruckShipmentManualEntryDetailsComposite.propTypes = {\r\n    handleBack: PropTypes.func.isRequired,\r\n    shipment: PropTypes.object.isRequired,\r\n    selectedShareholder: PropTypes.string.isRequired,\r\n};\r\n\r\n\r\n"],"names":["TruckShipmentManualEntryDetails","_ref","modTruckManualEntryLoadingDetailsCommonInfo","modTruckManualEntryLoadingFPInfo","modTruckManualEntryLoadingBPInfo","modTruckManualEntryLoadingAdvInfo","modRailMarineTransactionCommonInfo","validationErrors","validationErrorsForFP","validationErrorsForBP","listOptions","onFieldChange","onTabChange","productList","activeIndex","onDateTextChange","selectedAttributeList","attributeValidationErrors","selectedAttributeBPList","bpAttributeValidationErrors","selectedAttributeAdvList","advAttributeValidationErrors","handleAttributeCellDataEdit","handleAttributeCellDataEditBPandAdditive","currentCompTopUpReq","transloadSource","isBCUTransload","console","log","handleValidationErrorFilter","terminal","attributeValidation","undefined","find","selectedAttribute","TerminalCode","_jsx","TranslationConsumer","children","t","_jsxs","className","Select","fluid","placeholder","value","CompartmentSeqNoInVehicle","label","options","Utilities","compartmentSeqNoInVehicleList","onChange","data","multiple","reserveSpace","search","noResultsMessage","indicator","error","DatePicker","Date","StartTime","disablePast","type","displayFormat","getCurrentDateFormat","minuteStep","disableFuture","onTextChange","EndTime","BayCode","Bays","BCUCode","BCUs","LoadingArmCode","LoadingArms","Input","FinishedProductCode","disabled","QuantityUOM","quantityUOMOptions","TransactionID","ReceiptCode","receiptCodes","TrailerCode","wagonCodes","marineReceiptCompCodes","MarineReceiptCompCode","Remarks","Tab","index","Pane","title","GrossQuantity","NetQuantity","Temperature","TemperatureUOM","temperatureUOMs","ProductDensity","IsWeightBased","ProductDensityUOM","densityUOMS","MeterCode","meterCodes","StartTotalizer","EndTotalizer","NetStartTotalizer","NetEndTotalizer","CalculatedGross","CalculatedNet","CalculatedValueUOM","calcValueUOM","length","map","attire","ErrorBoundary","Accordion","Content","AttributeDetails","attributeMetaDataList","handleCellDataEdit","item","baseProductCode","productType","code","advIndex","findIndex","adv","AdditiveProductCode","TankCode","tankCodes","Array","isArray","defaultProps","TruckShipmentManualEntryDetailsComposite","Component","constructor","_this","arguments","this","state","lodash","emptyRailMarineTransactionCommonInfo","modRailMarineFinishedProductInfoInfo","emptyRailMarineFinishedProductInfoInfo","emptyTruckManualEntryLoadingDetailsCommonInfo","emptyTruckManualEntryLoadingProductInfo","BaysandBCUs","truckShipmentManualEntryCommonValidationDef","truckShipmentManualEntryProdValidationDef","manualEntrySaveEnable","updatedCompSeqNo","railReceipt","marineReceipt","carrierCode","isComminglingAlert","showAuthenticationLayout","tempLoadingDetails","handleReset","props","shipment","ShipmentQuantityUOM","setState","LOADINGDETAILSFP","userDetails","EntityResult","FunctionsList","functionGroups","modify","fnSBC","handleChange","propertyName","additiveCode","Constants","Common","includes","toString","PageAttibutes","DefaultUOMS","MassUOM","getTopUpRequestsofShipment","getFPReceipeDetails","BAY","getBCUs","GetLoadingArms","getBCUDetails","BCU","FP","LOADINGARM","GetMetersForLA","BP","Adv","RailTransload","getRailReceipt","MarineTransload","getMarineReceipt","ShipmentType","addLoadingDetails","CreateManualEntry","handleSave","fillAttributeDetails","LoadingDetailsInfoDetails","fillManualEntryDetails","validateSave","IsWebPortalUser","handleTabChange","handleDateTextChange","handleAttributeCellDataEditFP","attribute","DefaultValue","forEach","Code","ComminglingAlert","Modal","open","size","replace","selectedShareholder","Footer","Button","content","onClick","handleAuthenticationClose","componentDidMount","setDefaultValues","IsArchived","getAttributes","getCompartmentSeqNo","getmeterCodes","getTankCodes","GetUOMList","GetBaysandBCUs","axios","RestAPIs","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","tokenDetails","tokenInfo","then","response","result","IsSuccess","VOLUME","MASS","massUOM","push","DENSITY","TEMPERATURE","ErrorList","catch","isAfterCreate","keyCode","key","KeyCodes","ShipmentCode","obj","ShareHolderCode","keyDataCode","compSeqNo","Table","COMPARTMENTSeqNoInVehicle","Object","keys","element","LoadingArmsForBCU","bcuCode","loadingArmCode","ROAD_BCUVIEW","ActualTerminalCode","loadingArm","AssociatedArmsList","larm","mainLineMeters","additiveMeters","AssociatedMeterList","meter","MeterLineType","bpMeterCode","additiveMeterCode","MeterList","compSequenceNo","finishedProd","ShipmentDestinationCompartmentsInfo","comp","BaseProductCode","ProductTYPE","Table2","AdditiveCode","producttype","handleAttributes","bpAttributeMetaDataList","LOADINGDETAILSBP","advAttributeMetaDataList","LOADINGDETAILSADDITIVE","formAttributesforEachTab","selectedTerminals","attributeMetaData","deviceCode","bcu","DensityUOM","BPInfo","ReceiptSource","RAIL","GetRailTransloadableReceipts","MARINE","getMarineTransloadableReceipts","commonCode","RailMarineReceiptCompartmentDetailPlanList","IsTransloading","compCodes","attributeList","Attributes","ListOfAttributeData","det","AttributeCode","AttributeValue","baseProduct","fillBPAttributeDetails","BPCode","AdvCode","isWeightBased","bcuTransload","returnValueBase","values","every","returnValueFP","returnValueAddition","times","returnAttributeFPValue","x","attributeBPValueList","attributeBPValue","attributeErrorIndex","returnAttributeBPValue","attributeAdvValueList","returnAttributeAdvValue","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","toast","NotifyEvent","notificationMessage","autoClose","LoadingDetailsInfos","RailMarineUnloadingDataList","IsShipmentBonded","IsBonded","IsBCUTransload","TransloadSource","LoadingDetailsInfo","CommonInfo","LoadingDetailFPinfo","ArrLoadingDetailAdditive","ArrLoadingDetailBP","IsLocalLoaded","TerminalCodes","LoadingDetailsType","AdvInfo","baseproduct","advproduct","formTransloadInfo","loadingInfo","railMarineLoadingDataList","receiptDetail","finishedProduct","RailMarineReceiptCompartmentPlanList","filter","m","carrierCompanyCode","CarrierCompanyCode","RailMarineTransactionInfo","TransactionFPinfo","ArrTransactionBP","ArrTransactionAdditive","ArmCode","BpProd","LoadingType","TransactionType","TransportationType","CarrierCode","Entity","render","TMDetailsUserActions","handleBack","saveEnabled","UserAuthenticationLayout","Username","UserName","functionName","add","functionGroup","fnLoadingDetails","handleOperation","handleClose","connect","getUserDetails","TokenAuth"],"sourceRoot":""}