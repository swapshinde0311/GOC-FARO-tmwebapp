{"version":3,"file":"static/js/8945.1dc9ec03.chunk.js","mappings":"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","sources":["Components/UIBase/Common/TMUserActions.jsx","Components/Composite/Common/TMUserActionsComposite.jsx","Components/UIBase/Details/ViewSystemStatusDetails.jsx","Components/Composite/Entity/ViewSystemStatusComposite.jsx","JS/NotifyEvent.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Icon,\r\n  Breadcrumb,\r\n  Select,\r\n  Modal,\r\n  Button,\r\n  Popup,\r\n  VerticalMenu,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nTMUserActions.propTypes = {\r\n  operationsVisibilty: PropTypes.shape({\r\n    add: PropTypes.bool,\r\n    delete: PropTypes.bool,\r\n    shareholder: PropTypes.bool,\r\n  }).isRequired,\r\n  breadcrumbItem: PropTypes.shape({\r\n    itemName: PropTypes.string,\r\n    itemCode: PropTypes.string,\r\n    itemProps: PropTypes.any,\r\n    localizedKey: PropTypes.string,\r\n    parents: PropTypes.array,\r\n    isComponent: PropTypes.bool,\r\n  }).isRequired,\r\n  shareholders: PropTypes.array.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onShareholderChange: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onAdd: PropTypes.func.isRequired,\r\n  popUpContent: PropTypes.array,\r\n};\r\nTMUserActions.defaultProps = {\r\n  operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n  breadcrumbItem: {\r\n    itemName: \"\",\r\n    itemCode: \"\",\r\n    localizedKey: \"\",\r\n    itemProps: {},\r\n    parents: [],\r\n    isComponent: false,\r\n  },\r\n  shareholders: [],\r\n  selectedShareholder: \"\",\r\n  popUpContent: [],\r\n  shrVisible: true,\r\n  addVisible: true,\r\n  deleteVisible: true\r\n};\r\nexport function TMUserActions({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [popUpOpen, setPopUpOpen] = useState(false);\r\n  function getShareholderDropdownOptions() {\r\n    return Utilities.transferListtoOptions(shareholders);\r\n    // var List = [];\r\n    // shareholders.forEach((element) => {\r\n    //   List.push({ text: element, value: element });\r\n    // });\r\n    // return List;\r\n  }\r\n\r\n  function buildBreadcrumb() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {breadcrumbItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item\r\n                  onClick={() => {\r\n                    if (\r\n                      handleBreadCrumbClick !== undefined &&\r\n                      handleBreadCrumbClick !== null\r\n                    ) {\r\n                      handleBreadCrumbClick(\r\n                        parentitem.itemCode,\r\n                        breadcrumbItem.parents\r\n                      );\r\n                    }\r\n                  }}\r\n                  key={parentitem.itemCode}\r\n                >\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={breadcrumbItem.itemCode}>\r\n              {t(breadcrumbItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  function handlePopUpClick() {\r\n    if (operationsVisibilty.add) {\r\n      if (popUpContent.length > 0) {\r\n        if (popUpOpen === false) setPopUpOpen(true);\r\n        else setPopUpOpen(false);\r\n      } else {\r\n        onAdd();\r\n      }\r\n    }\r\n  }\r\n\r\n  function popUpMenuClick(menuItem) {\r\n    setPopUpOpen(false);\r\n    onAdd(menuItem);\r\n  }\r\n  function displayIcons() {\r\n    return (\r\n      <div\r\n        style={{ float: \"right\", display: \"inline-block\", marginTop: \"10px\" }}\r\n      >\r\n        {addVisible ? <Popup\r\n          position=\"bottom right\"\r\n          className=\"popup-theme-wrap\"\r\n          element={\r\n            <div\r\n              className={\r\n                (operationsVisibilty.add\r\n                  ? \"iconCircle \"\r\n                  : \"iconCircleDisable \") + \"iconblock\"\r\n              }\r\n              onClick={handlePopUpClick}\r\n            >\r\n              <Icon\r\n                root=\"common\"\r\n                name=\"badge-plus\"\r\n                size=\"small\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          }\r\n          on=\"click\"\r\n          open={popUpOpen}\r\n        >\r\n          <div onMouseLeave={() => setPopUpOpen(false)}>\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <VerticalMenu>\r\n                  <VerticalMenu>\r\n                    <VerticalMenu.Header>\r\n                      {t(\"Common_Create\")}\r\n                    </VerticalMenu.Header>\r\n                    {popUpContent.map((item) => {\r\n                      return (\r\n                        <VerticalMenu.Item\r\n                          onClick={() => popUpMenuClick(item.fieldName)}\r\n                        >\r\n                          {t(item.fieldValue)}\r\n                        </VerticalMenu.Item>\r\n                      );\r\n                    })}\r\n                  </VerticalMenu>\r\n                </VerticalMenu>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        </Popup> : \"\"}\r\n        {deleteVisible ? <div\r\n          style={{ marginLeft: \"10px\" }}\r\n          onClick={() => {\r\n            if (operationsVisibilty.delete) {\r\n              setModelOpen(true);\r\n              //displayTMModalforDelete();\r\n              //onDelete();\r\n            }\r\n          }}\r\n          className={\r\n            (operationsVisibilty.delete\r\n              ? \"iconCircle \"\r\n              : \"iconCircleDisable \") + \"iconblock\"\r\n          }\r\n        >\r\n          <Icon root=\"common\" name=\"delete\" size=\"small\" color=\"white\" />\r\n        </div> : \"\"}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayTMModalforDelete() {\r\n    //console.log(\"entered to display modal actions\");\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  onDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n    //return <TMModal open={true}></TMModal>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\" style={{ alignItems: \"flex-start\", padding: \"0px\" }}>\r\n      <div\r\n        className=\"col-9 col-sm-9 col-md-9 col-lg-10 col-xl-10\"\r\n        style={{ padding: \"0px\" }}\r\n      >\r\n        <div className=\"row\" style={{ marginTop: \"10px\", alignItems: \"\" }}>\r\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n            <ErrorBoundary> {buildBreadcrumb()}</ErrorBoundary>\r\n          </div>\r\n          <div\r\n            className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-4\"\r\n          //style={{ verticalAlign: \"middle\" }}\r\n          >\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <div\r\n                  className=\"compartmentIcon\"\r\n                  style={{ justifyContent: \"flex-start\" }}\r\n                >\r\n                  {shrVisible === false ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <div>\r\n                        <h4 className=\"shrText\">{t(\"Common_Shareholder\")}:</h4>\r\n                      </div>\r\n                      <div className=\"opSelect\">\r\n                        <Select\r\n                          //className=\"opSelect\"\r\n                          placeholder={t(\"Common_Shareholder\")}\r\n                          value={selectedShareholder}\r\n                          disabled={!operationsVisibilty.shareholder}\r\n                          options={getShareholderDropdownOptions()}\r\n                          onChange={(value) => onShareholderChange(value)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n\r\n          {displayTMModalforDelete()}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-3 col-sm-3 col-md-3 col-lg-2 col-xl-2\">\r\n        {displayIcons()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TMUserActions } from \"../../UIBase/Common/TMUserActions\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nexport function TMUserActionsComposite({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n\r\n}) {\r\n  return (\r\n    <TMUserActions\r\n      operationsVisibilty={operationsVisibilty}\r\n      breadcrumbItem={breadcrumbItem}\r\n      shareholders={shareholders}\r\n      selectedShareholder={selectedShareholder}\r\n      onShareholderChange={onShareholderChange}\r\n      onDelete={onDelete}\r\n      onAdd={onAdd}\r\n      popUpContent={popUpContent}\r\n      shrVisible={shrVisible}\r\n      handleBreadCrumbClick={handleBreadCrumbClick}\r\n      addVisible={addVisible}\r\n      deleteVisible={deleteVisible}\r\n    ></TMUserActions>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport { InputLabel, Accordion, Button } from \"@scuf/common\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport PropTypes from \"prop-types\";\r\nimport AccordionContent from \"@scuf/common/dist/components/Accordion/Content/Content\";\r\n\r\nViewSystemStatusDetails.propTypes = {\r\n    lastUpdatedTime: PropTypes.object.isRequired,\r\n    deviceCommunicationStatusData: PropTypes.array.isRequired,\r\n    pageSize: PropTypes.object.isRequired,\r\n    serverStatus: PropTypes.array.isRequired,\r\n    isDCHEnable: PropTypes.bool.isRequired,\r\n    externalSystemStatusData: PropTypes.array.isRequired,\r\n    isArchiveEnable: PropTypes.bool.isRequired,\r\n    lastArchivedTime: PropTypes.object.isRequired,\r\n    isTWICEnable: PropTypes.bool.isRequired,\r\n    twicRuntimeValue: PropTypes.object.isRequired,\r\n    checkDeviceStatus: PropTypes.func.isRequired,\r\n    terminalCommunicationStatusData: PropTypes.array.isRequired,\r\n    isEnterpriseNode: PropTypes.bool.isRequired,\r\n    serverStorageStatus: PropTypes.array.isRequired\r\n}\r\n\r\nViewSystemStatusDetails.defaultProps = {\r\n    isDCHEnable: false,\r\n    isArchiveEnable: false,\r\n    isTWICEnable: false,\r\n    isEnterpriseNode: false\r\n}\r\n\r\nexport function ViewSystemStatusDetails({\r\n    lastUpdatedTime,\r\n    deviceCommunicationStatusData,\r\n    pageSize,\r\n    serverStatus,\r\n    isDCHEnable,\r\n    externalSystemStatusData,\r\n    isArchiveEnable,\r\n    lastArchivedTime,\r\n    isTWICEnable,\r\n    twicRuntimeValue,\r\n    checkDeviceStatus,\r\n    terminalCommunicationStatusData,\r\n    isEnterpriseNode,\r\n    serverStorageStatus\r\n}) {\r\n    const [t] = useTranslation();\r\n\r\n    const handleCheckNow = (cellData) => {\r\n        return (\r\n            <Button\r\n                size=\"small\"\r\n                textTransform={false}\r\n                onClick={() => checkDeviceStatus(cellData.rowData)}\r\n                content={t(\"Communication_CheckNow\")}\r\n                disabled={!(cellData.rowData.btnCheck_Enabled)}\r\n            ></Button>\r\n        )\r\n    }\r\n\r\n    const handleProcessStatus = (cellData) => {\r\n        if (cellData.rowData.ExeStatus !== null) {\r\n            if (cellData.rowData.ExeStatus) {\r\n                return (\r\n                    <div>\r\n                        <img\r\n                            src=\"/GVcheck.png\"\r\n                            alt=\"\"\r\n                            title={t(\"Communication_OKtooltip\")}\r\n                        >\r\n                        </img>\r\n                    </div>\r\n                )\r\n            }\r\n            else {\r\n                return (\r\n\r\n                    <div>\r\n                        <img\r\n                            src=\"/GVicon-cross.png\"\r\n                            alt=\"\"\r\n                            title={t(\"Communication_Lockedtooltip\")}\r\n                        >\r\n                        </img>\r\n                    </div>\r\n\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleCommunicationActive = (cellData) => {\r\n        if (cellData.rowData.Active) {\r\n            return (\r\n                <div className=\"communicationStatus-img\">\r\n                    <img\r\n                        src=\"/GVcheck.png\"\r\n                        alt=\"\"\r\n                        title={t(\"Communication_OKtooltip\")}\r\n                    >\r\n                    </img>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"communicationStatus-img\">\r\n                    <img\r\n                        src=\"/GVicon-cross.png\"\r\n                        alt=\"\"\r\n                        title={t(\"Communication_Lockedtooltip\")}\r\n                    >\r\n                    </img>\r\n                </div>\r\n\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    const handleExternalSystemStatus = (cellData) => {\r\n        if (cellData.rowData.Status) {\r\n            return (\r\n                <div className=\"communicationStatus-img\">\r\n                    <img\r\n                        src=\"/GVLoading.gif\"\r\n                        className=\"communicationStatusDot-img\"\r\n                        alt=\"\"\r\n                        title={t(cellData.rowData.Tooltip)}\r\n                    >\r\n                    </img>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"communicationStatus-img\">\r\n                    <img\r\n                        src=\"/i_Status_Fail.png\"\r\n                        className=\"communicationStatusDot-img\"\r\n                        alt=\"\"\r\n                        title={t(cellData.rowData.Tooltip)}\r\n                    >\r\n                    </img>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleServerStatus = (cellData) => {\r\n        if (cellData.rowData.ServiceStaus === 0) {\r\n            return (\r\n                <div className=\"communicationStatus-img\">\r\n                    <img\r\n                        src=\"/i_Status_Fail.png\"\r\n                        className=\"communicationStatusDot-img\"\r\n                        alt=\"\"\r\n                        title={t(\"ServiceStatus_NotRunning\")}\r\n                    >\r\n                    </img>\r\n                </div>\r\n            )\r\n        }\r\n        else if (cellData.rowData.ServiceStaus === 1) {\r\n            return (\r\n                <div className=\"communicationStatus-img\">\r\n                    <img\r\n                        src=\"/GVLoading.gif\"\r\n                        className=\"communicationStatusDot-img\"\r\n                        alt=\"\"\r\n                        title={t(\"ServiceStatus_Running\")}\r\n                    >\r\n                    </img>\r\n                </div>\r\n            )\r\n        }\r\n        else if (cellData.rowData.ServiceStaus === 2) {\r\n            return (\r\n                <div className=\"communicationStatus-img\">\r\n                    <img\r\n                        src=\"/i_Status_Fail.png\"\r\n                        className=\"communicationStatusDot-img\"\r\n                        alt=\"\"\r\n                        title={t(\"ServiceStatus_NotRunning\")}\r\n                    >\r\n                    </img>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleCommunicationStatus = (cellData) => {\r\n        if (cellData.rowData.CommStatus_Visible) {\r\n            if (cellData.rowData.CommStatus === \"True\") {\r\n                return (\r\n                    <div className=\"communicationStatus-img\">\r\n                        <img\r\n                            src=\"/GVLoading.gif\"\r\n                            alt=\"\"\r\n                            className=\"communicationStatusDot-img\"\r\n                            title={t(cellData.rowData.CommStatus_Tooltip)}\r\n                        >\r\n                        </img>\r\n                    </div>\r\n                )\r\n            }\r\n            else {\r\n                return (\r\n                    <div className=\"communicationStatus-img\">\r\n                        <img\r\n                            src=\"/i_Status_Fail.png\"\r\n                            className=\"communicationStatusDot-img\"\r\n                            alt=\"\"\r\n                            title={t(cellData.rowData.CommStatus_Tooltip)}\r\n                        >\r\n                        </img>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleRunningStatus = (cellData) => {\r\n        if (cellData.rowData.RunningStatus_Visible) {\r\n            if (cellData.rowData.RunningStatus === \"True\") {\r\n                return (\r\n                    <div className=\"communicationStatus-img\">\r\n                        <img\r\n                            src=\"/GVLoading.gif\"\r\n                            className=\"communicationStatusDot-img\"\r\n                            alt=\"\"\r\n                            title={t(cellData.rowData.RunningStatus_Tooltip)}\r\n                        >\r\n                        </img>\r\n                    </div>\r\n                )\r\n            }\r\n            else {\r\n                return (\r\n                    <div className=\"communicationStatus-img\">\r\n                        <img\r\n                            src=\"/i_Status_Fail.png\"\r\n                            className=\"communicationStatusDot-img\"\r\n                            alt=\"\"\r\n                            title={t(cellData.rowData.RunningStatus_Tooltip)}\r\n                        >\r\n                        </img>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleServiceColumn = (cellData) => {\r\n        return (\r\n            <DataTable\r\n                data={cellData.rowData.ServiceName}\r\n                showHeader={false}\r\n            >\r\n                <DataTable.Column\r\n                    initialWidth=\"30%\"\r\n                    className=\"compColHeight\"\r\n                    key=\"ServiceName\"\r\n                    field=\"ServiceName\"\r\n                >\r\n                </DataTable.Column>\r\n            </DataTable>\r\n        )\r\n    }\r\n    const handleRunningStatusColumn = (cellData) => {\r\n        return (\r\n            <DataTable\r\n                data={cellData.rowData.ServiceStaus}\r\n                showHeader={false}\r\n            >\r\n                <DataTable.Column\r\n                    initialWidth=\"10%\"\r\n                    className=\"compColHeight\"\r\n                    renderer={handleServerStatus}>\r\n                </DataTable.Column>\r\n            </DataTable>\r\n        )\r\n    }\r\n\r\n    const handleServerNameColumn = (cellData) => {\r\n        if (cellData.rowData.ServerType === \"EPKSSERVER\") {\r\n            return (\r\n                <div>\r\n                    <div>{cellData.rowData.ServerName}</div>\r\n                    {\r\n                        cellData.rowData.ListOfServerStatusInfo.map((serverData) =>\r\n                            serverData.statusCode === 1 ? <div>\r\n                                <img\r\n                                    src=\"/GVLoading.gif\"\r\n                                    className=\"communicationStatusDot-img\"\r\n                                    alt=\"\"\r\n                                    title={t(serverData.ToolTip)}\r\n                                >\r\n                                </img>{serverData.Type}\r\n                            </div> :\r\n                                serverData.statusCode === 2 ?\r\n                                    <div>\r\n                                        <img\r\n                                            src=\"/i_Status_Success.png\"\r\n                                            className=\"communicationStatusDot-img\"\r\n                                            alt=\"\"\r\n                                            title={t(serverData.ToolTip)}\r\n                                        >\r\n                                        </img>{serverData.Type}\r\n                                    </div> : serverData.statusCode === 3 ?\r\n                                        <div>\r\n                                            <img\r\n                                                src=\"/i_Status_Fail.png\"\r\n                                                className=\"communicationStatusDot-img\"\r\n                                                alt=\"\"\r\n                                                title={t(serverData.ToolTip)}\r\n                                            >\r\n                                            </img>{serverData.Type}\r\n                                        </div> : \"\"\r\n                        )\r\n                    }\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>{cellData.rowData.ServerName}</div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleTerminalColumn = (cellData) => {\r\n        if (cellData.rowData.TerminalStatus === \"True\") {\r\n            return (\r\n                <div>\r\n                    <img\r\n                        src=\"/GVLoading.gif\"\r\n                        className=\"communicationStatusDot-img\"\r\n                        alt=\"\"\r\n                        title={t(cellData.rowData.TerminalStatus_Tooltip)}\r\n                    >\r\n                    </img>{cellData.rowData.TerminalCode}\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <img\r\n                        src=\"/i_Status_Fail.png\"\r\n                        className=\"communicationStatusDot-img\"\r\n                        alt=\"\"\r\n                        title={t(cellData.rowData.TerminalStatus_Tooltip)}\r\n                    >\r\n                    </img>{cellData.rowData.TerminalCode}\r\n                </div>\r\n            )\r\n\r\n        }\r\n    }\r\n\r\n    const handleTerminalProcessEnable = (cellData) => {\r\n        if (cellData.rowData.ProcessEnableStauts === \"True\") {\r\n            return (\r\n                <div className=\"communicationStatus-img\">\r\n                    <img\r\n                        src=\"/GVcheck.png\"\r\n                        alt=\"\"\r\n                        title={t(cellData.rowData.ProcessEnableStauts_Tooltip)}\r\n                    >\r\n                    </img>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"communicationStatus-img\">\r\n                    <img\r\n                        src=\"/GVicon-cross.png\"\r\n                        alt=\"\"\r\n                        title={t(cellData.rowData.ProcessEnableStauts_Tooltip)}\r\n                    >\r\n                    </img>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleTerminalProcessStatus = (cellData) => {\r\n        if (cellData.rowData.ProcessRunningStatus === \"True\") {\r\n            return (\r\n                <div className=\"communicationStatus-img\">\r\n                    <img\r\n                        src=\"/GVLoading.gif\"\r\n                        className=\"communicationStatusDot-img\"\r\n                        alt=\"\"\r\n                        title={t(cellData.rowData.RunningStatus_Tooltip)}\r\n                    >\r\n                    </img>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"communicationStatus-img\">\r\n                    <img\r\n                        src=\"/i_Status_Fail.png\"\r\n                        className=\"communicationStatusDot-img\"\r\n                        alt=\"\"\r\n                        title={t(cellData.rowData.RunningStatus_Tooltip)}\r\n                    >\r\n                    </img>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleDBDiskRender = (cellData) => {\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    Object.keys(cellData.rowData.StorageDetails).map(key => {\r\n                        return (\r\n                            <DataTable\r\n                                data={cellData.rowData.StorageDetails[key]}\r\n                                showHeader={true}>\r\n                                <DataTable.Column\r\n                                    renderer={(rowData) => {\r\n                                        return (\r\n                                            <div className=\"mt-1\">\r\n                                                <img\r\n                                                    src={rowData.rowData.Color === \"red\" ? \"/i_Status_Fail.png\" : \"/i_Status_Success.png\"}\r\n                                                    className=\"communicationStatusDot-img\"\r\n                                                    alt=\"\"\r\n                                                    title={t(cellData.rowData.RunningStatus_Tooltip)}\r\n                                                >\r\n                                                </img>\r\n                                                <span>{rowData.rowData.Name}</span>\r\n                                            </div>\r\n                                        )\r\n                                    }}\r\n                                    header={t(key)}\r\n                                >\r\n                                </DataTable.Column>\r\n                                <DataTable.Column\r\n                                    renderer={(rowData) => rowData.rowData.Value}\r\n                                    header={t(key + \"_ColumnValue\")}></DataTable.Column>\r\n                            </DataTable>\r\n                        )\r\n                    })\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"headerContainer\">\r\n                <div className=\"row headerSpacing\">\r\n                    <div className=\"col-12 pb-0\">\r\n                        <div style={{ float: \"right\" }}>{t(\"Common_LastUpdated\") + \" : \" + lastUpdatedTime}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"detailsContainer\">\r\n                {\r\n                    (isEnterpriseNode) ? (\r\n                        <Accordion>\r\n                            <AccordionContent\r\n                                className=\"attributeAccordian\"\r\n                                title={t(\"TerminalCommStatus_Title\")}\r\n                            >\r\n                                <div className=\"col-8 detailsTable\">\r\n                                    <DataTable\r\n                                        data={terminalCommunicationStatusData}\r\n                                        search={true}\r\n                                        searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}>\r\n                                        <DataTable.Column\r\n                                            initialWidth=\"10%\"\r\n                                            className=\"compColHeight\"\r\n                                            header={t(\"BaseProductList_AssocoatedTerminals\")}\r\n                                            renderer={handleTerminalColumn}\r\n                                        >\r\n                                        </DataTable.Column>\r\n                                        <DataTable.Column\r\n                                            initialWidth=\"39%\"\r\n                                            className=\"compColHeight\"\r\n                                            key=\"ProcessName\"\r\n                                            field=\"ProcessName\"\r\n                                            header={t(\"Communication_ProcessName\")}\r\n                                            editFieldType=\"text\"\r\n                                        ></DataTable.Column>\r\n                                        <DataTable.Column\r\n                                            initialWidth=\"10%\"\r\n                                            className=\"compColHeight\"\r\n                                            header={t(\"Communication_ProcessStatus\")}\r\n                                            renderer={handleTerminalProcessEnable}\r\n                                        ></DataTable.Column>\r\n                                        <DataTable.Column\r\n                                            initialWidth=\"8%\"\r\n                                            className=\"compColHeight\"\r\n                                            header={t(\"Communication_RunningStatus\")}\r\n                                            renderer={handleTerminalProcessStatus}\r\n                                        ></DataTable.Column>\r\n\r\n                                    </DataTable>\r\n                                </div>\r\n\r\n                            </AccordionContent>\r\n                        </Accordion>\r\n                    ) : (\r\n                        <Accordion>\r\n                            <Accordion.Content\r\n                                className=\"attributeAccordian\"\r\n                                title={t(\"CommStatus_Title\")}>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12 detailsTable\">\r\n                                        <DataTable\r\n                                            data={deviceCommunicationStatusData}\r\n                                            search={true}\r\n                                            searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                                        >\r\n                                            <DataTable.Column\r\n                                                initialWidth=\"10%\"\r\n                                                className=\"compColHeight\"\r\n                                                key=\"LocationCode\"\r\n                                                field=\"LocationCode\"\r\n                                                header={t(\"Communication_Area\")}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                initialWidth=\"10%\"\r\n                                                className=\"compColHeight disabledColumn\"\r\n                                                key=\"DeviceCode\"\r\n                                                field=\"DeviceCode\"\r\n                                                header={t(\"Communication_Device\")}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                initialWidth=\"8%\"\r\n                                                className=\"compColHeight disabledColumn\"\r\n                                                key=\"PointName\"\r\n                                                field=\"PointName\"\r\n                                                header={t(\"Communication_Active\")}\r\n                                                renderer={handleCommunicationActive}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                initialWidth=\"7%\"\r\n                                                className=\"compColHeight disabledColumn\"\r\n                                                key=\"CommStatus\"\r\n                                                field=\"CommStatus\"\r\n                                                header={t(\"Communication_Status\")}\r\n                                                renderer={handleCommunicationStatus}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                initialWidth=\"39%\"\r\n                                                className=\"compColHeight\"\r\n                                                key=\"ExeName\"\r\n                                                field=\"ExeName\"\r\n                                                header={t(\"Communication_ProcessName\")}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                initialWidth=\"8%\"\r\n                                                className=\"compColHeight\"\r\n                                                key=\"ExeStatus\"\r\n                                                field=\"ExeStatus\"\r\n                                                header={t(\"Communication_ProcessStatus\")}\r\n                                                renderer={handleProcessStatus}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                initialWidth=\"8%\"\r\n                                                className=\"compColHeight\"\r\n                                                key=\"RunningStatus\"\r\n                                                field=\"RunningStatus\"\r\n                                                header={t(\"Communication_RunningStatus\")}\r\n                                                renderer={handleRunningStatus}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                initialWidth=\"10%\"\r\n                                                className=\"compColHeight\"\r\n                                                header={t(\"Communication_CheckNow\")}\r\n                                                renderer={handleCheckNow}\r\n                                            ></DataTable.Column>\r\n                                            {Array.isArray(deviceCommunicationStatusData) &&\r\n                                                deviceCommunicationStatusData.length > pageSize ? (\r\n                                                <DataTable.Pagination />) : (\"\")}\r\n                                        </DataTable>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </Accordion.Content>\r\n                        </Accordion>\r\n                    )\r\n                }\r\n\r\n                <br></br>\r\n                <Accordion>\r\n                    <Accordion.Content\r\n                        className=\"attributeAccordian\"\r\n                        title={isEnterpriseNode ? t(\"ServicesInfo_EnterprisePageTitle\") : t(\"ServicesInfo_lblPageTitle\")}>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6 detailsTable\">\r\n                                {\r\n                                    (Array.isArray(serverStatus)) ?\r\n                                        serverStatus.map((serverData, index) =>\r\n                                            <DataTable\r\n                                                data={[serverData]}\r\n                                                showHeader={index === 0 ? true : false}\r\n                                            >\r\n                                                <DataTable.Column\r\n                                                    initialWidth=\"30%\"\r\n                                                    className=\"compColHeight\"\r\n                                                    header={t(\"ServiceInfo_ServerName\")}\r\n                                                    renderer={handleServerNameColumn}>\r\n                                                </DataTable.Column>\r\n\r\n                                                <DataTable.Column\r\n                                                    initialWidth=\"30%\"\r\n                                                    className=\"compColHeight serverStatus\"\r\n                                                    header={t(\"ServiceInfo_ServiceName\")}\r\n                                                    renderer={handleServiceColumn}>\r\n                                                </DataTable.Column>\r\n                                                <DataTable.Column\r\n                                                    initialWidth=\"12%\"\r\n                                                    className=\"compColHeight serverStatus\"\r\n                                                    header={t(\"ServiceInfo_ServiceStatus\")}\r\n                                                    renderer={handleRunningStatusColumn}>\r\n                                                </DataTable.Column>\r\n\r\n                                            </DataTable>\r\n                                        ) : null\r\n                                }\r\n                            </div>\r\n                            <div className=\"col-6 detailsTable\">\r\n                                <DataTable data={serverStorageStatus} showHeader={true}>\r\n                                    <DataTable.Column\r\n                                        initialWidth=\"40%\"\r\n                                        header={t(\"ServiceInfo_ServerName\")}\r\n                                        renderer={(cellData) => cellData.rowData.ServerName}>\r\n                                    </DataTable.Column>\r\n                                    <DataTable.Column header={\"Details\"}\r\n                                        renderer={handleDBDiskRender}>\r\n                                    </DataTable.Column>\r\n\r\n                                </DataTable>\r\n                            </div>\r\n                        </div>\r\n                    </Accordion.Content>\r\n                </Accordion>\r\n\r\n                <br></br>\r\n                {(isDCHEnable) ? (\r\n                    <Accordion>\r\n                        <Accordion.Content\r\n                            className=\"attributeAccordian\"\r\n                            title={t(\"DCHSystemStatus\")}>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-8 detailsTable\">\r\n                                    <DataTable\r\n                                        data={externalSystemStatusData}>\r\n                                        <DataTable.Column\r\n                                            initialWidth=\"30%\"\r\n                                            className=\"compColHeight\"\r\n                                            key=\"SystemType\"\r\n                                            field=\"SystemType\"\r\n                                            header={t(\"ShareholderDetails_ExternalSystem\")}\r\n                                            editFieldType=\"text\">\r\n                                        </DataTable.Column>\r\n                                        <DataTable.Column\r\n                                            initialWidth=\"10%\"\r\n                                            className=\"compColHeight\"\r\n                                            header={t(\"Communication_RunningStatus\")}\r\n                                            renderer={handleExternalSystemStatus}>\r\n                                        </DataTable.Column>\r\n                                    </DataTable>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </Accordion.Content>\r\n                    </Accordion>\r\n\r\n                ) : (\"\")\r\n                }\r\n                {(isArchiveEnable) ? (\r\n                    <div>\r\n                        <div className=\"row compartmentRow\">\r\n                            <div className=\"col col-md-8 col-lg-9 col col-xl-9\">\r\n                                <h4>{t(\"VWSySArchiveSystemHeader\")}</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <InputLabel\r\n                                fluid\r\n                                label={t(\"vwSysLastArchivedTime\") + \" : \" + lastArchivedTime}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ) : (\"\")\r\n                }\r\n                {(isTWICEnable) ? (\r\n                    <div>\r\n                        <div className=\"row compartmentRow\">\r\n                            <div className=\"col col-md-8 col-lg-9 col col-xl-9\">\r\n                                <h4>{t(\"VWSySTWICStatusHeader\")}</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <InputLabel\r\n                                fluid\r\n                                label={t(\"TWICLastDownloadedTime\") + \" : \" + twicRuntimeValue}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ) : (\"\")\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport lodash from \"lodash\";\r\nimport { ViewSystemStatusDetails } from \"../../UIBase/Details/ViewSystemStatusDetails\";\r\n\r\nclass ViewSystemStatusComposite extends Component {\r\n  refreshTimer = null;\r\n  state = {\r\n    isReadyToRender: false,\r\n    deviceCommunicationStatusData: [],\r\n    isArchiveEnable: false,\r\n    isDCHEnable: false,\r\n    isTWICEnable: false,\r\n    externalSystemStatusData: [],\r\n    lastArchivedTime: null,\r\n    twicRuntimeValue: null,\r\n    serverStatus: [],\r\n    lastUpdatedTime: new Date().toLocaleDateString() + \" \" + new Date().toLocaleTimeString(),\r\n    terminalCommunicationStatusData: [],\r\n    storageStatus: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      if (this.props.userDetails.EntityResult.IsEnterpriseNode)\r\n        this.getTerminalCommunicationStatus();\r\n      else this.getDeviceCommunicationStatusList();\r\n      this.getServerStatus();\r\n      this.getStorageStatus();\r\n      if (!this.props.userDetails.EntityResult.IsEnterpriseNode)\r\n        this.getLookUpData();\r\n      this.getTWICEnable();\r\n    } catch (error) {\r\n      console.log(\r\n        \"ViewSystemStatusComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stopRefreshTimer();\r\n  }\r\n\r\n  startRefreshTimer = () => {\r\n    this.refreshTimer = setInterval(() => {\r\n      if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n        this.getTerminalCommunicationStatus();\r\n      } else {\r\n        this.getDeviceCommunicationStatusList();\r\n      }\r\n      this.getServerStatus();\r\n      this.getStorageStatus();\r\n    }, 30000);\r\n  };\r\n\r\n  stopRefreshTimer = () => {\r\n    if (this.refreshTimer !== null) {\r\n      clearInterval(this.refreshTimer);\r\n    }\r\n  };\r\n\r\n  getDeviceCommunicationStatusList() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetSystemDeviceStatus,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        this.stopRefreshTimer();\r\n        if (result.IsSuccess === true) {\r\n          var currrentDatetime =\r\n            new Date().toLocaleDateString() +\r\n            \" \" +\r\n            new Date().toLocaleTimeString();\r\n          this.setState({\r\n            deviceCommunicationStatusData: result.EntityResult.Table,\r\n            isReadyToRender: true,\r\n            lastUpdatedTime: currrentDatetime,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            deviceCommunicationStatusData: [],\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\r\n            \"Error in getDeviceCommunicationStatusList:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n        this.startRefreshTimer();\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ViewSystemStatusComposite:Error occured on getDeviceCommunicationStatusList\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTerminalCommunicationStatus() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetTerminalCommunicationStatus,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        this.stopRefreshTimer();\r\n        if (result.IsSuccess === true) {\r\n          var currrentDatetime =\r\n            new Date().toLocaleDateString() +\r\n            \" \" +\r\n            new Date().toLocaleTimeString();\r\n          this.setState({\r\n            terminalCommunicationStatusData: result.EntityResult.Table,\r\n            isReadyToRender: true,\r\n            lastUpdatedTime: currrentDatetime,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            terminalCommunicationStatusData: [],\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\r\n            \"Error in getTerminalCommunicationStatus:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n        this.startRefreshTimer();\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ViewSystemStatusComposite:Error occured on getTerminalCommunicationStatus\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getServerStatus() {\r\n    axios(\r\n      RestAPIs.GetServerStatus,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          result.EntityResult.forEach((serverData) => {\r\n            let serviceName = [];\r\n            let serviceStaus = [];\r\n            Object.keys(serverData.ServiceStatusList).forEach((key) => {\r\n              serviceName.push({ ServiceName: key });\r\n              serviceStaus.push({\r\n                ServiceStaus: serverData.ServiceStatusList[key],\r\n              });\r\n            });\r\n            serverData.ServiceName = serviceName;\r\n            serverData.ServiceStaus = serviceStaus;\r\n          });\r\n          this.setState({ serverStatus: result.EntityResult });\r\n        } else {\r\n          console.log(\"Error in getServerStatus: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"ViewSystemStatusComposite: Error occurred on getServerStatus\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  getStorageStatus = () => {\r\n    try {\r\n      axios(RestAPIs.GetServerStorageStatus,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        ))\r\n        .then((response) => {\r\n          let storageStatus = [];\r\n          if (response.data.IsSuccess && Array.isArray(response.data.EntityResult)) {\r\n            response.data.EntityResult.forEach((val) => {\r\n              storageStatus.push({\r\n                ServerName: val.Key,\r\n                StorageDetails: val.Value\r\n              });\r\n            });\r\n\r\n            this.setState({ storageStatus: storageStatus });\r\n          }\r\n          else {\r\n            console.log(\"Error in fetching storage details\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error in fetching storage details: \", error);\r\n        })\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in getStorageStatus: \", error);\r\n    }\r\n  }\r\n\r\n  getLookUpData() {\r\n    axios(\r\n      RestAPIs.GetLookUpData + \"?LookUpTypeCode=DCHSystems\",\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult.DCHSystemsEnabled === \"True\") {\r\n            this.setState({ isDCHEnable: true }, () => {\r\n              this.GetExternalSystemStatusList();\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"ViewSystemStatusComposite: Error occurred on getLookUpData\",\r\n          error\r\n        );\r\n      });\r\n\r\n    axios(\r\n      RestAPIs.GetLookUpData + \"?LookUpTypeCode=ArchiveSystemConfiguration\",\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult.ArchiveEnabled === \"True\") {\r\n            this.setState({ isArchiveEnable: true }, () => {\r\n              this.GetArchiveSystemStatus();\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"ViewSystemStatusComposite: Error occurred on getLookUpData\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  getTWICEnable() {\r\n    if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=TWIC\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult.EnableTWICFeature === \"TRUE\") {\r\n              this.setState({ isTWICEnable: true }, () => {\r\n                this.GetTwicServiceStatus();\r\n              });\r\n            }\r\n          } else {\r\n            console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"ViewSystemStatusComposite: Error occurred on getLookUpData\",\r\n            error\r\n          );\r\n        });\r\n    } else {\r\n      axios(\r\n        RestAPIs.IsTWICEnabled,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult === \"true\") {\r\n              this.setState({ isTWICEnable: true }, () => {\r\n                this.GetTwicServiceStatus();\r\n              });\r\n            }\r\n          } else {\r\n            console.log(\"Error in getTWICEnable: \", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"ViewSystemStatusComposite: Error occurred on getTWICEnable\",\r\n            error\r\n          );\r\n        });\r\n    }\r\n  }\r\n\r\n  GetExternalSystemStatusList() {\r\n    axios(\r\n      RestAPIs.GetExternalSystemStatusList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            externalSystemStatusData: result.EntityResult,\r\n          });\r\n        } else {\r\n          console.log(\r\n            \"Error in GetExternalSystemStatusList: \",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"ViewSystemStatusComposite: Error occurred on GetExternalSystemStatusList\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  GetArchiveSystemStatus() {\r\n    axios(\r\n      RestAPIs.GetArchiveSystemStatus,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            lastArchivedTime: result.EntityResult,\r\n          });\r\n        } else {\r\n          console.log(\"Error in GetArchiveSystemStatus: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"ViewSystemStatusComposite: Error occurred on GetArchiveSystemStatus\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  GetTwicServiceStatus() {\r\n    axios(\r\n      RestAPIs.GetTwicServiceStatus,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            twicRuntimeValue: result.EntityResult,\r\n          });\r\n        } else {\r\n          console.log(\"Error in GetTwicServiceStatus: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"ViewSystemStatusComposite: Error occurred on GetTwicServiceStatus\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  checkDeviceStatus = (data) => {\r\n    let deviceCommunicationStatusData = lodash.cloneDeep(\r\n      this.state.deviceCommunicationStatusData\r\n    );\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"CommStatus_Title\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.CheckDeviceStaus +\r\n      \"?srNo=\" +\r\n      data.SlNo +\r\n      \"&deviceCode=\" +\r\n      data.DeviceCode +\r\n      \"&deviceType=\" +\r\n      data.DeviceType +\r\n      \"&deviceModel=\" +\r\n      data.DeviceModel,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          deviceCommunicationStatusData[\r\n            data.SlNo - 1\r\n          ].CommStatus_Visible = true;\r\n          if (\r\n            result.EntityResult !== null &&\r\n            result.EntityResult !== undefined\r\n          ) {\r\n            var commStatus =\r\n              result.EntityResult.CommStatus === \"true\" ? true : false;\r\n            deviceCommunicationStatusData[data.SlNo - 1].CommStatus =\r\n              commStatus;\r\n            deviceCommunicationStatusData[data.SlNo - 1].CommStatus_Tooltip =\r\n              result.EntityResult.CommStatus_Tooltip;\r\n            this.setState({ deviceCommunicationStatusData });\r\n          }\r\n        } else {\r\n          deviceCommunicationStatusData[\r\n            data.SlNo - 1\r\n          ].CommStatus_Visible = true;\r\n          deviceCommunicationStatusData[data.SlNo - 1].CommStatus = false;\r\n          this.setState({ deviceCommunicationStatusData });\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"ViewSystemStatusComposite: Error occurred on getTWICEnable\",\r\n          error\r\n        );\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            <ErrorBoundary>\r\n              <TMUserActionsComposite\r\n                breadcrumbItem={this.props.activeItem}\r\n                shrVisible={false}\r\n                handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n                addVisible={false}\r\n                deleteVisible={false}\r\n              ></TMUserActionsComposite>\r\n            </ErrorBoundary>\r\n            {this.state.isReadyToRender ? (\r\n              <div>\r\n                <ViewSystemStatusDetails\r\n                  lastUpdatedTime={this.state.lastUpdatedTime}\r\n                  deviceCommunicationStatusData={\r\n                    this.state.deviceCommunicationStatusData\r\n                  }\r\n                  pageSize={\r\n                    this.props.userDetails.EntityResult.PageAttibutes\r\n                      .WebPortalListPageSize\r\n                  }\r\n                  serverStatus={this.state.serverStatus}\r\n                  isDCHEnable={this.state.isDCHEnable}\r\n                  externalSystemStatusData={this.state.externalSystemStatusData}\r\n                  isArchiveEnable={this.state.isArchiveEnable}\r\n                  lastArchivedTime={this.state.lastArchivedTime}\r\n                  isTWICEnable={this.state.isTWICEnable}\r\n                  twicRuntimeValue={this.state.twicRuntimeValue}\r\n                  checkDeviceStatus={this.checkDeviceStatus}\r\n                  terminalCommunicationStatusData={\r\n                    this.state.terminalCommunicationStatusData\r\n                  }\r\n                  isEnterpriseNode={\r\n                    this.props.userDetails.EntityResult.IsEnterpriseNode\r\n                  }\r\n                  serverStorageStatus={this.state.storageStatus}\r\n                ></ViewSystemStatusDetails>\r\n              </div>\r\n            ) : (\r\n              <LoadingPage message=\"Loading\"></LoadingPage>\r\n            )}\r\n            <ErrorBoundary>\r\n              <ToastContainer\r\n                hideProgressBar={true}\r\n                closeOnClick={false}\r\n                closeButton={true}\r\n                newestOnTop={true}\r\n                position=\"bottom-right\"\r\n                toastClassName=\"toast-notification-wrap\"\r\n              />\r\n            </ErrorBoundary>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ViewSystemStatusComposite);\r\n\r\nViewSystemStatusComposite.propTypes = {\r\n  activeItem: PropTypes.object,\r\n};\r\n","import React from \"react\";\r\nimport { Notification } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { delimiter } from \"./Constants\";\r\nimport PropTypes from \"prop-types\";\r\nNotifyEvent.propTypes = {\r\n  notificationMessage: PropTypes.shape({\r\n    messageType: PropTypes.oneOf([\"success\", \"critical\"]),\r\n    message: PropTypes.string,\r\n    messageResultDetails: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        keyFields: PropTypes.arrayOf(PropTypes.string),\r\n        KeyValues: PropTypes.arrayOf(PropTypes.string),\r\n        isSuccess: PropTypes.bool,\r\n        errorMessage: PropTypes.string,\r\n      })\r\n    ),\r\n  }).isRequired,\r\n  //closeToast: PropTypes.bool,\r\n};\r\n// notifiaionMessage={messageType:\"success/critical\",message:\"title of message\",\r\n// messageResultDetails:[{keyFields:[Array Of Key Codes],KeyValues:[Array of Key Values],isSuccess,ErrorMessage}]}\r\nexport default function NotifyEvent({ notificationMessage }) {\r\n\r\n  function getLocalizedMessage(message) {\r\n    try {\r\n      let messageOptions = message.split(delimiter);\r\n      return messageOptions[0];\r\n    } catch (error) {\r\n      console.log(error);\r\n      return \"\";\r\n    }\r\n  }\r\n  function getLocalizedMessageParameters(message) {\r\n    try {\r\n      let messageOptions = message.split(delimiter);\r\n      messageOptions.splice(0, 1);\r\n      return messageOptions;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <Notification\r\n          className=\"toast-notification\"\r\n          severity={notificationMessage.messageType}\r\n          // onCloseClick={closeToast}\r\n          hasIcon={true}\r\n          title={t(notificationMessage.message)}\r\n        //onDetailsClick={() => alert(details)}\r\n        >\r\n          {notificationMessage.messageResultDetails.map((messageResult) => {\r\n            var entityKeyDetails = \"\";\r\n            if (messageResult.keyFields.length > 0) {\r\n              for (var i = 0; i < messageResult.keyFields.length; i++) {\r\n                entityKeyDetails =\r\n                  entityKeyDetails +\r\n                  t(messageResult.keyFields[i]) +\r\n                  \" : \" +\r\n                  messageResult.keyValues[i] +\r\n                  \", \";\r\n              }\r\n            }\r\n            return (\r\n              <div>\r\n                <span\r\n                  style={{ color: messageResult.isSuccess ? \"#7eb338\" : \"#F15A4F\" }}\r\n                >\r\n                  {entityKeyDetails}\r\n                  {messageResult.isSuccess\r\n                    ? t(\"NotificationList_MessageType_Success\")\r\n                    : t(\"NotificationList_MessageType_Failure\") +\r\n                    \" : \" +\r\n                    t(\r\n                      getLocalizedMessage(messageResult.errorMessage),\r\n                      getLocalizedMessageParameters(\r\n                        messageResult.errorMessage\r\n                      )\r\n                    )}\r\n                </span>\r\n                <br></br>\r\n              </div>\r\n            );\r\n          })}\r\n        </Notification>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n"],"names":["TMUserActions","_ref","operationsVisibilty","breadcrumbItem","shareholders","selectedShareholder","onShareholderChange","onDelete","onAdd","popUpContent","shrVisible","handleBreadCrumbClick","addVisible","deleteVisible","modelOpen","setModelOpen","useState","popUpOpen","setPopUpOpen","handlePopUpClick","add","length","_jsxs","className","style","alignItems","padding","children","_jsx","marginTop","ErrorBoundary","TranslationConsumer","t","Breadcrumb","parents","map","parentitem","Item","onClick","undefined","itemCode","localizedKey","justifyContent","_Fragment","Select","placeholder","value","disabled","shareholder","options","Utilities","onChange","Modal","open","size","Content","Footer","Button","type","content","float","display","Popup","position","element","Icon","root","name","color","on","onMouseLeave","VerticalMenu","Header","item","popUpMenuClick","menuItem","fieldName","fieldValue","marginLeft","delete","defaultProps","itemName","itemProps","isComponent","TMUserActionsComposite","ViewSystemStatusDetails","lastUpdatedTime","deviceCommunicationStatusData","pageSize","serverStatus","isDCHEnable","externalSystemStatusData","isArchiveEnable","lastArchivedTime","isTWICEnable","twicRuntimeValue","checkDeviceStatus","terminalCommunicationStatusData","isEnterpriseNode","serverStorageStatus","useTranslation","handleServerStatus","cellData","rowData","ServiceStaus","src","alt","title","handleServiceColumn","DataTable","data","ServiceName","showHeader","Column","initialWidth","field","handleRunningStatusColumn","renderer","handleServerNameColumn","ServerType","ServerName","ListOfServerStatusInfo","serverData","statusCode","ToolTip","Type","Accordion","AccordionContent","search","searchPlaceholder","header","TerminalStatus","TerminalStatus_Tooltip","TerminalCode","editFieldType","ProcessEnableStauts","ProcessEnableStauts_Tooltip","ProcessRunningStatus","RunningStatus_Tooltip","Active","CommStatus_Visible","CommStatus","CommStatus_Tooltip","ExeStatus","RunningStatus_Visible","RunningStatus","textTransform","btnCheck_Enabled","Array","isArray","Pagination","index","React","Object","keys","StorageDetails","key","Color","Name","Value","Status","Tooltip","InputLabel","fluid","label","ViewSystemStatusComposite","Component","constructor","arguments","refreshTimer","state","isReadyToRender","Date","toLocaleDateString","toLocaleTimeString","storageStatus","startRefreshTimer","this","setInterval","props","userDetails","EntityResult","IsEnterpriseNode","getTerminalCommunicationStatus","getDeviceCommunicationStatusList","getServerStatus","getStorageStatus","stopRefreshTimer","clearInterval","axios","RestAPIs","tokenDetails","tokenInfo","then","response","IsSuccess","forEach","val","push","Key","setState","console","log","catch","error","lodash","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","SlNo","DeviceCode","DeviceType","DeviceModel","result","commStatus","ErrorList","toast","NotifyEvent","notificationMessage","autoClose","componentDidMount","getLookUpData","getTWICEnable","componentWillUnmount","currrentDatetime","Table","serviceName","serviceStaus","ServiceStatusList","DCHSystemsEnabled","GetExternalSystemStatusList","ArchiveEnabled","GetArchiveSystemStatus","EnableTWICFeature","GetTwicServiceStatus","render","activeItem","PageAttibutes","WebPortalListPageSize","LoadingPage","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","toastClassName","connect","getUserDetails","TokenAuth","getLocalizedMessage","split","delimiter","getLocalizedMessageParameters","messageOptions","splice","Notification","severity","hasIcon","messageResult","entityKeyDetails","i"],"sourceRoot":""}