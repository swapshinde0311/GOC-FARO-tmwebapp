{"version":3,"file":"static/js/2636.b9b8e9c5.chunk.js","mappings":"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","sources":["Components/Composite/Common/TMDetailsKPILayout.jsx","Components/UIBase/Details/ShareholderDetails.jsx","Components/Composite/Details/ShareholderDetailsComposite.jsx","Components/UIBase/Common/AssociatedTerminals.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/functionalUtilities.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nexport default function TMDetailsKPILayout({\r\n    KPIList,\r\n    pageName,\r\n    rowHeight,\r\n    widgetHeight,\r\n    isDraggable,\r\n    isResizable,\r\n    kpiDisplayTopBreakpoint\r\n}) {\r\n    const [KPIDisplays, setKPIDisplays] = useState(1);\r\n\r\n    const kpiDiv = React.useRef(null);\r\n\r\n    const hideKpis = () => {\r\n        let currentScrollPos = window.pageYOffset;\r\n        let KPIDisplay = KPIDisplays;\r\n\r\n        // hide kpis based on div position to top of the window \r\n        if (kpiDiv.current && kpiDiv.current.getBoundingClientRect().top < kpiDisplayTopBreakpoint) {\r\n            KPIDisplay = 0;\r\n        }\r\n        // show the kpis once at top of the screen\r\n        else if (currentScrollPos === 0) {\r\n            KPIDisplay = 1\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n\r\n        setKPIDisplays(KPIDisplay);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            window.addEventListener(\"scroll\", hideKpis);\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // remove listener on unmount\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", hideKpis)\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div ref={kpiDiv}>\r\n            {KPIDisplays === 1 ? <TranslationConsumer>\r\n                {(t) => (\r\n                    <div style={{ marginTop: \"6px\" }}>\r\n                        <ErrorBoundary>\r\n                            <KPIDashboardLayout\r\n                                kpiList={KPIList}\r\n                                isDraggable={isDraggable}\r\n                                isResizable={isResizable}\r\n                                rowHeight={rowHeight}\r\n                                widgetHeight={widgetHeight}\r\n                                pageName={pageName}\r\n                            ></KPIDashboardLayout>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n\r\n                )}\r\n            </TranslationConsumer> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nTMDetailsKPILayout.propTypes = {\r\n    kpiDisplayTopBreakpoint: PropTypes.number\r\n}\r\n\r\nTMDetailsKPILayout.defaultProps = {\r\n    kpiDisplayTopBreakpoint: 100\r\n}","import React from \"react\";\r\nimport { Select, Input, Checkbox, Icon, Accordion } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { AssociatedTerminals } from \"../Common/AssociatedTerminals\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { getOptionsWithSelect } from \"../../../JS/functionalUtilities\";\r\n\r\nShareholderDetails.propTypes = {\r\n    shareholder: PropTypes.object.isRequired,\r\n    modShareholder: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    modAttributeMetaDataList: PropTypes.array.isRequired,\r\n    attributeValidationErrors: PropTypes.array.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    onExternalSystemCodeChange: PropTypes.func.isRequired,\r\n    onActiveStatusChange: PropTypes.func.isRequired,\r\n    onAllTerminalsChange: PropTypes.func.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        terminalCodes: PropTypes.array,\r\n\r\n    }).isRequired,\r\n    isEnterpriseNode: PropTypes.bool.isRequired,\r\n    isDCHEnabled: PropTypes.bool.isRequired,\r\n    isSealingEnabled: PropTypes.bool.isRequired,\r\n    handleAttributeDataChange: PropTypes.func.isRequired,\r\n}\r\n\r\nShareholderDetails.defaultProps = {\r\n    listOptions: { terminalCodes: [], ExternalSystemInfo: [], SealCodes: [] },\r\n    isEnterpriseNode: false, isDCHEnabled: false, isSealingEnabled: false\r\n}\r\n\r\nexport function ShareholderDetails({\r\n    shareholder,\r\n    modShareholder,\r\n    validationErrors,\r\n    onFieldChange,\r\n    onActiveStatusChange,\r\n    onAllTerminalsChange,\r\n    listOptions,\r\n    isEnterpriseNode,\r\n    onExternalSystemCodeChange,\r\n    isDCHEnabled,\r\n    modAttributeMetaDataList,\r\n    attributeValidationErrors,\r\n    handleAttributeDataChange,\r\n    isSealingEnabled\r\n}) {\r\n    const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n        let attributeValidation = [];\r\n        attributeValidation = attributeValidationErrors.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n        })\r\n        return attributeValidation.attributeValidationErrors;\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modShareholder.ShareholderCode}\r\n                                indicator=\"required\"\r\n                                disabled={shareholder.ShareholderCode !== \"\"}\r\n                                onChange={(data) => onFieldChange(\"ShareholderCode\", data)}\r\n                                label={t(\"ShareholderDetails_Code\")}\r\n                                error={t(validationErrors.ShareholderCode)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modShareholder.ShareholderName}\r\n                                indicator=\"required\"\r\n                                onChange={(data) => onFieldChange(\"ShareholderName\", data)}\r\n                                label={t(\"ShareholderDetails_Name\")}\r\n                                error={t(validationErrors.ShareholderName)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        {\r\n                            isSealingEnabled ? (<div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Select\r\n                                    fluid\r\n                                    placeholder={t(\"Common_Select\")}\r\n                                    label={t(\"ShareholderDetails_SealId\")}\r\n                                    value={modShareholder.SealCode}\r\n                                    options={getOptionsWithSelect(\r\n                                        listOptions.SealCodes,\r\n                                        t(\"Common_Select\")\r\n                                    )}\r\n                                    onChange={(data) => onFieldChange(\"SealCode\", data)}\r\n                                    reserveSpace={false}\r\n                                    search={true}\r\n                                    noResultsMessage={t(\"noResultsMessage\")}\r\n                                />\r\n                            </div>) : (\"\")\r\n                        }\r\n\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modShareholder.Description}\r\n                                onChange={(data) => onFieldChange(\"Description\", data)}\r\n                                label={t(\"ShareholderDetails_Description\")}\r\n                                error={t(validationErrors.Description)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(`ShareholderDetails_Status`)}\r\n                                value={modShareholder.Active}\r\n                                options={[\r\n                                    { text: t(\"ViewShipment_Ok\"), value: true },\r\n                                    { text: t(\"ViewShipmentStatus_Inactive\"), value: false },\r\n                                ]}\r\n                                onChange={(data) => onActiveStatusChange(data)}\r\n                                error={t(validationErrors.Active)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modShareholder.Remarks}\r\n                                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                                label={t(\"ShareholderDetails_Remarks\")}\r\n                                error={t(validationErrors.Remarks)}\r\n                                indicator={modShareholder.Active !== shareholder.Active ? \"required\" : \"\"}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        {\r\n                            isEnterpriseNode ? (\r\n                                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                    <AssociatedTerminals\r\n                                        terminalList={listOptions.terminalCodes}\r\n                                        selectedTerminal={modShareholder.TerminalCodes}\r\n                                        validationError={t(validationErrors.TerminalCodes)}\r\n                                        onFieldChange={onFieldChange}\r\n                                        onCheckChange={onAllTerminalsChange}\r\n                                    ></AssociatedTerminals>\r\n                                </div>\r\n                            ) : (\"\")\r\n                        }\r\n                        {\r\n                            isDCHEnabled ? (\r\n                                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                                        <div style={{ width: \"60%\" }}>\r\n                                            <Select\r\n                                                fluid\r\n                                                placeholder={t(\"Common_Select\")}\r\n                                                label={t(\"ShareholderDetails_ExternalSystem\")}\r\n                                                value={modShareholder.ExternalSystemCode}\r\n                                                options={listOptions.ExternalSystemInfo}\r\n                                                onChange={(data) => onExternalSystemCodeChange(data)}\r\n                                                reserveSpace={false}\r\n                                                search={true}\r\n                                                noResultsMessage={t(\"noResultsMessage\")}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"ddlSelectAll\">\r\n                                            <Checkbox\r\n                                                label={t(\"ShareholderDetails_BypassMode\")}\r\n                                                checked={modShareholder.IsBypass ? true : false}\r\n                                                onChange={(data) => onFieldChange(\"IsBypass\", data)}\r\n                                                disabled={modShareholder.ExternalSystemCode === \"1\"}\r\n                                            />\r\n                                        </div>\r\n                                        <div>\r\n                                            <Icon root=\"common\" title={t(\"Shareholder_BypassTooltip\")} name=\"badge-info\" size=\"medium\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            ) : (\"\")\r\n                        }\r\n                    </div>\r\n                    {\r\n                        modAttributeMetaDataList.length > 0 ?\r\n                        modAttributeMetaDataList.map((attribute) =>\r\n                                <ErrorBoundary>\r\n                                    <Accordion>\r\n                                        <Accordion.Content\r\n                                            className=\"attributeAccordian\"\r\n                                            title={isEnterpriseNode ? (attribute.TerminalCode + ' - ' + t(\"Attributes_Header\")) : (t(\"Attributes_Header\"))}\r\n                                        >\r\n                                            <AttributeDetails\r\n                                                selectedAttributeList={attribute.attributeMetaDataList}\r\n                                                handleCellDataEdit={handleAttributeDataChange}\r\n                                                attributeValidationErrors={handleValidationErrorFilter(attributeValidationErrors, attribute.TerminalCode)}\r\n                                            ></AttributeDetails>\r\n                                        </Accordion.Content>\r\n                                    </Accordion>\r\n                                </ErrorBoundary>\r\n                            ) : null\r\n\r\n                    }\r\n\r\n                </div>\r\n\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { ShareholderDetails } from \"../../UIBase/Details/ShareholderDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { emptyShareholder } from \"../../../JS/DefaultEntities\";\r\nimport { shareholderValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport { functionGroups, fnShareholder, fnKPIInformation } from \"../../../JS/FunctionGroups\";\r\nimport { shareholderAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiShareholderDetail } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass ShareholderDetailsComposite extends Component {\r\n  state = {\r\n    shareholder: lodash.cloneDeep(emptyShareholder),\r\n    modShareholder: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      shareholderValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    saveEnabled: false,\r\n    ExternalSystemList: [],\r\n    SealCodeOptions: [],\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    shareholderKPIList: [],\r\n    showAuthenticationLayout: false,\r\n    tempShareholder: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getAttributes(this.props.selectedRow);\r\n      if (this.props.userDetails.EntityResult.IsDCHEnabled)\r\n        this.getExternalSystemInfo();\r\n      this.getSealCodesInfo();\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.shareholder.ShareholderCode !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getAttributes(nextProps.selectedRow);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getAttributes(shareholderRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [shareholderAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(\r\n                result.EntityResult.shareholder\r\n              ),\r\n            },\r\n            () => this.getShareholder(shareholderRow)\r\n          );\r\n        } else {\r\n          console.log(\"Error in getAttributes:\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var modAttributeMetaDataList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.attributeMetaDataList\r\n        );\r\n        modAttributeMetaDataList = lodash.cloneDeep(\r\n          this.state.modAttributeMetaDataList\r\n        );\r\n        const attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        var modShareholder = lodash.cloneDeep(this.state.modShareholder);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.shareholder.forEach(function (\r\n              attributeMetaData\r\n            ) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                var Attributevalue = modShareholder.Attributes.find(\r\n                  (shareholderAttribute) => {\r\n                    return shareholderAttribute.TerminalCode === terminal;\r\n                  }\r\n                );\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                      (x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      }\r\n                    );\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        modAttributeMetaDataList = [];\r\n        modAttributeMetaDataList = attributesTerminalsList;\r\n        modAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n          modAttributeMetaDataList\r\n        );\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (Array.isArray(attributeMetaDataList.shareholder) && attributeMetaDataList.shareholder.length > 0) {\r\n        this.terminalSelectionChange([\r\n          attributeMetaDataList.shareholder[0].TerminalCode,\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getShareholder(shareholderRow) {\r\n    emptyShareholder.TerminalCodes =\r\n      this.props.terminalCodes.length === 1\r\n        ? [...this.props.terminalCodes]\r\n        : [];\r\n\r\n    if (shareholderRow.Common_Code === undefined) {\r\n      this.setState(\r\n        {\r\n          shareholder: lodash.cloneDeep(emptyShareholder),\r\n          modShareholder: lodash.cloneDeep(emptyShareholder),\r\n          isReadyToRender: true,\r\n          modAttributeMetaDataList: [],\r\n          shareholderKPIList: [],\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnShareholder\r\n          ),\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            if (this.props.terminalCodes.length === 1) {\r\n              this.terminalSelectionChange(this.props.terminalCodes);\r\n            } else {\r\n              this.terminalSelectionChange([]);\r\n            }\r\n          }\r\n          else {\r\n            this.localNodeAttribute();\r\n          }\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shareholderCode,\r\n        value: shareholderRow.Common_Code,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: shareholderRow.Common_Code,\r\n      keyDataCode: KeyCodes.shareholderCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetShareholder,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          result.EntityResult.ExternalSystemCode = result.EntityResult.ExternalSystemCode.toString();\r\n          this.setState(\r\n            {\r\n              isReadyToRender: true,\r\n              shareholder: lodash.cloneDeep(result.EntityResult),\r\n              modShareholder: lodash.cloneDeep(result.EntityResult),\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnShareholder\r\n              ),\r\n            },\r\n            () => {\r\n              this.getKPIList(result.EntityResult.ShareholderCode);\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                this.terminalSelectionChange(result.EntityResult.TerminalCodes);\r\n              } else {\r\n                this.localNodeAttribute();\r\n              }\r\n            }\r\n          );\r\n        } else {\r\n          this.setState({\r\n            shareholder: lodash.cloneDeep(emptyShareholder),\r\n            modShareholder: lodash.cloneDeep(emptyShareholder),\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in getShareholder:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getShareholder:\", error, shareholderRow);\r\n      });\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modShareholder = lodash.cloneDeep(this.state.modShareholder);\r\n      modShareholder[propertyName] = data;\r\n      this.setState({ modShareholder });\r\n\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (shareholderValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          shareholderValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n\r\n      if (propertyName === \"TerminalCodes\") {\r\n        this.terminalSelectionChange(data);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleExternalSystemCodeChange = (data) => {\r\n    try {\r\n      const modShareholder = lodash.cloneDeep(this.state.modShareholder);\r\n      modShareholder[\"ExternalSystemCode\"] = data;\r\n      if (data === \"1\") {\r\n        modShareholder[\"IsBypass\"] = false;\r\n      } else {\r\n        modShareholder[\"IsBypass\"] = true;\r\n      }\r\n      this.setState({ modShareholder });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on handleExternalSystemCodeChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleAllTerminalsChange = (checked) => {\r\n    try {\r\n      var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      validationErrors[\"TerminalCodes\"] = \"\";\r\n      var terminalCodes = [...this.props.terminalCodes];\r\n      let modShareholder = lodash.cloneDeep(this.state.modShareholder);\r\n      if (checked) modShareholder.TerminalCodes = [...terminalCodes];\r\n      else modShareholder.TerminalCodes = [];\r\n      this.setState({ modShareholder, validationErrors });\r\n      this.terminalSelectionChange(modShareholder.TerminalCodes);\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on handleAllTerminalsChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n      const shareholder = lodash.cloneDeep(this.state.shareholder);\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modShareholder: { ...shareholder },\r\n          selectedCompRow: [],\r\n          validationErrors,\r\n          modAttributeMetaDataList: [],\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange(shareholder.TerminalCodes);\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            this.localNodeAttribute();\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(\r\n          attributeMetaDataList.shareholder\r\n        ),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"handleAttributeValidationError:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleActiveStatusChange = (data) => {\r\n    try {\r\n      const modShareholder = lodash.cloneDeep(this.state.modShareholder);\r\n\r\n      modShareholder.Active = data;\r\n      if (modShareholder.Active !== this.state.shareholder.Active)\r\n        modShareholder.Remarks = \"\";\r\n      this.setState({ modShareholder });\r\n\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (modShareholder.Active === this.state.shareholder.Active) {\r\n        if (modShareholder.Remarks === null || modShareholder.Remarks === \"\") {\r\n          validationErrors.Remarks = \"\";\r\n        }\r\n      }\r\n      this.setState({ validationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on handleActiveStatusChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  saveShareholder = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempShareholder = lodash.cloneDeep(this.state.tempShareholder);\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      tempShareholder.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n      this.state.shareholder.ShareholderCode === \"\"\r\n        ? this.createShareholder(tempShareholder)\r\n        : this.updateShareholder(tempShareholder);\r\n    } catch (error) {\r\n      console.log(\"ShareholderDetailsComposite : Error in saveShareholder\" )\r\n    }\r\n}\r\n  handleSave = () => {\r\n    try {\r\n      //let modShareholder = this.fillAttributeDetails();\r\n      let modShareholder = lodash.cloneDeep(this.state.modShareholder);\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      // this.setState({ saveEnabled: false });\r\n      if (this.validateSave(modShareholder, attributeList)) {\r\n        let tempShareholder = lodash.cloneDeep(modShareholder);\r\n        let showAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n        this.setState({ showAuthenticationLayout, tempShareholder }, () => {\r\n          if (showAuthenticationLayout === false) {\r\n            this.saveShareholder();\r\n          }\r\n        });\r\n      } else this.setState({ saveEnabled: true });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  validateSave(modShareholder, attributeList) {\r\n    var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    Object.keys(shareholderValidationDef).forEach(function (key) {\r\n      validationErrors[key] = Utilities.validateField(\r\n        shareholderValidationDef[key],\r\n        modShareholder[key]\r\n      );\r\n    });\r\n\r\n    if (modShareholder.Active !== this.state.shareholder.Active) {\r\n      if (modShareholder.Remarks === null || modShareholder.Remarks === \"\") {\r\n        validationErrors[\"Remarks\"] = \"ShareholderDetails_RemarksRequired\";\r\n      }\r\n    }\r\n\r\n    if (\r\n      this.props.userDetails.EntityResult.IsEnterpriseNode &&\r\n      this.state.shareholder.ShareholderCode !== \"\"\r\n    ) {\r\n      var isPresent = true;\r\n      let existTermincalCodes = this.state.shareholder.TerminalCodes;\r\n      let newTermincalCodes = modShareholder.TerminalCodes;\r\n      if (existTermincalCodes !== null)\r\n        existTermincalCodes.forEach(function (value) {\r\n          if (isPresent)\r\n            isPresent = newTermincalCodes.some((item) => value === item);\r\n          else return isPresent;\r\n        });\r\n      if (!isPresent) {\r\n        validationErrors[\"TerminalCodes\"] =\r\n          \"ShareholderInfo_TerminalDisassociation\";\r\n      } else {\r\n        validationErrors[\"TerminalCodes\"] = \"\";\r\n      }\r\n    }\r\n\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({ validationErrors, attributeValidationErrors });\r\n\r\n    var returnValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  createShareholder(modShareholder) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.shareholderCode,\r\n        value: modShareholder.ShareholderCode,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.shareholderCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modShareholder,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ShareholderDetails_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ShareholderDetails_Code\"],\r\n          keyValues: [modShareholder.ShareholderCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.CreateShareholder,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnShareholder\r\n              ),\r\n              showAuthenticationLayout: false,\r\n\r\n            },\r\n            () =>\r\n              this.getShareholder({\r\n                Common_Code: modShareholder.ShareholderCode,\r\n              })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnShareholder\r\n            ),\r\n            showAuthenticationLayout: false,\r\n\r\n          });\r\n          console.log(\"Error in createShareholder:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modShareholder, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnShareholder\r\n          ),\r\n          showAuthenticationLayout: false,\r\n\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modShareholder, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  updateShareholder(modShareholder) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.shareholderCode,\r\n        value: modShareholder.ShareholderCode,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.shareholderCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modShareholder,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ShareholderDetails_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ShareholderDetails_Code\"],\r\n          keyValues: [modShareholder.ShareholderCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateShareholder,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnShareholder\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () =>\r\n              this.getShareholder({\r\n                Common_Code: modShareholder.ShareholderCode,\r\n              })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnShareholder\r\n            ),\r\n            showAuthenticationLayout: false,\r\n\r\n          });\r\n          console.log(\"Error in update Shareholder:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modShareholder, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.modify,\r\n            fnShareholder\r\n          ),\r\n          showAuthenticationLayout: false,\r\n\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modShareholder, \"modify\", notification);\r\n      });\r\n  }\r\n\r\n  getExternalSystemInfo() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetExternalSystemInfo,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess) {\r\n          let ExternalSystemList = this.state.ExternalSystemList;\r\n          Object.keys(result.EntityResult).forEach(function (key) {\r\n            ExternalSystemList.push({\r\n              text: result.EntityResult[key],\r\n              value: key,\r\n            });\r\n          });\r\n          this.setState({ ExternalSystemList: ExternalSystemList });\r\n        } else {\r\n          this.setState({ ExternalSystemList: [] });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on get ExternalSystemInfo List\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getSealCodesInfo() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetSealCodes,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let SealCodeOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ SealCodeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getSealCodesInfo:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on getSealCodesInfo List\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[\r\n            attribute.Code\r\n          ] = Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShareholderDetailsComposite:Error occured on handleAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  //Get KPI for Shareholder\r\n  getKPIList(shareholderCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      let objKPIRequestData = {\r\n        PageName: kpiShareholderDetail,\r\n        InputParameters: [{ key: \"ShareholderCode\", value: shareholderCode }],\r\n      };\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              shareholderKPIList: result.EntityResult.ListKPIDetails,\r\n            });\r\n          } else {\r\n            this.setState({ shareholderKPIList: [] });\r\n            console.log(\"Error in shareholder KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Shareholder KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const listOptions = {\r\n      terminalCodes: this.props.terminalCodes,\r\n      ExternalSystemInfo: this.state.ExternalSystemList,\r\n      SealCodes: this.state.SealCodeOptions,\r\n    };\r\n\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"ShareholderDetails_LastUpdated\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modShareholder.LastUpdatedDate\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modShareholder.LastUpdatedDate\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"ShareholderDetails_LastActive\",\r\n        fieldValue:\r\n          this.state.modShareholder.LastActiveTime !== undefined &&\r\n            this.state.modShareholder.LastActiveTime !== null\r\n            ? new Date(\r\n              this.state.modShareholder.LastActiveTime\r\n            ).toLocaleDateString() +\r\n            \" \" +\r\n            new Date(\r\n              this.state.modShareholder.LastActiveTime\r\n            ).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"ShareholderDetails_CreatedDate\",\r\n        fieldValue:\r\n          new Date(this.state.modShareholder.CreatedDate).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modShareholder.CreatedDate).toLocaleTimeString(),\r\n      },\r\n    ];\r\n\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.shareholder.ShareholderCode}\r\n            newEntityName=\"ShareholderDetails_Header\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <TMDetailsKPILayout\r\n          KPIList={this.state.shareholderKPIList}\r\n          pageName=\"ShareholderDetails\"\r\n          rowHeight={175}>\r\n        </TMDetailsKPILayout>\r\n        <ErrorBoundary>\r\n          <ShareholderDetails\r\n            shareholder={this.state.shareholder}\r\n            modShareholder={this.state.modShareholder}\r\n            validationErrors={this.state.validationErrors}\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            onFieldChange={this.handleChange}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            onAllTerminalsChange={this.handleAllTerminalsChange}\r\n            listOptions={listOptions}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            onExternalSystemCodeChange={this.handleExternalSystemCodeChange}\r\n            isDCHEnabled={this.props.userDetails.EntityResult.IsDCHEnabled}\r\n            isSealingEnabled={\r\n              this.props.userDetails.EntityResult.IsSealingEnabled\r\n            }\r\n            onAttributeDataChange={this.handleAttributeDataChange}\r\n          ></ShareholderDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.shareholder.Code === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnShareholder}\r\n            handleOperation={this.saveShareholder}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ShareholderDetailsComposite);\r\n\r\nShareholderDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Select, Checkbox } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nAssociatedTerminals.propTypes = {\r\n  terminalList: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  selectedTerminal: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  validationError: PropTypes.string,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onCheckChange: PropTypes.func.isRequired,\r\n};\r\nAssociatedTerminals.defaultProps = {\r\n  terminalList: [],\r\n  selectedTerminal: [],\r\n  validationError: \"\",\r\n};\r\nexport function AssociatedTerminals({\r\n  terminalList,\r\n  selectedTerminal,\r\n  validationError,\r\n  onFieldChange,\r\n  onCheckChange,\r\n}) {\r\n  //console.log(\"component terminalList\", terminalList);\r\n  if (selectedTerminal === null) selectedTerminal = [];\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <div style={{ width: \"80%\" }}>\r\n            <Select\r\n              fluid\r\n              placeholder={t(\"Common_Select\")}\r\n              label={t(\"TerminalCodes\")}\r\n              value={selectedTerminal}\r\n              multiple={true}\r\n              options={Utilities.transferListtoOptions(terminalList)}\r\n              onChange={(data) => onFieldChange(\"TerminalCodes\", data)}\r\n              error={t(validationError)}\r\n              disabled={terminalList.length === 0}\r\n              reserveSpace={false}\r\n            />\r\n          </div>\r\n          <div className=\"ddlSelectAll\">\r\n            <Checkbox\r\n              label={t(\"Common_All\")}\r\n              checked={\r\n                Array.isArray(selectedTerminal) &&\r\n                selectedTerminal.length === terminalList.length\r\n              }\r\n              onChange={(checked) => onCheckChange(checked)}\r\n            ></Checkbox>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["TMDetailsKPILayout","_ref","KPIList","pageName","rowHeight","widgetHeight","isDraggable","isResizable","kpiDisplayTopBreakpoint","KPIDisplays","setKPIDisplays","useState","kpiDiv","React","hideKpis","currentScrollPos","window","pageYOffset","KPIDisplay","current","getBoundingClientRect","top","useEffect","addEventListener","removeEventListener","_jsx","ref","children","TranslationConsumer","t","style","marginTop","ErrorBoundary","KPIDashboardLayout","kpiList","defaultProps","ShareholderDetails","shareholder","modShareholder","validationErrors","onFieldChange","onActiveStatusChange","onAllTerminalsChange","listOptions","isEnterpriseNode","onExternalSystemCodeChange","isDCHEnabled","modAttributeMetaDataList","attributeValidationErrors","handleAttributeDataChange","isSealingEnabled","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","_jsxs","className","Input","fluid","value","ShareholderCode","indicator","disabled","onChange","data","label","error","reserveSpace","ShareholderName","Select","placeholder","SealCode","options","getOptionsWithSelect","SealCodes","search","noResultsMessage","Description","Active","text","Remarks","AssociatedTerminals","terminalList","terminalCodes","selectedTerminal","TerminalCodes","validationError","onCheckChange","display","justifyContent","width","ExternalSystemCode","ExternalSystemInfo","Checkbox","checked","IsBypass","Icon","root","title","name","size","length","map","attribute","Accordion","Content","AttributeDetails","selectedAttributeList","attributeMetaDataList","handleCellDataEdit","ShareholderDetailsComposite","Component","constructor","arguments","state","lodash","emptyShareholder","Utilities","shareholderValidationDef","isReadyToRender","saveEnabled","ExternalSystemList","SealCodeOptions","shareholderKPIList","showAuthenticationLayout","tempShareholder","handleChange","propertyName","this","setState","undefined","terminalSelectionChange","console","log","handleExternalSystemCodeChange","handleAllTerminalsChange","props","handleReset","Object","keys","forEach","key","selectedCompRow","userDetails","EntityResult","IsEnterpriseNode","handleResetAttributeValidationError","localNodeAttribute","handleActiveStatusChange","saveShareholder","attributeList","Attributes","createShareholder","updateShareholder","handleSave","validateSave","IsWebPortalUser","matchedAttributes","matchedAttributesList","filter","modattribute","Array","isArray","Code","DefaultValue","handleAuthenticationClose","componentDidMount","IsArchived","getAttributes","selectedRow","IsDCHEnabled","getExternalSystemInfo","getSealCodesInfo","componentWillReceiveProps","nextProps","Common_Code","tokenDetails","tokenInfo","shareholderRow","axios","RestAPIs","shareholderAttributeEntity","then","response","result","IsSuccess","getShareholder","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","shareholderAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","push","keyCode","KeyCodes","obj","ShareHolderCode","keyDataCode","toString","FunctionsList","functionGroups","modify","fnShareholder","getKPIList","ErrorList","catch","add","isPresent","existTermincalCodes","newTermincalCodes","some","item","returnValue","values","every","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","onSaved","shareholderCode","view","fnKPIInformation","objKPIRequestData","PageName","kpiShareholderDetail","InputParameters","ListKPIDetails","render","popUpContents","fieldName","fieldValue","Date","LastUpdatedDate","toLocaleDateString","toLocaleTimeString","LastActiveTime","CreatedDate","TMDetailsHeader","entityCode","newEntityName","IsSealingEnabled","onAttributeDataChange","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","multiple","margin","Popup","element","marginLeft","position","List","content","Button","onClick","float","handleAttributeDateValue","convertAttributeDatetoString","chars","split","Dateval","getFullYear","getMonth","slice","getDate","DataType","toLowerCase","Constants","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","INT","LONG","FLOAT","DOUBLE","BOOL","DATETIME","DatePicker","displayFormat","getCurrentDateFormat","showYearSelector","onTextChange","toLocaleString","driverAttributeEntity","carrierAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","ddlOptions","selectOptionText","option","unshift","language","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}