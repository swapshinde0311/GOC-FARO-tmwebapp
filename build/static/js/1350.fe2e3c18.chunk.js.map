{"version":3,"file":"static/js/1350.fe2e3c18.chunk.js","mappings":"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","sources":["Components/UIBase/Details/CustomerStockTransferDetails.jsx","Components/Composite/Details/CustomerStockTransferDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Input, Accordion,Select,Icon } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\n\r\nCustomerStockTransferDetails.propTypes = {\r\n    modCustomerstockTransfer:PropTypes.object.isRequired,\r\n    CustomerAgreementItems: PropTypes.array.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        shareholders: PropTypes.array,\r\n        RequestercustomerOptions: PropTypes.array,\r\n        LendercustomerOptions: PropTypes.array,\r\n        baseProductOptions: PropTypes.array,\r\n        quantityUOMOptions: PropTypes.array,\r\n\r\n\r\n    }).isRequired,\r\n    handleCellDataEdit: PropTypes.func.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    selectedAssociations: PropTypes.array.isRequired,\r\n    handleRowSelectionChange: PropTypes.func.isRequired,\r\n    handleAddAssociation: PropTypes.func.isRequired,\r\n    handleDeleteAssociation: PropTypes.func.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n\r\n}\r\nCustomerStockTransferDetails.defaultProps = {\r\n    listOptions: {\r\n        quantityUOMOptions: [],\r\n        baseProductOptions:[],\r\n        customerOptions: [],\r\n        LendercustomerOptions:[],\r\n        RequestercustomerOptions: [],\r\n        shareholders:[]\r\n    },\r\n};\r\nexport function CustomerStockTransferDetails({\r\n    modCustomerstockTransfer,\r\n    CustomerAgreementItems,\r\n    onFieldChange,\r\n    listOptions,\r\n    handleCellDataEdit,\r\n    handleDeleteAssociation,\r\n    handleAddAssociation,\r\n    handleRowSelectionChange,\r\n    selectedAssociations,\r\nvalidationErrors\r\n}) {\r\n    const [t] = useTranslation();\r\n    const decimalDisplayValues = (cellData) => {\r\n        const { value } = cellData;\r\n        if (typeof value === \"number\") {\r\n            return value.toLocaleString();\r\n        } else {\r\n            return value;\r\n        }\r\n    };\r\n    const handleCustomEditDropDown = (cellData, listOptions) => {\r\n        return (\r\n            <Select\r\n                className=\"selectDropwdown\"\r\n                value={CustomerAgreementItems[cellData.rowIndex][cellData.field]}\r\n                fluid\r\n                options={listOptions}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                indicator=\"required\"\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n            />\r\n        );\r\n    };\r\n    const handleCustomEditTextBox = (cellData) => {\r\n        return (\r\n            <Input\r\n                fluid\r\n                value={CustomerAgreementItems[cellData.rowIndex][cellData.field]}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n            />\r\n        );\r\n    };\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t, index) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                key={index}\r\n                                fluid\r\n                                value={modCustomerstockTransfer.Code}\r\n                                indicator=\"required\"\r\n                                onChange={(data) => onFieldChange(\"Code\", data)}\r\n                                label={t(\"CustomerAgreement_TransferReferenceCode\")}\r\n                                reserveSpace={false}\r\n                                error={t(validationErrors.Code)}\r\n\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder=\"Select\"\r\n                                indicator=\"required\"\r\n                                value={modCustomerstockTransfer.LenderShareholderCode}\r\n                                label={t(\"ExchangeAgreementDetails_lenderShareHolder\")}\r\n                                options={listOptions.shareholders}\r\n                                onChange={(data) => onFieldChange(\"LenderShareholderCode\", data)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                onResultsMessage={t(\"noResultsMessage\")}\r\n                                error={t(validationErrors.LenderShareholderCode)}\r\n\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                indicator=\"required\"\r\n                                label={t(\"CustomerAgreement_FromCustomerCode\")}\r\n                                value={modCustomerstockTransfer.LenderCustomerCode === null ? \"\" : modCustomerstockTransfer.LenderCustomerCode }\r\n                                onChange={(data) => onFieldChange(\"LenderCustomerCode\", data)}\r\n                                options={listOptions.LendercustomerOptions}\r\n                                reserveSpace={false}\r\n                                error={t(validationErrors.LenderCustomerCode)}\r\n\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder=\"Select\"\r\n                                value={modCustomerstockTransfer.RequestorShareholderCode}\r\n                                label={t(\"CustomerAgreement_ToShareholder\")}\r\n                                options={listOptions.shareholders}\r\n                                onChange={(data) => onFieldChange(\"RequestorShareholderCode\", data)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                onResultsMessage={t(\"noResultsMessage\")}\r\n                                indicator=\"required\"\r\n                                error={t(validationErrors.RequestorShareholderCode)}\r\n\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                indicator=\"required\"\r\n                                placeholder=\"Select\"\r\n                                label={t(\"CustomerAgreement_ToCustomer\")}\r\n                                value={modCustomerstockTransfer.RequestorCustomerCode === null ? \"\" : modCustomerstockTransfer.RequestorCustomerCode}\r\n                                onChange={(data) => onFieldChange(\"RequestorCustomerCode\", data)}\r\n                                options={listOptions.RequestercustomerOptions}\r\n                                reserveSpace={false}\r\n                                error={t(validationErrors.RequestorCustomerCode)}\r\n\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                        <div className=\"row compartmentRow\">\r\n                        <h3>{t(\"CustomerAgreement_TransferDetails\")} </h3>\r\n                            <div className=\"col\">\r\n                                <div className=\"compartmentIconContainer\">\r\n                                    <div\r\n                                        onClick={handleAddAssociation}\r\n                                        className=\"compartmentIcon\"\r\n                                    >\r\n                                        <div>\r\n                                            <Icon root=\"common\" name=\"badge-plus\" size=\"medium\" />\r\n                                        </div>\r\n                                        <div className=\"margin_l10\">\r\n                                            <h5 className=\"font14\">{t(\"TrailerInfo_Add\")}</h5>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div\r\n                                        onClick={handleDeleteAssociation}\r\n                                        className=\"compartmentIcon margin_l30\"\r\n                                    >\r\n                                        <div>\r\n                                            <Icon root=\"common\" name=\"delete\" size=\"medium\" />\r\n                                        </div>\r\n                                        <div className=\"margin_l10\">\r\n                                            <h5 className=\"font14\">{t(\"TrailerInfo_Delete\")}</h5>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row marginRightZero tableScroll\">\r\n                                <div className=\"col-12 detailsTable\">\r\n                                    <DataTable\r\n                                        data={CustomerAgreementItems}\r\n                                        selectionMode=\"multiple\"\r\n                                        selection={selectedAssociations}\r\n                                    onSelectionChange={handleRowSelectionChange}\r\n                                        scrollable={true}\r\n                                        scrollHeight=\"320px\"\r\n                                    >\r\n                                        <DataTable.Column\r\n                                            className=\"compColHeight colminWidth\"\r\n                                            key=\"BaseProductCode\"\r\n                                            field=\"BaseProductCode\"\r\n                                            header={t(\"ExchangeAgreementDetailsItem_Product\")}\r\n                                            editFieldType=\"text\"\r\n                                            editable={true}\r\n                                            customEditRenderer={(celldata) =>\r\n                                                handleCustomEditDropDown(\r\n                                                    celldata,\r\n                                                    listOptions.baseProductOptions\r\n                                                )\r\n                                            }\r\n\r\n                                        ></DataTable.Column>\r\n                                        \r\n\r\n                                        <DataTable.Column\r\n                                            className=\"compColHeight colminWidth\"\r\n                                            key=\"Quantity\"\r\n                                            field=\"Quantity\"\r\n                                            header={t(\"ExchangeAgreementDetailsItem_Qty\")}\r\n                                            editable={true}\r\n                                            editFieldType=\"text\"\r\n                                            renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                                            customEditRenderer={handleCustomEditTextBox}\r\n                                        ></DataTable.Column>\r\n                                       \r\n                                        <DataTable.Column\r\n                                            className=\"compColHeight colminWidth\"\r\n                                            key=\"QuantityUOM\"\r\n                                            field=\"QuantityUOM\"\r\n                                            header={t(\"ExchangeAgreementDetailsItem_UOM\")}\r\n                                            //rowHeader={true}\r\n                                            editable={true}\r\n                                            editFieldType=\"text\"\r\n                                        customEditRenderer={(celldata) =>\r\n                                            handleCustomEditDropDown(\r\n                                                celldata,\r\n                                                listOptions.quantityUOMOptions\r\n                                            )\r\n                                        }\r\n                                        ></DataTable.Column>\r\n                                      \r\n                                    </DataTable>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n                        \r\n\r\n                       \r\n                        \r\n                       \r\n\r\n\r\n                </div>\r\n\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n\r\n\r\n\r\n\r\n }","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { emptyCustomerStockTransfer } from \"../../../JS/DefaultEntities\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport { CustomerStockTransferDetails } from \"../../UIBase/Details/CustomerStockTransferDetails\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport { functionGroups, fnCustomerAgreement } from \"../../../JS/FunctionGroups\";\r\nimport { CustomerStockTransferValidationDef } from \"../../../JS/ValidationDef\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass CustomerStockTransferDetailsComposite extends Component { \r\n\r\n    state = {\r\n        customerstockTransfer: lodash.cloneDeep(emptyCustomerStockTransfer),\r\n        validationErrors: Utilities.getInitialValidationErrors(CustomerStockTransferValidationDef),\r\n        modCustomerstockTransfer: {},\r\n        CustomerAgreementItems:[],\r\n        isReadyToRender: false,\r\n        saveEnabled: false,\r\n        LendercustomerOptions: [],\r\n        RequestercustomerOptions:[],\r\n        shareholders: this.getShareholders(),\r\n        baseProductOptions: [],\r\n        quantityUOMOptions:[],\r\n        selectedAssociations: [],\r\n        showAuthenticationLayout: false,\r\n        tempCustomerstockTransfer: {}\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {\r\n            Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n            this.getCustomerStockTransfer(this.props.selectedRow);\r\n            this.getBaseProducts();\r\n            this.GetUOMList();\r\n        } catch (error) {\r\n            console.log(\r\n                \"customertransferDetailsComposite:Error occured on componentDidMount\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        try {\r\n            if (\r\n                this.state.customerstockTransfer.Code !== \"\" &&\r\n                nextProps.selectedRow.CustomerAgreement_TransferReferenceCode === undefined &&\r\n                this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n            ) {\r\n                this.getCustomerStockTransfer(nextProps.selectedRow);\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"customertransferDetailsComposite:Error occured on componentWillReceiveProps\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    getShareholders() {\r\n        return Utilities.transferListtoOptions(\r\n            this.props.userDetails.EntityResult.ShareholderList\r\n        );\r\n    }\r\n    getCustomerList(shareholders, shareholderType) {\r\n        try {\r\n            if (shareholders !== undefined && shareholders !== \"\") {\r\n                axios(\r\n                    RestAPIs.GetCustomerDestinations +\r\n                    \"?ShareholderCode=\" +\r\n                    shareholders +\r\n                    \"&TransportationType=\" +\r\n                    \"\",\r\n                    Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n                ).then((response) => {\r\n                \r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (Array.isArray(result.EntityResult)) {\r\n                        \r\n                            let shareholderCustomers = result.EntityResult.filter(\r\n                                (shareholderCust) =>\r\n                                    shareholderCust.ShareholderCode === shareholders\r\n                            );\r\n                            if (shareholderType === \"RequestorShareholderCode\") {\r\n                                if (shareholderCustomers.length > 0) {\r\n                                    let customerDestinationOptions =\r\n                                        shareholderCustomers[0].CustomerDestinationsList;\r\n                                    let RequestercustomerOptions = [];\r\n                                    if (customerDestinationOptions !== null) {\r\n                                        RequestercustomerOptions = Object.keys(customerDestinationOptions);\r\n                                        RequestercustomerOptions =\r\n                                            Utilities.transferListtoOptions(RequestercustomerOptions);\r\n                                    }\r\n                                    this.setState({ RequestercustomerOptions });\r\n                                }\r\n                            } else if (shareholderType === \"LenderShareholderCode\") {\r\n                                if (shareholderCustomers.length > 0) {\r\n                                    let customerDestinationOptions =\r\n                                        shareholderCustomers[0].CustomerDestinationsList;\r\n                                    let LendercustomerOptions = [];\r\n                                    if (customerDestinationOptions !== null) {\r\n                                        LendercustomerOptions = Object.keys(customerDestinationOptions);\r\n                                        LendercustomerOptions =\r\n                                            Utilities.transferListtoOptions(LendercustomerOptions);\r\n                                    }\r\n                                    this.setState({ LendercustomerOptions });\r\n                                }\r\n                            }\r\n                            else {\r\n                                console.log(\r\n                                    \"CustomerStockTransferDetailsComposite:no customers identified for shareholder\"\r\n                                );\r\n                            }\r\n                        } else {\r\n                            console.log(\r\n                                \"CustomerStockTransferDetailsComposite:customerdestinations not identified for shareholder\"\r\n                            );\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.log(\"error in requestorcustomerlist\",err)\r\n        }\r\n    }\r\n    getBaseProducts() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetAllBaseProduct + \"?TerminalCode=\",\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                \r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (\r\n                            result.EntityResult !== null &&\r\n                            Array.isArray(result.EntityResult)\r\n                        ) {\r\n                            let baseProductOptions = Utilities.transferListtoOptions(\r\n                                result.EntityResult\r\n                            );\r\n                            this.setState({ baseProductOptions });\r\n                        }\r\n                    } else {\r\n                        console.log(\"Error in getBaseProducts:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Error while getting BaseProducts:\", error);\r\n                });\r\n        } catch (err) {\r\n            console.log(\"Error while getting BaseProducts:\", err); \r\n        }\r\n    }\r\n    handleChange = (propertyName, data) => {\r\n        \r\n        try {\r\n            const modCustomerstockTransfer = lodash.cloneDeep(this.state.modCustomerstockTransfer);\r\n            modCustomerstockTransfer[propertyName] = data;\r\n            this.setState({ modCustomerstockTransfer });\r\n            if (propertyName === \"LenderShareholderCode\" ) {\r\n                this.getCustomerList(data,\"LenderShareholderCode\");\r\n            }  if (propertyName === \"RequestorShareholderCode\")\r\n            {\r\n                this.getCustomerList(data,\"RequestorShareholderCode\");\r\n            }\r\n\r\n            const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n            if (CustomerStockTransferValidationDef[propertyName] !== undefined) {\r\n                validationErrors[propertyName] = Utilities.validateField(\r\n                    CustomerStockTransferValidationDef[propertyName],\r\n                    data\r\n                );\r\n                this.setState({ validationErrors });\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"CustomerstocktransferDetailsComposite:Error occured on handleChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    handleCellDataEdit = (newVal, cellData) => {\r\n        try {\r\n            let CustomerAgreementItems = lodash.cloneDeep(this.state.CustomerAgreementItems);\r\n            CustomerAgreementItems[cellData.rowIndex][cellData.field] = newVal;\r\n            this.setState({ CustomerAgreementItems });\r\n        } catch (err) {\r\n            console.log(\"errror in handlecelledit\",err)\r\n        }\r\n    };\r\n    GetUOMList() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetUOMList,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n\r\n                    if (result.IsSuccess === true) {\r\n                        if (result.EntityResult !== null) {\r\n                            let quantityUOMOptions = [];\r\n                            if (Array.isArray(result.EntityResult.VOLUME)) {\r\n                                quantityUOMOptions = Utilities.transferListtoOptions(\r\n                                    result.EntityResult.VOLUME\r\n                                );\r\n                            }\r\n                            if (Array.isArray(result.EntityResult.MASS)) {\r\n                                let massUOMOptions = Utilities.transferListtoOptions(\r\n                                    result.EntityResult.MASS\r\n                                );\r\n                                massUOMOptions.forEach((massUOM) =>\r\n                                    quantityUOMOptions.push(massUOM)\r\n                                );\r\n                            }\r\n\r\n                            this.setState({ quantityUOMOptions });\r\n                        }\r\n                    } else {\r\n                        console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Error while getting GetUOMList:\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"Error while getting GetUOMList:\", error);\r\n        }\r\n    }\r\n    getCustomerStockTransfer(CustomerstockTransferRow) {\r\n        try {\r\n            if (CustomerstockTransferRow.CustomerAgreement_TransferReferenceCode === undefined) {\r\n                this.setState({\r\n                    customerstockTransfer: lodash.cloneDeep(emptyCustomerStockTransfer),\r\n                    modCustomerstockTransfer: lodash.cloneDeep(emptyCustomerStockTransfer),\r\n                    isReadyToRender: true,\r\n                    selectedAttributeList: [],\r\n                    CustomerAgreementItems: [],\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnCustomerAgreement\r\n                    ),\r\n                }\r\n                );\r\n                return;\r\n            }\r\n            var keyCode = [\r\n                {\r\n                    key: KeyCodes.TransferReferenceCode,\r\n                    value: CustomerstockTransferRow.CustomerAgreement_TransferReferenceCode,\r\n                }\r\n            ];\r\n            var obj = {\r\n                TransferReferenceCode: CustomerstockTransferRow.CustomerAgreement_TransferReferenceCode,\r\n                keyDataCode: KeyCodes.TransferReferenceCode,\r\n                KeyCodes: keyCode,\r\n            };\r\n            axios(\r\n                RestAPIs.GetCustomerStockTransfer,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n            \r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    let modCustomerstockTransfer = lodash.cloneDeep(result.EntityResult)\r\n                    this.setState(\r\n                        {\r\n                            isReadyToRender: true,\r\n                            customerstockTransfer: lodash.cloneDeep(result.EntityResult),\r\n                            modCustomerstockTransfer,\r\n                            CustomerAgreementItems: modCustomerstockTransfer.CustomerAgreementItems,\r\n                            saveEnabled: false\r\n                        }, () => {\r\n                            if (modCustomerstockTransfer.RequestorShareholderCode !== undefined) {\r\n                                this.getCustomerList(modCustomerstockTransfer.RequestorShareholderCode, \"RequestorShareholderCode\")\r\n                            }\r\n                            if (modCustomerstockTransfer.LenderShareholderCode !== undefined) {\r\n                                this.getCustomerList(modCustomerstockTransfer.LenderShareholderCode, \"LenderShareholderCode\")\r\n                            }\r\n                        }\r\n                    );\r\n                } else {\r\n                    this.setState({\r\n                        customerstockTransfer: lodash.cloneDeep(emptyCustomerStockTransfer),\r\n                        modCustomerstockTransfer: lodash.cloneDeep(emptyCustomerStockTransfer),\r\n                        isReadyToRender: true,\r\n                    });\r\n                    console.log(\"Error in getcustomerstock:\", result.ErrorList);\r\n                }\r\n            })\r\n                .catch((error) => {\r\n                    console.log(\"Error while getcustomerstock:\", error, CustomerstockTransferRow);\r\n                });\r\n        } catch (err) {\r\n            console.log(\"Error while getcustomerstock:\",err)\r\n        }\r\n    }\r\n    fillDetails(modAssociations) {\r\n        \r\n        let AssociationDetails = [];\r\n        try {\r\n            if (Array.isArray(modAssociations)) {\r\n                modAssociations.forEach((association) => {\r\n                    if (\r\n                        !(\r\n                            association.BaseProductCode === null ||\r\n                            association.BaseProductCode === \"\"\r\n                        ) ||\r\n                        !(association.Quantity === null || association.Quantity === \"\")\r\n                    ) {\r\n                        AssociationDetails.push({\r\n                            BaseProductCode: association.BaseProductCode,\r\n                            Quantity: association.Quantity,\r\n                            QuantityUOM: association.QuantityUOM\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.log(\"Error while making filldetails:\", error);\r\n        }\r\n        return AssociationDetails;\r\n    }\r\n    handleAssociationSelectionChange = (associations) => {\r\n        this.setState({ selectedAssociations: associations });\r\n    };\r\n    handleAddAssociation = () => {\r\n        \r\n                try {\r\n                    let CustomerAgreementItems = lodash.cloneDeep(\r\n                        this.state.CustomerAgreementItems\r\n                    );\r\n                    let newComp = {\r\n                        BaseProductCode:\"\",\r\n                        Quantity: 0,\r\n                        QuantityUOM: \"\",\r\n                       \r\n                    };\r\n                   CustomerAgreementItems.push(newComp);\r\n\r\n                    this.setState({\r\n                        CustomerAgreementItems,\r\n                        selectedAssociations: [],\r\n                    });\r\n                } catch (error) {\r\n                    console.log(\r\n                        \"CustomerstockTransferDetailsComposite:Error occured on handleAddAssociation\",\r\n                        error\r\n                    );\r\n                }\r\n    };\r\n\r\n    handleDeleteAssociation = () => {\r\n        try {\r\n                try {\r\n                    if (\r\n                        this.state.selectedAssociations != null &&\r\n                        this.state.selectedAssociations.length > 0\r\n                    ) {\r\n                        if (\r\n                            this.state.CustomerAgreementItems.length > 0\r\n                        ) {\r\n                            let CustomerAgreementItems = lodash.cloneDeep(\r\n                                this.state.CustomerAgreementItems\r\n                            );\r\n\r\n                            this.state.selectedAssociations.forEach((obj, index) => {\r\n                                CustomerAgreementItems =\r\n                                    CustomerAgreementItems.filter(\r\n                                        (com, cindex) => {\r\n                                            return com.BaseProductCode !== obj.BaseProductCode;\r\n                                        }\r\n                                    );\r\n                            });\r\n\r\n                            this.setState({ CustomerAgreementItems });\r\n                        }\r\n                    }\r\n\r\n                    this.setState({ selectedAssociations: [] });\r\n                } catch (error) {\r\n                    console.log(\r\n                        \"customerstocltransferDetailsComposite:Error occured on handleDeleteAssociation\",\r\n                        error\r\n                    );\r\n                }\r\n        } catch (error) {\r\n            console.log(\"error in handle Delete Association\", error)\r\n        }\r\n    };\r\n    handleReset = () => {\r\n        try {\r\n            const customerstockTransfer = lodash.cloneDeep(this.state.customerstockTransfer);\r\n            this.setState({\r\n                modCustomerstockTransfer: { ...customerstockTransfer },\r\n            });\r\n        } catch (error) {\r\n            console.log(\"CustomerStocktransferDetailsComposite:Error occured on handleReset\", error);\r\n        }\r\n    };\r\n    validateSave(modCustomerstockTransfer) {\r\n        try {\r\n            var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n            Object.keys(CustomerStockTransferValidationDef).forEach(function (key) {\r\n                validationErrors[key] = Utilities.validateField(\r\n                    CustomerStockTransferValidationDef[key],\r\n                    modCustomerstockTransfer[key]\r\n                );\r\n            });\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: [\"CustomerStockTransfer_SavedStatus\"],\r\n                messageResultDetails: [],\r\n            };\r\n            this.setState({ validationErrors });\r\n            var returnValue = true;\r\n            if (returnValue)\r\n                returnValue = Object.values(validationErrors).every(function (value) {\r\n                    return value === \"\";\r\n                });\r\n            if (notification.messageResultDetails.length > 0) {\r\n                this.props.onSaved(this.state.modCustomerstockTransfer, \"update\", notification);\r\n                return false;\r\n            }\r\n            return returnValue;\r\n        } catch (error) {\r\n            console.log(\"Error while Validate Save\", error)\r\n        }\r\n    }\r\n    saveCustomerStockTransfer = () => {\r\n    \r\n        try {\r\n            this.setState({ saveEnabled: false });\r\n            let tempCustomerstockTransfer = lodash.cloneDeep(this.state.tempCustomerstockTransfer);\r\n            tempCustomerstockTransfer.TransferDate = new Date();\r\n            tempCustomerstockTransfer.CustomerAgreementItems = this.fillDetails(this.state.CustomerAgreementItems)\r\n            this.CreateCustomerStockTransfer(tempCustomerstockTransfer)\r\n        } catch (error) {\r\n            console.log(\"CustomerstockTransferDetailsComposite : Error in saveBaseProduct\");\r\n        }\r\n    }\r\n    handleSave = () => {\r\n        \r\n        try {\r\n            let modCustomerstockTransfer = lodash.cloneDeep(this.state.modCustomerstockTransfer);\r\n            modCustomerstockTransfer.TransferDate = new Date();\r\n            modCustomerstockTransfer.CustomerAgreementItems = this.fillDetails(this.state.CustomerAgreementItems)\r\n            this.setState({ saveEnabled: false });\r\n            if (this.validateSave(modCustomerstockTransfer)) {\r\n                let tempCustomerstockTransfer = lodash.cloneDeep(modCustomerstockTransfer);\r\n                tempCustomerstockTransfer.CustomerAgreementItems = this.fillDetails(this.state.CustomerAgreementItems)\r\n                let showAuthenticationLayout =\r\n                    this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n                        ? true\r\n                        : false;\r\n                this.setState({ showAuthenticationLayout, tempCustomerstockTransfer }, () => {\r\n                    if (showAuthenticationLayout === false) {\r\n                        this.saveCustomerStockTransfer();\r\n                    }\r\n                });\r\n\r\n            } else this.setState({ saveEnabled: true });\r\n        } catch (err) {\r\n            console.log(\"error in handleSave\",err)\r\n        }\r\n    }\r\n    CreateCustomerStockTransfer(modCustomerstockTransfer) {\r\n        \r\n        try {\r\n            let obj = {\r\n                Entity: modCustomerstockTransfer,\r\n            };\r\n\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"CustomerStockTransfer_SavedStatus\",\r\n                messageResultDetails: [\r\n                    {\r\n                        keyFields: [\"CustomerAgreement_TransferReferenceCode\"],\r\n                        keyValues: [modCustomerstockTransfer.Code],\r\n                        isSuccess: false,\r\n                        errorMessage: \"\",\r\n                    },\r\n                ],\r\n            };\r\n            axios(\r\n                RestAPIs.CreateCustomerStockTransfer,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    let result = response.data;\r\n                    notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                    notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                    if (result.IsSuccess === true) {\r\n                        this.setState({\r\n                            saveEnabled:false\r\n                        });\r\n                        this.getCustomerStockTransfer({ CustomerAgreement_TransferReferenceCode: modCustomerstockTransfer.Code })\r\n                    } else {\r\n                        notification.messageResultDetails[0].errorMessage =\r\n                            result.ErrorList[0];\r\n                        this.setState({\r\n                            saveEnabled: true,\r\n                        });\r\n                        console.log(\"Error in CustomerstockTransfer:\", result.ErrorList);\r\n                    }\r\n                    this.props.onSaved(modCustomerstockTransfer, \"add\", notification);\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        saveEnabled: true,\r\n                    });\r\n                    notification.messageResultDetails[0].errorMessage = error;\r\n                    this.props.onSaved(modCustomerstockTransfer, \"add\", notification);\r\n                });\r\n        } catch (err) {\r\n            console.log(\"Error in CustomerstockTransfer:\", err);\r\n        }\r\n    }\r\n    handleAuthenticationClose = () => {\r\n        this.setState({\r\n            showAuthenticationLayout: false,\r\n        });\r\n    };\r\n\r\n    \r\n    render() {\r\n        const listOptions = {\r\n            shareholders: this.state.shareholders,\r\n            RequestercustomerOptions: this.state.RequestercustomerOptions,\r\n            LendercustomerOptions:this.state.LendercustomerOptions,\r\n            baseProductOptions: this.state.baseProductOptions,\r\n            quantityUOMOptions: this.state.quantityUOMOptions\r\n\r\n\r\n        };\r\n        return this.state.isReadyToRender ? (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <TMDetailsHeader\r\n                        entityCode={this.state.customerstockTransfer.Code}\r\n                        newEntityName=\"CustomerAgreement_DetailsPageTitle\"\r\n\r\n                    ></TMDetailsHeader>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CustomerStockTransferDetails\r\n                        modCustomerstockTransfer={this.state.modCustomerstockTransfer} \r\n                        CustomerAgreementItems={this.state.CustomerAgreementItems}\r\n                        listOptions={listOptions}\r\n                        handleCellDataEdit={this.handleCellDataEdit}\r\n                        onFieldChange={this.handleChange}\r\n                        handleAddAssociation={this.handleAddAssociation}\r\n                        handleDeleteAssociation={this.handleDeleteAssociation}\r\n                        selectedAssociations={this.state.selectedAssociations}\r\n                        handleRowSelectionChange={\r\n                            this.handleAssociationSelectionChange\r\n                        }\r\n                        validationErrors={this.state.validationErrors}\r\n                    >\r\n                    </CustomerStockTransferDetails>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <TMDetailsUserActions\r\n                        handleBack={this.props.onBack}\r\n                        handleSave={this.handleSave}\r\n                        handleReset={this.handleReset}\r\n                        saveEnabled={this.state.saveEnabled}\r\n                    ></TMDetailsUserActions>\r\n                </ErrorBoundary>\r\n                {this.state.showAuthenticationLayout ? (\r\n                    <UserAuthenticationLayout\r\n                        Username={this.props.userDetails.EntityResult.UserName}\r\n                        functionName={\r\n                                 functionGroups.add\r\n                        }\r\n                        functionGroup={fnCustomerAgreement}\r\n                        handleOperation={this.saveCustomerStockTransfer}\r\n                        handleClose={this.handleAuthenticationClose}\r\n                    ></UserAuthenticationLayout>\r\n                ) : null}\r\n            </div>\r\n        ) : (\r\n            <LoadingPage message=\"Loading\"></LoadingPage>\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CustomerStockTransferDetailsComposite);\r\n\r\nCustomerStockTransferDetailsComposite.propTypes = {\r\n    selectedRow: PropTypes.object.isRequired,\r\n    terminalCodes: PropTypes.array.isRequired,\r\n    onBack: PropTypes.func.isRequired,\r\n    onSaved: PropTypes.func.isRequired,\r\n};","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n"],"names":["CustomerStockTransferDetails","_ref","modCustomerstockTransfer","CustomerAgreementItems","onFieldChange","listOptions","handleCellDataEdit","handleDeleteAssociation","handleAddAssociation","handleRowSelectionChange","selectedAssociations","validationErrors","t","useTranslation","handleCustomEditDropDown","cellData","_jsx","Select","className","value","rowIndex","field","fluid","options","onChange","indicator","reserveSpace","search","noResultsMessage","handleCustomEditTextBox","Input","TranslationConsumer","children","index","_jsxs","Code","data","label","error","placeholder","LenderShareholderCode","shareholders","onResultsMessage","LenderCustomerCode","LendercustomerOptions","RequestorShareholderCode","RequestorCustomerCode","RequestercustomerOptions","onClick","Icon","root","name","size","DataTable","selectionMode","selection","onSelectionChange","scrollable","scrollHeight","Column","header","editFieldType","editable","customEditRenderer","celldata","baseProductOptions","renderer","toLocaleString","decimalDisplayValues","quantityUOMOptions","defaultProps","customerOptions","CustomerStockTransferDetailsComposite","Component","constructor","arguments","state","customerstockTransfer","lodash","emptyCustomerStockTransfer","Utilities","CustomerStockTransferValidationDef","isReadyToRender","saveEnabled","this","getShareholders","showAuthenticationLayout","tempCustomerstockTransfer","handleChange","propertyName","setState","getCustomerList","undefined","console","log","newVal","err","handleAssociationSelectionChange","associations","newComp","BaseProductCode","Quantity","QuantityUOM","push","length","forEach","obj","filter","com","cindex","handleReset","saveCustomerStockTransfer","TransferDate","Date","fillDetails","CreateCustomerStockTransfer","handleSave","validateSave","props","userDetails","EntityResult","IsWebPortalUser","handleAuthenticationClose","componentDidMount","IsArchived","getCustomerStockTransfer","selectedRow","getBaseProducts","GetUOMList","componentWillReceiveProps","nextProps","CustomerAgreement_TransferReferenceCode","tokenDetails","tokenInfo","ShareholderList","shareholderType","axios","RestAPIs","then","response","result","IsSuccess","Array","isArray","shareholderCustomers","shareholderCust","ShareholderCode","customerDestinationOptions","CustomerDestinationsList","Object","keys","ErrorList","catch","VOLUME","MASS","massUOM","CustomerstockTransferRow","selectedAttributeList","FunctionsList","functionGroups","add","fnCustomerAgreement","keyCode","key","KeyCodes","TransferReferenceCode","keyDataCode","modAssociations","AssociationDetails","association","notification","messageType","message","messageResultDetails","returnValue","values","every","onSaved","Entity","keyFields","keyValues","isSuccess","errorMessage","render","ErrorBoundary","TMDetailsHeader","entityCode","newEntityName","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","popUpContents","style","margin","Popup","element","fieldName","fieldValue","marginLeft","position","List","map","content","Content","Button","float","disabled"],"sourceRoot":""}