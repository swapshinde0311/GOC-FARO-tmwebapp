{"version":3,"file":"static/js/8233.b2947518.chunk.js","mappings":"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","sources":["Components/Composite/Common/TMDetailsKPILayout.jsx","Components/UIBase/Details/BayGroupDetails.jsx","Components/Composite/Details/BayGroupDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nexport default function TMDetailsKPILayout({\r\n    KPIList,\r\n    pageName,\r\n    rowHeight,\r\n    widgetHeight,\r\n    isDraggable,\r\n    isResizable,\r\n    kpiDisplayTopBreakpoint\r\n}) {\r\n    const [KPIDisplays, setKPIDisplays] = useState(1);\r\n\r\n    const kpiDiv = React.useRef(null);\r\n\r\n    const hideKpis = () => {\r\n        let currentScrollPos = window.pageYOffset;\r\n        let KPIDisplay = KPIDisplays;\r\n\r\n        // hide kpis based on div position to top of the window \r\n        if (kpiDiv.current && kpiDiv.current.getBoundingClientRect().top < kpiDisplayTopBreakpoint) {\r\n            KPIDisplay = 0;\r\n        }\r\n        // show the kpis once at top of the screen\r\n        else if (currentScrollPos === 0) {\r\n            KPIDisplay = 1\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n\r\n        setKPIDisplays(KPIDisplay);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            window.addEventListener(\"scroll\", hideKpis);\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // remove listener on unmount\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", hideKpis)\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div ref={kpiDiv}>\r\n            {KPIDisplays === 1 ? <TranslationConsumer>\r\n                {(t) => (\r\n                    <div style={{ marginTop: \"6px\" }}>\r\n                        <ErrorBoundary>\r\n                            <KPIDashboardLayout\r\n                                kpiList={KPIList}\r\n                                isDraggable={isDraggable}\r\n                                isResizable={isResizable}\r\n                                rowHeight={rowHeight}\r\n                                widgetHeight={widgetHeight}\r\n                                pageName={pageName}\r\n                            ></KPIDashboardLayout>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n\r\n                )}\r\n            </TranslationConsumer> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nTMDetailsKPILayout.propTypes = {\r\n    kpiDisplayTopBreakpoint: PropTypes.number\r\n}\r\n\r\nTMDetailsKPILayout.defaultProps = {\r\n    kpiDisplayTopBreakpoint: 100\r\n}","import React from \"react\";\r\nimport { Input,Icon } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\n\r\nBayGroupDetails.propTypes = {\r\n    bayGroup: PropTypes.object.isRequired,\r\n    modBayGroup: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    modAvailablebayList: PropTypes.object.isRequired,\r\n    handleBaySelectionChange: PropTypes.func.isRequired,\r\n    selectedbays:PropTypes.array.isRequired\r\n}\r\n\r\nBayGroupDetails.defaultProps = {\r\n    isEnterpriseNode: false,\r\n}\r\n\r\nexport default function BayGroupDetails({\r\n    bayGroup,\r\n    modBayGroup,\r\n    validationErrors,\r\n    onFieldChange,\r\n    modAvailablebayList,\r\n    handleBaySelectionChange,\r\n    selectedbays\r\n}) {\r\n    function displayValues(cellData) {\r\n        const { value, field } = cellData;\r\n        if (typeof value === \"boolean\" || field === \"Active\") {\r\n            if (value) return <Icon name=\"check\" size=\"small\" color=\"green\" />;\r\n            else return <Icon name=\"close\" size=\"small\" color=\"red\" />;\r\n        }\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t, index) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                key={index}\r\n                                fluid\r\n                                value={modBayGroup.GroupName}\r\n                                indicator=\"required\"\r\n                                disabled={bayGroup.GroupName !==\"\"}\r\n                                onChange={(data) => onFieldChange(\"GroupName\", data)}\r\n                                label={t(\"BayGroupList_Name\")}\r\n                                error={t(validationErrors.GroupName)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                key={index}\r\n                                fluid\r\n                                value={modBayGroup.Description}\r\n                                onChange={(data) => onFieldChange(\"Description\", data)}\r\n                                label={t(\"BayGroupList_Description\")}\r\n                                error={t(validationErrors.Description)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                            <div className=\"col-12 bayGroupList tableScroll\">\r\n                                <span>{t(\"BayGroupDetails_AssociatedBays\")}</span>\r\n                        <div class=\"ui red circular empty label badge  circle-padding\" />\r\n                            <DataTable\r\n                            data={modAvailablebayList}\r\n                            selectionMode=\"multiple\"\r\n                              selection={selectedbays}\r\n                              onSelectionChange={handleBaySelectionChange}\r\n                            scrollable={true}\r\n                            scrollHeight=\"320px\"\r\n                                >\r\n                            <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"BayCode\"\r\n                            field=\"BayCode\"\r\n                            header={t(\"BayGroupList_BayCode\")}\r\n                             ></DataTable.Column>\r\n                               <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"Description\"\r\n                            field=\"Description\"\r\n                            header={t(\"BayGroupList_Description\")}\r\n                              ></DataTable.Column>\r\n                              <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"LoadingType\"\r\n                            field=\"LoadingType\"\r\n                            header={t(\"BayGroupList_LoadingType\")}\r\n                             ></DataTable.Column>\r\n                             <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"MaximumQueue\"\r\n                            field=\"MaximumQueue\"\r\n                            header={t(\"BayGroupList_MaximumQueue\")}\r\n                             ></DataTable.Column>\r\n                             <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"Active\"\r\n                            field=\"Active\"\r\n                            header={t(\"BayGroupList_Active\")}\r\n                            renderer={(cellData)=>displayValues(cellData)}\r\n                            ></DataTable.Column>\r\n                            </DataTable>\r\n                                </div>\r\n                            \r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}\r\n\r\n"," import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { emptyBayGroup } from \"../../../JS/DefaultEntities\";\r\nimport { bayGroupValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport { functionGroups, fnBayGroup, fnKPIInformation } from \"../../../JS/FunctionGroups\";\r\nimport  BayGroupDetails  from \"../../UIBase/Details/BayGroupDetails\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { KpiBayGroupDetail } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass BayGroupDetailsComposite extends Component {\r\n    state = {\r\n        bayGroup: {},\r\n        modBayGroup: {},\r\n        validationErrors: Utilities.getInitialValidationErrors(bayGroupValidationDef),\r\n        isReadyToRender: false,\r\n        saveEnabled: false,\r\n        lookUpData: null,\r\n        isEnable: true,\r\n        modAvailablebayList: [],\r\n        selectedbays: [],\r\n        checkedBays: [],\r\n        bayGroupKPIList:[],\r\n        tempBayGroup: {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {\r\n            Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n            // this.getBayGroup(this.props.selectedRow);\r\n            this.GetBayList();\r\n        } catch (error) {\r\n            console.log(\r\n                \"BaygroupDetailsComposite:Error occured on componentDidMount\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        try {\r\n            if (\r\n                this.state.bayGroup.GroupName !== \"\" &&\r\n                nextProps.selectedRow.GroupName === undefined &&\r\n                this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n            ) {\r\n                this.getBayGroup(nextProps.selectedRow);\r\n                let validationErrors = { ...this.state.validationErrors };\r\n                Object.keys(validationErrors).forEach((key) => {\r\n                    validationErrors[key] = \"\";\r\n                });\r\n                this.setState({ validationErrors });\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"baygroupDetailsComposite:Error occured on componentWillReceiveProps\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n   \r\n    getBayGroup(bayGroupRow) {\r\n        try {\r\n            emptyBayGroup.BayList = this.state.modAvailablebayList;\r\n            if (bayGroupRow.GroupName === undefined) {\r\n                this.setState({\r\n                    bayGroup: lodash.cloneDeep(emptyBayGroup),\r\n                    modBayGroup: lodash.cloneDeep(emptyBayGroup),\r\n                    isReadyToRender: true,\r\n                    modAvailablebayList: lodash.cloneDeep(emptyBayGroup.BayList),\r\n                    checkedBays: [],\r\n                    selectedbays: [],\r\n                    bayGroupKPIList:[],\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnBayGroup\r\n                    ),\r\n                });\r\n                return;\r\n            }\r\n            axios(\r\n                RestAPIs.GetBayGroup + \"?bayGroupName=\" +\r\n                bayGroupRow.GroupName,\r\n                Utilities.getAuthenticationObjectforGet(\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true && result.EntityResult.length > 0) {\r\n                    let checkedList = [];\r\n                      result.EntityResult[0].BayList.forEach((Bays) => {\r\n              var selectBay = this.state.modAvailablebayList.find(\r\n                (allBay) => {\r\n                  return allBay.BayCode === Bays.BayCode;\r\n                }\r\n              );\r\n              checkedList.push(selectBay);\r\n            });\r\n                    this.setState(\r\n                        {\r\n                            isReadyToRender: true,\r\n                            bayGroup: lodash.cloneDeep(result.EntityResult[0]),\r\n                            modBayGroup: lodash.cloneDeep(result.EntityResult[0]),\r\n                            selectedbays: checkedList,\r\n                            // selectedbays:lodash.cloneDeep(this.state.selectedbays),\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnBayGroup\r\n                            )\r\n                            \r\n                        }, () => this.getKPIList(this.props.selectedShareholder, result.EntityResult[0].bayGroupCode)\r\n                    );\r\n                } else {\r\n                    this.setState({\r\n                        bayGroup: lodash.cloneDeep(emptyBayGroup),\r\n                        modBayGroup: lodash.cloneDeep(emptyBayGroup),\r\n                        isReadyToRender: true,\r\n                        modAvailablebayList: lodash.cloneDeep(emptyBayGroup.BayList),\r\n                        selectedbays: [],\r\n\r\n                    });\r\n                    console.log(\"Error in getbaygroup:\", result.ErrorList);\r\n                }\r\n            })\r\n             }catch(error)  {\r\n                    console.log(\"Error while getbaygroup:\", error, bayGroupRow);\r\n                };\r\n        }\r\n\r\n    GetBayList() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetBayList,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (\r\n                            Array.isArray(result.EntityResult.Table) &&\r\n                            result.EntityResult.Table.length >= 0\r\n                        )\r\n                            this.setState({ modAvailablebayList: result.EntityResult.Table },\r\n                                () => {\r\n                                    this.getBayGroup(this.props.selectedRow);\r\n                                });\r\n                    } else {\r\n                        this.setState({ modAvailablebayList: [] });\r\n                        console.log(\"Error in getbayList:\", result.ErrorList);\r\n                    }\r\n            \r\n                })\r\n                .catch((error) => {\r\n                    this.setState({ modAvailablebayList: [] });\r\n                    console.log(\"Error while getting getbayList:\", error);\r\n                });\r\n        }catch(error)  {\r\n                    console.log(\"Error while getbayList:\", error);\r\n                };\r\n  }\r\n    handleBaySelectionChange = (bays) => {\r\n        this.setState({ selectedbays: bays });\r\n  };\r\n    handleChange = (propertyName, data) => {\r\n        try {\r\n            const modBayGroup = lodash.cloneDeep(this.state.modBayGroup);\r\n            modBayGroup[propertyName] = data;\r\n            this.setState({ modBayGroup });\r\n\r\n            const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n            if (bayGroupValidationDef[propertyName] !== undefined) {\r\n                validationErrors[propertyName] = Utilities.validateField(\r\n                    bayGroupValidationDef[propertyName],\r\n                    data\r\n                );\r\n                this.setState({ validationErrors });\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"BayGroupDetailsComposite:Error occured on handleChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    handleReset = () => {\r\n        try {\r\n            const { validationErrors } = { ...this.state };\r\n            const bayGroup = lodash.cloneDeep(this.state.bayGroup);\r\n            Object.keys(validationErrors).forEach(function (key) {\r\n                validationErrors[key] = \"\";\r\n            });\r\n            if (bayGroup.BayList.length > 0 && bayGroup.BayList !==\"\") {\r\n                let checkedBayList =[]\r\n                    bayGroup.BayList.forEach((Bays) => {\r\n                    var selectBay = this.state.modAvailablebayList.find(\r\n                        (allBay) => {\r\n                            return allBay.BayCode === Bays.BayCode;\r\n                        }\r\n                    );\r\n                    checkedBayList.push(selectBay);\r\n                })\r\n                this.setState({\r\n                    modBayGroup: { ...bayGroup },\r\n                    selectedbays: checkedBayList,\r\n                    validationErrors,\r\n                });\r\n               \r\n            }\r\n            else {\r\n                this.setState({\r\n                    modBayGroup: { ...bayGroup },\r\n                    validationErrors,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.log(\"bayGroupDetailsComposite:Error occured on handleReset\", error);\r\n        }\r\n    };\r\n\r\n    saveBayGroup = () => {\r\n        try {\r\n          this.setState({ saveEnabled: false });\r\n          let tempBayGroup = lodash.cloneDeep(this.state.tempBayGroup);\r\n    \r\n          this.state.bayGroup.GroupName === \"\"\r\n                    ? this.CreateBayGroup(tempBayGroup)\r\n                    : this.updateBayGroup(tempBayGroup);\r\n    \r\n        } catch (error) {\r\n          console.log(\"BayGroupDetails Composite : Error in saveBayGroup\");\r\n        }\r\n      };\r\n\r\n    handleSave = () => {\r\n        try {\r\n            this.handleAuthenticationClose();\r\n            // let modBayGroup = this.fillDetails();\r\n             let modBayGroup = lodash.cloneDeep(this.state.modBayGroup);\r\n            modBayGroup.BayList=lodash.cloneDeep(this.state.selectedbays)\r\n             \r\n            if (this.validateSave(modBayGroup)) {\r\n               \r\n                let showAuthenticationLayout =\r\n                this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n                  ? true\r\n                  : false;\r\n              let tempBayGroup = lodash.cloneDeep(modBayGroup);\r\n              this.setState({ showAuthenticationLayout, tempBayGroup }, () => {\r\n                if (showAuthenticationLayout === false) {\r\n                  this.saveBayGroup();\r\n                }\r\n            });\r\n\r\n            } else this.setState({ saveEnabled: true });\r\n        }\r\n        catch (error) {\r\n            console.log(\"BayGroupDetailsComposite:Error occured on handleSave\", error);\r\n        }\r\n    };\r\n\r\n    // fillDetails() {\r\n    //     try {\r\n    //         let modBayGroup = lodash.cloneDeep(this.state.modBayGroup);\r\n    //         modBayGroup.BayList=lodash.cloneDeep(this.state.selectedbays)\r\n    //         this.setState({ modBayGroup });\r\n    //         return modBayGroup;\r\n    //     } catch (error) {\r\n    //         console.log(\"BayGroupDetailsComposite:Error occured on fillAttributeDetails\", error);\r\n    //     }\r\n    // }\r\n    validateSave(modBayGroup) {\r\n        try { \r\n        var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n        Object.keys(bayGroupValidationDef).forEach(function (key) {\r\n            validationErrors[key] = Utilities.validateField(\r\n                bayGroupValidationDef[key],\r\n                modBayGroup[key]\r\n            );\r\n        });\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: [\"BayGroup_Saved_Status\"],\r\n            messageResultDetails: [],\r\n        };\r\n        if (modBayGroup.BayList.length === 0) {\r\n            notification.messageResultDetails.push({\r\n                keyFields: [\"Groupname\"],\r\n                keyValues: [modBayGroup.GroupName],\r\n                isSuccess: false,\r\n                errorMessage: \"BayGroup_PleaseSelectAtleastOneBay\",\r\n            });\r\n        }\r\n        this.setState({ validationErrors });\r\n        var returnValue = true;\r\n        if (returnValue)\r\n            returnValue = Object.values(validationErrors).every(function (value) {\r\n                return value === \"\";\r\n            });\r\n        if (notification.messageResultDetails.length > 0) {\r\n            this.props.onSaved(this.state.modBayGroup, \"update\", notification);\r\n            return false;\r\n        }\r\n        return returnValue;\r\n    } catch(error) {\r\n        console.log(\"Error while Validate Save\",error)\r\n    }\r\n    }\r\n    CreateBayGroup(modBayGroup) {\r\n        try {\r\n            this.handleAuthenticationClose();\r\n            let keyCode = [\r\n                {\r\n                    key: KeyCodes.bayGroup,\r\n                    value: modBayGroup.GroupName,\r\n                },\r\n            ];\r\n            let obj = {\r\n                keyDataCode: KeyCodes.bayGroup,\r\n                KeyCodes: keyCode,\r\n                Entity: modBayGroup,\r\n            };\r\n\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"BayGroup_Saved_Status\",\r\n                messageResultDetails: [\r\n                    {\r\n                        keyFields: [\"BayGroupList_Name\"],\r\n                        keyValues: [modBayGroup.GroupName],\r\n                        isSuccess: false,\r\n                        errorMessage: \"\",\r\n                    },\r\n                ],\r\n            };\r\n\r\n            axios(\r\n                RestAPIs.CreateBayGroup,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                let result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState(\r\n                        {\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnBayGroup\r\n                            ),\r\n                        },\r\n                        () => this.getBayGroup({ GroupName: modBayGroup.GroupName })\r\n                    );\r\n                } else {\r\n                    notification.messageResultDetails[0].errorMessage =\r\n                        result.ErrorList[0];\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnBayGroup\r\n                        ),\r\n                    });\r\n                    console.log(\"Error in BayGroup:\", result.ErrorList);\r\n                }\r\n                this.props.onSaved(this.state.modBayGroup, \"add\", notification);\r\n            })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnBayGroup\r\n                        ),\r\n                    });\r\n                    notification.messageResultDetails[0].errorMessage = error;\r\n                    this.props.onSaved(this.state.modBayGroup, \"add\", notification);\r\n                });\r\n        } catch (error)\r\n        {\r\n            console.log(\"Error while createbaygroup\",error)\r\n        }\r\n    }\r\n    updateBayGroup(modBayGroup) {\r\n        try {\r\n            this.handleAuthenticationClose();\r\n            let keyCode = [\r\n                {\r\n                    key: KeyCodes.bayGroup,\r\n                    value: modBayGroup.GroupName\r\n                },\r\n            ];\r\n            let obj = {\r\n                keyDataCode: KeyCodes.bayGroup,\r\n                KeyCodes: keyCode,\r\n                Entity: modBayGroup,\r\n            };\r\n\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"BayGroup_SavedSuccess\",\r\n                messageResultDetails: [\r\n                    {\r\n                        keyFields: [\"BayGroupList_Name\"],\r\n                        keyValues: [modBayGroup.GroupName],\r\n                        isSuccess: false,\r\n                        errorMessage: \"\",\r\n                    },\r\n                ],\r\n            };\r\n\r\n            axios(\r\n                RestAPIs.UpdateBayGroup,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                let result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState(\r\n                        {\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnBayGroup\r\n                            ),\r\n                        },\r\n                        () => this.getBayGroup({ GroupName: modBayGroup.GroupName })\r\n                    );\r\n                } else {\r\n                    notification.messageResultDetails[0].errorMessage =\r\n                        result.ErrorList[0];\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnBayGroup\r\n                        ),\r\n                    });\r\n                    console.log(\"Error in update BayGroup:\", result.ErrorList);\r\n                }\r\n                this.props.onSaved(this.state.modBayGroup, \"update\", notification);\r\n            })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnBayGroup\r\n                        ),\r\n                    });\r\n                    notification.messageResultDetails[0].errorMessage = error;\r\n                    this.props.onSaved(this.state.modBayGroup, \"modify\", notification);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"Error while updatebaygroup\",error)\r\n        }\r\n    }\r\n    getKPIList(bayGroupCode) {\r\n        let KPIView = Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.view,\r\n            fnKPIInformation\r\n        );\r\n        if (KPIView === true) {\r\n            let objKPIRequestData = {\r\n                PageName: KpiBayGroupDetail,\r\n                InputParameters: [{ key: \"BayGroupCode\", value: bayGroupCode }],\r\n            };\r\n            axios(\r\n                RestAPIs.GetKPI,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    objKPIRequestData,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        this.setState({\r\n                            bayGroupKPIList: result.EntityResult.ListKPIDetails,\r\n                        });\r\n                    } else {\r\n                        this.setState({ bayGroupKPIList: [] });\r\n                        console.log(\"Error in baygroup KPIList:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Error while getting baygroup KPIList:\", error);\r\n                });\r\n        }\r\n    }\r\n\r\n    handleAuthenticationClose = () => {\r\n        this.setState({\r\n          showAuthenticationLayout: false,\r\n        });\r\n      };\r\n\r\n    render() {\r\n        const popUpContents = [\r\n            {\r\n                fieldName: \"BayGroupList_LastUpdated\",\r\n                fieldValue:\r\n                    new Date(this.state.modBayGroup.LastUpdatedTime).toLocaleDateString() +\r\n                    \" \" +\r\n                    new Date(this.state.modBayGroup.LastUpdatedTime).toLocaleTimeString(),\r\n            },\r\n           \r\n            {\r\n                fieldName: \"BayGroupList_CreatedTime\",\r\n                fieldValue:\r\n                    new Date(this.state.modBayGroup.CreatedTime).toLocaleDateString() +\r\n                    \" \" +\r\n                    new Date(this.state.modBayGroup.CreatedTime).toLocaleTimeString(),\r\n            },\r\n        ];\r\n        return this.state.isReadyToRender ? (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <TMDetailsHeader\r\n                        entityCode={this.state.bayGroup.GroupName}\r\n                        newEntityName=\"BayGroupDetails_NewBayGroup\"\r\n                        popUpContents={popUpContents}\r\n                    ></TMDetailsHeader>\r\n                </ErrorBoundary>\r\n                <TMDetailsKPILayout KPIList={this.state.bayGroupKPIList}> </TMDetailsKPILayout>\r\n\r\n                <ErrorBoundary>\r\n                    <BayGroupDetails\r\n                    bayGroup={this.state.bayGroup}\r\n                        modBayGroup={this.state.modBayGroup}\r\n                        modAvailablebayList={this.state.modAvailablebayList}\r\n                        validationErrors={this.state.validationErrors}\r\n                        selectedbays={this.state.selectedbays}\r\n                        onFieldChange={this.handleChange}\r\n                        handleBaySelectionChange={this.handleBaySelectionChange}\r\n                        isEnterpriseNode={this.props.userDetails.EntityResult.IsEnterpriseNode}\r\n                    >\r\n                    </BayGroupDetails>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <TMDetailsUserActions\r\n                        handleBack={this.props.onBack}\r\n                        handleSave={this.handleSave}\r\n                        handleReset={this.handleReset}\r\n                        saveEnabled={this.state.saveEnabled}\r\n                    ></TMDetailsUserActions>\r\n                </ErrorBoundary>\r\n\r\n                {this.state.showAuthenticationLayout ? (\r\n                <UserAuthenticationLayout\r\n                    Username={this.props.userDetails.EntityResult.UserName}\r\n                    functionName={\r\n                        this.state.bayGroup.GroupName === \"\"\r\n                        ? functionGroups.add\r\n                        : functionGroups.modify\r\n                    }\r\n                    functionGroup={fnBayGroup}\r\n                    handleOperation={this.saveBayGroup}\r\n                    handleClose={this.handleAuthenticationClose}\r\n                ></UserAuthenticationLayout>\r\n                ) : null}\r\n            </div>\r\n        ) : (\r\n            <LoadingPage message=\"Loading\"></LoadingPage>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BayGroupDetailsComposite);\r\n\r\nBayGroupDetailsComposite.propTypes = {\r\n    selectedRow: PropTypes.object.isRequired,\r\n    terminalCodes: PropTypes.array.isRequired,\r\n    onBack: PropTypes.func.isRequired,\r\n    onSaved: PropTypes.func.isRequired,\r\n};\r\n\r\n           \r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n"],"names":["TMDetailsKPILayout","_ref","KPIList","pageName","rowHeight","widgetHeight","isDraggable","isResizable","kpiDisplayTopBreakpoint","KPIDisplays","setKPIDisplays","useState","kpiDiv","React","hideKpis","currentScrollPos","window","pageYOffset","KPIDisplay","current","getBoundingClientRect","top","useEffect","addEventListener","removeEventListener","_jsx","ref","children","TranslationConsumer","t","style","marginTop","ErrorBoundary","KPIDashboardLayout","kpiList","defaultProps","BayGroupDetails","bayGroup","modBayGroup","validationErrors","onFieldChange","modAvailablebayList","handleBaySelectionChange","selectedbays","index","className","_jsxs","Input","fluid","value","GroupName","indicator","disabled","onChange","data","label","error","reserveSpace","Description","class","DataTable","selectionMode","selection","onSelectionChange","scrollable","scrollHeight","Column","field","header","renderer","cellData","Icon","name","size","color","displayValues","isEnterpriseNode","BayGroupDetailsComposite","Component","constructor","arguments","state","Utilities","bayGroupValidationDef","isReadyToRender","saveEnabled","lookUpData","isEnable","checkedBays","bayGroupKPIList","tempBayGroup","bays","this","setState","handleChange","propertyName","lodash","undefined","console","log","handleReset","Object","keys","forEach","key","BayList","length","checkedBayList","Bays","selectBay","find","allBay","BayCode","push","saveBayGroup","CreateBayGroup","updateBayGroup","handleSave","handleAuthenticationClose","validateSave","showAuthenticationLayout","props","userDetails","EntityResult","IsWebPortalUser","componentDidMount","IsArchived","GetBayList","componentWillReceiveProps","nextProps","selectedRow","tokenDetails","tokenInfo","getBayGroup","bayGroupRow","emptyBayGroup","FunctionsList","functionGroups","add","fnBayGroup","axios","RestAPIs","then","response","result","IsSuccess","checkedList","modify","getKPIList","selectedShareholder","bayGroupCode","ErrorList","Array","isArray","Table","catch","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","returnValue","values","every","onSaved","keyCode","KeyCodes","obj","keyDataCode","Entity","view","fnKPIInformation","objKPIRequestData","PageName","KpiBayGroupDetail","InputParameters","ListKPIDetails","render","popUpContents","fieldName","fieldValue","Date","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","CreatedTime","TMDetailsHeader","entityCode","newEntityName","IsEnterpriseNode","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","margin","Popup","element","marginLeft","root","position","List","map","content","Content","Button","onClick","float"],"sourceRoot":""}