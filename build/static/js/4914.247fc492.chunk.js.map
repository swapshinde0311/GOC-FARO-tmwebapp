{"version":3,"file":"static/js/4914.247fc492.chunk.js","mappings":"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","sources":["Components/Composite/Common/TMDetailsKPILayout.jsx","Components/UIBase/Details/DeviceDetails.jsx","Components/Composite/Details/DeviceDetailsComposite.jsx","Components/UIBase/Common/SiteDetailsUserActions.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/functionalUtilities.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nexport default function TMDetailsKPILayout({\r\n    KPIList,\r\n    pageName,\r\n    rowHeight,\r\n    widgetHeight,\r\n    isDraggable,\r\n    isResizable,\r\n    kpiDisplayTopBreakpoint\r\n}) {\r\n    const [KPIDisplays, setKPIDisplays] = useState(1);\r\n\r\n    const kpiDiv = React.useRef(null);\r\n\r\n    const hideKpis = () => {\r\n        let currentScrollPos = window.pageYOffset;\r\n        let KPIDisplay = KPIDisplays;\r\n\r\n        // hide kpis based on div position to top of the window \r\n        if (kpiDiv.current && kpiDiv.current.getBoundingClientRect().top < kpiDisplayTopBreakpoint) {\r\n            KPIDisplay = 0;\r\n        }\r\n        // show the kpis once at top of the screen\r\n        else if (currentScrollPos === 0) {\r\n            KPIDisplay = 1\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n\r\n        setKPIDisplays(KPIDisplay);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            window.addEventListener(\"scroll\", hideKpis);\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // remove listener on unmount\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", hideKpis)\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div ref={kpiDiv}>\r\n            {KPIDisplays === 1 ? <TranslationConsumer>\r\n                {(t) => (\r\n                    <div style={{ marginTop: \"6px\" }}>\r\n                        <ErrorBoundary>\r\n                            <KPIDashboardLayout\r\n                                kpiList={KPIList}\r\n                                isDraggable={isDraggable}\r\n                                isResizable={isResizable}\r\n                                rowHeight={rowHeight}\r\n                                widgetHeight={widgetHeight}\r\n                                pageName={pageName}\r\n                            ></KPIDashboardLayout>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n\r\n                )}\r\n            </TranslationConsumer> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nTMDetailsKPILayout.propTypes = {\r\n    kpiDisplayTopBreakpoint: PropTypes.number\r\n}\r\n\r\nTMDetailsKPILayout.defaultProps = {\r\n    kpiDisplayTopBreakpoint: 100\r\n}","import React from 'react';\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport { Select, Checkbox, Input, Accordion, Button } from '@scuf/common';\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\n// import { getKeyByValue } from \"../../../JS/Utilities\";\r\nimport { AttributeDetails } from \"../../UIBase/Details/AttributeDetails\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\n\r\nDeviceDetails.propTypes = {\r\n    device: PropTypes.object.isRequired,\r\n    modDevice: PropTypes.object.isRequired,\r\n    modAssociatedChannel: PropTypes.array.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    channelValidationErrors: PropTypes.object.isRequired,\r\n    onDeviceTypeChange: PropTypes.func.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        deviceTypeOptions: PropTypes.array,\r\n        deviceModelOptions: PropTypes.array,\r\n        channelTypeOptions: PropTypes.array,\r\n        channelCodeOptions: PropTypes.array,\r\n        densityUOMOptions: PropTypes.array,\r\n        volumeUOMOptions: PropTypes.array,\r\n        massUOMOptions: PropTypes.array,\r\n        temperatureUOMOptions: PropTypes.array,\r\n        pressureUOMOptions: PropTypes.array,\r\n        transloadingOptions: PropTypes.array,\r\n    }).isRequired,\r\n    isBCU: PropTypes.bool.isRequired,\r\n    handleSkipLocalLoadFetch: PropTypes.func,\r\n    enableSkipLocalLoadFetch: PropTypes.bool\r\n};\r\n\r\nDeviceDetails.defaultProps = {\r\n    listOptions: {\r\n        deviceTypeOptions: [],\r\n        deviceModelOptions: [],\r\n        channelTypeOptions: [],\r\n        channelCodeOptions: [],\r\n        densityUOMOptions: [],\r\n        volumeUOMOptions: [],\r\n        massUOMOptions: [],\r\n        temperatureUOMOptions: [],\r\n        pressureUOMOptions: [],\r\n        transloadingOptions: [],\r\n    },\r\n    isBCU: false,\r\n    enableSkipLocalLoadFetch: false\r\n}\r\n\r\nexport default function DeviceDetails({\r\n    device,\r\n    modDevice,\r\n    listOptions,\r\n    modAssociatedChannel,\r\n    onFieldChange,\r\n    onChannelFieldChange,\r\n    onActiveStatusChange,\r\n    deviceType,\r\n    modAttributeMetaDataList,\r\n    attributeValidationErrors,\r\n    onAttributeDataChange,\r\n    validationErrors,\r\n    isMarineTransloading,\r\n    isRailTransloading,\r\n    channelValidationErrors,\r\n    isBCU,\r\n    handleSkipLocalLoadFetch,\r\n    enableSkipLocalLoadFetch\r\n}) {\r\n\r\n    const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n        let attributeValidation = [];\r\n        attributeValidation = attributeValidationErrors.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n        })\r\n        return attributeValidation.attributeValidationErrors;\r\n    }\r\n\r\n    const channelDisabled = (modDevice.IsIntegrated === true) || deviceType === Constants.deviceTypeCode.WEIGH_BRIDGE ||\r\n        (modDevice.DEUType !== undefined && modDevice.DEUType.toUpperCase() === Constants.DeviceModels.TouchScreen.toUpperCase()) ? true : false\r\n\r\n    const [t] = useTranslation();\r\n    return (\r\n        <React.Fragment >\r\n            <div className=\"detailsContainer deviceAccordian\" >\r\n                <div className=\"row\" >\r\n\r\n                    <div className=\"col-md-12 mt-4\" >\r\n\r\n                        <p className=\"border-bottom-1 pb-2 deviceheaderLabel\">{t(\"DeviceInfo_DeviceData\")}</p>\r\n\r\n                    </div>\r\n                    <div className=\"col-md-12\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Select\r\n                                    fluid\r\n                                    placeholder={t(\"Common_Select\")}\r\n                                    label={t(\"DeviceInfo_DeviceType\")}\r\n                                    value={\r\n                                        Utilities.getKeyByValue(Constants.deviceTypeCode, modDevice.DeviceType) ===\r\n                                            undefined\r\n                                            ? \"\"\r\n                                            : Utilities.getKeyByValue(Constants.deviceTypeCode, modDevice.DeviceType)\r\n                                    }\r\n                                    // value={modDevice.deviceTypeOptions}\r\n                                    options={listOptions.deviceTypeOptions}\r\n                                    disabled={device.Code === \"\" ? false : true}\r\n                                    onChange={(data) => onFieldChange(\"DeviceType\", data)}\r\n                                    indicator=\"required\"\r\n                                    reserveSpace={false}\r\n                                    search={false}\r\n                                    noResultsMessage={t(\"noResultsMessage\")}\r\n                                    error={t(validationErrors.DeviceType)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Input\r\n                                    fluid\r\n                                    value={modDevice.Code}\r\n                                    label={t(\"DeviceInfo_Code\")}\r\n                                    indicator=\"required\"\r\n                                    disabled={device.Code === \"\" ? false : true}\r\n                                    onChange={(data) => onFieldChange(\"Code\", data)}\r\n                                    reserveSpace={false}\r\n                                    error={t(validationErrors.Code)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Select\r\n                                    fluid\r\n                                    placeholder={t(\"Common_Select\")}\r\n                                    label={t(\"DeviceInfo_ModelName\")}\r\n                                    value={modDevice.DeviceType !== Constants.deviceTypeCode.DEU ? modDevice.Model : modDevice.DEUType}\r\n                                    options={listOptions.deviceModelOptions}\r\n                                    // disabled={true}\r\n                                    onChange={(data) => onFieldChange(modDevice.DeviceType !== Constants.deviceTypeCode.DEU ? \"Model\" : \"DEUType\", data)}\r\n                                    indicator=\"required\"\r\n                                    reserveSpace={false}\r\n                                    search={false}\r\n                                    noResultsMessage={t(\"noResultsMessage\")}\r\n                                />\r\n\r\n                            </div>\r\n                            {deviceType !== Constants.deviceTypeCode.WEIGH_BRIDGE && modDevice.DEUType !== Constants.DeviceModels.TouchScreen &&\r\n                                modDevice.Model !== Constants.DeviceModels.AcculoadIII &&\r\n                                modDevice.Model !== Constants.DeviceModels.AcculoadIV &&\r\n                                modDevice.Model !== Constants.DeviceModels.DanLoad &&\r\n                                modDevice.Model !== Constants.DeviceModels.VirtualPreset && modDevice.Model !== Constants.DeviceModels.Nedap ?\r\n                                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                    <Input\r\n                                        fluid\r\n                                        label={t(\"DeviceInfo_NodeAddress\")}\r\n                                        value={modDevice.NodeAddress}\r\n                                        reserveSpace={false}\r\n                                        onChange={(data) => onFieldChange(\"NodeAddress\", data)}\r\n                                        error={t(validationErrors.NodeAddress)}\r\n                                        indicator=\"required\"\r\n                                    />\r\n                                </div> : null\r\n                            }\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Input\r\n                                    fluid\r\n                                    label={t(\"DeviceInfo_DeviceName\")}\r\n                                    value={modDevice.Name}\r\n                                    indicator=\"required\"\r\n                                    reserveSpace={false}\r\n                                    onChange={(data) => onFieldChange(\"Name\", data)}\r\n                                    error={t(validationErrors.Name)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Input\r\n                                    fluid\r\n                                    label={t(\"DeviceInfo_PointName\")}\r\n                                    value={modDevice.PointName}\r\n                                    indicator=\"required\"\r\n                                    reserveSpace={false}\r\n                                    onChange={(data) => onFieldChange(\"PointName\", data)}\r\n                                    error={t(validationErrors.PointName)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Input\r\n                                    fluid\r\n                                    value={\r\n                                        modDevice.Description === null\r\n                                            ? \"\"\r\n                                            : modDevice.Description\r\n                                    }\r\n                                    label={t(\"FinishedProductList_Description\")}\r\n                                    reserveSpace={false}\r\n                                    onChange={(data) => onFieldChange(\"Description\", data)}\r\n                                    error={t(validationErrors.Description)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Select\r\n                                    fluid\r\n                                    placeholder={t(\"FinishedProductInfo_Select\")}\r\n                                    label={t(\"Cust_Status\")}\r\n                                    value={modDevice.Active}\r\n                                    options={[\r\n                                        { text: t(\"ViewShipment_Ok\"), value: true },\r\n                                        { text: t(\"ViewShipmentStatus_Inactive\"), value: false },\r\n                                    ]}\r\n                                    onChange={(data) => onActiveStatusChange(data)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Input\r\n                                    fluid\r\n                                    value={\r\n                                        modDevice.Remarks === null ? \"\" : modDevice.Remarks\r\n                                    }\r\n                                    label={t(\"Cust_Remarks\")}\r\n                                    onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                                    indicator={\r\n                                        modDevice.Active !== device.Active ? \"required\" : \"\"\r\n                                    }\r\n                                    reserveSpace={false}\r\n                                    error={t(validationErrors.Remarks)}\r\n                                />\r\n                            </div>\r\n\r\n                            {\r\n                                deviceType === Constants.deviceTypeCode.CARD_READER ?\r\n                                    <div className=\"col-12 col-md-6 col-lg-4 \">\r\n                                        <div class=\"ui input-label\">\r\n                                            <span className=\"input-label-message\">{t(\"DeviceInfo_IsIntegrated\")}</span>\r\n                                        </div>\r\n                                        <div className=\"input-wrap\">\r\n                                            <Checkbox\r\n                                                onChange={(data) => onFieldChange(\"IsIntegrated\", data)}\r\n                                                checked={modDevice.IsIntegrated}\r\n                                                disabled={modDevice.IsIntegrated ? true : false}\r\n                                            />\r\n                                        </div>\r\n                                    </div> : null\r\n                            }\r\n                            {deviceType === Constants.deviceTypeCode.BCU ?\r\n                                <>\r\n                                    {modDevice.Model.toUpperCase() === Constants.DeviceModels.MSCL.toUpperCase()\r\n                                        || modDevice.Model.toUpperCase() === Constants.DeviceModels.AcculoadIII.toUpperCase()\r\n                                        || modDevice.Model.toUpperCase() === Constants.DeviceModels.AcculoadIV.toUpperCase()\r\n                                        ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4 \">\r\n                                            <div className=\"ui single-input fluid disabled\" style={{ width: \"30%\", float: \"left\" }}>\r\n                                                <div class=\"ui input-label\">\r\n                                                    <span className=\"input-label-message\">{t(\"Device_DualBay\")}</span>\r\n                                                </div>\r\n                                                <div className=\"input-wrap\">\r\n                                                    <Checkbox\r\n                                                        onChange={(data) => onFieldChange(\"IsDualBay\", data)}\r\n                                                        checked={modDevice.IsDualBay}\r\n                                                        disabled={device.Code === \"\" ? false : true}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                            {\r\n                                                modDevice.IsDualBay === true ?\r\n                                                    <div style={{ width: \"70%\", float: \"right\" }}>\r\n                                                        <Input\r\n                                                            fluid\r\n                                                            value={modDevice.PointName + \"_1,\" + modDevice.PointName + \"_2\"}\r\n                                                            label={t(\"BCUAssociatedPoints\")}\r\n                                                            reserveSpace={false}\r\n                                                            disabled={true}\r\n                                                        />\r\n                                                    </div> : null\r\n                                            }\r\n\r\n                                        </div> : null}\r\n                                    {\r\n                                        isMarineTransloading === true || isRailTransloading === true ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4 \">\r\n                                                <div className=\"ui single-input fluid disabled\" style={{ width: \"30%\", float: \"left\" }}>\r\n                                                    <div class=\"ui input-label\">\r\n                                                        <span className=\"input-label-message\">{t(\"Device_Transloading\")}</span>\r\n                                                    </div>\r\n                                                    <div className=\"input-wrap\">\r\n                                                        <Checkbox\r\n                                                            onChange={(data) => onFieldChange(\"IsTransloading\", data)}\r\n                                                            checked={modDevice.IsTransloading}\r\n                                                            disabled={\r\n                                                                device.Code !== \"\"\r\n                                                            }\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                {\r\n                                                    modDevice.IsTransloading ?\r\n                                                        <div style={{ width: \"70%\", float: \"right\" }}>\r\n                                                            <Select\r\n                                                                fluid\r\n                                                                placeholder={t(\"Common_Select\")}\r\n                                                                label={t(\"Receipt_Source\")}\r\n                                                                value={modDevice.ReceiptSource}\r\n                                                                options={Utilities.transferListtoOptions(\r\n                                                                    listOptions.transloadingOptions\r\n                                                                )}\r\n                                                                onChange={(data) => onFieldChange(\"ReceiptSource\", data)}\r\n                                                                disabled={device.Code !== \"\"}\r\n                                                                reserveSpace={false}\r\n                                                                indicator={true}\r\n                                                                search={false}\r\n                                                                noResultsMessage={t(\"noResultsMessage\")}\r\n                                                            />\r\n                                                        </div> : (\"\")\r\n                                                }\r\n\r\n                                            </div>\r\n                                            : (\"\")}\r\n                                </> : null\r\n                            }\r\n                            {\r\n                                modDevice.ReceiptSource === \"RAIL\" ?\r\n                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                        <Select\r\n                                            fluid\r\n                                            placeholder={t(\"Common_Select\")}\r\n                                            label={t(\"BCUIdentification\")}\r\n                                            value={modDevice.CardReaderCode}\r\n                                            options={Constants.Identification}\r\n                                            reserveSpace={false}\r\n                                            indicator={true}\r\n                                            search={false}\r\n                                            onChange={(data) => onFieldChange(\"CardReaderCode\", data)}\r\n                                            noResultsMessage={t(\"noResultsMessage\")}\r\n                                        />\r\n\r\n                                    </div> : \"\"\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {deviceType === Constants.deviceTypeCode.BCU || modDevice.deviceTypeOptions === \"BCU\" ?\r\n\r\n                    <Accordion>\r\n                        <Accordion.Content\r\n                            className=\"attributeAccordian\"\r\n                            title={t(\"BCU_Attributes\")}\r\n                        >\r\n                            < div className=\"row pt-3\" >\r\n\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"row\">\r\n\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                            <Select\r\n                                                fluid\r\n                                                placeholder={t(\"Common_Select\")}\r\n                                                label={t(\"BCU_AdditiveUOM\")}\r\n                                                value={modDevice.AdditiveUOM}\r\n                                                options={listOptions.volumeUOMOptions}\r\n                                                onChange={(data) => onFieldChange(\"AdditiveUOM\", data)}\r\n                                                indicator=\"required\"\r\n                                                reserveSpace={false}\r\n                                                search={false}\r\n                                                noResultsMessage={t(\"noResultsMessage\")}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                            <Select\r\n                                                fluid\r\n                                                placeholder={t(\"Common_Select\")}\r\n                                                label={t(\"BCU_DensityUOM\")}\r\n                                                value={modDevice.DensityUOM}\r\n                                                options={listOptions.densityUOMOptions}\r\n                                                onChange={(data) => onFieldChange(\"DensityUOM\", data)}\r\n                                                indicator=\"required\"\r\n                                                reserveSpace={false}\r\n                                                search={false}\r\n                                                noResultsMessage={t(\"noResultsMessage\")}\r\n                                            />\r\n\r\n\r\n                                        </div>\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                            <Select\r\n                                                fluid\r\n                                                placeholder={t(\"Common_Select\")}\r\n                                                label={t(\"BCU_PressureUOM\")}\r\n                                                value={modDevice.PressureUOM}\r\n                                                options={listOptions.pressureUOMOptions}\r\n                                                onChange={(data) => onFieldChange(\"PressureUOM\", data)}\r\n                                                indicator=\"required\"\r\n                                                reserveSpace={false}\r\n                                                search={false}\r\n                                                noResultsMessage={t(\"noResultsMessage\")}\r\n                                            />\r\n\r\n\r\n                                        </div>\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                            <Select\r\n                                                fluid\r\n                                                placeholder={t(\"Common_Select\")}\r\n                                                label={t(\"BCU_TemperatureUOM\")}\r\n                                                value={modDevice.TemperatureUOM}\r\n                                                options={listOptions.temperatureUOMOptions}\r\n                                                onChange={(data) => onFieldChange(\"TemperatureUOM\", data)}\r\n                                                indicator=\"required\"\r\n                                                reserveSpace={false}\r\n                                                search={false}\r\n                                                noResultsMessage={t(\"noResultsMessage\")}\r\n                                            />\r\n\r\n\r\n                                        </div>\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                            <Select\r\n                                                fluid\r\n                                                placeholder={t(\"Common_Select\")}\r\n                                                label={t(\"BCU_MassUOM\")}\r\n                                                value={modDevice.MassUOM}\r\n                                                options={listOptions.massUOMOptions}\r\n                                                onChange={(data) => onFieldChange(\"MassUOM\", data)}\r\n                                                indicator=\"required\"\r\n                                                reserveSpace={false}\r\n                                                search={false}\r\n                                                noResultsMessage={t(\"noResultsMessage\")}\r\n                                            />\r\n\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                </div>\r\n                            </div>\r\n                        </Accordion.Content>\r\n                    </Accordion> : null\r\n                }\r\n                {deviceType === Constants.deviceTypeCode.WEIGH_BRIDGE ?\r\n\r\n                    <Accordion>\r\n                        <Accordion.Content\r\n                            className=\"attributeAccordian\"\r\n                            title={t(\"WB_Specific_Attributes\")}\r\n                        >\r\n                            < div className=\"row pt-3\" >\r\n\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"row\">\r\n\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                            <Select\r\n                                                fluid\r\n                                                placeholder={t(\"Common_Select\")}\r\n                                                label={t(\"WB_WeightUOM\")}\r\n                                                value={modDevice.WeightUOM}\r\n                                                options={listOptions.massUOMOptions}\r\n                                                onChange={(data) => onFieldChange(\"WeightUOM\", data)}\r\n                                                indicator=\"required\"\r\n                                                reserveSpace={false}\r\n                                                search={false}\r\n                                                noResultsMessage={t(\"noResultsMessage\")}\r\n                                                error={t(validationErrors.WeightUOM)}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                            <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                label={t(\"WB_Auto\")}\r\n                                                checked={modDevice.IsAuto}\r\n                                                onChange={(data) => onFieldChange(\"IsAuto\", data)}\r\n                                            >\r\n                                            </Checkbox>\r\n\r\n\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n\r\n                                </div>\r\n                            </div>\r\n                        </Accordion.Content>\r\n                    </Accordion> : null\r\n                }\r\n                {\r\n                    modAttributeMetaDataList.length > 0 ?\r\n                        modAttributeMetaDataList.map((attire) => (\r\n                            <div>\r\n                                {\r\n                                    attire.attributeMetaDataList.filter(item => { return item.IsVisible === true }).length > 0 ?\r\n                                        <ErrorBoundary>\r\n                                            <Accordion>\r\n                                                <Accordion.Content\r\n                                                    className=\"attributeAccordian\"\r\n                                                    title={t(\"Attributes_Header\")}\r\n                                                >\r\n                                                    <AttributeDetails\r\n                                                        selectedAttributeList={attire.attributeMetaDataList}\r\n                                                        handleCellDataEdit={onAttributeDataChange}\r\n                                                        attributeValidationErrors={handleValidationErrorFilter(attributeValidationErrors, attire.TerminalCode)}\r\n                                                    ></AttributeDetails>\r\n                                                </Accordion.Content>\r\n                                            </Accordion>\r\n                                        </ErrorBoundary>\r\n                                        : null}\r\n                            </div>\r\n                        )\r\n\r\n                        ) : null\r\n                }\r\n                <div className=\"row\" >\r\n\r\n                    <div className=\"col-md-12 mt-4\" >\r\n                        <p className=\"border-bottom-1 pb-2 deviceheaderLabel\">{t(\"DeviceInfo_ChannelData\")}</p>\r\n                    </div>\r\n                    <div className=\"col-md-12\">\r\n                        {modAssociatedChannel.map((associatedChannel) =>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                    <div style={{ width: \"70%\", float: \"left\" }}>\r\n                                        {\r\n                                            modDevice.MultiDrop ?\r\n                                                <Select\r\n                                                    fluid\r\n                                                    placeholder={t(\"FinishedProductInfo_Select\")}\r\n                                                    label={t(\"Channel_Code\")}\r\n                                                    value={associatedChannel.ChannelCode}\r\n                                                    options={listOptions.channelCodeOptions}\r\n                                                    indicator={associatedChannel.ChannelCode !== \"\" ? \"required\" : \"\"}\r\n                                                    reserveSpace={false}\r\n                                                    disabled={channelDisabled}\r\n                                                    onChange={(data) => onChannelFieldChange(\"ChannelCode\", data)}\r\n                                                />\r\n                                                :\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(\"Channel_Code\")}\r\n                                                    value={associatedChannel.ChannelCode}\r\n                                                    disabled={channelDisabled}\r\n                                                    reserveSpace={false}\r\n                                                    onChange={(data) => onChannelFieldChange(\"ChannelCode\", data)}\r\n                                                    error={t(channelValidationErrors.ChannelCode)}\r\n                                                    indicator={associatedChannel.ChannelCode !== \"\" ? \"required\" : \"\"}\r\n                                                />\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"ui single-input fluid disabled\" style={{ width: \"28%\", float: \"right\" }}>\r\n                                        <div class=\"ui input-label\">\r\n                                            <span className=\"input-label-message\">{t(\"DeviceInfo_IsMultiDrop\")}</span>\r\n                                        </div>\r\n                                        <div className=\"input-wrap\">\r\n                                            <Checkbox\r\n                                                onChange={(data) => onFieldChange(\"MultiDrop\", data)}\r\n                                                checked={modDevice.MultiDrop}\r\n                                                disabled={channelDisabled || modDevice.DEUType === Constants.DeviceModels.DEUContrec1030 ||\r\n                                                    (device.Code !== \"\" && modDevice.DeviceType === Constants.deviceTypeCode.DEU)}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                    <div style={{ width: \"70%\", float: \"left\" }}>\r\n                                        <Select\r\n                                            fluid\r\n                                            placeholder={t(\"FinishedProductInfo_Select\")}\r\n                                            label={t(\"ChannelTypeList_Title\")}\r\n                                            value={associatedChannel.ChannelType}\r\n                                            options={listOptions.channelTypeOptions}\r\n                                            disabled={channelDisabled}\r\n                                            onChange={(data) => onChannelFieldChange(\"ChannelType\", data)}\r\n                                            error={t(channelValidationErrors.ChannelType)}\r\n                                            indicator={associatedChannel.ChannelCode !== \"\" ? \"required\" : \"\"}\r\n                                            reserveSpace={false}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"ui single-input fluid disabled\" style={{ width: \"28%\", float: \"right\" }}>\r\n                                        <div class=\"ui input-label\">\r\n                                            <span className=\"input-label-message\">{t(\"DeviceInfo_IsEthernet\")}</span>\r\n                                        </div>\r\n                                        <div className=\"input-wrap\">\r\n                                            <Checkbox\r\n                                                onChange={(data) => onChannelFieldChange(\"PortType\", data)}\r\n                                                checked={associatedChannel.PortType === 1}\r\n                                                disabled={channelDisabled || (modDevice.Model !== Constants.DeviceModels.MSCL && modDevice.Model !== Constants.DeviceModels.Multiload && modDevice.Model !== Constants.DeviceModels.Microload)}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                    <Input\r\n                                        fluid\r\n                                        label={t(\"Channel_PrimaryAddress\")}\r\n                                        value={associatedChannel.PrimaryAddress}\r\n                                        disabled={channelDisabled}\r\n                                        reserveSpace={false}\r\n                                        onChange={(data) => onChannelFieldChange(\"PrimaryAddress\", data)}\r\n                                        error={t(channelValidationErrors.PrimaryAddress)}\r\n                                        indicator={associatedChannel.ChannelCode !== \"\" ? \"required\" : \"\"}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                    <Input\r\n                                        fluid\r\n                                        label={t(\"Channel_SecondaryAddress\")}\r\n                                        value={associatedChannel.SecondaryAddress}\r\n                                        disabled={channelDisabled}\r\n                                        reserveSpace={false}\r\n                                        onChange={(data) => onChannelFieldChange(\"SecondaryAddress\", data)}\r\n                                        error={t(channelValidationErrors.SecondaryAddress)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                    <Input\r\n                                        fluid\r\n                                        label={t(\"ExeConfigInfo_PrimaryPort\")}\r\n                                        value={associatedChannel.PrimaryPort}\r\n                                        disabled={channelDisabled}\r\n                                        reserveSpace={false}\r\n                                        onChange={(data) => onChannelFieldChange(\"PrimaryPort\", data)}\r\n                                        error={t(channelValidationErrors.PrimaryPort)}\r\n                                        indicator={associatedChannel.ChannelCode !== \"\" ? \"required\" : \"\"}\r\n                                    />\r\n\r\n                                </div>\r\n                                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                    <Input\r\n                                        fluid\r\n                                        label={t(\"Channel_SecondaryPort\")}\r\n                                        value={associatedChannel.SecondaryPort}\r\n                                        disabled={channelDisabled}\r\n                                        reserveSpace={false}\r\n                                        onChange={(data) => onChannelFieldChange(\"SecondaryPort\", data)}\r\n                                        error={t(channelValidationErrors.SecondaryPort)}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                    <div style={{ width: \"30%\", float: \"right\", marginTop: \"2rem\" }}>\r\n                                        <span style={{ marginLeft: \"1rem\" }}>{t(\"Milliseconds\")}</span>\r\n                                    </div>\r\n                                    <div style={{ width: \"70%\", float: \"left\" }}>\r\n                                        <Input\r\n                                            fluid\r\n                                            label={t(\"Channel_SendTimeOut\")}\r\n                                            value={associatedChannel.SendTimeOut}\r\n                                            disabled={channelDisabled}\r\n                                            reserveSpace={false}\r\n                                            onChange={(data) => onChannelFieldChange(\"SendTimeOut\", data)}\r\n                                            error={t(channelValidationErrors.SendTimeOut)}\r\n                                            indicator={associatedChannel.ChannelCode !== \"\" ? \"required\" : \"\"}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                    <div style={{ width: \"30%\", float: \"right\", marginTop: \"2rem\" }}>\r\n                                        <span style={{ marginLeft: \"1rem\" }}>{t(\"Milliseconds\")}</span>\r\n                                    </div>\r\n                                    <div style={{ width: \"70%\", float: \"left\" }}>\r\n                                        <Input\r\n                                            fluid\r\n                                            label={t(\"Channel_RetryInterval\")}\r\n                                            value={associatedChannel.RetryInterval}\r\n                                            disabled={channelDisabled}\r\n                                            reserveSpace={false}\r\n                                            onChange={(data) => onChannelFieldChange(\"RetryInterval\", data)}\r\n                                            error={t(channelValidationErrors.RetryInterval)}\r\n                                            indicator={associatedChannel.ChannelCode !== \"\" ? \"required\" : \"\"}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                    <div style={{ width: \"30%\", float: \"right\", marginTop: \"2rem\" }}>\r\n                                        <span style={{ marginLeft: \"1rem\" }}>{t(\"Milliseconds\")}</span>\r\n                                    </div>\r\n                                    <div style={{ width: \"70%\", float: \"left\" }}>\r\n                                        <Input\r\n                                            fluid\r\n                                            label={t(\"Channel_ReceiveTimeOut\")}\r\n                                            value={associatedChannel.ReceiveTimeOut}\r\n                                            disabled={channelDisabled}\r\n                                            reserveSpace={false}\r\n                                            onChange={(data) => onChannelFieldChange(\"ReceiveTimeOut\", data)}\r\n                                            error={t(channelValidationErrors.ReceiveTimeOut)}\r\n                                            indicator={associatedChannel.ChannelCode !== \"\" ? \"required\" : \"\"}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                < div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                    <Input\r\n                                        fluid\r\n                                        label={t(\"Channel_ConnectionRetries\")}\r\n                                        value={associatedChannel.ConnectionRetries}\r\n                                        disabled={channelDisabled}\r\n                                        reserveSpace={false}\r\n                                        onChange={(data) => onChannelFieldChange(\"ConnectionRetries\", data)}\r\n                                        error={t(channelValidationErrors.ConnectionRetries)}\r\n                                        indicator={associatedChannel.ChannelCode !== \"\" ? \"required\" : \"\"}\r\n                                    />\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        )}\r\n\r\n                    </div>\r\n                </div>\r\n                {isBCU ?\r\n                    <div className=\"deviceskipLocalLoadFetch\"\r\n                        style={{ float: \"right\" }}>\r\n                        <Button\r\n                            content={t(\"DeviceInfo_SkipLocalLoadFetch\")}\r\n                            disabled={!enableSkipLocalLoadFetch}\r\n                            onClick={handleSkipLocalLoadFetch}\r\n                        ></Button>\r\n                    </div> : null}\r\n            </div >\r\n        </React.Fragment >\r\n    );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport DeviceDetails from \"../../UIBase/Details/DeviceDetails\";\r\nimport { SiteDetailsUserActions } from \"../../UIBase/Common/SiteDetailsUserActions\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport lodash from \"lodash\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport {\r\n  emptyChannel,\r\n  emptyBCUDeviceInfo,\r\n  emptyCardReaderDeviceInfo,\r\n  emptyDEUDeviceInfo,\r\n  emptyWBDeviceInfo,\r\n  emptyDeviceInfo,\r\n} from \"../../../JS/DefaultEntities\";\r\nimport {\r\n  functionGroups,\r\n  fnDevice,\r\n  fnKPIInformation,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport {\r\n  bcuAttributeEntity,\r\n  cardReaderAttributeEntity,\r\n  weighBridgeAttributeEntity,\r\n  deuAttributeEntity,\r\n} from \"../../../JS/AttributeEntity\";\r\nimport {\r\n  deviceValidationDef,\r\n  deviceChannelValidationDef,\r\n} from \"../../../JS/ValidationDef\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiDeviceDetail } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass DeviceDetailsComposite extends Component {\r\n  state = {\r\n    device: emptyDeviceInfo,\r\n    modDevice: emptyDeviceInfo,\r\n    associatedChannel: [emptyChannel],\r\n    modAssociatedChannel: [emptyChannel],\r\n    isReadyToRender: false,\r\n    saveEnabled: true,\r\n    isDeleteEnabled: false,\r\n    deviceType: \"\",\r\n    deviceTypeOptions: [],\r\n    deviceModelOptions: [],\r\n    densityUOMOptions: [],\r\n    volumeUOMOptions: [],\r\n    massUOMOptions: [],\r\n    temperatureUOMOptions: [],\r\n    pressureUOMOptions: [],\r\n    channelTypeOptions: [],\r\n    channelCodeOptions: [],\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    deuAttributeValidationErrors: [],\r\n    bcuAttributeValidationErrors: [],\r\n    crAttributeValidationErrors: [],\r\n    wbAttributeValidationErrors: [],\r\n    attributeValidationErrors: [],\r\n    validationErrors: Utilities.getInitialValidationErrors(deviceValidationDef),\r\n    channelValidationErrors: Utilities.getInitialValidationErrors(\r\n      deviceChannelValidationDef\r\n    ),\r\n    IsTransloading: false,\r\n    deviceModelsObject: {},\r\n    isMarineTransLoading: false,\r\n    isRailTransloading: false,\r\n    deviceTypeChannels: [],\r\n    isMultiDrop: false,\r\n    deviceKPIList: [],\r\n    showAuthenticationLayout: false,\r\n    tempDevice: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      //this.getDevice(this.props.deviceType)\r\n      this.getTransloadingDetails();\r\n      this.getAttributeMetaData(this.props.deviceType);\r\n      this.getDeviceTypes();\r\n      this.getDeviceModels();\r\n      this.getChannelType();\r\n      this.getUOMList();\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleResetAttributeValidationError(deviceType) {\r\n    try {\r\n      var attributeMetaDataList =\r\n        deviceType === Constants.deviceTypeCode.BCU\r\n          ? this.state.attributeMetaDataList.bcu\r\n          : deviceType === Constants.deviceTypeCode.CARD_READER\r\n          ? this.state.attributeMetaDataList.cardreader\r\n          : deviceType === Constants.deviceTypeCode.WEIGH_BRIDGE\r\n          ? this.state.attributeMetaDataList.weighbridge\r\n          : deviceType === Constants.deviceTypeCode.DEU\r\n          ? this.state.attributeMetaDataList.deu\r\n          : [];\r\n      this.setState({\r\n        attributeValidationErrors:\r\n          Utilities.getAttributeInitialValidationErrors(attributeMetaDataList),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TrailerDetailsComposite:Error occured on handleResetAttributeValidationError\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getDevice(type) {\r\n    try {\r\n      if (type === undefined || type === \"\" || type === null) {\r\n        this.setState({\r\n          device: emptyDeviceInfo,\r\n          modDevice: emptyDeviceInfo,\r\n          modAttributeMetaDataList: [],\r\n          associatedChannel: [lodash.cloneDeep(emptyChannel)],\r\n          modAssociatedChannel: [lodash.cloneDeep(emptyChannel)],\r\n          deviceModelOptions: [],\r\n          isReadyToRender: true,\r\n          channelCodeOptions: [],\r\n          deviceKPIList: [],\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnDevice\r\n          ),\r\n        });\r\n      } else {\r\n        this.handleResetAttributeValidationError(type);\r\n        if (type === Constants.deviceTypeCode.CARD_READER) {\r\n          this.getCRDeviceDetails(this.props.deviceCode);\r\n        } else if (type === Constants.deviceTypeCode.BCU) {\r\n          this.getBCUDeviceDetails(this.props.deviceCode);\r\n          this.getKPIList(Constants.deviceTypes.BCU, this.props.deviceCode);\r\n        } else if (type === Constants.deviceTypeCode.DEU) {\r\n          this.getDEUDeviceDetails(this.props.deviceCode);\r\n        } else if (type === Constants.deviceTypeCode.WEIGH_BRIDGE) {\r\n          this.getWBDeviceDetails(this.props.deviceCode);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in getDevice : \", error);\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      this.getDevice(nextProps.deviceType);\r\n      this.getDeviceModels();\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getAttributeMetaData(deviceType) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [\r\n            bcuAttributeEntity,\r\n            cardReaderAttributeEntity,\r\n            weighBridgeAttributeEntity,\r\n            deuAttributeEntity,\r\n          ],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              modAttributeMetaDataList: [],\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              deuAttributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.deu\r\n                ),\r\n              bcuAttributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.bcu\r\n                ),\r\n              crAttributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.cardreader\r\n                ),\r\n              wbAttributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.weighbridge\r\n                ),\r\n            },\r\n            () => this.getDevice(deviceType)\r\n          );\r\n        } else {\r\n          console.log(\"Error in getAttributes:\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n\r\n  getUOMList() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetUOMList,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            let densityUOMOptions = [];\r\n            let volumeUOMOptions = [];\r\n            let massUOMOptions = [];\r\n            let temperatureUOMOptions = [];\r\n            let pressureUOMOptions = [];\r\n            if (Array.isArray(result.EntityResult.DENSITY)) {\r\n              densityUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.DENSITY\r\n              );\r\n            }\r\n            if (Array.isArray(result.EntityResult.VOLUME)) {\r\n              volumeUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.VOLUME\r\n              );\r\n            }\r\n            if (Array.isArray(result.EntityResult.PRESSURE)) {\r\n              pressureUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.PRESSURE\r\n              );\r\n            }\r\n            if (Array.isArray(result.EntityResult.TEMPERATURE)) {\r\n              temperatureUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.TEMPERATURE\r\n              );\r\n            }\r\n            if (Array.isArray(result.EntityResult.MASS)) {\r\n              massUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.MASS\r\n              );\r\n            }\r\n\r\n            this.setState({\r\n              volumeUOMOptions,\r\n              densityUOMOptions,\r\n              massUOMOptions,\r\n              temperatureUOMOptions,\r\n              pressureUOMOptions,\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"DeviceDetailsComposite:Error while getting GetUOMList\");\r\n    }\r\n  }\r\n\r\n  getCRDeviceDetails(deviceCode) {\r\n    let terminalCode = this.props.selectedTerminal;\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.cardReaderCode,\r\n          value: deviceCode,\r\n        },\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value: terminalCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.cardReaderCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetCRDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let device = lodash.cloneDeep(result.EntityResult);\r\n          device.DeviceType = Constants.deviceTypeCode.CARD_READER;\r\n          this.GetChannelsForDeviceTypes(Constants.deviceTypes.CARD_READER);\r\n          this.setState(\r\n            {\r\n              device: lodash.cloneDeep(device),\r\n              modDevice: lodash.cloneDeep(device),\r\n              isReadyToRender: true,\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnDevice\r\n              ),\r\n            },\r\n            () => {\r\n              this.formAttributes(\r\n                Constants.deviceTypeCode.CARD_READER,\r\n                result.EntityResult.TerminalCode\r\n              );\r\n              // this.getKPIList(this.props.deviceType,this.props.deviceCode)\r\n            }\r\n          );\r\n\r\n          if (result.EntityResult.AssociatedChannels.length > 0) {\r\n            let modAssociatedChannel = lodash.cloneDeep(\r\n              result.EntityResult.AssociatedChannels\r\n            );\r\n            modAssociatedChannel[0].ChannelType = \"TCP/IP\";\r\n            modAssociatedChannel[0].PrevChannelId =\r\n              modAssociatedChannel[0].ChannelCode;\r\n            modAssociatedChannel[0].PrevChnId =\r\n              modAssociatedChannel[0].ChannelCode;\r\n            modAssociatedChannel[0].IsPrevMultiDrop = result.EntityResult\r\n              .MultiDrop\r\n              ? \"1\"\r\n              : \"0\";\r\n            this.setState({\r\n              modAssociatedChannel,\r\n              associatedChannel: modAssociatedChannel,\r\n            });\r\n          } else {\r\n            let modAssociatedChannel = lodash.cloneDeep(\r\n              this.state.modAssociatedChannel\r\n            );\r\n            let channelInfo = lodash.cloneDeep(emptyChannel);\r\n            channelInfo.ReceiveTimeOut = \"\";\r\n            channelInfo.SendTimeOut = \"\";\r\n            channelInfo.RetryInterval = \"\";\r\n            channelInfo.ConnectionRetries = \"\";\r\n\r\n            modAssociatedChannel = [channelInfo];\r\n            this.setState({\r\n              modAssociatedChannel: modAssociatedChannel,\r\n              associatedChannel: modAssociatedChannel,\r\n            });\r\n          }\r\n        } else {\r\n          this.setState({\r\n            device: emptyDeviceInfo,\r\n            modDevice: emptyDeviceInfo,\r\n            modAttributeMetaDataList: [],\r\n            associatedChannel: [lodash.cloneDeep(emptyChannel)],\r\n            modAssociatedChannel: [lodash.cloneDeep(emptyChannel)],\r\n            deviceModelOptions: [],\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in getDevice\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite:Error while getting getCRDeviceDetails\"\r\n      );\r\n    }\r\n  }\r\n\r\n  getBCUDeviceDetails(deviceCode) {\r\n    let terminalCode = this.props.selectedTerminal;\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.bcuCode,\r\n          value: deviceCode,\r\n        },\r\n      ];\r\n      if (this.props.source === undefined || this.props.source === null)\r\n        keyCode.push({\r\n          key: KeyCodes.terminalCode,\r\n          value: terminalCode,\r\n        });\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.bcuCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.GetBCUDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let device = lodash.cloneDeep(result.EntityResult);\r\n          device.DeviceType = Constants.deviceTypeCode.BCU;\r\n          this.GetChannelsForDeviceTypes(Constants.deviceTypes.BCU);\r\n          this.setState(\r\n            {\r\n              device: lodash.cloneDeep(device),\r\n              modDevice: lodash.cloneDeep(device),\r\n              isReadyToRender: true,\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnDevice\r\n              ),\r\n            },\r\n            () => {\r\n              this.formAttributes(\r\n                Constants.deviceTypeCode.BCU,\r\n                result.EntityResult.TerminalCode\r\n              );\r\n              this.getKPIList(Constants.deviceTypes.BCU, this.props.deviceCode);\r\n            }\r\n          );\r\n          if (result.EntityResult.AssociatedChannels.length > 0) {\r\n            let modAssociatedChannel = lodash.cloneDeep(\r\n              result.EntityResult.AssociatedChannels\r\n            );\r\n            modAssociatedChannel[0].ChannelType = \"TCP/IP\";\r\n            modAssociatedChannel[0].PrevChannelId =\r\n              modAssociatedChannel[0].ChannelCode;\r\n            modAssociatedChannel[0].IsPrevMultiDrop = result.EntityResult\r\n              .MultiDrop\r\n              ? \"1\"\r\n              : \"0\";\r\n            modAssociatedChannel[0].PrevChnId =\r\n              modAssociatedChannel[0].ChannelCode;\r\n            this.setState({\r\n              modAssociatedChannel,\r\n              associatedChannel: modAssociatedChannel,\r\n            });\r\n          } else {\r\n            let modAssociatedChannel = lodash.cloneDeep(\r\n              this.state.modAssociatedChannel\r\n            );\r\n\r\n            let channelInfo = lodash.cloneDeep(emptyChannel);\r\n            channelInfo.ReceiveTimeOut = \"\";\r\n            channelInfo.SendTimeOut = \"\";\r\n            channelInfo.RetryInterval = \"\";\r\n            channelInfo.ConnectionRetries = \"\";\r\n\r\n            modAssociatedChannel = [channelInfo];\r\n\r\n            this.setState({\r\n              modAssociatedChannel: modAssociatedChannel,\r\n              associatedChannel: modAssociatedChannel,\r\n            });\r\n          }\r\n        } else {\r\n          this.setState({\r\n            device: emptyDeviceInfo,\r\n            modDevice: emptyDeviceInfo,\r\n            modAttributeMetaDataList: [],\r\n            associatedChannel: [lodash.cloneDeep(emptyChannel)],\r\n            modAssociatedChannel: [lodash.cloneDeep(emptyChannel)],\r\n            deviceModelOptions: [],\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in getDevice\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite:Error while getting getBCUDeviceDetails\"\r\n      );\r\n    }\r\n  }\r\n\r\n  getDEUDeviceDetails(deviceCode) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.deuCode,\r\n          value: deviceCode,\r\n        },\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value: this.props.selectedTerminal,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.deuCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetDEUDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let device = lodash.cloneDeep(result.EntityResult);\r\n          device.DeviceType = Constants.deviceTypeCode.DEU;\r\n          this.GetChannelsForDeviceTypes(Constants.deviceTypes.DEU);\r\n          this.setState(\r\n            {\r\n              device: lodash.cloneDeep(device),\r\n              modDevice: lodash.cloneDeep(device),\r\n              isReadyToRender: true,\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnDevice\r\n              ),\r\n            },\r\n            () => {\r\n              this.formAttributes(\r\n                Constants.deviceTypeCode.DEU,\r\n                result.EntityResult.TerminalCode\r\n              );\r\n              // this.getKPIList(this.props.selectedShareholder, this.props, deviceCode);\r\n            }\r\n          );\r\n\r\n          if (result.EntityResult.AssociatedChannels.length > 0) {\r\n            let modAssociatedChannel = lodash.cloneDeep(\r\n              result.EntityResult.AssociatedChannels\r\n            );\r\n            modAssociatedChannel[0].ChannelType = \"TCP/IP\";\r\n            this.setState({\r\n              modAssociatedChannel,\r\n              associatedChannel: modAssociatedChannel,\r\n            });\r\n          } else {\r\n            let modAssociatedChannel = lodash.cloneDeep(\r\n              this.state.modAssociatedChannel\r\n            );\r\n            let channelInfo = lodash.cloneDeep(emptyChannel);\r\n            channelInfo.ReceiveTimeOut = \"\";\r\n            channelInfo.SendTimeOut = \"\";\r\n            channelInfo.RetryInterval = \"\";\r\n            channelInfo.ConnectionRetries = \"\";\r\n\r\n            modAssociatedChannel = [channelInfo];\r\n            this.setState({\r\n              modAssociatedChannel: modAssociatedChannel,\r\n              associatedChannel: modAssociatedChannel,\r\n            });\r\n          }\r\n        } else {\r\n          this.setState({\r\n            device: emptyDeviceInfo,\r\n            modDevice: emptyDeviceInfo,\r\n            modAttributeMetaDataList: [],\r\n            associatedChannel: [lodash.cloneDeep(emptyChannel)],\r\n            modAssociatedChannel: [lodash.cloneDeep(emptyChannel)],\r\n            deviceModelOptions: [],\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in getDevice\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite:Error while getting geDEUDeviceDetails\"\r\n      );\r\n    }\r\n  }\r\n\r\n  getWBDeviceDetails(deviceCode) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.weighBridgeCode,\r\n          value: deviceCode,\r\n        },\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value: this.props.selectedTerminal,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.weighBridgeCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetWBDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let device = lodash.cloneDeep(result.EntityResult);\r\n          device.DeviceType = Constants.deviceTypeCode.WEIGH_BRIDGE;\r\n          this.GetChannelsForDeviceTypes(Constants.deviceTypes.WEIGH_BRIDGE);\r\n          this.setState(\r\n            {\r\n              device: lodash.cloneDeep(device),\r\n              modDevice: lodash.cloneDeep(device),\r\n              isReadyToRender: true,\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnDevice\r\n              ),\r\n            },\r\n            () => {\r\n              //this.getKPIList(this.props.selectedShareholder, this.props.deviceCode)\r\n              this.formAttributes(\r\n                Constants.deviceTypeCode.WEIGH_BRIDGE,\r\n                result.EntityResult.TerminalCode\r\n              );\r\n            }\r\n          );\r\n          let modAssociatedChannel = lodash.cloneDeep(\r\n            this.state.modAssociatedChannel\r\n          );\r\n          let channelInfo = lodash.cloneDeep(emptyChannel);\r\n          channelInfo.ReceiveTimeOut = \"\";\r\n          channelInfo.SendTimeOut = \"\";\r\n          channelInfo.RetryInterval = \"\";\r\n          channelInfo.ConnectionRetries = \"\";\r\n\r\n          modAssociatedChannel = [channelInfo];\r\n          this.setState({\r\n            modAssociatedChannel: modAssociatedChannel,\r\n            associatedChannel: modAssociatedChannel,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            device: emptyDeviceInfo,\r\n            modDevice: emptyDeviceInfo,\r\n            modAttributeMetaDataList: [],\r\n            associatedChannel: [lodash.cloneDeep(emptyChannel)],\r\n            modAssociatedChannel: [lodash.cloneDeep(emptyChannel)],\r\n            deviceModelOptions: [],\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in getDevice\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite:Error while getting geDEUDeviceDetails\"\r\n      );\r\n    }\r\n  }\r\n\r\n  getDeviceTypes() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetDeviceTypes,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            var deviceTypeOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n\r\n            this.setState({ deviceTypeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getDeviceTypes:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"DeviceDetailsComposite:Error while getting getDeviceTypes\");\r\n    }\r\n  }\r\n\r\n  getDeviceModels() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetDeviceModels,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let deviceModelOptions = [];\r\n          let deviceModelsObject = result.EntityResult;\r\n          if (\r\n            Array.isArray(result.EntityResult.CARD_READER) &&\r\n            this.props.deviceType === Constants.deviceTypeCode.CARD_READER\r\n          ) {\r\n            deviceModelOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult.CARD_READER\r\n            );\r\n          }\r\n          if (\r\n            Array.isArray(result.EntityResult.BCU) &&\r\n            this.props.deviceType === Constants.deviceTypeCode.BCU\r\n          ) {\r\n            deviceModelOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult.BCU\r\n            );\r\n          }\r\n          if (\r\n            this.props.deviceType === \"\" ||\r\n            this.state.deviceTypeOptions === \"BCU\"\r\n          ) {\r\n            deviceModelOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult.BCU\r\n            );\r\n          }\r\n          if (\r\n            Array.isArray(result.EntityResult.DEU) &&\r\n            this.props.deviceType === Constants.deviceTypeCode.DEU\r\n          ) {\r\n            deviceModelOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult.DEU\r\n            );\r\n          }\r\n          if (\r\n            Array.isArray(result.EntityResult.WEIGH_BRIDGE) &&\r\n            this.props.deviceType === Constants.deviceTypeCode.WEIGH_BRIDGE\r\n          ) {\r\n            deviceModelOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult.WEIGH_BRIDGE\r\n            );\r\n          }\r\n          this.setState({\r\n            deviceModelOptions,\r\n            deviceModelsObject,\r\n          });\r\n        } else {\r\n          console.log(\r\n            \"Error in getDeviceModels:\",\r\n            this.state.deviceModelOptions\r\n          );\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"DeviceDetailsComposite:Error while getting getDeviceModels\");\r\n    }\r\n  }\r\n\r\n  GetChannelsForDeviceTypes(deviceType) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetChannelsForDeviceTypes + \"?deviceType=\" + deviceType,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let channelCodes = [];\r\n            result.EntityResult.forEach((item) => {\r\n              channelCodes.push(item.ChannelCode);\r\n            });\r\n            var channelCodeOptions =\r\n              Utilities.transferListtoOptions(channelCodes);\r\n            this.setState({\r\n              channelCodeOptions,\r\n              deviceTypeChannels: result.EntityResult,\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getChannelType:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"DeviceDetailsComposite:Error while getting getChannelType\");\r\n    }\r\n  }\r\n\r\n  getChannelType() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetChannelType,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            var channelTypeOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ channelTypeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getChannelType:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"DeviceDetailsComposite:Error while getting getChannelType\");\r\n    }\r\n  }\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite:Error occured on handleAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleSetBCUSkipLocalLoadFetch = () => {\r\n    try {\r\n      let modDevice = lodash.cloneDeep(this.state.modDevice);\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.bcuCode,\r\n          value: modDevice.Code,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.bcuCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modDevice,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"BCUSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"BCUCode\"],\r\n            keyValues: [modDevice.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"DeviceInfo_LOCALTRANSUPLOADSuccessMsg\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.SetBCUSkipLocalLoadFetch,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess !== true)\r\n          notification.messageResultDetails[0].errorMessage =\r\n            \"DeviceInfo_LOCALTRANSUPLOADFailureMsg\";\r\n        else notification.message = [\"DeviceInfo_LOCALTRANSUPLOADSuccessMsg\"];\r\n\r\n        this.props.onSaved(modDevice, \"update\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error in handleSetBCUSkipLocalLoadFetch\");\r\n    }\r\n  };\r\n\r\n  saveDevice = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempDevice = lodash.cloneDeep(this.state.tempDevice);\r\n\r\n      if (tempDevice.DeviceType === Constants.deviceTypeCode.CARD_READER)\r\n      this.state.device.Code !== \"\"\r\n        ? this.UpdateCardReaderDevice(tempDevice)\r\n        : this.CreateCardReaderDevice(tempDevice);\r\n    else if (tempDevice.DeviceType === Constants.deviceTypeCode.BCU)\r\n      this.state.device.Code !== \"\"\r\n        ? this.UpdateBCUDevice(tempDevice)\r\n        : this.CreateBCUDevice(tempDevice);\r\n    else if (tempDevice.DeviceType === Constants.deviceTypeCode.DEU)\r\n      this.state.device.Code !== \"\"\r\n        ? this.UpdateDEUDevice(tempDevice)\r\n        : this.CreateDEUDevice(tempDevice);\r\n    else if (tempDevice.DeviceType === Constants.deviceTypeCode.WEIGH_BRIDGE)\r\n      this.state.device.Code !== \"\"\r\n        ? this.UpdateWBDevice(tempDevice)\r\n        : this.CreateWBDevice(tempDevice);\r\n\r\n    } catch (error) {\r\n      console.log(\"DeviceComposite : Error in savePrimeMover\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n   //   this.setState({ saveEnabled: false });\r\n      let modDevice = this.fillDetails();\r\n\r\n      let tempAttributeList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let attributeList = lodash.cloneDeep(this.state.modAttributeMetaDataList);\r\n\r\n      if (Array.isArray(attributeList)) {\r\n        tempAttributeList.forEach((item) => {\r\n          item.attributeMetaDataList = [];\r\n\r\n          var index = attributeList.findIndex((x) => {\r\n            return x.TerminalCode === item.TerminalCode;\r\n          });\r\n\r\n          if (index >= 0) {\r\n            attributeList[index].attributeMetaDataList.forEach((attribute) => {\r\n              if (attribute.IsVisible)\r\n                item.attributeMetaDataList.push(attribute);\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      attributeList =\r\n        Utilities.attributesConverttoLocaleString(tempAttributeList);\r\n      if (this.validateSave(modDevice, attributeList)) {\r\n        attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n        modDevice.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n        \r\n        let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      let tempDevice = lodash.cloneDeep(modDevice);\r\n      this.setState({ showAuthenticationLayout, tempDevice }, () => {\r\n        if (showAuthenticationLayout === false) {\r\n          this.saveDevice();\r\n        }\r\n    });\r\n\r\n      } else this.setState({ saveEnabled: true });\r\n    } catch (error) {\r\n      console.log(\"DeviceDetailsComposite:Error occured on handleSave\", error);\r\n    }\r\n  };\r\n\r\n  validateSave(modDevice, attributeList) {\r\n    var returnValue = true;\r\n    try {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      const channelValidationErrors = { ...this.state.channelValidationErrors };\r\n\r\n      Object.keys(deviceValidationDef).forEach(function (key) {\r\n        if (modDevice[key] !== undefined)\r\n          validationErrors[key] = Utilities.validateField(\r\n            deviceValidationDef[key],\r\n            modDevice[key]\r\n          );\r\n      });\r\n\r\n      if (\r\n        modDevice.AssociatedChannels !== undefined &&\r\n        modDevice.AssociatedChannels !== null &&\r\n        modDevice.AssociatedChannels.length > 0\r\n      ) {\r\n        Object.keys(deviceChannelValidationDef).forEach(function (key) {\r\n          if (modDevice.AssociatedChannels[0][key] !== undefined)\r\n            channelValidationErrors[key] = Utilities.validateField(\r\n              deviceChannelValidationDef[key],\r\n              modDevice.AssociatedChannels[0][key]\r\n            );\r\n        });\r\n\r\n        if (\r\n          modDevice.AssociatedChannels[0].SecondaryAddress !== \"\" &&\r\n          modDevice.AssociatedChannels[0].SecondaryAddress !== null &&\r\n          (modDevice.AssociatedChannels[0].SecondaryPort === \"\" ||\r\n            modDevice.AssociatedChannels[0].SecondaryPort === null)\r\n        )\r\n          channelValidationErrors[\"SecondaryPort\"] = \"Channel_MandatorySPNos\";\r\n        else if (\r\n          (modDevice.AssociatedChannels[0].SecondaryAddress === \"\" ||\r\n            modDevice.AssociatedChannels[0].SecondaryAddress === null) &&\r\n          modDevice.AssociatedChannels[0].SecondaryPort !== \"\" &&\r\n          modDevice.AssociatedChannels[0].SecondaryPort !== null\r\n        )\r\n          channelValidationErrors[\"SecondaryAddress\"] =\r\n            \"Channel_MandatorySPRegex\";\r\n      }\r\n\r\n      if (\r\n        this.props.deviceType === Constants.deviceTypeCode.BCU ||\r\n        modDevice.DeviceType === Constants.deviceTypeCode.BCU\r\n      ) {\r\n        if (\r\n          modDevice.Model.toUpperCase() !==\r\n            Constants.DeviceModels.AcculoadIII.toUpperCase() &&\r\n          modDevice.Model.toUpperCase() !==\r\n            Constants.DeviceModels.AcculoadIV.toUpperCase() &&\r\n          modDevice.Model.toUpperCase() !==\r\n            Constants.DeviceModels.DanLoad.toUpperCase() &&\r\n          modDevice.Model.toUpperCase() !==\r\n            Constants.DeviceModels.VirtualPreset.toUpperCase() &&\r\n          (modDevice.NodeAddress === null || modDevice.NodeAddress === \"\")\r\n        )\r\n          validationErrors[\"NodeAddress\"] = \"DeviceInfo_NodeAddressRequired\";\r\n      } else if (\r\n        this.props.deviceType === Constants.deviceTypeCode.CARD_READER ||\r\n        modDevice.DeviceType === Constants.deviceTypeCode.CARD_READER\r\n      ) {\r\n        if (modDevice.NodeAddress === null || modDevice.NodeAddress === \"\")\r\n          validationErrors[\"NodeAddress\"] = \"DeviceInfo_NodeAddressRequired\";\r\n      } else if (\r\n        this.props.deviceType === Constants.deviceTypeCode.WEIGH_BRIDGE ||\r\n        modDevice.DeviceType === Constants.deviceTypeCode.WEIGH_BRIDGE\r\n      ) {\r\n        if (modDevice.WeightUOM === null || modDevice.WeightUOM === \"\")\r\n          validationErrors[\"WeightUOM\"] = \"WB_UOMRequired\";\r\n      }\r\n\r\n      if (modDevice.Active !== this.state.device.Active) {\r\n        if (modDevice.Remarks === null || modDevice.Remarks === \"\") {\r\n          validationErrors[\"Remarks\"] = \"OriginTerminal_RemarksRequired\";\r\n        }\r\n      }\r\n\r\n      var attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeList.forEach((attribute) => {\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n            attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n              if (attributeMetaData.IsVisible === true) {\r\n                attributeValidation.attributeValidationErrors[\r\n                  attributeMetaData.Code\r\n                ] = Utilities.valiateAttributeField(\r\n                  attributeMetaData,\r\n                  attributeMetaData.DefaultValue\r\n                );\r\n              }\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      this.setState({\r\n        attributeValidationErrors,\r\n        validationErrors,\r\n        channelValidationErrors,\r\n      });\r\n\r\n      attributeValidationErrors.forEach((x) => {\r\n        if (returnValue) {\r\n          returnValue = Object.values(x.attributeValidationErrors).every(\r\n            function (value) {\r\n              return value === \"\";\r\n            }\r\n          );\r\n        } else {\r\n          return returnValue;\r\n        }\r\n      });\r\n\r\n      if (returnValue)\r\n        returnValue = Object.values(channelValidationErrors).every(function (\r\n          value\r\n        ) {\r\n          return value === \"\";\r\n        });\r\n\r\n      if (returnValue)\r\n        returnValue = Object.values(validationErrors).every(function (value) {\r\n          return value === \"\";\r\n        });\r\n    } catch (error) {\r\n      console.log(\"DeviceDetailsComposite : Error in validate save\", error);\r\n    }\r\n    return returnValue;\r\n  }\r\n\r\n  getTransloadingDetails() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=Transloading\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult != null) {\r\n              this.setState({\r\n                isMarineTransLoading:\r\n                  result.EntityResult.MarineEnable.toUpperCase() === \"TRUE\"\r\n                    ? true\r\n                    : false,\r\n                isRailTransloading:\r\n                  result.EntityResult.RAILEnable.toUpperCase() === \"TRUE\"\r\n                    ? true\r\n                    : false,\r\n              });\r\n            } else {\r\n              this.setState({\r\n                isMarineTransLoading: false,\r\n                isRailTransloading: false,\r\n              });\r\n            }\r\n          } else {\r\n            this.setState({\r\n              isMarineTransLoading: false,\r\n              isRailTransloading: false,\r\n            });\r\n            console.log(\"Error in getTransloadingDetails: \", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          this.setState({\r\n            productAllocationList: [],\r\n            productShareholderAllocationList: [],\r\n            ProdAllocEntity: \"\",\r\n          });\r\n          console.log(\r\n            \"DeviceDetailsComposite: Error occurred on getTransloadingDetails\",\r\n            error\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite: Error occurred on getTransloadingDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  fillDetails() {\r\n    try {\r\n      let modDevice = {};\r\n\r\n      let modAssociatedChannel = lodash.cloneDeep(\r\n        this.state.modAssociatedChannel\r\n      );\r\n\r\n      modDevice = lodash.cloneDeep(this.state.modDevice);\r\n      modDevice.TerminalCode = this.props.selectedTerminal;\r\n      modDevice.LastUpdatedBy =\r\n        this.props.userDetails.EntityResult.Firstname +\r\n        \" \" +\r\n        this.props.userDetails.EntityResult.LastName;\r\n      if (modDevice.DeviceType === Constants.deviceTypeCode.DEU) {\r\n        if (modDevice.ResponseWaitTime <= 0) {\r\n          modDevice.ResponseWaitTime = 3000;\r\n        }\r\n        if (modDevice.RefreshTime <= 0) {\r\n          modDevice.RefreshTime = 3000;\r\n        }\r\n      }\r\n\r\n      if (modDevice.DeviceType === Constants.deviceTypeCode.CARD_READER) {\r\n        if (\r\n          modDevice.Model === Constants.DeviceModels.Nedap ||\r\n          modDevice.Model === Constants.DeviceModels.SIMATIC_BARCODE ||\r\n          modDevice.Model === Constants.DeviceModels.MORPHO_BIOMETRIC\r\n        )\r\n          modDevice.NodeAddress = \"0\";\r\n      }\r\n\r\n      if (modDevice.DeviceType === Constants.deviceTypeCode.BCU) {\r\n        if (\r\n          modDevice.Model === Constants.DeviceModels.AcculoadIII ||\r\n          modDevice.Model === Constants.DeviceModels.AcculoadIV ||\r\n          modDevice.Model === Constants.DeviceModels.DanLoad ||\r\n          modDevice.Model === Constants.DeviceModels.VirtualPreset\r\n        )\r\n          modDevice.NodeAddress = \"0\";\r\n        modDevice.SCADAConfiguration = null;\r\n      }\r\n\r\n      if (\r\n        modAssociatedChannel !== undefined &&\r\n        modAssociatedChannel !== null &&\r\n        modAssociatedChannel.length > 0 &&\r\n        modAssociatedChannel[0].ChannelCode !== \"\"\r\n      ) {\r\n        modDevice.AssociatedChannels = modAssociatedChannel;\r\n      }\r\n\r\n      return modDevice;\r\n    } catch (err) {\r\n      console.log(\"DeviceDetailsComposite:Error occured on filldetails\", err);\r\n    }\r\n  }\r\n\r\n  CreateCardReaderDevice(modDevice) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.cardReaderCode,\r\n          value: modDevice.Code,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.cardReaderCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modDevice,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"CARDREADERSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"DEU_CardReaderID\"],\r\n            keyValues: [modDevice.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.CreateCRDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.setState(\r\n              {\r\n                saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnDevice\r\n                ),\r\n                showAuthenticationLayout: false,\r\n              },\r\n              () => this.getCRDeviceDetails(modDevice.Code)\r\n            );\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            this.setState({\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnDevice\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            });\r\n          }\r\n          this.props.onSaved(this.state.modDevice, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnDevice\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(modDevice, \"add\", notification);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  }\r\n\r\n  CreateDEUDevice(modDevice) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.deuCode,\r\n          value: modDevice.Code,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.deuCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modDevice,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"DEUSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"DEUCode\"],\r\n            keyValues: [modDevice.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.CreateDEUDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            this.setState(\r\n              {\r\n                saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnDevice\r\n                ),\r\n                showAuthenticationLayout: false,\r\n              },\r\n              () => this.getDEUDeviceDetails(modDevice.Code)\r\n            );\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            this.setState({\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.add,\r\n                fnDevice\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            });\r\n          }\r\n          this.props.onSaved(this.state.modDevice, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnDevice\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(modDevice, \"add\", notification);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  }\r\n\r\n  CreateWBDevice(modDevice) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.weighBridgeCode,\r\n          value: modDevice.Code,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.weighBridgeCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modDevice,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"WeighBridgeSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"WeighBridgeCode\"],\r\n            keyValues: [modDevice.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.CreateWBDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            this.setState(\r\n              {\r\n                saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnDevice\r\n                ),\r\n                showAuthenticationLayout: false,\r\n              },\r\n              () => this.getWBDeviceDetails(modDevice.Code)\r\n            );\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            this.setState({\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.add,\r\n                fnDevice\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            });\r\n          }\r\n          this.props.onSaved(this.state.modDevice, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnDevice\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(modDevice, \"add\", notification);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  }\r\n\r\n  UpdateCardReaderDevice(modDevice) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.cardReaderCode,\r\n          value: modDevice.Code,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.cardReaderCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modDevice,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"CARDREADERSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"DEU_CardReaderID\"],\r\n            keyValues: [modDevice.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.UpdateCRDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnDevice\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () => this.getCRDeviceDetails(modDevice.Code)\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnDevice\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n        }\r\n        this.props.onSaved(this.state.modDevice, \"update\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  }\r\n\r\n  UpdateDEUDevice(modDevice) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.deuCode,\r\n          value: modDevice.Code,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.deuCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modDevice,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"DEUSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"DEUCode\"],\r\n            keyValues: [modDevice.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.UpdateDEUDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnDevice\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () => this.getDEUDeviceDetails(modDevice.Code)\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnDevice\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n        }\r\n        this.props.onSaved(this.state.modDevice, \"update\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  }\r\n\r\n  UpdateWBDevice(modDevice) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.weighBridgeCode,\r\n          value: modDevice.Code,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.weighBridgeCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modDevice,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"WeighBridgeSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"WeighBridgeCode\"],\r\n            keyValues: [modDevice.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.UpdateWBDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnDevice\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () => this.getWBDeviceDetails(modDevice.Code)\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnDevice\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n        }\r\n        this.props.onSaved(this.state.modDevice, \"update\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  }\r\n\r\n  UpdateBCUDevice(modDevice) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.bcuCode,\r\n          value: modDevice.Code,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.bcuCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modDevice,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"BCUSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"BCUCode\"],\r\n            keyValues: [modDevice.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.UpdateBCUDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnDevice\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () => this.getBCUDeviceDetails(modDevice.Code)\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnDevice\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n        }\r\n        this.props.onSaved(this.state.modDevice, \"update\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite:Error occured on updateDevice\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  formAttributes(deviceType, receivedTerminal) {\r\n    try {\r\n      var attributeMetaDataList =\r\n        deviceType === Constants.deviceTypeCode.BCU\r\n          ? lodash.cloneDeep(this.state.attributeMetaDataList.bcu)\r\n          : deviceType === Constants.deviceTypeCode.CARD_READER\r\n          ? lodash.cloneDeep(this.state.attributeMetaDataList.cardreader)\r\n          : deviceType === Constants.deviceTypeCode.WEIGH_BRIDGE\r\n          ? lodash.cloneDeep(this.state.attributeMetaDataList.weighbridge)\r\n          : deviceType === Constants.deviceTypeCode.DEU\r\n          ? lodash.cloneDeep(this.state.attributeMetaDataList.deu)\r\n          : [];\r\n\r\n      var modAttributeMetaDataList = [];\r\n      let attributesTerminalsList = [];\r\n\r\n      if (attributeMetaDataList.length > 0) {\r\n        modAttributeMetaDataList = lodash.cloneDeep(\r\n          this.state.modAttributeMetaDataList\r\n        );\r\n\r\n        const attributeValidationErrors =\r\n          deviceType === Constants.deviceTypeCode.BCU\r\n            ? this.state.bcuAttributeValidationErrors\r\n            : deviceType === Constants.deviceTypeCode.CARD_READER\r\n            ? this.state.crAttributeValidationErrors\r\n            : deviceType === Constants.deviceTypeCode.WEIGH_BRIDGE\r\n            ? this.state.wbAttributeValidationErrors\r\n            : deviceType === Constants.deviceTypeCode.DEU\r\n            ? this.state.deuAttributeValidationErrors\r\n            : [];\r\n\r\n        let terminal =\r\n          receivedTerminal === undefined ||\r\n          receivedTerminal === null ||\r\n          receivedTerminal === \"\"\r\n            ? attributeMetaDataList[0].TerminalCode\r\n            : receivedTerminal;\r\n\r\n        var modDevice = lodash.cloneDeep(this.state.modDevice);\r\n\r\n        var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n          return selectedAttribute.TerminalCode === terminal;\r\n        });\r\n        if (existitem === undefined) {\r\n          attributeMetaDataList.forEach(function (attributeMetaData) {\r\n            if (attributeMetaData.TerminalCode === terminal) {\r\n              var Attributevalue = modDevice.Attributes.find(\r\n                (trailerAttribute) => {\r\n                  return trailerAttribute.TerminalCode === terminal;\r\n                }\r\n              );\r\n              if (Attributevalue !== undefined) {\r\n                attributeMetaData.attributeMetaDataList.forEach(function (\r\n                  attributeMetaData\r\n                ) {\r\n                  var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                    (x) => {\r\n                      return x.AttributeCode === attributeMetaData.Code;\r\n                    }\r\n                  );\r\n                  if (valueAttribute !== undefined)\r\n                    attributeMetaData.DefaultValue =\r\n                      valueAttribute.AttributeValue;\r\n                });\r\n              }\r\n              attributesTerminalsList.push(attributeMetaData);\r\n            }\r\n          });\r\n        } else {\r\n          attributesTerminalsList.push(existitem);\r\n        }\r\n        modAttributeMetaDataList = [];\r\n        modAttributeMetaDataList = attributesTerminalsList;\r\n\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = [terminal].find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      let modDevice = lodash.cloneDeep(this.state.modDevice);\r\n      let deviceModelOptions = lodash.cloneDeep(this.state.deviceModelOptions);\r\n      modDevice[propertyName] = data;\r\n      if (propertyName === \"DeviceType\") {\r\n        modDevice =\r\n          Constants.deviceTypeCode[data] === Constants.deviceTypeCode.BCU\r\n            ? lodash.cloneDeep(emptyBCUDeviceInfo)\r\n            : Constants.deviceTypeCode[data] ===\r\n              Constants.deviceTypeCode.CARD_READER\r\n            ? lodash.cloneDeep(emptyCardReaderDeviceInfo)\r\n            : Constants.deviceTypeCode[data] ===\r\n              Constants.deviceTypeCode.WEIGH_BRIDGE\r\n            ? lodash.cloneDeep(emptyWBDeviceInfo)\r\n            : Constants.deviceTypeCode[data] === Constants.deviceTypeCode.DEU\r\n            ? lodash.cloneDeep(emptyDEUDeviceInfo)\r\n            : emptyDeviceInfo;\r\n        modDevice[propertyName] = Constants.deviceTypeCode[data];\r\n        let channelInfo = lodash.cloneDeep(emptyChannel);\r\n        channelInfo.ReceiveTimeOut =\r\n          Constants.deviceTypeCode[data] === Constants.deviceTypeCode.DEU ||\r\n          Constants.deviceTypeCode[data] ===\r\n            Constants.deviceTypeCode.WEIGH_BRIDGE\r\n            ? \"\"\r\n            : \"5000\";\r\n        channelInfo.SendTimeOut =\r\n          Constants.deviceTypeCode[data] === Constants.deviceTypeCode.DEU ||\r\n          Constants.deviceTypeCode[data] ===\r\n            Constants.deviceTypeCode.WEIGH_BRIDGE\r\n            ? \"\"\r\n            : \"5000\";\r\n        channelInfo.RetryInterval =\r\n          Constants.deviceTypeCode[data] === Constants.deviceTypeCode.DEU ||\r\n          Constants.deviceTypeCode[data] ===\r\n            Constants.deviceTypeCode.WEIGH_BRIDGE\r\n            ? \"\"\r\n            : \"10000\";\r\n        channelInfo.ConnectionRetries =\r\n          Constants.deviceTypeCode[data] === Constants.deviceTypeCode.DEU ||\r\n          Constants.deviceTypeCode[data] ===\r\n            Constants.deviceTypeCode.WEIGH_BRIDGE\r\n            ? \"\"\r\n            : \"5\";\r\n\r\n        this.setState(\r\n          {\r\n            modDevice,\r\n            modAttributeMetaDataList: [],\r\n            modAssociatedChannel: [channelInfo],\r\n          },\r\n          () => {\r\n            this.handleResetAttributeValidationError(\r\n              Constants.deviceTypeCode[data]\r\n            );\r\n            this.formAttributes(Constants.deviceTypeCode[data]);\r\n          }\r\n        );\r\n        deviceModelOptions = Utilities.transferListtoOptions(\r\n          this.state.deviceModelsObject[data]\r\n        );\r\n        this.GetChannelsForDeviceTypes(data);\r\n        this.setState({ deviceModelOptions });\r\n      }\r\n      if (\r\n        (propertyName === \"Model\" || propertyName === \"DEUType\") &&\r\n        !this.state.isMultiDrop\r\n      ) {\r\n        modDevice.MultiDrop = false;\r\n      }\r\n      if (\r\n        propertyName === \"DEUType\" &&\r\n        modDevice.DeviceType === Constants.deviceTypeCode.DEU\r\n      ) {\r\n        let channelInfo = lodash.cloneDeep(emptyChannel);\r\n\r\n        channelInfo.ReceiveTimeOut =\r\n          data.toUpperCase() ===\r\n          Constants.DeviceModels.TouchScreen.toUpperCase()\r\n            ? \"\"\r\n            : \"3000\";\r\n        channelInfo.SendTimeOut =\r\n          data.toUpperCase() ===\r\n          Constants.DeviceModels.TouchScreen.toUpperCase()\r\n            ? \"\"\r\n            : \"3000\";\r\n        channelInfo.RetryInterval =\r\n          data.toUpperCase() ===\r\n          Constants.DeviceModels.TouchScreen.toUpperCase()\r\n            ? \"\"\r\n            : \"10000\";\r\n        channelInfo.ConnectionRetries =\r\n          data.toUpperCase() ===\r\n          Constants.DeviceModels.TouchScreen.toUpperCase()\r\n            ? \"\"\r\n            : \"2\";\r\n        this.setState({\r\n          modAssociatedChannel: [channelInfo],\r\n        });\r\n      }\r\n      if (propertyName === \"MultiDrop\") {\r\n        this.setState({ isMultiDrop: data });\r\n        if (data) {\r\n          let channelInfo = lodash.cloneDeep(emptyChannel);\r\n          channelInfo.ReceiveTimeOut = \"\";\r\n          channelInfo.SendTimeOut = \"\";\r\n          channelInfo.RetryInterval = \"\";\r\n          channelInfo.ConnectionRetries = \"\";\r\n\r\n          this.setState({ modAssociatedChannel: [channelInfo] });\r\n        } else\r\n          this.setState({\r\n            modAssociatedChannel: this.state.associatedChannel,\r\n          });\r\n      }\r\n      this.setState({ modDevice });\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (deviceValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          deviceValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  GetChannel(ChannelCode) {\r\n    let channelInfo = {};\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.channelCode,\r\n          value: ChannelCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.channelCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetChannel,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          if (result.IsSuccess) {\r\n            channelInfo = result.EntityResult;\r\n\r\n            let modAssociatedChannel = lodash.cloneDeep(\r\n              this.state.modAssociatedChannel\r\n            );\r\n\r\n            if (\r\n              channelInfo !== undefined &&\r\n              channelInfo.ChannelCode !== undefined\r\n            ) {\r\n              modAssociatedChannel = [channelInfo];\r\n              modAssociatedChannel[0].ChannelType = \"TCP/IP\";\r\n              modAssociatedChannel[0].PrevChannelId =\r\n                modAssociatedChannel[0].ChannelCode;\r\n              modAssociatedChannel[0].IsPrevMultiDrop = result.EntityResult\r\n                .MultiDrop\r\n                ? \"1\"\r\n                : \"0\";\r\n            }\r\n            this.setState({ modAssociatedChannel });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error in getting channel information\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in getting channelInfo\", error);\r\n    }\r\n  }\r\n\r\n  handleChannelChange = (propertyName, data) => {\r\n    try {\r\n      let modAssociatedChannel = lodash.cloneDeep(\r\n        this.state.modAssociatedChannel\r\n      );\r\n\r\n      if (\r\n        propertyName === \"ChannelCode\" &&\r\n        data !== \"\" &&\r\n        this.state.isMultiDrop === true\r\n      )\r\n        this.GetChannel(data);\r\n      else {\r\n        modAssociatedChannel.forEach((associatedChannel) => {\r\n          if (propertyName === \"PortType\") data = data === true ? 1 : 0;\r\n          associatedChannel[propertyName] = data;\r\n        });\r\n\r\n        this.setState({ modAssociatedChannel });\r\n      }\r\n\r\n      let channelValidationErrors = lodash.cloneDeep(\r\n        this.state.channelValidationErrors\r\n      );\r\n      if (deviceChannelValidationDef[propertyName] !== undefined) {\r\n        channelValidationErrors[propertyName] = Utilities.validateField(\r\n          deviceChannelValidationDef[propertyName],\r\n          data\r\n        );\r\n\r\n        if (propertyName === \"ChannelCode\" && data === \"\") {\r\n          channelValidationErrors = Utilities.getInitialValidationErrors(\r\n            deviceChannelValidationDef\r\n          );\r\n        }\r\n        this.setState({ channelValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite:Error occured on handleChannelChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleReset = () => {\r\n    try {\r\n      let deviceType =\r\n        this.props.deviceType !== undefined &&\r\n        this.props.deviceType !== null &&\r\n        this.props.deviceType !== \"\"\r\n          ? this.props.deviceType\r\n          : this.state.device.DeviceType;\r\n\r\n      let deviceModelOptions =\r\n        this.props.deviceType !== undefined &&\r\n        this.props.deviceType !== null &&\r\n        this.props.deviceType !== \"\"\r\n          ? this.state.deviceModelOptions\r\n          : [];\r\n\r\n      this.setState(\r\n        {\r\n          modDevice: lodash.cloneDeep(this.state.device),\r\n          validationErrors:\r\n            Utilities.getInitialValidationErrors(deviceValidationDef),\r\n          channelValidationErrors: Utilities.getInitialValidationErrors(\r\n            deviceChannelValidationDef\r\n          ),\r\n          modAttributeMetaDataList: [],\r\n          modAssociatedChannel: this.state.associatedChannel,\r\n          deviceModelOptions,\r\n        },\r\n        () => {\r\n          this.handleResetAttributeValidationError(deviceType);\r\n          this.formAttributes(deviceType);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        this.props.ShipmentType + \":Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modDevice = lodash.cloneDeep(this.state.modDevice);\r\n      modDevice.Active = value;\r\n      if (modDevice.Active !== this.state.device.Active) modDevice.Remarks = \"\";\r\n      this.setState({ modDevice });\r\n    } catch (error) {\r\n      console.log(\r\n        \"DeviceDetailsComposite:Error occured on handleActiveStatusChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  CreateBCUDevice(modDevice) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.bcuCode,\r\n          value: modDevice.Code,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.bcuCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modDevice,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"BCUSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"BCUCode\"],\r\n            keyValues: [modDevice.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.CreateBCUDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.setState(\r\n              {\r\n                saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnDevice\r\n                ),\r\n                showAuthenticationLayout: false,\r\n              },\r\n              () => this.getBCUDeviceDetails(modDevice.Code)\r\n            );\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            this.setState({\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.add,\r\n                fnDevice\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            });\r\n            console.log(\"Error in CreateDevice:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(modDevice, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnDevice\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(modDevice, \"add\", notification);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  }\r\n  getKPIList(deviceType, deviceCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      let objKPIRequestData = {\r\n        PageName: kpiDeviceDetail,\r\n        InputParameters: [\r\n          { key: \"DeviceType\", value: deviceType },\r\n          { key: \"DeviceCode\", value: deviceCode },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              deviceKPIList: result.EntityResult.ListKPIDetails,\r\n            });\r\n          } else {\r\n            this.setState({ deviceKPIList: [] });\r\n            console.log(\"Error in device KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Driver KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n  \r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"DriverInfo_LastUpdated\",\r\n\r\n        fieldValue:\r\n          this.props.deviceType === Constants.deviceTypeCode.CARD_READER\r\n            ? new Date(this.state.modDevice.LastUpdated).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(this.state.modDevice.LastUpdated).toLocaleTimeString()\r\n            : new Date(\r\n                this.state.modDevice.LastUpdatedTime\r\n              ).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(\r\n                this.state.modDevice.LastUpdatedTime\r\n              ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"DriverInfo_LastActive\",\r\n        fieldValue:\r\n          this.state.modDevice.LastActive !== undefined &&\r\n          this.state.modDevice.LastActive !== null\r\n            ? new Date(this.state.modDevice.LastActive).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(this.state.modDevice.LastActive).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"DriverInfo_CreatedTime\",\r\n        fieldValue:\r\n          this.props.deviceType === Constants.deviceTypeCode.CARD_READER\r\n            ? new Date(this.state.modDevice.Created).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(this.state.modDevice.Created).toLocaleTimeString()\r\n            : new Date(this.state.modDevice.CreatedTime).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(this.state.modDevice.CreatedTime).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"SealMasterList_LastUpdatedBy\",\r\n        fieldValue: this.state.modDevice.LastUpdatedBy,\r\n      },\r\n    ];\r\n\r\n    let transloadingOptions = [];\r\n    if (this.state.isMarineTransLoading) transloadingOptions.push(\"MARINE\");\r\n    if (this.state.isRailTransloading) transloadingOptions.push(\"RAIL\");\r\n\r\n    let deviceType =\r\n      this.props.deviceType !== undefined &&\r\n      this.props.deviceType !== null &&\r\n      this.props.deviceType !== \"\"\r\n        ? this.props.deviceType\r\n        : this.state.modDevice.DeviceType;\r\n\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.device.Code}\r\n            newEntityName=\"NewDevice\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <TMDetailsKPILayout KPIList={this.state.deviceKPIList}>\r\n          {\" \"}\r\n        </TMDetailsKPILayout>\r\n        <ErrorBoundary>\r\n          <DeviceDetails\r\n            device={this.state.device}\r\n            modDevice={this.state.modDevice}\r\n            modAssociatedChannel={this.state.modAssociatedChannel}\r\n            onFieldChange={this.handleChange}\r\n            onChannelFieldChange={this.handleChannelChange}\r\n            listOptions={{\r\n              deviceTypeOptions: this.state.deviceTypeOptions,\r\n              deviceModelOptions: this.state.deviceModelOptions,\r\n              channelTypeOptions: this.state.channelTypeOptions,\r\n              channelCodeOptions: this.state.channelCodeOptions,\r\n              densityUOMOptions: this.state.densityUOMOptions,\r\n              volumeUOMOptions: this.state.volumeUOMOptions,\r\n              massUOMOptions: this.state.massUOMOptions,\r\n              temperatureUOMOptions: this.state.temperatureUOMOptions,\r\n              pressureUOMOptions: this.state.pressureUOMOptions,\r\n              transloadingOptions: transloadingOptions,\r\n            }}\r\n            deviceType={deviceType}\r\n            selectedCardReaderAttributeList={\r\n              this.state.selectedCardReaderAttributeList\r\n            }\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            onAttributeDataChange={this.handleAttributeDataChange}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            validationErrors={this.state.validationErrors}\r\n            channelValidationErrors={this.state.channelValidationErrors}\r\n            isMarineTransloading={this.state.isMarineTransLoading}\r\n            isRailTransloading={this.state.isRailTransloading}\r\n            isBCU={\r\n              this.state.device.Code !== \"\" &&\r\n              this.state.modDevice.DeviceType ===\r\n                Constants.deviceTypeCode.BCU &&\r\n              this.state.modDevice.Model.toUpperCase() ===\r\n                Constants.DeviceModels.MSCL.toUpperCase()\r\n            }\r\n            handleSkipLocalLoadFetch={this.handleSetBCUSkipLocalLoadFetch}\r\n            enableSkipLocalLoadFetch={this.state.saveEnabled}\r\n          ></DeviceDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          {this.props.IsSiteView ? (\r\n            <SiteDetailsUserActions\r\n              isEnterpriseNode={\r\n                this.props.userDetails.EntityResult.IsEnterpriseNode\r\n              }\r\n              handleSave={this.handleSave}\r\n              handleDelete={this.handleDelete}\r\n              saveEnabled={this.state.saveEnabled}\r\n              isDeleteEnabled={this.state.isDeleteEnabled}\r\n              isBCU={\r\n                this.state.modDevice.DeviceType ===\r\n                  Constants.deviceTypeCode.BCU &&\r\n                this.state.modDevice.Model.toUpperCase() ===\r\n                  Constants.DeviceModels.MSCL.toUpperCase()\r\n              }\r\n              handleSkipLocalLoadFetch={this.handleSetBCUSkipLocalLoadFetch}\r\n            ></SiteDetailsUserActions>\r\n          ) : (\r\n            <ErrorBoundary>\r\n              <TMDetailsUserActions\r\n                handleBack={this.props.onBack}\r\n                handleSave={this.handleSave}\r\n                handleReset={this.handleReset}\r\n                saveEnabled={this.state.saveEnabled}\r\n              ></TMDetailsUserActions>\r\n            </ErrorBoundary>\r\n          )}\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.device.Code === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnDevice}\r\n            handleOperation={this.saveDevice}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\nDeviceDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\nexport default connect(mapStateToProps)(DeviceDetailsComposite);\r\n","import React, { useState } from \"react\";\r\nimport { Button, Modal } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nSiteDetailsUserActions.propTypes = {\r\n  handleDelete: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n  isDeleteEnabled: PropTypes.bool\r\n};\r\n\r\nSiteDetailsUserActions.defaultProps = { saveEnabled: true, isDeleteEnabled: false };\r\nexport function SiteDetailsUserActions({\r\n  handleDelete,\r\n  handleSave,\r\n  isDeleteEnabled,\r\n  saveEnabled,\r\n  isEnterpriseNode,\r\n  isBCU,\r\n  handleSkipLocalLoadFetch\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  function displayTMModalforDelete() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  handleDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-12 pr-4 mt-2\" style={{ textAlign: \"right\" }}>\r\n              <Button\r\n                content={t(\"Loadingarm_Delete\")}\r\n                className={isEnterpriseNode === true || isDeleteEnabled !== true ? \"cancelENButton\" : \"cancelButton\"}\r\n                disabled={!isDeleteEnabled || (isEnterpriseNode === true ? true : false)}\r\n                onClick={() => {\r\n                  setModelOpen(true);\r\n                }}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled || (isEnterpriseNode === true ? true : false)}\r\n                onClick={handleSave}\r\n              ></Button>\r\n              {/* {\r\n                isBCU ? <Button\r\n                  content={t(\"DeviceInfo_SkipLocalLoadFetch\")}\r\n                  disabled={!saveEnabled || (isEnterpriseNode === true ? true : false)}\r\n                  onClick={handleSkipLocalLoadFetch}\r\n                ></Button> : null\r\n              } */}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n      {displayTMModalforDelete()}\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["TMDetailsKPILayout","_ref","KPIList","pageName","rowHeight","widgetHeight","isDraggable","isResizable","kpiDisplayTopBreakpoint","KPIDisplays","setKPIDisplays","useState","kpiDiv","React","hideKpis","currentScrollPos","window","pageYOffset","KPIDisplay","current","getBoundingClientRect","top","useEffect","addEventListener","removeEventListener","_jsx","ref","children","TranslationConsumer","t","style","marginTop","ErrorBoundary","KPIDashboardLayout","kpiList","defaultProps","DeviceDetails","device","modDevice","listOptions","modAssociatedChannel","onFieldChange","onChannelFieldChange","onActiveStatusChange","deviceType","modAttributeMetaDataList","attributeValidationErrors","onAttributeDataChange","validationErrors","isMarineTransloading","isRailTransloading","channelValidationErrors","isBCU","handleSkipLocalLoadFetch","enableSkipLocalLoadFetch","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","channelDisabled","IsIntegrated","Constants","WEIGH_BRIDGE","undefined","DEUType","toUpperCase","TouchScreen","useTranslation","_jsxs","className","Select","fluid","placeholder","label","value","Utilities","DeviceType","options","deviceTypeOptions","disabled","Code","onChange","data","indicator","reserveSpace","search","noResultsMessage","error","Input","DEU","Model","deviceModelOptions","AcculoadIII","AcculoadIV","DanLoad","VirtualPreset","Nedap","NodeAddress","Name","PointName","Description","Active","text","Remarks","CARD_READER","class","Checkbox","checked","BCU","_Fragment","MSCL","width","float","IsDualBay","IsTransloading","ReceiptSource","transloadingOptions","CardReaderCode","Accordion","Content","title","AdditiveUOM","volumeUOMOptions","DensityUOM","densityUOMOptions","PressureUOM","pressureUOMOptions","TemperatureUOM","temperatureUOMOptions","MassUOM","massUOMOptions","WeightUOM","IsAuto","length","map","attire","attributeMetaDataList","filter","item","IsVisible","AttributeDetails","selectedAttributeList","handleCellDataEdit","associatedChannel","MultiDrop","ChannelCode","channelCodeOptions","DEUContrec1030","ChannelType","channelTypeOptions","PortType","Multiload","Microload","PrimaryAddress","SecondaryAddress","PrimaryPort","SecondaryPort","marginLeft","SendTimeOut","RetryInterval","ReceiveTimeOut","ConnectionRetries","Button","content","onClick","DeviceDetailsComposite","Component","constructor","arguments","state","emptyDeviceInfo","emptyChannel","isReadyToRender","saveEnabled","isDeleteEnabled","deuAttributeValidationErrors","bcuAttributeValidationErrors","crAttributeValidationErrors","wbAttributeValidationErrors","deviceValidationDef","deviceChannelValidationDef","deviceModelsObject","isMarineTransLoading","deviceTypeChannels","isMultiDrop","deviceKPIList","showAuthenticationLayout","tempDevice","handleAttributeDataChange","attribute","matchedAttributes","lodash","this","matchedAttributesList","modattribute","Array","isArray","DefaultValue","forEach","setState","console","log","handleSetBCUSkipLocalLoadFetch","keyCode","key","KeyCodes","obj","ShareHolderCode","keyDataCode","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","axios","RestAPIs","props","tokenDetails","tokenInfo","then","response","result","IsSuccess","onSaved","saveDevice","UpdateCardReaderDevice","CreateCardReaderDevice","UpdateBCUDevice","CreateBCUDevice","UpdateDEUDevice","CreateDEUDevice","UpdateWBDevice","CreateWBDevice","handleSave","fillDetails","tempAttributeList","attributeList","index","findIndex","x","push","validateSave","Attributes","userDetails","EntityResult","IsWebPortalUser","handleChange","propertyName","emptyBCUDeviceInfo","emptyCardReaderDeviceInfo","emptyWBDeviceInfo","emptyDEUDeviceInfo","channelInfo","handleResetAttributeValidationError","formAttributes","GetChannelsForDeviceTypes","handleChannelChange","GetChannel","handleReset","ShipmentType","handleActiveStatusChange","handleAuthenticationClose","componentDidMount","IsArchived","getTransloadingDetails","getAttributeMetaData","getDeviceTypes","getDeviceModels","getChannelType","getUOMList","bcu","cardreader","weighbridge","deu","getDevice","type","FunctionsList","functionGroups","add","fnDevice","getCRDeviceDetails","deviceCode","getBCUDeviceDetails","getKPIList","getDEUDeviceDetails","getWBDeviceDetails","componentWillReceiveProps","nextProps","bcuAttributeEntity","cardReaderAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","DENSITY","VOLUME","PRESSURE","TEMPERATURE","MASS","ErrorList","terminalCode","selectedTerminal","modify","AssociatedChannels","PrevChannelId","PrevChnId","IsPrevMultiDrop","source","channelCodes","returnValue","Object","keys","attributeMetaData","values","every","MarineEnable","RAILEnable","catch","productAllocationList","productShareholderAllocationList","ProdAllocEntity","LastUpdatedBy","Firstname","LastName","ResponseWaitTime","RefreshTime","SIMATIC_BARCODE","MORPHO_BIOMETRIC","SCADAConfiguration","err","receivedTerminal","attributesTerminalsList","existitem","Attributevalue","trailerAttribute","valueAttribute","ListOfAttributeData","AttributeCode","AttributeValue","selectedTerminals","view","fnKPIInformation","objKPIRequestData","PageName","kpiDeviceDetail","InputParameters","ListKPIDetails","render","popUpContents","fieldName","fieldValue","Date","LastUpdated","toLocaleDateString","toLocaleTimeString","LastUpdatedTime","LastActive","Created","CreatedTime","TMDetailsHeader","entityCode","newEntityName","selectedCardReaderAttributeList","IsSiteView","SiteDetailsUserActions","isEnterpriseNode","IsEnterpriseNode","handleDelete","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","modelOpen","setModelOpen","textAlign","Modal","open","size","Footer","margin","Popup","element","Icon","root","name","position","List","handleAttributeDateValue","convertAttributeDatetoString","chars","split","Dateval","getFullYear","getMonth","slice","getDate","DataType","toLowerCase","STRING","DisplayName","IsMandatory","IsReadonly","INT","LONG","FLOAT","DOUBLE","BOOL","toString","DATETIME","DatePicker","displayFormat","getCurrentDateFormat","showYearSelector","onTextChange","toLocaleString","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","getOptionsWithSelect","ddlOptions","selectOptionText","option","unshift","language","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell"],"sourceRoot":""}