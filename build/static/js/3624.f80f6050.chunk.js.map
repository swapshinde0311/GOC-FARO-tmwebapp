{"version":3,"file":"static/js/3624.f80f6050.chunk.js","mappings":"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","sources":["Components/UIBase/Details/WebPortalUserMapDetails.jsx","Components/Composite/Details/WebPortalUserMapDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Select, Input, Button, Icon } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\n\r\nWebPortalUserMapDetails.propTypes = {\r\n  webPortalUser: PropTypes.object.isRequired,\r\n  modWebPortalUser: PropTypes.object.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    securityUsers: PropTypes.array,\r\n  }).isRequired,\r\n  userChange: PropTypes.func.isRequired,\r\n  handleAvailableEntitySelection: PropTypes.func.isRequired,\r\n  handleAssociatedEntitySelection: PropTypes.func.isRequired,\r\n  handleEntityAssociation: PropTypes.func.isRequired,\r\n  handleEntityDisassociation: PropTypes.func.isRequired,\r\n  pageSize: PropTypes.number,\r\n};\r\n\r\nWebPortalUserMapDetails.defaultProps = {\r\n  listOptions: {\r\n    securityUsers: [],\r\n    availableEntities: [],\r\n    selectedAvailableEntities: [],\r\n    selectedAssociatedEntities: [],\r\n  },\r\n};\r\nexport function statusRenderer(cellData) {\r\n  const data = cellData.value;\r\n  if (typeof data === \"boolean\") {\r\n    if (data) return <Icon name=\"check\" size=\"small\" color=\"green\" />;\r\n    else return <Icon name=\"close\" size=\"small\" color=\"red\" />;\r\n  }\r\n}\r\nexport function WebPortalUserMapDetails({\r\n  webPortalUser,\r\n  modWebPortalUser,\r\n  validationErrors,\r\n  onFieldChange,\r\n  listOptions,\r\n  userChange,\r\n  handleAvailableEntitySelection,\r\n  handleAssociatedEntitySelection,\r\n  handleEntityAssociation,\r\n  handleEntityDisassociation,\r\n  pageSize,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              {webPortalUser.UserName === \"\" ? (\r\n                <Select\r\n                  fluid\r\n                  placeholder={t(\"Common_Select\")}\r\n                  label={t(\"WebPortal_Username\")}\r\n                  value={modWebPortalUser.UserName}\r\n                  options={listOptions.securityUsers}\r\n                  onChange={(data) => {\r\n                    userChange(data);\r\n                  }}\r\n                  indicator=\"required\"\r\n                  error={t(validationErrors.UserName)}\r\n                  reserveSpace={false}\r\n                  search={true}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                />\r\n              ) : (\r\n                <Input\r\n                  fluid\r\n                  value={modWebPortalUser.UserName}\r\n                  indicator=\"required\"\r\n                  disabled={true}\r\n                  label={t(\"WebPortal_Username\")}\r\n                  error={t(validationErrors.UserName)}\r\n                  reserveSpace={false}\r\n                />\r\n              )}\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modWebPortalUser.UserPrincipal}\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"UserPrincipal\", data)}\r\n                label={t(\"WebPortal_UserPrincipal\")}\r\n                error={t(validationErrors.UserPrincipal)}\r\n                reserveSpace={false}\r\n                disabled={webPortalUser.UserName !== \"\"}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modWebPortalUser.RoleName}\r\n                label={t(\"WebPortal_Role\")}\r\n                reserveSpace={false}\r\n                disabled={true}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {listOptions.availableEntities.length > 0 ||\r\n          modWebPortalUser.WebPortalUserEntityItems.length > 0 ? (\r\n            <div className=\"row\">\r\n              <div className=\"col-12 col-md-5 col-lg-5\">\r\n                <h4>{t(\"WebPortal_AvailableEntity\")}</h4>\r\n                <div className=\"detailsTable\">\r\n                  <DataTable\r\n                    data={listOptions.availableEntities}\r\n                    search={true}\r\n                    selectionMode=\"multiple\"\r\n                    selection={listOptions.selectedAvailableEntities}\r\n                    onSelectionChange={handleAvailableEntitySelection}\r\n                    rows={pageSize}\r\n                    searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                  >\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"Code\"\r\n                      field=\"Code\"\r\n                      header={t(\"WebPortal_Entity\")}\r\n                      editFieldType=\"text\"\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"ShareholderCode\"\r\n                      field=\"ShareholderCode\"\r\n                      header={t(\"AccessCardInfo_Shareholder\")}\r\n                      editFieldType=\"text\"\r\n                    ></DataTable.Column>\r\n                    {Array.isArray(listOptions.availableEntities) &&\r\n                    listOptions.availableEntities.length > pageSize ? (\r\n                      <DataTable.Pagination />\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </DataTable>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-12 col-md-2 col-lg-2\">\r\n                <br></br>\r\n                <br></br>\r\n                <div style={{ textAlign: \"center\" }}>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    icon={<Icon name=\"caret-right\" root=\"common\" />}\r\n                    content=\"\"\r\n                    iconPosition=\"right\"\r\n                    onClick={handleEntityAssociation}\r\n                    disabled={\r\n                      modWebPortalUser.RoleName ===\r\n                      Constants.WebPortalRoles.SHAREHOLDER\r\n                    }\r\n                  />\r\n                  <br></br>\r\n                  <br></br>\r\n\r\n                  <Button\r\n                    type=\"primary\"\r\n                    icon={<Icon name=\"caret-left\" root=\"common\" />}\r\n                    content=\"\"\r\n                    iconPosition=\"right\"\r\n                    onClick={handleEntityDisassociation}\r\n                    disabled={\r\n                      modWebPortalUser.RoleName ===\r\n                      Constants.WebPortalRoles.SHAREHOLDER\r\n                    }\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-12 col-md-5 col-lg-5\">\r\n                <h4>{t(\"WebPortal_AssociatedEntity\")}</h4>\r\n                <div className=\"detailsTable\">\r\n                  <DataTable\r\n                    data={modWebPortalUser.WebPortalUserEntityItems}\r\n                    search={true}\r\n                    selectionMode=\"multiple\"\r\n                    selection={listOptions.selectedAssociatedEntities}\r\n                    onSelectionChange={handleAssociatedEntitySelection}\r\n                    rows={pageSize}\r\n                    searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                  >\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"Code\"\r\n                      field=\"Code\"\r\n                      header={t(\"WebPortal_Entity\")}\r\n                      editFieldType=\"text\"\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"ShareholderCode\"\r\n                      field=\"ShareholderCode\"\r\n                      header={t(\"AccessCardInfo_Shareholder\")}\r\n                      editFieldType=\"text\"\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      key=\"IsEntityActive\"\r\n                      field=\"IsEntityActive\"\r\n                      header={t(\"TankGroupInfo_Active\")}\r\n                      editable={false}\r\n                      renderer={statusRenderer}\r\n                      editFieldType=\"text\"\r\n                    ></DataTable.Column>\r\n                    {Array.isArray(modWebPortalUser.WebPortalUserEntityItems) &&\r\n                    modWebPortalUser.WebPortalUserEntityItems.length >\r\n                      pageSize ? (\r\n                      <DataTable.Pagination />\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </DataTable>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { WebPortalUserMapDetails } from \"../../UIBase/Details/WebPortalUserMapDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { emptyWebPortalUser } from \"../../../JS/DefaultEntities\";\r\nimport { webPortalUserValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport { functionGroups, fnWebPortalUserMap } from \"../../../JS/FunctionGroups\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Modal, Button } from \"@scuf/common\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\n\r\nclass WebPortalUserMapDetailsComposite extends Component {\r\n    state = {\r\n        webPortalUser: lodash.cloneDeep(emptyWebPortalUser),\r\n        modWebPortalUser: {},\r\n        validationErrors: Utilities.getInitialValidationErrors(\r\n            webPortalUserValidationDef\r\n        ),\r\n        isReadyToRender: false,\r\n        saveEnabled: false,\r\n        securityUsers: [],\r\n        availableEntities: [],\r\n        selectedAvailableEntites: [],\r\n        selectedAssociatedEntities: [],\r\n        entityDisassociationPopUp:false\r\n    }\r\n\r\n  componentDidMount() {\r\n        try {\r\n            Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n            this.getWebPortalUser(this.props.selectedRow);\r\n            this.GetSecurityUsers();\r\n          } catch (error) {\r\n            console.log(\r\n              \"WebPortalUserMapDetailsComposite:Error occured on componentDidMount\",\r\n              error\r\n            );\r\n          }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.webPortalUser.UserName !== \"\" &&\r\n        nextProps.selectedRow.WebPortal_UserName === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getWebPortalUser(nextProps.selectedRow);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.log(\r\n        \"WebPortalUserMapDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getWebPortalUser(selectedRow) {\r\n        if (selectedRow.WebPortal_UserName === undefined) {\r\n            this.setState({\r\n                webPortalUser: lodash.cloneDeep(emptyWebPortalUser),\r\n                modWebPortalUser: lodash.cloneDeep(emptyWebPortalUser),\r\n                isReadyToRender: true,\r\n                saveEnabled: Utilities.isInFunction(\r\n                    this.props.userDetails.EntityResult.FunctionsList,\r\n                    functionGroups.add,\r\n                    fnWebPortalUserMap\r\n              ),\r\n              availableEntities:[]\r\n            }, () => {\r\n              this.GetSecurityUsers();\r\n            })\r\n            return;\r\n        }\r\n        \r\n        axios(\r\n            RestAPIs.GetWebPortalUser+'?userName='+selectedRow.WebPortal_UserName,\r\n            Utilities.getAuthenticationObjectforGet(\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n          .then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState({\r\n                        isReadyToRender: false,\r\n                        webPortalUser: lodash.cloneDeep(result.EntityResult),\r\n                        modWebPortalUser: lodash.cloneDeep(result.EntityResult),\r\n                        saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.modify,\r\n                        fnWebPortalUserMap\r\n                    ),\r\n                    }, () => {\r\n                      this.getEntityForPortalUser(result.EntityResult.UserName)\r\n                    })\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        webPortalUser: lodash.cloneDeep(emptyWebPortalUser),\r\n                        modWebPortalUser: lodash.cloneDeep(emptyWebPortalUser),\r\n                        isReadyToRender: true,\r\n                    })\r\n                }\r\n            })\r\n    }\r\n\r\n    GetSecurityUsers() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetSecurityUsers,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n              )\r\n                .then((response) => {\r\n                  var result = response.data;\r\n                  if (result.IsSuccess === true) {\r\n                    if (\r\n                      result.EntityResult !== null &&\r\n                      Array.isArray(result.EntityResult)\r\n                    ) {\r\n                      let securityUsers = Utilities.transferListtoOptions(\r\n                        result.EntityResult\r\n                      );\r\n                      this.setState({ securityUsers });\r\n                    }\r\n                  } else {\r\n                    console.log(\"Error in getUsers:\", result.ErrorList);\r\n                  }\r\n                })\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error while getting getUsers:\", error);\r\n        } \r\n    }\r\n\r\n    handleChange = (propertyName, data) => {\r\n        try {\r\n          const modWebPortalUser = lodash.cloneDeep(this.state.modWebPortalUser);\r\n          modWebPortalUser[propertyName] = data;\r\n          this.setState({ modWebPortalUser });\r\n          const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n          if (webPortalUserValidationDef[propertyName] !== undefined) {\r\n            validationErrors[propertyName] = Utilities.validateField(\r\n                webPortalUserValidationDef[propertyName],\r\n              data\r\n            );\r\n            this.setState({ validationErrors });\r\n          }\r\n        } catch (error) {\r\n          console.log(\r\n            \"WebPortalUserMapDetailsComposite:Error occured on handleChange\",\r\n            error\r\n          );\r\n        }\r\n    };\r\n    \r\n    handleReset = () => {\r\n        try {\r\n          const { validationErrors } = { ...this.state };\r\n          const webPortalUser = lodash.cloneDeep(this.state.webPortalUser);\r\n          Object.keys(validationErrors).forEach(function (key) {\r\n            validationErrors[key] = \"\";\r\n          });\r\n          this.setState(\r\n            {\r\n              modWebPortalUser: { ...webPortalUser },\r\n              selectedCompRow: [],\r\n                  validationErrors,\r\n                  availableEntities: [],\r\n                  selectedAvailableEntites: [],\r\n              selectedAssociatedEntities: [],\r\n                  isReadyToRender:false\r\n            }, () => {\r\n              if (webPortalUser.UserName !== undefined && webPortalUser.UserName !== null && webPortalUser.UserName !== \"\")\r\n                this.getEntityForPortalUser(webPortalUser.UserName);\r\n              else\r\n                this.setState({isReadyToRender:true})\r\n            }\r\n          );\r\n        } catch (error) {\r\n          console.log(\r\n            \"WebPortalUserMapDetailsComposite:Error occured on handleReset\",\r\n            error\r\n          );\r\n        }\r\n    };\r\n    \r\n    handleUserChange = (data) => {\r\n      try {\r\n          let modWebPortalUser =  lodash.cloneDeep(emptyWebPortalUser);\r\n          const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n          validationErrors[\"UserName\"] = \"\";\r\n            modWebPortalUser[\"UserName\"] = data;\r\n          this.setState({ modWebPortalUser, validationErrors,selectedAssociatedEntities:[], selectedAvailableEntites:[] }, () => {\r\n            this.getEntityForPortalUser(data)\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.log(\r\n                \"WebPortalUserMapDetailsComposite:Error occured on handleUserChange\",\r\n                error\r\n              );\r\n        }\r\n  }\r\n  \r\n  getEntityForPortalUser =(data)=> {\r\n    try {\r\n      let modWebPortalUser = lodash.cloneDeep(this.state.modWebPortalUser);\r\n      axios(\r\n        RestAPIs.GetEntityForPortalUser +'?userName='+data+'&entityType=',\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n            if (result.IsSuccess === true) {\r\n                modWebPortalUser[\"RoleName\"] = result.EntityResult.Table[0].RoleName;\r\n                //modWebPortalUser[\"WebPortalUserEntityItems\"]=[]\r\n              if (result.EntityResult.Table[0].RoleName === Constants.WebPortalRoles.SHAREHOLDER) {\r\n                modWebPortalUser.WebPortalUserEntityItems = result.EntityResult.Table1\r\n                this.setState({\r\n                  availableEntities: [],\r\n                  modWebPortalUser,\r\n                  isReadyToRender:true\r\n            })\r\n              }\r\n              else {\r\n                this.setState({\r\n                  availableEntities: result.EntityResult.Table1,\r\n                  modWebPortalUser,\r\n                  isReadyToRender:true\r\n            })\r\n              }\r\n          } else {\r\n            console.log(\"Error in GetEntityForPortalUser:\", result.ErrorList);\r\n          }\r\n        })\r\n    } catch (error) {\r\n      console.log(\r\n        \"WebPortalUserMapDetailsComposite:Error occured on getEntityForPortalUser\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n    handleAvailableEntitySelection = (e) => {\r\n        this.setState({ selectedAvailableEntites: e });\r\n    }\r\n    handleAssociatedEntitySelection = (e) => {\r\n        this.setState({ selectedAssociatedEntities: e });\r\n    }\r\n    handleEntityAssociation = () => {\r\n      try {\r\n        this.setState({ isReadyToRender: false }, () => {\r\n          const selectedAvailableEntites = lodash.cloneDeep(this.state.selectedAvailableEntites);\r\n          let availableEntities = lodash.cloneDeep(this.state.availableEntities);\r\n          let modWebPortalUser = lodash.cloneDeep(this.state.modWebPortalUser);\r\n          selectedAvailableEntites.forEach((obj) => {\r\n              modWebPortalUser.WebPortalUserEntityItems.push(obj);\r\n              availableEntities = availableEntities.filter(\r\n                  (com) => {\r\n                    return (com.Code !==obj.Code);\r\n                  });\r\n          })\r\n          this.setState({modWebPortalUser,selectedAvailableEntites:[],availableEntities,isReadyToRender:true});\r\n          })\r\n        } catch (error) {\r\n            console.log(\"WebPortalUserMapDetailsComposite:Error occured on handleEntityAssociation\",error);\r\n        }\r\n    }\r\n\r\n    handleEntityDisassociation = () => {\r\n        if(this.state.selectedAssociatedEntities.length > 0)\r\n        this.setState({entityDisassociationPopUp:true})\r\n    }\r\n\r\n    EntityDisassociation = () => {\r\n      try {\r\n        this.setState({ isReadyToRender: false }, () => {\r\n          const selectedAssociatedEntities = lodash.cloneDeep(this.state.selectedAssociatedEntities);\r\n          let modWebPortalUser = lodash.cloneDeep(this.state.modWebPortalUser);\r\n          let availableEntities = lodash.cloneDeep(this.state.availableEntities);\r\n          selectedAssociatedEntities.forEach((obj, index) => {\r\n              availableEntities.push(obj);\r\n              modWebPortalUser.WebPortalUserEntityItems = modWebPortalUser.WebPortalUserEntityItems.filter(\r\n                  (com, cindex) => {\r\n                    return (com.Code !==obj.Code);\r\n                  }\r\n                );\r\n          })\r\n          this.setState({selectedAssociatedEntities:[],modWebPortalUser,availableEntities,isReadyToRender:true})\r\n          })\r\n           \r\n        } catch (error) {\r\n            console.log(\"WebPortalUserMapDetailsComposite:Error occured on handleEntityDisassociation\",error);\r\n        }\r\n    }\r\n\r\n    confirmEntityDisassociation = () => {\r\n        return (\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <Modal open={this.state.entityDisassociationPopUp} size=\"small\">\r\n                  <Modal.Content>\r\n                    <div className=\"col col-lg-12\">\r\n                      <h5>{t(\"WebPortal_ConfirmDisassociation\")}</h5>\r\n                    </div>\r\n                  </Modal.Content>\r\n                  <Modal.Footer>\r\n                    <Button\r\n                      type=\"primary\"\r\n                      content={t(\"AccessCardInfo_Ok\")}\r\n                      onClick={() => {\r\n                        this.setState({ entityDisassociationPopUp: false }, () => {\r\n                            this.EntityDisassociation();\r\n                          });\r\n                      }}\r\n                    />\r\n                    <Button\r\n                      type=\"primary\"\r\n                      content={t(\"Cancel\")}\r\n                      onClick={() => {\r\n                        this.setState({ entityDisassociationPopUp: false });\r\n                      }}\r\n                    />\r\n                  </Modal.Footer>\r\n                </Modal>\r\n              )}\r\n            </TranslationConsumer>\r\n          );\r\n    }\r\n\r\n    handleSave = () => {\r\n        try {\r\n            let modWebPortalUser = this.fillDetails(); \r\n            this.setState({ saveEnabled: false });\r\n            if (this.validateSave(modWebPortalUser)) {\r\n                this.state.webPortalUser.UserName === \"\"\r\n                ? this.createWebPortalUser(modWebPortalUser)\r\n                : this.updateWebPortalUser(modWebPortalUser);\r\n            } else this.setState({ saveEnabled: true });\r\n        } catch (error) {\r\n            console.log(\"WebPortalUserMapDetailsComposite:Error occured on handleSave\",error);\r\n        }\r\n    }\r\n\r\n  fillDetails() {\r\n      try {\r\n        let modWebPortalUser = lodash.cloneDeep(this.state.modWebPortalUser);\r\n        let Entities = [];\r\n          modWebPortalUser.WebPortalUserEntityItems.forEach(i => {\r\n            let EntityData = {\r\n                EntityType: i.EntityType === undefined ? i.Entity :i.EntityType,\r\n                Code: i.Code,\r\n                ShareholderCode:i.ShareholderCode\r\n            }\r\n            Entities.push(EntityData);\r\n        });\r\n        modWebPortalUser.WebPortalUserEntityItems = Entities;\r\n        \r\n            this.setState({ modWebPortalUser });\r\n            return modWebPortalUser;\r\n        }catch (error) {\r\n            console.log(\r\n              \"WebPortalUserMapDetailsComposite:Error occured on fillDetails\",\r\n              error\r\n            );\r\n          }\r\n    }\r\n\r\n    validateSave(modWebPortalUser) {\r\n        const validationErrors = { ...this.state.validationErrors };\r\n\r\n        Object.keys(webPortalUserValidationDef).forEach(function (key) {\r\n            if (modWebPortalUser[key] !== undefined)\r\n              validationErrors[key] = Utilities.validateField(\r\n                webPortalUserValidationDef[key],\r\n                modWebPortalUser[key]\r\n              );\r\n        });\r\n        \r\n      this.setState({ validationErrors });\r\n      \r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"WebPortaUserMap_SavedStatus\",\r\n        messageResultDetails: [],\r\n      };\r\n\r\n      if (modWebPortalUser.WebPortalUserEntityItems.length === 0) {\r\n        notification.messageResultDetails.push({\r\n          keyFields: [\"WebPortal_UserName\"],\r\n          keyValues: [modWebPortalUser.UserName],\r\n          isSuccess: false,\r\n          errorMessage: \"ASSOCIATED_ENTITY_ITEMS_EMPTY_X\",\r\n        });\r\n      }\r\n\r\n        let returnValue = Object.values(validationErrors).every(function (value) {\r\n            return value === \"\";\r\n          });\r\n    \r\n          if (notification.messageResultDetails.length > 0) {\r\n            this.props.onSaved(this.state.modWebPortalUser, \"update\", notification);\r\n            return false;\r\n          }\r\n          return returnValue;\r\n    }\r\n\r\n    createWebPortalUser(modWebPortalUser) {\r\n        let obj = {\r\n            Entity: modWebPortalUser,\r\n          };\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"WebPortaUserMap_SavedStatus\",\r\n            messageResultDetails: [\r\n              {\r\n                keyFields: [\"WebPortal_UserName\"],\r\n                keyValues: [modWebPortalUser.UserName],\r\n                isSuccess: false,\r\n                errorMessage: \"\",\r\n              },\r\n            ],\r\n        };\r\n        \r\n        axios(\r\n            RestAPIs.CreateWebPortalUser,\r\n            Utilities.getAuthenticationObjectforPost(\r\n              obj,\r\n              this.props.tokenDetails.tokenInfo\r\n            )\r\n          )\r\n            .then((response) => {\r\n              let result = response.data;\r\n              notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n              notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n              if (result.IsSuccess === true) {\r\n                this.setState(\r\n                  {\r\n                    saveEnabled: Utilities.isInFunction(\r\n                      this.props.userDetails.EntityResult.FunctionsList,\r\n                      functionGroups.modify,\r\n                      fnWebPortalUserMap\r\n                    ),\r\n                  },\r\n                  () => this.getWebPortalUser({ WebPortal_UserName: modWebPortalUser.UserName })\r\n                );\r\n              } else {\r\n                notification.messageResultDetails[0].errorMessage =\r\n                  result.ErrorList[0];\r\n                this.setState({\r\n                  saveEnabled: Utilities.isInFunction(\r\n                    this.props.userDetails.EntityResult.FunctionsList,\r\n                    functionGroups.add,\r\n                    fnWebPortalUserMap\r\n                  ),\r\n                });\r\n                console.log(\"Error in createWebPortalUser:\", result.ErrorList);\r\n              }\r\n              this.props.onSaved(this.state.modWebPortalUser, \"add\", notification);\r\n            })\r\n            .catch((error) => {\r\n              this.setState({\r\n                saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.add,\r\n                  fnWebPortalUserMap\r\n                ),\r\n              });\r\n              notification.messageResultDetails[0].errorMessage = error;\r\n              this.props.onSaved(this.state.modWebPortalUser, \"add\", notification);\r\n            });\r\n    }\r\n\r\n  updateWebPortalUser(modWebPortalUser) {\r\n    let obj = {\r\n      Entity: modWebPortalUser,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"WebPortaUserMap_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"WebPortal_UserName\"],\r\n          keyValues: [modWebPortalUser.UserName],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateWebPortalUser,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnWebPortalUserMap\r\n              ),\r\n            },\r\n            () => this.getWebPortalUser({ WebPortal_UserName: modWebPortalUser.UserName})\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnWebPortalUserMap\r\n            ),\r\n          });\r\n          console.log(\"Error in update updateWebPortalUser:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modWebPortalUser, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.modify,\r\n            fnWebPortalUserMap\r\n          ),\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modWebPortalUser, \"modify\", notification);\r\n      });\r\n    }\r\n\r\n    render() {\r\n        const listOptions = {\r\n            securityUsers: this.state.securityUsers,\r\n            availableEntities: this.state.availableEntities,\r\n            selectedAvailableEntities: this.state.selectedAvailableEntites,\r\n            selectedAssociatedEntities:this.state.selectedAssociatedEntities\r\n        }\r\n        const popUpContents = [];\r\n        \r\n        return this.state.isReadyToRender ? (\r\n            <div>\r\n              <ErrorBoundary>\r\n                <TMDetailsHeader\r\n                  entityCode={this.state.webPortalUser.UserName}\r\n                  newEntityName=\"WebPortalUserAssociation\"\r\n                  popUpContents={popUpContents}\r\n                ></TMDetailsHeader>\r\n              </ErrorBoundary>\r\n              <ErrorBoundary>\r\n                <WebPortalUserMapDetails\r\n                  webPortalUser={this.state.webPortalUser}\r\n                  modWebPortalUser={this.state.modWebPortalUser}\r\n                  listOptions={listOptions}\r\n                  validationErrors={this.state.validationErrors}\r\n                  onFieldChange={this.handleChange}\r\n                  onActiveStatusChange={this.handleActiveStatusChange}\r\n                  onAllTerminalsChange={this.handleAllTerminalsChange}\r\n                  isEnterpriseNode={\r\n                    this.props.userDetails.EntityResult.IsEnterpriseNode\r\n                  }\r\n                  attributeValidationErrors={this.state.attributeValidationErrors}\r\n                  selectedAttributeList={this.state.selectedAttributeList}\r\n                        handleCellDataEdit={this.handleCellDataEdit}\r\n                        userChange={this.handleUserChange}\r\n                        handleAvailableEntitySelection={this.handleAvailableEntitySelection}\r\n                        handleAssociatedEntitySelection={this.handleAssociatedEntitySelection}\r\n                        handleEntityAssociation={this.handleEntityAssociation}\r\n                handleEntityDisassociation={this.handleEntityDisassociation}\r\n                pageSize={\r\n                  this.props.userDetails.EntityResult.PageAttibutes\r\n                    .WebPortalListPageSize\r\n                }\r\n                ></WebPortalUserMapDetails>\r\n              </ErrorBoundary>\r\n              <ErrorBoundary>\r\n                <TMDetailsUserActions\r\n                  handleBack={this.props.onBack}\r\n                  handleSave={this.handleSave}\r\n                  handleReset={this.handleReset}\r\n                  saveEnabled={this.state.saveEnabled}\r\n                ></TMDetailsUserActions>\r\n                </ErrorBoundary>\r\n                {this.state.entityDisassociationPopUp ? this.confirmEntityDisassociation() : null}\r\n            </div>\r\n          ) : (\r\n            <LoadingPage message=\"Loading\"></LoadingPage>\r\n          );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      userDetails: state.getUserDetails.userDetails,\r\n      tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps)(WebPortalUserMapDetailsComposite);\r\n  \r\n  WebPortalUserMapDetailsComposite.propTypes = {\r\n    selectedRow: PropTypes.object.isRequired,\r\n    onBack: PropTypes.func.isRequired,\r\n    onSaved: PropTypes.func.isRequired,\r\n  };\r\n  ","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n"],"names":["statusRenderer","cellData","data","value","_jsx","Icon","name","size","color","WebPortalUserMapDetails","_ref","webPortalUser","modWebPortalUser","validationErrors","onFieldChange","listOptions","userChange","handleAvailableEntitySelection","handleAssociatedEntitySelection","handleEntityAssociation","handleEntityDisassociation","pageSize","TranslationConsumer","children","t","_jsxs","className","UserName","Select","fluid","placeholder","label","options","securityUsers","onChange","indicator","error","reserveSpace","search","noResultsMessage","Input","disabled","UserPrincipal","RoleName","availableEntities","length","WebPortalUserEntityItems","DataTable","selectionMode","selection","selectedAvailableEntities","onSelectionChange","rows","searchPlaceholder","Column","field","header","editFieldType","Array","isArray","Pagination","style","textAlign","Button","type","icon","root","content","iconPosition","onClick","Constants","SHAREHOLDER","selectedAssociatedEntities","editable","renderer","defaultProps","WebPortalUserMapDetailsComposite","Component","constructor","arguments","state","lodash","emptyWebPortalUser","Utilities","webPortalUserValidationDef","isReadyToRender","saveEnabled","selectedAvailableEntites","entityDisassociationPopUp","handleChange","propertyName","this","setState","undefined","console","log","handleReset","Object","keys","forEach","key","selectedCompRow","getEntityForPortalUser","handleUserChange","axios","RestAPIs","props","tokenDetails","tokenInfo","then","response","result","IsSuccess","EntityResult","Table","Table1","ErrorList","e","obj","push","filter","com","Code","EntityDisassociation","index","cindex","confirmEntityDisassociation","Modal","open","Content","Footer","handleSave","fillDetails","validateSave","createWebPortalUser","updateWebPortalUser","componentDidMount","userDetails","IsArchived","getWebPortalUser","selectedRow","GetSecurityUsers","componentWillReceiveProps","nextProps","WebPortal_UserName","FunctionsList","functionGroups","modify","fnWebPortalUserMap","add","Entities","i","EntityData","EntityType","Entity","ShareholderCode","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","returnValue","values","every","onSaved","catch","render","ErrorBoundary","TMDetailsHeader","entityCode","newEntityName","popUpContents","onActiveStatusChange","handleActiveStatusChange","onAllTerminalsChange","handleAllTerminalsChange","isEnterpriseNode","IsEnterpriseNode","attributeValidationErrors","selectedAttributeList","handleCellDataEdit","PageAttibutes","WebPortalListPageSize","TMDetailsUserActions","handleBack","onBack","LoadingPage","connect","getUserDetails","TokenAuth","margin","Popup","element","fieldName","fieldValue","marginLeft","position","List","map","float"],"sourceRoot":""}