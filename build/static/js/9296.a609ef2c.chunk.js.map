{"version":3,"file":"static/js/9296.a609ef2c.chunk.js","mappings":"sMAoDO,SAASA,EAAaC,GAazB,IAb0B,oBAC5BC,EAAmB,eACnBC,EAAc,aACdC,EAAY,oBACZC,EAAmB,oBACnBC,EAAmB,SACnBC,EAAQ,MACRC,EAAK,aACLC,EAAY,WACZC,EAAU,sBACVC,EAAqB,WACrBC,EAAU,cACVC,GACDZ,EACC,MAAOa,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GA2C3C,SAASG,IACHjB,EAAoBkB,MAClBX,EAAaY,OAAS,EACCH,GAAP,IAAdD,GAGJT,IAGN,CAgHA,OACEc,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAMC,MAAO,CAAEC,WAAY,aAAcC,QAAS,OAAQC,SAAA,EACvEC,EAAAA,EAAAA,KAAA,OACEL,UAAU,8CACVC,MAAO,CAAEE,QAAS,OAAQC,UAE1BL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAMC,MAAO,CAAEK,UAAW,OAAQJ,WAAY,IAAKE,SAAA,EAChEC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,+CAA8CI,UAC3DL,EAAAA,EAAAA,MAACQ,EAAAA,EAAa,CAAAH,SAAA,CAAC,KAhKrBC,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAV,EAAAA,EAAAA,MAACW,EAAAA,WAAU,CAAAN,SAAA,CACRxB,EAAe+B,QAAQC,KAAKC,IAEzBR,EAAAA,EAAAA,KAACK,EAAAA,WAAWI,KAAI,CACdC,QAASA,UAEqBC,IAA1B5B,GAC0B,OAA1BA,GAEAA,EACEyB,EAAWI,SACXrC,EAAe+B,QAEnB,EACAP,SAGDK,EAAEI,EAAWK,eAFTL,EAAWI,aAMtBZ,EAAAA,EAAAA,KAACK,EAAAA,WAAWI,KAAI,CAAAV,SACbK,EAAE7B,EAAesC,eADEtC,EAAeqC,qBA2IvCZ,EAAAA,EAAAA,KAAA,OACEL,UAAU,+CACZI,UAEEC,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAJ,EAAAA,EAAAA,KAAA,OACEL,UAAU,kBACVC,MAAO,CAAEkB,eAAgB,cAAef,UAExB,IAAfjB,EACC,IAEAY,EAAAA,EAAAA,MAAAqB,EAAAA,SAAA,CAAAhB,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAAD,UACEL,EAAAA,EAAAA,MAAA,MAAIC,UAAU,UAASI,SAAA,CAAEK,EAAE,sBAAsB,UAEnDJ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,WAAUI,UACvBC,EAAAA,EAAAA,KAACgB,EAAAA,OACC,CACAC,YAAab,EAAE,sBACfc,MAAOzC,EACP0C,UAAW7C,EAAoB8C,YAC/BC,QAnMfC,EAAAA,GAAgC9C,GAoMjB+C,SAAWL,GAAUxC,EAAoBwC,iBAhE7DlB,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAV,EAAAA,EAAAA,MAAC8B,EAAAA,MAAK,CAACC,KAAMvC,EAAWwC,KAAK,QAAO3B,SAAA,EAClCC,EAAAA,EAAAA,KAACwB,EAAAA,MAAMG,QAAO,CAAA5B,UACZC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAIK,EAAE,yBAGVV,EAAAA,EAAAA,MAAC8B,EAAAA,MAAMI,OAAM,CAAA7B,SAAA,EACXC,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLC,KAAK,YACLC,QAAS3B,EAAE,UACXM,QAASA,IAAMvB,GAAa,MAE9Ba,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLC,KAAK,UACLC,QAAS3B,EAAE,8BACXM,QAASA,KACPvB,GAAa,GACbR,GAAU,kBA0DtBqB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,4CAA2CI,UAvJ1DL,EAAAA,EAAAA,MAAA,OACEE,MAAO,CAAEoC,MAAO,QAASC,QAAS,eAAgBhC,UAAW,QAASF,SAAA,CAErEf,GAAagB,EAAAA,EAAAA,KAACkC,EAAAA,MAAK,CAClBC,SAAS,eACTxC,UAAU,mBACVyC,SACEpC,EAAAA,EAAAA,KAAA,OACEL,WACGrB,EAAoBkB,IACjB,cACA,sBAAwB,YAE9BkB,QAASnB,EAAiBQ,UAE1BC,EAAAA,EAAAA,KAACqC,EAAAA,KAAI,CACHC,KAAK,SACLC,KAAK,aACLb,KAAK,QACLc,MAAM,YAIZC,GAAG,QACHhB,KAAMpC,EAAUU,UAEhBC,EAAAA,EAAAA,KAAA,OAAK0C,aAAcA,IAAMpD,GAAa,GAAOS,UAC3CC,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAJ,EAAAA,EAAAA,KAAC2C,EAAAA,aAAY,CAAA5C,UACXL,EAAAA,EAAAA,MAACiD,EAAAA,aAAY,CAAA5C,SAAA,EACXC,EAAAA,EAAAA,KAAC2C,EAAAA,aAAaC,OAAM,CAAA7C,SACjBK,EAAE,mBAEJvB,EAAa0B,KAAKsC,IAEf7C,EAAAA,EAAAA,KAAC2C,EAAAA,aAAalC,KAAI,CAChBC,QAASA,KAAMoC,OA3CfC,EA2C8BF,EAAKG,UA1CzD1D,GAAa,QACbV,EAAMmE,GAFR,IAAwBA,CA2C8C,EAAAhD,SAE7CK,EAAEyC,EAAKI,2BASf,GACVhE,GAAgBe,EAAAA,EAAAA,KAAA,OACfJ,MAAO,CAAEsD,WAAY,QACrBxC,QAASA,KACHpC,EAAoB6E,QACtBhE,GAAa,EAGf,EAEFQ,WACGrB,EAAoB6E,OACjB,cACA,sBAAwB,YAC7BpD,UAEDC,EAAAA,EAAAA,KAACqC,EAAAA,KAAI,CAACC,KAAK,SAASC,KAAK,SAASb,KAAK,QAAQc,MAAM,YAC9C,UA2FjB,CAxPApE,EAAcgF,aAAe,CAC3B9E,oBAAqB,CAAEkB,KAAK,EAAO2D,QAAQ,EAAO/B,aAAa,GAC/D7C,eAAgB,CACd8E,SAAU,GACVzC,SAAU,GACVC,aAAc,GACdyC,UAAW,CAAC,EACZhD,QAAS,GACTiD,aAAa,GAEf/E,aAAc,GACdC,oBAAqB,GACrBI,aAAc,GACdC,YAAY,EACZE,YAAY,EACZC,eAAe,G,SC/CV,SAASuE,EAAsBnF,GAclC,IAdmC,oBACrCC,EAAmB,eACnBC,EAAc,aACdC,EAAY,oBACZC,EAAmB,oBACnBC,EAAmB,SACnBC,EAAQ,MACRC,EAAK,aACLC,EAAY,WACZC,EAAU,sBACVC,EAAqB,WACrBC,EAAU,cACVC,GAEDZ,EACC,OACE2B,EAAAA,EAAAA,KAAC5B,EAAa,CACZE,oBAAqBA,EACrBC,eAAgBA,EAChBC,aAAcA,EACdC,oBAAqBA,EACrBC,oBAAqBA,EACrBC,SAAUA,EACVC,MAAOA,EACPC,aAAcA,EACdC,WAAYA,EACZC,sBAAuBA,EACvBC,WAAYA,EACZC,cAAeA,GAGrB,C,kSCCe,SAASwE,EAAsCpF,GAiB1D,IAjB2D,aAC3DqF,EAAY,kBACZC,EAAiB,YACjBC,EAAW,cACXC,EAAa,cACbC,EAAa,eACbC,EAAc,wBACdC,EAAuB,mBACvBC,EAAkB,yBAClBC,EAAwB,aACxBC,EAAY,6BACZC,EAA4B,yBAC5BC,EAAwB,aACxBC,EAAY,YACZC,EAAW,cACXC,GAEHnG,EACG,MAAMoG,EAAqBC,IAEnB1E,EAAAA,EAAAA,KAAC2E,EAAAA,MAAK,CACFC,OAAK,EACL1D,MAAOwC,EAAamB,wBAAwBH,EAASI,UAAUJ,EAASK,OACxExD,SAAWL,GAAU+C,EAAmB/C,EAAOwD,GAC/CM,cAAc,IAIpBC,EAAyBP,IAEvB1E,EAAAA,EAAAA,KAAC2E,EAAAA,MAAK,CACFC,OAAK,EACL1D,MAAOyC,EAAkBe,EAASI,UAAUJ,EAASK,OACrDxD,SAAWL,GAAU8C,EAAwB9C,EAAOwD,GACpDM,cAAc,EACdE,UAAU,aAIhBC,EAAwBT,IAC1B,IACI,MAAMxD,EAAQwD,EACd,MAAqB,kBAAVxD,EACAA,EAAMkE,iBAENlE,CAEf,CAAE,MAAOmE,GACLC,QAAQC,IAAI,yBAChB,GAqBJD,QAAQC,IAAIf,GACZ,MAAMgB,EAAgBA,CAACC,EAASC,KAC5B,OAAQD,GACJ,IAAM,SACF,OAAOnE,EAAAA,GAAgCoE,EAAgBC,QAC3D,IAAK,UACD,OAAOrE,EAAAA,GAAgCoE,EAAgBE,SAC3D,IAAM,WACF,OAAOtE,EAAAA,GAAgCoE,EAAgBG,UAC3D,IAAM,cACF,OAAOvE,EAAAA,GAAgCoE,EAAgBI,aAC3D,IAAK,OACD,OAAOxE,EAAAA,GAAgCoE,EAAgBK,MAC3D,IAAM,SACF,OAAOzE,EAAAA,GAAgCoE,EAAgBM,QAC3D,QACI,MAAO,GACf,EAsBJ,OACIhG,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SACfA,CAACK,EAAG6F,KACDvG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBI,SAAA,EAC7BC,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACdC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,kCAAiCI,UAC5CL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BI,SAAA,EACzCC,EAAAA,EAAAA,KAAA,QAAMJ,MAAO,CAAE,WAAc,QAASG,SAAEK,EAAE,wCAC1CJ,EAAAA,EAAAA,KAAA,OAAKJ,MAAO,CAAEsG,aAAc,WAC5BxG,EAAAA,EAAAA,MAACyG,EAAAA,GAAS,CACNC,KAAMzC,EACN0C,cAAc,WACdC,YAAY,EACZC,aAAa,QACbC,UAAW1C,EACX2C,kBAAmBvC,EAAyBnE,SAAA,EAE5CC,EAAAA,EAAAA,KAACmG,EAAAA,GAAUO,OAAM,CACb/G,UAAU,gBAEVoF,MAAM,WACN4B,OAAQvG,EAAE,0BAFN,aAIRJ,EAAAA,EAAAA,KAACmG,EAAAA,GAAUO,OAAM,CACb/G,UAAU,gBAEVoF,MAAM,WACN4B,OAAQvG,EAAE,0BAFN,aAIRJ,EAAAA,EAAAA,KAACmG,EAAAA,GAAUO,OAAM,CACb/G,UAAU,gBAEVoF,MAAM,YACN6B,mBAAqBlC,GAAaS,EAAqBT,EAASmC,QAAQC,WACxEC,SAAU9B,EACV0B,QAAQK,EAAAA,EAAAA,IAAgC5G,EAAE,4BAJtC,wBAUpBJ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,MAAMC,MAAO,CAAEsG,aAAc,OAAQjG,UAAW,QAASF,UACpEC,EAAAA,EAAAA,KAAA,OACIL,UAAU,sCACVC,MAAO,CAAEqH,UAAW,SAAUlH,UAE9BC,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACHC,KAAK,UACLpB,QAASqD,EACThC,QAAS3B,EAAE,qBACXe,UAAUgD,IAAgBG,SAItCtE,EAAAA,EAAAA,KAAA,QAAMJ,MAAO,CAAE,WAAc,QAASG,SAAEK,EAAE,wCAC1CJ,EAAAA,EAAAA,KAAA,OAAKJ,MAAO,CAAEsG,aAAc,WAC5BlG,EAAAA,EAAAA,KAAA,OAAKL,UAAU,qBAAoBI,UAC/BC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,4BAA2BI,UACtCC,EAAAA,EAAAA,KAAC2E,EAAAA,MAAK,CACFC,OAAK,EACL1D,MAAOwC,EAAawD,cACpBhC,UAAU,WACViC,MAAO/G,EAAE,qCACT4E,cAAc,EACdzD,SAAW6E,GAASvC,EAAc,gBAAiBuC,GACnDf,MAAOjF,EAAEiE,EAAyB6C,sBAI9ClH,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACdC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,kCAAiCI,UAC5CC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,sBAAqBI,UAChCL,EAAAA,EAAAA,MAACyG,EAAAA,GAAS,CACNC,KAAM1C,EAAamB,wBACnByB,YAAY,EACZC,aAAa,QAAOxG,SAAA,EAEpBC,EAAAA,EAAAA,KAACmG,EAAAA,GAAUO,OAAM,CACb/G,UAAU,gBAEVoF,MAAM,cACN4B,OAAQvG,EAAE,sCAFN,gBAIRJ,EAAAA,EAAAA,KAACmG,EAAAA,GAAUO,OAAM,CACb/G,UAAU,gBAEVoF,MAAM,mBACNgC,SAAWK,IAAaC,OAhJtB3C,EAgJ+C0C,EAhJrC1B,EAgJ+C9B,EAAY0D,kBA9I/FtH,EAAAA,EAAAA,KAACgB,EAAAA,OAAM,CACHrB,UAAU,kBACVuB,MACIwC,EAAamB,wBAAwBH,EAASI,UAC9CJ,EAASK,OAGbH,OAAK,EACLvD,QAASqE,EACTnE,SAAWL,GAAU+C,EAAmB/C,EAAOwD,GAC/CQ,UAAU,WACVF,cAAc,EACduC,QAAQ,IAdaF,IAAC3C,EAAUgB,CAgJ6E,EACzFiB,OAAQvG,EAAE,0BAHN,qBAKRJ,EAAAA,EAAAA,KAACmG,EAAAA,GAAUO,OAAM,CACb/G,UAAU,gBAEVoF,MAAM,MACN4B,OAAQvG,EAAE,oBACV2G,SAAWK,IACPI,OApHC9C,EAoH2B0C,GAlHxDpH,EAAAA,EAAAA,KAACgB,EAAAA,OAAM,CACHrB,UAAU,kBACVsB,YAAY,SACZC,MACIwC,EAAamB,wBAAwBH,EAASI,UAC9CJ,EAASK,OAGbH,OAAK,EACLvD,QAASmE,EAAcd,EAASmC,QAAQpB,QAASjB,GACjDjD,SAAWL,GAAU+C,EAAmB/C,EAAOwD,GAC/CQ,UAAU,WACVF,cAAc,EACd7D,SAAuC,OAA7BuD,EAASmC,QAAQpB,QAC3B8B,QAAQ,IAhBgBC,IAAC9C,CAqHJ,GALG,QAOR1E,EAAAA,EAAAA,KAACmG,EAAAA,GAAUO,OAAM,CACb/G,UAAU,gBAEVoF,MAAM,gBACFgC,SAAWrC,GAAaS,EAAqBT,EAASmC,QAAQY,eAElEV,SAAUtC,EACVkC,OAAQvG,EAAE,+BALN,2BAWpBJ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,MAAKI,UAChBC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,6BAA4BI,UACvCL,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEoC,MAAO,SAAUjC,SAAA,EAC3BC,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACHE,QAAS3B,EAAE,uBACXT,UAAW2E,EAAe,eAAiB,eAE3C5D,QAAS6D,KAEbvE,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACHE,QAAS3B,EAAE,QACXe,UAAWmD,EACX5D,QAAS0D,eAU7C,CA1PAX,EAAuCL,aAAe,CAClDsE,kBAAkB,EAClB9D,YAAa,CACT0D,iBAAkB,KCV1B,MAAMK,UAAwCC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KACtDC,MAAQ,CACNlD,wBAAyB,GACzBlB,kBAAmB,GACnBD,aAAc,CAAC,EACfsE,UAAWC,IAAAA,UAAiBC,EAAAA,IAC5BC,iBAAiB,EACjBC,aAAa,EACbC,WAAY,GACZf,iBAAkB,GAClBnD,cAAc,EACdG,cAAc,EACdD,yBAA0B/C,EAAAA,GACxBgH,EAAAA,IAEFxE,cAAe,GACfU,cAAc,CAAC,GACf,KAYF+D,YAAeC,IACb,KACEC,EAAAA,EAAAA,QACEzI,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC0I,EAAAA,EAAW,CAACC,oBAAqBH,MAEpC,CACEI,UAAwC,YAA7BJ,EAAaK,aAA4B,KAG1D,CAAE,MAAOxD,GACPC,QAAQC,IACN,qEACAF,EAEJ,GACA,KAyBFyD,0BAA4B,KAE1B,IAEEC,IACEC,EAAAA,IACA1H,EAAAA,GACE2H,KAAKC,MAAMC,aAAaC,YAE1BC,MAAMC,IAEN,IAAIC,EAASD,EAASlD,KACtB,GAAImD,EAAOC,UAAW,CACpB,GAC0B,OAAxBD,EAAOE,aACP,CACA,IAAI/F,EAAe6F,EAAOE,aAC1BR,KAAKS,SAAS,CAAEvB,iBAAiB,EAAMzE,eAAcsE,UAAWuB,EAAOE,aAAe5E,wBAAyB0E,EAAOE,aAAa5E,yBACrI,CAC8C,OAA1C0E,EAAOE,aAAa9F,mBACtBsF,KAAKS,SAAS,CAAE/F,kBAAmB4F,EAAOE,aAAa9F,mBAE3D,MACE2B,QAAQC,IAAI,uCAAwCgE,EAAOI,UAC7D,GAEJ,CAAE,MAAOtE,GACPC,QAAQC,IACN,yEACAF,EAEJ,GACD,KAiHDnB,yBAA4B0F,IACtBA,EAAMnK,OAAQ,EAChBwJ,KAAKS,SAAS,CAAE5F,cAAe8F,EAAOzF,cAAc,IAGpD8E,KAAKS,SAAS,CAAE5F,cAAe8F,EAAOzF,cAAc,GACtD,EACA,KAEFH,wBAA0B,CAAC6F,EAAQnF,KAEjC,IACE,IAAIf,EAAoBsE,IAAAA,UAAiBgB,KAAKlB,MAAMpE,mBACpDA,EAAkBe,EAASI,UAAUJ,EAASK,OAAS8E,EACvD,IAAI/F,EAAgBmF,KAAKlB,MAAMjE,cAC3BgG,EAAQhG,EAAciG,MAAK7I,GAAkBA,EAAM8I,WAAatF,EAASmC,QAAQmD,WACjFlG,EAAcrE,OAAS,QAAekB,IAAVmJ,IAC9BA,EAAMhD,UAAY+C,GAGpBZ,KAAKS,SAAS,CAAE/F,qBAElB,CAAE,MAAO0B,GACPC,QAAQC,IACN,yDACAF,EAEJ,GACA,KACF4E,aAAe,CAACC,EAAc9D,KAE5B,IACE,MAAM1C,EAAeuE,IAAAA,UAAiBgB,KAAKlB,MAAMrE,cACjDA,EAAawG,GAAgB9D,EAC7B6C,KAAKS,SAAS,CAAEhG,gBAClB,CAAE,MAAO2B,GACPC,QAAQC,IACN,0DACAF,EAEJ,GACA,KACFpB,mBAAqB,CAAC4F,EAAQnF,KAC5B,IACE,IAAIhB,EAAeuE,IAAAA,UAAiBgB,KAAKlB,MAAMrE,cAC/CA,EAAamB,wBAAwBH,EAASI,UAC5CJ,EAASK,OACP8E,EACJZ,KAAKS,SAAS,CAAEhG,gBAClB,CAAE,MAAO2B,GACPC,QAAQC,IAAI,8BAA+BF,EAC7C,GACA,KACFd,YAAc,KAEZ,IACE,IAAIyD,EAAYC,IAAAA,UAAiBgB,KAAKlB,MAAMC,WAC5CiB,KAAKS,SAAS,CACZhG,aAAc,IAAKsE,GACnBrE,kBAAmBqE,EAAUrE,mBAEjC,CAAE,MAAO0B,GACPC,QAAQC,IAAI,4DAA6DF,EAC3E,GACD,KAoGD8E,WAAa,KAEX,IACElB,KAAKS,SAAS,CAAEtB,aAAa,IAC7B,IAAIgC,EAA8BnB,KAAKoB,cACnCpB,KAAKqB,gBACPrB,KAAK7E,6BAA6BgG,EAEtC,CAAE,MAAO/E,GACPC,QAAQC,IACN,wDACAF,EAEJ,GACD,KACDkF,eAAiB,KAEf,IACE,IAAIH,EAA8BnB,KAAKoB,cACnCpB,KAAKqB,gBACPrB,KAAKlF,eAAeqG,EAExB,CAAE,MAAO/E,GACPC,QAAQC,IACN,wDACAF,EAEJ,GACD,KACDtB,eAAkBqG,IAChB,IAAI5B,EAAe,CACjBK,YAAa,WACb2B,QAAS,wBACTC,qBAAsB,CACpB,CACEC,UAAW,GACXC,UAAW,GACXC,WAAW,EACXC,aAAc,MAIhBC,EAAM,CACRC,OAAQX,GAEVrB,IACEC,EAAAA,IACA1H,EAAAA,GACEwJ,EACA7B,KAAKC,MAAMC,aAAaC,YAGzBC,MAAMC,IAEL,IAAIC,EAASD,EAASlD,KACtBoC,EAAaK,YAAcU,EAAOC,UAAY,UAAY,WAC1DhB,EAAaiC,qBAAqB,GAAGG,UAAYrB,EAAOC,WAC/B,IAArBD,EAAOC,WAETP,KAAKH,4BACLG,KAAKS,SAAS,CACZvF,cAAc,MAGhBqE,EAAaiC,qBAAqB,GAAGI,aACnCtB,EAAOI,UAAU,GACnBV,KAAKS,SAAS,CACZvF,cAAc,IAEhBmB,QAAQC,IAAI,qCAAsCgE,EAAOI,aAE3DlB,EAAAA,EAAAA,QACEzI,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC0I,EAAAA,EAAW,CAACC,oBAAqBH,MAEpC,CACEI,UAC+B,YAA7BJ,EAAaK,aAA4B,KAE9C,IAEFmC,OAAO3F,IACN4D,KAAKS,SAAS,CACZtB,aAAa,IAEfI,EAAaiC,qBAAqB,GAAGI,aAAexF,GACpDoD,EAAAA,EAAAA,QACEzI,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC0I,EAAAA,EAAW,CAACC,oBAAqBH,MAEpC,CACEI,UAC+B,YAA7BJ,EAAaK,aAA4B,KAE9C,GACD,EACL,KACDzE,6BAAgCgG,IAC9B,IAAI5B,EAAe,CACjBK,YAAa,WACb2B,QAAS,wBACTC,qBAAsB,CACpB,CACEC,UAAW,GACXC,UAAW,GACXC,WAAW,EACXC,aAAc,MAIhBC,EAAM,CACRC,OAAQX,GAEVrB,IACEC,EAAAA,IACA1H,EAAAA,GACEwJ,EACA7B,KAAKC,MAAMC,aAAaC,YAGzBC,MAAMC,IAEL,IAAIC,EAASD,EAASlD,KACtBoC,EAAaK,YAAcU,EAAOC,UAAY,UAAY,WAC1DhB,EAAaiC,qBAAqB,GAAGG,UAAYrB,EAAOC,WAC/B,IAArBD,EAAOC,UAITP,KAAKH,6BAELN,EAAaiC,qBAAqB,GAAGI,aACnCtB,EAAOI,UAAU,GACnBV,KAAKS,SAAS,CACZtB,aAAa,IAEf9C,QAAQC,IAAI,yCAA0CgE,EAAOI,aAE/DlB,EAAAA,EAAAA,QACEzI,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC0I,EAAAA,EAAW,CAACC,oBAAqBH,MAEpC,CACEI,UAC+B,YAA7BJ,EAAaK,aAA4B,KAE9C,IAEFmC,OAAO3F,IACN4D,KAAKS,SAAS,CACZtB,aAAa,IAEfI,EAAaiC,qBAAqB,GAAGI,aAAexF,GACpDoD,EAAAA,EAAAA,QACEzI,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC0I,EAAAA,EAAW,CAACC,oBAAqBH,MAEpC,CACEI,UAC+B,YAA7BJ,EAAaK,aAA4B,KAE9C,GACD,CACL,CA5gBDoC,iBAAAA,GACE,IACE3J,EAAAA,GAAqB2H,KAAKC,MAAMgC,YAAYzB,aAAa0B,YACzDlC,KAAKH,4BACLG,KAAKmC,aACLnC,KAAKoC,wBACLpC,KAAKqC,eACP,CAAE,MAAOjG,GACPC,QAAQC,IAAI,kDAAmDF,EACjE,CACF,CAkBAiG,aAAAA,GACE,IAGOrC,KAAKC,MAAMgC,YAAYzB,aAAa8B,kBACvCxC,IACEC,EAAAA,IAAyB,sBACzB1H,EAAAA,GACE2H,KAAKC,MAAMC,aAAaC,YAE1BC,MAAMC,IACN,IAAIC,EAASD,EAASlD,MACG,IAArBmD,EAAOC,WACTP,KAAKS,SAAS,CACZpF,aACwD,SAArDiF,EAAOE,aAAyB,WAAG+B,eAE1C,GAGN,CAAE,MAAOnG,GACPC,QAAQC,IAAI,sDAAuDF,EACrE,CACF,CAkCA+F,UAAAA,GACE,IACErC,IACEC,EAAAA,IACA1H,EAAAA,GACE2H,KAAKC,MAAMC,aAAaC,YAE1BC,MAAMC,IACN,IAAIC,EAASD,EAASlD,MACG,IAArBmD,EAAOC,UACmB,OAAxBD,EAAOE,cACTR,KAAKS,SAAS,CACZlF,cAAe+E,EAAOE,eAI1BnE,QAAQC,IAAI,uBAAwBgE,EAAOI,UAC7C,GAEJ,CAAE,MAAOtE,GACPC,QAAQC,IAAI,2DACd,CACF,CACA8F,qBAAAA,GAEE,IACEtC,IACEC,EAAAA,IACA1H,EAAAA,GACE2H,KAAKC,MAAMC,aAAaC,YAE1BC,MAAMC,IAEN,IAAIC,EAASD,EAASlD,KACtB,IAAyB,IAArBmD,EAAOC,UAAoB,CAC7B,IAAIlC,EAAmB,GACK,OAAxBiC,EAAOE,cACTgC,OAAOC,KAAKnC,EAAOE,cAAckC,SAASC,GACxCtE,EAAiBuE,KAAK,CACpBC,KAAMvC,EAAOE,aAAamC,GAC1B1K,MAAO0K,MAGX3C,KAAKS,SAAS,CAAEpC,sBAEhBhC,QAAQC,IAAI,2BAEhB,MACED,QAAQC,IAAI,yBAA0BgE,EAAOI,UAC/C,GAEJ,CAAE,MAAOtE,GACPC,QAAQC,IAAI,wDACd,CACF,CACA8E,WAAAA,GAEE,IAAID,EAA8B,CAChClD,cAAe,GACfrC,wBAAyB,GACzBlB,kBAAmB,GACnB0E,WAAY,IAEd,IAEE,IAAI0D,EAAsB,GAEtBrI,GADoBuE,IAAAA,UAAiBgB,KAAKlB,MAAMpE,mBACjCsE,IAAAA,UAAiBgB,KAAKlB,MAAMrE,eAC3CI,EAAgBmE,IAAAA,UAAiBgB,KAAKlB,MAAMjE,eAChDsG,EAA4B/B,WAAa3E,EAAa2E,WACtD+B,EAA4BlD,cAAgBxD,EAAawD,cACzD,IAAI8E,EAAW,GACXtI,EAAamB,wBAAwBpF,OAAS,GAC7CwM,MAAMC,QAAQxI,EAAamB,0BAE9BnB,EAAamB,wBAAwB8G,SAASQ,IAC5CJ,EAAoBF,KAClB,CACEO,kBAAmBD,EAAUC,kBAC7BC,kBAAmBF,EAAUE,kBAC7B5E,cAAe0E,EAAU1E,cACzB6E,kBAAmBH,EAAUG,kBAC7BC,iBAAkBJ,EAAUI,iBAC5BC,YAAaL,EAAUK,YACvBC,IAAKN,EAAUM,KAElB,KAG2B,IAA5BxD,KAAKlB,MAAM5D,cACTL,EAAcrE,OAAS,GACtBwM,MAAMC,QAAQpI,IAEjBA,EAAc6H,SAAS/B,IACrBoC,EAASH,KACP,CACE7B,SAAUJ,EAAMI,SAChBlD,UAAW8C,EAAM9C,WAEpB,IAKPsD,EAA4BzG,kBAAoBqI,EAChD5B,EAA4BvF,wBAA0BkH,CAExD,CAAE,MAAO1G,GACPC,QAAQC,IAAI,4DAA6DF,EAC3E,CACA,OAAO+E,CACT,CAkEAE,YAAAA,GAEE,IACE,IAAI3G,EAAoBsE,IAAAA,UAAiBgB,KAAKlB,MAAMpE,mBACpD,IAAIU,EAA2B4D,IAAAA,UAAiBgB,KAAKlB,MAAM1D,0BAC3D,IAAIP,EAAgBmE,IAAAA,UAAiBgB,KAAKlB,MAAMjE,eAC5CJ,EAAeuE,IAAAA,UAAiBgB,KAAKlB,MAAMrE,cAC3C8E,EAAe,CACjBK,YAAa,WACb2B,QAAS,yBACTC,qBAAsB,IAExBgB,OAAOC,KAAKpD,EAAAA,IAAwBqD,SAAQ,SAAUC,GACpDvH,EAAyBuH,GAAOtK,EAAAA,GAC9BgH,EAAAA,GAAuBsD,GACvBlI,EAAawD,cAEjB,IACoC,KAA/BxD,EAAawD,eACe,OAA/BxD,EAAawD,oBACkBvG,IAA/B+C,EAAawD,gBACb7C,EAAwC,cAAI,mCAC1CX,EAAamB,wBAAwBpF,OAAS,GAChDiE,EAAamB,wBAAwB8G,SAASe,IAC5CC,EAAAA,GAA6BhB,SAASiB,IACpC,IAAIC,EAAM,QAEYlM,IAAlBiM,EAAIE,YACND,EAAMvL,EAAAA,GAAwBsL,EAAIE,UAAWJ,EAAIE,EAAI7H,SAG3C,KAAR8H,GACFrE,EAAaiC,qBAAqBoB,KAAK,CACrCnB,UAAW,CAACkC,EAAIG,aAChBpC,UAAW,CAAC+B,EAAIE,EAAI7H,QACpB6F,WAAW,EACXC,aAAcgC,GAElB,GACA,IAIFlJ,EAAkBlE,OAAS,GAC7BkE,EAAkBgI,SAASe,IACzBM,EAAAA,GAA8BrB,SAASiB,IACrC,IAAIC,EAAM,QAEYlM,IAAlBiM,EAAIE,YACND,EAAMvL,EAAAA,GAAwBsL,EAAIE,UAAWJ,EAAIE,EAAI7H,SAG3C,KAAR8H,GACFrE,EAAaiC,qBAAqBoB,KAAK,CACrCnB,UAAW,CAACkC,EAAIG,aAChBpC,UAAW,CAAC+B,EAAIE,EAAI7H,QACpB6F,WAAW,EACXC,aAAcgC,GAElB,GACA,KAG0B,IAA5B5D,KAAKlB,MAAM5D,cACbL,EAAcvD,KAAKW,IACM,IAAnBA,EAAM4F,WACR0B,EAAaiC,qBAAqBoB,KAAK,CACrCnB,UAAW,CAAC,iBACZC,UAAW,CAACzJ,EAAM8I,UAClBY,WAAW,EACXC,aACE,gCAEN,IAGJ5B,KAAKS,SAAS,CAAErF,6BAChB,IAAI4I,GAAc,EAKlB,OAJIA,IACFA,EAAcxB,OAAOyB,OAAO7I,GAA0B8I,OAAM,SAAUjM,GACpE,MAAiB,KAAVA,CACT,KACEsH,EAAaiC,qBAAqBhL,OAAS,IAC7CgJ,EAAAA,EAAAA,QACEzI,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC0I,EAAAA,EAAW,CAACC,oBAAqBH,MAEpC,CACEI,UAC+B,YAA7BJ,EAAaK,aAA4B,OAGxC,GAEFoE,CACT,CAAE,MAAO5H,GACPC,QAAQC,IAAI,4BAA6BF,EAC3C,CACF,CAqKA+H,MAAAA,GAKE,OACEpN,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAV,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EACEC,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAACwD,EAAAA,EAAsB,CACrBjF,eAAgB0K,KAAKC,MAAMmE,WAC3BtO,sBAAuBkK,KAAKC,MAAMnK,sBAClCC,YAAY,EACZC,eAAe,EACfH,YAAY,OAGhBkB,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,SACXkJ,KAAKlB,MAAMI,iBAMVnI,EAAAA,EAAAA,KAACyD,EAAsC,CACnCoB,wBAAyBoE,KAAKlB,MAAMlD,wBACpClB,kBAAmBsF,KAAKlB,MAAMpE,kBAC9BD,aAAcuF,KAAKlB,MAAMrE,aACzBE,YAAa,CACX0D,iBAAkB2B,KAAKlB,MAAMT,kBAEjC9C,cAAeyE,KAAKlB,MAAMvD,cACxBR,wBAAyBiF,KAAKjF,wBAC9BH,cAAeoF,KAAKgB,aACpBhG,mBAAoBgF,KAAKhF,mBACzBF,eAAgBkF,KAAKsB,eACrBrG,yBAA0B+E,KAAK/E,yBAC/BJ,cAAemF,KAAKlB,MAAMjE,cAC1BK,aAAc8E,KAAKlB,MAAM5D,aACzBG,aAAc2E,KAAKlB,MAAMzD,aACzBF,6BAA8B6E,KAAKkB,WACnC5F,YAAa0E,KAAK1E,YAClBF,yBAA0B4E,KAAKlB,MAAM1D,4BAIzCrE,EAAAA,EAAAA,KAACsN,EAAAA,EAAW,CAAC9C,QAAQ,eAGzBxK,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAACuN,EAAAA,eAAc,CACbC,iBAAiB,EACjBC,cAAc,EACdC,aAAa,EACbC,aAAa,EACbxL,SAAS,eACTyL,eAAe,kCAO7B,EAEF,MAOA,GAAeC,EAAAA,EAAAA,KAPU9F,IAChB,CACLmD,YAAanD,EAAM+F,eAAe5C,YAClC/B,aAAcpB,EAAM+F,eAAeC,aAIvC,CAAwCpG,E,6GC1nBjC,SAASqG,EAAqBC,EAAYC,GAC/C,GAAIjC,MAAMC,QAAQ+B,GAAa,CAIA,IAHTA,EAAWE,QAC5BC,GAAWA,EAAOtC,OAASoC,IAEZzO,QAChBwO,EAAWI,QAAQ,CACjBnN,MAAO,KACP4K,KAAMoC,GAEZ,CACA,OAAOD,CACT,CAEO,SAASK,IACd,IAAIC,EAAWC,OAAOC,UAAUC,cAAgBF,OAAOC,UAAUF,SAMjE,OALAI,IAAAA,OAAcJ,GACGI,IAAAA,aAEOC,eAAe,IAGzC,CAGO,SAAS5H,EAAgCZ,GAC9C,OACE1G,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EAAKC,EAAAA,EAAAA,KAAA,QAAAD,SAAOqG,KAAYpG,EAAAA,EAAAA,KAAA,OAAK6O,MAAM,wDAEvC,C","sources":["Components/UIBase/Common/TMUserActions.jsx","Components/Composite/Common/TMUserActionsComposite.jsx","Components/Composite/Summary/ATGMasterConfigurationSummaryComposite.jsx","Components/Composite/Entity/AtgMasterConfigurationComposite.jsx","JS/functionalUtilities.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Icon,\r\n  Breadcrumb,\r\n  Select,\r\n  Modal,\r\n  Button,\r\n  Popup,\r\n  VerticalMenu,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nTMUserActions.propTypes = {\r\n  operationsVisibilty: PropTypes.shape({\r\n    add: PropTypes.bool,\r\n    delete: PropTypes.bool,\r\n    shareholder: PropTypes.bool,\r\n  }).isRequired,\r\n  breadcrumbItem: PropTypes.shape({\r\n    itemName: PropTypes.string,\r\n    itemCode: PropTypes.string,\r\n    itemProps: PropTypes.any,\r\n    localizedKey: PropTypes.string,\r\n    parents: PropTypes.array,\r\n    isComponent: PropTypes.bool,\r\n  }).isRequired,\r\n  shareholders: PropTypes.array.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onShareholderChange: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onAdd: PropTypes.func.isRequired,\r\n  popUpContent: PropTypes.array,\r\n};\r\nTMUserActions.defaultProps = {\r\n  operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n  breadcrumbItem: {\r\n    itemName: \"\",\r\n    itemCode: \"\",\r\n    localizedKey: \"\",\r\n    itemProps: {},\r\n    parents: [],\r\n    isComponent: false,\r\n  },\r\n  shareholders: [],\r\n  selectedShareholder: \"\",\r\n  popUpContent: [],\r\n  shrVisible: true,\r\n  addVisible: true,\r\n  deleteVisible: true\r\n};\r\nexport function TMUserActions({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [popUpOpen, setPopUpOpen] = useState(false);\r\n  function getShareholderDropdownOptions() {\r\n    return Utilities.transferListtoOptions(shareholders);\r\n    // var List = [];\r\n    // shareholders.forEach((element) => {\r\n    //   List.push({ text: element, value: element });\r\n    // });\r\n    // return List;\r\n  }\r\n\r\n  function buildBreadcrumb() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {breadcrumbItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item\r\n                  onClick={() => {\r\n                    if (\r\n                      handleBreadCrumbClick !== undefined &&\r\n                      handleBreadCrumbClick !== null\r\n                    ) {\r\n                      handleBreadCrumbClick(\r\n                        parentitem.itemCode,\r\n                        breadcrumbItem.parents\r\n                      );\r\n                    }\r\n                  }}\r\n                  key={parentitem.itemCode}\r\n                >\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={breadcrumbItem.itemCode}>\r\n              {t(breadcrumbItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  function handlePopUpClick() {\r\n    if (operationsVisibilty.add) {\r\n      if (popUpContent.length > 0) {\r\n        if (popUpOpen === false) setPopUpOpen(true);\r\n        else setPopUpOpen(false);\r\n      } else {\r\n        onAdd();\r\n      }\r\n    }\r\n  }\r\n\r\n  function popUpMenuClick(menuItem) {\r\n    setPopUpOpen(false);\r\n    onAdd(menuItem);\r\n  }\r\n  function displayIcons() {\r\n    return (\r\n      <div\r\n        style={{ float: \"right\", display: \"inline-block\", marginTop: \"10px\" }}\r\n      >\r\n        {addVisible ? <Popup\r\n          position=\"bottom right\"\r\n          className=\"popup-theme-wrap\"\r\n          element={\r\n            <div\r\n              className={\r\n                (operationsVisibilty.add\r\n                  ? \"iconCircle \"\r\n                  : \"iconCircleDisable \") + \"iconblock\"\r\n              }\r\n              onClick={handlePopUpClick}\r\n            >\r\n              <Icon\r\n                root=\"common\"\r\n                name=\"badge-plus\"\r\n                size=\"small\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          }\r\n          on=\"click\"\r\n          open={popUpOpen}\r\n        >\r\n          <div onMouseLeave={() => setPopUpOpen(false)}>\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <VerticalMenu>\r\n                  <VerticalMenu>\r\n                    <VerticalMenu.Header>\r\n                      {t(\"Common_Create\")}\r\n                    </VerticalMenu.Header>\r\n                    {popUpContent.map((item) => {\r\n                      return (\r\n                        <VerticalMenu.Item\r\n                          onClick={() => popUpMenuClick(item.fieldName)}\r\n                        >\r\n                          {t(item.fieldValue)}\r\n                        </VerticalMenu.Item>\r\n                      );\r\n                    })}\r\n                  </VerticalMenu>\r\n                </VerticalMenu>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        </Popup> : \"\"}\r\n        {deleteVisible ? <div\r\n          style={{ marginLeft: \"10px\" }}\r\n          onClick={() => {\r\n            if (operationsVisibilty.delete) {\r\n              setModelOpen(true);\r\n              //displayTMModalforDelete();\r\n              //onDelete();\r\n            }\r\n          }}\r\n          className={\r\n            (operationsVisibilty.delete\r\n              ? \"iconCircle \"\r\n              : \"iconCircleDisable \") + \"iconblock\"\r\n          }\r\n        >\r\n          <Icon root=\"common\" name=\"delete\" size=\"small\" color=\"white\" />\r\n        </div> : \"\"}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayTMModalforDelete() {\r\n    //console.log(\"entered to display modal actions\");\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  onDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n    //return <TMModal open={true}></TMModal>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\" style={{ alignItems: \"flex-start\", padding: \"0px\" }}>\r\n      <div\r\n        className=\"col-9 col-sm-9 col-md-9 col-lg-10 col-xl-10\"\r\n        style={{ padding: \"0px\" }}\r\n      >\r\n        <div className=\"row\" style={{ marginTop: \"10px\", alignItems: \"\" }}>\r\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n            <ErrorBoundary> {buildBreadcrumb()}</ErrorBoundary>\r\n          </div>\r\n          <div\r\n            className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-4\"\r\n          //style={{ verticalAlign: \"middle\" }}\r\n          >\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <div\r\n                  className=\"compartmentIcon\"\r\n                  style={{ justifyContent: \"flex-start\" }}\r\n                >\r\n                  {shrVisible === false ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <div>\r\n                        <h4 className=\"shrText\">{t(\"Common_Shareholder\")}:</h4>\r\n                      </div>\r\n                      <div className=\"opSelect\">\r\n                        <Select\r\n                          //className=\"opSelect\"\r\n                          placeholder={t(\"Common_Shareholder\")}\r\n                          value={selectedShareholder}\r\n                          disabled={!operationsVisibilty.shareholder}\r\n                          options={getShareholderDropdownOptions()}\r\n                          onChange={(value) => onShareholderChange(value)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n\r\n          {displayTMModalforDelete()}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-3 col-sm-3 col-md-3 col-lg-2 col-xl-2\">\r\n        {displayIcons()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TMUserActions } from \"../../UIBase/Common/TMUserActions\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nexport function TMUserActionsComposite({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n\r\n}) {\r\n  return (\r\n    <TMUserActions\r\n      operationsVisibilty={operationsVisibilty}\r\n      breadcrumbItem={breadcrumbItem}\r\n      shareholders={shareholders}\r\n      selectedShareholder={selectedShareholder}\r\n      onShareholderChange={onShareholderChange}\r\n      onDelete={onDelete}\r\n      onAdd={onAdd}\r\n      popUpContent={popUpContent}\r\n      shrVisible={shrVisible}\r\n      handleBreadCrumbClick={handleBreadCrumbClick}\r\n      addVisible={addVisible}\r\n      deleteVisible={deleteVisible}\r\n    ></TMUserActions>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Input, Select, Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport {\r\n    handleIsRequiredCompartmentCell,\r\n} from \"../../../JS/functionalUtilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nATGMasterConfigurationSummaryComposite.propTypes = {\r\n    modATGMaster: PropTypes.object.isRequired,\r\n    AtgConfigurations: PropTypes.object.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        dataTypesOptions: PropTypes.array,\r\n    }).isRequired,\r\n    uomOptionList:PropTypes.array,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    selectedTanks: PropTypes.array.isRequired,\r\n    handleCellPointDataEdit: PropTypes.func.isRequired,\r\n    generateButton: PropTypes.func.isRequired,\r\n    handleBaySelectionChange: PropTypes.func.isRequired,\r\n    checkedTanks: PropTypes.bool.isRequired,\r\n    updateATGMasterConfiguration: PropTypes.func.isRequired,\r\n    AtgMasterValidationError: PropTypes.object.isRequired,\r\n    isATGEnabled: PropTypes.bool.isRequired,\r\n    handleReset: PropTypes.func.isRequired,\r\n}\r\nATGMasterConfigurationSummaryComposite.defaultProps = {\r\n    isEnterpriseNode: false,\r\n    listOptions: {\r\n        dataTypesOptions: [],\r\n    },\r\n\r\n}\r\nexport default function ATGMasterConfigurationSummaryComposite({\r\n    modATGMaster,\r\n    AtgConfigurations,\r\n    listOptions,\r\n    onFieldChange,\r\n    selectedTanks,\r\n    generateButton,\r\n    handleCellPointDataEdit,\r\n    handleCellDataEdit,\r\n    handleBaySelectionChange,\r\n    checkedTanks,\r\n    updateATGMasterConfiguration,\r\n    AtgMasterValidationError,\r\n    isATGEnabled,\r\n    handleReset,\r\n    uomOptionList\r\n\r\n}) {\r\n    const handleEditTextBox = (cellData) => {\r\n        return (\r\n            <Input\r\n                fluid\r\n                value={modATGMaster.AtgMasterConfigurations[cellData.rowIndex][cellData.field]}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n            />\r\n        );\r\n    };\r\n    const handleCellEditTextBox = (cellData) => {\r\n        return (\r\n            <Input\r\n                fluid\r\n                value={AtgConfigurations[cellData.rowIndex][cellData.field]}\r\n                onChange={(value) => handleCellPointDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n                indicator=\"required\"\r\n            />\r\n        );\r\n    };\r\n    const decimalDisplayValues = (cellData) => {\r\n        try {\r\n            const value = cellData;\r\n            if (typeof value === \"number\") {\r\n                return value.toLocaleString();\r\n            } else {\r\n                return value;\r\n            }\r\n        } catch (error) {\r\n            console.log(\"Error in displayvalues\");\r\n        }\r\n    };\r\n    \r\n    const handleCustomEditDropDown = (cellData, dropDownoptions) => {\r\n        return (\r\n            <Select\r\n                className=\"selectDropwdown\"\r\n                value={\r\n                    modATGMaster.AtgMasterConfigurations[cellData.rowIndex][\r\n                    cellData.field\r\n                    ]\r\n                }\r\n                fluid\r\n                options={dropDownoptions}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                indicator=\"required\"\r\n                reserveSpace={false}\r\n                search={true}\r\n            />\r\n        );\r\n    };\r\n    console.log(uomOptionList)\r\n    const UOMOptionList = (UOMType, dropDownoptions) => {\r\n        switch (UOMType) {\r\n            case  \"VOLUME\":\r\n                return Utilities.transferListtoOptions(dropDownoptions.VOLUME);\r\n            case \"DENSITY\":\r\n                return Utilities.transferListtoOptions(dropDownoptions.DENSITY);\r\n            case  \"PRESSURE\":\r\n                return Utilities.transferListtoOptions(dropDownoptions.PRESSURE);\r\n            case  \"TEMPERATURE\":\r\n                return Utilities.transferListtoOptions(dropDownoptions.TEMPERATURE);\r\n            case \"MASS\":\r\n                return Utilities.transferListtoOptions(dropDownoptions.MASS);\r\n            case  \"LENGTH\":\r\n                return Utilities.transferListtoOptions(dropDownoptions.LENGTH);\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n    const handleCustomUOMEditDropDown = (cellData, dropDownoptions) => {\r\n        return (\r\n            <Select\r\n                className=\"selectDropwdown\"\r\n                placeholder=\"Select\"\r\n                value={\r\n                    modATGMaster.AtgMasterConfigurations[cellData.rowIndex][\r\n                    cellData.field\r\n                    ]\r\n                }\r\n                fluid\r\n                options={UOMOptionList(cellData.rowData.UOMType, uomOptionList)}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                indicator=\"required\"\r\n                reserveSpace={false}\r\n                disabled={cellData.rowData.UOMType === null ? true : false}\r\n                search={true}\r\n            />\r\n        );\r\n    };\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t, index) => (\r\n                <div className=\"detailsContainer\">\r\n                    <ErrorBoundary>\r\n                    <div className=\"row marginRightZero tableScroll\">\r\n                        <div className=\"col-12 detailsTable tankcode\">\r\n                            <span style={{ \"fontWeight\": \"bold\" }}>{t(\"AtgCommonConfigure_TankCode_Point\")}</span>\r\n                            <div style={{ marginBottom: \"20px\" }}></div>\r\n                            <DataTable\r\n                                data={AtgConfigurations}\r\n                                selectionMode=\"multiple\"\r\n                                scrollable={true}\r\n                                scrollHeight=\"320px\"\r\n                                selection={selectedTanks}\r\n                                onSelectionChange={handleBaySelectionChange}\r\n                            >\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"TankCode\"\r\n                                    field=\"TankCode\"\r\n                                    header={t(\"AtgConfigure_TankCode\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"TankName\"\r\n                                    field=\"TankName\"\r\n                                    header={t(\"AtgConfigure_TankName\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"PointName\"\r\n                                    field=\"PointName\"\r\n                                    customEditRenderer={(cellData) => decimalDisplayValues(cellData.rowData.PointName)}\r\n                                    renderer={handleCellEditTextBox}\r\n                                    header={handleIsRequiredCompartmentCell(t(\"AtgConfigure_PointName\"))}\r\n                                ></DataTable.Column>\r\n                            </DataTable>\r\n                        </div>\r\n                        </div>\r\n                    </ErrorBoundary>\r\n                    <div className=\"row\" style={{ marginBottom: \"10px\", marginTop: \"10px\" }}>\r\n                        <div\r\n                            className=\"col col-md-8 col-lg-9 col col-xl-12\"\r\n                            style={{ textAlign: \"right\" }}\r\n                        >\r\n                            <Button\r\n                                type=\"primary\"\r\n                                onClick={generateButton}\r\n                                content={t(\"BaySCADA_Generate\")}\r\n                                disabled={checkedTanks && isATGEnabled ? false : true}\r\n                            ></Button>\r\n                        </div></div>\r\n\r\n                    <span style={{ \"fontWeight\": \"bold\" }}>{t(\"AtgCommonConfigure_Data_Parameter\")}</span>\r\n                    <div style={{ marginBottom: \"10px\" }}></div>\r\n                    <div className=\"row atgmasterinput\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4 \">\r\n                            <Input\r\n                                fluid\r\n                                value={modATGMaster.AtgScanPeriod}\r\n                                indicator=\"required\"\r\n                                label={t(\"AtgCommonConfigure_MonitoringRate\")}\r\n                                reserveSpace={false}\r\n                                onChange={(data) => onFieldChange(\"AtgScanPeriod\", data)}\r\n                                error={t(AtgMasterValidationError.AtgScanPeriod)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <ErrorBoundary>\r\n                    <div className=\"row marginRightZero tableScroll\">\r\n                        <div className=\"col-12 detailsTable\">\r\n                            <DataTable\r\n                                data={modATGMaster.AtgMasterConfigurations}\r\n                                scrollable={true}\r\n                                scrollHeight=\"250px\"\r\n                            >\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"Description\"\r\n                                    field=\"Description\"\r\n                                    header={t(\"AtgConfigure_Atg_Data_Description\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"ATGValueDataType\"\r\n                                    field=\"ATGValueDataType\"\r\n                                    renderer={(celldata) => handleCustomEditDropDown(celldata, listOptions.dataTypesOptions)}\r\n                                    header={t(\"AtgConfigure_DataType\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"UOM\"\r\n                                    field=\"UOM\"\r\n                                    header={t(\"AtgConfigure_UOM\")}\r\n                                    renderer={(celldata) =>\r\n                                        handleCustomUOMEditDropDown(celldata, listOptions)\r\n                                    }\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"ParameterName\"\r\n                                    field=\"ParameterName\"\r\n                                        renderer={(cellData) => decimalDisplayValues(cellData.rowData.ParameterName)}\r\n                                    // editable={true}\r\n                                    renderer={handleEditTextBox}\r\n                                    header={t(\"AtgConfigure_ParameterName\")}\r\n                                ></DataTable.Column>\r\n                            </DataTable>\r\n                        </div>\r\n                        </div>\r\n                    </ErrorBoundary>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-12 col-lg-12\">\r\n                            <div style={{ float: \"right\" }}>\r\n                                <Button\r\n                                    content={t(\"LookUpData_btnReset\")}\r\n                                    className={isATGEnabled ? \"cancelButton\" : \"disablereset\"}\r\n                                    // disabled={!isATGEnabled?true:false}\r\n                                    onClick={handleReset}\r\n                                ></Button>\r\n                                <Button\r\n                                    content={t(\"Save\")}\r\n                                    disabled={!isATGEnabled ? true : false}\r\n                                    onClick={updateATGMasterConfiguration}\r\n                                ></Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport lodash from \"lodash\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { toast,ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport {\r\n  AtgMasterValidationDef,\r\n} from \"../../../JS/ValidationDef\";\r\nimport { emptyATGMaster } from \"../../../JS/DefaultEntities\";\r\nimport { ATGMasterPointTableValidation, ATGMasterParameterValidation } from \"../../../JS/DetailsTableValidationDef\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\nimport ATGMasterConfigurationSummaryComposite from \"../Summary/ATGMasterConfigurationSummaryComposite\";\r\n\r\nclass AtgMasterConfigurationComposite extends Component {\r\n  state = {\r\n    AtgMasterConfigurations: [],\r\n    AtgConfigurations: [],\r\n    modATGMaster: {},\r\n    atgMaster: lodash.cloneDeep(emptyATGMaster),\r\n    isReadyToRender: true,\r\n    saveEnabled: true,\r\n    AtgEnabled: \"\",\r\n    dataTypesOptions: [],\r\n    checkedTanks: false,\r\n    isATGEnabled: false,\r\n    AtgMasterValidationError: Utilities.getInitialValidationErrors(\r\n      AtgMasterValidationDef\r\n    ),\r\n    selectedTanks: [],\r\n    uomOptionList:{}\r\n  };\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.GetATGMasterConfiguration();\r\n      this.getUOMList();\r\n      this.GetAttributeDataTypes();\r\n      this.getLookUpData();\r\n    } catch (error) {\r\n      console.log(\"ATGMasterConfigurationDetail:Error occurred on \", error);\r\n    }\r\n  }\r\n  notifyEvent = (notification) => {\r\n    try {\r\n      toast(\r\n        <ErrorBoundary>\r\n          <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n        </ErrorBoundary>,\r\n        {\r\n          autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"AtgMasterSCADAConfigurationComposite: Error occurred on savedEvent\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  getLookUpData() {\r\n    try {\r\n\r\n\r\n      if (!this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n        axios(\r\n          RestAPIs.GetLookUpData + \"?LookUpTypeCode=ATG\",\r\n          Utilities.getAuthenticationObjectforGet(\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        ).then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              isATGEnabled:\r\n                (result.EntityResult[\"ATGEnabled\"]).toLowerCase() === \"true\"  ? true : false,\r\n            });\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite:Error occured on getLookUpData\", error);\r\n    }\r\n  }\r\n  GetATGMasterConfiguration = () => {\r\n\r\n    try {\r\n\r\n      axios(\r\n        RestAPIs.GetATGMasterConfiguration,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n\r\n        var result = response.data;\r\n        if (result.IsSuccess) {\r\n          if (\r\n            result.EntityResult !== null\r\n          ) {\r\n            let modATGMaster = result.EntityResult;\r\n            this.setState({ isReadyToRender: true, modATGMaster, atgMaster: result.EntityResult,  AtgMasterConfigurations: result.EntityResult.AtgMasterConfigurations });\r\n          }\r\n          if (result.EntityResult.AtgConfigurations !== null) {\r\n            this.setState({ AtgConfigurations: result.EntityResult.AtgConfigurations})\r\n          }\r\n        } else {\r\n          console.log(\"Error in getatgmasterConfigurations:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"getatgmasterConfigurations:Error occured on getatgmasterConfigurations\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  getUOMList() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetUOMList,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            this.setState({\r\n              uomOptionList: result.EntityResult\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"ATGMasterDetailsComposite:Error while getting GetUOMList\");\r\n    }\r\n  }\r\n  GetAttributeDataTypes() {\r\n\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributeDataTypes,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let dataTypesOptions = [];\r\n          if (result.EntityResult !== null) {\r\n            Object.keys(result.EntityResult).forEach((key) =>\r\n              dataTypesOptions.push({\r\n                text: result.EntityResult[key],\r\n                value: key,\r\n              })\r\n            );\r\n            this.setState({ dataTypesOptions });\r\n          } else {\r\n            console.log(\"No datatypes identified.\");\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetDatatypes:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"DeviceDetailsComposite:Error while getting GetUOMList\");\r\n    }\r\n  }\r\n  fillDetails() {\r\n\r\n    let AtgMasterConfigurationsInfo = {\r\n      AtgScanPeriod: \"\",\r\n      AtgMasterConfigurations: [],\r\n      AtgConfigurations: [],\r\n      AtgEnabled: \"\"\r\n    }\r\n    try {\r\n\r\n      let MasterConfiguration = [];\r\n      let AtgConfigurations = lodash.cloneDeep(this.state.AtgConfigurations);\r\n      let modATGMaster = lodash.cloneDeep(this.state.modATGMaster)\r\n      let selectedTanks = lodash.cloneDeep(this.state.selectedTanks)\r\n      AtgMasterConfigurationsInfo.AtgEnabled = modATGMaster.AtgEnabled;\r\n      AtgMasterConfigurationsInfo.AtgScanPeriod = modATGMaster.AtgScanPeriod;\r\n      let TankList = [];\r\n      if (modATGMaster.AtgMasterConfigurations.length > 0\r\n        && Array.isArray(modATGMaster.AtgMasterConfigurations)\r\n      ) {\r\n        modATGMaster.AtgMasterConfigurations.forEach((attribute) => {\r\n          MasterConfiguration.push(\r\n            {\r\n              TankAttributeName: attribute.TankAttributeName,\r\n              TankAttributeCode: attribute.TankAttributeCode,\r\n              ParameterName: attribute.ParameterName,\r\n              AttributeDataType: attribute.AttributeDataType,\r\n              ATGValueDataType: attribute.ATGValueDataType,\r\n              Description: attribute.Description,\r\n              UOM: attribute.UOM\r\n            }\r\n          )\r\n        })\r\n      }\r\n      if (this.state.checkedTanks === true) {\r\n        if (selectedTanks.length > 0\r\n          && Array.isArray(selectedTanks)\r\n        ) {\r\n          selectedTanks.forEach((tanks) => {\r\n            TankList.push(\r\n              {\r\n                TankCode: tanks.TankCode,\r\n                PointName: tanks.PointName\r\n              }\r\n            )\r\n          })\r\n        }\r\n      }\r\n\r\n      AtgMasterConfigurationsInfo.AtgConfigurations = TankList;\r\n      AtgMasterConfigurationsInfo.AtgMasterConfigurations = MasterConfiguration;\r\n\r\n    } catch (error) {\r\n      console.log(\"ATGInterfaceDetailsComposite:Error occured on fillDetails\", error);\r\n    }\r\n    return AtgMasterConfigurationsInfo;\r\n  }\r\n  handleBaySelectionChange = (tanks) => {\r\n    if (tanks.length> 0) {\r\n      this.setState({ selectedTanks: tanks, checkedTanks: true });\r\n    }\r\n    else {\r\n      this.setState({ selectedTanks: tanks, checkedTanks: false });\r\n    }\r\n  };\r\n\r\n  handleCellPointDataEdit = (newVal, cellData) => {\r\n\r\n    try {\r\n      let AtgConfigurations = lodash.cloneDeep(this.state.AtgConfigurations)\r\n      AtgConfigurations[cellData.rowIndex][cellData.field] = newVal;\r\n      let selectedTanks = this.state.selectedTanks;\r\n      let Tanks = selectedTanks.find(value => { return value.TankCode === cellData.rowData.TankCode })\r\n      if (selectedTanks.length > 0 && Tanks !== undefined) {\r\n        Tanks.PointName = newVal;\r\n      }\r\n\r\n      this.setState({ AtgConfigurations });\r\n\r\n    } catch (error) {\r\n      console.log(\r\n        \"ATGMasterComposite:Error occured on handleCellDataEdit\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleChange = (propertyName, data) => {\r\n\r\n    try {\r\n      const modATGMaster = lodash.cloneDeep(this.state.modATGMaster);\r\n      modATGMaster[propertyName] = data;\r\n      this.setState({ modATGMaster });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ATGMasterDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleCellDataEdit = (newVal, cellData) => {\r\n    try {\r\n      let modATGMaster = lodash.cloneDeep(this.state.modATGMaster);\r\n      modATGMaster.AtgMasterConfigurations[cellData.rowIndex][\r\n        cellData.field\r\n      ] = newVal;\r\n      this.setState({ modATGMaster });\r\n    } catch (error) {\r\n      console.log(\"Error in handleCellDataEdit\", error)\r\n    }\r\n  };\r\n  handleReset = () => {\r\n\r\n    try {\r\n      let atgMaster = lodash.cloneDeep(this.state.atgMaster)\r\n      this.setState({\r\n        modATGMaster: { ...atgMaster },\r\n        AtgConfigurations: atgMaster.AtgConfigurations\r\n      });\r\n    } catch (error) {\r\n      console.log(\"ATGInterfaceDetailsComposite:Error occured on handleReset\", error);\r\n    }\r\n  }\r\n  validateSave() {\r\n\r\n    try {\r\n      let AtgConfigurations = lodash.cloneDeep(this.state.AtgConfigurations);\r\n      var AtgMasterValidationError = lodash.cloneDeep(this.state.AtgMasterValidationError)\r\n      let selectedTanks = lodash.cloneDeep(this.state.selectedTanks)\r\n      let modATGMaster = lodash.cloneDeep(this.state.modATGMaster)\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"ATGMaster_FailurStatus\",\r\n        messageResultDetails: [],\r\n      };\r\n      Object.keys(AtgMasterValidationDef).forEach(function (key) {\r\n        AtgMasterValidationError[key] = Utilities.validateField(\r\n          AtgMasterValidationDef[key],\r\n          modATGMaster.AtgScanPeriod\r\n        );\r\n      });\r\n      if ((modATGMaster.AtgScanPeriod === \"\" ||\r\n        modATGMaster.AtgScanPeriod === null ||\r\n        modATGMaster.AtgScanPeriod === undefined))\r\n        AtgMasterValidationError[\"AtgScanPeriod\"] = \"Bay_SCADA_InvalidMonitoringRate\";\r\n      if (modATGMaster.AtgMasterConfigurations.length > 0) {\r\n        modATGMaster.AtgMasterConfigurations.forEach((com) => {\r\n          ATGMasterParameterValidation.forEach((col) => {\r\n            let err = \"\";\r\n\r\n            if (col.validator !== undefined) {\r\n              err = Utilities.validateField(col.validator, com[col.field]);\r\n            }\r\n\r\n            if (err !== \"\") {\r\n              notification.messageResultDetails.push({\r\n                keyFields: [col.displayName],\r\n                keyValues: [com[col.field]],\r\n                isSuccess: false,\r\n                errorMessage: err,\r\n              });\r\n            }\r\n          });\r\n        })\r\n      }\r\n\r\n      if (AtgConfigurations.length > 0) {\r\n        AtgConfigurations.forEach((com) => {\r\n          ATGMasterPointTableValidation.forEach((col) => {\r\n            let err = \"\";\r\n\r\n            if (col.validator !== undefined) {\r\n              err = Utilities.validateField(col.validator, com[col.field]);\r\n            }\r\n\r\n            if (err !== \"\") {\r\n              notification.messageResultDetails.push({\r\n                keyFields: [col.displayName],\r\n                keyValues: [com[col.field]],\r\n                isSuccess: false,\r\n                errorMessage: err,\r\n              });\r\n            }\r\n          });\r\n        })\r\n      }\r\n      if (this.state.checkedTanks === true) {\r\n        selectedTanks.map((value) => {\r\n          if (value.PointName == \"\") {\r\n            notification.messageResultDetails.push({\r\n              keyFields: [\"selectedTanks\"],\r\n              keyValues: [value.TankCode],\r\n              isSuccess: false,\r\n              errorMessage:\r\n                \"DeviceInfo_PointNameRequired\",\r\n            });\r\n          }\r\n        })\r\n      }\r\n      this.setState({ AtgMasterValidationError });\r\n      var returnValue = true;\r\n      if (returnValue)\r\n        returnValue = Object.values(AtgMasterValidationError).every(function (value) {\r\n          return value === \"\";\r\n        });\r\n      if (notification.messageResultDetails.length > 0) {\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose:\r\n              notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n        return false;\r\n      }\r\n      return returnValue;\r\n    } catch (error) {\r\n      console.log(\"Error while Validate Save\", error)\r\n    }\r\n  }\r\n  handleSave = () => {\r\n\r\n    try {\r\n      this.setState({ saveEnabled: true });\r\n      let AtgMasterConfigurationsInfo = this.fillDetails()\r\n      if (this.validateSave()) {\r\n        this.updateATGMasterConfiguration(AtgMasterConfigurationsInfo);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ATGMasterDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  handleGenerate = () => {\r\n\r\n    try {\r\n      let AtgMasterConfigurationsInfo = this.fillDetails()\r\n      if (this.validateSave()) {\r\n        this.generateButton(AtgMasterConfigurationsInfo);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ATGMasterDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  generateButton = (AtgMasterConfigurationsInfo) => {\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"ATGMaster_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    var obj = {\r\n      Entity: AtgMasterConfigurationsInfo,\r\n    };\r\n    axios(\r\n      RestAPIs.GenerateATGConfiguration,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          \r\n          this.GetATGMasterConfiguration();\r\n          this.setState({\r\n            checkedTanks: false\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            checkedTanks: true\r\n          });\r\n          console.log(\"Error in GenerateATGConfiguration:\", result.ErrorList);\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose:\r\n              notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: true\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose:\r\n              notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      });\r\n  }\r\n  updateATGMasterConfiguration = (AtgMasterConfigurationsInfo) => {\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"ATGMaster_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    var obj = {\r\n      Entity: AtgMasterConfigurationsInfo,\r\n    };\r\n    axios(\r\n      RestAPIs.UpdateATGMasterConfiguration,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          // this.setState({\r\n          //   AtgMasterConfigurations, AtgConfigurations\r\n          // });\r\n          this.GetATGMasterConfiguration();\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: true\r\n          });\r\n          console.log(\"Error in UpdateATGMasterConfiguration:\", result.ErrorList);\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose:\r\n              notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: true\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose:\r\n              notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      });\r\n  }\r\n  render() {\r\n    // const user = this.props.userDetails.EntityResult;\r\n    // let tmuiInstallType=TMUIInstallType.LIVE;\r\n    // if(user.IsArchived)\r\n    // tmuiInstallType=TMUIInstallType.ARCHIVE;\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            <ErrorBoundary>\r\n              <TMUserActionsComposite\r\n                breadcrumbItem={this.props.activeItem}\r\n                handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n                addVisible={false}\r\n                deleteVisible={false}\r\n                shrVisible={false}\r\n              />\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n              {this.state.isReadyToRender ? (\r\n                // <ATGMasterConfigurationDetailsComposite\r\n                //   Key=\"SlotConfigurationDetail\"\r\n                //   onNotice={this.notifyEvent}\r\n                //   genericProps={this.props.activeItem.itemProps}\r\n                // ></ATGMasterConfigurationDetailsComposite>\r\n                <ATGMasterConfigurationSummaryComposite\r\n                    AtgMasterConfigurations={this.state.AtgMasterConfigurations}\r\n                    AtgConfigurations={this.state.AtgConfigurations}\r\n                    modATGMaster={this.state.modATGMaster}\r\n                    listOptions={{\r\n                      dataTypesOptions: this.state.dataTypesOptions,\r\n                  }}\r\n                  uomOptionList={this.state.uomOptionList}\r\n                    handleCellPointDataEdit={this.handleCellPointDataEdit}\r\n                    onFieldChange={this.handleChange}\r\n                    handleCellDataEdit={this.handleCellDataEdit}\r\n                    generateButton={this.handleGenerate}\r\n                    handleBaySelectionChange={this.handleBaySelectionChange}\r\n                    selectedTanks={this.state.selectedTanks}\r\n                    checkedTanks={this.state.checkedTanks}\r\n                    isATGEnabled={this.state.isATGEnabled}\r\n                    updateATGMasterConfiguration={this.handleSave}\r\n                    handleReset={this.handleReset}\r\n                    AtgMasterValidationError={this.state.AtgMasterValidationError}\r\n                  >\r\n                </ATGMasterConfigurationSummaryComposite>\r\n              ) : (\r\n                <LoadingPage message=\"Loading\"></LoadingPage>\r\n              )}\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n              <ToastContainer\r\n                hideProgressBar={true}\r\n                closeOnClick={false}\r\n                closeButton={true}\r\n                newestOnTop={true}\r\n                position=\"bottom-right\"\r\n                toastClassName=\"toast-notification-wrap\"\r\n              />\r\n            </ErrorBoundary>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(AtgMasterConfigurationComposite);\r\n\r\nAtgMasterConfigurationComposite.propTypes = {\r\n  activeItem: PropTypes.object,\r\n};\r\n","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["TMUserActions","_ref","operationsVisibilty","breadcrumbItem","shareholders","selectedShareholder","onShareholderChange","onDelete","onAdd","popUpContent","shrVisible","handleBreadCrumbClick","addVisible","deleteVisible","modelOpen","setModelOpen","useState","popUpOpen","setPopUpOpen","handlePopUpClick","add","length","_jsxs","className","style","alignItems","padding","children","_jsx","marginTop","ErrorBoundary","TranslationConsumer","t","Breadcrumb","parents","map","parentitem","Item","onClick","undefined","itemCode","localizedKey","justifyContent","_Fragment","Select","placeholder","value","disabled","shareholder","options","Utilities","onChange","Modal","open","size","Content","Footer","Button","type","content","float","display","Popup","position","element","Icon","root","name","color","on","onMouseLeave","VerticalMenu","Header","item","popUpMenuClick","menuItem","fieldName","fieldValue","marginLeft","delete","defaultProps","itemName","itemProps","isComponent","TMUserActionsComposite","ATGMasterConfigurationSummaryComposite","modATGMaster","AtgConfigurations","listOptions","onFieldChange","selectedTanks","generateButton","handleCellPointDataEdit","handleCellDataEdit","handleBaySelectionChange","checkedTanks","updateATGMasterConfiguration","AtgMasterValidationError","isATGEnabled","handleReset","uomOptionList","handleEditTextBox","cellData","Input","fluid","AtgMasterConfigurations","rowIndex","field","reserveSpace","handleCellEditTextBox","indicator","decimalDisplayValues","toLocaleString","error","console","log","UOMOptionList","UOMType","dropDownoptions","VOLUME","DENSITY","PRESSURE","TEMPERATURE","MASS","LENGTH","index","marginBottom","DataTable","data","selectionMode","scrollable","scrollHeight","selection","onSelectionChange","Column","header","customEditRenderer","rowData","PointName","renderer","handleIsRequiredCompartmentCell","textAlign","AtgScanPeriod","label","celldata","handleCustomEditDropDown","dataTypesOptions","search","handleCustomUOMEditDropDown","ParameterName","isEnterpriseNode","AtgMasterConfigurationComposite","Component","constructor","arguments","state","atgMaster","lodash","emptyATGMaster","isReadyToRender","saveEnabled","AtgEnabled","AtgMasterValidationDef","notifyEvent","notification","toast","NotifyEvent","notificationMessage","autoClose","messageType","GetATGMasterConfiguration","axios","RestAPIs","this","props","tokenDetails","tokenInfo","then","response","result","IsSuccess","EntityResult","setState","ErrorList","tanks","newVal","Tanks","find","TankCode","handleChange","propertyName","handleSave","AtgMasterConfigurationsInfo","fillDetails","validateSave","handleGenerate","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","obj","Entity","catch","componentDidMount","userDetails","IsArchived","getUOMList","GetAttributeDataTypes","getLookUpData","IsEnterpriseNode","toLowerCase","Object","keys","forEach","key","push","text","MasterConfiguration","TankList","Array","isArray","attribute","TankAttributeName","TankAttributeCode","AttributeDataType","ATGValueDataType","Description","UOM","com","ATGMasterParameterValidation","col","err","validator","displayName","ATGMasterPointTableValidation","returnValue","values","every","render","activeItem","LoadingPage","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","toastClassName","connect","getUserDetails","TokenAuth","getOptionsWithSelect","ddlOptions","selectOptionText","filter","option","unshift","getCurrentDateFormat","language","window","navigator","userLanguage","moment","longDateFormat","class"],"sourceRoot":""}