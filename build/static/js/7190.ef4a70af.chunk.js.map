{"version":3,"file":"static/js/7190.ef4a70af.chunk.js","mappings":"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","sources":["Components/Composite/Common/BayQueueComposite.jsx","Components/UIBase/Common/TMUserActions.jsx","Components/Composite/Common/TMUserActionsComposite.jsx","Components/Composite/Details/BayAllocationDetailsComposite.jsx","Components/Composite/Entity/ManualBayAllocationComposite.jsx","JS/KeyCodes.js","JS/NotifyEvent.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport {\r\n  Icon,\r\n  Table,\r\n  Checkbox,\r\n  Input,\r\n  Modal,\r\n  Tooltip,\r\n  InputLabel,\r\n  Pagination,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport lodash from \"lodash\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\n\r\nclass BayQueueComposite extends Component {\r\n  state = {\r\n    searchBayResult: \"\",\r\n    pageIndex: 1,\r\n    pageSize: 1,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getLookUpData();\r\n  }\r\n\r\n  getLookUpData() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=BayAllocation\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (!isNaN(parseInt(result.EntityResult[\"PageSize\"]))) {\r\n            this.setState({\r\n              pageSize: parseInt(result.EntityResult[\"PageSize\"]),\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"BayAllocationDetailsComposite:Error occured on getLookUpData\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  onBaySearchChange = (value) => {\r\n    this.setState({ searchBayResult: value });\r\n  };\r\n\r\n  onCheckboxChange = (bayCode, data) => {\r\n    try {\r\n      this.props.onBaySelect(bayCode, data);\r\n    } catch (error) {\r\n      console.log(\"BayQueueComposite:Error occured on onCheckboxChange\", error);\r\n    }\r\n  };\r\n\r\n  getBayTooltip(data) {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            {t(\"BayGroupList_BayCode\")} : {data.BayCode} {<br></br>}\r\n            {t(\"BayGroupList_LoadingType\")} : {data.LoadingType}\r\n            {<br></br>}\r\n            {t(\"BayTooltip_QueueSize\")} : {data.MaximumQueue}\r\n            {<br></br>}\r\n            {t(\"BaySearch_BayMode\")} : {data.IsManual ? \"Manual Bay\" : \"Auto\"}\r\n            {<br></br>}\r\n            {t(\"TankGroupInfo_Active\")} : {data.Active ? \"true\" : \"false\"}\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n\r\n  getBayShipmentTooltip(data) {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            {data.ShipmentCode === null\r\n              ? t(\"Receipt_Code\")\r\n              : t(\"ViewShipmentStatus_ShipmentCode\")}{\" \"}\r\n            : {data.Code} {<br></br>}\r\n            {t(\"Receipt_Shareholder\")} : {data.ShareholderCode}\r\n            {<br></br>}\r\n            {t(\"ViewReceipt_CarrierCompany\")} : {data.CarrierCode}\r\n            {<br></br>}\r\n            {t(\"ViewReceipt_Vehicle\")} : {data.VehicleCode}\r\n            {<br></br>}\r\n            {t(\"DriverInfo_Driver\")} : {data.DriverCode}\r\n            {<br></br>}\r\n            {t(\"ScheduledDate\")} :{\" \"}\r\n            {new Date(data.ScheduledDate).toLocaleDateString()}\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n\r\n  getBayTypeTooltip(data) {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            {t(\"BayType_Title\")} :{\" \"}\r\n            {data.BayType === \"BOTH\" ? t(\"BayType_Both\") : data.BayType}\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  getTransactionIdentifier(code, shareholder) {\r\n    // let transaction = { code: code, shareholder: shareholder };\r\n    // return JSON.stringify(transaction);\r\n    return code + Constants.delimiter + shareholder;\r\n  }\r\n\r\n  render() {\r\n    let { searchBayResult } = this.state;\r\n    let bayData = this.props.bayData;\r\n    let searchBayResults = bayData.filter((values) => {\r\n      return (\r\n        values.BayCode.toLowerCase().includes(searchBayResult.toLowerCase()) ||\r\n        values.ShipmentReceiptItem.some(function (subElement) {\r\n          return subElement.Code.toLowerCase().includes(\r\n            searchBayResult.toLowerCase()\r\n          );\r\n        })\r\n      );\r\n    });\r\n    let paginationBays = [];\r\n    let pageIndex = lodash.cloneDeep(this.state.pageIndex);\r\n    if (this.state.pageSize >= searchBayResults.length) {\r\n      pageIndex = 1;\r\n    }\r\n    let firstIndexInPage = (pageIndex - 1) * this.state.pageSize;\r\n    let lastIndexInPage = firstIndexInPage + this.state.pageSize;\r\n    if (lastIndexInPage >= searchBayResults.length) {\r\n      lastIndexInPage = searchBayResults.length;\r\n    }\r\n    paginationBays = searchBayResults.slice(firstIndexInPage, lastIndexInPage);\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n              <div className=\"col-4\">\r\n                <Input\r\n                  className=\"input-example\"\r\n                  placeholder={t(\"BayAllocation_SearchBay\")}\r\n                  search={true}\r\n                  onChange={(data) => this.onBaySearchChange(data)}\r\n                />\r\n              </div>\r\n              <div className=\"col-4\">\r\n                {searchBayResults.length > this.state.pageSize ? (\r\n                  <Pagination\r\n                    totalItems={searchBayResults.length}\r\n                    itemsPerPage={this.state.pageSize}\r\n                    activePage={this.state.pageIndex}\r\n                    onPageChange={(page) => {\r\n                      this.setState({ pageIndex: page });\r\n                    }}\r\n                  ></Pagination>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"col-4\" style={{ marginTop: \"1rem\" }}>\r\n                <div style={{ float: \"right\" }}>\r\n                  {t(\"Common_LastUpdated\") + \" : \" + this.props.updatedTime}\r\n                  <span\r\n                    style={{ marginLeft: \"1rem\", cursor: \"pointer\" }}\r\n                    onClick={() => this.props.onRefresh()}\r\n                  >\r\n                    <img\r\n                      style={{ width: \"6%\" }}\r\n                      src=\"/Refresh.png\"\r\n                      alt=\"\"\r\n                    ></img>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <ErrorBoundary>\r\n              {paginationBays.length > 0\r\n                ? paginationBays.map((a, key) => (\r\n                    <div style={{ overflowX: \"auto\" }}>\r\n                      <Table>\r\n                        <Table.Header>\r\n                          <Table.HeaderCell\r\n                            colSpan={a.MaximumQueue + 2}\r\n                            content={a.BayCode}\r\n                          >\r\n                            <div\r\n                              className=\"row\"\r\n                              style={{ marginBottom: \"-1rem\" }}\r\n                            >\r\n                              <div style={{ display: \"flex\" }}>\r\n                                <div>\r\n                                  {a.MaximumQueue > 0 &&\r\n                                  a.Active === true &&\r\n                                  this.props.isBayAllocation === true ? (\r\n                                    <Checkbox\r\n                                      label={a.BayCode}\r\n                                      checked={\r\n                                        a.SelectedBay === true ? true : false\r\n                                      }\r\n                                      onChange={(data) =>\r\n                                        this.onCheckboxChange(a.BayCode, data)\r\n                                      }\r\n                                    ></Checkbox>\r\n                                  ) : (\r\n                                    <div style={{ whiteSpace: \"pre\" }}>\r\n                                      <InputLabel\r\n                                        label={a.BayCode + \"   \"}\r\n                                      ></InputLabel>\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n                                <div>\r\n                                  <ErrorBoundary>\r\n                                    <Tooltip\r\n                                      element={\r\n                                        <Icon\r\n                                          style={{ paddingBottom: \"5px\" }}\r\n                                          name=\"badge-info\"\r\n                                          root=\"common\"\r\n                                        />\r\n                                      }\r\n                                      content={this.getBayTooltip(a)}\r\n                                      size=\"mini\"\r\n                                      position=\"right center\"\r\n                                    ></Tooltip>\r\n                                  </ErrorBoundary>\r\n                                </div>\r\n                                <ErrorBoundary>\r\n                                  <Tooltip\r\n                                    element={\r\n                                      <span className=\"bayTypeIconPosition\">\r\n                                        <icon\r\n                                          style={{ fontSize: \"25px\" }}\r\n                                          className={\r\n                                            a.BayType === \"BOTH\"\r\n                                              ? \"icon-Loading-Unloading\"\r\n                                              : a.BayType === \"LOADING\"\r\n                                              ? \"icon-Loading\"\r\n                                              : \"icon-Unloading\"\r\n                                          }\r\n                                        ></icon>\r\n                                      </span>\r\n                                    }\r\n                                    content={this.getBayTypeTooltip(a)}\r\n                                    size=\"mini\"\r\n                                    position=\"right center\"\r\n                                  ></Tooltip>\r\n                                </ErrorBoundary>\r\n                                {this.props.isManualMode === false ? (\r\n                                  <div\r\n                                    style={{\r\n                                      position: \"absolute\",\r\n                                      right: \"18px\",\r\n                                    }}\r\n                                  >\r\n                                    <span style={{ marginTop: \"-0.3rem\" }}>\r\n                                      <Icon name=\"locked\" root=\"Building\" />\r\n                                    </span>\r\n                                  </div>\r\n                                ) : (\r\n                                  \"\"\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </Table.HeaderCell>\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                          <Table.Row>\r\n                            <Droppable droppableId={a.BayCode} type=\"Type1\">\r\n                              {(provided) => (\r\n                                <div\r\n                                  ref={provided.innerRef}\r\n                                  {...provided.droppableProps}\r\n                                >\r\n                                  {a.ShipmentReceiptItem.length > 0 ? (\r\n                                    a.ShipmentReceiptItem.map((b, index) => (\r\n                                      <Table.Cell\r\n                                        className={\r\n                                          this.props.selectedShipmentReceiptItem\r\n                                            .Code === b.Code\r\n                                            ? \"bayAllocationtd tdSelected\"\r\n                                            : \"bayAllocationtd\"\r\n                                        }\r\n                                        onClick={() =>\r\n                                          this.props.isBayAllocation\r\n                                            ? this.props.onCellClick(\r\n                                                index,\r\n                                                a.BayCode\r\n                                              )\r\n                                            : \"\"\r\n                                        }\r\n                                      >\r\n                                        <ErrorBoundary>\r\n                                          <Draggable\r\n                                            draggableId={this.getTransactionIdentifier(\r\n                                              b.Code,\r\n                                              b.ShareholderCode\r\n                                            )}\r\n                                            // draggableId={b.code}\r\n                                            isDragDisabled={\r\n                                              this.props.isBayAllocation ===\r\n                                              false\r\n                                            }\r\n                                          >\r\n                                            {(provided, snapshot) => (\r\n                                              <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                              >\r\n                                                <div className=\"bayAllocationFontSize\">\r\n                                                  {b.Code}\r\n                                                  <ErrorBoundary>\r\n                                                    <Tooltip\r\n                                                      element={\r\n                                                        <span className=\"bayAllocationInfoIcon\">\r\n                                                          <Icon\r\n                                                            name=\"badge-info\"\r\n                                                            root=\"common\"\r\n                                                          />\r\n                                                        </span>\r\n                                                      }\r\n                                                      content={this.getBayShipmentTooltip(\r\n                                                        b\r\n                                                      )}\r\n                                                      size=\"mini\"\r\n                                                      position=\"right center\"\r\n                                                    ></Tooltip>\r\n                                                  </ErrorBoundary>\r\n                                                </div>\r\n                                                <div className=\"bayAllocationFontSize\">\r\n                                                  {b.VehicleCode}\r\n                                                </div>\r\n                                                {index > 0 ? (\r\n                                                  <div>\r\n                                                    <img\r\n                                                      className=\"bayAllocationImagePosition\"\r\n                                                      src=\"/Vehicle.png\"\r\n                                                      alt=\"\"\r\n                                                      title={\"Vehicle\"}\r\n                                                    ></img>\r\n                                                  </div>\r\n                                                ) : (\r\n                                                  <div>\r\n                                                    <img\r\n                                                      className=\"bayAllocationImagePosition\"\r\n                                                      src=\"/VehiclewithBay.png\"\r\n                                                      alt=\"\"\r\n                                                      title={\"Vehicle\"}\r\n                                                    ></img>\r\n                                                  </div>\r\n                                                )}\r\n                                              </div>\r\n                                            )}\r\n                                          </Draggable>\r\n                                        </ErrorBoundary>\r\n                                      </Table.Cell>\r\n                                    ))\r\n                                  ) : (\r\n                                    <Table.Cell className=\"bayAllocationtd\">\r\n                                      <img\r\n                                        className=\"bayAllocationImagePosition\"\r\n                                        src=\"/BayEmpty.png\"\r\n                                        alt=\"\"\r\n                                        title={\"Bay\"}\r\n                                      ></img>\r\n                                    </Table.Cell>\r\n                                  )}\r\n\r\n                                  {a.MaximumQueue > 0\r\n                                    ? [\r\n                                        ...Array.from(\r\n                                          Array(\r\n                                            a.MaximumQueue -\r\n                                              (a.ShipmentReceiptItem.length ===\r\n                                              0\r\n                                                ? 1\r\n                                                : a.ShipmentReceiptItem.length)\r\n                                          ).keys()\r\n                                        ),\r\n                                      ].map((num, i) => (\r\n                                        <Table.Cell className=\"bayAllocationtd\"></Table.Cell>\r\n                                      ))\r\n                                    : \"\"}\r\n                                  <Table.Cell></Table.Cell>\r\n                                </div>\r\n                              )}\r\n                            </Droppable>\r\n                          </Table.Row>\r\n                        </Table.Body>\r\n                      </Table>\r\n                    </div>\r\n                  ))\r\n                : t(\"BaySearch_NoResult\")}\r\n            </ErrorBoundary>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BayQueueComposite);\r\n\r\nBayQueueComposite.propTypes = {\r\n  onCellClick: PropTypes.func.isRequired,\r\n  onBaySelect: PropTypes.func.isRequired,\r\n  isManualMode: PropTypes.bool.isRequired,\r\n  onRefresh: PropTypes.func.isRequired,\r\n  isBayAllocation: PropTypes.bool.isRequired,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Icon,\r\n  Breadcrumb,\r\n  Select,\r\n  Modal,\r\n  Button,\r\n  Popup,\r\n  VerticalMenu,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nTMUserActions.propTypes = {\r\n  operationsVisibilty: PropTypes.shape({\r\n    add: PropTypes.bool,\r\n    delete: PropTypes.bool,\r\n    shareholder: PropTypes.bool,\r\n  }).isRequired,\r\n  breadcrumbItem: PropTypes.shape({\r\n    itemName: PropTypes.string,\r\n    itemCode: PropTypes.string,\r\n    itemProps: PropTypes.any,\r\n    localizedKey: PropTypes.string,\r\n    parents: PropTypes.array,\r\n    isComponent: PropTypes.bool,\r\n  }).isRequired,\r\n  shareholders: PropTypes.array.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onShareholderChange: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onAdd: PropTypes.func.isRequired,\r\n  popUpContent: PropTypes.array,\r\n};\r\nTMUserActions.defaultProps = {\r\n  operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n  breadcrumbItem: {\r\n    itemName: \"\",\r\n    itemCode: \"\",\r\n    localizedKey: \"\",\r\n    itemProps: {},\r\n    parents: [],\r\n    isComponent: false,\r\n  },\r\n  shareholders: [],\r\n  selectedShareholder: \"\",\r\n  popUpContent: [],\r\n  shrVisible: true,\r\n  addVisible: true,\r\n  deleteVisible: true\r\n};\r\nexport function TMUserActions({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [popUpOpen, setPopUpOpen] = useState(false);\r\n  function getShareholderDropdownOptions() {\r\n    return Utilities.transferListtoOptions(shareholders);\r\n    // var List = [];\r\n    // shareholders.forEach((element) => {\r\n    //   List.push({ text: element, value: element });\r\n    // });\r\n    // return List;\r\n  }\r\n\r\n  function buildBreadcrumb() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {breadcrumbItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item\r\n                  onClick={() => {\r\n                    if (\r\n                      handleBreadCrumbClick !== undefined &&\r\n                      handleBreadCrumbClick !== null\r\n                    ) {\r\n                      handleBreadCrumbClick(\r\n                        parentitem.itemCode,\r\n                        breadcrumbItem.parents\r\n                      );\r\n                    }\r\n                  }}\r\n                  key={parentitem.itemCode}\r\n                >\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={breadcrumbItem.itemCode}>\r\n              {t(breadcrumbItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  function handlePopUpClick() {\r\n    if (operationsVisibilty.add) {\r\n      if (popUpContent.length > 0) {\r\n        if (popUpOpen === false) setPopUpOpen(true);\r\n        else setPopUpOpen(false);\r\n      } else {\r\n        onAdd();\r\n      }\r\n    }\r\n  }\r\n\r\n  function popUpMenuClick(menuItem) {\r\n    setPopUpOpen(false);\r\n    onAdd(menuItem);\r\n  }\r\n  function displayIcons() {\r\n    return (\r\n      <div\r\n        style={{ float: \"right\", display: \"inline-block\", marginTop: \"10px\" }}\r\n      >\r\n        {addVisible ? <Popup\r\n          position=\"bottom right\"\r\n          className=\"popup-theme-wrap\"\r\n          element={\r\n            <div\r\n              className={\r\n                (operationsVisibilty.add\r\n                  ? \"iconCircle \"\r\n                  : \"iconCircleDisable \") + \"iconblock\"\r\n              }\r\n              onClick={handlePopUpClick}\r\n            >\r\n              <Icon\r\n                root=\"common\"\r\n                name=\"badge-plus\"\r\n                size=\"small\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          }\r\n          on=\"click\"\r\n          open={popUpOpen}\r\n        >\r\n          <div onMouseLeave={() => setPopUpOpen(false)}>\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <VerticalMenu>\r\n                  <VerticalMenu>\r\n                    <VerticalMenu.Header>\r\n                      {t(\"Common_Create\")}\r\n                    </VerticalMenu.Header>\r\n                    {popUpContent.map((item) => {\r\n                      return (\r\n                        <VerticalMenu.Item\r\n                          onClick={() => popUpMenuClick(item.fieldName)}\r\n                        >\r\n                          {t(item.fieldValue)}\r\n                        </VerticalMenu.Item>\r\n                      );\r\n                    })}\r\n                  </VerticalMenu>\r\n                </VerticalMenu>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        </Popup> : \"\"}\r\n        {deleteVisible ? <div\r\n          style={{ marginLeft: \"10px\" }}\r\n          onClick={() => {\r\n            if (operationsVisibilty.delete) {\r\n              setModelOpen(true);\r\n              //displayTMModalforDelete();\r\n              //onDelete();\r\n            }\r\n          }}\r\n          className={\r\n            (operationsVisibilty.delete\r\n              ? \"iconCircle \"\r\n              : \"iconCircleDisable \") + \"iconblock\"\r\n          }\r\n        >\r\n          <Icon root=\"common\" name=\"delete\" size=\"small\" color=\"white\" />\r\n        </div> : \"\"}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayTMModalforDelete() {\r\n    //console.log(\"entered to display modal actions\");\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  onDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n    //return <TMModal open={true}></TMModal>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\" style={{ alignItems: \"flex-start\", padding: \"0px\" }}>\r\n      <div\r\n        className=\"col-9 col-sm-9 col-md-9 col-lg-10 col-xl-10\"\r\n        style={{ padding: \"0px\" }}\r\n      >\r\n        <div className=\"row\" style={{ marginTop: \"10px\", alignItems: \"\" }}>\r\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n            <ErrorBoundary> {buildBreadcrumb()}</ErrorBoundary>\r\n          </div>\r\n          <div\r\n            className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-4\"\r\n          //style={{ verticalAlign: \"middle\" }}\r\n          >\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <div\r\n                  className=\"compartmentIcon\"\r\n                  style={{ justifyContent: \"flex-start\" }}\r\n                >\r\n                  {shrVisible === false ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <div>\r\n                        <h4 className=\"shrText\">{t(\"Common_Shareholder\")}:</h4>\r\n                      </div>\r\n                      <div className=\"opSelect\">\r\n                        <Select\r\n                          //className=\"opSelect\"\r\n                          placeholder={t(\"Common_Shareholder\")}\r\n                          value={selectedShareholder}\r\n                          disabled={!operationsVisibilty.shareholder}\r\n                          options={getShareholderDropdownOptions()}\r\n                          onChange={(value) => onShareholderChange(value)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n\r\n          {displayTMModalforDelete()}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-3 col-sm-3 col-md-3 col-lg-2 col-xl-2\">\r\n        {displayIcons()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TMUserActions } from \"../../UIBase/Common/TMUserActions\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nexport function TMUserActionsComposite({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n\r\n}) {\r\n  return (\r\n    <TMUserActions\r\n      operationsVisibilty={operationsVisibilty}\r\n      breadcrumbItem={breadcrumbItem}\r\n      shareholders={shareholders}\r\n      selectedShareholder={selectedShareholder}\r\n      onShareholderChange={onShareholderChange}\r\n      onDelete={onDelete}\r\n      onAdd={onAdd}\r\n      popUpContent={popUpContent}\r\n      shrVisible={shrVisible}\r\n      handleBreadCrumbClick={handleBreadCrumbClick}\r\n      addVisible={addVisible}\r\n      deleteVisible={deleteVisible}\r\n    ></TMUserActions>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport {\r\n  Icon,\r\n  Button,\r\n  Input,\r\n  VerticalMenu,\r\n  Modal,\r\n  Tooltip,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport lodash from \"lodash\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { Loader } from \"@scuf/common\";\r\nimport BayQueueComposite from \"../Common/BayQueueComposite\";\r\n\r\nclass BayAllocationDetailsComposite extends Component {\r\n  state = {\r\n    bayData: [],\r\n    unAllocatedData: [],\r\n    selectedUnallocatedData: \"\",\r\n    selectedUnallocatedDataType: \"\",\r\n    selectedUnallocatedShareholder: \"\",\r\n    selectedShipmentReceiptItem: {},\r\n    selectedShipmentReceiptBay: \"\",\r\n    isSuggestBayModal: false,\r\n    suggestBays: [],\r\n    isManualMode: true,\r\n    isSwitchBayTypeModal: false,\r\n    isAutoAllocateModal: false,\r\n    searchUnAllocatedDataResult: \"\",\r\n    searchUnAllocatedReceiptResult: \"\",\r\n    isReadyToRender: false,\r\n    pageIndex: 1,\r\n    lastUpdatedTime: \"\",\r\n    pageSize: 1,\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      this.getUnallocatedShipmentsandReceipts();\r\n      this.getBayAllocationType();\r\n    } catch (error) {\r\n      console.log(\r\n        \"ManualBayAllocationComposite:Error occured on ComponentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getBays = () => {\r\n    axios(\r\n      RestAPIs.GetBays,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        let updatedtime =\r\n          new Date().toLocaleDateString() +\r\n          \" \" +\r\n          new Date().toLocaleTimeString();\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let bayAllocation = [];\r\n          if (Array.isArray(result.EntityResult.BayData.Table)) {\r\n            result.EntityResult.BayData.Table.forEach((bay) => {\r\n              bay.ShipmentReceiptItem = [];\r\n              let allocatedList = [];\r\n              if (Array.isArray(result.EntityResult.lstBayAllocationQueue)) {\r\n                allocatedList =\r\n                  result.EntityResult.lstBayAllocationQueue.filter(\r\n                    (bayItem) => bayItem.BayCode === bay.BayCode\r\n                  );\r\n              }\r\n              if (allocatedList.length > 0) {\r\n                allocatedList[0].AllocationItems.sort((a, b) =>\r\n                  a.QueueNumber > b.QueueNumber ? 1 : -1\r\n                ).forEach((allocatedItem) => {\r\n                  let shipmentReceiptItem =\r\n                    result.EntityResult.BayData.Table2.filter(\r\n                      (shipment) =>\r\n                        (allocatedItem.ShipmentCode !== null &&\r\n                          allocatedItem.ShipmentCode ===\r\n                            shipment.ShipmentCode) ||\r\n                        (allocatedItem.ReceiptCode !== null &&\r\n                          allocatedItem.ReceiptCode === shipment.Code)\r\n                    );\r\n                  bay.ShipmentReceiptItem.push(shipmentReceiptItem[0]);\r\n                });\r\n              }\r\n              bayAllocation.push(bay);\r\n            });\r\n          }\r\n          this.setState({\r\n            bayData: bayAllocation,\r\n            isReadyToRender: true,\r\n            selectedUnallocatedData: \"\",\r\n            selectedUnallocatedDataType: \"\",\r\n            selectedShipmentReceiptItem: {},\r\n            selectedShipmentReceiptBay: \"\",\r\n            lastUpdatedTime: updatedtime,\r\n            selectedUnallocatedShareholder: \"\",\r\n          });\r\n        } else {\r\n          this.setState({\r\n            bayData: [],\r\n            isReadyToRender: true,\r\n            lastUpdatedTime: updatedtime,\r\n          });\r\n          console.log(\"Error in getBays:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ bayData: [], isReadyToRender: true });\r\n        console.log(\"Error while getBays:\", error);\r\n      });\r\n  };\r\n\r\n  getUnallocatedShipmentsandReceipts() {\r\n    axios(\r\n      RestAPIs.GetUnallocatedShipmentsandReceipts,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({ unAllocatedData: result.EntityResult.Table1 }, () => {\r\n            this.getBays();\r\n          });\r\n        } else {\r\n          this.setState({ unAllocatedData: [], isReadyToRender: true });\r\n          console.log(\r\n            \"Error in getUnallocatedShipmentsandReceipts:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ unAllocatedData: [], isReadyToRender: true });\r\n        console.log(\"Error while getUnallocatedShipmentsandReceipts:\", error);\r\n      });\r\n  }\r\n\r\n  getBayAllocationType() {\r\n    axios(\r\n      RestAPIs.GetBayAllocationType,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        var isManual = true;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult === \"false\") isManual = false;\r\n        }\r\n        this.setState({ isManualMode: isManual });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getBayAllocationType:\", error);\r\n      });\r\n  }\r\n\r\n  handleSuggestBay() {\r\n    try {\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"BayAllocation_SuggestStatus\",\r\n        messageResultDetails: [],\r\n      };\r\n      if (\r\n        this.state.selectedUnallocatedData !== \"\" &&\r\n        this.state.selectedUnallocatedData !== null &&\r\n        this.state.selectedUnallocatedShareholder !== \"\"\r\n      ) {\r\n        this.setState({ isReadyToRender: false });\r\n        var keyCode = [\r\n          {\r\n            key: KeyCodes.shipmentCode,\r\n            value: this.state.selectedUnallocatedData,\r\n          },\r\n          {\r\n            key: KeyCodes.entityType,\r\n            value: this.state.selectedUnallocatedDataType,\r\n          },\r\n        ];\r\n        var obj = {\r\n          ShareHolderCode: this.state.selectedUnallocatedShareholder,\r\n          keyDataCode: KeyCodes.pipelineReceiptCode,\r\n          KeyCodes: keyCode,\r\n        };\r\n        let notification = {\r\n          messageType: \"critical\",\r\n          message: \"BayAllocation_SaveStatus\",\r\n          messageResultDetails: [\r\n            {\r\n              isSuccess: false,\r\n              errorMessage: \"\",\r\n            },\r\n          ],\r\n        };\r\n        axios(\r\n          RestAPIs.SuggestBayForShipment,\r\n          Utilities.getAuthenticationObjectforPost(\r\n            obj,\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        ).then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              isSuggestBayModal: true,\r\n              suggestBays: result.EntityResult,\r\n              isReadyToRender: true,\r\n            });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ResultDataList[0].ErrorList[0];\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          }\r\n        });\r\n      } else {\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"SuggestBay_UnselectItem\",\r\n        });\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ManualBayAllocationComposite:Error occured on handleSuggestBay\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleSuggestBayModal = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isSuggestBayModal} size=\"small\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h3>{t(\"Suggested_Bays\")}</h3>\r\n                {(this.state.selectedUnallocatedDataType ===\r\n                Constants.ExtendEntity.SHIPMENT\r\n                  ? t(\"BayAllocationShipmentSearch_ShipmentCode\")\r\n                  : t(\"Receipt_Code\")) +\r\n                  \" : \" +\r\n                  this.state.selectedUnallocatedData}\r\n              </div>\r\n              <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                <h4>{t(\"BayAllocation_SuggestedBayList\")}</h4>\r\n                <div className=\"col col-lg-12\">\r\n                  {Array.isArray(this.state.suggestBays)\r\n                    ? this.state.suggestBays.map((item) => (\r\n                        <div>{item.BayCode}</div>\r\n                      ))\r\n                    : \"\"}\r\n                </div>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"ReportConfiguration_btnClose\")}\r\n                className=\"shipmentRecordWeightOtherbuttons\"\r\n                onClick={() => {\r\n                  this.setState({ isSuggestBayModal: false });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  handleAllocate() {\r\n    try {\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"BayAllocation_SaveStatus\",\r\n        messageResultDetails: [],\r\n      };\r\n      if (\r\n        this.state.selectedUnallocatedData !== \"\" &&\r\n        this.state.selectedUnallocatedData !== null &&\r\n        this.state.selectedUnallocatedShareholder !== \"\"\r\n      ) {\r\n        let bayData = lodash.cloneDeep(this.state.bayData);\r\n        var selectedBayList = bayData.filter(\r\n          (item) => item.SelectedBay === true\r\n        );\r\n        if (selectedBayList.length !== 1) {\r\n          notification.messageResultDetails.push({\r\n            keyFields: [],\r\n            keyValues: [],\r\n            isSuccess: false,\r\n            errorMessage:\r\n              selectedBayList.length === 0\r\n                ? \"BayAllocation_BayUnselect\"\r\n                : \"BayAllocation_BayMultiselect\",\r\n          });\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        } else {\r\n          this.setState({ isReadyToRender: false });\r\n          this.AllocateBay(\r\n            this.state.selectedUnallocatedData,\r\n            selectedBayList[0].BayCode,\r\n            this.state.selectedUnallocatedDataType,\r\n            this.state.selectedUnallocatedShareholder\r\n          );\r\n        }\r\n      } else {\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"AllocateBay_UnselectItem\",\r\n        });\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ManualBayAllocationComposite:Error occured on handleAllocate\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  AllocateBay(shipmentCode, bayCode, entityType, shareholder) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shipmentCode,\r\n        value: shipmentCode,\r\n      },\r\n      {\r\n        key: KeyCodes.bayCode,\r\n        value: bayCode,\r\n      },\r\n      {\r\n        key: KeyCodes.entityType,\r\n        value: entityType,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: shareholder, //this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      keyDataCode: KeyCodes.pipelineReceiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"BayAllocation_SaveStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"BayCode\"],\r\n          keyValues: [bayCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.AllocateBay,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getUnallocatedShipmentsandReceipts();\r\n        } else {\r\n          this.setState({ isReadyToRender: true });\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ResultDataList[0].ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while AllocateBay:\", error);\r\n      });\r\n  }\r\n\r\n  handleDeAllocate() {\r\n    try {\r\n      var selectedData = lodash.cloneDeep(\r\n        this.state.selectedShipmentReceiptItem\r\n      );\r\n      if (Object.keys(selectedData).length === 0) {\r\n        let notification = {\r\n          messageType: \"critical\",\r\n          message: \"BayDeAllocation_SavedStatus\",\r\n          messageResultDetails: [],\r\n        };\r\n\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"BayAllocation_DeAllocate_Unselect\",\r\n        });\r\n\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      } else {\r\n        var entityType = Constants.ExtendEntity.SHIPMENT;\r\n        if (selectedData.ShipmentCode === null)\r\n          entityType = Constants.ExtendEntity.RECEIPT;\r\n\r\n        this.setState({ isReadyToRender: false });\r\n        this.DeAllocateBay(\r\n          selectedData.Code,\r\n          entityType,\r\n          this.state.selectedShipmentReceiptBay,\r\n          selectedData.ShareholderCode\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ManualBayAllocationComposite:Error occured on handleDeAllocate\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  DeAllocateBay(shipmentCode, entityType, bayCode, shareholder) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shipmentCode,\r\n        value: shipmentCode,\r\n      },\r\n      {\r\n        key: KeyCodes.entityType,\r\n        value: entityType,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: shareholder, //this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      KeyCodes: keyCode,\r\n    };\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"BayDeAllocation_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"BayCode\"],\r\n          keyValues: [bayCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.DeallocateShipment,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getUnallocatedShipmentsandReceipts();\r\n        } else {\r\n          this.setState({ isReadyToRender: true });\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ResultDataList[0].ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while DeAllocateBay:\", error);\r\n      });\r\n  }\r\n\r\n  handleDragEnd = (data) => {\r\n    try {\r\n      let transaction = this.splitTransactionIdentifier(data.draggableId);\r\n      if (this.state.isManualMode) {\r\n        if (data.source !== null && data.destination !== null) {\r\n          var entityType = Constants.ExtendEntity.SHIPMENT;\r\n          if (\r\n            data.source.droppableId !== \"UnAllocatedShipment\" &&\r\n            data.destination.droppableId === \"UnAllocatedShipment\"\r\n          ) {\r\n            this.setState({ isReadyToRender: false });\r\n            let bayData = lodash.cloneDeep(this.state.bayData);\r\n            var deAllocatedList = bayData.filter(\r\n              (item) => item.BayCode === data.source.droppableId\r\n            );\r\n            if (deAllocatedList.length > 0) {\r\n              var deAllocateItem =\r\n                deAllocatedList[0].ShipmentReceiptItem.filter(\r\n                  (item) =>\r\n                    item.Code === transaction.code &&\r\n                    item.ShareholderCode === transaction.shareholder\r\n                );\r\n              if (deAllocateItem.length > 0) {\r\n                if (deAllocateItem[0].ShipmentCode === null)\r\n                  entityType = Constants.ExtendEntity.RECEIPT;\r\n              }\r\n            }\r\n            this.DeAllocateBay(\r\n              transaction.code,\r\n              entityType,\r\n              data.source.droppableId,\r\n              transaction.shareholder\r\n            );\r\n          } else if (\r\n            data.destination.droppableId !== \"UnAllocatedShipment\" &&\r\n            data.source.droppableId === \"UnAllocatedShipment\"\r\n          ) {\r\n            this.setState({ isReadyToRender: false });\r\n            let unAllocatedData = lodash.cloneDeep(this.state.unAllocatedData);\r\n            var allocatedList = unAllocatedData.filter(\r\n              (item) =>\r\n                item.Code === transaction.code &&\r\n                item.ShareholderCode === transaction.shareholder\r\n            );\r\n            if (allocatedList.length > 0) {\r\n              if (allocatedList[0].ShipmentCode === null)\r\n                entityType = Constants.ExtendEntity.RECEIPT;\r\n            }\r\n            this.AllocateBay(\r\n              transaction.code,\r\n              data.destination.droppableId,\r\n              entityType,\r\n              transaction.shareholder\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        let notification = {\r\n          messageType: \"critical\",\r\n          message: \"BayAllocation_SaveStatus\",\r\n          messageResultDetails: [\r\n            {\r\n              keyFields: [],\r\n              keyValues: [],\r\n              isSuccess: false,\r\n              errorMessage: \"BayAllocation_ManualAllocation_NotAllowed\",\r\n            },\r\n          ],\r\n        };\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ManualBayAllocationComposite:Error occured on handleDragEnd\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleItemClick = (code, shareholder) => {\r\n    try {\r\n      var entityType = Constants.ExtendEntity.SHIPMENT;\r\n      let unAllocatedData = lodash.cloneDeep(this.state.unAllocatedData);\r\n      var allocatedList = unAllocatedData.filter(\r\n        (item) => item.Code === code && item.ShareholderCode === shareholder\r\n      );\r\n      if (allocatedList.length > 0) {\r\n        if (allocatedList[0].ShipmentCode === null)\r\n          entityType = Constants.ExtendEntity.RECEIPT;\r\n      }\r\n      this.setState({\r\n        selectedUnallocatedData: code,\r\n        selectedUnallocatedDataType: entityType,\r\n        selectedUnallocatedShareholder: shareholder,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ManualBayAllocationComposite:Error occured on handleItemClick\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleClearBay() {\r\n    try {\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"BayAllocation_ClearStatus\",\r\n        messageResultDetails: [],\r\n      };\r\n\r\n      let bayData = lodash.cloneDeep(this.state.bayData);\r\n      var selectedBayList = bayData.filter((item) => item.SelectedBay === true);\r\n      if (selectedBayList.length === 0 || selectedBayList.length > 1) {\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage:\r\n            selectedBayList.length === 0\r\n              ? \"BayAllocation_ClearBay_BayUnselect\"\r\n              : \"BayAllocation_ClearBay_BayMultiselect\",\r\n        });\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      } else if (selectedBayList.length === 1) {\r\n        if (selectedBayList[0].ShipmentReceiptItem.length > 0) {\r\n          this.setState({ isReadyToRender: false });\r\n          this.clearBay(selectedBayList[0].BayCode);\r\n        } else {\r\n          notification.messageResultDetails.push({\r\n            keyFields: [],\r\n            keyValues: [],\r\n            isSuccess: false,\r\n            errorMessage: \"BayAllocation_ClearBay_EmptyBay\",\r\n          });\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ManualBayAllocationComposite:Error occured on handleClearBay\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  clearBay(bayCode) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.bayCode,\r\n        value: bayCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      keyDataCode: KeyCodes.pipelineReceiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"BayAllocation_ClearStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"BayCode\"],\r\n          keyValues: [bayCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.ClearBay,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getUnallocatedShipmentsandReceipts();\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ResultDataList[0].ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while clearBay:\", error);\r\n      });\r\n  }\r\n\r\n  handleBaySelect = (bayCode, data) => {\r\n    try {\r\n      let bayData = lodash.cloneDeep(this.state.bayData);\r\n      let matchedBay = bayData.filter((data) => data.BayCode === bayCode);\r\n      if (matchedBay.length > 0) {\r\n        matchedBay[0].SelectedBay = data;\r\n      }\r\n      this.setState({ bayData });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ManualBayAllocationComposite:Error occured on onCheckboxChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleMoveStart() {\r\n    try {\r\n      var selectedData = lodash.cloneDeep(\r\n        this.state.selectedShipmentReceiptItem\r\n      );\r\n      if (Object.keys(selectedData).length === 0) {\r\n        let notification = {\r\n          messageType: \"critical\",\r\n          message: \"BayAllocation_StartOperationStatus\",\r\n          messageResultDetails: [],\r\n        };\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"BayAllocation_Select_AllocateShipment\",\r\n        });\r\n\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      } else {\r\n        var entityType = Constants.ExtendEntity.SHIPMENT;\r\n        if (selectedData.ShipmentCode === null)\r\n          entityType = Constants.ExtendEntity.RECEIPT;\r\n\r\n        this.setState({ isReadyToRender: false });\r\n        this.changeAllocatedItemPosition(\r\n          selectedData.Code,\r\n          this.state.selectedShipmentReceiptBay,\r\n          entityType,\r\n          Constants.BayQueuePositionType.Start,\r\n          selectedData.ShareholderCode\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ManualBayAllocationComposite:Error occured on handleMoveStart\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleMovePrevious() {\r\n    try {\r\n      var selectedData = lodash.cloneDeep(\r\n        this.state.selectedShipmentReceiptItem\r\n      );\r\n      if (Object.keys(selectedData).length === 0) {\r\n        let notification = {\r\n          messageType: \"critical\",\r\n          message: \"BayAllocation_PreviousOperationStatus\",\r\n          messageResultDetails: [],\r\n        };\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"BayAllocation_Select_AllocateShipment\",\r\n        });\r\n\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      } else {\r\n        var entityType = Constants.ExtendEntity.SHIPMENT;\r\n        if (selectedData.ShipmentCode === null)\r\n          entityType = Constants.ExtendEntity.RECEIPT;\r\n\r\n        this.setState({ isReadyToRender: false });\r\n        this.changeAllocatedItemPosition(\r\n          selectedData.Code,\r\n          this.state.selectedShipmentReceiptBay,\r\n          entityType,\r\n          Constants.BayQueuePositionType.MovePrevious,\r\n          selectedData.ShareholderCode\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ManualBayAllocationComposite:Error occured on handleMovePrevious\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleMoveNext() {\r\n    try {\r\n      var selectedData = lodash.cloneDeep(\r\n        this.state.selectedShipmentReceiptItem\r\n      );\r\n      if (Object.keys(selectedData).length === 0) {\r\n        let notification = {\r\n          messageType: \"critical\",\r\n          message: \"BayAllocation_NextOperationStatus\",\r\n          messageResultDetails: [],\r\n        };\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"BayAllocation_Select_AllocateShipment\",\r\n        });\r\n\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      } else {\r\n        var entityType = Constants.ExtendEntity.SHIPMENT;\r\n        if (selectedData.ShipmentCode === null)\r\n          entityType = Constants.ExtendEntity.RECEIPT;\r\n\r\n        this.setState({ isReadyToRender: false });\r\n        this.changeAllocatedItemPosition(\r\n          selectedData.Code,\r\n          this.state.selectedShipmentReceiptBay,\r\n          entityType,\r\n          Constants.BayQueuePositionType.MoveNext,\r\n          selectedData.ShareholderCode\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ManualBayAllocationComposite:Error occured on handleMoveNext\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleMoveEnd() {\r\n    try {\r\n      var selectedData = lodash.cloneDeep(\r\n        this.state.selectedShipmentReceiptItem\r\n      );\r\n      if (Object.keys(selectedData).length === 0) {\r\n        let notification = {\r\n          messageType: \"critical\",\r\n          message: \"BayAllocation_EndOperationStatus\",\r\n          messageResultDetails: [],\r\n        };\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"BayAllocation_Select_AllocateShipment\",\r\n        });\r\n\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      } else {\r\n        var entityType = Constants.ExtendEntity.SHIPMENT;\r\n        if (selectedData.ShipmentCode === null)\r\n          entityType = Constants.ExtendEntity.RECEIPT;\r\n\r\n        this.setState({ isReadyToRender: false });\r\n        this.changeAllocatedItemPosition(\r\n          selectedData.Code,\r\n          this.state.selectedShipmentReceiptBay,\r\n          entityType,\r\n          Constants.BayQueuePositionType.End,\r\n          selectedData.ShareholderCode\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ManualBayAllocationComposite:Error occured on handleMoveEnd\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  changeAllocatedItemPosition(\r\n    shipmentCode,\r\n    bayCode,\r\n    entityType,\r\n    positionType,\r\n    shareholder\r\n  ) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shipmentCode,\r\n        value: shipmentCode,\r\n      },\r\n      {\r\n        key: KeyCodes.bayCode,\r\n        value: bayCode,\r\n      },\r\n      {\r\n        key: KeyCodes.entityType,\r\n        value: entityType,\r\n      },\r\n      {\r\n        key: KeyCodes.positionType,\r\n        value: positionType,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: shareholder, //this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      KeyCodes: keyCode,\r\n    };\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message:\r\n        positionType === Constants.BayQueuePositionType.Start\r\n          ? \"BayAllocation_StartOperationStatus\"\r\n          : positionType === Constants.BayQueuePositionType.MovePrevious\r\n          ? \"BayAllocation_PreviousOperationStatus\"\r\n          : positionType === Constants.BayQueuePositionType.MoveNext\r\n          ? \"BayAllocation_NextOperationStatus\"\r\n          : \"BayAllocation_EndOperationStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"BayCode\"],\r\n          keyValues: [bayCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.ChangePosition,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getUnallocatedShipmentsandReceipts();\r\n        } else {\r\n          this.setState({ isReadyToRender: true });\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ResultDataList[0].ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while ChangeAllocatedItemPosition:\", error);\r\n      });\r\n  }\r\n\r\n  displaySwitchBayTypeModal = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isSwitchBayTypeModal} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>\r\n                  {this.state.isManualMode\r\n                    ? t(\"BayAllocation_AutoMode_Confirmation\")\r\n                    : t(\"BayAllocation_ManualMode_Confirmation\")}\r\n                </b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => {\r\n                  this.setState({ isSwitchBayTypeModal: false });\r\n                }}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  this.setState({ isSwitchBayTypeModal: false });\r\n                  this.switchBayType();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  handleSwitchMode() {\r\n    this.setState({ isSwitchBayTypeModal: true });\r\n  }\r\n\r\n  switchBayType() {\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"BayAllocation_SwitchedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.SwitchBayType + \"?isManual=\" + this.state.isManualMode,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getBayAllocationType();\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ResultDataList[0].ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while switchBayType:\", error);\r\n      });\r\n  }\r\n\r\n  displayAutoAllocateModal = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isAutoAllocateModal} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"BayAllocation_AutoAllocation_Confirmation\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => {\r\n                  this.setState({ isAutoAllocateModal: false });\r\n                }}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  this.setState({ isAutoAllocateModal: false });\r\n                  this.AutoAllocate();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  handleAutoAllocate() {\r\n    this.setState({ isAutoAllocateModal: true });\r\n  }\r\n\r\n  AutoAllocate() {\r\n    this.setState({ isReadyToRender: false });\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"BayAllocation_AutoAllocation_Status\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.AutoBayAllocate +\r\n        \"?associatedShareHolders=\" +\r\n        this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getUnallocatedShipmentsandReceipts();\r\n        } else {\r\n          this.setState({ isReadyToRender: true });\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ResultDataList[0].ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while handleAutoAllocate:\", error);\r\n      });\r\n  }\r\n\r\n  onUnAllocatedDataSearchChange = (value) => {\r\n    this.setState({ searchUnAllocatedDataResult: value });\r\n  };\r\n\r\n  handleRefresh = () => {\r\n    this.setState({ isReadyToRender: false }, () => {\r\n      this.getUnallocatedShipmentsandReceipts();\r\n    });\r\n  };\r\n\r\n  getShipmentTooltip(data) {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            {data.ShipmentCode === null\r\n              ? t(\"Receipt_Code\")\r\n              : t(\"ViewShipmentStatus_ShipmentCode\")}{\" \"}\r\n            : {data.Code} {<br></br>}\r\n            {t(\"Receipt_Shareholder\")} : {data.ShareholderCode}\r\n            {<br></br>}\r\n            {t(\"ViewReceipt_CarrierCompany\")} : {data.CarrierCode}\r\n            {<br></br>}\r\n            {t(\"ViewReceipt_Vehicle\")} : {data.VehicleCode}\r\n            {<br></br>}\r\n            {t(\"DriverInfo_Driver\")} : {data.DriverCode}\r\n            {<br></br>}\r\n            {t(\"ScheduledDate\")} :{\" \"}\r\n            {new Date(data.ScheduledDate).toLocaleDateString()}\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n\r\n  getLookUpData() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=BayAllocation\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (!isNaN(parseInt(result.EntityResult[\"PageSize\"]))) {\r\n            this.setState({\r\n              pageSize: parseInt(result.EntityResult[\"PageSize\"]),\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"BayAllocationDetailsComposite:Error occured on getLookUpData\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleCellClick = (index, bayCode) => {\r\n    try {\r\n      let bayData = lodash.cloneDeep(this.state.bayData);\r\n      let matchedBay = bayData.filter((data) => data.BayCode === bayCode);\r\n      if (matchedBay.length > 0) {\r\n        var selectedItem = matchedBay[0].ShipmentReceiptItem[index];\r\n        this.setState({\r\n          selectedShipmentReceiptItem: selectedItem,\r\n          selectedShipmentReceiptBay: bayCode,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"BayAllocationDetailsComposite:Error occured on handleCellClick\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getTransactionIdentifier(code, shareholder) {\r\n    //let transaction = { code: code, shareholder: shareholder };\r\n    return code + Constants.delimiter + shareholder;\r\n  }\r\n  splitTransactionIdentifier(transactionIdentifier) {\r\n    try {\r\n      const tran_array = transactionIdentifier.split(Constants.delimiter);\r\n      return { code: tran_array[0], shareholder: tran_array[1] };\r\n    } catch (error) {\r\n      console.log(\r\n        \"BayAllocationDetailsComposite:Error occured on splitTransactionIdentifier\",\r\n        transactionIdentifier,\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let { searchUnAllocatedDataResult, unAllocatedData } = this.state;\r\n    let searchUnAllocatedDataResults = unAllocatedData.filter((values) => {\r\n      return (\r\n        values.Code.toLowerCase().includes(\r\n          searchUnAllocatedDataResult.toLowerCase()\r\n        ) ||\r\n        values.VehicleCode.toLowerCase().includes(\r\n          searchUnAllocatedDataResult.toLowerCase()\r\n        ) ||\r\n        (values.DriverCode !== null\r\n          ? values.DriverCode.toLowerCase().includes(\r\n              searchUnAllocatedDataResult.toLowerCase()\r\n            )\r\n          : \"\")\r\n      );\r\n    });\r\n\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            {!this.state.isReadyToRender ? (\r\n              <div className={`authLoading parameterLoader`}>\r\n                <Loader\r\n                  text=\" \"\r\n                  className={`globalLoaderPositionPosition`}\r\n                ></Loader>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <div className=\"bayAllocationContainer\">\r\n              <DragDropContext onDragEnd={this.handleDragEnd}>\r\n                <div className=\"bayAllocationUnAllocatedDiv\">\r\n                  <div>\r\n                    <Droppable droppableId={\"UnAllocatedShipment\"} type=\"Type1\">\r\n                      {(provided) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.droppableProps}\r\n                        >\r\n                          <div className=\"bayAllocationUnAllocatedDataDiv detailsContainer\">\r\n                            <Input\r\n                              className=\"input-example\"\r\n                              placeholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                              search={true}\r\n                              onChange={(data) =>\r\n                                this.onUnAllocatedDataSearchChange(data)\r\n                              }\r\n                            />\r\n                            <VerticalMenu>\r\n                              {searchUnAllocatedDataResults.length > 0\r\n                                ? searchUnAllocatedDataResults.map(\r\n                                    (item, index) => (\r\n                                      <ErrorBoundary>\r\n                                        <Draggable\r\n                                          draggableId={this.getTransactionIdentifier(\r\n                                            item.Code,\r\n                                            item.ShareholderCode\r\n                                          )}\r\n                                          index={index}\r\n                                          shareholder={item.ShareholderCode}\r\n                                          code={item.Code}\r\n                                        >\r\n                                          {(provided) => (\r\n                                            <div\r\n                                              ref={provided.innerRef}\r\n                                              {...provided.draggableProps}\r\n                                              {...provided.dragHandleProps}\r\n                                            >\r\n                                              <VerticalMenu.Item\r\n                                                style={{ zIndex: \"999\" }}\r\n                                                className={\r\n                                                  this.state\r\n                                                    .selectedUnallocatedData ===\r\n                                                  item.Code\r\n                                                    ? \"selectedUnalloctedShipment\"\r\n                                                    : \"box\"\r\n                                                }\r\n                                                onClick={() =>\r\n                                                  this.handleItemClick(\r\n                                                    item.Code,\r\n                                                    item.ShareholderCode\r\n                                                  )\r\n                                                }\r\n                                                icon=\"multiple-devices\"\r\n                                              >\r\n                                                <div>\r\n                                                  <div\r\n                                                    style={{\r\n                                                      float: \"right\",\r\n                                                      display: \"flex\",\r\n                                                    }}\r\n                                                  >\r\n                                                    <icon\r\n                                                      style={{\r\n                                                        fontSize: \"25px\",\r\n                                                        marginRight: \"4px\",\r\n                                                      }}\r\n                                                      className={\r\n                                                        item.ShipmentCode ===\r\n                                                        null\r\n                                                          ? \"icon-Unloading\"\r\n                                                          : \"icon-Loading\"\r\n                                                      }\r\n                                                    ></icon>\r\n                                                    {item.Code}\r\n                                                  </div>\r\n                                                  <div\r\n                                                    style={{\r\n                                                      position: \"absolute\",\r\n                                                      float: \"left\",\r\n                                                      paddingLeft: \"11rem\",\r\n                                                    }}\r\n                                                  >\r\n                                                    <ErrorBoundary>\r\n                                                      <Tooltip\r\n                                                        element={\r\n                                                          <span className=\"unallocatedShipmentInfoIcon\">\r\n                                                            <Icon\r\n                                                              name=\"badge-info\"\r\n                                                              root=\"common\"\r\n                                                            />\r\n                                                          </span>\r\n                                                        }\r\n                                                        content={this.getShipmentTooltip(\r\n                                                          item\r\n                                                        )}\r\n                                                        size=\"mini\"\r\n                                                        position=\"right center\"\r\n                                                      ></Tooltip>\r\n                                                    </ErrorBoundary>\r\n                                                  </div>\r\n                                                </div>\r\n                                              </VerticalMenu.Item>\r\n                                            </div>\r\n                                          )}\r\n                                        </Draggable>\r\n                                      </ErrorBoundary>\r\n                                    )\r\n                                  )\r\n                                : t(\"BayAllocation_NoDataFound\")}\r\n                            </VerticalMenu>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </Droppable>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"bayAllocationDiv\">\r\n                  <div bayAllocationDivContainer>\r\n                    <BayQueueComposite\r\n                      bayData={this.state.bayData}\r\n                      onBaySelect={this.handleBaySelect}\r\n                      isManualMode={this.state.isManualMode}\r\n                      onRefresh={this.handleRefresh}\r\n                      updatedTime={this.state.lastUpdatedTime}\r\n                      onCellClick={this.handleCellClick}\r\n                      selectedShipmentReceiptItem={\r\n                        this.state.selectedShipmentReceiptItem\r\n                      }\r\n                      isBayAllocation={true}\r\n                    ></BayQueueComposite>\r\n                  </div>\r\n                </div>\r\n              </DragDropContext>\r\n              {this.state.isSuggestBayModal\r\n                ? this.handleSuggestBayModal()\r\n                : null}\r\n              {this.state.isSwitchBayTypeModal\r\n                ? this.displaySwitchBayTypeModal()\r\n                : null}\r\n              {this.state.isAutoAllocateModal\r\n                ? this.displayAutoAllocateModal()\r\n                : null}\r\n            </div>\r\n\r\n            <div className=\"bayButtonPosition\">\r\n              <div className=\"row bayAllocationButtonRow\">\r\n                <div\r\n                  className={\r\n                    this.state.isManualMode\r\n                      ? \"bayAllocationButton\"\r\n                      : \"bayAllocationButtonDisable\"\r\n                  }\r\n                  style={{\r\n                    padding: \"0 0.5% 0 0.5%\",\r\n                    height: \"22px\",\r\n                    border: \"1px solid #c5c5c5\",\r\n                  }}\r\n                  onClick={() => this.handleSuggestBay()}\r\n                >\r\n                  <div>{t(\"SuggestBay\")}</div>\r\n                </div>\r\n\r\n                <div\r\n                  className={\r\n                    this.state.isManualMode\r\n                      ? \"bayAllocationButton\"\r\n                      : \"bayAllocationButtonDisable\"\r\n                  }\r\n                  style={{\r\n                    padding: \"0 0.5% 0 0.5%\",\r\n                    height: \"22px\",\r\n                    border: \"1px solid #c5c5c5\",\r\n                  }}\r\n                  onClick={() => this.handleAllocate()}\r\n                >\r\n                  <div>{t(\"BayAllocation_btnAllocate\")}</div>\r\n                </div>\r\n\r\n                <div\r\n                  className={\r\n                    this.state.isManualMode\r\n                      ? \"bayAllocationButton\"\r\n                      : \"bayAllocationButtonDisable\"\r\n                  }\r\n                  style={{\r\n                    padding: \"0 0.5% 0 0.5%\",\r\n                    height: \"22px\",\r\n                    border: \"1px solid #c5c5c5\",\r\n                  }}\r\n                  onClick={() => this.handleDeAllocate()}\r\n                >\r\n                  <div>{t(\"BayAllocation_btnDeAllocate\")}</div>\r\n                </div>\r\n\r\n                <div\r\n                  className={\r\n                    this.state.isManualMode\r\n                      ? \"bayAllocationButton\"\r\n                      : \"bayAllocationButtonDisable\"\r\n                  }\r\n                  style={{\r\n                    padding: \"0 1% 0 1%\",\r\n                    height: \"22px\",\r\n                    border: \"1px solid #c5c5c5\",\r\n                  }}\r\n                  onClick={() => this.handleClearBay()}\r\n                >\r\n                  <div>{t(\"ClearBay\")}</div>\r\n                </div>\r\n\r\n                <div\r\n                  className={\r\n                    this.state.isManualMode\r\n                      ? \"bayAllocationButton\"\r\n                      : \"bayAllocationButtonDisable\"\r\n                  }\r\n                  style={{\r\n                    padding: \"0 1% 0 1%\",\r\n                    height: \"22px\",\r\n                    border: \"1px solid #c5c5c5\",\r\n                  }}\r\n                  onClick={() => this.handleMoveStart()}\r\n                >\r\n                  <div>{t(\"BayAllocation_btnMoveToStart\")}</div>\r\n                </div>\r\n\r\n                <div\r\n                  className={\r\n                    this.state.isManualMode\r\n                      ? \"bayAllocationButton\"\r\n                      : \"bayAllocationButtonDisable\"\r\n                  }\r\n                  style={{\r\n                    padding: \"0 0.5% 0 0.5%\",\r\n                    height: \"22px\",\r\n                    border: \"1px solid #c5c5c5\",\r\n                  }}\r\n                  onClick={() => this.handleMovePrevious()}\r\n                >\r\n                  <div>{t(\"BayAllocation_btnMovePrevious\")}</div>\r\n                </div>\r\n\r\n                <div\r\n                  className={\r\n                    this.state.isManualMode\r\n                      ? \"bayAllocationButton\"\r\n                      : \"bayAllocationButtonDisable\"\r\n                  }\r\n                  style={{\r\n                    padding: \"0 1% 0 1%\",\r\n                    height: \"22px\",\r\n                    border: \"1px solid #c5c5c5\",\r\n                  }}\r\n                  onClick={() => this.handleMoveNext()}\r\n                >\r\n                  <div>{t(\"BayAllocation_btnMoveNext\")}</div>\r\n                </div>\r\n\r\n                <div\r\n                  className={\r\n                    this.state.isManualMode\r\n                      ? \"bayAllocationButton\"\r\n                      : \"bayAllocationButtonDisable\"\r\n                  }\r\n                  style={{\r\n                    padding: \"0 1% 0 1%\",\r\n                    height: \"22px\",\r\n                    border: \"1px solid #c5c5c5\",\r\n                  }}\r\n                  onClick={() => this.handleMoveEnd()}\r\n                >\r\n                  <div>{t(\"BayAllocation_btnMoveToEnd\")}</div>\r\n                </div>\r\n\r\n                <div\r\n                  className={\r\n                    this.state.isManualMode\r\n                      ? \"bayAllocationLargeButtonDisable\"\r\n                      : \"bayAllocationLargeButton\"\r\n                  }\r\n                  style={{ height: \"22px\", border: \"1px solid #c5c5c5\" }}\r\n                  onClick={() => this.handleAutoAllocate()}\r\n                >\r\n                  <div>{t(\"BayAllocation_btnAutoBayAllocation\")}</div>\r\n                </div>\r\n\r\n                <div\r\n                  className=\"bayAllocationLargeButton\"\r\n                  style={{ height: \"22px\", border: \"1px solid #c5c5c5\" }}\r\n                  onClick={() => this.handleSwitchMode()}\r\n                >\r\n                  <div>\r\n                    {this.state.isManualMode === true\r\n                      ? t(\"BayAllocation_btnSwitchToAuto\")\r\n                      : t(\"BayAllocation_btnSwitchToManual\")}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BayAllocationDetailsComposite);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\nimport BayAllocationDetailsComposite from \"../Details/BayAllocationDetailsComposite\";\r\n\r\nclass ManualBayAllocationComposite extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMUserActionsComposite\r\n            breadcrumbItem={this.props.activeItem}\r\n            shareholders={this.props.userDetails.EntityResult.ShareholderList}\r\n            handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n            shrVisible={false}\r\n            addVisible={false}\r\n            deleteVisible={false}\r\n          ></TMUserActionsComposite>\r\n        </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <BayAllocationDetailsComposite>\r\n          </BayAllocationDetailsComposite>\r\n        </ErrorBoundary>\r\n         <ErrorBoundary>\r\n          <ToastContainer\r\n            hideProgressBar={true}\r\n            closeOnClick={false}\r\n            closeButton={true}\r\n            newestOnTop={true}\r\n            position=\"bottom-right\"\r\n            toastClassName=\"toast-notification-wrap\"\r\n          />\r\n        </ErrorBoundary>\r\n      </div>\r\n    )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      userDetails: state.getUserDetails.userDetails,\r\n      tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps)(ManualBayAllocationComposite);\r\n  \r\n  ManualBayAllocationComposite.propTypes = {\r\n    activeItem: PropTypes.object,\r\n  };\r\n","export const carrierCode = \"CarrierCode\";\r\nexport const transportationType = \"TransportationType\";\r\nexport const shareholderCode = \"ShareHolderCode\";\r\nexport const driverCode = \"DriverCode\";\r\nexport const customerCode = \"CustomerCode\";\r\nexport const trailerCode = \"TrailerCode\";\r\nexport const originTerminalCode = \"OriginTerminalCode\";\r\nexport const primeMoverCode = \"PrimeMoverCode\";\r\nexport const vehicleCode = \"VehicleCode\";\r\nexport const destinationCode = \"DestinationCode\";\r\nexport const finishedProductCode = \"FinishedProductCode\";\r\nexport const shipmentCode = \"ShipmentCode\";\r\nexport const orderCode = \"OrderCode\";\r\nexport const receiptCode = \"ReceiptCode\";\r\nexport const suppliercode = \"SupplierCode\";\r\nexport const marineDispatchCode = \"MarineDispatchCode\";\r\nexport const marineReceiptCode = \"MarineReceiptCode\";\r\nexport const supplierCode = \"SupplierCode\";\r\nexport const contractCode = \"ContractCode\";\r\n\r\nexport const railDispatchCode = \"RailDispatchCode\";\r\nexport const railReceiptCode = \"RailReceiptCode\";\r\nexport const railRouteCode = \"RailRouteCode\";\r\nexport const wagonCode = \"WagonCode\";\r\n\r\nexport const compartmentCode = \"CompartmentCode\";\r\n\r\nexport const smsConfigurationCode = \"SMSConfigurationCode\";\r\nexport const pipelineDispatchCode = \"PipelineDispatchCode\";\r\nexport const pipelineReceiptCode = \"PipelineReceiptCode\";\r\nexport const EmailConfigurationCode = \"EmailConfigurationCode\";\r\n\r\nexport const baseProductCode = \"BaseProductCode\";\r\nexport const locationCode = \"LocationCode\";\r\nexport const gantryCode = \"GantryCode\";\r\n\r\nexport const siteViewType = \"SiteViewType\";\r\n\r\nexport const entityCode = \"EntityCode\";\r\n\r\nexport const entityType = \"EntityType\";\r\nexport const cardReaderCode = \"CardReaderCode\";\r\nexport const accessCardCode = \"AccessCardCode\";\r\nexport const bcuCode = \"BcuCode\";\r\nexport const deuCode = \"DeuCode\";\r\nexport const weighBridgeCode = \"WeighBridgeCode\";\r\nexport const weight = \"Weight\";\r\nexport const outOfToleranceAllowed = \"OutOfToleranceAllowed\";\r\n\r\nexport const loadingArmCode = \"LoadingArmCode\";\r\nexport const transportaionType = \"TransportationType\";\r\nexport const bayCode = \"BayCode\";\r\nexport const TransactionNumber = \"TransactionNumber\";\r\nexport const BatchNumber = \"BatchNumber\";\r\nexport const terminalCode = \"TerminalCode\";\r\nexport const tankGroupCode = \"TankGroupCode\";\r\nexport const tankCode = \"TankCode\";\r\nexport const meterCode = \"MeterCode\";\r\n\r\nexport const shipmentType = \"ShipmentType\";\r\nexport const shipmentStatus = \"ShipmentStatus\";\r\nexport const meterLineType = \"MeterLineType\";\r\nexport const dispatchCode = \"DispatchCode\";\r\nexport const railReceiptStatus = \"RailReceiptStatus\";\r\nexport const receiptStatus = \"ReceiptStatus\";\r\nexport const fptTansactionID = \"FPTransactionID\";\r\nexport const productCategoryType = \"ProductCategoryType\";\r\nexport const marineReason = \"Reason\";\r\n\r\nexport const sealMasterCode = \"SealMasterCode\";\r\nexport const marineDispatchReason = \"Reason\";\r\nexport const OperationName = \"OperationName\";\r\nexport const FPTransactionID = \"FPTransactionID\";\r\nexport const ProductCategoryType = \"ProductCategoryType\";\r\nexport const compartmentSeqNoInVehicle = \"CompartmentSeqNoInVehicle\";\r\nexport const adjustedPlanQuantity = \"AdjustedPlanQuantity\";\r\nexport const forceComplete = \"ForceComplete\";\r\nexport const dispatchStatus = \"DispatchStatus\";\r\nexport const HolidayDate = \"HolidayDate\";\r\nexport const ActionID = \"ActionID\";\r\nexport const EODTimePrev = \"EODTimePrev\";\r\nexport const TerminalAction = \"TerminalAction\";\r\nexport const EODTime = \"EODTime\";\r\nexport const MonthStartDay = \"MonthStartDay\";\r\nexport const captainCode = \"CaptainCode\";\r\nexport const userType = \"GeneralTMUserType\";\r\nexport const generalTMUserCode = \"GeneralTMUserCode\";\r\nexport const isPriority = \"IsPriority\";\r\nexport const actualTerminalCode = \"ActualTerminalCode\";\r\nexport const shipmentBondNo = \"ShipmentBondNo\"\r\nexport const receiptBondNo = \"ReceiptBondNo\"\r\nexport const marineReceiptStatus = \"MarineReceiptStatus\";\r\nexport const deviceType = \"DeviceType\";\r\nexport const deviceCode = \"DeviceCode\";\r\nexport const bayGroup = \"BayGroup\";\r\nexport const pipelineHeaderCode = \"PipelineHeaderCode\";\r\nexport const exchangePartnerName = \"ExchangePartner\";\r\nexport const personID = \"PersonID\";\r\nexport const userName = \"UserName\";\r\nexport const pipelinePlanCode = \"PipelinePlanCode\";\r\nexport const pipelinePlanType = \"PipelinePlanType\";\r\nexport const channelCode = \"ChannelCode\";\r\nexport const ProcessName = \"ProcessName\";\r\nexport const reconciliationCode = \"ReconciliationCode\";\r\nexport const NotificationGroupCode = \"NotificationGroupCode\";\r\nexport const NotificationGroupStatus = \"NotificationGroupStatus\";\r\nexport const NotificationGroupDesc = \"NotificationGroupDesc\";\r\nexport const NotificationResSource = \"NotificationResSource\";\r\nexport const NotificationResMsgCode = \"NotificationResMsgCode\";\r\nexport const NotificationOrigResSource = \"NotificationOrigResSource\";\r\nexport const NotificationOrigResMsgCode = \"NotificationOrigResMsgCode\";\r\nexport const NotificationMessageCode = \"NotificationMessageCode\"\r\nexport const positionType = \"PositionType\";\r\nexport const roleName = \"RoleName\";\r\nexport const exchangeAgreementCode = \"ExchangeAgreementCode\";\r\nexport const ProductTransferAgreementCode = \"ProductTransferAgreementCode\";\r\nexport const ShareholderAgreementStatus = \"ShareholderAgreementStatus\";\r\nexport const RequestorShareholder = \"RequestorShareholder\";\r\nexport const LenderShareholder = \"LenderShareholder\";\r\nexport const requestCode = \"RequestCode\";\r\nexport const TransferReferenceCode = \"TransferReferenceCode\";\r\nexport const ShiftID = \"ShiftID\";\r\nexport const ShiftName = \"ShiftName\";\r\nexport const printerName = \"PrinterName\";\r\nexport const locationtype = \"LocationType\";\r\nexport const forceClosureReason = \"ForceClosureReason\";\r\nexport const TransactionType = \"TransactionType\";\r\nexport const CustomerRecipeCode = \"CustomerRecipeCode\";\r\n\r\nexport const coaTemplateCode = \"COATemplateCode\";\r\nexport const coaManagementCode = \"COAManagementCode\";\r\nexport const coaParameterCode = \"COAParameterCode\";\r\nexport const coaManagementFinishedProductCode = \"COAManagementFinishedProductCode\";\r\nexport const coaCustomerCode = \"COACustomerCode\";\r\nexport const coaFinishedProductCode = \"COAFinishedProductCode\";\r\nexport const coaAssignmentCode = \"COAAssignmentCode\";\r\nexport const coaTransportationType = \"COATransportationType\";\r\nexport const coaTransactionType = \"COATransactionType\";\r\nexport const coaSeqNumber = \"COASeqNumber\";\r\nexport const forecastDate = \"ForecastDate\";\r\nexport const forecastTanks = \"ForecastTanks\";","import React from \"react\";\r\nimport { Notification } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { delimiter } from \"./Constants\";\r\nimport PropTypes from \"prop-types\";\r\nNotifyEvent.propTypes = {\r\n  notificationMessage: PropTypes.shape({\r\n    messageType: PropTypes.oneOf([\"success\", \"critical\"]),\r\n    message: PropTypes.string,\r\n    messageResultDetails: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        keyFields: PropTypes.arrayOf(PropTypes.string),\r\n        KeyValues: PropTypes.arrayOf(PropTypes.string),\r\n        isSuccess: PropTypes.bool,\r\n        errorMessage: PropTypes.string,\r\n      })\r\n    ),\r\n  }).isRequired,\r\n  //closeToast: PropTypes.bool,\r\n};\r\n// notifiaionMessage={messageType:\"success/critical\",message:\"title of message\",\r\n// messageResultDetails:[{keyFields:[Array Of Key Codes],KeyValues:[Array of Key Values],isSuccess,ErrorMessage}]}\r\nexport default function NotifyEvent({ notificationMessage }) {\r\n\r\n  function getLocalizedMessage(message) {\r\n    try {\r\n      let messageOptions = message.split(delimiter);\r\n      return messageOptions[0];\r\n    } catch (error) {\r\n      console.log(error);\r\n      return \"\";\r\n    }\r\n  }\r\n  function getLocalizedMessageParameters(message) {\r\n    try {\r\n      let messageOptions = message.split(delimiter);\r\n      messageOptions.splice(0, 1);\r\n      return messageOptions;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <Notification\r\n          className=\"toast-notification\"\r\n          severity={notificationMessage.messageType}\r\n          // onCloseClick={closeToast}\r\n          hasIcon={true}\r\n          title={t(notificationMessage.message)}\r\n        //onDetailsClick={() => alert(details)}\r\n        >\r\n          {notificationMessage.messageResultDetails.map((messageResult) => {\r\n            var entityKeyDetails = \"\";\r\n            if (messageResult.keyFields.length > 0) {\r\n              for (var i = 0; i < messageResult.keyFields.length; i++) {\r\n                entityKeyDetails =\r\n                  entityKeyDetails +\r\n                  t(messageResult.keyFields[i]) +\r\n                  \" : \" +\r\n                  messageResult.keyValues[i] +\r\n                  \", \";\r\n              }\r\n            }\r\n            return (\r\n              <div>\r\n                <span\r\n                  style={{ color: messageResult.isSuccess ? \"#7eb338\" : \"#F15A4F\" }}\r\n                >\r\n                  {entityKeyDetails}\r\n                  {messageResult.isSuccess\r\n                    ? t(\"NotificationList_MessageType_Success\")\r\n                    : t(\"NotificationList_MessageType_Failure\") +\r\n                    \" : \" +\r\n                    t(\r\n                      getLocalizedMessage(messageResult.errorMessage),\r\n                      getLocalizedMessageParameters(\r\n                        messageResult.errorMessage\r\n                      )\r\n                    )}\r\n                </span>\r\n                <br></br>\r\n              </div>\r\n            );\r\n          })}\r\n        </Notification>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n"],"names":["BayQueueComposite","Component","constructor","arguments","state","searchBayResult","pageIndex","pageSize","onBaySearchChange","value","this","setState","onCheckboxChange","bayCode","data","props","onBaySelect","error","console","log","componentDidMount","getLookUpData","axios","RestAPIs","Utilities","tokenDetails","tokenInfo","then","response","result","IsSuccess","isNaN","parseInt","EntityResult","getBayTooltip","_jsx","TranslationConsumer","children","t","_jsxs","BayCode","LoadingType","MaximumQueue","IsManual","Active","getBayShipmentTooltip","ShipmentCode","Code","ShareholderCode","CarrierCode","VehicleCode","DriverCode","Date","ScheduledDate","toLocaleDateString","getBayTypeTooltip","BayType","getTransactionIdentifier","code","shareholder","Constants","render","searchBayResults","bayData","filter","values","toLowerCase","includes","ShipmentReceiptItem","some","subElement","paginationBays","lodash","length","firstIndexInPage","lastIndexInPage","slice","className","Input","placeholder","search","onChange","Pagination","totalItems","itemsPerPage","activePage","onPageChange","page","style","marginTop","float","updatedTime","marginLeft","cursor","onClick","onRefresh","width","src","alt","ErrorBoundary","map","a","key","overflowX","Table","Header","HeaderCell","colSpan","content","marginBottom","display","isBayAllocation","Checkbox","label","checked","SelectedBay","whiteSpace","InputLabel","Tooltip","element","Icon","paddingBottom","name","root","size","position","fontSize","isManualMode","right","Body","Row","Droppable","droppableId","type","provided","ref","innerRef","droppableProps","b","index","Cell","selectedShipmentReceiptItem","onCellClick","Draggable","draggableId","isDragDisabled","snapshot","draggableProps","dragHandleProps","title","Array","from","keys","num","i","connect","userDetails","getUserDetails","TokenAuth","TMUserActions","_ref","operationsVisibilty","breadcrumbItem","shareholders","selectedShareholder","onShareholderChange","onDelete","onAdd","popUpContent","shrVisible","handleBreadCrumbClick","addVisible","deleteVisible","modelOpen","setModelOpen","useState","popUpOpen","setPopUpOpen","handlePopUpClick","add","alignItems","padding","Breadcrumb","parents","parentitem","Item","undefined","itemCode","localizedKey","justifyContent","_Fragment","Select","disabled","options","Modal","open","Content","Footer","Button","Popup","color","on","onMouseLeave","VerticalMenu","item","popUpMenuClick","menuItem","fieldName","fieldValue","delete","defaultProps","itemName","itemProps","isComponent","TMUserActionsComposite","BayAllocationDetailsComposite","unAllocatedData","selectedUnallocatedData","selectedUnallocatedDataType","selectedUnallocatedShareholder","selectedShipmentReceiptBay","isSuggestBayModal","suggestBays","isSwitchBayTypeModal","isAutoAllocateModal","searchUnAllocatedDataResult","searchUnAllocatedReceiptResult","isReadyToRender","lastUpdatedTime","getBays","updatedtime","toLocaleTimeString","bayAllocation","isArray","BayData","forEach","bay","allocatedList","lstBayAllocationQueue","bayItem","AllocationItems","sort","QueueNumber","allocatedItem","shipmentReceiptItem","Table2","shipment","ReceiptCode","push","ErrorList","catch","handleSuggestBayModal","SHIPMENT","flexWrap","handleDragEnd","transaction","splitTransactionIdentifier","source","destination","entityType","deAllocatedList","deAllocateItem","RECEIPT","DeAllocateBay","AllocateBay","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","toast","NotifyEvent","notificationMessage","autoClose","handleItemClick","handleBaySelect","matchedBay","displaySwitchBayTypeModal","switchBayType","displayAutoAllocateModal","AutoAllocate","onUnAllocatedDataSearchChange","handleRefresh","getUnallocatedShipmentsandReceipts","handleCellClick","selectedItem","getBayAllocationType","Table1","isManual","handleSuggestBay","keyCode","KeyCodes","obj","ShareHolderCode","keyDataCode","ResultDataList","handleAllocate","selectedBayList","shipmentCode","handleDeAllocate","selectedData","Object","handleClearBay","clearBay","PrimaryShareholder","handleMoveStart","changeAllocatedItemPosition","Start","handleMovePrevious","MovePrevious","handleMoveNext","MoveNext","handleMoveEnd","End","positionType","handleSwitchMode","handleAutoAllocate","getShipmentTooltip","transactionIdentifier","tran_array","split","searchUnAllocatedDataResults","Loader","text","DragDropContext","onDragEnd","zIndex","icon","marginRight","paddingLeft","bayAllocationDivContainer","height","border","ManualBayAllocationComposite","activeItem","ShareholderList","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","toastClassName","carrierCode","transportationType","shareholderCode","driverCode","customerCode","trailerCode","originTerminalCode","primeMoverCode","vehicleCode","destinationCode","finishedProductCode","orderCode","receiptCode","marineDispatchCode","marineReceiptCode","supplierCode","contractCode","railDispatchCode","railReceiptCode","railRouteCode","wagonCode","compartmentCode","smsConfigurationCode","pipelineDispatchCode","pipelineReceiptCode","EmailConfigurationCode","baseProductCode","locationCode","siteViewType","entityCode","cardReaderCode","accessCardCode","bcuCode","deuCode","weighBridgeCode","weight","outOfToleranceAllowed","loadingArmCode","transportaionType","TransactionNumber","BatchNumber","terminalCode","tankGroupCode","tankCode","meterCode","shipmentType","shipmentStatus","meterLineType","dispatchCode","receiptStatus","fptTansactionID","productCategoryType","marineReason","sealMasterCode","marineDispatchReason","OperationName","FPTransactionID","ProductCategoryType","compartmentSeqNoInVehicle","adjustedPlanQuantity","forceComplete","dispatchStatus","HolidayDate","ActionID","EODTimePrev","TerminalAction","EODTime","MonthStartDay","captainCode","userType","generalTMUserCode","isPriority","actualTerminalCode","shipmentBondNo","receiptBondNo","deviceType","deviceCode","bayGroup","pipelineHeaderCode","exchangePartnerName","personID","userName","pipelinePlanCode","pipelinePlanType","channelCode","ProcessName","reconciliationCode","NotificationGroupCode","NotificationGroupStatus","NotificationGroupDesc","NotificationResSource","NotificationResMsgCode","NotificationOrigResSource","NotificationOrigResMsgCode","NotificationMessageCode","exchangeAgreementCode","ProductTransferAgreementCode","ShareholderAgreementStatus","RequestorShareholder","LenderShareholder","requestCode","TransferReferenceCode","ShiftID","ShiftName","printerName","locationtype","forceClosureReason","TransactionType","CustomerRecipeCode","coaTemplateCode","coaManagementCode","coaParameterCode","coaManagementFinishedProductCode","coaSeqNumber","forecastDate","forecastTanks","getLocalizedMessage","delimiter","getLocalizedMessageParameters","messageOptions","splice","Notification","severity","hasIcon","messageResult","entityKeyDetails"],"sourceRoot":""}