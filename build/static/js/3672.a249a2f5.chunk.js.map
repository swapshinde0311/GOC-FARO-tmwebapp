{"version":3,"file":"static/js/3672.a249a2f5.chunk.js","mappings":"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","sources":["Components/UIBase/Details/PipelineDispatchDetails.jsx","Components/Composite/Details/PipelineDispatchDetailsComposite.jsx","Components/UIBase/Details/PipelineDispatchViewAuditTrailDetails.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport { DatePicker, Input, Select, Icon, Tab, Accordion, Checkbox } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { getCurrentDateFormat, handleIsRequiredCompartmentCell } from \"../../../JS/functionalUtilities\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nPipelineDispatchDetails.propTypes = {\r\n  pipelineDispatch: PropTypes.object.isRequired,\r\n  modPipelineDispatch: PropTypes.object.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  attributeValidationErrors: PropTypes.object.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    quantityUOM: PropTypes.array.isRequired,\r\n    pipelineHeaderOptions: PropTypes.array.isRequired,\r\n    pipelineHeaderMeterOptions: PropTypes.array.isRequired,\r\n    tankCodeOptions: PropTypes.array.isRequired,\r\n    terminalCodes: PropTypes.array.isRequired,\r\n    customerOptions: PropTypes.array.isRequired,\r\n    destinationOptions: PropTypes.array.isRequired,\r\n    finishedProductOptions: PropTypes.array.isRequired,\r\n  }),\r\n  selectedCompRow: PropTypes.array.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  handleRowSelectionChange: PropTypes.func.isRequired,\r\n  handleCellDataEdit: PropTypes.func.isRequired,\r\n  handleAddCompartment: PropTypes.func.isRequired,\r\n  handleDeleteCompartment: PropTypes.func.isRequired,\r\n  isEnterpriseNode: PropTypes.bool.isRequired,\r\n  handleTerminalChange: PropTypes.func.isRequired,\r\n  handlePipelineHeaderChange: PropTypes.func.isRequired,\r\n  onTabChange: PropTypes.func.isRequired,\r\n  activeTab: PropTypes.number.isRequired,\r\n  loadingDetailsTab: PropTypes.array.isRequired,\r\n  modAttributeMetaDataList: PropTypes.array.isRequired,\r\n  onAttributeDataChange: PropTypes.func.isRequired,\r\n  loadingDetails: PropTypes.object.isRequired,\r\n  isMeterRequired: PropTypes.bool.isRequired,\r\n  isTankRequired: PropTypes.bool.isRequired,\r\n  pipelineSnapShotInfo: PropTypes.array.isRequired,\r\n  handleCellCheck: PropTypes.func.isRequired,\r\n  onDateTextChange: PropTypes.func.isRequired,\r\n};\r\n\r\nPipelineDispatchDetails.defaultProps = {\r\n  listOptions: {\r\n    quantityUOM: [],\r\n    pipelineHeaderOptions: [],\r\n    pipelineHeaderMeterOptions: [],\r\n    tankCodeOptions: [],\r\n    terminalCodes: [],\r\n    customerOptions: [],\r\n    destinationOptions: [],\r\n    finishedProductOptions: [],\r\n  },\r\n  isEnterpriseNode: false,\r\n}\r\n\r\nexport function PipelineDispatchDetails({\r\n  pipelineDispatch,\r\n  modPipelineDispatch,\r\n  validationErrors,\r\n  attributeValidationErrors,\r\n  listOptions,\r\n  selectedCompRow,\r\n  onFieldChange,\r\n  handleRowSelectionChange,\r\n  handleCellDataEdit,\r\n  handleAddCompartment,\r\n  handleDeleteCompartment,\r\n  isEnterpriseNode,\r\n  handleTerminalChange,\r\n  handlePipelineHeaderChange,\r\n  onTabChange,\r\n  activeTab,\r\n  loadingDetailsTab,\r\n  modAttributeMetaDataList,\r\n  onAttributeDataChange,\r\n  loadingDetails,\r\n  pipelineSnapShotInfo,\r\n  isMeterRequired,\r\n  isTankRequired,\r\n  handleCellCheck,\r\n  onDateTextChange,\r\n}) {\r\n  const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n    let attributeValidation = [];\r\n    attributeValidation = attributeValidationErrors.find(\r\n      (selectedAttribute) => {\r\n        return selectedAttribute.TerminalCode === terminal;\r\n      }\r\n    );\r\n    return attributeValidation.attributeValidationErrors;\r\n  };\r\n\r\n  const handleCustomEditDropDown = (cellData, dropDownoptions) => {\r\n    return (\r\n      <Select\r\n        className=\"selectDropwdown\"\r\n        value={\r\n          modPipelineDispatch.PipelineDispatchTanks[cellData.rowIndex][\r\n          cellData.field\r\n          ]\r\n        }\r\n        fluid\r\n        options={dropDownoptions}\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        indicator=\"required\"\r\n        reserveSpace={false}\r\n        search={true}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleCustomEditTextBox = (cellData) => {\r\n    return (\r\n      <Input\r\n        fluid\r\n        value={\r\n          modPipelineDispatch.PipelineDispatchTanks[cellData.rowIndex][\r\n          cellData.field\r\n          ]\r\n        }\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        reserveSpace={false}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleCustomEditDateSelect = (cellData) => {\r\n    return (\r\n      <DatePicker\r\n        fluid\r\n        value={\r\n          modPipelineDispatch.PipelineDispatchTanks[cellData.rowIndex][\r\n            cellData.field\r\n          ] === null\r\n            ? \"\"\r\n            : new Date(\r\n              modPipelineDispatch.PipelineDispatchTanks[cellData.rowIndex][\r\n              cellData.field\r\n              ]\r\n            )\r\n        }\r\n        type=\"datetime\"\r\n        displayFormat={getCurrentDateFormat()}\r\n        indicator=\"required\"\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        onTextChange={(value, error) => {\r\n          onDateTextChange(cellData, value, error);\r\n        }}\r\n        reserveSpace={false}\r\n      ></DatePicker>\r\n    );\r\n  };\r\n\r\n  const decimalDisplayValues = (cellData) => {\r\n    const { value } = cellData;\r\n    if (typeof value === \"number\") {\r\n      return value.toLocaleString();\r\n    } else {\r\n      return value;\r\n    }\r\n  };\r\n\r\n  const dateDisplayValues = (cellData) => {\r\n    const { value } = cellData;\r\n    return value !== null ? new Date(value).toLocaleDateString() + \" \" + new Date(value).toLocaleTimeString() : \"\";\r\n  };\r\n\r\n  const handleCheckBox = (data) => {\r\n    return (\r\n      <Checkbox\r\n        className=\"forceCompleteChkBox\"\r\n        checked={data.value}\r\n        onChange={(cellData) => {\r\n          handleCellCheck(data, cellData);\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modPipelineDispatch.PipelineDispatchCode}\r\n                indicator=\"required\"\r\n                disabled={pipelineDispatch.PipelineDispatchCode !== \"\"}\r\n                onChange={(data) => onFieldChange(\"PipelineDispatchCode\", data)}\r\n                label={t(\"PipelineDispatch_DispatchCode\")}\r\n                error={t(validationErrors.PipelineDispatchCode)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            {isEnterpriseNode ? (\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  placeholder={t(\"Common_Select\")}\r\n                  label={t(\"TerminalCode\")}\r\n                  value={\r\n                    modPipelineDispatch.TerminalCodes === null\r\n                      ? \"\"\r\n                      : modPipelineDispatch.TerminalCodes.length === 0\r\n                        ? \"\"\r\n                        : modPipelineDispatch.TerminalCodes[0]\r\n                  }\r\n                  disabled={pipelineDispatch.PipelineDispatchCode !== \"\"}\r\n                  onChange={(data) => handleTerminalChange(data)}\r\n                  indicator=\"required\"\r\n                  error={t(validationErrors.TerminalCodes)}\r\n                  options={Utilities.transferListtoOptions(listOptions.terminalCodes)}\r\n                  reserveSpace={false}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                />\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"PipelineDispatch_CustomerCode\")}\r\n                value={modPipelineDispatch.CustomerCode}\r\n                onChange={(data) => onFieldChange(\"CustomerCode\", data)}\r\n                options={listOptions.customerOptions}\r\n                error={t(validationErrors.CustomerCode)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"PipelineDispatch_Destination\")}\r\n                value={modPipelineDispatch.DestinationCode}\r\n                onChange={(data) => onFieldChange(\"DestinationCode\", data)}\r\n                options={listOptions.destinationOptions}\r\n                error={t(validationErrors.DestinationCode)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modPipelineDispatch.PipelineDispatchStatus}\r\n                label={t(\"PipelineDispatch_DispatchStatus\")}\r\n                reserveSpace={false}\r\n                disabled={true}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"PipelineDispatch_HeaderLineCode\")}\r\n                value={modPipelineDispatch.PipelineHeaderCode}\r\n                onChange={(data) => handlePipelineHeaderChange(data)}\r\n                options={listOptions.pipelineHeaderOptions}\r\n                error={t(validationErrors.PipelineHeaderCode)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                label={t(\"PipelineDispatch_HeaderLineMeter\")}\r\n                value={modPipelineDispatch.PipelineHeaderMeterCode}\r\n                onChange={(data) =>\r\n                  onFieldChange(\"PipelineHeaderMeterCode\", data)\r\n                }\r\n                options={Utilities.transferListtoOptions(listOptions.pipelineHeaderMeterOptions)}\r\n                error={t(validationErrors.PipelineHeaderMeterCode)}\r\n                indicator={isMeterRequired ? \"required\" : \"\"}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modPipelineDispatch.Quantity}\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"Quantity\", data)}\r\n                label={t(\"PipelineDispatch_Quantity\")}\r\n                error={t(validationErrors.Quantity)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <ErrorBoundary>\r\n                <Select\r\n                  fluid\r\n                  placeholder={t(\"Common_Select\")}\r\n                  label={t(\"PipelineDispatch_UOM\")}\r\n                  value={modPipelineDispatch.QuantityUOM}\r\n                  multiple={false}\r\n                  indicator=\"required\"\r\n                  options={listOptions.quantityUOM}\r\n                  disabled={listOptions.quantityUOM.length === 0}\r\n                  error={t(validationErrors.QuantityUOM)}\r\n                  onChange={(data) => onFieldChange(\"QuantityUOM\", data)}\r\n                  reserveSpace={false}\r\n                />\r\n              </ErrorBoundary>\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"PipelineDispatch_FinishedProductCode\")}\r\n                value={modPipelineDispatch.FinishedProductCode}\r\n                onChange={(data) => onFieldChange(\"FinishedProductCode\", data)}\r\n                options={listOptions.finishedProductOptions}\r\n                error={t(validationErrors.FinishedProductCode)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4 starttime\">\r\n              <DatePicker\r\n                fluid\r\n                value={\r\n                  modPipelineDispatch.ScheduledStartTime === null\r\n                    ? \"\"\r\n                    : new Date(modPipelineDispatch.ScheduledStartTime)\r\n                }\r\n                label={t(\"PipelineDispatch_ExpectedStartTime\")}\r\n                type=\"datetime\"\r\n                displayFormat={getCurrentDateFormat()}\r\n                disablePast={false}\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"ScheduledStartTime\", data)}\r\n                error={t(validationErrors.ScheduledStartTime)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <DatePicker\r\n                fluid\r\n                value={\r\n                  modPipelineDispatch.ScheduledEndTime === null\r\n                    ? \"\"\r\n                    : new Date(modPipelineDispatch.ScheduledEndTime)\r\n                }\r\n                label={t(\"PipelineDispatch_ExpectedEndTime\")}\r\n                type=\"datetime\"\r\n                displayFormat={getCurrentDateFormat()}\r\n                disablePast={false}\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"ScheduledEndTime\", data)}\r\n                error={t(validationErrors.ScheduledEndTime)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modPipelineDispatch.Remarks}\r\n                label={t(\"Cust_Remarks\")}\r\n                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n          </div>\r\n          {modAttributeMetaDataList.length > 0\r\n            ? modAttributeMetaDataList.map((attire) => (\r\n              <ErrorBoundary>\r\n                <Accordion>\r\n                  <Accordion.Content\r\n                    className=\"attributeAccordian\"\r\n                    title={\r\n                      isEnterpriseNode\r\n                        ? attire.TerminalCode + \" - \" + t(\"Attributes_Header\")\r\n                        : t(\"Attributes_Header\")\r\n                    }\r\n                  >\r\n                    <AttributeDetails\r\n                      selectedAttributeList={attire.attributeMetaDataList}\r\n                      handleCellDataEdit={onAttributeDataChange}\r\n                      attributeValidationErrors={handleValidationErrorFilter(\r\n                        attributeValidationErrors,\r\n                        attire.TerminalCode\r\n                      )}\r\n                    ></AttributeDetails>\r\n                  </Accordion.Content>\r\n                </Accordion>\r\n              </ErrorBoundary>\r\n            ))\r\n            : null}\r\n          <div className=\"shipmentTabAlignment\">\r\n            <Tab\r\n              activeIndex={activeTab}\r\n              onTabChange={(activeIndex) => {\r\n                onTabChange(activeIndex);\r\n              }}>\r\n              <Tab.Pane\r\n                title={t(\"Dispatch_Plan\")}\r\n              >\r\n                <div className=\"row compartmentRow\">\r\n                  <div className=\"col col-md-8 col-lg-9 col col-xl-9\">\r\n                    {/* <h4>{t(\"PipelineDispatch_TankInfoHeader\")}</h4> */}\r\n                  </div>\r\n                  <div className=\"col col-md-4 col-lg-3 col-xl-3\">\r\n                    <div className=\"compartmentIconContainer\">\r\n                      <div onClick={handleAddCompartment} className=\"compartmentIcon\">\r\n                        <div>\r\n                          <Icon root=\"common\" name=\"badge-plus\" size=\"medium\" />\r\n                        </div>\r\n                        <div className=\"margin_l10\">\r\n                          <h5 className=\"font14\">{t(\"FinishedProductInfo_Add\")}</h5>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div\r\n                        onClick={handleDeleteCompartment}\r\n                        className=\"compartmentIcon margin_l30\"\r\n                      >\r\n                        <div>\r\n                          <Icon root=\"common\" name=\"delete\" size=\"medium\" />\r\n                        </div>\r\n                        <div className=\"margin_l10\">\r\n                          <h5 className=\"font14\">{t(\"DestAdd_Delete\")}</h5>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row marginRightZero tableScroll\">\r\n                  <div className=\"col-12 detailsTable\">\r\n                    <DataTable\r\n                      data={modPipelineDispatch.PipelineDispatchTanks}\r\n                      selectionMode=\"multiple\"\r\n                      selection={selectedCompRow}\r\n                      onSelectionChange={handleRowSelectionChange}\r\n                    >\r\n                      <DataTable.Column\r\n                        className=\"compColHeight\"\r\n                        key=\"TankCode\"\r\n                        field=\"TankCode\"\r\n                        header={isTankRequired ? handleIsRequiredCompartmentCell(\r\n                          t(\"PipelineDispatch_TankCode\")) : t(\"PipelineDispatch_TankCode\")}\r\n                        editable={true}\r\n                        editFieldType=\"text\"\r\n                        customEditRenderer={(celldata) =>\r\n                          handleCustomEditDropDown(celldata, listOptions.tankCodeOptions)\r\n                        }\r\n                      ></DataTable.Column>\r\n                      <DataTable.Column\r\n                        className=\"compColHeight\"\r\n                        key=\"Quantity\"\r\n                        field=\"Quantity\"\r\n                        header={t(\"PipelineDispatch_ExpectedQuantity\")}\r\n                        editable={true}\r\n                        editFieldType=\"text\"\r\n                        renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                        customEditRenderer={handleCustomEditTextBox}\r\n                      ></DataTable.Column>\r\n                      <DataTable.Column\r\n                        className=\"compColHeight\"\r\n                        key=\"PlannedStartTime\"\r\n                        field=\"PlannedStartTime\"\r\n                        header={t(\"PipelineDispatch_ExpectedStartTime\")}\r\n                        editable={true}\r\n                        // editFieldType=\"text\"\r\n                        renderer={(cellData) => dateDisplayValues(cellData)}\r\n                        customEditRenderer={(cellData) =>\r\n                          handleCustomEditDateSelect(cellData)\r\n                        }\r\n                      ></DataTable.Column>\r\n                      <DataTable.Column\r\n                        className=\"compColHeight\"\r\n                        key=\"PlannedEndTime\"\r\n                        field=\"PlannedEndTime\"\r\n                        header={t(\"PipelineDispatch_ExpectedEndTime\")}\r\n                        editable={true}\r\n                        // editFieldType=\"text\"\r\n                        renderer={(cellData) => dateDisplayValues(cellData)}\r\n                        customEditRenderer={(cellData) =>\r\n                          handleCustomEditDateSelect(cellData)\r\n                        }\r\n                      ></DataTable.Column>\r\n                    </DataTable>\r\n                  </div>\r\n                </div>\r\n              </Tab.Pane>\r\n              {loadingDetailsTab.map((index) => {\r\n                return (\r\n                  <Tab.Pane\r\n                    title={t(\"ViewShipment_LoadingDetails\")}>\r\n                    <ErrorBoundary>\r\n                      <Accordion>\r\n                        <Accordion.Content\r\n                          className=\"attributeAccordian\"\r\n                          title={t(\"PipelineDispatchDetails_TransactionSummary\")}\r\n                        >\r\n                          <div className=\"row marginRightZero tableScroll\">\r\n                            <div className=\"col-12 detailsTable\">\r\n                              <DataTable\r\n                                data={pipelineSnapShotInfo}\r\n                              >\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"ReceivedGrossQuantity\"\r\n                                  field=\"ReceivedGrossQuantity\"\r\n                                  header={t(\"PipelineDispatchTransaction_ActualGrossQuantity\")}\r\n                                  initialWidth=\"120px\"\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"ReceivedNetQuantity\"\r\n                                  field=\"ReceivedNetQuantity\"\r\n                                  header={t(\"PipelineDispatchTransaction_ActualNetQuantity\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"RationPending\"\r\n                                  field=\"RationPending\"\r\n                                  header={t(\"PipelineDispatchTransaction_RationPending\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"ReceivedQuantityUOM\"\r\n                                  field=\"ReceivedQuantityUOM\"\r\n                                  header={t(\"PipelineDispatchTransaction_ActualQuantityUOM\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"PlannedStartTime\"\r\n                                  field=\"PlannedStartTime\"\r\n                                  header={t(\"PipelineDispatchTransaction_ExpectedStartDateTime\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"PlannedEndTime\"\r\n                                  field=\"PlannedEndTime\"\r\n                                  header={t(\"PipelineDispatchTransaction_ExpectedEndDateTime\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"ActualStartTime\"\r\n                                  field=\"ActualStartTime\"\r\n                                  header={t(\"PipelineDispatchTransaction_ActualStartDateTime\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"ActualEndTime\"\r\n                                  field=\"ActualEndTime\"\r\n                                  header={t(\"PipelineDispatchTransaction_ActualEndDateTime\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"IsInvalid\"\r\n                                  field=\"IsInvalid\"\r\n                                  header={t(\"PipelineDispatchTransaction_Ignore\")}\r\n                                  renderer={handleCheckBox}\r\n                                ></DataTable.Column>\r\n                              </DataTable>\r\n                            </div>\r\n                          </div>\r\n                        </Accordion.Content>\r\n                      </Accordion>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                      <Accordion>\r\n                        <Accordion.Content\r\n                          className=\"attributeAccordian\"\r\n                          title={t(\"PipelineDispatchDetails_TankTransactionSummary\")}\r\n                        >\r\n                          <div className=\"row marginRightZero tableScroll\">\r\n                            <div className=\"col-12 detailsTable\">\r\n                              <DataTable\r\n                                data={loadingDetails.Table2}\r\n                              >\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"TankCode\"\r\n                                  field=\"TankCode\"\r\n                                  header={t(\"TankVolume_TankCode\")}\r\n                                  initialWidth=\"150px\"\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"StartGrossVolume\"\r\n                                  field=\"StartGrossVolume\"\r\n                                  header={t(\"TankVolume_StartGrossVolume\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"EndGrossVolume\"\r\n                                  field=\"EndGrossVolume\"\r\n                                  header={t(\"TankVolume_EndGrossVolume\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"StartNetVolume\"\r\n                                  field=\"StartNetVolume\"\r\n                                  header={t(\"TankVolume_StartNetVolume\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"EndNetVolume\"\r\n                                  field=\"EndNetVolume\"\r\n                                  header={t(\"TankVolume_EndNetVolume\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"Density\"\r\n                                  field=\"Density\"\r\n                                  header={t(\"TankVolume_Density\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"Temperature\"\r\n                                  field=\"Temperature\"\r\n                                  header={t(\"TankVolume_Temprature\")}\r\n                                ></DataTable.Column>\r\n                              </DataTable>\r\n                            </div>\r\n                          </div>\r\n                        </Accordion.Content>\r\n                      </Accordion>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                      <Accordion>\r\n                        <Accordion.Content\r\n                          className=\"attributeAccordian\"\r\n                          title={t(\"PipelineDispatchDetails_MeterTransactionSummary\")}\r\n                        >\r\n                          <div className=\"row marginRightZero tableScroll\">\r\n                            <div className=\"col-12 detailsTable\">\r\n                              <DataTable\r\n                                data={loadingDetails.Table1}\r\n                              >\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"MeterCode\"\r\n                                  field=\"MeterCode\"\r\n                                  header={t(\"PipelineReceipt_MeterCode\")}\r\n                                  initialWidth=\"150px\"\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"StartGrossTotalizer\"\r\n                                  field=\"StartGrossTotalizer\"\r\n                                  header={t(\"TankTransaction_StartGrossTotalizer\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"EndGrossTotalizer\"\r\n                                  field=\"EndGrossTotalizer\"\r\n                                  header={t(\"TankMeter_EndGrossTotalizer\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"StartNetTotalizer\"\r\n                                  field=\"StartNetTotalizer\"\r\n                                  header={t(\"TankTransaction_StartNetTotalizer\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"EndNetTotalizer\"\r\n                                  field=\"EndNetTotalizer\"\r\n                                  header={t(\"TankMeter_EndNetTotalizer\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"Density\"\r\n                                  field=\"Density\"\r\n                                  header={t(\"TankMeter_Density\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                  className=\"compColHeight\"\r\n                                  key=\"Temperature\"\r\n                                  field=\"Temperature\"\r\n                                  header={t(\"TankMeter_Temperature\")}\r\n                                ></DataTable.Column>\r\n                              </DataTable>\r\n                            </div>\r\n                          </div>\r\n                        </Accordion.Content>\r\n                      </Accordion>\r\n                    </ErrorBoundary>\r\n                  </ Tab.Pane>\r\n                )\r\n              })}\r\n            </Tab>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { PipelineDispatchDetails } from \"../../UIBase/Details/PipelineDispatchDetails\";\r\n\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { pipelineDispatchValidationDef } from \"../../../JS/ValidationDef\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { emptyPipelineDispatch, emptyPipelineSnapshotInfo } from \"../../../JS/DefaultEntities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Constants from \"./../../../JS/Constants\";\r\nimport * as getUserDetails from \"../../../Redux/Actions/GetUserDetails\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"./../../../Components/ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"./../../../JS/KeyCodes\";\r\nimport { functionGroups, fnPipelineDispatch, fnKPIInformation } from \"../../../JS/FunctionGroups\";\r\nimport lodash from \"lodash\";\r\nimport { pipelineDispatchTankInfoDef } from \"../../../JS/DetailsTableValidationDef\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { pipelineDispatchAttributeEntity, pipelineDispatchStatusTimeAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport TransactionSummaryOperations from \"../Common/TransactionSummaryOperations\";\r\nimport PipelineDispatchManualEntryDetailsComposite from \"../Details/PipelineDispatchManualEntryDetailsComposite\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Modal, Input, Button } from \"@scuf/common\";\r\nimport { toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { PipelineDispatchViewAuditTrailDetails } from \"../../UIBase/Details/PipelineDispatchViewAuditTrailDetails\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiPipelineDispatchDetail } from \"../../../JS/KPIPageName\";\r\nimport dayjs from \"dayjs\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\nclass PipelineDispatchDetailsComposite extends Component {\r\n  state = {\r\n    pipelineDispatch: lodash.cloneDeep(emptyPipelineDispatch),\r\n    modPipelineDispatch: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      pipelineDispatchValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    quantityUOMOptions: [],\r\n    customerOptions: [],\r\n    customerDestinationOptions: {},\r\n    destinationOptions: [],\r\n    pipelineHeaderOptions: [],\r\n    pipelineHeaderMeterOptions: [],\r\n    finishedProductOptions: [],\r\n    tankOptions: [],\r\n    saveEnabled: false,\r\n    selectedCompRow: [],\r\n    activeTab: 0,\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    loadingDetails: {},\r\n    currentDispatchStatus: {},\r\n    shipmentNextOperations: [],\r\n    drawerStatus: false,\r\n    UOMS: {},\r\n    isManualEntry: false,\r\n    isViewAuditTrail: false,\r\n    isMeterRequired: false,\r\n    isTankRequired: true,\r\n    pipelineSnapShotInfo: [],\r\n    commentsPopUp: false,\r\n    remarks: \"\",\r\n    isSubmit: false,\r\n    auditTrailAttributeMetaDataList: [],\r\n    modAuditTrailList: [],\r\n    auditTrailList: [],\r\n    noOfSignificantDigits: \"3\",\r\n    pipelineDispatchKPIList: [],\r\n    showAuthenticationLayout: false,\r\n    tempPipelineDispatch: {},\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.pipelineDispatch.PipelineDispatchCode !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined\r\n      ) {\r\n        this.getAttributes(nextProps.selectedRow);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors, isManualEntry: false, activeTab: 0 });\r\n        // this.getPipelineDispatch(nextProps.selectedRow);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getUoms();\r\n      this.getRefrenceSource();\r\n      this.getSignificantDigits();\r\n      if (!this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n        this.getTank(\"\");\r\n        this.getHeaderLineCode(\"\");\r\n        this.getCustomerDestinations(\r\n          this.props.selectedShareholder,\r\n          null, \"\"\r\n        );\r\n        this.getFinishedProductCodes(this.props.selectedShareholder, \"\");\r\n        //this.getPipelineMeter(this.props.selectedShareholder, \"\")\r\n      }\r\n      this.getAttributes(this.props.selectedRow);\r\n      // this.getPipelineDispatch(this.props.selectedRow);\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getSignificantDigits() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=Common\",\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult.NumberOfSignificantDigits !== undefined &&\r\n              result.EntityResult.NumberOfSignificantDigits !== null) {\r\n              this.setState({\r\n                noOfSignificantDigits: result.EntityResult.NumberOfSignificantDigits,\r\n              });\r\n            }\r\n\r\n          } else {\r\n            console.log(\"Error in getSignificantDigits: \", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"PipelineDispatchDetailsComposite: Error occurred on getSignificantDigits\",\r\n            error\r\n          );\r\n        });\r\n    }\r\n    catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchDetailsComposite:Error occured on geting RefrenceSourceLookUp Value\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getRefrenceSource() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=PipelineDispatch\",\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult.CustodyTransferReferenceSource === \"0\") {\r\n              this.setState({\r\n                isMeterRequired: true,\r\n                isTankRequired: false\r\n              });\r\n            }\r\n            else {\r\n              this.setState({\r\n                isMeterRequired: false,\r\n                isTankRequired: true\r\n              });\r\n            }\r\n\r\n          } else {\r\n            console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"PipelineDispatchDetailsComposite: Error occurred on getLookUpData\",\r\n            error\r\n          );\r\n        });\r\n    }\r\n    catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchDetailsComposite:Error occured on geting RefrenceSourceLookUp Value\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getAttributes(dispatchRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [pipelineDispatchAttributeEntity, pipelineDispatchStatusTimeAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult.PIPELINEDISPATCH),\r\n              auditTrailAttributeMetaDataList: lodash.cloneDeep(result.EntityResult.PIPELINEDISPATCHSTATUSTIME),\r\n              attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(\r\n                result.EntityResult.PIPELINEDISPATCH\r\n              ),\r\n            },\r\n            () => this.getPipelineDispatch(dispatchRow)\r\n          );\r\n        } else {\r\n          console.log(\"Error in getAttributes:\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (attributeMetaDataList.length > 0)\r\n        this.terminalSelectionChange([attributeMetaDataList[0].TerminalCode]);\r\n    } catch (error) {\r\n      console.log(\r\n        \"TrailerDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      let attributesTerminalsList = [];\r\n      var attributeMetaDataList = [];\r\n      var modAttributeMetaDataList = [];\r\n\r\n      attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      var modPipelineDispatch = lodash.cloneDeep(this.state.pipelineDispatch);\r\n\r\n      selectedTerminals.forEach((terminal) => {\r\n        var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n          return selectedAttribute.TerminalCode === terminal;\r\n        });\r\n\r\n        if (existitem === undefined) {\r\n          attributeMetaDataList.forEach(function (attributeMetaData) {\r\n            if (attributeMetaData.TerminalCode === terminal) {\r\n              var Attributevalue = modPipelineDispatch.Attributes.find(\r\n                (trailerAttribute) => {\r\n                  return trailerAttribute.TerminalCode === terminal;\r\n                }\r\n              );\r\n              if (Attributevalue !== undefined) {\r\n                attributeMetaData.attributeMetaDataList.forEach(function (\r\n                  attributeMetaData\r\n                ) {\r\n                  var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                    (x) => {\r\n                      return x.AttributeCode === attributeMetaData.Code;\r\n                    }\r\n                  );\r\n                  if (valueAttribute !== undefined)\r\n                    attributeMetaData.DefaultValue =\r\n                      valueAttribute.AttributeValue;\r\n                });\r\n              }\r\n              attributesTerminalsList.push(attributeMetaData);\r\n            }\r\n          });\r\n        } else {\r\n          attributesTerminalsList.push(existitem);\r\n        }\r\n      });\r\n\r\n      modAttributeMetaDataList = [];\r\n      modAttributeMetaDataList = attributesTerminalsList;\r\n      modAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n        modAttributeMetaDataList\r\n      );\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n          return attributeValidation.TerminalCode === selectedTerminals;\r\n        });\r\n        if (existTerminal === undefined) {\r\n          Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n            (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n          );\r\n        }\r\n      });\r\n      this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TrailerDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      this.setState({\r\n        modAttributeMetaDataList\r\n      })\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TrailerDetailsComposite:Error occured on handleAttributeCellDataEdit\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  fillAttributeDetails(modPipelineDispatch, attributeList) {\r\n    try {\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modPipelineDispatch.Attributes = Utilities.fillAttributeDetails(attributeList);;\r\n\r\n      this.setState({ modPipelineDispatch });\r\n      return modPipelineDispatch;\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchDetailsComposite:Error occured on fillAttributeDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  convertStringtoDecimal(modPipelineDispatch, attributeList) {\r\n    try {\r\n\r\n      modPipelineDispatch = this.fillAttributeDetails(modPipelineDispatch, attributeList);\r\n      return modPipelineDispatch;\r\n    } catch (err) {\r\n      console.log(\"convertStringtoDecimal error Pipeline Dispatch Details\", err);\r\n    }\r\n  }\r\n\r\n  getUoms() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetUOMList,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (\r\n              result.EntityResult !== null &&\r\n              Array.isArray(result.EntityResult.VOLUME)\r\n            ) {\r\n              var quantityUOMOptions = lodash.cloneDeep(this.state.quantityUOMOptions);\r\n              result.EntityResult.VOLUME.forEach((UOM) => {\r\n                quantityUOMOptions.push({\r\n                  text: UOM,\r\n                  value: UOM,\r\n                });\r\n              });\r\n              result.EntityResult.MASS.forEach((UOM) => {\r\n                quantityUOMOptions.push({\r\n                  text: UOM,\r\n                  value: UOM,\r\n                });\r\n              });\r\n              this.setState({ quantityUOMOptions, UOMS: result.EntityResult });\r\n            }\r\n          } else {\r\n            console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error in GetUOMList:\", error);\r\n        });\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in GetUOMList\", error)\r\n    }\r\n  }\r\n\r\n  getFinishedProductCodes(shareholder, terminal) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetFinishedProductCodes +\r\n        \"?ShareholderCode=\" +\r\n        shareholder +\r\n        \"&TerminalCode=\" +\r\n        terminal,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (\r\n              result.EntityResult !== null &&\r\n              Array.isArray(result.EntityResult)\r\n            ) {\r\n              var finishedProductOptions = [];\r\n              result.EntityResult.forEach((product) => {\r\n                finishedProductOptions.push({\r\n                  text: product,\r\n                  value: product,\r\n                });\r\n              });\r\n              this.setState({ finishedProductOptions });\r\n            }\r\n          } else {\r\n            console.log(\"Error in GetFinishedProductCodes:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while GetFinishedProductCodes List:\", error);\r\n        });\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in getting FinishedProduct\")\r\n    }\r\n  }\r\n\r\n  getCustomerDestinations(shareholder, customerCode, terminalCode) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetCustomerDestinations +\r\n        \"?ShareholderCode=\" +\r\n        shareholder +\r\n        \"&TransportationType=\" +\r\n        Constants.TransportationType.PIPELINE + \"&TerminalCode=\" +\r\n        terminalCode,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (Array.isArray(result.EntityResult)) {\r\n              let shareholderCustomers = result.EntityResult.filter(\r\n                (shareholderCust) =>\r\n                  shareholderCust.ShareholderCode === shareholder\r\n              );\r\n              if (shareholderCustomers.length > 0) {\r\n                let customerOptions = []\r\n                let customerDestinationOptions = lodash.cloneDeep(this.state.customerDestinationOptions)\r\n                customerDestinationOptions =\r\n                  shareholderCustomers[0].CustomerDestinationsList;\r\n                for (let key in customerDestinationOptions) {\r\n                  customerOptions.push({\r\n                    text: key,\r\n                    value: key,\r\n                  });\r\n                }\r\n                this.setState({ customerOptions, customerDestinationOptions });\r\n                if (customerCode) {\r\n                  this.setDestinations(customerCode);\r\n                }\r\n              } else {\r\n                console.log(\"no customers identified for shareholder\");\r\n              }\r\n            } else {\r\n              console.log(\"customerdestinations not identified for shareholder\");\r\n            }\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Customer List:\", error);\r\n        });\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in getting CustomerDestination List\", error)\r\n    }\r\n  }\r\n\r\n  setDestinations(customerCode) {\r\n    try {\r\n      // let destinationOptions = lodash.cloneDeep(this.state.destinationOptions);\r\n      let destinationList = [];\r\n      this.state.customerDestinationOptions[customerCode].forEach(\r\n        (destination) => {\r\n          destinationList.push({ text: destination, value: destination });\r\n        }\r\n      );\r\n      // listOptions.destinations = destinationList;\r\n      this.setState({ destinationOptions: destinationList });\r\n    }\r\n    catch (error) {\r\n      console.log(\"Errro in setting the destination options\")\r\n    }\r\n\r\n  }\r\n\r\n  getHeaderLineCode(terminalCode) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAllPipelineHeadersList + '?Terminal=' + terminalCode,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult !== null && Array.isArray(result.EntityResult)) {\r\n              let pipelineHeaderOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult\r\n              );\r\n              this.setState({ pipelineHeaderOptions });\r\n            }\r\n          } else {\r\n            console.log(\"Error in getHeaderLineCode:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error in getHeaderLineCode:\", error);\r\n        });\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in getting Header Code\", error)\r\n    }\r\n  }\r\n\r\n  getDispatchUpdateStates() {\r\n    var dispatchUpdateStates = [];\r\n    try {\r\n      let dispatchUpdateInfo = this.props.activityInfo.filter((item) => {\r\n        return (\r\n          item.ActivityCode ===\r\n          Constants.ShipmentActivityInfo.PIPELINE_DISPATCH_ENABLE_UPDATE &&\r\n          item.ActionTypeCode === Constants.ActionTypeCode.CHECK\r\n        );\r\n      });\r\n      if (dispatchUpdateInfo !== undefined &&\r\n        dispatchUpdateInfo.length > 0)\r\n        dispatchUpdateStates = dispatchUpdateInfo[0].ShipmentStates;\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in gettingDispatchUpdateStates\", error)\r\n    }\r\n    return dispatchUpdateStates\r\n  }\r\n\r\n  getPipelineDispatch(selectedRow) {\r\n    try {\r\n      let transportationType = Constants.TransportationType.PIPELINE;\r\n      if (selectedRow.Common_Code === undefined) {\r\n        emptyPipelineDispatch.TransactionMode =\r\n          Constants.TransportationType.PIPELINE;\r\n        emptyPipelineDispatch.QuantityUOM = this.props.userDetails.EntityResult.PageAttibutes.DefaultQtyUOMForTransactionUI.PIPELINE;\r\n        emptyPipelineDispatch.Quantity = \"\";\r\n        emptyPipelineDispatch.ScheduledEndTime = new Date();\r\n        emptyPipelineDispatch.ScheduledStartTime = new Date();\r\n        this.setState({\r\n          pipelineDispatch: lodash.cloneDeep(emptyPipelineDispatch),\r\n          modPipelineDispatch: lodash.cloneDeep(emptyPipelineDispatch),\r\n          modAttributeMetaDataList: [],\r\n          isReadyToRender: true,\r\n          pipelineDispatchKPIList: [],\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnPipelineDispatch\r\n          ),\r\n        },\r\n          () => {\r\n            if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n              if (this.props.terminalCodes.length === 1) {\r\n                this.terminalSelectionChange(this.props.terminalCodes);\r\n              } else {\r\n                this.terminalSelectionChange([]);\r\n              }\r\n            } else {\r\n              this.localNodeAttribute([]);\r\n            }\r\n          });\r\n        return;\r\n      }\r\n\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineDispatchCode,\r\n          value: selectedRow.Common_Code,\r\n        },\r\n        {\r\n          key: KeyCodes.transportationType,\r\n          value: transportationType,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.pipelineDispatchCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetPipelineDispatch,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult.PipelineDispatchTanks === null)\r\n              result.EntityResult.PipelineDispatchTanks = []\r\n            else\r\n              result.EntityResult.PipelineDispatchTanks = Utilities.addSeqNumberToListObject(\r\n                result.EntityResult.PipelineDispatchTanks\r\n              );\r\n            if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n              this.getTank(result.EntityResult.TerminalCodes[0]);\r\n              this.getHeaderLineCode(result.EntityResult.TerminalCodes[0]);\r\n              this.getPipelineMeter(result.EntityResult.PipelineHeaderCode, result.EntityResult.TerminalCodes[0]);\r\n              this.getCustomerDestinations(\r\n                this.props.selectedShareholder,\r\n                result.EntityResult.CustomerCode,\r\n                result.EntityResult.TerminalCodes[0]\r\n              );\r\n              this.getFinishedProductCodes(this.props.selectedShareholder, result.EntityResult.TerminalCodes[0]);\r\n            }\r\n            else {\r\n              this.getPipelineMeter(result.EntityResult.PipelineHeaderCode, \"\");\r\n              this.getCustomerDestinations(\r\n                this.props.selectedShareholder,\r\n                result.EntityResult.CustomerCode,\r\n                \"\"\r\n              );\r\n            }\r\n            let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n            this.setState({\r\n              isReadyToRender: true,\r\n              pipelineDispatch: result.EntityResult,\r\n              modPipelineDispatch: { ...result.EntityResult },\r\n              saveEnabled: dispatchUpdateStates.indexOf(result.EntityResult.PipelineDispatchStatus) > -1\r\n                && Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnPipelineDispatch\r\n                ),\r\n            }, () => {\r\n              this.getLoadingDetails(result.EntityResult);\r\n              this.getDispatchStatuses(selectedRow);\r\n              this.getDispatchOperations();\r\n              this.getKPIList(this.props.selectedShareholder, result.EntityResult.PipelineDispatchCode)\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode)\r\n                this.terminalSelectionChange(result.EntityResult.TerminalCodes);\r\n              else {\r\n                this.localNodeAttribute();\r\n              }\r\n            });\r\n          } else {\r\n            this.setState({\r\n              pipelineDispatch: lodash.cloneDeep(emptyPipelineDispatch),\r\n              modPipelineDispatch: lodash.cloneDeep(emptyPipelineDispatch),\r\n              isReadyToRender: true,\r\n            });\r\n            console.log(\"Error in GetPipelineDispatch:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting pipelineDispatch:\", error);\r\n        });\r\n    }\r\n    catch (error) {\r\n      console.log(\"PipelineDispatchDetailsComposite : Error in getting pipeline dispatch\")\r\n    }\r\n  }\r\n  getDispatchOperations() {\r\n    try {\r\n      // const activityInfo = lodash.cloneDeep(this.state.activityInfo)\r\n      const dispatch = lodash.cloneDeep(this.state.pipelineDispatch);\r\n      let shipmentNextOperations = [];\r\n      if (dispatch.PipelineDispatchStatus.toUpperCase() === Constants.PipelineDispatchStatuses.READY ||\r\n        dispatch.PipelineDispatchStatus.toUpperCase() === Constants.PipelineDispatchStatuses.PARTIALLY_COMPLETED) {\r\n        shipmentNextOperations.push(\"Authorize_ManualEntry_Update\")\r\n        shipmentNextOperations.push(\"Authorize_Scada_Update\")\r\n      }\r\n      if (dispatch.PipelineDispatchStatus.toUpperCase() === Constants.PipelineDispatchStatuses.CLOSED) {\r\n        shipmentNextOperations.push(\"PipelineDispatchList_btnTransactionReport\")\r\n        shipmentNextOperations.push(\"PipelineDispatchList_btnViewTransactionReport\")\r\n      }\r\n      shipmentNextOperations.push(\"PipelineDispatch_BtnAuditTrail\");\r\n      if (dispatch.PipelineDispatchStatus.toUpperCase() !== Constants.PipelineDispatchStatuses.CLOSED &&\r\n        dispatch.PipelineDispatchStatus.toUpperCase() !== Constants.PipelineDispatchStatuses.READY) {\r\n        shipmentNextOperations.push(\"PipelineDispatch_BtnManualEntry\");\r\n        shipmentNextOperations.push(\"PipelineDispatch_BtnClosed\");\r\n        shipmentNextOperations.push(\"PipelineDispatch_BtnSubmit\");\r\n      }\r\n      this.setState({ shipmentNextOperations })\r\n    } catch (error) {\r\n      console.log(\"Error in getting Dispatch Current Operations\")\r\n    }\r\n  }\r\n  getDispatchStatuses(selectedRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetPipelineDispatchAllStatuses +\r\n        \"?shareholderCode=\" +\r\n        this.props.selectedShareholder +\r\n        \"&pipelineDispatchCode=\" +\r\n        selectedRow.Common_Code,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          this.setState({\r\n            currentDispatchStatus: result.EntityResult,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting getDispatchStatuses:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  getLoadingDetails(selectedRow) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelinePlanCode,\r\n          value: selectedRow.PipelineDispatchCode,\r\n        },\r\n        {\r\n          key: KeyCodes.pipelinePlanType,\r\n          value: Constants.PipeLineType.DISPATCH,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetPipelineLoadingDetails,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let loadingDetails = response.data.EntityResult\r\n          let pipelineSnapShotInfo = [];\r\n          let remarks = lodash.cloneDeep(this.state.remarks)\r\n          if (loadingDetails !== undefined && loadingDetails !== null) {\r\n            let noOfSignificantDigits = lodash.cloneDeep(this.state.noOfSignificantDigits)\r\n            if (loadingDetails.Table !== null && loadingDetails.Table.length > 0) {\r\n              loadingDetails.Table.forEach((item) => {\r\n                item.RationPending = item.RationPending !== null ? item.RationPending.toString().toUpperCase() === \"FALSE\" ? \"False\" : \"True\" : item.RationPending;\r\n                item.ActualEndTime = item.ActualEndTime !== null ?\r\n                  new Date(item.ActualEndTime).toLocaleDateString() + \" \" + new Date(item.ActualEndTime).toLocaleTimeString() : item.ActualEndTime;\r\n                item.ActualStartTime = item.ActualStartTime !== null ?\r\n                  new Date(item.ActualStartTime).toLocaleDateString() + \" \" + new Date(item.ActualStartTime).toLocaleTimeString() : item.ActualStartTime;\r\n                item.PlannedEndTime = new Date(item.PlannedEndTime).toLocaleDateString() + \" \" + new Date(item.PlannedEndTime).toLocaleTimeString();\r\n                item.PlannedStartTime = new Date(item.PlannedStartTime).toLocaleDateString() + \" \" + new Date(item.PlannedStartTime).toLocaleTimeString();\r\n                pipelineSnapShotInfo.push(item);\r\n                remarks = item.Remarks\r\n              })\r\n            }\r\n            if (loadingDetails.Table2 !== null && loadingDetails.Table2.length > 0) {\r\n              loadingDetails.Table2.forEach((item) => {\r\n                item.EndGrossVolume = Math.round(\r\n                  item.EndGrossVolume,\r\n                  noOfSignificantDigits\r\n                ).toString() + \" \" + item.VolumeUOM\r\n                item.EndNetVolume = Math.round(\r\n                  item.EndNetVolume,\r\n                  noOfSignificantDigits\r\n                ).toString() + \" \" + item.VolumeUOM\r\n                item.StartGrossVolume = Math.round(\r\n                  item.StartGrossVolume,\r\n                  noOfSignificantDigits\r\n                ).toString() + \" \" + item.VolumeUOM\r\n                item.StartNetVolume = Math.round(\r\n                  item.StartNetVolume,\r\n                  noOfSignificantDigits\r\n                ).toString() + \" \" + item.VolumeUOM\r\n                item.Density = item.Density === null\r\n                  || item.Density === 0 ? \"0\" :\r\n                  Math.round(\r\n                    item.Density,\r\n                    noOfSignificantDigits\r\n                  ).toString() + \" \" + item.DensityUOM\r\n                item.Temperature = item.Temperature === null ||\r\n                  item.Temperature === 0 ? \"0\" :\r\n                  Math.round(\r\n                    item.Temperature,\r\n                    noOfSignificantDigits\r\n                  ).toString() + \" \" + item.TemperatureUOM\r\n              })\r\n            }\r\n            if (loadingDetails.Table1 !== null && loadingDetails.Table1.length > 0) {\r\n              loadingDetails.Table1.forEach((item) => {\r\n                item.Density = item.Density === null ||\r\n                  item.Density === 0 ? \"0\" :\r\n                  Math.round(\r\n                    item.Density,\r\n                    noOfSignificantDigits\r\n                  ).toString() + \" \" + item.DensityUOM\r\n                item.Temperature = item.Temperature === null ||\r\n                  item.Temperature === 0 ? \"0\" :\r\n                  Math.round(\r\n                    item.Temperature,\r\n                    noOfSignificantDigits\r\n                  ).toString() + \" \" + item.TemperatureUOM\r\n              })\r\n            }\r\n          }\r\n          if (pipelineSnapShotInfo !== null && pipelineSnapShotInfo !== undefined && pipelineSnapShotInfo.length > 0)\r\n            pipelineSnapShotInfo = Utilities.addSeqNumberToListObject(pipelineSnapShotInfo);\r\n\r\n          this.setState({ loadingDetails, pipelineSnapShotInfo, remarks });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting dispatch compartment details:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in getLoadingDetails\", error)\r\n    }\r\n  }\r\n\r\n\r\n  addUpdatePipelineDispatch = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempPipelineDispatch = lodash.cloneDeep(this.state.tempPipelineDispatch);\r\n\r\n      this.state.pipelineDispatch.PipelineDispatchCode === \"\"\r\n      ? this.createPipelineDispatch(tempPipelineDispatch)\r\n      : this.updatePipelineDispatch(tempPipelineDispatch);\r\n    } catch (error) {\r\n      console.log(\"pipeline Dispatch Composite : Error in addUpdatePipelineDispatch\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n\r\n    //  this.setState({ saveEnabled: false });\r\n      let modPipelineDispatch = this.fillDetails();\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n\r\n      if (this.validateSave(modPipelineDispatch, attributeList)) {\r\n        modPipelineDispatch = this.convertStringtoDecimal(modPipelineDispatch, attributeList);\r\n       \r\n        let showAuthenticationLayout =this.props.userDetails.EntityResult.IsWebPortalUser !== true? true: false;\r\n        \r\n      let tempPipelineDispatch = lodash.cloneDeep(modPipelineDispatch);\r\n      this.setState({ showAuthenticationLayout, tempPipelineDispatch }, () => {\r\n        if (showAuthenticationLayout === false) {\r\n          this.addUpdatePipelineDispatch();\r\n        }\r\n    });\r\n        \r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleOperationClick = (operation) => {\r\n    let dispatch = lodash.cloneDeep(this.state.pipelineDispatch);\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: operation + \"_status\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"PipelineDispatch_DispatchCode\"],\r\n          keyValues: [dispatch.PipelineDispatchCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    switch (operation) {\r\n      case Constants.ViewAllPipelineDispatchOperations.Authorize_ManualEntry_Update:\r\n        this.props.handleAuthorizeToManualEntry(\r\n          dispatch.PipelineDispatchCode,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n              this.getPipelineDispatch(\r\n                { Common_Code: dispatch.PipelineDispatchCode }\r\n              );\r\n            } else {\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n            }\r\n            this.props.onSaved(dispatch, \"update\", notification);\r\n          }\r\n        );\r\n        break;\r\n      case Constants.ViewAllPipelineDispatchOperations.Authorize_Scada_Update:\r\n        this.props.handleAuthorizeToScadaUpdate(\r\n          dispatch.PipelineDispatchCode,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n              this.getPipelineDispatch(\r\n                { Common_Code: dispatch.PipelineDispatchCode }\r\n              );\r\n            } else {\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n            }\r\n            this.props.onSaved(dispatch, \"update\", notification);\r\n          }\r\n        );\r\n        break;\r\n      case Constants.ViewAllPipelineDispatchOperations.PipelineDispatchList_btnTransactionReport:\r\n        this.props.handlePrintTransaction(\r\n          dispatch,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n              this.getPipelineDispatch({ Common_Code: dispatch.PipelineDispatchCode },\r\n                1);\r\n            } else {\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n            }\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          }\r\n        );\r\n        break;\r\n      case Constants.ViewAllPipelineDispatchOperations.PipelineDispatchList_btnViewTransactionReport:\r\n        this.props.handleViewTransaction();\r\n        break;\r\n      case Constants.ViewAllPipelineDispatchOperations.PipelineDispatch_BtnAuditTrail:\r\n        this.props.handleViewAuditTrail(\r\n          dispatch.PipelineDispatchCode,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            ;\r\n            if (result.IsSuccess === true) {\r\n              let modAuditTrailList = lodash.cloneDeep(result.EntityResult);\r\n              let attributeMetaDataList = lodash.cloneDeep(\r\n                this.state.auditTrailAttributeMetaDataList\r\n              );\r\n\r\n              for (let i = 0; i < modAuditTrailList.length; i++) {\r\n\r\n                let dispatchStatus = modAuditTrailList[i].PipelineDispatchStatus.toUpperCase();\r\n                if (dispatchStatus === Constants.PipelineDispatchAuditTrailStatuses.CLOSED) {\r\n                  dispatchStatus = Constants.PipelineDispatchStatus.CLOSED;\r\n                } else if (\r\n                  dispatchStatus === Constants.PipelineDispatchAuditTrailStatuses.AUTHORIZED\r\n                ) {\r\n                  dispatchStatus = Constants.PipelineDispatchStatus.AUTHORIZED;\r\n                } else if (dispatchStatus === Constants.PipelineDispatchAuditTrailStatuses.READY) {\r\n                  dispatchStatus = Constants.PipelineDispatchStatus.READY;\r\n                } else if (\r\n                  dispatchStatus === Constants.PipelineDispatchAuditTrailStatuses.INPROGRESS\r\n                ) {\r\n                  dispatchStatus = Constants.PipelineDispatchStatus.INPROGRESS;\r\n                } else if (\r\n                  dispatchStatus === Constants.PipelineDispatchAuditTrailStatuses.MANUALLY_COMPLETED\r\n                ) {\r\n                  dispatchStatus = Constants.PipelineDispatchStatus.MANUALLY_COMPLETED;\r\n                }\r\n                else if (\r\n                  dispatchStatus === Constants.PipelineDispatchAuditTrailStatuses.INITIATED\r\n                ) {\r\n                  dispatchStatus = Constants.PipelineDispatchStatus.INITIATED;\r\n                }\r\n                else if (\r\n                  dispatchStatus === Constants.PipelineDispatchAuditTrailStatuses.INTERRUPTED\r\n                ) {\r\n                  dispatchStatus = Constants.PipelineDispatchStatus.INTERRUPTED;\r\n                }\r\n                else if (\r\n                  dispatchStatus === Constants.PipelineDispatchAuditTrailStatuses.AUTO_COMPLETED\r\n                ) {\r\n                  dispatchStatus = Constants.PipelineDispatchStatus.AUTO_COMPLETED;\r\n                }\r\n                else if (\r\n                  dispatchStatus === Constants.PipelineDispatchAuditTrailStatuses.PARTIALLY_COMPLETED\r\n                ) {\r\n                  dispatchStatus = Constants.PipelineDispatchStatus.PARTIALLY_COMPLETED;\r\n                }\r\n                else if (\r\n                  dispatchStatus === Constants.PipelineDispatchAuditTrailStatuses.EXCESSIVELY_COMPLETED\r\n                ) {\r\n                  dispatchStatus = Constants.PipelineDispatchStatus.EXCESSIVELY_COMPLETED;\r\n                }\r\n                modAuditTrailList[i].PipelineDispatchStatus = dispatchStatus;\r\n\r\n                modAuditTrailList[i].UpdatedTime =\r\n                  new Date(\r\n                    modAuditTrailList[i].UpdatedTime\r\n                  ).toLocaleDateString() +\r\n                  \" \" +\r\n                  new Date(\r\n                    modAuditTrailList[i].UpdatedTime\r\n                  ).toLocaleTimeString();\r\n              }\r\n\r\n              let auditTrailList = lodash.cloneDeep(result.EntityResult);\r\n              for (let i = 0; i < auditTrailList.length; i++) {\r\n                auditTrailList[i].UpdatedTime =\r\n                  new Date(\r\n                    auditTrailList[i].UpdatedTime\r\n                  ).toLocaleDateString() +\r\n                  \" \" +\r\n                  new Date(\r\n                    auditTrailList[i].UpdatedTime\r\n                  ).toLocaleTimeString();\r\n                if (\r\n                  auditTrailList[i].PipelineDispatchStatus === Constants.PipelineDispatchAuditTrailStatuses.AUTHORIZED\r\n                )\r\n                  auditTrailList[i].PipelineDispatchStatus = Constants.Pipeline_Dispatch_Status.AUTHORIZED\r\n                auditTrailList[i].AttributesforUI =\r\n                  this.formReadonlyCompAttributes(\r\n                    auditTrailList[i].Attributes,\r\n                    attributeMetaDataList\r\n                  );\r\n              }\r\n\r\n              this.setState({\r\n                auditTrailList: auditTrailList,\r\n                modAuditTrailList: modAuditTrailList,\r\n                isViewAuditTrail: true,\r\n              });\r\n              this.getPipelineDispatch({ Common_Code: dispatch.PipelineDispatchCode });\r\n            } else {\r\n              notification.messageType = result.IsSuccess\r\n                ? \"success\"\r\n                : \"critical\";\r\n              notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n              toast(\r\n                <ErrorBoundary>\r\n                  <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                </ErrorBoundary>,\r\n                {\r\n                  autoClose:\r\n                    notification.messageType === \"success\" ? 10000 : false,\r\n                }\r\n              );\r\n            }\r\n          }\r\n        );\r\n        break;\r\n      case Constants.ViewAllPipelineDispatchOperations.PipelineDispatch_BtnManualEntry:\r\n        this.setState({ isManualEntry: true })\r\n        break;\r\n      case Constants.ViewAllPipelineDispatchOperations.PipelineDispatch_BtnClosed:\r\n        this.setState({ commentsPopUp: true, isSubmit: false })\r\n        break;\r\n      case Constants.ViewAllPipelineDispatchOperations.PipelineDispatch_BtnSubmit:\r\n        this.setState({ commentsPopUp: true, isSubmit: true })\r\n        // this.handleSubmit();\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  formReadonlyCompAttributes(attributes, attributeMetaDataList) {\r\n    let compAttributes = [];\r\n    if (\r\n      attributeMetaDataList !== null &&\r\n      attributeMetaDataList !== undefined &&\r\n      attributeMetaDataList.length > 0\r\n    ) {\r\n      attributeMetaDataList.forEach((att) => {\r\n        att.attributeMetaDataList.forEach((attribute) => {\r\n          //if (attribute.TerminalCode)\r\n          compAttributes.push({\r\n            AttributeCode: attribute.Code,\r\n            AttributeName: attribute.DisplayName\r\n              ? attribute.DisplayName\r\n              : attribute.Code,\r\n            AttributeValue: attribute.DefaultValue,\r\n            TerminalCode: attribute.TerminalCode,\r\n            IsMandatory: attribute.IsMandatory,\r\n            DataType: attribute.DataType,\r\n            IsReadonly: attribute.IsReadonly,\r\n            MinValue: attribute.MinValue,\r\n            MaxValue: attribute.MaxValue,\r\n            ValidationFormat: attribute.ValidationFormat,\r\n            compSequenceNo: \"\",\r\n          });\r\n        });\r\n      });\r\n    }\r\n\r\n    if (\r\n      attributes !== null &&\r\n      attributes !== undefined &&\r\n      attributes.length > 0\r\n    ) {\r\n      attributes.forEach((att) => {\r\n        compAttributes.forEach((compAtt) => {\r\n          if (compAtt.TerminalCode === att.TerminalCode) {\r\n            att.ListOfAttributeData.forEach((selAtt) => {\r\n              if (compAtt.AttributeCode === selAtt.AttributeCode)\r\n                compAtt.AttributeValue = selAtt.AttributeValue;\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return compAttributes;\r\n  }\r\n\r\n  handleCellCheck = (data, cellData) => {\r\n    let pipelineSnapShotInfo = lodash.cloneDeep(this.state.pipelineSnapShotInfo);\r\n\r\n    const index = pipelineSnapShotInfo.findIndex((item) => {\r\n      return item.SeqNumber === data.rowData.SeqNumber;\r\n    });\r\n    if (index > -1) {\r\n      pipelineSnapShotInfo[index].IsInvalid = cellData;\r\n    }\r\n\r\n    this.setState({ pipelineSnapShotInfo });\r\n  };\r\n\r\n  CloseDispatch() {\r\n    try {\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"PipelineTransaction_SavedMessage\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"PipelineDispatch_DispatchCode\"],\r\n            keyValues: [this.state.pipelineDispatch.PipelineDispatchCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineDispatchCode,\r\n          value: this.state.pipelineDispatch.PipelineDispatchCode,\r\n        },\r\n        {\r\n          key: \"Remarks\",\r\n          value: this.state.remarks,\r\n        },\r\n\r\n      ];\r\n      let obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.pipelineDispatchCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.ClosePipelineDispatch , \r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n\r\n          if (result.IsSuccess === true) {\r\n            this.getPipelineDispatch({ Common_Code: this.state.pipelineDispatch.PipelineDispatchCode });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            //let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n            // this.setState({\r\n            //   saveEnabled: dispatchUpdateStates.indexOf(result.EntityResult.PipelineDispatchStatus) > -1\r\n            //     && Utilities.isInFunction(\r\n            //       this.props.userDetails.EntityResult.FunctionsList,\r\n            //       functionGroups.modify,\r\n            //       fnPipelineDispatch\r\n            //     )\r\n            // });\r\n            console.log(\"Error in closing the dispatch:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(this.state.pipelineDispatch, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n          this.setState({\r\n            saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineDispatch.PipelineDispatchStatus) > -1\r\n              && Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnPipelineDispatch\r\n              )\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(this.state.pipelineDispatch, \"add\", notification);\r\n        });\r\n    }\r\n    catch (error) {\r\n      console.log(\"PipelineDispatchDetails : Error in closing the dispatch\")\r\n    }\r\n  }\r\n\r\n  handleSubmit() {\r\n    try {\r\n      let pipelineSnapShotInfoList = []\r\n      let rationPending = false;\r\n      let pipelineSnapShotInfo = lodash.cloneDeep(this.state.pipelineSnapShotInfo)\r\n\r\n      pipelineSnapShotInfo.forEach((item) => {\r\n        let modPipelineSnapShotInfo = lodash.cloneDeep(emptyPipelineSnapshotInfo);\r\n\r\n        modPipelineSnapShotInfo.Remarks = this.state.remarks;\r\n\r\n        if (this.state.pipelineDispatch.PipelineDispatchCode !== null &&\r\n          this.state.pipelineDispatch.PipelineDispatchCode !== \"\")\r\n          modPipelineSnapShotInfo.PlanCode = this.state.pipelineDispatch.PipelineDispatchCode\r\n        else\r\n          modPipelineSnapShotInfo.PlanCode = \"\"\r\n\r\n        modPipelineSnapShotInfo.TransactionType = Constants.PipeLineType.DISPATCH;\r\n        modPipelineSnapShotInfo.ShareholderCode = this.props.selectedShareholder;\r\n\r\n\r\n        if (item.PipelineTransactionID !== null && item.PipelineTransactionID !== \"\")\r\n          modPipelineSnapShotInfo.PipelineTransactionID = Utilities.convertStringtoDecimal(item.PipelineTransactionID)\r\n\r\n        if (item.ReceivedGrossQuantity !== null && item.ReceivedGrossQuantity !== \"\")\r\n          modPipelineSnapShotInfo.GrossQuantity = Utilities.convertStringtoDecimal(item.ReceivedGrossQuantity)\r\n\r\n        if (item.ReceivedNetQuantity !== null && item.ReceivedNetQuantity !== \"\")\r\n          modPipelineSnapShotInfo.NetQuantity = Utilities.convertStringtoDecimal(item.ReceivedNetQuantity)\r\n\r\n        if (item.RationPending !== null &&\r\n          item.RationPending.toString().toUpperCase() === \"TRUE\") {\r\n          rationPending = true;\r\n          modPipelineSnapShotInfo.RationPending = true;\r\n        }\r\n\r\n        modPipelineSnapShotInfo.IsInvalid = item.IsInvalid\r\n\r\n        pipelineSnapShotInfoList.push(modPipelineSnapShotInfo);\r\n      })\r\n\r\n      if (pipelineSnapShotInfoList !== null && pipelineSnapShotInfoList.length > 0) {\r\n        if (rationPending)\r\n          this.UpdatePipelineRationedQuantities(pipelineSnapShotInfoList);\r\n        else\r\n          this.MarkInvalidPipelineRecords(pipelineSnapShotInfoList);\r\n      }\r\n\r\n    }\r\n    catch (error) {\r\n      console.log(\"PipelineDispatchDetailsComposite : Error in forming Submit request\", error)\r\n    }\r\n  }\r\n\r\n  UpdatePipelineRationedQuantities(pipelineSnapShotInfoList) {\r\n    try {\r\n\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineDispatchCode,\r\n          value: this.state.pipelineDispatch.PipelineDispatchCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.pipelineDispatchCode,\r\n        KeyCodes: keyCode,\r\n        Entity: pipelineSnapShotInfoList,\r\n      };\r\n\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"PipelineTransaction_SavedMessage\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"PipelineDispatch_DispatchCode\"],\r\n            keyValues: [this.state.pipelineDispatch.PipelineDispatchCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.UpdatePipelineRationedQuantities,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n\r\n          if (result.IsSuccess === true) {\r\n            this.getPipelineDispatch({ Common_Code: this.state.pipelineDispatch.PipelineDispatchCode });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n            this.setState({\r\n              saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineDispatch.PipelineDispatchStatus) > -1\r\n                && Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnPipelineDispatch\r\n                )\r\n            });\r\n            console.log(\"Error in  Update rationed quantities:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(this.state.pipelineDispatch, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n          this.setState({\r\n            saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineDispatch.PipelineDispatchStatus) > -1\r\n              && Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnPipelineDispatch\r\n              )\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(this.state.pipelineDispatch, \"add\", notification);\r\n        });\r\n    }\r\n    catch (error) {\r\n      console.log(\"PipelineDispatchDetailsComposite : Error in UpdatePipelineRationedQuantities\", error)\r\n    }\r\n  }\r\n\r\n  MarkInvalidPipelineRecords(pipelineSnapShotInfoList) {\r\n    try {\r\n\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineDispatchCode,\r\n          value: this.state.pipelineDispatch.PipelineDispatchCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.pipelineDispatchCode,\r\n        KeyCodes: keyCode,\r\n        Entity: pipelineSnapShotInfoList,\r\n      };\r\n\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"PipelineTransaction_SavedMessage\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"PipelineDispatch_DispatchCode\"],\r\n            keyValues: [this.state.pipelineDispatch.PipelineDispatchCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.MarkInvalidPipelineRecords,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n\r\n          if (result.IsSuccess === true) {\r\n            this.getPipelineDispatch({ Common_Code: this.state.pipelineDispatch.PipelineDispatchCode });\r\n          } else {\r\n\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n            this.setState({\r\n              saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineDispatch.PipelineDispatchStatus) > -1\r\n                && Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnPipelineDispatch\r\n                )\r\n            });\r\n\r\n            console.log(\"Error in  Update invalid records:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(this.state.pipelineDispatch, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n          this.setState({\r\n            saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineDispatch.PipelineDispatchStatus) > -1\r\n              && Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnPipelineDispatch\r\n              )\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(this.state.pipelineDispatch, \"add\", notification);\r\n        });\r\n    }\r\n    catch (error) {\r\n      console.log(\"PipelineDispatchDetailsComposite : Error in MarkInvalidPipelineRecords\", error)\r\n    }\r\n  }\r\n\r\n\r\n  onBack = () => {\r\n    let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n    this.setState({\r\n      isManualEntry: false,\r\n      isViewAuditTrail: false,\r\n      // isPlanned: true,\r\n      saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineDispatch.PipelineDispatchStatus) > -1\r\n        && Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.modify,\r\n          fnPipelineDispatch\r\n        ),\r\n      // expandedRows: [],\r\n      // loadingExpandedRows: [],\r\n      drawerStatus: false,\r\n    });\r\n    this.getPipelineDispatch({ Common_Code: this.state.modPipelineDispatch.PipelineDispatchCode });\r\n  };\r\n\r\n  fillDetails() {\r\n    let { modPipelineDispatch } = { ...this.state };\r\n    try {\r\n      if (modPipelineDispatch.Quantity !== null && modPipelineDispatch.Quantity !== \"\")\r\n        modPipelineDispatch.Quantity = Utilities.convertStringtoDecimal(\r\n          modPipelineDispatch.Quantity\r\n        );\r\n      //modPipelineDispatch.ScheduledStartTime.setSeconds(parseInt('00'), parseInt('000'))\r\n      let scheduledTime = dayjs(new Date(modPipelineDispatch.ScheduledStartTime))\r\n        .set(\"second\", 0).set(\"millisecond\", 0).toDate();\r\n\r\n      modPipelineDispatch.ScheduledStartTime = scheduledTime.toLocaleDateString() +\r\n        \" \" +\r\n        scheduledTime.toLocaleTimeString();\r\n\r\n      modPipelineDispatch.ShareholderCode = this.props.selectedShareholder;\r\n      let tankComps = [];//lodash.cloneDeep(modPipelineDispatch.PipelineDispatchTanks);\r\n      if (Array.isArray(modPipelineDispatch.PipelineDispatchTanks)) {\r\n        modPipelineDispatch.PipelineDispatchTanks.forEach((item) => {\r\n          if (!(item.TankCode === null || item.TankCode === \"\")\r\n            || !(item.Quantity === null || item.Quantity === \"\")) {\r\n            item.PipelineDispatchCode =\r\n              modPipelineDispatch.PipelineDispatchCode;\r\n            item.QuantityUOM =\r\n              modPipelineDispatch.QuantityUOM;\r\n            item.Quantity =\r\n              Utilities.convertStringtoDecimal(\r\n                item.Quantity\r\n              );\r\n            item.PlannedStartTime = item.PlannedStartTime === null ?\r\n              modPipelineDispatch.ScheduledStartTime : item.PlannedStartTime\r\n            item.PlannedEndTime = item.PlannedEndTime === null ?\r\n              modPipelineDispatch.ScheduledEndTime : item.PlannedEndTime\r\n            tankComps.push(item);\r\n          }\r\n        })\r\n      }\r\n      modPipelineDispatch.PipelineDispatchTanks = tankComps;\r\n      modPipelineDispatch.PipelineDispatchTankInfo = tankComps;\r\n    } catch (error) {\r\n      console.log(\"Error in fillDetails\", error)\r\n    }\r\n    return modPipelineDispatch;\r\n  }\r\n\r\n  validateSave(modPipelineDispatch, attributeList) {\r\n    try {\r\n      var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n\r\n      Object.keys(pipelineDispatchValidationDef).forEach(function (key) {\r\n        if (modPipelineDispatch[key] !== undefined) {\r\n          validationErrors[key] = Utilities.validateField(\r\n            pipelineDispatchValidationDef[key],\r\n            modPipelineDispatch[key]\r\n          );\r\n        }\r\n      });\r\n\r\n      if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n        if (modPipelineDispatch.TerminalCodes !== null && modPipelineDispatch.TerminalCodes.length === 0) {\r\n          validationErrors[\"TerminalCodes\"] = \"Terminal_reqTerCode\";\r\n        }\r\n      }\r\n\r\n      if (this.state.isMeterRequired && (modPipelineDispatch.PipelineHeaderMeterCode === \"\" ||\r\n        modPipelineDispatch.PipelineHeaderMeterCode === null ||\r\n        modPipelineDispatch.PipelineHeaderMeterCode === undefined)) {\r\n        validationErrors[\"PipelineHeaderMeterCode\"] = \"PipelineReceiptDetails_MandatoryHeaderMeterCode\";\r\n      }\r\n\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"ShipmentCompDetail_SavedStatus\",\r\n        messageResultDetails: [],\r\n      };\r\n\r\n      if (\r\n        Array.isArray(modPipelineDispatch.PipelineDispatchTanks) &&\r\n        modPipelineDispatch.PipelineDispatchTanks.length > 0\r\n      ) {\r\n        let tankCodeList = [];\r\n        let tankQuantity = 0;\r\n        modPipelineDispatch.PipelineDispatchTanks.forEach((compart) => {\r\n          if (tankCodeList.includes(compart.TankCode)) {\r\n            notification.messageResultDetails.push({\r\n              keyFields: [\r\n                \"PipelineDispatch_DispatchCode\",\r\n                \"PipelineDispatch_TankCode\",\r\n              ],\r\n              keyValues: [modPipelineDispatch.PipelineDispatchCode, compart.TankCode],\r\n              isSuccess: false,\r\n              errorMessage: \"PIPELINEDISPATCH_TANKINFO_DUPLICATE\",\r\n            });\r\n          } else {\r\n            tankCodeList.push(compart.TankCode);\r\n          }\r\n          pipelineDispatchTankInfoDef.forEach((col) => {\r\n            let err = \"\";\r\n            if (col.validator !== undefined) {\r\n              err = Utilities.validateField(col.validator, compart[col.field]);\r\n            }\r\n            if (err !== \"\") {\r\n              notification.messageResultDetails.push({\r\n                keyFields: [\"PipelineDispatch_DispatchCode\", col.displayName],\r\n                keyValues: [modPipelineDispatch.PipelineDispatchCode, compart[col.field]],\r\n                isSuccess: false,\r\n                errorMessage: err,\r\n              });\r\n            }\r\n          });\r\n          tankQuantity += compart.Quantity;\r\n        });\r\n        if (tankQuantity !== modPipelineDispatch.Quantity) {\r\n          notification.messageResultDetails.push({\r\n            keyFields: [\r\n              \"PipelineDispatch_DispatchCode\",\r\n              \"PipelineDispatch_ExpectedQuantity\",\r\n            ],\r\n            keyValues: [modPipelineDispatch.PipelineDispatchCode, modPipelineDispatch.Quantity],\r\n            isSuccess: false,\r\n            errorMessage: \"PIPELINE_TANKPLAN_QUANTITY_INVALID_X\",\r\n          });\r\n        }\r\n      } else if (this.state.isTankRequired) {\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage:\r\n            \"ERRMSG_PIPELINE_CUSTODYREFERENCE_TANKINFO_EMPTY\",\r\n        });\r\n      }\r\n\r\n      var attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n      attributeList.forEach((attribute) => {\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n            attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n              attributeValidation.attributeValidationErrors[\r\n                attributeMetaData.Code\r\n              ] = Utilities.valiateAttributeField(\r\n                attributeMetaData,\r\n                attributeMetaData.DefaultValue\r\n              );\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      this.setState({ validationErrors, attributeValidationErrors });\r\n\r\n      var returnValue = true;\r\n      attributeValidationErrors.forEach((x) => {\r\n        if (returnValue) {\r\n          returnValue = Object.values(x.attributeValidationErrors).every(\r\n            function (value) {\r\n              return value === \"\";\r\n            }\r\n          );\r\n        } else {\r\n          return returnValue;\r\n        }\r\n      });\r\n\r\n      if (returnValue)\r\n        returnValue = Object.values(validationErrors).every(function (value) {\r\n          return value === \"\";\r\n        });\r\n\r\n      if (returnValue) {\r\n        if (notification.messageResultDetails.length > 0) {\r\n          this.props.onSaved(modPipelineDispatch, \"update\", notification);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return returnValue;\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in Validate save\", error)\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n  createPipelineDispatch(modPipelineDispatch) {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineDispatchCode,\r\n          value: modPipelineDispatch.PipelineDispatchCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n        keyDataCode: KeyCodes.pipelineDispatchCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modPipelineDispatch,\r\n      };\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"PipelineShipmentCompDetail_SavedSuccess\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"PipelineDispatch_DispatchCode\"],\r\n            keyValues: [modPipelineDispatch.PipelineDispatchCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.CreatePipelineDispatch,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.getPipelineDispatch({ Common_Code: modPipelineDispatch.PipelineDispatchCode });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n            this.setState({\r\n              saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineDispatch.PipelineDispatchStatus) > -1\r\n                && Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnPipelineDispatch\r\n                ),\r\n            });\r\n            console.log(\"Error in CreatePipelineDispatch:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(modPipelineDispatch, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n          this.setState({\r\n            saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineDispatch.PipelineDispatchStatus) > -1\r\n              && Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnPipelineDispatch\r\n              ),\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(modPipelineDispatch, \"add\", notification);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in Pipeline Create\", error)\r\n    }\r\n  }\r\n\r\n  handleCommentsModal = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.commentsPopUp} size=\"mini\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h3>\r\n                  {t(\"ViewPipelineDispatch_CloseHeader\") +\r\n                    \" : \" +\r\n                    this.state.pipelineDispatch.PipelineDispatchCode}\r\n                </h3>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                <div className=\"col col-lg-12\">\r\n                  <Input\r\n                    fluid\r\n                    value={this.state.remarks}\r\n                    // label={t(\"ViewShipment_Reason\")}\r\n                    reserveSpace={false}\r\n                    onChange={(value) => {\r\n                      this.setState({ remarks: value });\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  if (this.state.remarks === \"\") {\r\n                    let notification = {\r\n                      messageType: \"critical\",\r\n                      message: \"ViewPipelineDispatch_ShipmentClose\",\r\n                      messageResultDetails: [\r\n                        {\r\n                          keyFields: [\"PipelineDispatch_DispatchCode\"],\r\n                          keyValues: [this.state.pipelineDispatch.PipelineDispatchCode],\r\n                          isSuccess: false,\r\n                          errorMessage: \"AdditiveInjectorInfo_RemarkRequired\",\r\n                        },\r\n                      ],\r\n                    };\r\n\r\n                    toast(\r\n                      <ErrorBoundary>\r\n                        <NotifyEvent\r\n                          notificationMessage={notification}\r\n                        ></NotifyEvent>\r\n                      </ErrorBoundary>,\r\n                      {\r\n                        autoClose:\r\n                          notification.messageType === \"success\"\r\n                            ? 10000\r\n                            : false,\r\n                      }\r\n                    );\r\n                  } else\r\n                    this.setState({ commentsPopUp: false }, () => {\r\n                      if (this.state.isSubmit)\r\n                        this.handleSubmit();\r\n                      else\r\n                        this.CloseDispatch();\r\n                    });\r\n                }}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => {\r\n                  this.setState({\r\n                    commentsPopUp: false,\r\n                    remarks: lodash.cloneDeep(this.state.remarks),\r\n                  });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  updatePipelineDispatch(modPipelineDispatch) {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineDispatchCode,\r\n          value: modPipelineDispatch.PipelineDispatchCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n        keyDataCode: KeyCodes.pipelineDispatchCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modPipelineDispatch,\r\n      };\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"PipelineShipmentCompDetail_SavedSuccess\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"PipelineDispatch_DispatchCode\"],\r\n            keyValues: [modPipelineDispatch.PipelineDispatchCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.UpdatePipelineDispatch,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            // this.setState({\r\n            //   pipelineDispatch: lodash.cloneDeep(modPipelineDispatch),\r\n            //   modPipelineDispatch: lodash.cloneDeep(modPipelineDispatch),\r\n            //   saveEnabled: Utilities.isInFunction(\r\n            //     this.props.userDetails.EntityResult.FunctionsList,\r\n            //     functionGroups.modify,\r\n            //     fnPipelineDispatch\r\n            //   ),\r\n            // });\r\n            this.getPipelineDispatch({ Common_Code: modPipelineDispatch.PipelineDispatchCode });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n            this.setState({\r\n              saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineDispatch.PipelineDispatchStatus) > -1\r\n                && Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnPipelineDispatch\r\n                ),\r\n            });\r\n            console.log(\"Error in updatePipelineDispatch:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(modPipelineDispatch, \"update\", notification);\r\n        })\r\n        .catch((error) => {\r\n          let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n          this.setState({\r\n            saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineDispatch.PipelineDispatchStatus) > -1\r\n              && Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnPipelineDispatch\r\n              ),\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(modPipelineDispatch, \"modify\", notification);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in Pipeline Update\", error)\r\n    }\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      const pipelineDispatch = lodash.cloneDeep(this.state.pipelineDispatch);\r\n\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState({\r\n        modPipelineDispatch: { ...pipelineDispatch },\r\n        validationErrors,\r\n        modAttributeMetaDataList: [],\r\n      },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange(pipelineDispatch.TerminalCodes);\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            this.localNodeAttribute();\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(\r\n          attributeMetaDataList\r\n        ),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"handleAttributeValidationError:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modPipelineDispatch = lodash.cloneDeep(\r\n        this.state.modPipelineDispatch\r\n      );\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n\r\n      modPipelineDispatch[propertyName] = data;\r\n      if (propertyName === \"CustomerCode\") {\r\n        this.setDestinations(data);\r\n        if (\r\n          this.state.customerDestinationOptions[data].length === 1\r\n        ) {\r\n          modPipelineDispatch.DestinationCode =\r\n            this.state.customerDestinationOptions[data][0];\r\n          validationErrors.DestinationCode = \"\";\r\n        } else {\r\n          modPipelineDispatch.DestinationCode = \"\";\r\n        }\r\n      }\r\n      this.setState({ modPipelineDispatch });\r\n      if (pipelineDispatchValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          pipelineDispatchValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleRowSelectionChange = (e) => {\r\n    this.setState({ selectedCompRow: e });\r\n  };\r\n\r\n  handleCellDataEdit = (newVal, cellData) => {\r\n    try {\r\n      let modPipelineDispatch = lodash.cloneDeep(this.state.modPipelineDispatch);\r\n\r\n      modPipelineDispatch.PipelineDispatchTanks[cellData.rowIndex][\r\n        cellData.field\r\n      ] = newVal;\r\n      this.setState({ modPipelineDispatch });\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in handleCellDataEdit\", error)\r\n    }\r\n\r\n  };\r\n  handleDateTextChange = (cellData, value, error) => {\r\n    try {\r\n      // var validationErrors = { ...this.state.validationErrors };\r\n      var modPipelineDispatch = lodash.cloneDeep(this.state.modPipelineDispatch);\r\n      // validationErrors[propertyName] = error;\r\n      let index = modPipelineDispatch.PipelineDispatchTanks.findIndex((item) => {\r\n        return item.sequenceNo === cellData.rowData.sequenceNo\r\n      }\r\n      )\r\n      if (index >= 0) {\r\n        if (value === \"\")\r\n          modPipelineDispatch.PipelineDispatchTanks[index][cellData.field] = null;\r\n        else\r\n          modPipelineDispatch.PipelineDispatchTanks[index][cellData.field] = value;\r\n        this.setState({ modPipelineDispatch });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"Error in DateTextChange : Error occured on handleDateTextChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleAddCompartment = () => {\r\n    try {\r\n      if (!this.props.userDetails.EntityResult.IsArchived) {\r\n        try {\r\n          let modPipelineDispatch = lodash.cloneDeep(\r\n            this.state.modPipelineDispatch\r\n          );\r\n          let newComp = {\r\n            PipelineDispatchCode: \"\",\r\n            TankCode: \"\",\r\n            PipelineTankMeterCode: null,\r\n            Quantity: 0,\r\n            QuantityUOM: \"\",\r\n            PlannedStartTime: null,//todo\r\n            PlannedEndTime: null,//todo\r\n            SeqNumber: Utilities.getMaxSeqNumberfromListObject(modPipelineDispatch.PipelineDispatchTanks),\r\n          };\r\n          modPipelineDispatch.PipelineDispatchTanks.push(newComp);\r\n\r\n          this.setState({\r\n            modPipelineDispatch,\r\n            selectedCompRow: [],\r\n          });\r\n        } catch (error) {\r\n          console.log(\r\n            \"PipelineDispatchDetailsComposite:Error occured on handleAddCompartment\",\r\n            error\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"PipelineDispatchDetailsComposite: Error in Add Compartment\")\r\n    }\r\n  };\r\n\r\n  handleDeleteCompartment = () => {\r\n    try {\r\n      if (!this.props.userDetails.EntityResult.IsArchived) {\r\n        try {\r\n          if (\r\n            this.state.selectedCompRow != null &&\r\n            this.state.selectedCompRow.length > 0\r\n          ) {\r\n            if (\r\n              this.state.modPipelineDispatch.PipelineDispatchTanks.length > 0\r\n            ) {\r\n              let modPipelineDispatch = lodash.cloneDeep(\r\n                this.state.modPipelineDispatch\r\n              );\r\n\r\n              this.state.selectedCompRow.forEach((obj, index) => {\r\n                modPipelineDispatch.PipelineDispatchTanks =\r\n                  modPipelineDispatch.PipelineDispatchTanks.filter(\r\n                    (com, cindex) => {\r\n                      return com.SeqNumber !== obj.SeqNumber;\r\n                    }\r\n                  );\r\n              });\r\n\r\n              this.setState({\r\n                modPipelineDispatch,\r\n                selectedCompRow: []\r\n              });\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.log(\r\n            \"PipelineDispatchDetailsComposite:Error occured on handleDeleteCompartment\",\r\n            error\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"PipelineDispatchDetailsComposite: Error in Delete Compartment\")\r\n    }\r\n  };\r\n\r\n  handlePipelineHeaderChange = (data) => {\r\n    try {\r\n      const modPipelineDispatch = lodash.cloneDeep(\r\n        this.state.modPipelineDispatch\r\n      );\r\n\r\n      modPipelineDispatch[\"PipelineHeaderCode\"] = data;\r\n      let validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      validationErrors.PipelineHeaderCode = \"\"\r\n      this.setState({ modPipelineDispatch, validationErrors },\r\n        () => this.getPipelineMeter(data, modPipelineDispatch.TerminalCodes[0]));\r\n\r\n    } catch (error) {\r\n      console.log(\"PipelineDispatchDetailsComposite:Error occured on handlePipelineHeaderChange\", error);\r\n    }\r\n  }\r\n\r\n  handleTerminalChange = (data) => {\r\n    try {\r\n      const modPipelineDispatch = lodash.cloneDeep(\r\n        this.state.modPipelineDispatch\r\n      );\r\n      if (data === null) {\r\n        modPipelineDispatch[\"TerminalCodes\"] = [];\r\n      } else {\r\n        modPipelineDispatch[\"TerminalCodes\"][0] = data;\r\n        modPipelineDispatch[\"PipelineHeaderCode\"] = null;\r\n        modPipelineDispatch[\"PipelineHeaderMeterCode\"] = null;\r\n      }\r\n      this.setState({ modPipelineDispatch, pipelineHeaderMeterOptions: [] }, () => {\r\n        this.getTank(data);\r\n        this.getHeaderLineCode(data);\r\n        this.getCustomerDestinations(this.props.selectedShareholder, modPipelineDispatch.CustomerCode, data)\r\n        this.getFinishedProductCodes(this.props.selectedShareholder, data);\r\n        this.terminalSelectionChange([data]);\r\n      });\r\n    } catch (error) {\r\n      console.log(\"PipelineDispatchDetailsComposite:Error occured on handleTerminalChange\", error);\r\n    }\r\n  }\r\n  getPipelineMeter(headerCode, terminalCode) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineHeaderCode,\r\n          value: headerCode,\r\n        },\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value: this.props.userDetails.EntityResult.IsEnterpriseNode ? terminalCode : null,\r\n        }\r\n      ];\r\n      var obj = {\r\n        keyDataCode: KeyCodes.pipelineHeaderCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.GetPipelineHeader,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          let pipelineHeaderMeterOptions = [];\r\n          let modPipelineDispatch = lodash.cloneDeep(this.state.modPipelineDispatch)\r\n          let validationErrors = lodash.cloneDeep(this.state.validationErrors)\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult !== null &&\r\n              result.EntityResult.AssociatedMeterCodes !== null &&\r\n              Array.isArray(result.EntityResult.AssociatedMeterCodes)) {\r\n              pipelineHeaderMeterOptions = result.EntityResult.AssociatedMeterCodes;\r\n              if (this.state.isMeterRequired &&\r\n                result.EntityResult.AssociatedMeterCodes.length === 1 &&\r\n                (modPipelineDispatch.PipelineHeaderCode !== \"\" &&\r\n                  modPipelineDispatch.PipelineHeaderCode !== null &&\r\n                  modPipelineDispatch.PipelineHeaderCode !== undefined)) {\r\n                modPipelineDispatch.PipelineHeaderMeterCode\r\n                  = result.EntityResult.AssociatedMeterCodes[0]\r\n                validationErrors.PipelineHeaderMeterCode = \"\";\r\n              }\r\n            }\r\n          }\r\n          this.setState({ pipelineHeaderMeterOptions, validationErrors, modPipelineDispatch });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getPipelineMeter:\", error);\r\n        });\r\n\r\n    } catch (error) {\r\n      console.log(\"Error while getPipelineMeter:\", error);\r\n    }\r\n  }\r\n\r\n  getTank(terminal) {\r\n    try {\r\n      var Shareholder = this.props.userDetails.EntityResult.PrimaryShareholder;\r\n      axios(\r\n        RestAPIs.GetTankListForRole + \"?ShareholderCode=\" + Shareholder,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            var tankCodeOptions = [];\r\n            var tanks = result.EntityResult.Table;\r\n            if (tanks !== null && Array.isArray(tanks)) {\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                tanks = tanks.filter((tank) => {\r\n                  return tank.TerminalCode === terminal;\r\n                });\r\n                for (let i = 0; i < tanks.length; i++) {\r\n                  tankCodeOptions.push(tanks[i].Common_Code);\r\n                }\r\n              }\r\n              else {\r\n                for (let i = 0; i < tanks.length; i++) {\r\n                  tankCodeOptions.push(tanks[i].Common_Code);\r\n                }\r\n              }\r\n            }\r\n\r\n            if (tankCodeOptions !== null && Array.isArray(tankCodeOptions)) {\r\n              let tankOptions = Utilities.transferListtoOptions(\r\n                tankCodeOptions\r\n              );\r\n              this.setState({ tankOptions });\r\n            }\r\n          } else {\r\n            console.log(\"Error in getTankList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error in getTankList:\", error);\r\n        });\r\n    }\r\n    catch (error) {\r\n\r\n    }\r\n  }\r\n\r\n  handleTabChange = (activeIndex) => {\r\n    try {\r\n      this.setState({ activeTab: activeIndex, expandedRows: [] });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchDetailsComposite: Error occurred on handleTabChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleDrawer = () => {\r\n    var drawerStatus = lodash.cloneDeep(this.state.drawerStatus);\r\n    this.setState({\r\n      drawerStatus: !drawerStatus,\r\n    });\r\n  };\r\n  //Get KPI for PipelineDispatchList\r\n  getKPIList(shareholder, dispatchCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    )\r\n    if (KPIView === true) {\r\n\r\n      let objKPIRequestData = {\r\n        PageName: kpiPipelineDispatchDetail,\r\n        TransportationType: Constants.TransportationType.PIPELINE,\r\n        InputParameters: [{ key: \"ShareholderCode\", value: shareholder }, { key: \"ShipmentCode\", value: dispatchCode }],\r\n      };\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({ pipelineDispatchKPIList: result.EntityResult.ListKPIDetails });\r\n          } else {\r\n            this.setState({ pipelineDispatchKPIList: [] });\r\n            console.log(\"Error in pipeline KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting PipelineDispatch KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const listOptions = {\r\n      quantityUOM: this.state.quantityUOMOptions,\r\n      pipelineHeaderOptions: this.state.pipelineHeaderOptions,\r\n      pipelineHeaderMeterOptions: this.state.pipelineHeaderMeterOptions,\r\n      tankCodeOptions: this.state.tankOptions,\r\n      terminalCodes: this.props.terminalCodes,\r\n      customerOptions: this.state.customerOptions,\r\n      destinationOptions: this.state.destinationOptions,\r\n      finishedProductOptions: this.state.finishedProductOptions,\r\n    }\r\n\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"PipelineDispatch_LastUpdatedTime\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modPipelineDispatch.LastUpdatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modPipelineDispatch.LastUpdatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"PipelineDispatch_CreatedTime\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modPipelineDispatch.CreatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modPipelineDispatch.CreatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"PipelineDispatch_LastUpdatedBy\",\r\n        fieldValue: this.state.modPipelineDispatch.LastUpdatedBy\r\n      },\r\n    ];\r\n\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <ErrorBoundary>\r\n              <TMDetailsHeader\r\n                entityCode={\r\n                  this.state.isManualEntry\r\n                    ? this.state.pipelineDispatch.PipelineDispatchCode +\r\n                    \" - \" +\r\n                    t(\"LoadingDetailsEntry_Title\")\r\n                    : this.state.pipelineDispatch.PipelineDispatchCode\r\n                }\r\n                newEntityName=\"PipelineDispatch_NewDispatch\"\r\n                popUpContents={popUpContents}\r\n              ></TMDetailsHeader>\r\n            </ErrorBoundary>\r\n          )}\r\n        </TranslationConsumer>\r\n        {this.state.isManualEntry ? (\r\n          <div>\r\n            <ErrorBoundary>\r\n              <PipelineDispatchManualEntryDetailsComposite\r\n                pipelineDispatch={this.state.modPipelineDispatch}\r\n                handleBack={this.onBack}\r\n                selectedShareholder={this.props.selectedShareholder}\r\n                UOMS={this.state.UOMS}\r\n                isMeterRequired={this.state.isMeterRequired}\r\n                isTankRequired={this.state.isTankRequired}\r\n                pipelineHeaderMeterOptions={this.state.pipelineHeaderMeterOptions}\r\n              ></PipelineDispatchManualEntryDetailsComposite>\r\n            </ErrorBoundary>\r\n          </div>\r\n        ) : this.state.isViewAuditTrail ? (\r\n          <ErrorBoundary>\r\n            <PipelineDispatchViewAuditTrailDetails\r\n              DispatchCode={this.state.pipelineDispatch.PipelineDispatchCode}\r\n              auditTrailList={this.state.auditTrailList}\r\n              modAuditTrailList={this.state.modAuditTrailList}\r\n              Attributes={\r\n                this.state.auditTrailList !== undefined &&\r\n                  this.state.auditTrailList.length > 0\r\n                  ? this.state.auditTrailList[0].AttributesforUI\r\n                  : []\r\n              }\r\n              handleBack={this.onBack}\r\n            ></PipelineDispatchViewAuditTrailDetails>\r\n          </ErrorBoundary>\r\n        ) : (\r\n          <div>\r\n            <TMDetailsKPILayout KPIList={this.state.pipelineDispatchKPIList}> </TMDetailsKPILayout>\r\n            <div\r\n              className={\r\n                this.state.pipelineDispatch.PipelineDispatchCode !== \"\" //&& this.props.shipmentSource === undefined\r\n                  ? !this.state.drawerStatus\r\n                    ? \"showShipmentStatusRightPane\"\r\n                    : \"drawerClose\"\r\n                  : \"\"\r\n              }\r\n            >\r\n              <ErrorBoundary>\r\n                <PipelineDispatchDetails\r\n                  pipelineDispatch={this.state.pipelineDispatch}\r\n                  modPipelineDispatch={this.state.modPipelineDispatch}\r\n                  validationErrors={this.state.validationErrors}\r\n                  selectedCompRow={this.state.selectedCompRow}\r\n                  listOptions={listOptions}\r\n                  onFieldChange={this.handleChange}\r\n                  handleRowSelectionChange={this.handleRowSelectionChange}\r\n                  handleCellDataEdit={this.handleCellDataEdit}\r\n                  handleAddCompartment={this.handleAddCompartment}\r\n                  handleDeleteCompartment={this.handleDeleteCompartment}\r\n                  handlePipelineHeaderChange={this.handlePipelineHeaderChange}\r\n                  isEnterpriseNode={\r\n                    this.props.userDetails.EntityResult.IsEnterpriseNode\r\n                  }\r\n                  handleTerminalChange={this.handleTerminalChange}\r\n                  activeTab={this.state.activeTab}\r\n                  onTabChange={this.handleTabChange}\r\n                  loadingDetailsTab={this.state.pipelineDispatch.PipelineDispatchCode !== \"\" &&\r\n                    this.state.loadingDetails !== undefined && this.state.loadingDetails !== null ? [\"\"] : []}\r\n                  modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n                  attributeValidationErrors={\r\n                    this.state.attributeValidationErrors\r\n                  }\r\n                  onAttributeDataChange={this.handleAttributeDataChange}\r\n                  loadingDetails={this.state.loadingDetails}\r\n                  isMeterRequired={this.state.isMeterRequired}\r\n                  isTankRequired={this.state.isTankRequired}\r\n                  pipelineSnapShotInfo={this.state.pipelineSnapShotInfo}\r\n                  handleCellCheck={this.handleCellCheck}\r\n                  onDateTextChange={this.handleDateTextChange}\r\n                ></PipelineDispatchDetails>\r\n              </ErrorBoundary>\r\n              <ErrorBoundary>\r\n                <TMDetailsUserActions\r\n                  handleBack={this.props.onBack}\r\n                  handleSave={this.handleSave}\r\n                  handleReset={this.handleReset}\r\n                  saveEnabled={this.state.saveEnabled}\r\n                ></TMDetailsUserActions>\r\n              </ErrorBoundary>\r\n\r\n              {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.pipelineDispatch.PipelineDispatchCode  === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnPipelineDispatch}\r\n            handleOperation={this.addUpdatePipelineDispatch}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n\r\n            </div>\r\n            {\r\n              this.state.pipelineDispatch.PipelineDispatchCode !== \"\" ? (\r\n                <div\r\n                  className={\r\n                    this.state.drawerStatus ? \"marineStatusLeftPane\" : \"\"\r\n                  }\r\n                >\r\n                  <TransactionSummaryOperations\r\n                    title={\"ViewAllPipeline_Details\"}\r\n                    selectedItem={[\r\n                      { Common_Code: this.state.pipelineDispatch.PipelineDispatchCode },\r\n                    ]}\r\n                    shipmentNextOperations={this.state.shipmentNextOperations}\r\n                    handleOperationButtonClick={this.handleOperationClick}\r\n                    currentStatuses={this.state.currentDispatchStatus}\r\n                    unAllowedOperations={[\r\n                      \"Authorize_ManualEntry_Update\",\r\n                      \"Authorize_Scada_Update\",\r\n                      \"PipelineDispatch_BtnManualEntry\",\r\n                      \"PipelineDispatch_BtnClosed\",\r\n                      \"PipelineDispatch_BtnSubmit\"\r\n                    ]}\r\n                    webPortalAllowedOperations={[\r\n                      \"PipelineDispatchList_btnViewTransactionReport\",\r\n                      \"PipelineDispatch_BtnAuditTrail\"\r\n                    ]}\r\n                    isDetails={true}\r\n                    isEnterpriseNode={\r\n                      this.props.userDetails.EntityResult.IsEnterpriseNode\r\n                    }\r\n                    isWebPortalUser={\r\n                      this.props.userDetails.EntityResult.IsWebPortalUser\r\n                    }\r\n                    handleDrawer={this.handleDrawer}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )\r\n            }\r\n          </div >\r\n        )}\r\n        {this.state.commentsPopUp ? this.handleCommentsModal() : null}\r\n\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    userActions: bindActionCreators(getUserDetails, dispatch),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PipelineDispatchDetailsComposite);\r\n\r\nPipelineDispatchDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Button, Modal, Icon, Checkbox } from \"@scuf/common\";\r\nimport { getKeyByValue } from \"../../../JS/Utilities\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport * as wjChart from \"@grapecity/wijmo.react.chart\";\r\nimport * as wjcCore from \"@grapecity/wijmo\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nwjcCore.setLicenseKey(Constants.wizmoKey);\r\n\r\nPipelineDispatchViewAuditTrailDetails.propTypes = {\r\n    auditTrailList: PropTypes.array.isRequired,\r\n    handleBack: PropTypes.func.isRequired,\r\n    DispatchCode: PropTypes.string,\r\n    modAuditTrailList: PropTypes.array.isRequired,\r\n    Attributes: PropTypes.array.isRequired,\r\n};\r\n\r\nPipelineDispatchViewAuditTrailDetails.defaultProps = {};\r\n\r\nexport function PipelineDispatchViewAuditTrailDetails({\r\n    DispatchCode,\r\n    auditTrailList,\r\n    handleBack,\r\n    modAuditTrailList,\r\n    Attributes,\r\n}) {\r\n    const [modelOpen, setModelOpen] = useState(false);\r\n\r\n    const handleAttributeType = (data) => {\r\n        const attribute = data.rowData.AttributesforUI.filter(\r\n            (att) => att.AttributeName === data.name\r\n        )[0];\r\n\r\n        return attribute.DataType.toLowerCase() ===\r\n            Constants.DataType.STRING.toLowerCase() ||\r\n            attribute.DataType.toLowerCase() ===\r\n            Constants.DataType.INT.toLowerCase() ||\r\n            attribute.DataType.toLowerCase() ===\r\n            Constants.DataType.LONG.toLowerCase() ||\r\n            attribute.DataType.toLowerCase() ===\r\n            Constants.DataType.FLOAT.toLowerCase() ? (\r\n            <label>{attribute.AttributeValue}</label>\r\n        ) : attribute.DataType.toLowerCase() ===\r\n            Constants.DataType.BOOL.toLowerCase() ? (\r\n            <Checkbox\r\n                checked={\r\n                    attribute.AttributeValue.toString().toLowerCase() === \"true\"\r\n                        ? true\r\n                        : false\r\n                }\r\n                disabled={true}\r\n            ></Checkbox>\r\n        ) : (\r\n            <label>{new Date(attribute.AttributeValue).toLocaleDateString()}</label>\r\n        );\r\n    };\r\n\r\n    const localiseStatus = (data) => {\r\n        return (\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <label>\r\n                        {t(data.rowData.PipelineDispatchStatus)}\r\n                    </label>)}\r\n            </TranslationConsumer>\r\n        )\r\n    }\r\n\r\n    const formatter = (engine, label) => {\r\n        try {\r\n            label.cls = null;\r\n            engine.fontSize = \"10px\";\r\n            label.text = getKeyByValue(\r\n                Constants.PipelineDispatchStatus,\r\n                label.val\r\n            );\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in formatter\", error)\r\n        }\r\n        return label;\r\n    };\r\n\r\n\r\n\r\n    function displayTMModalforPrintConfirm() {\r\n        return (\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <Modal open={modelOpen} className=\"marineModalPrint\">\r\n                        <Modal.Content>\r\n                            <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                                <div className=\"col col-lg-8\">\r\n                                    <h3>\r\n                                        {t(\"Transaction_AuditTrail_Heading\") +\r\n                                            \" : \" +\r\n                                            DispatchCode}\r\n                                    </h3>\r\n                                </div>\r\n                                <div className=\"col col-lg-4\" style={{ textAlign: \"right\" }}>\r\n                                    <div\r\n                                        onClick={() => {\r\n                                            setModelOpen(false);\r\n                                        }}\r\n                                    >\r\n                                        <Icon root=\"common\" name=\"close\" />\r\n                                    </div>\r\n                                    {/* <Button\r\n                                        type=\"primary\"\r\n                                        size=\"small\"\r\n                                        content={t(\"MarineEOD_Close\")}\r\n                                        onClick={() => {\r\n                                            setModelOpen(false);\r\n                                        }}\r\n                                    /> */}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-10 container-fluid\">\r\n                                <wjChart.FlexChart\r\n                                    itemsSource={modAuditTrailList}\r\n                                    chartType=\"Line\"\r\n                                    bindingX=\"UpdatedTime\"\r\n                                    palette={[\"blue\"]}\r\n                                    style={{\r\n                                        width: \"100%\",\r\n                                        height: \"550px\",\r\n                                    }}\r\n                                    plotMargin=\"50 0 100 150 \"\r\n                                // style={{ width: \"100%\", height: \"450px\" }}\r\n                                >\r\n                                    <wjChart.FlexChartLegend position=\"Bottom\"></wjChart.FlexChartLegend>\r\n                                    <wjChart.FlexChartAxis\r\n                                        wjProperty=\"axisY\"\r\n                                        majorUnit={1}\r\n                                        max={9}\r\n                                        min={0}\r\n                                        itemFormatter={formatter}\r\n                                        axisLine={true}\r\n                                    ></wjChart.FlexChartAxis>\r\n                                    <wjChart.FlexChartSeries\r\n                                        binding=\"PipelineDispatchStatus\"\r\n                                        name={t(\"PipelineDispatch_DispatchStatus\")}\r\n                                    ></wjChart.FlexChartSeries>\r\n                                </wjChart.FlexChart>\r\n                            </div>\r\n                            <div className=\"col-12 detailsTable\">\r\n                                <DataTable data={auditTrailList}>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"PipelineDispatchStatus\"\r\n                                        field=\"PipelineDispatchStatus\"\r\n                                        header={t(\"PipelineDispatch_DispatchStatus\")}\r\n                                        editable={false}\r\n                                        editFieldType=\"text\"\r\n                                        renderer={(cellData) => localiseStatus(cellData)}\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"UpdatedTime\"\r\n                                        field=\"UpdatedTime\"\r\n                                        header={t(\"ViewAuditTrail_UpdatedTime\")}\r\n                                        editable={false}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    {Attributes.map((att) => {\r\n                                        return (\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                header={t(att.AttributeName)}\r\n                                                editable={false}\r\n                                                renderer={handleAttributeType}\r\n                                            ></DataTable.Column>\r\n                                        );\r\n                                    })}\r\n                                </DataTable>\r\n                            </div>\r\n                            <Modal.Footer>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    size=\"small\"\r\n                                    content={t(\"ViewAuditTrail_Print\")}\r\n                                    onClick={() => {\r\n                                        let el =\r\n                                            window.document.getElementById(\"printTable\").innerHTML;\r\n                                        const iframe = window.document.createElement(\"IFRAME\");\r\n                                        let doc = null;\r\n                                        window.document.body.appendChild(iframe);\r\n                                        doc = iframe.contentWindow.document;\r\n                                        const str1 = el.substring(0, el.indexOf(\"<table\") + 6);\r\n                                        const str2 = el.substring(\r\n                                            el.indexOf(\"<table\") + 6,\r\n                                            el.length\r\n                                        );\r\n                                        el = str1 + ' border=\"1\" cellspacing=\"1\"' + str2;\r\n\r\n                                        doc.write(el);\r\n                                        doc.close();\r\n                                        iframe.contentWindow.focus();\r\n                                        iframe.contentWindow.print();\r\n                                        setTimeout(() => {\r\n                                            window.document.body.removeChild(iframe);\r\n                                        }, 2000);\r\n                                    }}\r\n                                />\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    size=\"small\"\r\n                                    content={t(\"MarineEOD_Close\")}\r\n                                    onClick={() => {\r\n                                        setModelOpen(false);\r\n                                    }}\r\n                                />\r\n                            </Modal.Footer>\r\n                        </Modal.Content>\r\n                    </Modal>\r\n                )}\r\n            </TranslationConsumer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <div>\r\n                        <div className=\"detailsContainer\">\r\n                            <div id=\"printTable\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        <h3>\r\n                                            {t(\"Transaction_AuditTrail_Heading\") +\r\n                                                \" : \" +\r\n                                                DispatchCode}\r\n                                        </h3>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row marginRightZero tableScroll\">\r\n                                    <div className=\"col-12 container-fluid\">\r\n                                        <wjChart.FlexChart\r\n                                            itemsSource={modAuditTrailList}\r\n                                            chartType=\"Line\"\r\n                                            bindingX=\"UpdatedTime\"\r\n                                            palette={[\"red\"]}\r\n                                            style={{\r\n                                                width: \"100%\",\r\n                                                minWidth: \"1000px\",\r\n                                                height: \"550px\",\r\n                                            }}\r\n                                            plotMargin=\"50 10 120 150 \"\r\n                                        >\r\n                                            <wjChart.FlexChartLegend position=\"Bottom\"></wjChart.FlexChartLegend>\r\n                                            <wjChart.FlexChartAxis\r\n                                                wjProperty=\"axisY\"\r\n                                                majorUnit={1}\r\n                                                max={9}\r\n                                                min={0}\r\n                                                itemFormatter={formatter}\r\n                                                axisLine={true}\r\n                                            ></wjChart.FlexChartAxis>\r\n                                            <wjChart.FlexChartSeries\r\n                                                binding=\"PipelineDispatchStatus\"\r\n                                                name={t(\"PipelineDispatch_DispatchStatus\")}\r\n                                            ></wjChart.FlexChartSeries>\r\n                                        </wjChart.FlexChart>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row marginRightZero tableScroll\">\r\n                                    <div className=\"col-12 detailsTable\">\r\n                                        <DataTable data={auditTrailList} scrollable={true}>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                key=\"PipelineDispatchStatus\"\r\n                                                field=\"PipelineDispatchStatus\"\r\n                                                header={t(\"PipelineDispatch_DispatchStatus\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                                renderer={(cellData) => localiseStatus(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                key=\"UpdatedTime\"\r\n                                                field=\"UpdatedTime\"\r\n                                                header={t(\"ViewAuditTrail_UpdatedTime\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            {Attributes.map((att) => {\r\n                                                return (\r\n                                                    <DataTable.Column\r\n                                                        className=\"compColHeight colminWidth\"\r\n                                                        header={t(att.AttributeName)}\r\n                                                        editable={false}\r\n                                                        renderer={handleAttributeType}\r\n                                                    ></DataTable.Column>\r\n                                                );\r\n                                            })}\r\n                                        </DataTable>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 col-sm-6 col-lg-8\">\r\n                                    <Button\r\n                                        className=\"backButton\"\r\n                                        onClick={handleBack}\r\n                                        content={t(\"Back\")}\r\n                                    ></Button>\r\n                                </div>\r\n                                <div\r\n                                    className=\"col-12 col-sm-6 col-lg-4\"\r\n                                    style={{ textAlign: \"right\" }}\r\n                                >\r\n                                    <Button\r\n                                        className=\"printButton\"\r\n                                        onClick={() => {\r\n                                            setModelOpen(true);\r\n                                        }}\r\n                                        content={t(\"ViewAuditTrail_PrintAuditTrail\")}\r\n                                    ></Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </TranslationConsumer>\r\n            {displayTMModalforPrintConfirm()}\r\n        </div>\r\n    );\r\n}\r\n"],"names":["PipelineDispatchDetails","_ref","pipelineDispatch","modPipelineDispatch","validationErrors","attributeValidationErrors","listOptions","selectedCompRow","onFieldChange","handleRowSelectionChange","handleCellDataEdit","handleAddCompartment","handleDeleteCompartment","isEnterpriseNode","handleTerminalChange","handlePipelineHeaderChange","onTabChange","activeTab","loadingDetailsTab","modAttributeMetaDataList","onAttributeDataChange","loadingDetails","pipelineSnapShotInfo","isMeterRequired","isTankRequired","handleCellCheck","onDateTextChange","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","handleCustomEditTextBox","cellData","_jsx","Input","fluid","value","PipelineDispatchTanks","rowIndex","field","onChange","reserveSpace","handleCustomEditDateSelect","DatePicker","Date","type","displayFormat","getCurrentDateFormat","indicator","onTextChange","error","dateDisplayValues","toLocaleDateString","toLocaleTimeString","handleCheckBox","data","Checkbox","className","checked","TranslationConsumer","children","t","_jsxs","PipelineDispatchCode","disabled","label","Select","placeholder","TerminalCodes","length","options","Utilities","terminalCodes","noResultsMessage","CustomerCode","customerOptions","DestinationCode","destinationOptions","PipelineDispatchStatus","PipelineHeaderCode","pipelineHeaderOptions","PipelineHeaderMeterCode","pipelineHeaderMeterOptions","Quantity","ErrorBoundary","QuantityUOM","multiple","quantityUOM","FinishedProductCode","finishedProductOptions","ScheduledStartTime","disablePast","ScheduledEndTime","Remarks","map","attire","Accordion","Content","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","Tab","activeIndex","Pane","onClick","Icon","root","name","size","DataTable","selectionMode","selection","onSelectionChange","Column","header","handleIsRequiredCompartmentCell","editable","editFieldType","customEditRenderer","celldata","handleCustomEditDropDown","dropDownoptions","tankCodeOptions","search","renderer","toLocaleString","decimalDisplayValues","index","initialWidth","Table2","Table1","defaultProps","PipelineDispatchDetailsComposite","Component","constructor","arguments","state","lodash","emptyPipelineDispatch","pipelineDispatchValidationDef","isReadyToRender","quantityUOMOptions","customerDestinationOptions","tankOptions","saveEnabled","currentDispatchStatus","shipmentNextOperations","drawerStatus","UOMS","isManualEntry","isViewAuditTrail","commentsPopUp","remarks","isSubmit","auditTrailAttributeMetaDataList","modAuditTrailList","auditTrailList","noOfSignificantDigits","pipelineDispatchKPIList","showAuthenticationLayout","tempPipelineDispatch","handleAttributeDataChange","attribute","matchedAttributes","this","matchedAttributesList","filter","modattribute","Array","isArray","Code","DefaultValue","setState","forEach","console","log","addUpdatePipelineDispatch","createPipelineDispatch","updatePipelineDispatch","handleSave","fillDetails","attributeList","validateSave","convertStringtoDecimal","props","userDetails","EntityResult","IsWebPortalUser","handleOperationClick","operation","dispatch","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","Constants","Authorize_ManualEntry_Update","handleAuthorizeToManualEntry","selectedShareholder","tokenDetails","tokenInfo","result","IsSuccess","getPipelineDispatch","Common_Code","ErrorList","onSaved","Authorize_Scada_Update","handleAuthorizeToScadaUpdate","PipelineDispatchList_btnTransactionReport","handlePrintTransaction","toast","NotifyEvent","notificationMessage","autoClose","PipelineDispatchList_btnViewTransactionReport","handleViewTransaction","PipelineDispatch_BtnAuditTrail","handleViewAuditTrail","i","dispatchStatus","toUpperCase","CLOSED","AUTHORIZED","READY","INPROGRESS","MANUALLY_COMPLETED","INITIATED","INTERRUPTED","AUTO_COMPLETED","PARTIALLY_COMPLETED","EXCESSIVELY_COMPLETED","UpdatedTime","AttributesforUI","formReadonlyCompAttributes","Attributes","PipelineDispatch_BtnManualEntry","PipelineDispatch_BtnClosed","PipelineDispatch_BtnSubmit","findIndex","item","SeqNumber","rowData","IsInvalid","onBack","dispatchUpdateStates","getDispatchUpdateStates","indexOf","FunctionsList","functionGroups","modify","fnPipelineDispatch","handleCommentsModal","Modal","open","style","display","flexWrap","Footer","Button","content","handleSubmit","CloseDispatch","handleReset","Object","keys","key","IsEnterpriseNode","terminalSelectionChange","handleResetAttributeValidationError","localNodeAttribute","handleChange","propertyName","setDestinations","undefined","e","newVal","handleDateTextChange","sequenceNo","IsArchived","newComp","TankCode","PipelineTankMeterCode","PlannedStartTime","PlannedEndTime","push","obj","com","cindex","getPipelineMeter","getTank","getHeaderLineCode","getCustomerDestinations","getFinishedProductCodes","handleTabChange","expandedRows","handleDrawer","handleAuthenticationClose","componentWillReceiveProps","nextProps","selectedRow","getAttributes","componentDidMount","getUoms","getRefrenceSource","getSignificantDigits","axios","RestAPIs","then","response","NumberOfSignificantDigits","catch","CustodyTransferReferenceSource","dispatchRow","pipelineDispatchAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","PIPELINEDISPATCH","PIPELINEDISPATCHSTATUSTIME","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","trailerAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","fillAttributeDetails","err","VOLUME","UOM","text","MASS","shareholder","product","customerCode","terminalCode","PIPELINE","shareholderCustomers","shareholderCust","ShareholderCode","CustomerDestinationsList","destinationList","destination","dispatchUpdateInfo","activityInfo","ActivityCode","PIPELINE_DISPATCH_ENABLE_UPDATE","ActionTypeCode","CHECK","ShipmentStates","transportationType","TransactionMode","PageAttibutes","DefaultQtyUOMForTransactionUI","add","keyCode","KeyCodes","ShareHolderCode","keyDataCode","getLoadingDetails","getDispatchStatuses","getDispatchOperations","getKPIList","DISPATCH","Table","RationPending","toString","ActualEndTime","ActualStartTime","EndGrossVolume","Math","round","VolumeUOM","EndNetVolume","StartGrossVolume","StartNetVolume","Density","DensityUOM","Temperature","TemperatureUOM","attributes","compAttributes","att","AttributeName","DisplayName","IsMandatory","DataType","IsReadonly","MinValue","MaxValue","ValidationFormat","compSequenceNo","compAtt","selAtt","pipelineSnapShotInfoList","rationPending","modPipelineSnapShotInfo","emptyPipelineSnapshotInfo","PlanCode","TransactionType","PipelineTransactionID","ReceivedGrossQuantity","GrossQuantity","ReceivedNetQuantity","NetQuantity","UpdatePipelineRationedQuantities","MarkInvalidPipelineRecords","Entity","scheduledTime","dayjs","set","toDate","tankComps","PipelineDispatchTankInfo","tankCodeList","tankQuantity","compart","includes","pipelineDispatchTankInfoDef","col","validator","displayName","returnValue","values","every","PrimaryShareholder","headerCode","AssociatedMeterCodes","Shareholder","tanks","tank","dispatchCode","view","fnKPIInformation","objKPIRequestData","PageName","kpiPipelineDispatchDetail","TransportationType","InputParameters","ListKPIDetails","render","popUpContents","fieldName","fieldValue","LastUpdatedTime","CreatedTime","LastUpdatedBy","TMDetailsHeader","entityCode","newEntityName","PipelineDispatchManualEntryDetailsComposite","handleBack","PipelineDispatchViewAuditTrailDetails","DispatchCode","TMDetailsKPILayout","KPIList","TMDetailsUserActions","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","TransactionSummaryOperations","selectedItem","handleOperationButtonClick","currentStatuses","unAllowedOperations","webPortalAllowedOperations","isDetails","isWebPortalUser","LoadingPage","connect","getUserDetails","TokenAuth","userActions","bindActionCreators","modelOpen","setModelOpen","useState","handleAttributeType","toLowerCase","STRING","INT","LONG","FLOAT","BOOL","localiseStatus","formatter","engine","cls","fontSize","getKeyByValue","val","id","wjChart","itemsSource","chartType","bindingX","palette","width","minWidth","height","plotMargin","position","wjProperty","majorUnit","max","min","itemFormatter","axisLine","binding","scrollable","textAlign","el","window","document","getElementById","innerHTML","iframe","createElement","doc","body","appendChild","contentWindow","str1","substring","str2","write","close","focus","print","setTimeout","removeChild","wjcCore"],"sourceRoot":""}