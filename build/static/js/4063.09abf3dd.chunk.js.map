{"version":3,"file":"static/js/4063.09abf3dd.chunk.js","mappings":"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","sources":["Components/UIBase/Details/RailReceiptDetails.jsx","Components/Composite/Details/RailReceiptDetailsComposite.jsx","Components/UIBase/Common/AssociatedTerminals.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport {\r\n  DatePicker,\r\n  Input,\r\n  Select,\r\n  Icon,\r\n  Tab,\r\n  Button,\r\n  Checkbox,\r\n  Modal,\r\n  Accordion,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer, useTranslation } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { AssociatedTerminals } from \"../Common/AssociatedTerminals\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nimport {\r\n  handleIsRequiredCompartmentCell,\r\n  getCurrentDateFormat,\r\n} from \"../../../JS/functionalUtilities\";\r\n\r\nRailReceiptDetails.propTypes = {\r\n  modRailReceiptCompartmentPlanList: PropTypes.array.isRequired,\r\n  railReceipt: PropTypes.object.isRequired,\r\n  modRailReceipt: PropTypes.object.isRequired,\r\n  modAssociations: PropTypes.array.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    shareholders: PropTypes.array,\r\n    terminalCodes: PropTypes.array,\r\n    quantityUOMOptions: PropTypes.array,\r\n    carrierCompanyOptions: PropTypes.array,\r\n    railWagonOptions: PropTypes.object,\r\n    finishedProductOptions: PropTypes.object,\r\n    Suppliers: PropTypes.array,\r\n    OriginTerminals: PropTypes.array,\r\n  }).isRequired,\r\n  selectedCompRow: PropTypes.array.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onAllTerminalsChange: PropTypes.func.isRequired,\r\n  handleCellDataEdit: PropTypes.func.isRequired,\r\n  handleAssociationSelectionChange: PropTypes.func.isRequired,\r\n  handleAddAssociation: PropTypes.func.isRequired,\r\n  handleDeleteAssociation: PropTypes.func.isRequired,\r\n  isEnterpriseNode: PropTypes.bool.isRequired,\r\n  viewTab: PropTypes.number.isRequired,\r\n  handleAttributeCellDataEdit: PropTypes.func.isRequired,\r\n  selectedAttributeList: PropTypes.array.isRequired,\r\n  attributeValidationErrors: PropTypes.array.isRequired,\r\n  handleCompAttributeCellDataEdit: PropTypes.func.isRequired,\r\n  toggleExpand: PropTypes.func.isRequired,\r\n  compartmentDetailsPageSize: PropTypes.number.isRequired,\r\n  expandedRows: PropTypes.array.isRequired,\r\n  railLookUpData: PropTypes.object.isRequired,\r\n  WagonDetailTab: PropTypes.array.isRequired,\r\n  isTransloading: PropTypes.bool.isRequired,\r\n};\r\nRailReceiptDetails.defaultProps = { isEnterpriseNode: false };\r\nexport function RailReceiptDetails({\r\n  modRailReceiptCompartmentPlanList,\r\n  railReceipt,\r\n  modRailReceipt,\r\n  modAssociations,\r\n  validationErrors,\r\n  listOptions,\r\n  selectedCompRow,\r\n  onFieldChange,\r\n  onAllTerminalsChange,\r\n  handleCellDataEdit,\r\n  handleAttributeCellDataEdit,\r\n  handleAssociationSelectionChange,\r\n  handleAddAssociation,\r\n  handleDeleteAssociation,\r\n  isEnterpriseNode,\r\n  viewTab,\r\n  enableHSEInspection,\r\n  selectedAttributeList,\r\n  attributeValidationErrors,\r\n  onTabChange,\r\n  toggleExpand,\r\n  handleCompAttributeCellDataEdit,\r\n  compartmentDetailsPageSize,\r\n  expandedRows,\r\n  railLookUpData,\r\n  WagonDetailTab,\r\n  isTransloading,\r\n  currentAccess,\r\n}) {\r\n  const [t] = useTranslation();\r\n  const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n    let attributeValidation = [];\r\n    attributeValidation = attributeValidationErrors.find(\r\n      (selectedAttribute) => {\r\n        return selectedAttribute.TerminalCode === terminal;\r\n      }\r\n    );\r\n    return attributeValidation.attributeValidationErrors;\r\n  };\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [modCellData, setModCellData] = useState([]);\r\n  const handleCustomEditDropDown = (cellData, dropDownoptions) => {\r\n    return (\r\n      <Select\r\n        className=\"selectDropwdown\"\r\n        value={modAssociations[cellData.rowIndex][cellData.field]}\r\n        fluid\r\n        options={dropDownoptions}\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        indicator=\"required\"\r\n        reserveSpace={false}\r\n        search={true}\r\n        noResultsMessage={t(\"noResultsMessage\")}\r\n      />\r\n    );\r\n  };\r\n  const handleCustomEditTextBox = (cellData) => {\r\n    return (\r\n      <Input\r\n        fluid\r\n        value={modAssociations[cellData.rowIndex][cellData.field]}\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        reserveSpace={false}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleRailWagonEditDropDown = (cellData) => {\r\n    let railWagonOptions = [];\r\n    if (\r\n      listOptions.railWagonOptions !== null ||\r\n      listOptions.railWagonOptions !== undefined\r\n    ) {\r\n      if (\r\n        listOptions.railWagonOptions[cellData.rowData.CarrierCompanyCode] !==\r\n        undefined &&\r\n        Array.isArray(\r\n          listOptions.railWagonOptions[cellData.rowData.CarrierCompanyCode]\r\n        )\r\n      ) {\r\n        listOptions.railWagonOptions[\r\n          cellData.rowData.CarrierCompanyCode\r\n        ].forEach((railWagon) =>\r\n          railWagonOptions.push({ text: railWagon, value: railWagon })\r\n        );\r\n      }\r\n    }\r\n    return handleCustomEditDropDown(cellData, railWagonOptions);\r\n  };\r\n  const handleSupplierEditDropDown = (cellData) => {\r\n    let supplierOptions = [];\r\n    if (\r\n      listOptions.supplierDestinationOptions[\r\n      cellData.rowData[\"ShareholderCode\"]\r\n      ] !== undefined &&\r\n      listOptions.supplierDestinationOptions[\r\n      cellData.rowData[\"ShareholderCode\"]\r\n      ] !== null\r\n    ) {\r\n      Object.keys(\r\n        listOptions.supplierDestinationOptions[\r\n        cellData.rowData[\"ShareholderCode\"]\r\n        ]\r\n      ).forEach((customer) =>\r\n        supplierOptions.push({ text: customer, value: customer })\r\n      );\r\n    }\r\n    return handleCustomEditDropDown(cellData, supplierOptions);\r\n  };\r\n  const handleOriginalTerminalEditDropDown = (cellData) => {\r\n    let destinationOptions = [];\r\n    if (\r\n      listOptions.supplierDestinationOptions[\r\n      cellData.rowData[\"ShareholderCode\"]\r\n      ] !== undefined &&\r\n      listOptions.supplierDestinationOptions[\r\n      cellData.rowData[\"ShareholderCode\"]\r\n      ] !== null\r\n    ) {\r\n      if (\r\n        listOptions.supplierDestinationOptions[\r\n        cellData.rowData[\"ShareholderCode\"]\r\n        ][cellData.rowData.SupplierCode] !== undefined &&\r\n        Array.isArray(\r\n          listOptions.supplierDestinationOptions[\r\n          cellData.rowData[\"ShareholderCode\"]\r\n          ][cellData.rowData.SupplierCode]\r\n        )\r\n      ) {\r\n        listOptions.supplierDestinationOptions[\r\n          cellData.rowData[\"ShareholderCode\"]\r\n        ][cellData.rowData.SupplierCode].forEach((destination) =>\r\n          destinationOptions.push({ text: destination, value: destination })\r\n        );\r\n      }\r\n    }\r\n    return handleCustomEditDropDown(cellData, destinationOptions);\r\n  };\r\n  const handleProductEditDropDown = (cellData) => {\r\n    let finishedProductOptions = [];\r\n    if (\r\n      listOptions.finishedProductOptions !== undefined &&\r\n      listOptions.finishedProductOptions !== null\r\n    ) {\r\n      if (\r\n        listOptions.finishedProductOptions[cellData.rowData.ShareholderCode] !==\r\n        undefined &&\r\n        Array.isArray(\r\n          listOptions.finishedProductOptions[cellData.rowData.ShareholderCode]\r\n        )\r\n      ) {\r\n        listOptions.finishedProductOptions[\r\n          cellData.rowData.ShareholderCode\r\n        ].forEach((productCode) =>\r\n          finishedProductOptions.push({ text: productCode, value: productCode })\r\n        );\r\n      }\r\n    }\r\n    return handleCustomEditDropDown(cellData, finishedProductOptions);\r\n  };\r\n  const decimalDisplayValues = (cellData) => {\r\n    const { value } = cellData;\r\n    if (typeof value === \"number\") {\r\n      return value.toLocaleString();\r\n    } else {\r\n      return value;\r\n    }\r\n  };\r\n\r\n  const DisableEnableControl = () => {\r\n    return currentAccess.ViewRailReceipt_Update\r\n      ? !currentAccess.ViewRailReceipt_Update\r\n      : modRailReceipt.ReceiptStatus !== Constants.Shipment_Status.READY;\r\n  };\r\n\r\n  const checkBoxInDataTable = (cellData) => {\r\n    let rowIndex = modRailReceiptCompartmentPlanList.findIndex(\r\n      (item) => item.SequenceNo === cellData.rowData.SequenceNo\r\n    );\r\n    return (\r\n      <div>\r\n        {modRailReceipt.ReceiptStatus === Constants.Receipt_Status.READY ||\r\n          modRailReceiptCompartmentPlanList[rowIndex].ReceiptCompartmentStatus ===\r\n          Constants.ReceiptCompartment_Status.FORCE_COMPLETED ||\r\n          modRailReceiptCompartmentPlanList[rowIndex].ReceiptCompartmentStatus ===\r\n          Constants.ReceiptCompartment_Status.UNLOADING ||\r\n          cellData.rowData.ReceiptCompartmentStatus ===\r\n          Constants.ReceiptCompartment_Status.FORCE_COMPLETED ||\r\n          cellData.rowData.ReceiptCompartmentStatus ===\r\n          Constants.ReceiptCompartment_Status.UNLOADING ? (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Checkbox\r\n              checked={\r\n                cellData.rowData.ReceiptCompartmentStatus ===\r\n                  Constants.ReceiptCompartment_Status.FORCE_COMPLETED\r\n                  ? true\r\n                  : false\r\n              }\r\n              disabled={true}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Checkbox\r\n              checked={\r\n                modRailReceiptCompartmentPlanList[rowIndex][cellData.field]\r\n              }\r\n              disabled={false}\r\n              onClick={() => {\r\n                if (\r\n                  !modRailReceiptCompartmentPlanList[rowIndex][cellData.field]\r\n                ) {\r\n                  setModCellData(cellData);\r\n                  setModelOpen(true);\r\n                } else {\r\n                  handleCellDataEdit(\"\", cellData);\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  const IsTransloadingInDataTable = (cellData) => {\r\n    let rowIndex = modAssociations.findIndex(\r\n      (item) => item.SequenceNo === cellData.rowData.SequenceNo\r\n    );\r\n    return (\r\n      <div>\r\n        <Checkbox\r\n          checked={modAssociations[rowIndex][cellData.field]}\r\n          onClick={() => {\r\n            handleCellDataEdit(\"\", cellData);\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  const handleAttributeType = (data) => {\r\n    //debugger;\r\n    const attribute = data.rowData;\r\n    try {\r\n      return attribute.DataType.toLowerCase() ===\r\n        Constants.DataType.STRING.toLowerCase() ? (\r\n        <Input\r\n          fluid\r\n          value={attribute.AttributeValue}\r\n          disabled={attribute.IsReadonly}\r\n          onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n          reserveSpace={false}\r\n        />\r\n      ) : attribute.DataType.toLowerCase() ===\r\n        Constants.DataType.INT.toLowerCase() ? (\r\n        <Input\r\n          fluid\r\n          value={attribute.AttributeValue}\r\n          disabled={attribute.IsReadonly}\r\n          onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n          reserveSpace={false}\r\n        />\r\n      ) : attribute.DataType.toLowerCase() ===\r\n        Constants.DataType.FLOAT.toLowerCase() ||\r\n        attribute.DataType.toLowerCase() ===\r\n        Constants.DataType.LONG.toLowerCase() ||\r\n        attribute.DataType.toLowerCase() ===\r\n        Constants.DataType.DOUBLE.toLowerCase() ? (\r\n        <Input\r\n          fluid\r\n          value={attribute.AttributeValue}\r\n          disabled={attribute.IsReadonly}\r\n          onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n          reserveSpace={false}\r\n        />\r\n      ) : attribute.DataType.toLowerCase() ===\r\n        Constants.DataType.BOOL.toLowerCase() ? (\r\n        <Checkbox\r\n          checked={\r\n            attribute.AttributeValue.toString().toLowerCase() === \"true\"\r\n              ? true\r\n              : false\r\n          }\r\n          disabled={attribute.IsReadonly}\r\n          onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n        ></Checkbox>\r\n      ) : attribute.DataType.toLowerCase() ===\r\n        Constants.DataType.DATETIME.toLowerCase() ? (\r\n        <DatePicker\r\n          fluid\r\n          value={\r\n            attribute.AttributeValue === null ||\r\n              attribute.AttributeValue === undefined ||\r\n              attribute.AttributeValue === \"\"\r\n              ? \"\"\r\n              : new Date(attribute.AttributeValue)\r\n          }\r\n          disabled={attribute.IsReadonly}\r\n          showYearSelector=\"true\"\r\n          onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n          reserveSpace={false}\r\n        />\r\n      ) : null;\r\n    } catch (error) {\r\n      console.log(\"TrailerDetails:Error occured on handleAttributeType\", error);\r\n    }\r\n  };\r\n\r\n  const handleIsRequiredCompAttributes = (data) => {\r\n    return data.rowData.IsMandatory ? (\r\n      <div>\r\n        <span>{data.rowData.AttributeName}</span>\r\n        <div class=\"ui red circular empty label badge  circle-padding\" />\r\n      </div>\r\n    ) : (\r\n      <div>\r\n        <span>{data.rowData.AttributeName}</span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const expanderTemplate = (data) => {\r\n    //const open = expandedRows.includes(data.rowData);\r\n    const open =\r\n      expandedRows.findIndex(\r\n        (x) => x.SequenceNo === data.rowData.compSequenceNo\r\n      ) >= 0\r\n        ? true\r\n        : false;\r\n    return (\r\n      <div\r\n        onClick={() => toggleExpand(data.rowData, open)}\r\n        className=\"compartmentIcon gridButtonFontColor\"\r\n      >\r\n        <span>{open ? t(\"Hide_Attributes\") : t(\"View_Attributes\")}</span>\r\n        <Icon\r\n          root=\"common\"\r\n          name={open ? \"caret-up\" : \"caret-down\"}\r\n          className=\"margin_l10\"\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  function rowExpansionTemplate(data) {\r\n    return Array.isArray(data.AttributesforUI) &&\r\n      data.AttributesforUI.length > 0 ? (\r\n      <div className=\"childTable ChildGridViewAllShipmentLoadingDetails\">\r\n        <DataTable\r\n          data={data.AttributesforUI}\r\n          rows={compartmentDetailsPageSize}\r\n        >\r\n          {isEnterpriseNode ? (\r\n            <DataTable.Column\r\n              className=\"compColHeight\"\r\n              key=\"TerminalCode\"\r\n              field=\"TerminalCode\"\r\n              header={t(\"CompartmentTerminal\")}\r\n              editable={false}\r\n            ></DataTable.Column>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"AttributeName\"\r\n            header={t(\"CompartmentAttributeName\")}\r\n            renderer={handleIsRequiredCompAttributes}\r\n            editable={false}\r\n          ></DataTable.Column>\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            header={t(\"CompartmentAttributeValue\")}\r\n            renderer={handleAttributeType}\r\n          />\r\n          {Array.isArray(data.AttributesforUI) &&\r\n            data.AttributesforUI.length > compartmentDetailsPageSize ? (\r\n            <DataTable.Pagination />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </DataTable>\r\n      </div>\r\n    ) : (\r\n      <div className=\"compartmentIcon\">\r\n        <div className=\"gridButtonAlignLeft\">\r\n          {t(\"CustomerInventory_NoRecordsFound\")}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRailReceipt.ReceiptCode}\r\n                indicator=\"required\"\r\n                disabled={railReceipt.ReceiptCode !== \"\"}\r\n                onChange={(data) => onFieldChange(\"ReceiptCode\", data)}\r\n                label={t(\"Rail_Receipt_Code\")}\r\n                error={t(validationErrors.ReceiptCode)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <DatePicker\r\n                fluid\r\n                value={\r\n                  modRailReceipt.ScheduledDate === null\r\n                    ? \"\"\r\n                    : new Date(modRailReceipt.ScheduledDate)\r\n                }\r\n                label={t(\"Rail_Receipt_ArrivalDateTime\")}\r\n                type=\"datetime\"\r\n                showYearSelector=\"true\"\r\n                disablePast={false}\r\n                displayFormat={getCurrentDateFormat()}\r\n                disabled={\r\n                  DisableEnableControl() ||\r\n                  modRailReceipt.CreatedFromEntity !== 0\r\n                }\r\n                minuteStep={5}\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"ScheduledDate\", data)}\r\n                error={t(validationErrors.ScheduledDate)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRailReceipt.Description}\r\n                onChange={(data) => onFieldChange(\"Description\", data)}\r\n                label={t(\"Rail_Receipt_Desc\")}\r\n                error={t(validationErrors.Description)}\r\n                disabled={\r\n                  DisableEnableControl() ||\r\n                  modRailReceipt.CreatedFromEntity !== 0\r\n                }\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                indicator=\"required\"\r\n                label={t(\"Rail_Receipt_QuantityUOM\")}\r\n                value={modRailReceipt.QuantityUOM}\r\n                options={listOptions.quantityUOMOptions}\r\n                onChange={(data) => {\r\n                  onFieldChange(\"QuantityUOM\", data);\r\n                }}\r\n                disabled={\r\n                  DisableEnableControl() ||\r\n                  modRailReceipt.CreatedFromEntity !== 0\r\n                }\r\n                error={t(validationErrors.QuantityUOM)}\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRailReceipt.ReceiptStatus}\r\n                onChange={(data) => onFieldChange(\"ReceiptStatus\", data)}\r\n                label={t(\"Rail_Receipt_ReceiptStatus\")}\r\n                disabled={true}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            {isEnterpriseNode ? (\r\n              <>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                  <AssociatedTerminals\r\n                    terminalList={listOptions.terminalCodes}\r\n                    selectedTerminal={modRailReceipt.TerminalCodes}\r\n                    error={validationErrors.TerminalCodes}\r\n                    onFieldChange={onFieldChange}\r\n                    onCheckChange={onAllTerminalsChange}\r\n                  ></AssociatedTerminals>\r\n                </div>\r\n                {railReceipt.ReceiptCode === \"\" ||\r\n                  railReceipt.ReceiptCode === undefined ||\r\n                  railReceipt.ReceiptCode === null ? (\r\n                  \"\"\r\n                ) : (\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    {/* <Select\r\n                      fluid\r\n                      label={t(\"Shipment_LoadedTerminal\")}\r\n                      value={modRailReceipt.ActualTerminalCode}\r\n                      multiple={true}\r\n                      options={Utilities.transferListtoOptions(\r\n                        modRailReceipt.ActualTerminalCode\r\n                      )}\r\n                      // onChange={(data) => onFieldChange(\"TerminalCodes\", data)}\r\n                      // error={t(validationError)}\r\n                      disabled={true}\r\n                      reserveSpace={false}\r\n                    /> */}\r\n                    <Input\r\n                      fluid\r\n                      placeholder=\"\"\r\n                      label={t(\"Shipment_LoadedTerminal\")}\r\n                      value={modRailReceipt.ActualTerminalCode}\r\n                      disabled={true}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n          {selectedAttributeList.length > 0\r\n            ? selectedAttributeList.map((attribute) => (\r\n              <ErrorBoundary>\r\n                <Accordion>\r\n                  <Accordion.Content\r\n                    className=\"attributeAccordian\"\r\n                    title={\r\n                      isEnterpriseNode\r\n                        ? attribute.TerminalCode +\r\n                        \" - \" +\r\n                        t(\"Attributes_Header\")\r\n                        : t(\"Attributes_Header\")\r\n                    }\r\n                  >\r\n                    <AttributeDetails\r\n                      selectedAttributeList={attribute.attributeMetaDataList}\r\n                      handleCellDataEdit={handleAttributeCellDataEdit}\r\n                      attributeValidationErrors={handleValidationErrorFilter(\r\n                        attributeValidationErrors,\r\n                        attribute.TerminalCode\r\n                      )}\r\n                    ></AttributeDetails>\r\n                  </Accordion.Content>\r\n                </Accordion>\r\n              </ErrorBoundary>\r\n            ))\r\n            : null}\r\n\r\n          <div className=\"shipmentTabAlignment\">\r\n            <Tab\r\n              defaultActiveIndex={viewTab}\r\n              className=\"col-12\"\r\n              onTabChange={onTabChange}\r\n            >\r\n              <Tab.Pane title={t(\"RailDispatchPlanDetail_PlanHeader\")}>\r\n                <div className=\"row compartmentRow\">\r\n                  <div className=\"col col-md-8 col-lg-9 col col-xl-9\">\r\n                    {/* <h4>{t(\"Trailer_CompartmentInfo\")}</h4> */}\r\n                  </div>\r\n                  <div className=\"col col-md-4 col-lg-3 col-xl-3\">\r\n                    <div className=\"compartmentIconContainer\">\r\n                      <div\r\n                        onClick={handleAddAssociation}\r\n                        className=\"compartmentIcon\"\r\n                      >\r\n                        <div>\r\n                          <Icon root=\"common\" name=\"badge-plus\" size=\"medium\" />\r\n                        </div>\r\n                        <div className=\"margin_l10\">\r\n                          <h5 className=\"font14\">\r\n                            {t(\"FinishedProductInfo_Add\")}\r\n                          </h5>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div\r\n                        onClick={handleDeleteAssociation}\r\n                        className=\"compartmentIcon margin_l30\"\r\n                      >\r\n                        <div>\r\n                          <Icon root=\"common\" name=\"delete\" size=\"medium\" />\r\n                        </div>\r\n                        <div className=\"margin_l10\">\r\n                          <h5 className=\"font14\">{t(\"DestAdd_Delete\")}</h5>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"row marginRightZero tableScroll\">\r\n                  <div className=\"col-12 detailsTable\">\r\n                    <DataTable\r\n                      data={modAssociations}\r\n                      selectionMode=\"multiple\"\r\n                      selection={selectedCompRow}\r\n                      onSelectionChange={handleAssociationSelectionChange}\r\n                      rowExpansionTemplate={rowExpansionTemplate}\r\n                      expandedRows={expandedRows}\r\n                    >\r\n                      <DataTable.Column\r\n                        className=\"compColHeight colminWidth\"\r\n                        key=\"CarrierCompanyCode\"\r\n                        field=\"CarrierCompanyCode\"\r\n                        header={handleIsRequiredCompartmentCell(\r\n                          t(\"Rail_Receipt_Carrier\")\r\n                        )}\r\n                        editable={!DisableEnableControl()}\r\n                        editFieldType=\"text\"\r\n                        customEditRenderer={(celldata) =>\r\n                          handleCustomEditDropDown(\r\n                            celldata,\r\n                            listOptions.carrierCompanyOptions\r\n                          )\r\n                        }\r\n                      ></DataTable.Column>\r\n                      <DataTable.Column\r\n                        className=\"compColHeight colminWidth\"\r\n                        key=\"TrailerCode\"\r\n                        field=\"TrailerCode\"\r\n                        header={handleIsRequiredCompartmentCell(\r\n                          t(\"Rail_Receipt_Wagon\")\r\n                        )}\r\n                        editable={!DisableEnableControl()}\r\n                        editFieldType=\"text\"\r\n                        customEditRenderer={(celldata) =>\r\n                          handleRailWagonEditDropDown(celldata)\r\n                        }\r\n                      ></DataTable.Column>\r\n                      <DataTable.Column\r\n                        className=\"compColHeight colminWidth\"\r\n                        key=\"ShareholderCode\"\r\n                        field=\"ShareholderCode\"\r\n                        header={handleIsRequiredCompartmentCell(\r\n                          t(\"Rail_Receipt_Shareholder\")\r\n                        )}\r\n                        editable={!DisableEnableControl()}\r\n                        editFieldType=\"text\"\r\n                        customEditRenderer={(celldata) =>\r\n                          handleCustomEditDropDown(\r\n                            celldata,\r\n                            listOptions.shareholders\r\n                          )\r\n                        }\r\n                      ></DataTable.Column>\r\n                      <DataTable.Column\r\n                        className=\"compColHeight colminWidth\"\r\n                        key=\"FinishedProductCode\"\r\n                        field=\"FinishedProductCode\"\r\n                        header={handleIsRequiredCompartmentCell(\r\n                          t(\"Rail_Receipt_Product\")\r\n                        )}\r\n                        editable={!DisableEnableControl()}\r\n                        editFieldType=\"text\"\r\n                        customEditRenderer={(celldata) =>\r\n                          handleProductEditDropDown(celldata)\r\n                        }\r\n                      ></DataTable.Column>\r\n                      <DataTable.Column\r\n                        className=\"compColHeight colminWidth\"\r\n                        key=\"SupplierCode\"\r\n                        field=\"SupplierCode\"\r\n                        header={handleIsRequiredCompartmentCell(\r\n                          t(\"Rail_Receipt_Supplier\")\r\n                        )}\r\n                        editable={!DisableEnableControl()}\r\n                        editFieldType=\"text\"\r\n                        customEditRenderer={(celldata) =>\r\n                          handleSupplierEditDropDown(celldata)\r\n                        }\r\n                      ></DataTable.Column>\r\n                      <DataTable.Column\r\n                        className=\"compColHeight colminWidth\"\r\n                        key=\"OriginTerminalCode\"\r\n                        field=\"OriginTerminalCode\"\r\n                        header={handleIsRequiredCompartmentCell(\r\n                          t(\"Rail_Receipt_OriginCode\")\r\n                        )}\r\n                        editable={!DisableEnableControl()}\r\n                        editFieldType=\"text\"\r\n                        customEditRenderer={(celldata) =>\r\n                          handleOriginalTerminalEditDropDown(celldata)\r\n                        }\r\n                      ></DataTable.Column>\r\n                      {railLookUpData.PlanType === \"1\" ? (\r\n                        <DataTable.Column\r\n                          className=\"compColHeight colminWidth\"\r\n                          key=\"Quantity\"\r\n                          field=\"Quantity\"\r\n                          header={handleIsRequiredCompartmentCell(\r\n                            t(\"Rail_Receipt_Quantity\")\r\n                          )}\r\n                          editable={!DisableEnableControl()}\r\n                          editFieldType=\"number\"\r\n                          renderer={(cellData) =>\r\n                            decimalDisplayValues(cellData)\r\n                          }\r\n                          customEditRenderer={handleCustomEditTextBox}\r\n                        ></DataTable.Column>\r\n                      ) : null}\r\n                      {railReceipt.ReceiptStatus === \"CLOSED\" ||\r\n                        !isTransloading ? (\r\n                        \"\"\r\n                      ) : (\r\n                        <DataTable.Column\r\n                          className=\"compColHeight colminWidth\"\r\n                          key=\"IsTransloading\"\r\n                          field=\"IsTransloading\"\r\n                          header={t(\"Device_Transloading\")}\r\n                          renderer={(cellData) =>\r\n                            IsTransloadingInDataTable(cellData)\r\n                          }\r\n                        ></DataTable.Column>\r\n                      )}\r\n\r\n                      <DataTable.Column\r\n                        className=\"expandedColumn\"\r\n                        initialWidth=\"200px\"\r\n                        renderer={expanderTemplate}\r\n                      />\r\n                    </DataTable>\r\n                  </div>\r\n                </div>\r\n              </Tab.Pane>\r\n              {WagonDetailTab.map((index) => {\r\n                return (\r\n                  <Tab.Pane title={t(\"ViewRailDispatchList_WagonDetails\")}>\r\n                    <div className=\"row marginRightZero tableScroll\">\r\n                      <div className=\"col-12 detailsTable\">\r\n                        <DataTable\r\n                          data={modRailReceiptCompartmentPlanList}\r\n                          scrollable={true}\r\n                        >\r\n                          <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"TrailerCode\"\r\n                            field=\"TrailerCode\"\r\n                            header={t(\"Rail_Wagon_Code\")}\r\n                          ></DataTable.Column>\r\n                          <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"CarrierCompanyCode\"\r\n                            field=\"CarrierCompanyCode\"\r\n                            header={t(\"DriverInfo_Carrier\")}\r\n                          ></DataTable.Column>\r\n                          <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"FinishedProductCode\"\r\n                            field=\"FinishedProductCode\"\r\n                            header={t(\"Rail_Receipt_Product\")}\r\n                          ></DataTable.Column>\r\n                          <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"ReceiptCompartmentStatus\"\r\n                            field=\"ReceiptCompartmentStatus\"\r\n                            header={t(\"Reconciliation_Status\")}\r\n                          ></DataTable.Column>\r\n                          <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"PlannedQuantity\"\r\n                            field=\"PlannedQuantity\"\r\n                            header={t(\r\n                              \"ViewShipmentCompartment_PlannedQuantity\"\r\n                            )}\r\n                          ></DataTable.Column>\r\n                          <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"RevisedQuantity\"\r\n                            field=\"RevisedQuantity\"\r\n                            header={t(\r\n                              \"ViewMarineShipmentList_RevisedPlannedQuantity\"\r\n                            )}\r\n                          ></DataTable.Column>\r\n\r\n                          <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"UnloadedQuantity\"\r\n                            field=\"UnloadedQuantity\"\r\n                            header={t(\"ContractInfo_LoadedQty\")}\r\n                          ></DataTable.Column>\r\n\r\n                          <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"TareWeight\"\r\n                            field=\"TareWeight\"\r\n                            header={t(\"Trailer_Tareweight\")}\r\n                          ></DataTable.Column>\r\n\r\n                          <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"LadenWeight\"\r\n                            field=\"LadenWeight\"\r\n                            header={t(\"PCDET_Planning_gvLadenWeight\")}\r\n                          ></DataTable.Column>\r\n                          <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"DiffWeight\"\r\n                            field=\"DiffWeight\"\r\n                            header={t(\"Weight_Difference\")}\r\n                          ></DataTable.Column>\r\n                          {enableHSEInspection ? (\r\n                            <DataTable.Column\r\n                              className=\"compColHeight colminWidth\"\r\n                              key=\"HSEInspectionStatus\"\r\n                              field=\"HSEInspectionStatus\"\r\n                              header={t(\"VehHSE_InspectionStatus\")}\r\n                            ></DataTable.Column>\r\n                          ) : null}\r\n                          <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"ForceComplete\"\r\n                            field=\"ForceComplete\"\r\n                            header={t(\"ViewMarineReceiptList_ForceComplete\")}\r\n                            renderer={(cellData) =>\r\n                              checkBoxInDataTable(cellData)\r\n                            }\r\n                          ></DataTable.Column>\r\n                        </DataTable>\r\n                      </div>\r\n                    </div>\r\n                  </Tab.Pane>\r\n                );\r\n              })}\r\n            </Tab>\r\n          </div>\r\n\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <Modal open={modelOpen} size=\"small\">\r\n                <Modal.Content>\r\n                  <div>\r\n                    <b>{t(\"ViewMarineReceipt_ForceCompleteConfirm\")}</b>\r\n                  </div>\r\n                </Modal.Content>\r\n                <Modal.Footer>\r\n                  <Button\r\n                    type=\"secondary\"\r\n                    content={t(\"Cancel\")}\r\n                    onClick={() => {\r\n                      setModelOpen(false);\r\n                    }}\r\n                  />\r\n                  <Button\r\n                    type=\"primary\"\r\n                    content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                    onClick={() => {\r\n                      setModelOpen(false);\r\n                      handleCellDataEdit(\"\", modCellData);\r\n                    }}\r\n                  />\r\n                </Modal.Footer>\r\n              </Modal>\r\n            )}\r\n          </TranslationConsumer>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport lodash from \"lodash\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport * as getUserDetails from \"../../../Redux/Actions/GetUserDetails\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport \"../../../CSS/styles.css\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as RestApis from \"../../../JS/RestApis\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { functionGroups, fnRailReceipt, fnKPIInformation } from \"../../../JS/FunctionGroups\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { railReceiptValidationDef } from \"../../../JS/ValidationDef\";\r\nimport { emptyRailReceipt } from \"../../../JS/DefaultEntities\";\r\nimport { RailReceiptDetails } from \"../../UIBase/Details/RailReceiptDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport { railReceiptCompartDef } from \"../../../JS/DetailsTableValidationDef\";\r\nimport {\r\n  railReceiptAttributeEntity,\r\n  railReceiptComAttributeEntity,\r\n} from \"../../../JS/AttributeEntity\";\r\nimport { getKeyByValue } from \"../../../JS/Utilities\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiRailReceiptDetails } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass RailReceiptDetailsComposite extends Component {\r\n  state = {\r\n    isWagonDetail: \"false\",\r\n    modRailReceiptCompartmentPlanList: [],\r\n    railReceipt: lodash.cloneDeep(emptyRailReceipt),\r\n    modRailReceipt: {},\r\n    modAssociations: [],\r\n    weightBridgeData: [],\r\n    modWeightBridgeData: [],\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      railReceiptValidationDef\r\n    ),\r\n    selectedCompRow: [],\r\n    isDetail: \"false\",\r\n    selectedShareholder: \"\",\r\n    selectedRow: {},\r\n    selectedItems: [],\r\n    shareholders: this.getShareholders(),\r\n    quantityUOMOptions: [],\r\n    carrierCompanyOptions: [],\r\n    railWagonOptions: {},\r\n    finishedProductOptions: {},\r\n    supplierDestinationOptions: [],\r\n    ViewUnloadingData: [],\r\n    saveEnabled: false,\r\n    isViewAuditTrail: \"false\",\r\n    tabActiveIndex: 0,\r\n    operationsVisibilty: {\r\n      add: false,\r\n      save: false,\r\n      authorizeToLoad: false,\r\n      closeReceipt: false,\r\n      viewAuditTrail: false,\r\n      viewUnloadingDetails: false,\r\n      printRAN: false,\r\n      viewBOD: false,\r\n      printBOD: false,\r\n      bSIOutbound: false,\r\n      manualEntry: false,\r\n      adjustPlan: false,\r\n      forceComplete: false,\r\n    },\r\n    attribute: [],\r\n    attributeMetaDataList: [],\r\n    compartmentAttributeMetaDataList: [],\r\n    selectedAttributeList: [],\r\n    attributeValidationErrors: [],\r\n    expandedRows: [],\r\n    expandedCompDetailRows: [],\r\n    additiveDetails: [],\r\n    saveCompartmentEnable: false,\r\n    isTransloading: false,\r\n    railReceiptKPIList: [],\r\n    maxNumberOfCompartments: 60,\r\n    showAuthenticationLayout: false,\r\n    tempRailReceipt: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getAttributes(this.props.selectedRow);\r\n      this.getUoms();\r\n      this.getCarrierCompanyCodes();\r\n      this.getFinishedProductCodes();\r\n      this.getSupplierOriginTerminals();\r\n      //this.getForceCompletenPermission(this.props.selectedRow);\r\n      //this.GetReceiptStatusOperations(this.props.selectedRow);\r\n      this.getTransloading();\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTransloading() {\r\n    try {\r\n       axios(\r\n      RestApis.GetLookUpData + \"?LookUpTypeCode=Transloading\",\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let isTransloading = false;\r\n          if (result.EntityResult.RAILEnable === \"True\") {\r\n            isTransloading = true;\r\n          }\r\n          this.setState({ isTransloading });\r\n        } else {\r\n          console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"MarineReceiptDetailsComposite: Error occurred on getLookUpData\",\r\n          error\r\n        );\r\n      });\r\n       axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=VirtualPreset\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (!isNaN(parseInt(result.EntityResult[\"RailMaximumNumberOfWagonsPerTrain \"]))) {\r\n            this.setState({maxNumberOfCompartments:parseInt(result.EntityResult[\"RailMaximumNumberOfWagonsPerTrain \"])})\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"RailReceiptDetailsComposite: Error occurred on getTransloading\",error);\r\n    }\r\n   \r\n  }\r\n\r\n  operationPermissionControl = (receiptOperations) => {\r\n    var { operationsVisibilty } = { ...this.state };\r\n    if (\r\n      receiptOperations.indexOf(\r\n        Constants.ViewAllRailReceiptOperations.ViewRailReceipt_AuthorizeToUnload\r\n      ) > -1\r\n    ) {\r\n      operationsVisibilty.authorizeToLoad = true;\r\n    }\r\n    if (\r\n      receiptOperations.indexOf(\r\n        Constants.ViewAllRailReceiptOperations.ViewRailReceipt_RecordWeight\r\n      ) > -1\r\n    ) {\r\n      operationsVisibilty.recordWeight = true;\r\n    }\r\n    if (\r\n      receiptOperations.indexOf(\r\n        Constants.ViewAllRailReceiptOperations.ViewRailReceipt_CloseReceipt\r\n      ) > -1\r\n    ) {\r\n      operationsVisibilty.closeReceipt = true;\r\n    }\r\n    if (\r\n      receiptOperations.indexOf(\r\n        Constants.ViewAllRailReceiptOperations.ViewRailReceipt_ViewAuditTrail\r\n      ) > -1\r\n    ) {\r\n      operationsVisibilty.viewAuditTrail = true;\r\n    }\r\n    if (\r\n      receiptOperations.indexOf(\r\n        Constants.ViewAllRailReceiptOperations\r\n          .ViewRailReceipt_ViewLoadingDetails\r\n      ) > -1\r\n    ) {\r\n      operationsVisibilty.viewUnloadingDetails = true;\r\n    }\r\n    if (\r\n      receiptOperations.indexOf(\r\n        Constants.ViewAllRailReceiptOperations.ViewRailReceipt_PrintRAN\r\n      ) > -1\r\n    ) {\r\n      operationsVisibilty.printRAN = true;\r\n    }\r\n    if (\r\n      receiptOperations.indexOf(\r\n        Constants.ViewAllRailReceiptOperations.ViewRailReceipt_ViewBOD\r\n      ) > -1\r\n    ) {\r\n      operationsVisibilty.viewBOD = true;\r\n    }\r\n    if (\r\n      receiptOperations.indexOf(\r\n        Constants.ViewAllRailReceiptOperations.ViewRailReceipt_PrintBOD\r\n      ) > -1\r\n    ) {\r\n      operationsVisibilty.printBOD = true;\r\n    }\r\n    if (\r\n      receiptOperations.indexOf(\r\n        Constants.ViewAllRailReceiptOperations.ViewRailReceipt_BISOutbound\r\n      ) > -1\r\n    ) {\r\n      operationsVisibilty.bSIOutbound = true;\r\n    }\r\n    if (\r\n      receiptOperations.indexOf(\r\n        Constants.ViewAllRailReceiptOperations.ViewRailReceipt_ManualEntry\r\n      ) > -1\r\n    ) {\r\n      operationsVisibilty.manualEntry = true;\r\n    }\r\n    this.setState({ operationsVisibilty });\r\n  };\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modRailReceipt = lodash.cloneDeep(this.state.modRailReceipt);\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n\r\n      modRailReceipt[propertyName] = data;\r\n      if (propertyName === \"Active\") {\r\n        if (data !== this.state.railReceipt.Active) {\r\n          modRailReceipt.Remarks = \"\";\r\n        }\r\n      }\r\n      if (propertyName === \"TerminalCodes\") {\r\n        this.terminalSelectionChange(data);\r\n      }\r\n      this.setState({ modRailReceipt });\r\n      if (railReceiptValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          railReceiptValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getShareholders() {\r\n    return Utilities.transferListtoOptions(\r\n      this.props.userDetails.EntityResult.ShareholderList\r\n    );\r\n  }\r\n  handleReset = () => {\r\n    try {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      const railReceipt = lodash.cloneDeep(this.state.railReceipt);\r\n      //var transportationType = this.getTransportationType();\r\n\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modRailReceipt: { ...railReceipt },\r\n          modAssociations: this.getAssociationsFromReceipt(railReceipt),\r\n          validationErrors,\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange([]);\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            this.localNodeAttribute();\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  fillDetails() {\r\n    try {\r\n      let modRailReceipt = lodash.cloneDeep(this.state.modRailReceipt);\r\n      let i = 0;\r\n      modRailReceipt.RailMarineReceiptCompartmentDetailPlanList.forEach(\r\n        (compart) => {\r\n          if (compart.Quantity !== null || compart.Quantity !== \"\") {\r\n            modRailReceipt.RailMarineReceiptCompartmentPlanList[\r\n              i\r\n            ].PlannedQuantity = compart.Quantity.toLocaleString();\r\n          }\r\n        }\r\n      );\r\n      //attributeList = Utilities.attributesConverttoLocaleString(attributeList);\r\n      this.setState({ modRailReceipt });\r\n      return modRailReceipt;\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptRecordWeightDetailsComposite:Error occured on fillDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  \r\n    saveRailReceipt = () => {\r\n      this.handleAuthenticationClose();\r\n      try {\r\n        this.setState({ saveEnabled: false });\r\n        let tempRailReceipt = lodash.cloneDeep(this.state.tempRailReceipt);\r\n  \r\n        this.state.railReceipt.ReceiptCode === \"\"\r\n        ? this.createRailReceipt(tempRailReceipt)\r\n        : this.updateRailReceipt(tempRailReceipt);\r\n      } catch (error) {\r\n        console.log(\"RailShipComposite : Error in addUpdateRailDispatch\");\r\n      }\r\n    };\r\n   \r\n\r\n\r\n  handleSave = () => {\r\n    try {\r\n      \r\n      let modRailReceipt = lodash.cloneDeep(this.state.modRailReceipt);\r\n      if (this.state.tabActiveIndex === 0) {\r\n        modRailReceipt.RailMarineReceiptCompartmentDetailPlanList =\r\n          this.getCompartmentsFromAssociations(this.state.modAssociations);\r\n        let attributeList = Utilities.attributesConverttoLocaleString(\r\n          this.state.selectedAttributeList\r\n        );\r\n        if (this.validateSave(modRailReceipt, attributeList)) {\r\n          modRailReceipt = this.fillAttributeDetails(\r\n            modRailReceipt,\r\n            attributeList\r\n          );\r\n          for (let i in modRailReceipt.RailMarineReceiptCompartmentDetailPlanList) {\r\n            modRailReceipt.RailMarineReceiptCompartmentDetailPlanList[\r\n              i\r\n            ].Quantity = Utilities.convertStringtoDecimal(\r\n              modRailReceipt.RailMarineReceiptCompartmentDetailPlanList[i]\r\n                .Quantity\r\n            );\r\n          }\r\n           \r\n          let showAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n        let tempRailReceipt = lodash.cloneDeep(modRailReceipt);\r\n        this.setState({ showAuthenticationLayout, tempRailReceipt }, () => {\r\n          if (showAuthenticationLayout === false) {\r\n            this.saveRailReceipt();\r\n          }\r\n      });\r\n        } else {\r\n          this.setState({ saveEnabled: true });\r\n        }\r\n      } else {\r\n        let modRailReceiptCompartmentPlanList = lodash.cloneDeep(\r\n          this.state.modRailReceiptCompartmentPlanList\r\n        );\r\n        var { operationsVisibilty } = { ...this.state };\r\n        operationsVisibilty.save = false;\r\n        this.setState({ operationsVisibilty });\r\n        var CompartmentDatas = [];\r\n        for (var i = 0; i < modRailReceiptCompartmentPlanList.length; i++) {\r\n          var railReceiptCode =\r\n            modRailReceiptCompartmentPlanList[i][\"ReceiptCode\"];\r\n          var ForceComplete =\r\n            modRailReceiptCompartmentPlanList[i][\"ForceComplete\"];\r\n          var shCode = this.props.selectedShareholder;\r\n          // var  SequenceNo=modRailReceiptCompartmentPlanList[i][\"SequenceNo\"];\r\n\r\n          if (ForceComplete !== false) {\r\n            var compartmentRow = {\r\n              ForceCompleted:\r\n                modRailReceiptCompartmentPlanList[i][\"ForceComplete\"],\r\n              CarrierCompanyCode:\r\n                modRailReceiptCompartmentPlanList[i][\"CarrierCompanyCode\"],\r\n              TrailerCode: modRailReceiptCompartmentPlanList[i][\"TrailerCode\"],\r\n            };\r\n\r\n            CompartmentDatas.push(compartmentRow);\r\n          }\r\n        }\r\n        var KeyData = {\r\n          ShareHolderCode: shCode,\r\n          KeyCodes: [{ Key: \"ReceiptCode\", Value: railReceiptCode }],\r\n          Entity: CompartmentDatas,\r\n        };\r\n        var notification = {\r\n          messageType: \"critical\",\r\n          message: \"Receipt_SavedStatus\",\r\n          messageResultDetails: [\r\n            {\r\n              keyFields: [\"Marine_ReceiptCompDetail_ShipmentNumber\"],\r\n              keyValues: [this.props.selectedRow.Common_Code],\r\n              isSuccess: false,\r\n              errorMessage: \"\",\r\n            },\r\n          ],\r\n        };\r\n        axios(\r\n          RestApis.UpdateRailReceiptCompartInfo,\r\n          Utilities.getAuthenticationObjectforPost(\r\n            KeyData,\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        )\r\n          .then((response) => {\r\n            var result = response.data;\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n              operationsVisibilty.save = true;\r\n              this.getRailReceipt(this.props.selectedRow);\r\n\r\n              for (\r\n                var i = 0;\r\n                i < modRailReceiptCompartmentPlanList.length;\r\n                i++\r\n              ) {\r\n                if (\r\n                  modRailReceiptCompartmentPlanList[i][\"AdjustPlan\"] !== null\r\n                ) {\r\n                  modRailReceiptCompartmentPlanList[i][\"AdjustPlan\"] = null;\r\n                }\r\n              }\r\n              this.setState({\r\n                operationsVisibilty,\r\n                modRailReceiptCompartmentPlanList,\r\n              });\r\n            } else {\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n              operationsVisibilty.save = false;\r\n              this.setState({\r\n                operationsVisibilty,\r\n              });\r\n              console.log(\r\n                \"Error in Save Compartment Details:\",\r\n                result.ErrorList\r\n              );\r\n            }\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          })\r\n          .catch((error) => {\r\n            throw error;\r\n          });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleAddAssociation = () => {\r\n    if (!this.props.userDetails.EntityResult.IsArchived) {\r\n      try {\r\n        let newComp = {\r\n          AssociatedContractItems: null,\r\n          AssociatedOrderItems: null,\r\n          Attributes: [],\r\n          CarrierCompanyCode: \"\",\r\n          CompartmentCode: \"1\",\r\n          CompartmentSeqNoInVehicle: null,\r\n          FinishedProductCode: \"\",\r\n          OriginTerminalCode: \"\",\r\n          Quantity: 0,\r\n          QuantityUOM: \"\",\r\n          ReceiptCode: \"\",\r\n          SequenceNo: 0,\r\n          ShareholderCode: \"\",\r\n          SupplierCode: \"\",\r\n          TrailerCode: \"\",\r\n        };\r\n        let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n        newComp.ShareholderCode = this.props.selectedShareholder;\r\n        newComp.SequenceNo = modAssociations.length + 1;\r\n        modAssociations.push(newComp);\r\n        let modRailReceipt = lodash.cloneDeep(this.state.modRailReceipt);\r\n        this.setState(\r\n          {\r\n            modAssociations,\r\n            selectedCompRow: [],\r\n          },\r\n          () => {\r\n            if (\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode === false\r\n            ) {\r\n              var attributeMetaDataList = lodash.cloneDeep(\r\n                this.state.compartmentAttributeMetaDataList\r\n              );\r\n              if (attributeMetaDataList.length > 0)\r\n                this.formCompartmentAttributes([\r\n                  attributeMetaDataList[0].TerminalCode,\r\n                ]);\r\n            } else this.formCompartmentAttributes(modRailReceipt.TerminalCodes);\r\n          }\r\n        );\r\n      } catch (error) {\r\n        console.log(\r\n          \"RailReceiptDetailsComposite:Error occured on handleAddAssociation\",\r\n          error\r\n        );\r\n      }\r\n    }\r\n  };\r\n  handleDeleteAssociation = () => {\r\n    if (!this.props.userDetails.EntityResult.IsArchived) {\r\n      try {\r\n        if (\r\n          this.state.selectedCompRow != null &&\r\n          this.state.selectedCompRow.length > 0\r\n        ) {\r\n          if (this.state.modAssociations.length > 0) {\r\n            let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n\r\n            this.state.selectedCompRow.forEach((obj, index) => {\r\n              modAssociations = modAssociations.filter((com, cindex) => {\r\n                return com.SequenceNo !== obj.SequenceNo;\r\n              });\r\n            });\r\n\r\n            for (let i = 0; i < modAssociations.length; i++) {\r\n              modAssociations[i].SequenceNo = i + 1;\r\n            }\r\n\r\n            this.setState({ modAssociations });\r\n          }\r\n        }\r\n\r\n        this.setState({ selectedCompRow: [] });\r\n      } catch (error) {\r\n        console.log(\r\n          \"RailReceiptDetailsComposite:Error occured on handleDeleteAssociation\",\r\n          error\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  handleDateTextChange = (propertyName, value, error) => {\r\n    try {\r\n      var { validationErrors } = { ...this.state.validationErrors };\r\n      var modRailReceipt = lodash.cloneDeep(this.state.modRailReceipt);\r\n      validationErrors[propertyName] = error;\r\n      modRailReceipt[propertyName] = value;\r\n      this.setState({ validationErrors, modRailReceipt });\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptDetailsComposite:Error occured on handleDateTextChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleCellDataEdit = (newVal, cellData) => {\r\n    let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n    let modRailReceiptCompartmentPlanList = lodash.cloneDeep(\r\n      this.state.modRailReceiptCompartmentPlanList\r\n    );\r\n    modAssociations[cellData.rowIndex][cellData.field] = newVal;\r\n\r\n    if (cellData.field === \"CarrierCompanyCode\") {\r\n      let carrierCompanyCodeOptions = this.state.carrierCompanyOptions;\r\n      if (\r\n        carrierCompanyCodeOptions !== undefined &&\r\n        carrierCompanyCodeOptions !== null\r\n      ) {\r\n        if (\r\n          this.state.railWagonOptions[newVal] !== undefined &&\r\n          Array.isArray(this.state.railWagonOptions[newVal]) &&\r\n          this.state.railWagonOptions[newVal].length === 1\r\n        ) {\r\n          modAssociations[cellData.rowIndex][\"TrailerCode\"] =\r\n            this.state.railWagonOptions[newVal][0];\r\n        } else {\r\n          modAssociations[cellData.rowIndex][\"TrailerCode\"] = \"\";\r\n        }\r\n      }\r\n    } else if (cellData.field === \"SupplierCode\") {\r\n      let supplierDestinationOptions = lodash.cloneDeep(\r\n        this.state.supplierDestinationOptions\r\n      );\r\n      if (\r\n        supplierDestinationOptions[\r\n        modAssociations[cellData.rowIndex][\"ShareholderCode\"]\r\n        ] !== undefined &&\r\n        supplierDestinationOptions[\r\n        modAssociations[cellData.rowIndex][\"ShareholderCode\"]\r\n        ] !== null\r\n      ) {\r\n        let supplierDestinationList =\r\n          supplierDestinationOptions[\r\n          modAssociations[cellData.rowIndex][\"ShareholderCode\"]\r\n          ];\r\n        if (\r\n          supplierDestinationList[newVal] !== undefined &&\r\n          Array.isArray(supplierDestinationList[newVal]) &&\r\n          supplierDestinationList[newVal].length === 1\r\n        ) {\r\n          modAssociations[cellData.rowIndex][\"OriginTerminalCode\"] =\r\n            supplierDestinationList[newVal][0];\r\n        } else {\r\n          modAssociations[cellData.rowIndex][\"OriginTerminalCode\"] = \"\";\r\n        }\r\n      }\r\n    } else if (cellData.field === \"ForceComplete\") {\r\n      let rowIndex = modRailReceiptCompartmentPlanList.findIndex(\r\n        (item) => item.SequenceNo === cellData.rowData.SequenceNo\r\n      );\r\n      modRailReceiptCompartmentPlanList[rowIndex][cellData.field] =\r\n        !modRailReceiptCompartmentPlanList[rowIndex][cellData.field];\r\n    } else if (cellData.field === \"IsTransloading\") {\r\n      modAssociations[cellData.rowIndex][cellData.field] =\r\n        !cellData.rowData.IsTransloading;\r\n    }\r\n\r\n    this.setState({ modAssociations, modRailReceiptCompartmentPlanList });\r\n  };\r\n  handleAssociationSelectionChange = (e) => {\r\n    this.setState({ selectedCompRow: e });\r\n  };\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        (this.state.railReceipt.ReceiptCode !== \"\" &&\r\n          nextProps.selectedRow.Common_Code === undefined &&\r\n          this.props.tokenDetails.tokenInfo ===\r\n          nextProps.tokenDetails.tokenInfo) ||\r\n        (nextProps.selectedRow.ReceiptStatus !==\r\n          this.props.selectedRow.ReceiptStatus &&\r\n          this.props.selectedRow.ReceiptStatus !== undefined)\r\n      ) {\r\n        this.getRailReceipt(nextProps.selectedRow);\r\n      }\r\n      let validationErrors = { ...this.state.validationErrors };\r\n      Object.keys(validationErrors).forEach((key) => {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState({ validationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MarineDispatchDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  validateSave(modRailReceipt, attributeList) {\r\n    var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n\r\n    Object.keys(railReceiptValidationDef).forEach(function (key) {\r\n      if (modRailReceipt[key] !== undefined) {\r\n        validationErrors[key] = Utilities.validateField(\r\n          railReceiptValidationDef[key],\r\n          modRailReceipt[key]\r\n        );\r\n      }\r\n    });\r\n\r\n    if (modRailReceipt.Active !== this.state.railReceipt.Active) {\r\n      if (modRailReceipt.Remarks === null || modRailReceipt.Remarks === \"\") {\r\n        validationErrors[\"Remarks\"] = \"Rail_Receipt_RemarksRequired\";\r\n      } else {\r\n        delete validationErrors[\"Remarks\"];\r\n      }\r\n    }\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({ validationErrors, attributeValidationErrors });\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"Receipt_SavedStatus\",\r\n      messageResultDetails: [],\r\n    };\r\n\r\n    if (\r\n      Array.isArray(\r\n        modRailReceipt.RailMarineReceiptCompartmentDetailPlanList\r\n      ) &&\r\n      modRailReceipt.RailMarineReceiptCompartmentDetailPlanList.length > 0\r\n    ) {\r\n      if (modRailReceipt.RailMarineReceiptCompartmentDetailPlanList.length <= this.state.maxNumberOfCompartments) {\r\n         modRailReceipt.RailMarineReceiptCompartmentDetailPlanList.forEach(\r\n        (compart) => {\r\n          railReceiptCompartDef.forEach((col) => {\r\n            let err = \"\";\r\n\r\n            if (\r\n              col.field === \"Quantity\" &&\r\n              this.props.railLookUpData.PlanType === \"2\"\r\n            )\r\n              return;\r\n            if (col.validator !== undefined) {\r\n              err = Utilities.validateField(col.validator, compart[col.field]);\r\n            }\r\n            if (err !== \"\") {\r\n              notification.messageResultDetails.push({\r\n                keyFields: [\r\n                  \"RailReceiptManualEntry_ReceiptCode\",\r\n                  col.displayName,\r\n                ],\r\n                keyValues: [modRailReceipt.ReceiptCode, compart[col.field]],\r\n                isSuccess: false,\r\n                errorMessage: err,\r\n              });\r\n            }\r\n          });\r\n          let updatedAttributes = [];\r\n          if (\r\n            compart.AttributesforUI !== null &&\r\n            compart.AttributesforUI !== undefined\r\n          )\r\n            updatedAttributes = compart.AttributesforUI.filter(function (\r\n              uIAttributes\r\n            ) {\r\n              return compart.Attributes.some(function (selAttribute) {\r\n                let isPresent =\r\n                  selAttribute.ListOfAttributeData.findIndex(\r\n                    (item) => item.AttributeCode === uIAttributes.AttributeCode\r\n                  ) >= 0\r\n                    ? true\r\n                    : false;\r\n                return (\r\n                  uIAttributes.TerminalCode === selAttribute.TerminalCode &&\r\n                  isPresent\r\n                );\r\n              });\r\n            });\r\n\r\n          updatedAttributes.forEach((item) => {\r\n            let errMsg = Utilities.valiateAttributeField(\r\n              item,\r\n              item.AttributeValue\r\n            );\r\n            if (errMsg !== \"\") {\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                notification.messageResultDetails.push({\r\n                  keyFields: [\r\n                    \"CompAttributeComp\",\r\n                    \"CompAttributeTerminal\",\r\n                    item.AttributeName,\r\n                  ],\r\n                  keyValues: [\r\n                    compart.Code,\r\n                    item.TerminalCode,\r\n                    item.AttributeValue,\r\n                  ],\r\n                  isSuccess: false,\r\n                  errorMessage: errMsg,\r\n                });\r\n              } else {\r\n                notification.messageResultDetails.push({\r\n                  keyFields: [\"CompAttributeComp\", item.AttributeName],\r\n                  keyValues: [compart.Code, item.AttributeValue],\r\n                  isSuccess: false,\r\n                  errorMessage: errMsg,\r\n                });\r\n              }\r\n            }\r\n          });\r\n          this.toggleExpand(compart, true, true);\r\n        }\r\n      );\r\n      }\r\n      else {\r\n        notification.messageResultDetails.push({\r\n        keyFields: [\"RailReceiptManualEntry_ReceiptCode\"],\r\n        keyValues: [modRailReceipt.ReceiptCode],\r\n        isSuccess: false,\r\n        errorMessage: \"Wagon_limit_Exceeded\",\r\n      });\r\n      }\r\n    } else {\r\n      notification.messageResultDetails.push({\r\n        keyFields: [],\r\n        keyValues: [],\r\n        isSuccess: false,\r\n        errorMessage: \"ERRMSG_RAILRECEIPT_COMP_PLAN_LIST_EMPTY\",\r\n      });\r\n    }\r\n\r\n    this.setState({ validationErrors });\r\n    var returnValue = Object.values(validationErrors).every(function (value) {\r\n      return value === \"\";\r\n    });\r\n    if (notification.messageResultDetails.length > 0) {\r\n      this.props.onSaved(this.state.modRailReceipt, \"update\", notification);\r\n      return false;\r\n    }\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n    return returnValue;\r\n  }\r\n  createRailReceipt(modRailReceipt) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.railReceiptCode,\r\n        value: modRailReceipt.ReceiptCode,\r\n      },\r\n    ];\r\n    modRailReceipt.RailMarineReceiptCompartmentPlanList = [];\r\n    modRailReceipt.RailMarineReceiptCompartmentDetailPlanList.forEach(\r\n      (compart) => {\r\n        modRailReceipt.RailMarineReceiptCompartmentPlanList.push({\r\n          ShareHolderCode: compart.ShareholderCode,\r\n          FinishedProductCode: compart.FinishedProductCode,\r\n          CompartmentCode: compart.CompartmentCode,\r\n          TrailerCode: compart.TrailerCode,\r\n          PlannedQuantity: compart.Quantity,\r\n          PlanQuantityUOM: compart.QuantityUOM,\r\n          CompartmentSeqNoInVehicle: null,\r\n          Attributes: [],\r\n          AssociatedContractItems: null,\r\n          ReceiptCompartmentTanks: null,\r\n        });\r\n      }\r\n    );\r\n    var obj = {\r\n      ShareHolderCode: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      keyDataCode: KeyCodes.railReceiptCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modRailReceipt,\r\n    };\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"Receipt_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"RailReceiptManualEntry_ReceiptCode\"],\r\n          keyValues: [modRailReceipt.ReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.CreateRailReceipt,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getRailReceipt({ Common_Code: modRailReceipt.ReceiptCode });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: true,\r\n          });\r\n          console.log(\"Error in CreateRailReceipt:\", result.ErrorList);\r\n        }\r\n        this.props.onUpdateStatusOperation(modRailReceipt);\r\n        this.props.onSaved(modRailReceipt, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: true,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(modRailReceipt, \"add\", notification);\r\n      });\r\n  }\r\n  updateRailReceipt(modRailReceipt) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.railReceiptCode,\r\n        value: this.state.modRailReceipt.ReceiptCode,\r\n      },\r\n    ];\r\n    let i = 0;\r\n    modRailReceipt.RailMarineReceiptCompartmentDetailPlanList.forEach(\r\n      (compart) => {\r\n        modRailReceipt.RailMarineReceiptCompartmentPlanList[i].ShareholderCode =\r\n          compart.ShareholderCode;\r\n        modRailReceipt.RailMarineReceiptCompartmentPlanList[\r\n          i\r\n        ].FinishedProductCode = compart.FinishedProductCode;\r\n        modRailReceipt.RailMarineReceiptCompartmentPlanList[i].CompartmentCode =\r\n          compart.CompartmentCode;\r\n        modRailReceipt.RailMarineReceiptCompartmentPlanList[i].TrailerCode =\r\n          compart.TrailerCode;\r\n        modRailReceipt.RailMarineReceiptCompartmentPlanList[i].PlannedQuantity =\r\n          compart.Quantity;\r\n        modRailReceipt.RailMarineReceiptCompartmentPlanList[i].PlanQuantityUOM =\r\n          compart.QuantityUOM;\r\n        modRailReceipt.RailMarineReceiptCompartmentPlanList[i].Attributes =\r\n          compart.Attributes;\r\n      }\r\n    );\r\n    var obj = {\r\n      ShareHolderCode: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      keyDataCode: KeyCodes.railReceiptCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modRailReceipt,\r\n    };\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"Receipt_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"RailReceiptManualEntry_ReceiptCode\"],\r\n          keyValues: [modRailReceipt.ReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateRailReceipt,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getRailReceipt({ Common_Code: modRailReceipt.ReceiptCode });\r\n        } else {\r\n          this.setState({\r\n            saveEnabled: true,\r\n          });\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n        }\r\n        this.props.onSaved(modRailReceipt, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(modRailReceipt, \"modify\", notification);\r\n        this.setState({\r\n          saveEnabled: true,\r\n        });\r\n      });\r\n  }\r\n\r\n  getTransportationType() {\r\n    var transportationType = Constants.TransportationType.RAIL;\r\n    const { genericProps } = this.props;\r\n    if (\r\n      genericProps !== undefined &&\r\n      genericProps.transportationType !== undefined\r\n    ) {\r\n      transportationType = genericProps.transportationType;\r\n    }\r\n    return transportationType;\r\n  }\r\n\r\n  handleAllTerminalsChange = (checked) => {\r\n    try {\r\n      var modRailReceipt = lodash.cloneDeep(this.state.modRailReceipt);\r\n      if (checked) modRailReceipt.TerminalCodes = [...this.props.terminalCodes];\r\n      else modRailReceipt.TerminalCodes = [];\r\n      this.terminalSelectionChange(modRailReceipt.TerminalCodes);\r\n      this.setState({ modRailReceipt });\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptDetailsComposite:Error occured on handleAllTerminasChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getUoms() {\r\n    axios(\r\n      RestAPIs.GetUOMList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult.VOLUME)\r\n          ) {\r\n            var quantityUOMOptions = lodash.cloneDeep(\r\n              this.state.quantityUOMOptions\r\n            );\r\n            result.EntityResult.VOLUME.forEach((UOM) => {\r\n              quantityUOMOptions.push({\r\n                text: UOM,\r\n                value: UOM,\r\n              });\r\n            });\r\n            result.EntityResult.MASS.forEach((UOM) => {\r\n              quantityUOMOptions.push({\r\n                text: UOM,\r\n                value: UOM,\r\n              });\r\n            });\r\n            this.setState({ quantityUOMOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error in GetUOMList:\", error);\r\n      });\r\n  }\r\n\r\n  getCarrierCompanyCodes() {\r\n    axios(\r\n      RestAPIs.GetCarrierCodes +\r\n      \"?ShareholderCode=\" +\r\n      \"&Transportationtype=\" +\r\n      Constants.TransportationType.RAIL,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let carrierCompanyOptions = lodash.cloneDeep(\r\n              this.state.carrierCompanyOptions\r\n            );\r\n            result.EntityResult.forEach((carrier) => {\r\n              carrierCompanyOptions.push({\r\n                text: carrier,\r\n                value: carrier,\r\n              });\r\n            });\r\n            this.setState({ carrierCompanyOptions });\r\n            this.getTrailerCodes(result.EntityResult);\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetCarrierListForRole:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Carrier List:\", error);\r\n      });\r\n  }\r\n\r\n  getTrailerCodes(carrierCompanyCodeList) {\r\n    carrierCompanyCodeList.forEach((carrierCompanyCode) =>\r\n      axios(\r\n        RestAPIs.GetRailWagonCodes +\r\n        \"?CarrierCompanyCode=\" +\r\n        carrierCompanyCode +\r\n        \"&Transportationtype=\" +\r\n        Constants.TransportationType.RAIL,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (\r\n              result.EntityResult !== null &&\r\n              Array.isArray(result.EntityResult.RailWagonList)\r\n            ) {\r\n              let railWagonOptions = lodash.cloneDeep(\r\n                this.state.railWagonOptions\r\n              );\r\n              railWagonOptions[carrierCompanyCode] =\r\n                result.EntityResult.RailWagonList;\r\n              this.setState({ railWagonOptions });\r\n            }\r\n          } else {\r\n            console.log(\"Error in GetCarrierListForRole:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Carrier List:\", error);\r\n        })\r\n    );\r\n  }\r\n\r\n  getFinishedProductCodes() {\r\n    axios(\r\n      RestAPIs.GetFinishedProductListForShareholder +\r\n      \"?ShareholderCode=\" +\r\n      \"&Transportationtype=\" +\r\n      Constants.TransportationType.RAIL,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            let finishedProductOptions = result.EntityResult;\r\n            this.setState({ finishedProductOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetFinishedProductCodes:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while GetFinishedProductCodes List:\", error);\r\n      });\r\n  }\r\n\r\n  getSupplierOriginTerminals() {\r\n    axios(\r\n      RestAPIs.GetSupplierOriginTerminals +\r\n      \"?ShareholderCode=\" +\r\n      \"&Transportationtype=\" +\r\n      Constants.TransportationType.RAIL,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (Array.isArray(result.EntityResult)) {\r\n            let supplierDestinationOptions = {};\r\n            result.EntityResult.forEach((entity) => {\r\n              supplierDestinationOptions[entity.ShareholderCode] =\r\n                entity.SupplierOriginTerminalsList;\r\n            });\r\n            this.setState({ supplierDestinationOptions });\r\n          } else {\r\n            console.log(\"customerdestinations not identified for shareholder\");\r\n          }\r\n        } else {\r\n          console.log(\"Error in getOriginTerminals:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getOriginTerminals List:\", error);\r\n      });\r\n  }\r\n\r\n  getRailReceipt(selectedRow) {\r\n    var transportationType = this.getTransportationType();\r\n    emptyRailReceipt.TransportationType = transportationType;\r\n\r\n    emptyRailReceipt.QuantityUOM =\r\n      this.props.userDetails.EntityResult.PageAttibutes.DefaultQtyUOMForTransactionUI.RAIL;\r\n\r\n    if (selectedRow.Common_Code === undefined) {\r\n      this.handleResetAttributeValidationError();\r\n      this.setState(\r\n        {\r\n          railReceipt: { ...emptyRailReceipt },\r\n          modRailReceipt: { ...emptyRailReceipt },\r\n          modAssociations: [],\r\n          modRailReceiptCompartmentPlanList: [],\r\n          selectedAttributeList: [],\r\n          isDetail: \"true\",\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnRailReceipt\r\n          ),\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange([]);\r\n          } else {\r\n            this.localNodeAttribute();\r\n          }\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.railReceiptCode,\r\n        value: selectedRow.Common_Code,\r\n      },\r\n      {\r\n        key: KeyCodes.transportationType,\r\n        value: transportationType,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.railReceiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetRailReceipt,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.props.onUpdateStatusOperation(result.EntityResult);\r\n          if (result.EntityResult.ReceiptStatus === \"READY\") {\r\n            this.setState(\r\n              {\r\n                isDetail: \"true\",\r\n                railReceipt: lodash.cloneDeep(result.EntityResult),\r\n                modRailReceipt: lodash.cloneDeep(result.EntityResult),\r\n                modAssociations: this.getAssociationsFromReceipt(\r\n                  result.EntityResult\r\n                ),\r\n                saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnRailReceipt\r\n                ),\r\n              },\r\n              () => {\r\n                this.getKPIList(result.EntityResult.ReceiptCode)\r\n                if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                  this.terminalSelectionChange(\r\n                    this.state.modRailReceipt.TerminalCodes\r\n                  );\r\n                } else {\r\n                  this.localNodeAttribute();\r\n                }\r\n              }\r\n            );\r\n          } else {\r\n            this.setState(\r\n              {\r\n                isDetail: \"true\",\r\n                railReceipt: lodash.cloneDeep(result.EntityResult),\r\n                modRailReceipt: lodash.cloneDeep(result.EntityResult),\r\n                modAssociations: this.getAssociationsFromReceipt(\r\n                  result.EntityResult\r\n                ),\r\n                saveEnabled: this.props.currentAccess.ViewRailReceipt_Update,\r\n              },\r\n              () => {\r\n                this.getKPIList(result.EntityResult.ReceiptCode)\r\n                if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                  this.terminalSelectionChange([\r\n                    result.EntityResult.TerminalCode,\r\n                  ]);\r\n                } else {\r\n                  this.localNodeAttribute();\r\n                }\r\n              }\r\n            );\r\n          }\r\n          this.getRailReceiptWeighBridgeData(result.EntityResult);\r\n        } else {\r\n          this.setState({\r\n            railReceipt: lodash.cloneDeep(emptyRailReceipt),\r\n            modRailReceipt: lodash.cloneDeep(emptyRailReceipt),\r\n            isDetail: \"true\",\r\n          });\r\n          console.log(\"Error in GetRailReceipt:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting railReceipt:\", error);\r\n      });\r\n  }\r\n\r\n  getWagonHseInspectionStatus(ReceiptCode) {\r\n    axios(\r\n      RestAPIs.GetWagonHseInspectionStatus +\r\n      \"?TransactionType=Receipt\" +\r\n      \"&DispatchReceiptCode=\" +\r\n      ReceiptCode +\r\n      \"&ShareholderCode=\" +\r\n      this.props.selectedShareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (\r\n          result.IsSuccess === true &&\r\n          result.EntityResult !== null &&\r\n          Array.isArray(result.EntityResult.Table)\r\n        ) {\r\n          const modRailReceiptCompartmentPlanList = lodash.cloneDeep(\r\n            this.state.modRailReceiptCompartmentPlanList\r\n          );\r\n          for (let item of result.EntityResult.Table) {\r\n            for (let railReceiptCompartmentdata of modRailReceiptCompartmentPlanList) {\r\n              if (railReceiptCompartmentdata.TrailerCode === item.Code) {\r\n                if (\r\n                  item.HseInspectionStatus ===\r\n                  Constants.HSEInspectionStatus.NOT_DONE\r\n                )\r\n                  railReceiptCompartmentdata.HSEInspectionStatus = \"NOT_DONE\";\r\n                if (\r\n                  item.HseInspectionStatus ===\r\n                  Constants.HSEInspectionStatus.PASS\r\n                )\r\n                  railReceiptCompartmentdata.HSEInspectionStatus = \"PASS\";\r\n                if (\r\n                  item.HseInspectionStatus ===\r\n                  Constants.HSEInspectionStatus.FAIL\r\n                )\r\n                  railReceiptCompartmentdata.HSEInspectionStatus = \"FAIL\";\r\n                if (\r\n                  item.HseInspectionStatus ===\r\n                  Constants.HSEInspectionStatus.INPROGRESS\r\n                )\r\n                  railReceiptCompartmentdata.HSEInspectionStatus = \"INPROGRESS\";\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          this.setState({ modRailReceiptCompartmentPlanList });\r\n        } else {\r\n          console.log(\r\n            \"Error in getWagonHseInspectionStatus: \",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getWagonHseInspectionStatus: \", error);\r\n      });\r\n  }\r\n  getRailReceiptWeighBridgeData(railReceipt) {\r\n    const keyCode = [\r\n      {\r\n        key: \"TransactionType\",\r\n        value: \"Receipt\",\r\n      },\r\n      {\r\n        key: KeyCodes.transportationType,\r\n        value: Constants.TransportationType.RAIL,\r\n      },\r\n      {\r\n        key: \"DispatchReceiptCode\",\r\n        value: railReceipt.ReceiptCode,\r\n      },\r\n    ];\r\n    const obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.railReceiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetRailMarineDispatchReceiptWeighBridgeData,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (\r\n          result.IsSuccess === true &&\r\n          result.EntityResult !== null &&\r\n          Array.isArray(result.EntityResult.Table)\r\n        ) {\r\n          this.setState({\r\n            weightBridgeData: result.EntityResult.Table,\r\n            modWeightBridgeData: lodash.cloneDeep(result.EntityResult.Table),\r\n          });\r\n          this.setmodRailReceiptCompartmentPlanListFromReceipt(\r\n            railReceipt,\r\n            result.EntityResult.Table\r\n          );\r\n        } else {\r\n          this.setState({\r\n            weightBridgeData: [],\r\n            modWeightBridgeData: [],\r\n          });\r\n          this.setmodRailReceiptCompartmentPlanListFromReceipt(\r\n            railReceipt,\r\n            result.EntityResult.Table\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          weightBridgeData: [],\r\n          modWeightBridgeData: [],\r\n        });\r\n        console.log(\r\n          \"Error while getting GetRailMarineDispatchReceiptWeighBridgeData:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n  setmodRailReceiptCompartmentPlanListFromReceipt(\r\n    railReceipt,\r\n    weightBridgeDataList\r\n  ) {\r\n    const modRailReceiptCompartmentPlanList = [];\r\n    if (Array.isArray(railReceipt.RailMarineReceiptCompartmentPlanList)) {\r\n      railReceipt.RailMarineReceiptCompartmentPlanList.forEach((item) => {\r\n        let weightBridgeData;\r\n        for (let weightBridgeDataItem of weightBridgeDataList) {\r\n          if (weightBridgeDataItem.WagonCode === item.TrailerCode) {\r\n            weightBridgeData = weightBridgeDataItem;\r\n            break;\r\n          }\r\n        }\r\n        const modRailReceiptCompartmentPlan = {\r\n          ReceiptCode: item.ReceiptCode,\r\n          TrailerCode: item.TrailerCode,\r\n          CarrierCompanyCode: item.CarrierCompanyCode,\r\n          FinishedProductCode: item.FinishedProductCode,\r\n          ReceiptCompartmentStatus: getKeyByValue(\r\n            Constants.ReceiptCompartmentStatus,\r\n            item.ReceiptCompartmentStatus\r\n          ),\r\n\r\n          SequenceNo: item.SequenceNo,\r\n          PlannedQuantity:\r\n            item.PlannedQuantity !== null && item.PlannedQuantity !== \"\"\r\n              ? item.PlannedQuantity.toLocaleString() +\r\n              (item.PlanQuantityUOM ? \" \" + item.PlanQuantityUOM : \"\")\r\n              : \"\",\r\n          RevisedQuantity:\r\n            item.AdjustedPlanQuantity !== null &&\r\n              item.AdjustedPlanQuantity !== \"\"\r\n              ? item.AdjustedPlanQuantity.toLocaleString() +\r\n              (item.PlanQuantityUOM ? \" \" + item.PlanQuantityUOM : \"\")\r\n              : \"\",\r\n          UnloadedQuantity:\r\n            item.UnloadedQuantity !== null && item.UnloadedQuantity !== \"\"\r\n              ? item.UnloadedQuantity.toLocaleString() +\r\n              (item.UnloadedQuantityUOM ? \" \" + item.UnloadedQuantityUOM : \"\")\r\n              : \"\",\r\n\r\n          TareWeight: \"\",\r\n          LadenWeight: \"\",\r\n          DiffWeight: \"\",\r\n          HSEInspectionStatus: \"\",\r\n          ForceComplete: false,\r\n        };\r\n        if (\r\n          modRailReceiptCompartmentPlan.ReceiptCompartmentStatus !==\r\n          Constants.ReceiptCompartment_Status.FORCE_COMPLETED\r\n        ) {\r\n          if (this.state.tabActiveIndex === 1) {\r\n            this.setState({ saveEnabled: true });\r\n          }\r\n        }\r\n        if (weightBridgeData !== undefined) {\r\n          let tareWeightFlag = false;\r\n          let ladenWeightFlag = false;\r\n          if (\r\n            weightBridgeData.TareWeight !== \"\" &&\r\n            weightBridgeData.TareWeight !== null\r\n          ) {\r\n            tareWeightFlag = true;\r\n            modRailReceiptCompartmentPlan.TareWeight =\r\n              Math.round(weightBridgeData.TareWeight).toLocaleString() +\r\n              \" \" +\r\n              weightBridgeData.TareWeightUOM;\r\n          }\r\n          if (\r\n            weightBridgeData.LadenWeightInDispatchReceiptUOM !== \"\" &&\r\n            weightBridgeData.LadenWeightInDispatchReceiptUOM !== null\r\n          ) {\r\n            ladenWeightFlag = true;\r\n            modRailReceiptCompartmentPlan.LadenWeight =\r\n              Math.round(weightBridgeData.LadenWeight).toLocaleString() +\r\n              \" \" +\r\n              weightBridgeData.LadenWeightUOM;\r\n          }\r\n\r\n          if (tareWeightFlag && ladenWeightFlag) {\r\n            modRailReceiptCompartmentPlan.DiffWeight =\r\n              Math.round(\r\n                weightBridgeData.LadenWeight - weightBridgeData.TareWeight\r\n              ).toLocaleString() +\r\n              \" \" +\r\n              weightBridgeData.DispatchReceiptUOM;\r\n          } else if (!tareWeightFlag && ladenWeightFlag) {\r\n            modRailReceiptCompartmentPlan.DiffWeight =\r\n              modRailReceiptCompartmentPlan.LadenWeight;\r\n          } else if (tareWeightFlag && !ladenWeightFlag) {\r\n            if (Math.round(weightBridgeData.TareWeight) === 0) {\r\n              modRailReceiptCompartmentPlan.DiffWeight =\r\n                modRailReceiptCompartmentPlan.TareWeight;\r\n            } else {\r\n              modRailReceiptCompartmentPlan.DiffWeight =\r\n                \"-\" + modRailReceiptCompartmentPlan.TareWeight;\r\n            }\r\n          }\r\n        }\r\n        this.getWagonHseInspectionStatus(item.ReceiptCode);\r\n        modRailReceiptCompartmentPlanList.push(modRailReceiptCompartmentPlan);\r\n      });\r\n    }\r\n    this.setState({\r\n      modRailReceiptCompartmentPlanList,\r\n    });\r\n  }\r\n\r\n  generateCompartmentCode(compartments) {\r\n    var maxnumber = 0;\r\n    if (compartments === null || compartments.length === 0) return 1;\r\n    compartments.forEach((comp) => {\r\n      var compCode = comp.CompartmentCode;\r\n      if (compCode !== null || compCode !== \"\") {\r\n        if (!isNaN(parseInt(compCode))) {\r\n          let val = parseInt(compCode);\r\n\r\n          if (val > maxnumber) maxnumber = val;\r\n        }\r\n      }\r\n    });\r\n    return maxnumber + 1;\r\n  }\r\n\r\n  getAssociationsFromReceipt(railReceipt) {\r\n    let receiptAssociations = [];\r\n    if (Array.isArray(railReceipt.RailMarineReceiptCompartmentDetailPlanList)) {\r\n      railReceipt.RailMarineReceiptCompartmentDetailPlanList.forEach(\r\n        (receiptCompartment) => {\r\n          receiptAssociations.push({\r\n            AssociatedContractItems: receiptCompartment.AssociatedContractItems,\r\n            AssociatedOrderItems: receiptCompartment.AssociatedOrderItems,\r\n            Attributes: receiptCompartment.Attributes,\r\n            CarrierCompanyCode: receiptCompartment.CarrierCompanyCode,\r\n            CompartmentCode: receiptCompartment.CompartmentCode,\r\n            CompartmentSeqNoInVehicle:\r\n              receiptCompartment.CompartmentSeqNoInVehicle,\r\n            FinishedProductCode: receiptCompartment.FinishedProductCode,\r\n            OriginTerminalCode: receiptCompartment.OriginTerminalCode,\r\n            Quantity:\r\n              receiptCompartment.Quantity !== null &&\r\n                receiptCompartment.Quantity !== \"\"\r\n                ? receiptCompartment.Quantity.toLocaleString()\r\n                : null,\r\n            IsTransloading: receiptCompartment.IsTransloading,\r\n            QuantityUOM: receiptCompartment.QuantityUOM,\r\n            ReceiptCode: receiptCompartment.ReceiptCode,\r\n            SequenceNo: receiptCompartment.SequenceNo,\r\n            ShareholderCode: receiptCompartment.ShareholderCode,\r\n            SupplierCode: receiptCompartment.SupplierCode,\r\n            TrailerCode: receiptCompartment.TrailerCode,\r\n          });\r\n        }\r\n      );\r\n    }\r\n    // receiptAssociations = Utilities.addSeqNumberToListObject(\r\n    //     receiptAssociations\r\n    // );\r\n    return receiptAssociations;\r\n  }\r\n  getCompartmentsFromAssociations(modAssociations) {\r\n    let receiptCompartments = [];\r\n    if (Array.isArray(modAssociations)) {\r\n      modAssociations.forEach((modAssociation) => {\r\n        if (\r\n          !(\r\n            modAssociation.FinishedProductCode === null ||\r\n            modAssociation.FinishedProductCode === \"\"\r\n          ) ||\r\n          !(\r\n            modAssociation.SupplierCode === null ||\r\n            modAssociation.SupplierCode === \"\"\r\n          ) ||\r\n          !(\r\n            modAssociation.OriginTerminalCode === null ||\r\n            modAssociation.OriginTerminalCode === \"\"\r\n          )\r\n        ) {\r\n          receiptCompartments.push({\r\n            AssociatedContractItems: modAssociation.AssociatedContractItems,\r\n            AssociatedOrderItems: modAssociation.AssociatedOrderItems,\r\n            Attributes: modAssociation.Attributes,\r\n            AttributesforUI: modAssociation.AttributesforUI,\r\n            CarrierCompanyCode: modAssociation.CarrierCompanyCode,\r\n            CompartmentCode: modAssociation.CompartmentCode,\r\n            CompartmentSeqNoInVehicle: modAssociation.CompartmentSeqNoInVehicle,\r\n            FinishedProductCode: modAssociation.FinishedProductCode,\r\n            OriginTerminalCode: modAssociation.OriginTerminalCode,\r\n            Quantity: modAssociation.Quantity,\r\n            IsTransloading: modAssociation.IsTransloading,\r\n            QuantityUOM: this.state.modRailReceipt.QuantityUOM,\r\n            ReceiptCode: this.state.modRailReceipt.ReceiptCode,\r\n            SequenceNo: modAssociation.SequenceNo,\r\n            ShareholderCode: modAssociation.ShareholderCode,\r\n            SupplierCode: modAssociation.SupplierCode,\r\n            TrailerCode: modAssociation.TrailerCode,\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return receiptCompartments;\r\n  }\r\n\r\n  checkCompartmentSaveEnabled(compartmentPlanList) {\r\n    if (compartmentPlanList === null) {\r\n      return false;\r\n    }\r\n    for (let item of compartmentPlanList) {\r\n      const forceCompleteEnable =\r\n        item.ReceiptCompartmentStatus !==\r\n        Constants.ReceiptCompartment_Status.FORCE_COMPLETED;\r\n      if (forceCompleteEnable) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  handleTabChange = (activeIndex) => {\r\n    try {\r\n      this.setState({ tabActiveIndex: activeIndex });\r\n      if (activeIndex === 0) {\r\n        this.setState({\r\n          saveEnabled:\r\n            Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnRailReceipt\r\n            ) &&\r\n            (this.state.modRailReceipt.ReceiptStatus === \"READY\" ||\r\n              this.props.currentAccess.ViewRailReceipt_Update),\r\n        });\r\n      }\r\n      if (activeIndex === 1) {\r\n        this.setState({\r\n          saveEnabled:\r\n            this.checkCompartmentSaveEnabled(\r\n              this.state.modRailReceiptCompartmentPlanList\r\n            ) &&\r\n            Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnRailReceipt\r\n            ),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailDispatchDetailsComposite: Error occurred on handleTabChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleBack = () => {\r\n    try {\r\n      this.setState({\r\n        isReadyToRender: true,\r\n        isDetail: \"false\",\r\n        ViewUnloadingData: [],\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ViewMarineReceiptDetailsComposite:Error occured on handleBack\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleManualEntryTabChange = (activeIndex) => {\r\n    try {\r\n      this.setState({ manualEntryTabActiveIndex: activeIndex });\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailDispatchDetailsComposite: Error occurred on handleManualEntryTabChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleAttributeCellDataEdit = (attribute, value) => {\r\n    try {\r\n      attribute.DefaultValue = value;\r\n      this.setState({\r\n        attribute: attribute,\r\n      });\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on handleCellDataEdit\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  getAttributes(selectRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [railReceiptAttributeEntity, railReceiptComAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.RAILRECEIPTPLAN\r\n                ),\r\n              compartmentAttributeMetaDataList: lodash.cloneDeep(\r\n                result.EntityResult.RAILRECEIPTWAGONDETAILPLAN\r\n              ),\r\n            },\r\n            () => this.getRailReceipt(selectRow)\r\n          );\r\n        } else {\r\n          console.log(\"Error in getAttributes:\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n  fillAttributeDetails(modRailReceipt, attributeList) {\r\n    try {\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modRailReceipt.Attributes = [];\r\n      attributeList.forEach((comp) => {\r\n        let attribute = {\r\n          ListOfAttributeData: [],\r\n        };\r\n        attribute.TerminalCode = comp.TerminalCode;\r\n        comp.attributeMetaDataList.forEach((det) => {\r\n          attribute.ListOfAttributeData.push({\r\n            AttributeCode: det.Code,\r\n            AttributeValue: det.DefaultValue,\r\n          });\r\n        });\r\n        modRailReceipt.Attributes.push(attribute);\r\n      });\r\n      // For Compartment Attributes\r\n      modRailReceipt.RailMarineReceiptCompartmentDetailPlanList.forEach(\r\n        (comp) => {\r\n          let selectedTerminals = [];\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode)\r\n            selectedTerminals = lodash.cloneDeep(modRailReceipt.TerminalCodes);\r\n          else {\r\n            var compAttributeMetaDataList = lodash.cloneDeep(\r\n              this.state.compartmentAttributeMetaDataList\r\n            );\r\n            if (compAttributeMetaDataList.length > 0)\r\n              selectedTerminals = [compAttributeMetaDataList[0].TerminalCode];\r\n          }\r\n          let terminalAttributes = [];\r\n          comp.Attributes = [];\r\n          if (selectedTerminals === null) selectedTerminals = [];\r\n          selectedTerminals.forEach((terminal) => {\r\n            if (\r\n              comp.AttributesforUI !== null &&\r\n              comp.AttributesforUI !== undefined\r\n            )\r\n              terminalAttributes = comp.AttributesforUI.filter(function (\r\n                attTerminal\r\n              ) {\r\n                return attTerminal.TerminalCode === terminal;\r\n              });\r\n\r\n            let attribute = {\r\n              ListOfAttributeData: [],\r\n            };\r\n            attribute.TerminalCode = terminal;\r\n            terminalAttributes.forEach((termAtt) => {\r\n              if (termAtt.AttributeValue !== \"\" || termAtt.IsMandatory === true)\r\n                attribute.ListOfAttributeData.push({\r\n                  AttributeCode: termAtt.AttributeCode,\r\n                  AttributeValue: termAtt.AttributeValue,\r\n                });\r\n            });\r\n            if (\r\n              attribute.ListOfAttributeData !== null &&\r\n              attribute.ListOfAttributeData !== undefined &&\r\n              attribute.ListOfAttributeData.length > 0\r\n            )\r\n              comp.Attributes.push(attribute);\r\n          });\r\n        }\r\n      );\r\n      this.setState({ modRailReceipt });\r\n      return modRailReceipt;\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptDetailsComposite:Error occured on fillAttributeDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals == null) {\r\n        selectedTerminals = [];\r\n      }\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var selectedAttributeList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.attributeMetaDataList\r\n        );\r\n        selectedAttributeList = lodash.cloneDeep(\r\n          this.state.selectedAttributeList\r\n        );\r\n        const attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        var modReceipt = lodash.cloneDeep(this.state.modRailReceipt);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = selectedAttributeList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.RAILRECEIPTPLAN.forEach(function (\r\n              attributeMetaData\r\n            ) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                var Attributevalue = modReceipt.Attributes.find(\r\n                  (baseproductAttribute) => {\r\n                    return baseproductAttribute.TerminalCode === terminal;\r\n                  }\r\n                );\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute =\r\n                      Attributevalue.ListOfAttributeData.find((x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      });\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        selectedAttributeList = [];\r\n        selectedAttributeList = attributesTerminalsList;\r\n        selectedAttributeList = Utilities.attributesConvertoDecimal(\r\n          selectedAttributeList\r\n        );\r\n\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.formCompartmentAttributes(selectedTerminals);\r\n        this.setState({ selectedAttributeList, attributeValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (Array.isArray(attributeMetaDataList.RAILRECEIPTPLAN) && attributeMetaDataList.RAILRECEIPTPLAN.length > 0) {\r\n        this.terminalSelectionChange([\r\n          attributeMetaDataList.RAILRECEIPTPLAN[0].TerminalCode,\r\n        ]);\r\n      }\r\n      var compAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.compartmentAttributeMetaDataList\r\n      );\r\n      if (Array.isArray(compAttributeMetaDataList) && compAttributeMetaDataList.length > 0)\r\n        this.formCompartmentAttributes([\r\n          compAttributeMetaDataList[0].TerminalCode,\r\n        ]);\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors:\r\n          Utilities.getAttributeInitialValidationErrors(\r\n            attributeMetaDataList.RAILRECEIPTPLAN\r\n          ),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"handleAttributeValidationError:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  formCompartmentAttributes(selectedTerminals) {\r\n    try {\r\n      let attributes = lodash.cloneDeep(\r\n        this.state.compartmentAttributeMetaDataList\r\n      );\r\n\r\n      attributes = attributes.filter(function (attTerminal) {\r\n        return selectedTerminals.some(function (selTerminal) {\r\n          return attTerminal.TerminalCode === selTerminal;\r\n        });\r\n      });\r\n      let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n      let compAttributes = [];\r\n      attributes.forEach((att) => {\r\n        att.attributeMetaDataList.forEach((attribute) => {\r\n          compAttributes.push({\r\n            AttributeCode: attribute.Code,\r\n            AttributeName: attribute.DisplayName,\r\n            AttributeValue: attribute.DefaultValue,\r\n            TerminalCode: attribute.TerminalCode,\r\n            IsMandatory: attribute.IsMandatory,\r\n            DataType: attribute.DataType,\r\n            IsReadonly: attribute.IsReadonly,\r\n            compSequenceNo: \"\",\r\n          });\r\n        });\r\n      });\r\n      let attributesforNewComp = lodash.cloneDeep(compAttributes);\r\n      modAssociations.forEach((comp) => {\r\n        if (\r\n          (comp.ReceiptCode === null || comp.ReceiptCode === \"\") &&\r\n          (comp.AttributesforUI === null || comp.AttributesforUI === undefined)\r\n        ) {\r\n          comp.AttributesforUI = [];\r\n          attributesforNewComp.forEach((assignedAttributes) => {\r\n            assignedAttributes.compSequenceNo = comp.SequenceNo;\r\n            comp.AttributesforUI.push(assignedAttributes);\r\n          });\r\n        } else {\r\n          if (\r\n            comp.AttributesforUI !== null &&\r\n            comp.AttributesforUI !== undefined\r\n          ) {\r\n            comp.AttributesforUI = comp.AttributesforUI.filter(function (\r\n              attTerminal\r\n            ) {\r\n              return selectedTerminals.some(function (selTerminal) {\r\n                return attTerminal.TerminalCode === selTerminal;\r\n              });\r\n            });\r\n\r\n            compAttributes = compAttributes.filter(function (attTerminal) {\r\n              return !comp.AttributesforUI.some(function (selTerminal) {\r\n                return attTerminal.TerminalCode === selTerminal.TerminalCode;\r\n              });\r\n            });\r\n          } else comp.AttributesforUI = [];\r\n\r\n          let tempCompAttributes = lodash.cloneDeep(compAttributes);\r\n          if (\r\n            Array.isArray(comp.Attributes) &&\r\n            comp.Attributes !== null &&\r\n            comp.Attributes !== undefined &&\r\n            comp.Attributes.length > 0\r\n          ) {\r\n            let selectedTerminalAttributes = comp.Attributes.filter(function (\r\n              attTerminal\r\n            ) {\r\n              return selectedTerminals.some(function (selTerminal) {\r\n                return attTerminal.TerminalCode === selTerminal;\r\n              });\r\n            });\r\n            selectedTerminalAttributes.forEach((att) => {\r\n              att.ListOfAttributeData.forEach((attData) => {\r\n                let tempAttIndex = tempCompAttributes.findIndex(\r\n                  (item) =>\r\n                    item.TerminalCode === att.TerminalCode &&\r\n                    item.AttributeCode === attData.AttributeCode\r\n                );\r\n                if (tempAttIndex >= 0)\r\n                  tempCompAttributes[tempAttIndex].AttributeValue =\r\n                    attData.AttributeValue;\r\n              });\r\n            });\r\n            tempCompAttributes.forEach((assignedAttributes) => {\r\n              assignedAttributes.compSequenceNo = comp.SequenceNo;\r\n              comp.AttributesforUI.push(assignedAttributes);\r\n            });\r\n          } else {\r\n            let temp = lodash.cloneDeep(compAttributes);\r\n            temp.forEach((assignedAttributes) => {\r\n              assignedAttributes.compSequenceNo = comp.SequenceNo;\r\n              comp.AttributesforUI.push(assignedAttributes);\r\n            });\r\n          }\r\n        }\r\n        this.toggleExpand(comp, true, true);\r\n        comp.AttributesforUI = Utilities.addSeqNumberToListObject(\r\n          comp.AttributesforUI\r\n        );\r\n      });\r\n      this.setState({ modAssociations });\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptDetailsComposite:Error in forming Compartment Attributes\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  toggleExpand = (data, open, isTerminalAdded = false) => {\r\n    //console.log(\"Data in Toggle\", data)\r\n    let expandedRows = this.state.expandedRows;\r\n    let expandedRowIndex = expandedRows.findIndex(\r\n      (item) => item.SequenceNo === data.SequenceNo\r\n    );\r\n    if (open) {\r\n      if (isTerminalAdded && expandedRowIndex >= 0) {\r\n        expandedRows.splice(expandedRowIndex, 1);\r\n        expandedRows.push(data);\r\n      } else if (expandedRowIndex >= 0) {\r\n        expandedRows.splice(expandedRowIndex, 1);\r\n      }\r\n    } else {\r\n      if (expandedRowIndex >= 0) {\r\n        expandedRows = expandedRows.filter(\r\n          (x) => x.Code !== data.Code && x.SequenceNo !== data.SequenceNo\r\n        );\r\n      } else expandedRows.push(data);\r\n    }\r\n    this.setState({ expandedRows });\r\n  };\r\n  handleCompAttributeCellDataEdit = (compAttribute, value) => {\r\n    let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n    let compIndex = modAssociations.findIndex(\r\n      (item) => item.SequenceNo === compAttribute.rowData.compSequenceNo\r\n    );\r\n    if (compIndex >= 0) {\r\n      if (compAttribute.rowData.DataType === \"Bool\") {\r\n        if (compAttribute.rowData.AttributeValue === \"true\") {\r\n          modAssociations[compIndex].AttributesforUI[\r\n            // compAttribute.rowIndex\r\n            compAttribute.rowData.SeqNumber - 1\r\n          ].AttributeValue = \"false\";\r\n        } else {\r\n          modAssociations[compIndex].AttributesforUI[\r\n            // compAttribute.rowIndex\r\n            compAttribute.rowData.SeqNumber - 1\r\n          ].AttributeValue = \"true\";\r\n        }\r\n      } else {\r\n        modAssociations[compIndex].AttributesforUI[\r\n          // compAttribute.rowIndex\r\n          compAttribute.rowData.SeqNumber - 1\r\n        ].AttributeValue = value;\r\n      }\r\n    }\r\n    this.setState({ modAssociations });\r\n    if (compIndex >= 0)\r\n      this.toggleExpand(modAssociations[compIndex], true, true);\r\n  };\r\n  getKPIList(railReceiptCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    )\r\n    if (KPIView === true) {\r\n\r\n      let objKPIRequestData = {\r\n        PageName: kpiRailReceiptDetails,\r\n        TransportationType: Constants.TransportationType.RAIL,\r\n        InputParameters: [{ key: \"ReceiptCode\", value: railReceiptCode }],\r\n      };\r\n      axios(\r\n        RestApis.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({ railReceiptKPIList: result.EntityResult.ListKPIDetails });\r\n          } else {\r\n            this.setState({ railReceiptKPIList: [] });\r\n            console.log(\"Error in pipeline KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting PipelineDispatch KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"ViewRailReceiptDetails_LastUpdatedTime\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modRailReceipt.LastUpdatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modRailReceipt.LastUpdatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"ViewRailReceiptDetails_LastActiveTime\",\r\n        fieldValue:\r\n          this.state.modRailReceipt.LastActiveTime !== undefined &&\r\n            this.state.modRailReceipt.LastActiveTime !== null\r\n            ? new Date(\r\n              this.state.modRailReceipt.LastActiveTime\r\n            ).toLocaleDateString() +\r\n            \" \" +\r\n            new Date(\r\n              this.state.modRailReceipt.LastActiveTime\r\n            ).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"ViewRailReceiptDetails_CreatedTime\",\r\n        fieldValue:\r\n          new Date(this.state.modRailReceipt.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modRailReceipt.CreatedTime).toLocaleTimeString(),\r\n      },\r\n    ];\r\n    return this.state.isDetail === \"true\" ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.railReceipt.ReceiptCode}\r\n            newEntityName=\"Rail_Receipt_NewReceipt\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <TMDetailsKPILayout KPIList={this.state.railReceiptKPIList}> </TMDetailsKPILayout>\r\n        <ErrorBoundary>\r\n          <RailReceiptDetails\r\n            operationsVisibilty={this.state.operationsVisibilty}\r\n            modRailReceiptCompartmentPlanList={\r\n              this.state.modRailReceiptCompartmentPlanList\r\n            }\r\n            selectedCompRow={this.state.selectedCompRow}\r\n            railReceipt={this.state.railReceipt}\r\n            modRailReceipt={this.state.modRailReceipt}\r\n            modAssociations={this.state.modAssociations}\r\n            validationErrors={this.state.validationErrors}\r\n            listOptions={{\r\n              shareholders: this.state.shareholders,\r\n              terminalCodes: this.props.terminalCodes,\r\n              quantityUOMOptions: this.state.quantityUOMOptions,\r\n              carrierCompanyOptions: this.state.carrierCompanyOptions,\r\n              railWagonOptions: this.state.railWagonOptions,\r\n              finishedProductOptions: this.state.finishedProductOptions,\r\n              supplierDestinationOptions: this.state.supplierDestinationOptions,\r\n            }}\r\n            onFieldChange={this.handleChange}\r\n            onAllTerminalsChange={this.handleAllTerminalsChange}\r\n            handleAssociationSelectionChange={\r\n              this.handleAssociationSelectionChange\r\n            }\r\n            handleCellDataEdit={this.handleCellDataEdit}\r\n            handleAttributeCellDataEdit={this.handleAttributeCellDataEdit}\r\n            handleAddAssociation={this.handleAddAssociation}\r\n            handleDeleteAssociation={this.handleDeleteAssociation}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            selectedAttributeList={this.state.selectedAttributeList}\r\n            viewTab={this.props.viewTab}\r\n            onTabChange={this.handleTabChange}\r\n            handleCompAttributeCellDataEdit={\r\n              this.handleCompAttributeCellDataEdit\r\n            }\r\n            toggleExpand={this.toggleExpand}\r\n            expandedRows={this.state.expandedRows}\r\n            compartmentDetailsPageSize={\r\n              this.props.userDetails.EntityResult.PageAttibutes\r\n                .WebPortalListPageSize\r\n            }\r\n            enableHSEInspection={this.props.enableHSEInspection}\r\n            railLookUpData={this.props.railLookUpData}\r\n            WagonDetailTab={\r\n              this.state.railReceipt.ReceiptCode === \"\" ||\r\n                this.state.railReceipt.ReceiptCode === null ||\r\n                this.state.railReceipt.ReceiptCode === undefined\r\n                ? []\r\n                : [\"\"]\r\n            }\r\n            isTransloading={this.state.isTransloading}\r\n            currentAccess={this.props.currentAccess}\r\n          ></RailReceiptDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n              functionName={\r\n                this.state.railReceipt.ReceiptCode  === \"\"\r\n                  ? functionGroups.add\r\n                  : functionGroups.modify\r\n              }\r\n              functionGroup={fnRailReceipt}\r\n              handleOperation={this.saveRailReceipt}\r\n              handleClose={this.handleAuthenticationClose}\r\n            ></UserAuthenticationLayout>\r\n          ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (receipt) => {\r\n  return {\r\n    userActions: bindActionCreators(getUserDetails, receipt),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(RailReceiptDetailsComposite);\r\n\r\nRailReceiptDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n  viewTab: PropTypes.number.isRequired,\r\n  railReceipt: PropTypes.object.isRequired,\r\n  handleOperationButtonClick: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Select, Checkbox } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nAssociatedTerminals.propTypes = {\r\n  terminalList: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  selectedTerminal: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  validationError: PropTypes.string,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onCheckChange: PropTypes.func.isRequired,\r\n};\r\nAssociatedTerminals.defaultProps = {\r\n  terminalList: [],\r\n  selectedTerminal: [],\r\n  validationError: \"\",\r\n};\r\nexport function AssociatedTerminals({\r\n  terminalList,\r\n  selectedTerminal,\r\n  validationError,\r\n  onFieldChange,\r\n  onCheckChange,\r\n}) {\r\n  //console.log(\"component terminalList\", terminalList);\r\n  if (selectedTerminal === null) selectedTerminal = [];\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <div style={{ width: \"80%\" }}>\r\n            <Select\r\n              fluid\r\n              placeholder={t(\"Common_Select\")}\r\n              label={t(\"TerminalCodes\")}\r\n              value={selectedTerminal}\r\n              multiple={true}\r\n              options={Utilities.transferListtoOptions(terminalList)}\r\n              onChange={(data) => onFieldChange(\"TerminalCodes\", data)}\r\n              error={t(validationError)}\r\n              disabled={terminalList.length === 0}\r\n              reserveSpace={false}\r\n            />\r\n          </div>\r\n          <div className=\"ddlSelectAll\">\r\n            <Checkbox\r\n              label={t(\"Common_All\")}\r\n              checked={\r\n                Array.isArray(selectedTerminal) &&\r\n                selectedTerminal.length === terminalList.length\r\n              }\r\n              onChange={(checked) => onCheckChange(checked)}\r\n            ></Checkbox>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n"],"names":["RailReceiptDetails","_ref","modRailReceiptCompartmentPlanList","railReceipt","modRailReceipt","modAssociations","validationErrors","listOptions","selectedCompRow","onFieldChange","onAllTerminalsChange","handleCellDataEdit","handleAttributeCellDataEdit","handleAssociationSelectionChange","handleAddAssociation","handleDeleteAssociation","isEnterpriseNode","viewTab","enableHSEInspection","selectedAttributeList","attributeValidationErrors","onTabChange","toggleExpand","handleCompAttributeCellDataEdit","compartmentDetailsPageSize","expandedRows","railLookUpData","WagonDetailTab","isTransloading","currentAccess","t","useTranslation","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","modelOpen","setModelOpen","useState","modCellData","setModCellData","handleCustomEditDropDown","cellData","dropDownoptions","_jsx","Select","className","value","rowIndex","field","fluid","options","onChange","indicator","reserveSpace","search","noResultsMessage","handleCustomEditTextBox","Input","DisableEnableControl","ViewRailReceipt_Update","ReceiptStatus","Constants","READY","handleAttributeType","data","attribute","rowData","DataType","toLowerCase","STRING","INT","FLOAT","LONG","DOUBLE","AttributeValue","disabled","IsReadonly","BOOL","Checkbox","checked","toString","DATETIME","DatePicker","undefined","Date","showYearSelector","error","console","log","handleIsRequiredCompAttributes","IsMandatory","_jsxs","children","AttributeName","class","expanderTemplate","open","findIndex","x","SequenceNo","compSequenceNo","onClick","Icon","root","name","rowExpansionTemplate","Array","isArray","AttributesforUI","length","DataTable","rows","Column","header","editable","renderer","Pagination","TranslationConsumer","ReceiptCode","label","ScheduledDate","type","disablePast","displayFormat","getCurrentDateFormat","CreatedFromEntity","minuteStep","Description","placeholder","QuantityUOM","quantityUOMOptions","_Fragment","AssociatedTerminals","terminalList","terminalCodes","selectedTerminal","TerminalCodes","onCheckChange","ActualTerminalCode","map","ErrorBoundary","Accordion","Content","title","AttributeDetails","attributeMetaDataList","Tab","defaultActiveIndex","Pane","size","selectionMode","selection","onSelectionChange","handleIsRequiredCompartmentCell","editFieldType","customEditRenderer","celldata","carrierCompanyOptions","railWagonOptions","CarrierCompanyCode","forEach","railWagon","push","text","handleRailWagonEditDropDown","shareholders","finishedProductOptions","ShareholderCode","productCode","handleProductEditDropDown","supplierOptions","supplierDestinationOptions","Object","keys","customer","handleSupplierEditDropDown","destinationOptions","SupplierCode","destination","handleOriginalTerminalEditDropDown","PlanType","toLocaleString","decimalDisplayValues","item","IsTransloadingInDataTable","initialWidth","index","scrollable","ReceiptCompartmentStatus","FORCE_COMPLETED","UNLOADING","style","textAlign","checkBoxInDataTable","Modal","Footer","Button","content","defaultProps","RailReceiptDetailsComposite","Component","constructor","_this","arguments","this","state","isWagonDetail","lodash","emptyRailReceipt","weightBridgeData","modWeightBridgeData","Utilities","railReceiptValidationDef","isDetail","selectedShareholder","selectedRow","selectedItems","getShareholders","ViewUnloadingData","saveEnabled","isViewAuditTrail","tabActiveIndex","operationsVisibilty","add","save","authorizeToLoad","closeReceipt","viewAuditTrail","viewUnloadingDetails","printRAN","viewBOD","printBOD","bSIOutbound","manualEntry","adjustPlan","forceComplete","compartmentAttributeMetaDataList","expandedCompDetailRows","additiveDetails","saveCompartmentEnable","railReceiptKPIList","maxNumberOfCompartments","showAuthenticationLayout","tempRailReceipt","operationPermissionControl","receiptOperations","indexOf","ViewRailReceipt_AuthorizeToUnload","ViewRailReceipt_RecordWeight","recordWeight","ViewRailReceipt_CloseReceipt","ViewRailReceipt_ViewAuditTrail","ViewRailReceipt_ViewLoadingDetails","ViewRailReceipt_PrintRAN","ViewRailReceipt_ViewBOD","ViewRailReceipt_PrintBOD","ViewRailReceipt_BISOutbound","ViewRailReceipt_ManualEntry","setState","handleChange","propertyName","Active","Remarks","terminalSelectionChange","handleReset","key","getAssociationsFromReceipt","props","userDetails","EntityResult","IsEnterpriseNode","handleResetAttributeValidationError","localNodeAttribute","saveRailReceipt","handleAuthenticationClose","createRailReceipt","updateRailReceipt","handleSave","RailMarineReceiptCompartmentDetailPlanList","getCompartmentsFromAssociations","attributeList","validateSave","fillAttributeDetails","i","Quantity","IsWebPortalUser","CompartmentDatas","railReceiptCode","ForceComplete","shCode","compartmentRow","ForceCompleted","TrailerCode","KeyData","ShareHolderCode","KeyCodes","Key","Value","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","Common_Code","isSuccess","errorMessage","axios","RestApis","tokenDetails","tokenInfo","then","response","result","IsSuccess","getRailReceipt","ErrorList","toast","NotifyEvent","notificationMessage","autoClose","catch","IsArchived","newComp","AssociatedContractItems","AssociatedOrderItems","Attributes","CompartmentCode","CompartmentSeqNoInVehicle","FinishedProductCode","OriginTerminalCode","formCompartmentAttributes","obj","filter","com","cindex","handleDateTextChange","newVal","carrierCompanyCodeOptions","supplierDestinationList","IsTransloading","e","handleAllTerminalsChange","handleTabChange","activeIndex","FunctionsList","functionGroups","modify","fnRailReceipt","checkCompartmentSaveEnabled","handleBack","isReadyToRender","handleManualEntryTabChange","manualEntryTabActiveIndex","DefaultValue","Code","isTerminalAdded","expandedRowIndex","splice","compAttribute","compIndex","SeqNumber","componentDidMount","getAttributes","getUoms","getCarrierCompanyCodes","getFinishedProductCodes","getSupplierOriginTerminals","getTransloading","RAILEnable","RestAPIs","isNaN","parseInt","ShareholderList","fillDetails","compart","RailMarineReceiptCompartmentPlanList","PlannedQuantity","componentWillReceiveProps","nextProps","attributeMetaData","railReceiptCompartDef","col","err","validator","displayName","updatedAttributes","uIAttributes","some","selAttribute","isPresent","ListOfAttributeData","AttributeCode","errMsg","returnValue","values","every","onSaved","keyCode","PlanQuantityUOM","ReceiptCompartmentTanks","PrimaryShareholder","keyDataCode","onUpdateStatusOperation","getTransportationType","transportationType","RAIL","genericProps","VOLUME","UOM","MASS","carrier","getTrailerCodes","carrierCompanyCodeList","carrierCompanyCode","RailWagonList","entity","SupplierOriginTerminalsList","TransportationType","PageAttibutes","DefaultQtyUOMForTransactionUI","getKPIList","getRailReceiptWeighBridgeData","getWagonHseInspectionStatus","Table","railReceiptCompartmentdata","HseInspectionStatus","NOT_DONE","HSEInspectionStatus","PASS","FAIL","INPROGRESS","setmodRailReceiptCompartmentPlanListFromReceipt","weightBridgeDataList","weightBridgeDataItem","WagonCode","modRailReceiptCompartmentPlan","getKeyByValue","RevisedQuantity","AdjustedPlanQuantity","UnloadedQuantity","UnloadedQuantityUOM","TareWeight","LadenWeight","DiffWeight","tareWeightFlag","ladenWeightFlag","Math","round","TareWeightUOM","LadenWeightInDispatchReceiptUOM","LadenWeightUOM","DispatchReceiptUOM","generateCompartmentCode","compartments","maxnumber","comp","compCode","val","receiptAssociations","receiptCompartment","receiptCompartments","modAssociation","compartmentPlanList","selectRow","railReceiptAttributeEntity","railReceiptComAttributeEntity","RAILRECEIPTPLAN","RAILRECEIPTWAGONDETAILPLAN","det","selectedTerminals","compAttributeMetaDataList","terminalAttributes","attTerminal","termAtt","attributesTerminalsList","modReceipt","existitem","Attributevalue","baseproductAttribute","valueAttribute","attributes","selTerminal","compAttributes","att","DisplayName","attributesforNewComp","tempCompAttributes","attData","tempAttIndex","assignedAttributes","view","fnKPIInformation","objKPIRequestData","PageName","kpiRailReceiptDetails","InputParameters","ListKPIDetails","render","popUpContents","fieldName","fieldValue","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","LastActiveTime","CreatedTime","TMDetailsHeader","entityCode","newEntityName","TMDetailsKPILayout","KPIList","WebPortalListPageSize","TMDetailsUserActions","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","receipt","userActions","bindActionCreators","validationError","display","justifyContent","width","multiple"],"sourceRoot":""}