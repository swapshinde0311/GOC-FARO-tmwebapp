{"version":3,"file":"static/js/679.6fbeb686.chunk.js","mappings":"qMAoDO,SAASA,EAAaC,GAazB,IAb0B,oBAC5BC,EAAmB,eACnBC,EAAc,aACdC,EAAY,oBACZC,EAAmB,oBACnBC,EAAmB,SACnBC,EAAQ,MACRC,EAAK,aACLC,EAAY,WACZC,EAAU,sBACVC,EAAqB,WACrBC,EAAU,cACVC,GACDZ,EACC,MAAOa,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GA2C3C,SAASG,IACHjB,EAAoBkB,MAClBX,EAAaY,OAAS,EACCH,GAAP,IAAdD,GAGJT,IAGN,CAgHA,OACEc,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAMC,MAAO,CAAEC,WAAY,aAAcC,QAAS,OAAQC,SAAA,EACvEC,EAAAA,EAAAA,KAAA,OACEL,UAAU,8CACVC,MAAO,CAAEE,QAAS,OAAQC,UAE1BL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAMC,MAAO,CAAEK,UAAW,OAAQJ,WAAY,IAAKE,SAAA,EAChEC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,+CAA8CI,UAC3DL,EAAAA,EAAAA,MAACQ,EAAAA,EAAa,CAAAH,SAAA,CAAC,KAhKrBC,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAV,EAAAA,EAAAA,MAACW,EAAAA,WAAU,CAAAN,SAAA,CACRxB,EAAe+B,QAAQC,KAAKC,IAEzBR,EAAAA,EAAAA,KAACK,EAAAA,WAAWI,KAAI,CACdC,QAASA,UAEqBC,IAA1B5B,GAC0B,OAA1BA,GAEAA,EACEyB,EAAWI,SACXrC,EAAe+B,QAEnB,EACAP,SAGDK,EAAEI,EAAWK,eAFTL,EAAWI,aAMtBZ,EAAAA,EAAAA,KAACK,EAAAA,WAAWI,KAAI,CAAAV,SACbK,EAAE7B,EAAesC,eADEtC,EAAeqC,qBA2IvCZ,EAAAA,EAAAA,KAAA,OACEL,UAAU,+CACZI,UAEEC,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAJ,EAAAA,EAAAA,KAAA,OACEL,UAAU,kBACVC,MAAO,CAAEkB,eAAgB,cAAef,UAExB,IAAfjB,EACC,IAEAY,EAAAA,EAAAA,MAAAqB,EAAAA,SAAA,CAAAhB,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAAD,UACEL,EAAAA,EAAAA,MAAA,MAAIC,UAAU,UAASI,SAAA,CAAEK,EAAE,sBAAsB,UAEnDJ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,WAAUI,UACvBC,EAAAA,EAAAA,KAACgB,EAAAA,OACC,CACAC,YAAab,EAAE,sBACfc,MAAOzC,EACP0C,UAAW7C,EAAoB8C,YAC/BC,QAnMfC,EAAAA,GAAgC9C,GAoMjB+C,SAAWL,GAAUxC,EAAoBwC,iBAhE7DlB,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAV,EAAAA,EAAAA,MAAC8B,EAAAA,MAAK,CAACC,KAAMvC,EAAWwC,KAAK,QAAO3B,SAAA,EAClCC,EAAAA,EAAAA,KAACwB,EAAAA,MAAMG,QAAO,CAAA5B,UACZC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAIK,EAAE,yBAGVV,EAAAA,EAAAA,MAAC8B,EAAAA,MAAMI,OAAM,CAAA7B,SAAA,EACXC,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLC,KAAK,YACLC,QAAS3B,EAAE,UACXM,QAASA,IAAMvB,GAAa,MAE9Ba,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLC,KAAK,UACLC,QAAS3B,EAAE,8BACXM,QAASA,KACPvB,GAAa,GACbR,GAAU,kBA0DtBqB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,4CAA2CI,UAvJ1DL,EAAAA,EAAAA,MAAA,OACEE,MAAO,CAAEoC,MAAO,QAASC,QAAS,eAAgBhC,UAAW,QAASF,SAAA,CAErEf,GAAagB,EAAAA,EAAAA,KAACkC,EAAAA,MAAK,CAClBC,SAAS,eACTxC,UAAU,mBACVyC,SACEpC,EAAAA,EAAAA,KAAA,OACEL,WACGrB,EAAoBkB,IACjB,cACA,sBAAwB,YAE9BkB,QAASnB,EAAiBQ,UAE1BC,EAAAA,EAAAA,KAACqC,EAAAA,KAAI,CACHC,KAAK,SACLC,KAAK,aACLb,KAAK,QACLc,MAAM,YAIZC,GAAG,QACHhB,KAAMpC,EAAUU,UAEhBC,EAAAA,EAAAA,KAAA,OAAK0C,aAAcA,IAAMpD,GAAa,GAAOS,UAC3CC,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAJ,EAAAA,EAAAA,KAAC2C,EAAAA,aAAY,CAAA5C,UACXL,EAAAA,EAAAA,MAACiD,EAAAA,aAAY,CAAA5C,SAAA,EACXC,EAAAA,EAAAA,KAAC2C,EAAAA,aAAaC,OAAM,CAAA7C,SACjBK,EAAE,mBAEJvB,EAAa0B,KAAKsC,IAEf7C,EAAAA,EAAAA,KAAC2C,EAAAA,aAAalC,KAAI,CAChBC,QAASA,KAAMoC,OA3CfC,EA2C8BF,EAAKG,UA1CzD1D,GAAa,QACbV,EAAMmE,GAFR,IAAwBA,CA2C8C,EAAAhD,SAE7CK,EAAEyC,EAAKI,2BASf,GACVhE,GAAgBe,EAAAA,EAAAA,KAAA,OACfJ,MAAO,CAAEsD,WAAY,QACrBxC,QAASA,KACHpC,EAAoB6E,QACtBhE,GAAa,EAGf,EAEFQ,WACGrB,EAAoB6E,OACjB,cACA,sBAAwB,YAC7BpD,UAEDC,EAAAA,EAAAA,KAACqC,EAAAA,KAAI,CAACC,KAAK,SAASC,KAAK,SAASb,KAAK,QAAQc,MAAM,YAC9C,UA2FjB,CAxPApE,EAAcgF,aAAe,CAC3B9E,oBAAqB,CAAEkB,KAAK,EAAO2D,QAAQ,EAAO/B,aAAa,GAC/D7C,eAAgB,CACd8E,SAAU,GACVzC,SAAU,GACVC,aAAc,GACdyC,UAAW,CAAC,EACZhD,QAAS,GACTiD,aAAa,GAEf/E,aAAc,GACdC,oBAAqB,GACrBI,aAAc,GACdC,YAAY,EACZE,YAAY,EACZC,eAAe,G,SC/CV,SAASuE,EAAsBnF,GAclC,IAdmC,oBACrCC,EAAmB,eACnBC,EAAc,aACdC,EAAY,oBACZC,EAAmB,oBACnBC,EAAmB,SACnBC,EAAQ,MACRC,EAAK,aACLC,EAAY,WACZC,EAAU,sBACVC,EAAqB,WACrBC,EAAU,cACVC,GAEDZ,EACC,OACE2B,EAAAA,EAAAA,KAAC5B,EAAa,CACZE,oBAAqBA,EACrBC,eAAgBA,EAChBC,aAAcA,EACdC,oBAAqBA,EACrBC,oBAAqBA,EACrBC,SAAUA,EACVC,MAAOA,EACPC,aAAcA,EACdC,WAAYA,EACZC,sBAAuBA,EACvBC,WAAYA,EACZC,cAAeA,GAGrB,C,wMCtBA,MAAMwE,UAAiCC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KAC/CC,MAAQ,CACNC,oBAAoB,EACpBC,SAAU,GACVC,iBAAkB1C,EAAAA,GAChB2C,EAAAA,IAEFC,uBAAwB,GACxBC,wBAAwB,GACxB,KA4BFC,cAAgB,CAACC,EAAcC,KAC7BC,KAAKC,SAAS,CAAET,SAAUO,IAC1B,MAAMN,EAAmBS,IAAAA,UAAiBF,KAAKV,MAAMG,uBACCrD,IAAlDsD,EAAAA,GAAgCI,KAClCL,EAAiBK,GAAgB/C,EAAAA,GAC/B2C,EAAAA,GAAgCI,GAChCC,GAEFC,KAAKC,SAAS,CAAER,mBAAkBE,uBAAwB,KAC5D,EAEA,KAEFQ,iBAAoBX,IAClBQ,KAAKC,SAAS,CAAEL,wBAAwB,IACxC,MAAMH,EAAmB,IAAKO,KAAKV,MAAMG,kBACxB,OAAbD,GAAkC,KAAbA,IACvBC,EAA2B,SAAI,wCAEjCO,KAAKC,SAAS,CAAER,qBAChB,IAAIW,GAAc,EAMlB,OALIA,IACFA,EAAcC,OAAOC,OAAOb,GAAkBc,OAAM,SAAU5D,GAC5D,MAAiB,KAAVA,CACT,KAEKyD,CAAW,EAOpB,KACAI,aAAe,KACbR,KAAKC,SACH,CACEV,oBAAoB,EACpBI,uBAAwB,GACxBC,wBAAwB,IAE1B,IAAMI,KAAKS,MAAMC,eAClB,EASH,KAEAC,iBAAmB,KACjB,GAAIX,KAAKG,iBAAiBH,KAAKV,MAAME,UAAW,CAC9CQ,KAAKC,SAAS,CAAEN,uBAAwB,KAExC,IACE,IAGIiB,EAAMZ,KAAKV,MAAME,SAEjBqB,EAAOb,KAAKS,MAAMK,SAClBC,EAAOC,IAAAA,IAAaC,UAAUC,OAAO,IAErCC,EAAMH,IAAAA,OAAgBH,EAAME,EAAM,CACpCK,QAASA,EACTC,WATe,MAYbC,EAAKN,IAAAA,IAAaC,UAAUC,OAAO,IAEnCK,EAAYP,IAAAA,IAAaQ,QAAQZ,EAAKO,EAAK,CAC7CG,GAAIA,EACJ/F,QAASyF,IAAAA,IAAaS,MACtBC,KAAMV,IAAAA,KAAcW,MAElBC,EACFb,EAAKc,WAAaP,EAAGO,WAAaN,EAAUM,WAG9CC,IACEC,EAAAA,IACA,sBACAC,mBAAmBJ,GACnB7E,EAAAA,GACEiD,KAAKS,MAAMwB,aAAaC,YAGzBC,MAAMC,IACL,IAAIC,EAASD,EAASrC,MACG,IAArBsC,EAAOC,WACiC,SAAtCD,EAAOE,aAAaC,eACtBxC,KAAKC,SAAS,CAAEV,oBAAoB,IACpCS,KAAKS,MAAMgC,mBAQbzC,KAAKC,SAAS,CACZN,uBAAwB0C,EAAOK,UAAU,GACzC9C,wBAAwB,GAE5B,IAED+C,OAAOC,IACN5C,KAAKC,SAAS,CACZN,uBAAwBiD,EACxBhD,wBAAwB,GACxB,GAER,CAAE,MAAOgD,GACP5C,KAAKC,SAAS,CACZN,uBAAwBiD,EACxBhD,wBAAwB,GAE5B,CACF,MACEI,KAAKC,SAAS,CAAEL,wBAAwB,GAC1C,CACA,CAtJFiD,iBAAAA,GACE,IACE7C,KAAK8C,oBACP,CAAE,MAAOF,GACPG,QAAQC,IACN,iEACAJ,EAEJ,CACF,CAEAE,kBAAAA,GACE,IACE,IAAIvD,EAAqBxC,EAAAA,GACvBiD,KAAKS,MAAMwC,YAAYV,aAAaW,iBACpClD,KAAKS,MAAM0C,aACXnD,KAAKS,MAAM2C,eAEbpD,KAAKC,SAAS,CAAEV,wBAEW,IAAvBA,GAA8BS,KAAKS,MAAMgC,iBAC/C,CAAE,MAAOG,GACPG,QAAQC,IAAI,sCAAuCJ,EACrD,CACF,CA+HAS,MAAAA,GACE,OACE5H,EAAAA,EAAAA,KAAA,OAAAD,UACqC,IAAlCwE,KAAKV,MAAMC,oBACV9D,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAV,EAAAA,EAAAA,MAAC8B,EAAAA,MAAK,CAACC,MAAM,EAAMC,KAAK,OAAM3B,SAAA,EAC5BL,EAAAA,EAAAA,MAAC8B,EAAAA,MAAMG,QAAO,CAAA5B,SAAA,EACZL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKI,SAAA,EAClBC,EAAAA,EAAAA,KAAA,OACEL,UAAU,eACVC,MAAO,CAAEsD,WAAY,QAASnD,UAE9BC,EAAAA,EAAAA,KAAA,MAAAD,SAAKK,EAAE,4BAETJ,EAAAA,EAAAA,KAAA,OACEL,UAAU,kBACVC,MAAO,CAAEiI,UAAW,SACpBnH,QAAS6D,KAAKQ,aAAahF,UAE3BC,EAAAA,EAAAA,KAACqC,EAAAA,KAAI,CAACC,KAAK,SAASC,KAAK,gBAI7B7C,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEqC,QAAS,OAAQ6F,SAAU,QAAS/H,SAAA,EAChDC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,gBAAeI,UAC5BC,EAAAA,EAAAA,KAAA,SAAAD,UACEL,EAAAA,EAAAA,MAAA,MAAAK,SAAA,CACGK,EAAE,mCAAmC,IACrCmE,KAAKS,MAAMK,iBAIlBrF,EAAAA,EAAAA,KAAA,OAAKL,UAAU,gBAAeI,UAC5BC,EAAAA,EAAAA,KAAC+H,EAAAA,MAAK,CACJC,OAAK,EACLlG,KAAK,WACLmG,uBAAuB,EACvB/G,MAAOqD,KAAKV,MAAME,SAClBmE,UAAU,WACV3G,SAAW+C,GACTC,KAAKH,cAAc,WAAYE,GAEjC6D,MAAO/H,EAAE,wBACT+G,MAAO/G,EAAEmE,KAAKV,MAAMG,iBAAiBD,UACrCqE,cAAc,aAKtB1I,EAAAA,EAAAA,MAAC8B,EAAAA,MAAMI,OAAM,CAAA7B,SAAA,EACXC,EAAAA,EAAAA,KAAA,QAAML,UAAU,gCAA+BI,SAC5CK,EAAEmE,KAAKV,MAAMK,2BAEhBlE,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLC,KAAK,UACLX,UAAWoD,KAAKV,MAAMM,uBACtBpC,QAAS3B,EAAE,qCACXM,QAAS6D,KAAKW,2BAMtB,MAGV,EAEF,MAOA,GAAemD,EAAAA,EAAAA,KAPUxE,IAChB,CACL2D,YAAa3D,EAAMyE,eAAed,YAClChB,aAAc3C,EAAMyE,eAAeC,aAIvC,CAAwC9E,E,oSCtPjC,SAAS+E,EAAuBnK,GAKnC,IALoC,qBAEtCoK,EAAoB,iBACpBzE,EAAgB,cAChBI,GACD/F,EACC,OACE2B,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAJ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBI,UAC/BL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKI,SAAA,EAClBC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BI,UACvCC,EAAAA,EAAAA,KAAC+H,EAAAA,MAAK,CACJC,OAAK,EACL9G,MAAOuH,EAAqBC,WAAWC,cAAcC,MACrDV,UAAU,WACV/G,UAAU,EACVI,SAAW+C,GAASF,EAAc,gBAAiBE,GACnD6D,MAAO/H,EAAE,iBACT+G,MAAO/G,EAAE4D,EAAiB2E,eAC1BP,cAAc,OAoClBpI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BI,UACvCC,EAAAA,EAAAA,KAAC+H,EAAAA,MAAK,CACJC,OAAK,EACL9G,MAAOuH,EAAqBC,WAAWG,YAAYD,MACnDV,UAAU,WACV/G,UAAU,EACVI,SAAW+C,GAASF,EAAc,cAAeE,GACjD6D,MAAO/H,EAAE,eACT+G,MAAO/G,EAAE4D,EAAiB6E,aAC1BT,cAAc,OAGlBpI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BI,UACvCC,EAAAA,EAAAA,KAAC+H,EAAAA,MAAK,CACJC,OAAK,EACL9G,MAAOuH,EAAqBC,WAAWI,mBAAmBF,MAC1DV,UAAU,WACV/G,UAAU,EACVI,SAAW+C,GAASF,EAAc,qBAAsBE,GACxD6D,MAAO/H,EAAE,sBACT+G,MAAO/G,EAAE4D,EAAiB8E,oBAC1BV,cAAc,OAGlBpI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BI,UACvCC,EAAAA,EAAAA,KAAC+H,EAAAA,MAAK,CACJC,OAAK,EACL9G,MAAOuH,EAAqBC,WAAWK,aAAaH,MACpDV,UAAU,WACV/G,UAAU,EACVI,SAAW+C,GAASF,EAAc,eAAgBE,GAClD6D,MAAO/H,EAAE,kCACT+G,MAAO/G,EAAE4D,EAAiB+E,cAC1BX,cAAc,OAGlBpI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BI,UACvCC,EAAAA,EAAAA,KAAC+H,EAAAA,MAAK,CACJC,OAAK,EACL9G,MACEuH,EAAqBC,WAAWM,oBAAoBJ,MAEtDV,UAAU,WACV/G,UAAU,EACVI,SAAW+C,GAASF,EAAc,sBAAuBE,GACzD6D,MAAO/H,EAAE,uBACT+G,MAAO/G,EAAE4D,EAAiBgF,qBAC1BZ,cAAc,OAGlBpI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BI,UACvCC,EAAAA,EAAAA,KAAC+H,EAAAA,MAAK,CACJC,OAAK,EACL9G,MAAOuH,EAAqBC,WAAWO,aAAaL,MACpDV,UAAU,WACV/G,UAAU,EACVI,SAAW+C,GAASF,EAAc,eAAgBE,GAClD6D,MAAO/H,EAAE,gBACT+G,MAAO/G,EAAE4D,EAAiBiF,cAC1Bb,cAAc,OAIlBpI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BI,UACvCC,EAAAA,EAAAA,KAAC+H,EAAAA,MAAK,CACJC,OAAK,EACL9G,MAAOuH,EAAqBC,WAAWQ,mBAAmBN,MAC1DV,UAAU,WACV/G,UAAU,EACVI,SAAW+C,GAASF,EAAc,qBAAsBE,GACxD6D,MAAO/H,EAAE,sBACT+G,MAAO/G,EAAE4D,EAAiBkF,oBAC1Bd,cAAc,OAGlBpI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BI,UACvCC,EAAAA,EAAAA,KAAC+H,EAAAA,MAAK,CACJC,OAAK,EACL9G,MACEuH,EAAqBC,WAAWS,uBAAuBP,MAEzDV,UAAU,WACV/G,UAAU,EACVI,SAAW+C,GACTF,EAAc,yBAA0BE,GAE1C6D,MAAO/H,EAAE,0BACT+G,MAAO/G,EAAE4D,EAAiBmF,wBAC1Bf,cAAc,OAGlBpI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BI,UACvCC,EAAAA,EAAAA,KAAC+H,EAAAA,MAAK,CACJC,OAAK,EACL9G,MACEuH,EAAqBC,WAAWU,qBAAqBR,MAEvDV,UAAU,WACV/G,UAAU,EACVI,SAAW+C,GAASF,EAAc,uBAAwBE,GAC1D6D,MAAO/H,EAAE,wBACT+G,MAAO/G,EAAE4D,EAAiBoF,sBAC1BhB,cAAc,OAGlBpI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,2BAA0BI,UACvCC,EAAAA,EAAAA,KAAC+H,EAAAA,MAAK,CACJC,OAAK,EACL9G,MAAOuH,EAAqBC,WAAWW,gBAAgBT,MACvDV,UAAU,WACV/G,UAAU,EACVI,SAAW+C,GAASF,EAAc,kBAAmBE,GACrD6D,MAAO/H,EAAE,mBACT+G,MAAO/G,EAAE4D,EAAiBqF,iBAC1BjB,cAAc,YAQ9B,C,eC1JA,MAAMkB,UAAyC5F,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KACvDC,MAAQ,CACNG,iBAAkB1C,EAAAA,GAChBiI,EAAAA,IAEFC,mBAAoB,GACpBC,aAAc,GACdC,iBAAiB,EACjBC,kBAAmBlF,IAAAA,UAAiBmF,EAAAA,IACpCnB,qBAAsBhE,IAAAA,UAAiBmF,EAAAA,IACvCC,aAAa,EACbC,OAAO,EACPC,0BAA0B,EAC1BC,sBAAuB,CAAC,GACxB,KAgUFC,sBAAwB,KACtB,IACE1F,KAAKC,SAAS,CAAEqF,aAAa,IAC7B,IAAIG,EAAwBvF,IAAAA,UAAiBF,KAAKV,MAAMmG,uBAExDzF,KAAK2F,wBAAwBF,EAE/B,CAAE,MAAO7C,GACPG,QAAQC,IAAI,oDACd,GACA,KAEF4C,WAAa,KACX,IACE7C,QAAQC,IAAI,uDAEZ,IAAIkB,EAAuBlE,KAAK6F,4BAC9B7F,KAAKV,MAAM4E,sBAIb,IAAIlE,KAAK8F,aAAa5B,GAmBpB,YADAlE,KAAKC,SAAS,CAAEqF,aAAa,IAlBc,CAE3C,IAAIE,GACoD,IAAxDxF,KAAKS,MAAMwC,YAAYV,aAAawD,gBAGlCN,EAAwBvF,IAAAA,UAAiBgE,GAC7ClE,KAAKC,SAAS,CAAEuF,2BAA0BC,0BAAyB,MAChC,IAA7BD,GACFxF,KAAK0F,uBACP,IAKA3C,QAAQC,IAAI,sDAEd,CAIF,CAAE,MAAOJ,GACPG,QAAQC,IACN,gEACAJ,EAEJ,GACA,KAuKFoD,aAAe,CAAClG,EAAcC,KAC5B,IAEE,MAAMmE,EAAuBhE,IAAAA,UAC3BF,KAAKV,MAAM4E,sBAGbA,EAAqBC,WAAWrE,GAAcuE,MAAQtE,EACtDmE,EAAqBC,WAAWrE,GAAcmG,aAAelG,EAC7DC,KAAKC,SAAS,CAAEiE,yBAChB,MAAMzE,EAAmBS,IAAAA,UAAiBF,KAAKV,MAAMG,uBACDrD,IAAhD4I,EAAAA,GAA8BlF,KAChCL,EAAiBK,GAAgB/C,EAAAA,GAC/BiI,EAAAA,GAA8BlF,GAC9BC,GAEFC,KAAKC,SAAS,CAAER,qBAGpB,CAAE,MAAOmD,GACPG,QAAQC,IACN,kEACAJ,EAEJ,GACA,KAGFsD,0BAA4B,KAC1BlG,KAAKC,SAAS,CACduF,0BAA0B,GACxB,CACF,CArjBF3C,iBAAAA,GAEE,IACE9F,EAAAA,GAAqBiD,KAAKS,MAAMwC,YAAYV,aAAa4D,YACzDnG,KAAKoG,uBACP,CAAE,MAAOxD,GACPG,QAAQC,IAAI,6CAA8CJ,EAC5D,CACF,CAEAyD,qBAAAA,GACE,IAAIC,EAAa,GACjB,MAAM,aAAEC,GAAiBvG,KAAKS,MAY9B,YAVmBrE,IAAjBmK,QACoCnK,IAApCmK,EAAatB,qBAEbqB,EAAaC,EAAatB,oBAE5BjF,KAAKC,SAAS,CAAEgF,mBAAoBqB,IAAc,SAK3CA,CACT,CACAE,YAAAA,GACE,IAAIC,EAAS,GAGb,IAAIC,EAAe,CACjBC,YAAa,WACbC,QAAS,4BACTC,qBAAsB,IAkExB,OA/DA/E,IACEgF,EAAAA,IACA/J,EAAAA,GAAwCiD,KAAKS,MAAMwB,aAAaC,YAE/DC,MAAMC,IACL,IAAIC,EAASD,EAASrC,MAEG,IAArBsC,EAAOC,WAEPyE,MAAMC,QAAQ3E,EAAOE,eACrBF,EAAOE,aAAarH,OAAS,GAG7BuL,EAASpE,EAAOE,aAAa,GAAG0E,IAAIC,KACpClH,KAAKC,SACH,CACEkF,iBAAiB,EAEjBD,aAAc7C,EAAOE,aAAa,GAAG0E,IAAIC,OAE3C,WAiBJnE,QAAQC,IAAI,qCAAsCX,IAClD8E,EAAAA,EAAAA,QACE1L,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC2L,EAAAA,EAAW,CAACC,oBAAqBX,MAEpC,CACEY,UAAwC,YAA7BZ,EAAaC,aAA4B,MAG1D,IAEDhE,OAAOC,KAKNuE,EAAAA,EAAAA,QACE1L,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC2L,EAAAA,EAAW,CAACC,oBAAqBX,MAEpC,CACEY,UAAwC,YAA7BZ,EAAaC,aAA4B,MAGxD5D,QAAQC,IAAI,qCAAsCJ,EAAM,IAErD6D,CACT,CACAL,qBAAAA,GAEE,IAAImB,EAAYvH,KAAKqG,wBAGjBI,EAASzG,KAAKwG,eAGdE,EAAe,CACjBC,YAAa,WACbC,QAAS,0BACTC,qBAAsB,IAExB/E,IACEgF,EAAAA,IACA/J,EAAAA,GAAwCiD,KAAKS,MAAMwB,aAAaC,YAE/DC,MAAMC,IACL,IAAIC,EAASD,EAASrC,MAEG,IAArBsC,EAAOC,WAEPyE,MAAMC,QAAQ3E,EAAOE,eACrBF,EAAOE,aAAarH,OAAS,GAG7BuL,EAASpE,EAAOE,aAAa,GAAG0E,IAAIC,KACpClH,KAAKC,SACH,CACEkF,iBAAiB,EAEjBD,aAAc7C,EAAOE,aAAa,GAAG0E,IAAIC,KACzC5B,YAAavI,EAAAA,GACXiD,KAAKS,MAAMwC,YAAYV,aAAaiF,cACpCC,EAAAA,EAAeC,OACfC,EAAAA,MAGJ,KACE7F,IACEgF,EAAAA,IACES,EACA,iBACAd,EACA,mBACF1J,EAAAA,GACEiD,KAAKS,MAAMwB,aAAaC,YAGzBC,MAAMC,IACL,IAAIC,EAASD,EAASrC,KAEtB,IAAyB,IAArBsC,EAAOC,UAAoB,CAK7B,GAAgD,KAA5CD,EAAOE,aAAa4B,WAAW,GAAGE,MAAc,CAClDrE,KAAKC,SAAS,CAAC2H,OAAM,IAErB,IAAIlB,EAAe,CACjBC,YAAa,WACbC,QAAS,wBACTC,qBAAsB,KAExBM,EAAAA,EAAAA,QACE1L,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC2L,EAAAA,EAAW,CACVC,oBAAqBX,MAGzB,CACEY,UAC+B,YAA7BZ,EAAaC,aACT,KAIZ,CAIA3G,KAAKC,SAAS,CAACmF,kBAAkBlF,IAAAA,UAC/BmC,EAAOE,gBAET,IAAIsF,EAA0B7H,KAAK8H,2BACjC9H,KAAKV,MAAM8F,mBAObpF,KAAKC,SAAS,CACZkF,iBAAiB,EAOjBC,kBAAmByC,EACnB3D,qBAAsB2D,EACtBvC,YAAavI,EAAAA,GACXiD,KAAKS,MAAMwC,YAAYV,aAAaiF,cACpCC,EAAAA,EAAexM,IACf0M,EAAAA,KAoBN,MACE5E,QAAQC,IAAI,oCAKZmE,EAAAA,EAAAA,QACE1L,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC2L,EAAAA,EAAW,CACVC,oBAAqBX,MAGzB,CACEY,UAC+B,YAA7BZ,EAAaC,aACT,MAIV5D,QAAQC,IACN,6CACAX,EAEJ,IAEDM,OAAOC,IACN5C,KAAKC,SAAS,CACZ8H,sBAAsB,EACtBC,uBAAuB,KAEzBb,EAAAA,EAAAA,QACE1L,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC2L,EAAAA,EAAW,CACVC,oBAAqBX,MAGzB,CACEY,UAC+B,YAA7BZ,EAAaC,aACT,MAIV5D,QAAQC,IACN,6CACAJ,EACD,GACD,MAgBVG,QAAQC,IAAI,qCAAsCX,IAClD8E,EAAAA,EAAAA,QACE1L,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC2L,EAAAA,EAAW,CAACC,oBAAqBX,MAEpC,CACEY,UAAwC,YAA7BZ,EAAaC,aAA4B,MAG1D,IAEDhE,OAAOC,KAKNuE,EAAAA,EAAAA,QACE1L,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC2L,EAAAA,EAAW,CAACC,oBAAqBX,MAEpC,CACEY,UAAwC,YAA7BZ,EAAaC,aAA4B,MAGxD5D,QAAQC,IAAI,qCAAsCJ,EAAM,GAE9D,CAoDAiD,2BAAAA,CAA4BT,GAC1B,IAKI6C,EALAC,EAAyBhI,IAAAA,UAAiBiI,EAAAA,IAsB9C,OArBAD,EAAuBE,aAAehD,EAAkBgD,aACxDF,EAAuBG,mBACrBjD,EAAkBiD,mBACpBH,EAAuB/D,WAAa,GAGpC9D,OAAOiI,KAAKlD,EAAkBjB,YAAYoE,SACvCpH,KACE8G,EAAQ/H,IAAAA,UAAiBsI,EAAAA,KAGnBC,KAAOtH,EACb8G,EAAM5D,MAAQe,EAAkBjB,WAAWhD,GAAKkD,MAChD4D,EAAMhC,aAAeb,EAAkBjB,WAAWhD,GAAK8E,aACvDgC,EAAMS,YAActD,EAAkBjB,WAAWhD,GAAKuH,YAEvDR,EAAuB/D,WAAWwE,KAAKV,MAKpCC,CACT,CACAJ,0BAAAA,CAA2B1C,GACzB,IAAI8C,EAAyBhI,IAAAA,UAAiBmF,EAAAA,IAmC9C,OAlCA6C,EAAuBE,aAAehD,EAAkBgD,aACxDF,EAAuBG,mBACrBjD,EAAkBiD,mBACpBhI,OAAOiI,KAAKJ,EAAuB/D,YAAYoE,SAC5CpH,IAGE+G,EAAuB/D,WAAWhD,GAAKkD,MAGvB,KAFfe,EAAkBjB,WAAWyE,QAC1BC,GAAcA,EAAUJ,OAAStH,IAClC,GAAGkD,OAGU,OAFfe,EAAkBjB,WAAWyE,QAC1BC,GAAcA,EAAUJ,OAAStH,IAClC,GAAGkD,MACDe,EAAkBjB,WAAWyE,QAC1BC,GAAcA,EAAUJ,OAAStH,IAClC,GAAG8E,aACLb,EAAkBjB,WAAWyE,QAC1BC,GAAcA,EAAUJ,OAAStH,IAClC,GAAGkD,MACV6D,EAAuB/D,WACtBhD,GACA8E,aAAeb,EAAkBjB,WAAWyE,QAC3CC,GAAcA,EAAUJ,OAAStH,IAClC,GAAG8E,aACJiC,EAAuB/D,WACtBhD,GACAuH,YAActD,EAAkBjB,WAAWyE,QAC1CC,GAAcA,EAAUJ,OAAStH,IAClC,GAAGuH,eAKFR,CACT,CACApC,YAAAA,CAAa5B,GAEX,MAAMzE,EAAmB,IAAKO,KAAKV,MAAMG,kBACzCY,OAAOiI,KAAKtD,EAAAA,IAA+BuD,SAAQ,SAAUpH,QACzB/E,IAA9B8H,EAAqB/C,KACvB1B,EAAiB0B,GAAOpE,EAAAA,GACtBiI,EAAAA,GAA8B7D,GAC9B+C,EAAqBC,WAAWhD,IAEtC,IACAnB,KAAKC,SAAS,CAAER,qBAEhB,IAAIW,GAAc,EAMlB,OALIA,IACFA,EAAcC,OAAOC,OAAOb,GAAkBc,OAAM,SAAU5D,GAC5D,MAAiB,KAAVA,CACT,KAEKyD,CACT,CAEAuF,uBAAAA,CAAwBzB,GAGtB,IAAI4E,EAAM,CACRC,OAAQ7E,GAGNwC,EAAe,CACjBC,YAAa,WACbC,QAAS,gCACTC,qBAAsB,CACpB,CACEmC,UAAW,CAAC,gBACZC,UAAW,CAAC/E,EAAqBkE,cACjCc,WAAW,EACXC,aAAc,MAIpBrH,IACEgF,EAAAA,IACA/J,EAAAA,GACE+L,EACA9I,KAAKS,MAAMwB,aAAaC,YAGzBC,MAAMC,IACL,IAAIC,EAASD,EAASrC,KAEtB2G,EAAaC,YAActE,EAAOC,UAAY,UAAY,WAC1DoE,EAAaG,qBAAqB,GAAGqC,UAAY7G,EAAOC,WAC/B,IAArBD,EAAOC,WACTtC,KAAKkG,4BACLlG,KAAKC,SACH,CACEqF,YAAavI,EAAAA,GACXiD,KAAKS,MAAMwC,YAAYV,aAAaiF,cACpCC,EAAAA,EAAeC,OACfC,EAAAA,QAON3H,KAAKkG,4BACLQ,EAAaG,qBAAqB,GAAGsC,aACnC9G,EAAOK,UAAU,GACnB1C,KAAKC,SAAS,CACZqF,YAAavI,EAAAA,GACXiD,KAAKS,MAAMwC,YAAYV,aAAaiF,cACpCC,EAAAA,EAAexM,IACf0M,EAAAA,OASN3H,KAAKS,MAAM2I,SAAS1C,EAAa,IAElC/D,OAAOC,IACN5C,KAAKkG,4BACLlG,KAAKC,SAAS,CACZqF,YAAavI,EAAAA,GACXiD,KAAKS,MAAMwC,YAAYV,aAAaiF,cACpCC,EAAAA,EAAexM,IACf0M,EAAAA,MAGJjB,EAAaG,qBAAqB,GAAGsC,aAAevG,CAAK,GAO/D,CAoCAS,MAAAA,GACE,OAAOrD,KAAKV,MAAM6F,iBAChBhK,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EACEC,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC4N,EAAAA,EAAe,CAACC,cAAc,sCAEjC7N,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAACwI,EAAuB,CACtBmB,kBAAmBpF,KAAKV,MAAM8F,kBAC9BlB,qBAAsBlE,KAAKV,MAAM4E,qBACjCrE,cAAeG,KAAKgG,aACpBvG,iBAAkBO,KAAKV,MAAMG,iBAC7B8F,MAAOvF,KAAKV,MAAMiG,WAGtB9J,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAJ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,MAAKI,UAClBC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,aAAaC,MAAO,CAAEiI,UAAW,SAAU9H,UACxDC,EAAAA,EAAAA,KAAC6B,EAAAA,OAAM,CACLE,QAAS3B,EAAE,QACXe,UAAWoD,KAAKV,MAAMgG,YACtBnJ,QAASA,IAAM6D,KAAK4F,uBAO/B5F,KAAKV,MAAMkG,0BAGV/J,EAAAA,EAAAA,KAACyD,EAAAA,EAAwB,CACvB4B,SAAUd,KAAKS,MAAMwC,YAAYV,aAAagH,SAC9CpG,aAAcsE,EAAAA,EAAeC,OAC7BtE,cAAeuE,EAAAA,GACfjH,YAAaV,KAAKkG,0BAClBzD,gBAAiBzC,KAAK0F,wBAEtB,SAGNjK,EAAAA,EAAAA,KAAC+N,EAAAA,EAAW,CAAC5C,QAAQ,WAEzB,EAGF,MAOA,GAAe9C,EAAAA,EAAAA,KAPUxE,IAChB,CACL2D,YAAa3D,EAAMyE,eAAed,YAClChB,aAAc3C,EAAMyE,eAAeC,aAIvC,CAAwCe,G,kBC5oBxC,MAAM0E,UAAmCtK,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KACjDC,MAAQ,CACN6F,iBAAiB,EACjBuE,qBAAsB,CAAEzO,KAAK,EAAO2D,QAAQ,EAAO/B,aAAa,IAChE,KAgBF8M,YAAejD,IACb,KACES,EAAAA,EAAAA,QACE1L,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAAC2L,EAAAA,EAAW,CAACC,oBAAqBX,MAEpC,CACEY,UAAwC,YAA7BZ,EAAaC,aAA4B,KAG1D,CAAE,MAAO/D,GACPG,QAAQC,IACN,2DACAJ,EAEJ,EACA,CA9BFC,iBAAAA,GACE,IACE9F,EAAAA,GAAqBiD,KAAKS,MAAMwC,YAAYV,aAAa4D,YACzDnG,KAAKC,SAAS,CACZkF,iBAAiB,GAErB,CAAE,MAAOvC,GACPG,QAAQC,IACN,iEACAJ,EAEJ,CACF,CAoBAS,MAAAA,GACE,OACE5H,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAV,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EACEC,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAACwD,EAAAA,EAAsB,CACrByK,qBAAsB1J,KAAKV,MAAMoK,qBACjC1P,eAAgBgG,KAAKS,MAAMmJ,WAC3BpP,sBAAuBwF,KAAKS,MAAMjG,sBAClCC,YAAY,EACZC,eAAe,EACfH,YAAY,OAGhBkB,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,SACXwE,KAAKV,MAAM6F,iBACV1J,EAAAA,EAAAA,KAACsJ,EAAgC,CAC/BkC,IAAI,0BACJmC,SAAUpJ,KAAK2J,YACfpD,aAAcvG,KAAKS,MAAMmJ,WAAW7K,aAGtCtD,EAAAA,EAAAA,KAAC+N,EAAAA,EAAW,CAAC5C,QAAQ,eAGzBnL,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,UACZC,EAAAA,EAAAA,KAACoO,EAAAA,eAAc,CACbC,iBAAiB,EACjBC,cAAc,EACdC,aAAa,EACbC,aAAa,EACbrM,SAAS,eACTsM,eAAe,kCAO7B,EAEF,MAOA,GAAepG,EAAAA,EAAAA,KAPUxE,IAChB,CACL2D,YAAa3D,EAAMyE,eAAed,YAClChB,aAAc3C,EAAMyE,eAAeC,aAIvC,CAAwCyF,E,8FChFjC,SAASJ,EAAevP,GAAgD,IAA/C,WAAEqQ,EAAU,cAAEb,EAAa,cAAEc,GAAetQ,EAC1E,OACE2B,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAJ,SAChBK,IACAJ,EAAAA,EAAAA,KAAA,OAAKL,UAAU,kBAAiBI,UAC9BL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBI,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,4BAA2BI,UACxCC,EAAAA,EAAAA,KAAA,QAAMJ,MAAO,CAAEgP,OAAQ,QAAUjP,UAAU,cAAaI,SACtC,KAAf2O,QAAoC/N,IAAf+N,EAClBtO,EAAEyN,GACFa,MAGQ,KAAfA,QACc/N,IAAf+N,GACAC,EAAclP,OAAS,GACrBO,EAAAA,EAAAA,KAAA,OAAKL,UAAU,kBAAiBI,UAC9BC,EAAAA,EAAAA,KAACkC,EAAAA,MAAK,CACJE,SACE1C,EAAAA,EAAAA,MAAA,OAAAK,SAAA,CACGK,EAAEuO,EAAc,GAAG3L,WAAa,IAAI,IACpC,IAAM2L,EAAc,GAAG1L,YACxBjD,EAAAA,EAAAA,KAACqC,EAAAA,KAAI,CACHzC,MAAO,CAAEsD,WAAY,QACrBZ,KAAK,SACLC,KAAK,aACLb,KAAK,aAIXS,SAAS,cACTpC,UAEAC,EAAAA,EAAAA,KAAC6O,EAAAA,KAAI,CAAClP,UAAU,qBAAoBI,SACjC4O,EAAcpO,KAAKwB,IAClBrC,EAAAA,EAAAA,MAACmP,EAAAA,KAAKlN,QAAO,CAEXhC,UAAU,gCAA+BI,SAAA,CAExCK,EAAE2B,EAAQiB,WAAa,IAAI,IAAE,IAAMjB,EAAQkB,aAHxC,6BAUd,SAOd,CA3DA2K,EAAgBxK,aAAe,CAC7BsL,WAAY,GACZb,cAAe,GACfc,cAAe,IA0DjB,S,u1CC5EO,MAAM3C,EAAiB,CAC5B8C,KAAM,OACNtP,IAAK,MACLyM,OAAQ,SACR8C,OAAQ,UAEGC,EAAmB,iBACnBC,EAAW,SACXC,EAAa,WACbC,EAAY,UACZC,EAAmB,iBACnBC,EAAgB,cAChBC,EAAe,aACfC,EAAY,UACZC,EAAQ,wBACRC,EAAQ,oBACRC,EAAmB,qBACnBC,EAAW,SACXC,EAAU,QACVC,EAAoB,kBAEpBC,EAAa,WACbC,EAAiB,2BACjBC,EAAmB,qBACnBC,EAAgC,8BAChCC,EAAkB,oBAClBC,EAAa,WACbC,EAAoB,kBACpBC,EAAiB,eACjBC,EAAgB,cAChBC,EAAc,YACdC,EAAc,YAEdC,EAAsB,oBACtBC,EAAiB,eACjBC,EAAiB,eACjBC,EAAmC,iCACnCC,EAAkC,gCAClCC,EAAqB,mBACrBC,EAA2B,yBAE3BC,EAAqB,mBACrBC,EAAiB,eACjBC,EAAiB,eACjBC,EAAoB,kBACpBC,EAA6B,2BAE7BC,EAAqB,MACrBC,EAA+B,6BAC/BC,EAAgC,8BAChCC,EAAqB,mBACrBC,EAAoB,kBAEpBC,EAAgC,8BAChCC,EAA+B,6BAE/BC,EAAe,aAIfC,EAAkB,gBAClBC,EAAqB,sBAErBC,EAAuB,QACvBC,EAAgB,cAChBC,EAAa,iBACbC,GAAW,eACXC,GAAgB,cAChBC,GAAa,WACbC,GAAuB,qBACvBC,GAAa,WACbC,GAAoB,kBACpBC,GAAc,YACdC,GAAS,OACTC,GAAe,aACfC,GAAiB,eACjBC,GAA+B,6BAC/BC,GAAe,aACfC,GAAa,WACb5G,GAAsB,oBAEtB6G,GAAmB,iBACnBC,GAAmB,iBACnBC,GAA6B,2BAC7BC,GAAiC,+BACjCC,GAAwB,sBACxBC,GAAc,YACdC,GAAiB,eACjBC,GAAe,aACfC,GAAsB,oBACtBC,GAA+B,6BAC/BC,GAAmB,iBACnBC,GAAmB,iBACnBC,GAA+B,6BAC/BC,GAAgC,8BAEhCC,GAAuB,qBACvBC,GAAkB,gBAClBC,GAAa,WACbC,GAAa,WACbC,GAAa,WACbC,GAAa,WACbC,GAAkB,gBAClBC,GAAiB,eACjBC,GAAuB,qBACvBC,GAAY,UACZC,GAAwB,2BACxBC,GAAmB,iBAEnBC,GAAa,WACbC,GAAqB,mBACrBC,GAAa,WACbC,GAA2B,yBAG3BC,GAAgB,cAChBC,GAAS,cACTC,GAAiC,+BAEjCC,GAAwB,sBACxBC,GAAyB,mBAEzBC,GAA0B,wBAC1BC,GAAsB,oBACtBC,GAA4B,0BAC5BC,GAAuB,qBAKvBC,GAAgC,8BAGhCC,GAAsB,oBACtBC,GAA8B,4BAC9BC,GAAyB,uBACzBC,GAAiC,+BACjCC,GAAc,YACdC,GAAgB,cAChBC,GAAyB,uBACzBC,GAAsB,oBACtBC,GAA0B,wBAC1BC,GACX,kCACWC,GAAiB,gBACjBC,GAA0B,wBAC1BC,GAAiB,eACjBC,GAAmB,iBACnBC,GAAmB,iBACnBC,GAAqB,mBAIrBC,GAAsB,oBACtBC,GAAyB,0BAEzBC,GAAwB,sBACxBC,GAA2B,4BAE3BC,GAAsB,oBACtBC,GAAyB,0BAEzBC,GAA0B,wBAC1BC,GAA6B,8BAC7BC,GAAa,WACbC,GAAsB,oBAEtBC,GAAmB,iBAEnBC,GAAiB,eACjBC,GAAgB,cAChBC,GAAkB,gBAElBC,GAAgB,cAChBC,GAAkB,gBAKlBC,GAAiC,8B","sources":["Components/UIBase/Common/TMUserActions.jsx","Components/Composite/Common/TMUserActionsComposite.jsx","Components/Composite/Common/UserAuthentication.jsx","Components/UIBase/Details/SlotConfigurationDetail.jsx","Components/Composite/Details/SlotConfigurationDetailComposite.jsx","Components/Composite/Entity/SlotConfigurationComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","JS/FunctionGroups.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Icon,\r\n  Breadcrumb,\r\n  Select,\r\n  Modal,\r\n  Button,\r\n  Popup,\r\n  VerticalMenu,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nTMUserActions.propTypes = {\r\n  operationsVisibilty: PropTypes.shape({\r\n    add: PropTypes.bool,\r\n    delete: PropTypes.bool,\r\n    shareholder: PropTypes.bool,\r\n  }).isRequired,\r\n  breadcrumbItem: PropTypes.shape({\r\n    itemName: PropTypes.string,\r\n    itemCode: PropTypes.string,\r\n    itemProps: PropTypes.any,\r\n    localizedKey: PropTypes.string,\r\n    parents: PropTypes.array,\r\n    isComponent: PropTypes.bool,\r\n  }).isRequired,\r\n  shareholders: PropTypes.array.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onShareholderChange: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onAdd: PropTypes.func.isRequired,\r\n  popUpContent: PropTypes.array,\r\n};\r\nTMUserActions.defaultProps = {\r\n  operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n  breadcrumbItem: {\r\n    itemName: \"\",\r\n    itemCode: \"\",\r\n    localizedKey: \"\",\r\n    itemProps: {},\r\n    parents: [],\r\n    isComponent: false,\r\n  },\r\n  shareholders: [],\r\n  selectedShareholder: \"\",\r\n  popUpContent: [],\r\n  shrVisible: true,\r\n  addVisible: true,\r\n  deleteVisible: true\r\n};\r\nexport function TMUserActions({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [popUpOpen, setPopUpOpen] = useState(false);\r\n  function getShareholderDropdownOptions() {\r\n    return Utilities.transferListtoOptions(shareholders);\r\n    // var List = [];\r\n    // shareholders.forEach((element) => {\r\n    //   List.push({ text: element, value: element });\r\n    // });\r\n    // return List;\r\n  }\r\n\r\n  function buildBreadcrumb() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {breadcrumbItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item\r\n                  onClick={() => {\r\n                    if (\r\n                      handleBreadCrumbClick !== undefined &&\r\n                      handleBreadCrumbClick !== null\r\n                    ) {\r\n                      handleBreadCrumbClick(\r\n                        parentitem.itemCode,\r\n                        breadcrumbItem.parents\r\n                      );\r\n                    }\r\n                  }}\r\n                  key={parentitem.itemCode}\r\n                >\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={breadcrumbItem.itemCode}>\r\n              {t(breadcrumbItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  function handlePopUpClick() {\r\n    if (operationsVisibilty.add) {\r\n      if (popUpContent.length > 0) {\r\n        if (popUpOpen === false) setPopUpOpen(true);\r\n        else setPopUpOpen(false);\r\n      } else {\r\n        onAdd();\r\n      }\r\n    }\r\n  }\r\n\r\n  function popUpMenuClick(menuItem) {\r\n    setPopUpOpen(false);\r\n    onAdd(menuItem);\r\n  }\r\n  function displayIcons() {\r\n    return (\r\n      <div\r\n        style={{ float: \"right\", display: \"inline-block\", marginTop: \"10px\" }}\r\n      >\r\n        {addVisible ? <Popup\r\n          position=\"bottom right\"\r\n          className=\"popup-theme-wrap\"\r\n          element={\r\n            <div\r\n              className={\r\n                (operationsVisibilty.add\r\n                  ? \"iconCircle \"\r\n                  : \"iconCircleDisable \") + \"iconblock\"\r\n              }\r\n              onClick={handlePopUpClick}\r\n            >\r\n              <Icon\r\n                root=\"common\"\r\n                name=\"badge-plus\"\r\n                size=\"small\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          }\r\n          on=\"click\"\r\n          open={popUpOpen}\r\n        >\r\n          <div onMouseLeave={() => setPopUpOpen(false)}>\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <VerticalMenu>\r\n                  <VerticalMenu>\r\n                    <VerticalMenu.Header>\r\n                      {t(\"Common_Create\")}\r\n                    </VerticalMenu.Header>\r\n                    {popUpContent.map((item) => {\r\n                      return (\r\n                        <VerticalMenu.Item\r\n                          onClick={() => popUpMenuClick(item.fieldName)}\r\n                        >\r\n                          {t(item.fieldValue)}\r\n                        </VerticalMenu.Item>\r\n                      );\r\n                    })}\r\n                  </VerticalMenu>\r\n                </VerticalMenu>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        </Popup> : \"\"}\r\n        {deleteVisible ? <div\r\n          style={{ marginLeft: \"10px\" }}\r\n          onClick={() => {\r\n            if (operationsVisibilty.delete) {\r\n              setModelOpen(true);\r\n              //displayTMModalforDelete();\r\n              //onDelete();\r\n            }\r\n          }}\r\n          className={\r\n            (operationsVisibilty.delete\r\n              ? \"iconCircle \"\r\n              : \"iconCircleDisable \") + \"iconblock\"\r\n          }\r\n        >\r\n          <Icon root=\"common\" name=\"delete\" size=\"small\" color=\"white\" />\r\n        </div> : \"\"}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayTMModalforDelete() {\r\n    //console.log(\"entered to display modal actions\");\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  onDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n    //return <TMModal open={true}></TMModal>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\" style={{ alignItems: \"flex-start\", padding: \"0px\" }}>\r\n      <div\r\n        className=\"col-9 col-sm-9 col-md-9 col-lg-10 col-xl-10\"\r\n        style={{ padding: \"0px\" }}\r\n      >\r\n        <div className=\"row\" style={{ marginTop: \"10px\", alignItems: \"\" }}>\r\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n            <ErrorBoundary> {buildBreadcrumb()}</ErrorBoundary>\r\n          </div>\r\n          <div\r\n            className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-4\"\r\n          //style={{ verticalAlign: \"middle\" }}\r\n          >\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <div\r\n                  className=\"compartmentIcon\"\r\n                  style={{ justifyContent: \"flex-start\" }}\r\n                >\r\n                  {shrVisible === false ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <div>\r\n                        <h4 className=\"shrText\">{t(\"Common_Shareholder\")}:</h4>\r\n                      </div>\r\n                      <div className=\"opSelect\">\r\n                        <Select\r\n                          //className=\"opSelect\"\r\n                          placeholder={t(\"Common_Shareholder\")}\r\n                          value={selectedShareholder}\r\n                          disabled={!operationsVisibilty.shareholder}\r\n                          options={getShareholderDropdownOptions()}\r\n                          onChange={(value) => onShareholderChange(value)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n\r\n          {displayTMModalforDelete()}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-3 col-sm-3 col-md-3 col-lg-2 col-xl-2\">\r\n        {displayIcons()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TMUserActions } from \"../../UIBase/Common/TMUserActions\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nexport function TMUserActionsComposite({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n\r\n}) {\r\n  return (\r\n    <TMUserActions\r\n      operationsVisibilty={operationsVisibilty}\r\n      breadcrumbItem={breadcrumbItem}\r\n      shareholders={shareholders}\r\n      selectedShareholder={selectedShareholder}\r\n      onShareholderChange={onShareholderChange}\r\n      onDelete={onDelete}\r\n      onAdd={onAdd}\r\n      popUpContent={popUpContent}\r\n      shrVisible={shrVisible}\r\n      handleBreadCrumbClick={handleBreadCrumbClick}\r\n      addVisible={addVisible}\r\n      deleteVisible={deleteVisible}\r\n    ></TMUserActions>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Modal, Button, Select, Checkbox, Input, Icon } from \"@scuf/common\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { userAuthenticationValidationDef } from \"../../../JS/ValidationDef\";\r\nimport axios from \"axios\";\r\nimport lodash from \"lodash\";\r\nimport cryptojs from \"crypto-js\";\r\n\r\nclass UserAuthenticationLayout extends Component {\r\n  state = {\r\n    isPasswordRequired: false,\r\n    Password: \"\",\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      userAuthenticationValidationDef\r\n    ),\r\n    authenticationResponse: \"\",\r\n    btnAuthenticateEnabled: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      this.IsPasswordRequired();\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  IsPasswordRequired() {\r\n    try {\r\n      let isPasswordRequired = Utilities.isPasswordEnabled(\r\n        this.props.userDetails.EntityResult.roleFunctionInfo,\r\n        this.props.functionName,\r\n        this.props.functionGroup\r\n      );\r\n      this.setState({ isPasswordRequired });\r\n\r\n      if (isPasswordRequired === false) this.props.handleOperation();\r\n    } catch (error) {\r\n      console.log(\"Error in IsPasswordRequired method:\", error);\r\n    }\r\n  }\r\n\r\n  onFieldChange = (propertyName, data) => {\r\n    this.setState({ Password: data });\r\n    const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    if (userAuthenticationValidationDef[propertyName] !== undefined) {\r\n      validationErrors[propertyName] = Utilities.validateField(\r\n        userAuthenticationValidationDef[propertyName],\r\n        data\r\n      );\r\n      this.setState({ validationErrors, authenticationResponse: \"\" });\r\n    }\r\n\r\n  };\r\n\r\n  validatePassword = (Password) => {\r\n    this.setState({ btnAuthenticateEnabled: false });\r\n    const validationErrors = { ...this.state.validationErrors };\r\n    if (Password === null || Password === \"\") {\r\n      validationErrors[\"Password\"] = \"UserValidationForm_ReqfldValPassword\";\r\n    }\r\n    this.setState({ validationErrors });\r\n    var returnValue = true;\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n\r\n    return returnValue;\r\n  };\r\n\r\n  // AuthenticateUser = () => {\r\n  //     if (this.validatePassword(this.state.Password)) {\r\n  //         this.props.parentCallBack();\r\n  //     }\r\n  // }\r\n  onCloseClick = () => {\r\n    this.setState(\r\n      {\r\n        isPasswordRequired: false,\r\n        authenticationResponse: \"\",\r\n        btnAuthenticateEnabled: true,\r\n      },\r\n      () => this.props.handleClose()\r\n    );\r\n  };\r\n\r\n  // unescapeBase64Url = function (key) {\r\n  //   return key.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n  // };\r\n\r\n  // escapeBase64Url = function (key) {\r\n  //   return key.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\r\n  // };\r\n\r\n  AuthenticateUser = () => {\r\n    if (this.validatePassword(this.state.Password)) {\r\n      this.setState({ authenticationResponse: \"\" });\r\n      // this.props.parentCallBack();\r\n      try {\r\n        var keySize = 256;\r\n        var iterations = 100;\r\n        //assign the entered password\r\n        var msg = this.state.Password;\r\n        //assign the username from GetLoggedInUserDetails\r\n        var pass = this.props.Username;\r\n        var salt = cryptojs.lib.WordArray.random(128 / 8);\r\n\r\n        var key = cryptojs.PBKDF2(pass, salt, {\r\n          keySize: keySize / 32,\r\n          iterations: iterations,\r\n        });\r\n\r\n        var iv = cryptojs.lib.WordArray.random(128 / 8);\r\n\r\n        var encrypted = cryptojs.AES.encrypt(msg, key, {\r\n          iv: iv,\r\n          padding: cryptojs.pad.Pkcs7,\r\n          mode: cryptojs.mode.CBC,\r\n        });\r\n        var transitmessage =\r\n          salt.toString() + iv.toString() + encrypted.toString();\r\n        //console.log(\"EncryptedPWD\", transitmessage);\r\n\r\n        axios(\r\n          RestAPIs.ValidateUserCredentials +\r\n          \"?encryptedPassword=\" +\r\n          encodeURIComponent(transitmessage),\r\n          Utilities.getAuthenticationObjectforGet(\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        )\r\n          .then((response) => {\r\n            var result = response.data;\r\n            if (result.IsSuccess === true) {\r\n              if (result.EntityResult.toLowerCase() === \"true\") {\r\n                this.setState({ isPasswordRequired: false });\r\n                this.props.handleOperation();\r\n              } else {\r\n                this.setState({\r\n                  authenticationResponse: result.ErrorList[0],\r\n                  btnAuthenticateEnabled: true,\r\n                });\r\n              }\r\n            } else {\r\n              this.setState({\r\n                authenticationResponse: result.ErrorList[0],\r\n                btnAuthenticateEnabled: true,\r\n              });\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            this.setState({\r\n              authenticationResponse: error,\r\n              btnAuthenticateEnabled: true,\r\n            });\r\n          });\r\n      } catch (error) {\r\n        this.setState({\r\n          authenticationResponse: error,\r\n          btnAuthenticateEnabled: true,\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({ btnAuthenticateEnabled: true });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.isPasswordRequired === true ? (\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <Modal open={true} size=\"mini\">\r\n                <Modal.Content>\r\n                  <div className=\"row\">\r\n                    <div\r\n                      className=\"col col-lg-8\"\r\n                      style={{ marginLeft: \"10px\" }}\r\n                    >\r\n                      <h4>{t(\"User_Authentication\")}</h4>\r\n                    </div>\r\n                    <div\r\n                      className=\"col-12 col-lg-3\"\r\n                      style={{ textAlign: \"right\" }}\r\n                      onClick={this.onCloseClick}\r\n                    >\r\n                      <Icon root=\"common\" name=\"close\" />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                    <div className=\"col col-lg-12\">\r\n                      <label>\r\n                        <h5>\r\n                          {t(\"UserValidation_Form_AccountName\")}:\r\n                          {this.props.Username}\r\n                        </h5>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col col-lg-12\">\r\n                      <Input\r\n                        fluid\r\n                        type=\"password\"\r\n                        disablePasswordToggle={false}\r\n                        value={this.state.Password}\r\n                        indicator=\"required\"\r\n                        onChange={(data) =>\r\n                          this.onFieldChange(\"Password\", data)\r\n                        }\r\n                        label={t(\"AccessCardInfo_x_Pwd\")}\r\n                        error={t(this.state.validationErrors.Password)}\r\n                        reserveSpace={false}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </Modal.Content>\r\n                <Modal.Footer>\r\n                  <span className=\"ui error-message autherrormsg\">\r\n                    {t(this.state.authenticationResponse)}\r\n                  </span>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    disabled={!this.state.btnAuthenticateEnabled}\r\n                    content={t(\"UserValidationForm_Authentication\")}\r\n                    onClick={this.AuthenticateUser}\r\n                  />\r\n                </Modal.Footer>\r\n              </Modal>\r\n            )}\r\n          </TranslationConsumer>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(UserAuthenticationLayout);\r\n\r\nUserAuthenticationLayout.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { Input } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\n\r\nexport function SlotConfigurationDetail({\r\n  //slotConfiguration,//wil use if we add reset button\r\n  modSlotConfiguration,\r\n  validationErrors,\r\n  onFieldChange,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modSlotConfiguration.SlotParams.SlotStartTime.Value}\r\n                indicator=\"required\"\r\n                disabled={false}\r\n                onChange={(data) => onFieldChange(\"SlotStartTime\", data)}\r\n                label={t(\"SlotStartTime\")}\r\n                error={t(validationErrors.SlotStartTime)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            {/* <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Tooltip\r\n                content=\"Slot start time\"\r\n                element={\r\n                  <TimePicker\r\n                    value={moment(\r\n                      modSlotConfiguration.SlotParams.SlotStartTime === null\r\n                        ? new Date().setSeconds(0)\r\n                        : new Date().setHours(\r\n                            Number(\r\n                              modSlotConfiguration.SlotParams.SlotStartTime.Value.toString()\r\n                                .split(\":\")[0]\r\n                                .toString()\r\n                            ),\r\n                            Number(\r\n                              modSlotConfiguration.SlotParams.SlotStartTime.Value.toString()\r\n                                .split(\":\")[1]\r\n                                .toString()\r\n                            )\r\n                          )\r\n                    )}\r\n                    label={t(\"SlotStartTime\")}\r\n                    displayFormat={\"hh:mm\"}\r\n                    onChange={(data) =>\r\n                      onFieldChange(\"SlotStartTime\", moment(data).format())\r\n                    }\r\n                  />\r\n                }\r\n                position=\"left center\"\r\n                event=\"focus\"\r\n                hoverable={true}\r\n              />\r\n            </div> */}\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modSlotConfiguration.SlotParams.SlotEndTime.Value}\r\n                indicator=\"required\"\r\n                disabled={false}\r\n                onChange={(data) => onFieldChange(\"SlotEndTime\", data)}\r\n                label={t(\"SlotEndTime\")}\r\n                error={t(validationErrors.SlotEndTime)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modSlotConfiguration.SlotParams.PreLoadingDuration.Value}\r\n                indicator=\"required\"\r\n                disabled={false}\r\n                onChange={(data) => onFieldChange(\"PreLoadingDuration\", data)}\r\n                label={t(\"PreLoadingDuration\")}\r\n                error={t(validationErrors.PreLoadingDuration)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modSlotConfiguration.SlotParams.SlotDuration.Value}\r\n                indicator=\"required\"\r\n                disabled={false}\r\n                onChange={(data) => onFieldChange(\"SlotDuration\", data)}\r\n                label={t(\"SlotConfiguration_SlotDuration\")}\r\n                error={t(validationErrors.SlotDuration)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  modSlotConfiguration.SlotParams.PostLoadingDuration.Value\r\n                }\r\n                indicator=\"required\"\r\n                disabled={false}\r\n                onChange={(data) => onFieldChange(\"PostLoadingDuration\", data)}\r\n                label={t(\"PostLoadingDuration\")}\r\n                error={t(validationErrors.PostLoadingDuration)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modSlotConfiguration.SlotParams.MaxNoOfSlots.Value}\r\n                indicator=\"required\"\r\n                disabled={false}\r\n                onChange={(data) => onFieldChange(\"MaxNoOfSlots\", data)}\r\n                label={t(\"MaxNoOfSlots\")}\r\n                error={t(validationErrors.MaxNoOfSlots)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modSlotConfiguration.SlotParams.BookAdvSlotMinutes.Value}\r\n                indicator=\"required\"\r\n                disabled={false}\r\n                onChange={(data) => onFieldChange(\"BookAdvSlotMinutes\", data)}\r\n                label={t(\"BookAdvSlotMinutes\")}\r\n                error={t(validationErrors.BookAdvSlotMinutes)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  modSlotConfiguration.SlotParams.AdvanceSlotBookMaxDays.Value\r\n                }\r\n                indicator=\"required\"\r\n                disabled={false}\r\n                onChange={(data) =>\r\n                  onFieldChange(\"AdvanceSlotBookMaxDays\", data)\r\n                }\r\n                label={t(\"AdvanceSlotBookMaxDays\")}\r\n                error={t(validationErrors.AdvanceSlotBookMaxDays)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  modSlotConfiguration.SlotParams.ChangeAdvSlotMinutes.Value\r\n                }\r\n                indicator=\"required\"\r\n                disabled={false}\r\n                onChange={(data) => onFieldChange(\"ChangeAdvSlotMinutes\", data)}\r\n                label={t(\"ChangeAdvSlotMinutes\")}\r\n                error={t(validationErrors.ChangeAdvSlotMinutes)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modSlotConfiguration.SlotParams.RefreshInterval.Value}\r\n                indicator=\"required\"\r\n                disabled={false}\r\n                onChange={(data) => onFieldChange(\"RefreshInterval\", data)}\r\n                label={t(\"RefreshInterval\")}\r\n                error={t(validationErrors.RefreshInterval)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport {\r\n  emptySlotConfiguration,\r\n  emptySlotConfigurationForAPI,\r\n  emptySlotParam,\r\n} from \"../../../JS/DefaultEntities\";\r\nimport axios from \"axios\";\r\nimport * as RestApi from \"../../../JS/RestApis\";\r\nimport { mapSlotParameterValidationDef } from \"../../../JS/ValidationDef\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport lodash from \"lodash\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  functionGroups,\r\n  fnSlotConfiguration,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { SlotConfigurationDetail } from \"../../UIBase/Details/SlotConfigurationDetail\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass SlotConfigurationDetailComposite extends Component {\r\n  state = {\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      mapSlotParameterValidationDef\r\n    ),\r\n    transportationType: \"\",\r\n    terminalCode: \"\",\r\n    isReadyToRender: false,\r\n    slotConfiguration: lodash.cloneDeep(emptySlotConfiguration),\r\n    modSlotConfiguration: lodash.cloneDeep(emptySlotConfiguration),\r\n    saveEnabled: false,\r\n    isNew: false,\r\n    showAuthenticationLayout: false,\r\n    tempSlotConfiguration: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    //console.log(\"Empty slotconfig\", this.state.slotConfiguration);\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getSlotConfigurations();\r\n    } catch (error) {\r\n      console.log(\"SlotConfigurationDetail:Error occurred on \", error);\r\n    }\r\n  }\r\n\r\n  getTransportationType() {\r\n    var transpType = \"\";\r\n    const { genericProps } = this.props;\r\n    if (\r\n      genericProps !== undefined &&\r\n      genericProps.transportationType !== undefined\r\n    ) {\r\n      transpType = genericProps.transportationType;\r\n    }\r\n    this.setState({ transportationType: transpType }, () => {\r\n      //console.log(\"TransportationType from state\", this.state.transportationType);\r\n    });\r\n\r\n    //console.log(\"TransportationType transpType:\",transpType);\r\n    return transpType;\r\n  }\r\n  getTerminals() {\r\n    var tmCode = \"\";\r\n    //debugger;\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"TerminalList_NotAvailable\",\r\n      messageResultDetails: [],\r\n    };\r\n\r\n    axios(\r\n      RestApi.GetTerminalDetailsForUser,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        //console.log(response);\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            Array.isArray(result.EntityResult) &&\r\n            result.EntityResult.length > 0\r\n          ) {\r\n            //debugger;\r\n            tmCode = result.EntityResult[0].Key.Code;\r\n            this.setState(\r\n              {\r\n                isReadyToRender: false,\r\n                //terminals: result.EntityResult,\r\n                terminalCode: result.EntityResult[0].Key.Code,\r\n              },\r\n              () => {\r\n                //console.log(\"Suchitra:selectedterminal:\",this.state.terminalCode)\r\n              }\r\n            );\r\n          } else {\r\n            console.log(\"Error while getting Terminal List:\", result);\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          }\r\n        } else {\r\n          console.log(\"Error while getting Terminal List:\", result);\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // this.setState({\r\n        //   isReceiptsRefreshing: false,\r\n        //   isShipmentsRefreshing: false,\r\n        // });\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n        console.log(\"Error while getting Terminal List:\", error);\r\n      });\r\n    return tmCode;\r\n  }\r\n  getSlotConfigurations() {\r\n    //console.log(\"transportationtype in get slot\",this.state.transportationType);\r\n    let transType = this.getTransportationType();\r\n    //console.log(\"transportationtype in get slot\", transType);\r\n    \r\n    let tmCode = this.getTerminals();\r\n\r\n    //debugger;\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"SlotConfigurationsEmpty\",\r\n      messageResultDetails: [],\r\n    };\r\n    axios(\r\n      RestApi.GetTerminalDetailsForUser,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        //console.log(response);\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            Array.isArray(result.EntityResult) &&\r\n            result.EntityResult.length > 0\r\n          ) {\r\n            //debugger;\r\n            tmCode = result.EntityResult[0].Key.Code;\r\n            this.setState(\r\n              {\r\n                isReadyToRender: false,\r\n                //terminals: result.EntityResult,\r\n                terminalCode: result.EntityResult[0].Key.Code,\r\n                saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnSlotConfiguration\r\n                ),\r\n              },\r\n              () => {\r\n                axios(\r\n                  RestApi.GetSlotConfiguration +\r\n                    transType +\r\n                    \"&TerminalCode=\" +\r\n                    tmCode +\r\n                    \"&GetIfEmpty=true\",\r\n                  Utilities.getAuthenticationObjectforGet(\r\n                    this.props.tokenDetails.tokenInfo\r\n                  )\r\n                )\r\n                  .then((response) => {\r\n                    var result = response.data;\r\n                    // console.log(response);\r\n                    if (result.IsSuccess === true) {\r\n                      // console.log(\"Suchitra:Success in getslotconfig\",result.EntityResult);\r\n                      // console.log(\"functions\",this.props.userDetails.EntityResult.FunctionsList);\r\n                      // console.log(\"fnSlotConfiguration\",fnSlotConfiguration);\r\n\r\n                      if (result.EntityResult.SlotParams[0].Value === \"\") {\r\n                        this.setState({isnew:true});\r\n                        //this.state.isNew = true;\r\n                        let notification = {\r\n                          messageType: \"critical\",\r\n                          message: \"SlotConfiguration_New\",\r\n                          messageResultDetails: [],\r\n                        };\r\n                        toast(\r\n                          <ErrorBoundary>\r\n                            <NotifyEvent\r\n                              notificationMessage={notification}\r\n                            ></NotifyEvent>\r\n                          </ErrorBoundary>,\r\n                          {\r\n                            autoClose:\r\n                              notification.messageType === \"success\"\r\n                                ? 10000\r\n                                : false,\r\n                          }\r\n                        );\r\n                      }\r\n                      // this.state.slotConfiguration = lodash.cloneDeep(\r\n                      //   result.EntityResult\r\n                      // );\r\n                      this.setState({slotConfiguration:lodash.cloneDeep(\r\n                        result.EntityResult)});\r\n\r\n                      let filledSlotConfiguration = this.fillSlotConfigurationForUI(\r\n                        this.state.slotConfiguration\r\n                      );\r\n                      // console.log(\r\n                      //   \"FINAL SC FOR UI:\",\r\n                      //   this.state.slotConfiguration\r\n                      // );\r\n\r\n                      this.setState({\r\n                        isReadyToRender: true,\r\n                        // slotConfiguration: lodash.cloneDeep(\r\n                        //   result.EntityResult\r\n                        // ),\r\n                        // modSlotConfiguration: lodash.cloneDeep(\r\n                        //   result.EntityResult\r\n                        // ),\r\n                        slotConfiguration: filledSlotConfiguration,\r\n                        modSlotConfiguration: filledSlotConfiguration,\r\n                        saveEnabled: Utilities.isInFunction(\r\n                          this.props.userDetails.EntityResult.FunctionsList,\r\n                          functionGroups.add,\r\n                          fnSlotConfiguration\r\n                        ),\r\n                      });\r\n                      // let temp = this.state.modSlotConfiguration;\r\n                      // console.log(\"temp\", temp);\r\n                      // temp.SlotParams.forEach(function (t) {\r\n                      //   console.log(\"t\", t);\r\n                      //   console.log(\"t value\", t.Value);\r\n                      //   if (\r\n                      //     // t.Value === undefined ||\r\n                      //     // t.Value === null ||\r\n                      //     // t.Value.length ||\r\n                      //     t.Value.toString().trim() === \"\"\r\n                      //   ) {\r\n                      //     console.log(\"modifying\", t.Value);\r\n                      //     t.Value = t.DefaultValue;\r\n                      //     //return (t[\"Value\"] = t[\"DefaulValue\"]);\r\n                      //   }\r\n                      // });\r\n                      // console.log(\"after mofify temp\", temp);\r\n                    } else {\r\n                      console.log(\"Suchitra:Error in getslotconfig\");\r\n                      // this.setState({\r\n                      //   isReceiptsRefreshing: false,\r\n                      //   isShipmentsRefreshing: false,\r\n                      // });\r\n                      toast(\r\n                        <ErrorBoundary>\r\n                          <NotifyEvent\r\n                            notificationMessage={notification}\r\n                          ></NotifyEvent>\r\n                        </ErrorBoundary>,\r\n                        {\r\n                          autoClose:\r\n                            notification.messageType === \"success\"\r\n                              ? 10000\r\n                              : false,\r\n                        }\r\n                      );\r\n                      console.log(\r\n                        \"Error while getting getSlotConfigurations:\",\r\n                        result\r\n                      );\r\n                    }\r\n                  })\r\n                  .catch((error) => {\r\n                    this.setState({\r\n                      isReceiptsRefreshing: false,\r\n                      isShipmentsRefreshing: false,\r\n                    });\r\n                    toast(\r\n                      <ErrorBoundary>\r\n                        <NotifyEvent\r\n                          notificationMessage={notification}\r\n                        ></NotifyEvent>\r\n                      </ErrorBoundary>,\r\n                      {\r\n                        autoClose:\r\n                          notification.messageType === \"success\"\r\n                            ? 10000\r\n                            : false,\r\n                      }\r\n                    );\r\n                    console.log(\r\n                      \"Error while getting getSlotConfigurations:\",\r\n                      error\r\n                    );\r\n                  });\r\n              }\r\n            );\r\n          } else {\r\n            console.log(\"Error while getting Terminal List:\", result);\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          }\r\n        } else {\r\n          console.log(\"Error while getting Terminal List:\", result);\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // this.setState({\r\n        //   isReceiptsRefreshing: false,\r\n        //   isShipmentsRefreshing: false,\r\n        // });\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n        console.log(\"Error while getting Terminal List:\", error);\r\n      });\r\n  }\r\n\r\n  saveSlotConfiguration = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempSlotConfiguration = lodash.cloneDeep(this.state.tempSlotConfiguration);\r\n     \r\n      this.updateSlotConfiguration(tempSlotConfiguration);\r\n    \r\n    } catch (error) {\r\n      console.log(\"RigidTruckDetailsComposite : Error in saveVehicle\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n      console.log(\"SlotConfigurationDetailsComposite:inside handleSave\");\r\n\r\n      let modSlotConfiguration = this.fillSlotConfigurationForAPI(\r\n        this.state.modSlotConfiguration\r\n      );\r\n       \r\n\r\n      if (this.validateSave(modSlotConfiguration)) {\r\n\r\n        let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      let tempSlotConfiguration = lodash.cloneDeep(modSlotConfiguration);\r\n      this.setState({ showAuthenticationLayout, tempSlotConfiguration }, () => {\r\n        if (showAuthenticationLayout === false) {\r\n          this.saveSlotConfiguration();\r\n        }\r\n    });\r\n\r\n       \r\n        //this.setState({ saveEnabled: true });\r\n        console.log(\"SlotConfigurationDetailsComposite:Validation passed\");\r\n        //this.updateSlotConfiguration(modSlotConfiguration);\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"SlotConfigurationDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  fillSlotConfigurationForAPI(slotConfiguration) {\r\n    var finalSlotConfiguration = lodash.cloneDeep(emptySlotConfigurationForAPI);\r\n    finalSlotConfiguration.TerminalCode = slotConfiguration.TerminalCode;\r\n    finalSlotConfiguration.TransportationType =\r\n      slotConfiguration.TransportationType;\r\n    finalSlotConfiguration.SlotParams = [];\r\n    var param;\r\n\r\n    Object.keys(slotConfiguration.SlotParams).forEach(\r\n      (key) => (\r\n        (param = lodash.cloneDeep(emptySlotParam)),\r\n        //console.log(\"param->\",param),\r\n        //console.log(\"from ui value->\",slotConfiguration.SlotParams[key].Value),\r\n        (param.Name = key),\r\n        (param.Value = slotConfiguration.SlotParams[key].Value),\r\n        (param.DefaultValue = slotConfiguration.SlotParams[key].DefaultValue),\r\n        (param.Description = slotConfiguration.SlotParams[key].Description),\r\n        //console.log(\"param->\",param),\r\n        finalSlotConfiguration.SlotParams.push(param)\r\n      )\r\n    );\r\n    //console.log(\"Modified params for API-\",finalSlotConfiguration.SlotParams);\r\n\r\n    return finalSlotConfiguration;\r\n  }\r\n  fillSlotConfigurationForUI(slotConfiguration) {\r\n    var finalSlotConfiguration = lodash.cloneDeep(emptySlotConfiguration);\r\n    finalSlotConfiguration.TerminalCode = slotConfiguration.TerminalCode;\r\n    finalSlotConfiguration.TransportationType =\r\n      slotConfiguration.TransportationType;\r\n    Object.keys(finalSlotConfiguration.SlotParams).forEach(\r\n      (key) => (\r\n        //console.log(\"key-\",key),\r\n        //console.log(\"Value,\",finalSlotConfiguration.SlotParams[key].Value),\r\n        (finalSlotConfiguration.SlotParams[key].Value =\r\n          slotConfiguration.SlotParams.filter(\r\n            (slotparam) => slotparam.Name === key\r\n          )[0].Value === \"\" ||\r\n          slotConfiguration.SlotParams.filter(\r\n            (slotparam) => slotparam.Name === key\r\n          )[0].Value === null\r\n            ? slotConfiguration.SlotParams.filter(\r\n                (slotparam) => slotparam.Name === key\r\n              )[0].DefaultValue\r\n            : slotConfiguration.SlotParams.filter(\r\n                (slotparam) => slotparam.Name === key\r\n              )[0].Value),\r\n        (finalSlotConfiguration.SlotParams[\r\n          key\r\n        ].DefaultValue = slotConfiguration.SlotParams.filter(\r\n          (slotparam) => slotparam.Name === key\r\n        )[0].DefaultValue),\r\n        (finalSlotConfiguration.SlotParams[\r\n          key\r\n        ].Description = slotConfiguration.SlotParams.filter(\r\n          (slotparam) => slotparam.Name === key\r\n        )[0].Description)\r\n      )\r\n    );\r\n    //console.log(\"Modified params-\",finalSlotConfiguration.SlotParams);\r\n\r\n    return finalSlotConfiguration;\r\n  }\r\n  validateSave(modSlotConfiguration) {\r\n    //debugger;\r\n    const validationErrors = { ...this.state.validationErrors };\r\n    Object.keys(mapSlotParameterValidationDef).forEach(function (key) {\r\n      if (modSlotConfiguration[key] !== undefined)\r\n        validationErrors[key] = Utilities.validateField(\r\n          mapSlotParameterValidationDef[key],\r\n          modSlotConfiguration.SlotParams[key]\r\n        );\r\n    });\r\n    this.setState({ validationErrors });\r\n\r\n    var returnValue = true;\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  updateSlotConfiguration(modSlotConfiguration) {\r\n    //console.log(\"inside create\", modSlotConfiguration);\r\n\r\n    let obj = {\r\n      Entity: modSlotConfiguration,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"SlotConfiguration_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"TerminalCode\"],\r\n          keyValues: [modSlotConfiguration.TerminalCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestApi.CreateSlotConfiguration,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        //console.log(\"after save\", response.data);\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.handleAuthenticationClose();\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnSlotConfiguration\r\n              ),\r\n            }\r\n            //() => this.getTerminal({ Common_Code: modTerminal.Code })\r\n          );\r\n          //this.props.onNotice(notification);\r\n        } else {\r\n          this.handleAuthenticationClose();\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnSlotConfiguration\r\n            ),\r\n          });\r\n        }\r\n        // this.props.onSaved(\r\n        //   this.state.modSlotConfiguration,\r\n        //   \"add\",\r\n        //   notification\r\n        // );\r\n        this.props.onNotice(notification);\r\n      })\r\n      .catch((error) => {\r\n        this.handleAuthenticationClose();\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnSlotConfiguration\r\n          ),\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        // this.props.onSaved(\r\n        //   this.state.modSlotConfiguration,\r\n        //   \"add\",\r\n        //   notification\r\n        // );\r\n      });\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      //debugger;\r\n      const modSlotConfiguration = lodash.cloneDeep(\r\n        this.state.modSlotConfiguration\r\n      );\r\n\r\n      modSlotConfiguration.SlotParams[propertyName].Value = data;\r\n      modSlotConfiguration.SlotParams[propertyName].DefaultValue = data;\r\n      this.setState({ modSlotConfiguration });\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (mapSlotParameterValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          mapSlotParameterValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n        //console.log(\"validationErrors->\", validationErrors);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"SlotConfigurationDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  \r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n    showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader newEntityName=\"SlotConfiguration_lblPageTitle\"></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <SlotConfigurationDetail\r\n            slotConfiguration={this.state.slotConfiguration}\r\n            modSlotConfiguration={this.state.modSlotConfiguration}\r\n            onFieldChange={this.handleChange}\r\n            validationErrors={this.state.validationErrors}\r\n            isNew={this.state.isNew}\r\n          ></SlotConfigurationDetail>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <div className=\"row\">\r\n                <div className=\"col col-12\" style={{ textAlign: \"right\" }}>\r\n                  <Button\r\n                    content={t(\"Save\")}\r\n                    disabled={!this.state.saveEnabled}\r\n                    onClick={() => this.handleSave()}\r\n                  ></Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout   \r\n            \r\n          ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={functionGroups.modify}\r\n            functionGroup={fnSlotConfiguration}\r\n            handleClose={this.handleAuthenticationClose}\r\n            handleOperation={this.saveSlotConfiguration}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(SlotConfigurationDetailComposite);\r\nSlotConfigurationDetailComposite.propTypes = {\r\n  onNotice: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\nimport { connect } from \"react-redux\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport SlotConfigurationDetailComposite from \"../Details/SlotConfigurationDetailComposite\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../../CSS/styles.css\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\n\r\nclass SlotConfigurationComposite extends Component {\r\n  state = {\r\n    isReadyToRender: false,\r\n    operationsVisibility: { add: false, delete: false, shareholder: false },\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.setState({\r\n        isReadyToRender: true,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"SlotConfigurationComposite:Error occurred on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  notifyEvent = (notification) => {\r\n    try {\r\n      toast(\r\n        <ErrorBoundary>\r\n          <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n        </ErrorBoundary>,\r\n        {\r\n          autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"SlotConfigurationComposite: Error occurred on savedEvent\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            <ErrorBoundary>\r\n              <TMUserActionsComposite\r\n                operationsVisibility={this.state.operationsVisibility}\r\n                breadcrumbItem={this.props.activeItem}\r\n                handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n                addVisible={false}\r\n                deleteVisible={false}\r\n                shrVisible={false}\r\n              />\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n              {this.state.isReadyToRender ? (\r\n                <SlotConfigurationDetailComposite\r\n                  Key=\"SlotConfigurationDetail\"\r\n                  onNotice={this.notifyEvent}\r\n                  genericProps={this.props.activeItem.itemProps}\r\n                ></SlotConfigurationDetailComposite>\r\n              ) : (\r\n                <LoadingPage message=\"Loading\"></LoadingPage>\r\n              )}\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n              <ToastContainer\r\n                hideProgressBar={true}\r\n                closeOnClick={false}\r\n                closeButton={true}\r\n                newestOnTop={true}\r\n                position=\"bottom-right\"\r\n                toastClassName=\"toast-notification-wrap\"\r\n              />\r\n            </ErrorBoundary>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(SlotConfigurationComposite);\r\n\r\nSlotConfigurationComposite.propTypes = {\r\n  activeItem: PropTypes.object,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","export const functionGroups = {\r\n  view: \"view\",\r\n  add: \"add\",\r\n  modify: \"modify\",\r\n  remove: \"remove\",\r\n};\r\nexport const fnCarrierCompany = \"carriercompany\";\r\nexport const fnDriver = \"driver\";\r\nexport const fnCustomer = \"customer\";\r\nexport const fnTrailer = \"trailer\";\r\nexport const fnOriginTerminal = \"originterminal\";\r\nexport const fnDestination = \"destination\";\r\nexport const fnPrimeMover = \"primemover\";\r\nexport const fnVehicle = \"vehicle\";\r\nexport const fnSBC = \"shipmentbycompartment\";\r\nexport const fnSBP = \"shipmentbyproduct\";\r\nexport const fnShipmentStatus = \"ViewShipmentStatus\";\r\nexport const fnVessel = \"vessel\";\r\nexport const fnOrder = \"order\";\r\nexport const fnOrderForceClose = \"OrderForceClose\";\r\n\r\nexport const fnContract = \"contract\";\r\nexport const fnTruckReceipt = \"receiptplanbycompartment\";\r\nexport const fnMarineDispatch = \"ViewMarineShipment\";\r\nexport const fnMarineShipmentByCompartment = \"MarineShipmentByCompartment\";\r\nexport const fnMarineReceipt = \"ViewMarineReceipt\";\r\nexport const fnSupplier = \"supplier\";\r\nexport const fnFinishedProduct = \"finishedproduct\";\r\nexport const fnRailDispatch = \"RailDispatch\";\r\nexport const fnRailReceipt = \"RailReceipt\";\r\nexport const fnRailRoute = \"RailRoute\";\r\nexport const fnRailWagon = \"RailWagon\"\r\n\r\nexport const fnCloseRailDispatch = \"CloseRailDispatch\";\r\nexport const fnPrintRailBOL = \"PrintRailBOL\";\r\nexport const fnPrintRailFAN = \"PrintRailFAN\";\r\nexport const fnRailDispatchLoadSpotAssignment = \"RailDispatchLoadSpotAssignment\";\r\nexport const fnRailDispatchProductAssignment = \"RailDispatchProductAssignment\";\r\nexport const fnViewRailDispatch = \"ViewRailDispatch\"\r\nexport const fnViewRailLoadingDetails = \"ViewRailLoadingDetails\"\r\n\r\nexport const fnCloseRailReceipt = \"CloseRailReceipt\";\r\nexport const fnPrintRailBOD = \"PrintRailBOD\";\r\nexport const fnPrintRailRAN = \"PrintRailRAN\";\r\nexport const fnViewRailReceipt = \"ViewRailReceipt\"\r\nexport const fnViewRailUnLoadingDetails = \"ViewRailUnLoadingDetails\"\r\n\r\nexport const fnSMSConfiguration = \"SMS\";\r\nexport const fnUnAccountedTransactionTank = \"UnAccountedTransactionTank\"\r\nexport const fnUnAccountedTransactionMeter = \"UnAccountedTransactionMeter\"\r\nexport const fnPipelineDispatch = \"PipelineDispatch\";\r\nexport const fnPipelineReceipt = \"PipelineReceipt\";\r\n\r\nexport const fnPipelineDispatchManualEntry = \"PipelineDispatchManualEntry\";\r\nexport const fnPipelineReceiptManualEntry = \"PipelineReceiptManualEntry\";\r\n\r\nexport const fnLookUpData = \"LookUpData\";\r\n\r\n\r\n\r\nexport const fnHSEInspection = \"HSEInspection\";\r\nexport const fnHSEConfiguration = \"HSEInspectionConfig\"\r\n\r\nexport const fnEmailConfiguration = \"Email\";\r\nexport const fnShareholder = \"Shareholder\";\r\nexport const fnLocation = \"LocationConfig\";\r\nexport const fnDevice = \"DeviceConfig\";\r\nexport const fnBaseProduct = \"baseproduct\";\r\nexport const fnSiteView = \"SiteView\";\r\nexport const fnLeakageManualEntry = \"LeakageManualEntry\";\r\nexport const fnTerminal = \"Terminal\";\r\nexport const fnSlotInformation = \"SlotInformation\";\r\nexport const fnTankGroup = \"TankGroup\";\r\nexport const fnTank = \"Tank\";\r\nexport const fnSealMaster = \"SealMaster\"\r\nexport const fnTankEODEntry = \"TankEODEntry\";\r\nexport const fnUnmatchedLocalTransactions = \"UnmatchedLocalTransactions\";\r\nexport const fnAccessCard = \"AccessCard\";\r\nexport const fnResetPin = \"ResetPin\";\r\nexport const fnSlotConfiguration = \"SlotConfiguration\";\r\nexport const fnUOM = \"UOM\";\r\nexport const fnPrintMarineFAN = \"PrintMarineFAN\";\r\nexport const fnPrintMarineBOL = \"PrintMarineBOL\";\r\nexport const fnViewMarineLoadingDetails = \"ViewMarineLoadingDetails\";\r\nexport const fnViewMarineShipmentAuditTrail = \"ViewMarineShipmentAuditTrail\";\r\nexport const fnCloseMarineShipment = \"CloseMarineShipment\";\r\nexport const fnIssueCard = \"IssueCard\";\r\nexport const fnActivateCard = \"ActivateCard\";\r\nexport const fnRevokeCard = \"RevokeCard\";\r\nexport const fnAutoIDAssociation = \"AutoIDAssociation\";\r\nexport const fnMarineReceiptByCompartment = \"MarineReceiptByCompartment\";\r\nexport const fnPrintMarineRAN = \"PrintMarineRAN\";\r\nexport const fnPrintMarineBOD = \"PrintMarineBOD\";\r\nexport const fnViewMarineUnloadingDetails = \"ViewMarineUnloadingDetails\";\r\nexport const fnViewMarineReceiptAuditTrail = \"ViewMarineReceiptAuditTrail\";\r\n\r\nexport const fnCloseMarineReceipt = \"CloseMarineReceipt\";\r\nexport const fnWeekendConfig = \"WeekendConfig\";\r\nexport const fnEODAdmin = \"EODAdmin\";\r\nexport const fnPrintBOL = \"PrintBOL\";\r\nexport const fnPrintFAN = \"PrintFAN\";\r\nexport const fnPrintBOD = \"PrintBOD\";\r\nexport const fnCloseShipment = \"CloseShipment\";\r\nexport const fnCloseReceipt = \"CloseReceipt\";\r\nexport const fnContractForceClose = \"CONTRACTFORCECLOSE\";\r\nexport const fnCaptain = \"Captain\";\r\nexport const fnOverrideShipmentSeq = \"OverrideShipmentSequence\";\r\nexport const fnKPIInformation = \"KPIInformation\";\r\n\r\nexport const fnLanguage = \"Language\";\r\nexport const fnWebPortalUserMap = \"WebPortalUserMap\";\r\nexport const fnBayGroup = \"BayGroup\";\r\nexport const fnPipelineHeaderSiteView = \"PipelineHeaderSiteView\";\r\n\r\nexport const fnExchangePartner = \"ExchangePartner\";\r\nexport const fnTankMonitor = \"TankMonitor\";\r\nexport const fnUser = \"PersonAdmin\";\r\nexport const fnProductReconciliationReports = \"ProductReconciliationReports\";\r\n\r\nexport const fnReportConfiguration = \"ReportConfiguration\";\r\nexport const fnProcessConfiguration = \"EXECONFIGURATION\";\r\n\r\nexport const fnShareholderAllocation = \"ShareholderAllocation\";\r\nexport const fnNotificationGroup = \"NotificationGroup\";\r\nexport const fnNotificationRestriction = \"NotificationRestriction\";\r\nexport const fnNotificationConfig = \"NotificationConfig\";\r\n\r\n\r\n\r\nexport const fn_WEIGHBRIDGEMANUALENTRY = \"WEIGHBRIDGEMANUALENTRY\";\r\nexport const fnAllowWeighBridgeManualEntry = \"AllowWeighBridgeManualEntry\";\r\n\r\n\r\nexport const fnProductAllocation = \"ProductAllocation\";\r\nexport const fnMasterDeviceConfiguration = \"MasterDeviceConfiguration\";\r\nexport const fnShareholderAgreement = \"ShareholderAgreement\";\r\nexport const fnTankShareholderPrimeFunction = \"TANKSHAREHOLDERPRIMEFUNCTION\";\r\nexport const fnRoleAdmin = \"ROLEADMIN\";\r\nexport const fnShiftConfig = \"ShiftConfig\";\r\nexport const fnPrinterConfiguration = \"PrinterConfiguration\";\r\nexport const fnCustomerAgreement = \"CustomerAgreement\";\r\nexport const fnbaySCADAConfiguration = \"BaySCADAConfiguration\";\r\nexport const fnRailReceiptUnloadSpotAssignment =\r\n  \"RailReceiptUnloadSpotAssignment\";\r\nexport const fnStaffVisitor = \"STAFF_VISITOR\";\r\nexport const fnPipelineMeterSiteView = \"PipelineMeterSiteView\";\r\nexport const fnRailSiteView = \"RailSiteView\";\r\nexport const fnMarineSiteView = \"MarineSiteView\";\r\nexport const fnLoadingDetails = \"LoadingDetails\";\r\nexport const fnUnloadingDetails = \"UnloadingDetails\";\r\n\r\n\r\n\r\nexport const fnRoadHSEInspection = \"RoadHSEInspection\";\r\nexport const fnRoadHSEConfiguration = \"RoadHSEInspectionConfig\";\r\n\r\nexport const fnMarineHSEInspection = \"MarineHSEInspection\";\r\nexport const fnMarineHSEConfiguration = \"MarineHSEInspectionConfig\";\r\n\r\nexport const fnRailHSEInspection = \"RailHSEInspection\";\r\nexport const fnRailHSEConfiguration = \"RailHSEInspectionConfig\";\r\n\r\nexport const fnPipelineHSEInspection = \"PipelineHSEInspection\";\r\nexport const fnPipelineHSEConfiguration = \"PipelineHSEInspectionConfig\";\r\nexport const fnPrintRAN = \"PrintRAN\";\r\nexport const fnViewReceiptStatus = \"ViewReceiptStatus\";\r\nexport const fnViewReceiptAuditTrail = \"ViewReceiptAuditTrail\";\r\nexport const fnCustomerRecipe = \"customerrecipe\";\r\n\r\nexport const fnCOAParameter = \"COAParameter\";\r\nexport const fnCOATemplate = \"COATemplate\";\r\nexport const fnCOAManagement = \"COAManagement\";\r\nexport const fnCOAManagementFinishedProduct = \"COAManagementFinishedProduct\";\r\nexport const fnCOACustomer = \"COACustomer\";\r\nexport const fnCOAAssignment = \"COAAssignment\";\r\n\r\nexport const fnShipmentDriver = \"ShipmentDriver\";\r\nexport const fnReceiptDriver = \"ReceiptDriver\";\r\n\r\nexport const fnProductForecastConfiguration = \"ProductForecastConfiguration\";"],"names":["TMUserActions","_ref","operationsVisibilty","breadcrumbItem","shareholders","selectedShareholder","onShareholderChange","onDelete","onAdd","popUpContent","shrVisible","handleBreadCrumbClick","addVisible","deleteVisible","modelOpen","setModelOpen","useState","popUpOpen","setPopUpOpen","handlePopUpClick","add","length","_jsxs","className","style","alignItems","padding","children","_jsx","marginTop","ErrorBoundary","TranslationConsumer","t","Breadcrumb","parents","map","parentitem","Item","onClick","undefined","itemCode","localizedKey","justifyContent","_Fragment","Select","placeholder","value","disabled","shareholder","options","Utilities","onChange","Modal","open","size","Content","Footer","Button","type","content","float","display","Popup","position","element","Icon","root","name","color","on","onMouseLeave","VerticalMenu","Header","item","popUpMenuClick","menuItem","fieldName","fieldValue","marginLeft","delete","defaultProps","itemName","itemProps","isComponent","TMUserActionsComposite","UserAuthenticationLayout","Component","constructor","arguments","state","isPasswordRequired","Password","validationErrors","userAuthenticationValidationDef","authenticationResponse","btnAuthenticateEnabled","onFieldChange","propertyName","data","this","setState","lodash","validatePassword","returnValue","Object","values","every","onCloseClick","props","handleClose","AuthenticateUser","msg","pass","Username","salt","cryptojs","WordArray","random","key","keySize","iterations","iv","encrypted","encrypt","Pkcs7","mode","CBC","transitmessage","toString","axios","RestAPIs","encodeURIComponent","tokenDetails","tokenInfo","then","response","result","IsSuccess","EntityResult","toLowerCase","handleOperation","ErrorList","catch","error","componentDidMount","IsPasswordRequired","console","log","userDetails","roleFunctionInfo","functionName","functionGroup","render","textAlign","flexWrap","Input","fluid","disablePasswordToggle","indicator","label","reserveSpace","connect","getUserDetails","TokenAuth","SlotConfigurationDetail","modSlotConfiguration","SlotParams","SlotStartTime","Value","SlotEndTime","PreLoadingDuration","SlotDuration","PostLoadingDuration","MaxNoOfSlots","BookAdvSlotMinutes","AdvanceSlotBookMaxDays","ChangeAdvSlotMinutes","RefreshInterval","SlotConfigurationDetailComposite","mapSlotParameterValidationDef","transportationType","terminalCode","isReadyToRender","slotConfiguration","emptySlotConfiguration","saveEnabled","isNew","showAuthenticationLayout","tempSlotConfiguration","saveSlotConfiguration","updateSlotConfiguration","handleSave","fillSlotConfigurationForAPI","validateSave","IsWebPortalUser","handleChange","DefaultValue","handleAuthenticationClose","IsArchived","getSlotConfigurations","getTransportationType","transpType","genericProps","getTerminals","tmCode","notification","messageType","message","messageResultDetails","RestApi","Array","isArray","Key","Code","toast","NotifyEvent","notificationMessage","autoClose","transType","FunctionsList","functionGroups","modify","fnSlotConfiguration","isnew","filledSlotConfiguration","fillSlotConfigurationForUI","isReceiptsRefreshing","isShipmentsRefreshing","param","finalSlotConfiguration","emptySlotConfigurationForAPI","TerminalCode","TransportationType","keys","forEach","emptySlotParam","Name","Description","push","filter","slotparam","obj","Entity","keyFields","keyValues","isSuccess","errorMessage","onNotice","TMDetailsHeader","newEntityName","UserName","LoadingPage","SlotConfigurationComposite","operationsVisibility","notifyEvent","activeItem","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","toastClassName","entityCode","popUpContents","margin","List","view","remove","fnCarrierCompany","fnDriver","fnCustomer","fnTrailer","fnOriginTerminal","fnDestination","fnPrimeMover","fnVehicle","fnSBC","fnSBP","fnShipmentStatus","fnVessel","fnOrder","fnOrderForceClose","fnContract","fnTruckReceipt","fnMarineDispatch","fnMarineShipmentByCompartment","fnMarineReceipt","fnSupplier","fnFinishedProduct","fnRailDispatch","fnRailReceipt","fnRailRoute","fnRailWagon","fnCloseRailDispatch","fnPrintRailBOL","fnPrintRailFAN","fnRailDispatchLoadSpotAssignment","fnRailDispatchProductAssignment","fnViewRailDispatch","fnViewRailLoadingDetails","fnCloseRailReceipt","fnPrintRailBOD","fnPrintRailRAN","fnViewRailReceipt","fnViewRailUnLoadingDetails","fnSMSConfiguration","fnUnAccountedTransactionTank","fnUnAccountedTransactionMeter","fnPipelineDispatch","fnPipelineReceipt","fnPipelineDispatchManualEntry","fnPipelineReceiptManualEntry","fnLookUpData","fnHSEInspection","fnHSEConfiguration","fnEmailConfiguration","fnShareholder","fnLocation","fnDevice","fnBaseProduct","fnSiteView","fnLeakageManualEntry","fnTerminal","fnSlotInformation","fnTankGroup","fnTank","fnSealMaster","fnTankEODEntry","fnUnmatchedLocalTransactions","fnAccessCard","fnResetPin","fnPrintMarineFAN","fnPrintMarineBOL","fnViewMarineLoadingDetails","fnViewMarineShipmentAuditTrail","fnCloseMarineShipment","fnIssueCard","fnActivateCard","fnRevokeCard","fnAutoIDAssociation","fnMarineReceiptByCompartment","fnPrintMarineRAN","fnPrintMarineBOD","fnViewMarineUnloadingDetails","fnViewMarineReceiptAuditTrail","fnCloseMarineReceipt","fnWeekendConfig","fnEODAdmin","fnPrintBOL","fnPrintFAN","fnPrintBOD","fnCloseShipment","fnCloseReceipt","fnContractForceClose","fnCaptain","fnOverrideShipmentSeq","fnKPIInformation","fnLanguage","fnWebPortalUserMap","fnBayGroup","fnPipelineHeaderSiteView","fnTankMonitor","fnUser","fnProductReconciliationReports","fnReportConfiguration","fnProcessConfiguration","fnShareholderAllocation","fnNotificationGroup","fnNotificationRestriction","fnNotificationConfig","fnAllowWeighBridgeManualEntry","fnProductAllocation","fnMasterDeviceConfiguration","fnShareholderAgreement","fnTankShareholderPrimeFunction","fnRoleAdmin","fnShiftConfig","fnPrinterConfiguration","fnCustomerAgreement","fnbaySCADAConfiguration","fnRailReceiptUnloadSpotAssignment","fnStaffVisitor","fnPipelineMeterSiteView","fnRailSiteView","fnMarineSiteView","fnLoadingDetails","fnUnloadingDetails","fnRoadHSEInspection","fnRoadHSEConfiguration","fnMarineHSEInspection","fnMarineHSEConfiguration","fnRailHSEInspection","fnRailHSEConfiguration","fnPipelineHSEInspection","fnPipelineHSEConfiguration","fnPrintRAN","fnViewReceiptStatus","fnCustomerRecipe","fnCOAParameter","fnCOATemplate","fnCOAManagement","fnCOACustomer","fnCOAAssignment","fnProductForecastConfiguration"],"sourceRoot":""}