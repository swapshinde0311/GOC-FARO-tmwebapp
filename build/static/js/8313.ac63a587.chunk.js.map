{"version":3,"file":"static/js/8313.ac63a587.chunk.js","mappings":"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","sources":["Components/UIBase/Details/UnAccountedTransactionTankDetails.jsx","Components/Composite/Details/UnAccountedTransactionTankDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/functionalUtilities.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Input, Select, DatePicker, Accordion } from \"@scuf/common\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nUnAccountedTransactionTankDetails.propTypes = {\r\n  listOptions: PropTypes.shape({\r\n    languageOptions: PropTypes.array,\r\n    terminalCodes: PropTypes.array,\r\n    densityUOMOptions: PropTypes.array,\r\n    customerOptions: PropTypes.array,\r\n    quantityUOMOptions: PropTypes.array,\r\n    tankCodeOptions: PropTypes.array,\r\n    transactionTypeOptions: PropTypes.array,\r\n    baseProdcutOptions: PropTypes.array,\r\n    transportationTypeOptions: PropTypes.array,\r\n  }).isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  modAccountedTransaction: PropTypes.object.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onCustomerSearchChange: PropTypes.func.isRequired,\r\n  isEnterpriseNode: PropTypes.bool.isRequired,\r\n  selectedAttributeList: PropTypes.array.isRequired,\r\n  attributeValidationErrors: PropTypes.array.isRequired,\r\n  handleCellDataEdit: PropTypes.func.isRequired,\r\n};\r\nUnAccountedTransactionTankDetails.defaultProps = {\r\n  listOptions: {\r\n    quantityUOMOptions: [],\r\n    densityUOMOptions: [],\r\n    tankCodeOptions: [],\r\n    customerOptions: [],\r\n    transactionTypeOptions: [],\r\n    baseProdcutOptions: [],\r\n    transportationTypeOptions: [],\r\n  },\r\n};\r\n\r\nexport function UnAccountedTransactionTankDetails({\r\n  modAccountedTransaction,\r\n  listOptions,\r\n  validationErrors,\r\n  onFieldChange,\r\n  onCustomerSearchChange,\r\n  isEnterpriseNode,\r\n  selectedAttributeList,\r\n  attributeValidationErrors,\r\n  handleCellDataEdit,\r\n}) {\r\n  const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n    let attributeValidation = [];\r\n    attributeValidation = attributeValidationErrors.find(\r\n      (selectedAttribute) => {\r\n        return selectedAttribute.TerminalCode === terminal;\r\n      }\r\n    );\r\n    return attributeValidation.attributeValidationErrors;\r\n  };\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Reconciliation_Tank\")}\r\n                indicator=\"required\"\r\n                value={modAccountedTransaction.TankCode}\r\n                options={listOptions.tankCodeOptions}\r\n                onChange={(data) => onFieldChange(\"TankCode\", data)}\r\n                reserveSpace={false}\r\n                error={t(validationErrors.TankCode)}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Reconciliation_UnAccountedType\")}\r\n                indicator=\"required\"\r\n                options={listOptions.transactionTypeOptions}\r\n                reserveSpace={false}\r\n                onChange={(data) =>\r\n                  onFieldChange(\"UnAccountedTransactionTypeCode\", data)\r\n                }\r\n                value={modAccountedTransaction.UnAccountedTransactionTypeCode}\r\n                error={t(validationErrors.UnAccountedTransactionTypeCode)}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Vehicle_Transport\")}\r\n                indicator=\"required\"\r\n                options={listOptions.transportationTypeOptions}\r\n                onChange={(data) => onFieldChange(\"TransportationType\", data)}\r\n                value={modAccountedTransaction.TransportationType}\r\n                error={t(validationErrors.TransportationType)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Reconciliation_QuantityUOM\")}\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"QuantityUOM\", data)}\r\n                search={true}\r\n                options={listOptions.quantityUOMOptions}\r\n                reserveSpace={false}\r\n                value={modAccountedTransaction.QuantityUOM}\r\n                error={t(validationErrors.QuantityUOM)}\r\n\r\n                //error={t(validationErrors.ShipmentQuantityUOM)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"GrossQuantity\")}\r\n                onChange={(data) =>\r\n                  onFieldChange(\"UnAccountedGrossQuantity\", data)\r\n                }\r\n                reserveSpace={false}\r\n                value={modAccountedTransaction.UnAccountedGrossQuantity}\r\n                error={t(validationErrors.UnAccountedGrossQuantity)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"Reconciliation_NetQuantity\")}\r\n                onChange={(data) =>\r\n                  onFieldChange(\"UnAccountedNetQuantity\", data)\r\n                }\r\n                reserveSpace={false}\r\n                value={modAccountedTransaction.UnAccountedNetQuantity}\r\n                error={t(validationErrors.UnAccountedNetQuantity)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"Reconciliation_Density\")}\r\n                onChange={(data) => onFieldChange(\"Density\", data)}\r\n                reserveSpace={false}\r\n                value={modAccountedTransaction.Density}\r\n                error={t(validationErrors.Density)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Reconciliation_DensityUOM\")}\r\n                indicator=\"required\"\r\n                options={listOptions.densityUOMOptions}\r\n                reserveSpace={false}\r\n                search={true}\r\n                onChange={(data) => onFieldChange(\"DensityUOM\", data)}\r\n                value={modAccountedTransaction.DensityUOM}\r\n                error={t(validationErrors.DensityUOM)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <DatePicker\r\n                fluid\r\n                //value={modRailWagon.LicenseExpiryDate === null ? \"\" : new Date(modRailWagon.LicenseExpiryDate)}\r\n                label={t(\"Reconciliation_StartTime\")}\r\n                type=\"datetime\"\r\n                minuteStep=\"5\"\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"TransactionStartTime\", data)}\r\n                displayFormat={getCurrentDateFormat()}\r\n                reserveSpace={false}\r\n                value={modAccountedTransaction.TransactionStartTime}\r\n                error={t(validationErrors.TransactionStartTime)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <DatePicker\r\n                fluid\r\n                //value={modRailWagon.LicenseExpiryDate === null ? \"\" : new Date(modRailWagon.LicenseExpiryDate)}\r\n                label={t(\"Reconciliation_EndTime\")}\r\n                type=\"datetime\"\r\n                minuteStep=\"5\"\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"TransactionEndTime\", data)}\r\n                displayFormat={getCurrentDateFormat()}\r\n                //error={t(validationErrors.LicenseExpiryDate)}\r\n                reserveSpace={false}\r\n                value={\r\n                  modAccountedTransaction.TransactionEndTime === null\r\n                    ? \"\"\r\n                    : modAccountedTransaction.TransactionEndTime\r\n                }\r\n                error={t(validationErrors.TransactionEndTime)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Reconciliation_BaseProduct\")}\r\n                indicator=\"required\"\r\n                options={listOptions.baseProdcutOptions}\r\n                reserveSpace={false}\r\n                onChange={(data) => onFieldChange(\"BaseProductCode\", data)}\r\n                value={modAccountedTransaction.BaseProductCode}\r\n                error={t(validationErrors.BaseProductCode)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                label={t(\"Reconciliation_Comments\")}\r\n                onChange={(data) => onFieldChange(\"Comments\", data)}\r\n                reserveSpace={false}\r\n                value={modAccountedTransaction.Comments}\r\n                error={t(validationErrors.Comments)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                options={listOptions.customerOptions}\r\n                label={t(\"ViewMarineShipmentList_Customer\")}\r\n                search={true}\r\n                onChange={(data) => onFieldChange(\"CustomerCode\", data)}\r\n                onSearch={onCustomerSearchChange}\r\n                reserveSpace={false}\r\n                value={modAccountedTransaction.CustomerCode}\r\n                error={t(validationErrors.CustomerCode)}\r\n              />\r\n            </div>\r\n          </div>\r\n          {selectedAttributeList.length > 0\r\n            ? selectedAttributeList.map((attribute) => (\r\n                <ErrorBoundary>\r\n                  <Accordion>\r\n                    <Accordion.Content\r\n                      className=\"attributeAccordian\"\r\n                      title={\r\n                        isEnterpriseNode\r\n                          ? attribute.TerminalCode +\r\n                            \" - \" +\r\n                            t(\"Attributes_Header\")\r\n                          : t(\"Attributes_Header\")\r\n                      }\r\n                    >\r\n                      <AttributeDetails\r\n                        selectedAttributeList={attribute.attributeMetaDataList}\r\n                        handleCellDataEdit={handleCellDataEdit}\r\n                        attributeValidationErrors={handleValidationErrorFilter(\r\n                          attributeValidationErrors,\r\n                          attribute.TerminalCode\r\n                        )}\r\n                      ></AttributeDetails>\r\n                    </Accordion.Content>\r\n                  </Accordion>\r\n                </ErrorBoundary>\r\n              ))\r\n            : null}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { UnAccountedTransactionTankDetails } from \"../../UIBase/Details/UnAccountedTransactionTankDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as getUserDetails from \"../../../Redux/Actions/GetUserDetails\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport { UnAccountedTransactionTankValidationDef } from \"../../../JS/ValidationDef\";\r\nimport {\r\n  functionGroups,\r\n  fnUnAccountedTransactionTank,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport lodash from \"lodash\";\r\nimport { emptyAccountedTransaction } from \"../../../JS/DefaultEntities\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { unAccountedTankTransaction } from \"../../../JS/AttributeEntity\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\nclass UnAccountedTransactionTankDetailsComposite extends Component {\r\n  state = {\r\n    AccountedTransaction: lodash.cloneDeep(emptyAccountedTransaction), //{ ...emptyCustomer },\r\n    modAccountedTransaction: lodash.cloneDeep(emptyAccountedTransaction),\r\n    //isDetails:false,\r\n    isReadyToRender: true,\r\n    saveEnabled: false,\r\n    tankCodeOptions: [],\r\n    transactionTypeOptions: [],\r\n    baseProdcutOptions: [],\r\n    quantityUOMOptions: [],\r\n    transportationTypeOptions: [],\r\n    customerOptions: [],\r\n    densityUOMOptions: [],\r\n    customerSearchOptions: [],\r\n    attributeMetaDataList: [],\r\n    selectedAttributeList: [],\r\n    attributeValidationErrors: [],\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      UnAccountedTransactionTankValidationDef\r\n    ),\r\n    showAuthenticationLayout: false,\r\n    tempAccountedTransaction: {},\r\n  };\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      const AccountedTransaction = lodash.cloneDeep(\r\n        this.state.AccountedTransaction\r\n      );\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modAccountedTransaction: { ...AccountedTransaction },\r\n          validationErrors,\r\n          selectedAttributeList: [],\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange([]);\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            this.localNodeAttribute();\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  GetUOMList() {\r\n    axios(\r\n      RestAPIs.GetUOMList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        //console.log(response);\r\n        var result = response.data;\r\n\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            let quantityUOMOptions = [];\r\n            let densityUOMOptions = [];\r\n            if (Array.isArray(result.EntityResult.VOLUME)) {\r\n              quantityUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.VOLUME\r\n              );\r\n            }\r\n            // debugger;\r\n            if (Array.isArray(result.EntityResult.MASS)) {\r\n              let massUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.MASS\r\n              );\r\n              massUOMOptions.forEach((massUOM) =>\r\n                quantityUOMOptions.push(massUOM)\r\n              );\r\n            }\r\n            if (Array.isArray(result.EntityResult.DENSITY)) {\r\n              densityUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.DENSITY\r\n              );\r\n            }\r\n            this.setState({ quantityUOMOptions, densityUOMOptions });\r\n\r\n            // this.setState({ quantityUOMOptions, quantityUOMfilteredOptions });\r\n          }\r\n        } else {\r\n          console.log(\r\n            \"UnAccountedTransactionTankDetailsComposite:Error in GetUOMList:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"UnAccountedTransactionTankDetailsComposite:Error while getting GetUOMList:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n  componentWillReceiveProps = (nextProps) => {\r\n    try {\r\n      if (\r\n        this.state.AccountedTransaction.TankCode !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.setState(\r\n          {\r\n            modAccountedTransaction: emptyAccountedTransaction,\r\n            AccountedTransaction: emptyAccountedTransaction,\r\n            saveEnabled: true,\r\n            selectedAttributeList: [],\r\n          },\r\n          () => {\r\n            if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n              this.terminalSelectionChange([]);\r\n              this.handleResetAttributeValidationError();\r\n            } else {\r\n              this.localNodeAttribute();\r\n              this.handleResetAttributeValidationError();\r\n            }\r\n          }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getAttributes();\r\n      this.GetUOMList();\r\n      this.GetTankList();\r\n      this.GetBaseProductsList();\r\n      this.GetUnAccountedTransactionTypeList();\r\n      this.GetCustomerList();\r\n      this.GetTransportationTypeOptions();\r\n      let modAccountedTransaction = lodash.cloneDeep(\r\n        this.state.modAccountedTransaction\r\n      );\r\n      modAccountedTransaction.ShareholderCode = this.props.selectedShareholder;\r\n      this.setState({\r\n        saveEnabled: Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          fnUnAccountedTransactionTank\r\n        ),\r\n        modAccountedTransaction: modAccountedTransaction,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  GetCustomerList() {\r\n    let modAccountedTransaction = lodash.cloneDeep(\r\n      this.state.modAccountedTransaction\r\n    );\r\n    axios(\r\n      RestAPIs.GetCustomerDestinations +\r\n        \"?TransportationType=\" +\r\n        modAccountedTransaction.TransportationType +\r\n        \"&ShareholderCode=\" +\r\n        this.props.selectedShareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    ).then((response) => {\r\n      var result = response.data;\r\n      if (result.IsSuccess === true) {\r\n        if (Array.isArray(result.EntityResult)) {\r\n          let shareholderCustomers = result.EntityResult.filter(\r\n            (shareholderCust) =>\r\n              shareholderCust.ShareholderCode === this.props.selectedShareholder\r\n          );\r\n          if (shareholderCustomers.length > 0) {\r\n            let customerDestinationOptions =\r\n              shareholderCustomers[0].CustomerDestinationsList;\r\n            let customerOptions = [];\r\n            if (customerDestinationOptions !== null) {\r\n              customerOptions = Object.keys(customerDestinationOptions);\r\n              customerOptions =\r\n                Utilities.transferListtoOptions(customerOptions);\r\n            }\r\n            this.setState({ customerOptions });\r\n          } else {\r\n            console.log(\r\n              \"UnAccountedTransactionTankDetailsComposite:no customers identified for shareholder\"\r\n            );\r\n          }\r\n        } else {\r\n          console.log(\r\n            \"UnAccountedTransactionTankDetailsComposite:customerdestinations not identified for shareholder\"\r\n          );\r\n        }\r\n      }\r\n    });\r\n  }\r\n  GetTransportationTypeOptions() {\r\n    const transportationTypeList = [];\r\n    for (let key in Constants.TransportationType) {\r\n      if (key !== Constants.TransportationType.PIPELINE) {\r\n        transportationTypeList.push(key);\r\n      }\r\n    }\r\n    this.setState({\r\n      transportationTypeOptions: Utilities.transferListtoOptions(\r\n        transportationTypeList\r\n      ),\r\n    });\r\n  }\r\n  GetTankList() {\r\n    axios(\r\n      RestAPIs.GetTanks + \"?ShareholderCode=\" + this.props.selectedShareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        //console.log(response);\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let tankCodeOptions = [];\r\n          if (result.EntityResult !== null) {\r\n            tankCodeOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n          }\r\n          this.setState({ tankCodeOptions });\r\n        } else {\r\n          console.log(\r\n            \"UnAccountedTransactionTankDetailsComposite:Error in GetTankList:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"UnAccountedTransactionTankDetailsComposite:Error while getting GetTankList:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n  GetUnAccountedTransactionTypeList() {\r\n    axios(\r\n      RestAPIs.GetUnAccountedTransactionTypes,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        //console.log(response);\r\n        var result = response.data;\r\n\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            var transactionTypeOptionList = result.EntityResult.Tank;\r\n            let transactionOptions = [];\r\n            transactionTypeOptionList.forEach((TankType) => {\r\n              transactionOptions.push({\r\n                text: TankType,\r\n                value: TankType,\r\n              });\r\n            });\r\n            this.setState({\r\n              transactionTypeOptions: transactionOptions,\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\r\n            \"UnAccountedTransactionTankDetailsComposite:Error in GetUnAccountedTransactionTypeList:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"UnAccountedTransactionTankDetailsComposite:Error while getting GetUnAccountedTransactionTypeList:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n  GetBaseProductsList() {\r\n    axios(\r\n      RestAPIs.GetBaseProducts,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        //console.log(response);\r\n        var result = response.data;\r\n        let baseProdcutOptions = [];\r\n        let TankWhiteOptions = [];\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            Object.keys(result.EntityResult).forEach((prodType) => {\r\n              if (\r\n                result.EntityResult[prodType] !== undefined &&\r\n                Array.isArray(result.EntityResult[prodType])\r\n              ) {\r\n                baseProdcutOptions = baseProdcutOptions.concat(\r\n                  Utilities.transferListtoOptions(result.EntityResult[prodType])\r\n                );\r\n              }\r\n            });\r\n\r\n            // if (Array.isArray(result.EntityResult.ALLPROD)) {\r\n            //   baseProdcutOptions = Utilities.transferListtoOptions(\r\n            //     result.EntityResult.ALLPROD\r\n            //   );\r\n            // }\r\n            // if (Array.isArray(result.EntityResult.WHITE)) {\r\n            //   TankWhiteOptions = Utilities.transferListtoOptions(\r\n            //     result.EntityResult.WHITE\r\n            //   );\r\n            //   TankWhiteOptions.forEach((TankWhite) =>\r\n            //     baseProdcutOptions.push(TankWhite)\r\n            //   );\r\n            // }\r\n          }\r\n          this.setState({ baseProdcutOptions });\r\n        } else {\r\n          console.log(\r\n            \"UnAccountedTransactionTankDetailsComposite:Error in GetBaseProductsList:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n        this.getAdditivesList(baseProdcutOptions);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"UnAccountedTransactionTankDetailsComposite:Error while getting GetBaseProductsList:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n  getAdditivesList(baseProdcutOptions) {\r\n    axios(\r\n      RestAPIs.GetAdditives,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            result.EntityResult !== undefined\r\n          ) {\r\n            let additiveDetails = Utilities.transferListtoOptions(\r\n              result.EntityResult.ALLPROD\r\n            );\r\n            additiveDetails.forEach((additive) =>\r\n              baseProdcutOptions.push(additive)\r\n            );\r\n            this.setState({ baseProdcutOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getAdditivesList:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Additives List:\", error);\r\n      });\r\n  }\r\n  handleCustomerSearchChange = (CustomerCode) => {\r\n    try {\r\n      let customerSearchOptions = this.state.customerOptions.filter((item) =>\r\n        item.value.toLowerCase().includes(CustomerCode.toLowerCase())\r\n      );\r\n      if (customerSearchOptions.length > Constants.filteredOptionsCount) {\r\n        customerSearchOptions = customerSearchOptions.slice(\r\n          0,\r\n          Constants.filteredOptionsCount\r\n        );\r\n      }\r\n\r\n      this.setState({\r\n        customerSearchOptions,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:Error occured on handleDriverSearchChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  validateSave(attributeList) {\r\n    const { modAccountedTransaction } = this.state;\r\n    var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    Object.keys(UnAccountedTransactionTankValidationDef).forEach(function (\r\n      key\r\n    ) {\r\n      validationErrors[key] = Utilities.validateField(\r\n        UnAccountedTransactionTankValidationDef[key],\r\n        modAccountedTransaction[key]\r\n      );\r\n    });\r\n    this.setState({ validationErrors });\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({ validationErrors, attributeValidationErrors });\r\n\r\n    var returnValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n    return returnValue;\r\n  }\r\n  createAccountedTransaction(modAccountedTransaction) {\r\n    this.handleAuthenticationClose();\r\n    this.setState({ saveEnabled: false });\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      Entity: modAccountedTransaction,\r\n    };\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"UnAccountedTransactionTank_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"tankCodeOptions\"],\r\n          keyValues: [modAccountedTransaction.TankCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.CreateUnAccountedTankTransaction,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            saveEnabled: false,\r\n            AccountedTransaction: modAccountedTransaction,\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnUnAccountedTransactionTank\r\n            ),\r\n          });\r\n          console.log(\r\n            \"UnAccountedTransactionTankDetailsComposite:Error in createAccountedTransaction:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n        this.props.onSaved(modAccountedTransaction, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnUnAccountedTransactionTank\r\n          ),\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(modAccountedTransaction, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modAccountedTransaction = lodash.cloneDeep(\r\n        this.state.modAccountedTransaction\r\n      );\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      modAccountedTransaction[propertyName] = data;\r\n      this.setState({ modAccountedTransaction });\r\n      if (UnAccountedTransactionTankValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          UnAccountedTransactionTankValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleAddTransaction = () => {\r\n    let tempAccountedTransaction = lodash.cloneDeep(this.state.tempAccountedTransaction);\r\n    this.createAccountedTransaction(tempAccountedTransaction);\r\n  };\r\n\r\n\r\n  \r\n  handleSave = () => {\r\n    try {\r\n      let modAccountedTransaction = this.fillDetails();\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.selectedAttributeList\r\n      );\r\n    //  this.setState({ saveEnabled: false });\r\n      if (this.validateSave(attributeList)) {\r\n        modAccountedTransaction = this.convertStringtoDecimal(\r\n          modAccountedTransaction,\r\n          attributeList\r\n        );\r\n\r\n        let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      let tempAccountedTransaction = lodash.cloneDeep(modAccountedTransaction);\r\n      this.setState({ showAuthenticationLayout, tempAccountedTransaction }, () => {\r\n        if (showAuthenticationLayout === false) {\r\n          this.handleAddTransaction();\r\n        }\r\n    });\r\n\r\n       \r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  fillDetails() {\r\n    try {\r\n      let modAccountedTransaction = lodash.cloneDeep(\r\n        this.state.modAccountedTransaction\r\n      );\r\n      //let attributeList = lodash.cloneDeep(this.state.selectedAttributeList);\r\n\r\n      modAccountedTransaction.ShareholderCode = this.props.selectedShareholder;\r\n      if (\r\n        modAccountedTransaction.Density !== null &&\r\n        modAccountedTransaction.Density !== \"\"\r\n      )\r\n        modAccountedTransaction.Density =\r\n          modAccountedTransaction.Density.toLocaleString();\r\n      if (\r\n        modAccountedTransaction.UnAccountedNetQuantity !== null &&\r\n        modAccountedTransaction.UnAccountedNetQuantity !== \"\"\r\n      )\r\n        modAccountedTransaction.UnAccountedNetQuantity =\r\n          modAccountedTransaction.UnAccountedNetQuantity.toLocaleString();\r\n      if (\r\n        modAccountedTransaction.UnAccountedGrossQuantity !== null &&\r\n        modAccountedTransaction.UnAccountedGrossQuantity !== \"\"\r\n      )\r\n        this.setState({ modAccountedTransaction });\r\n      return modAccountedTransaction;\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:Error occured on fillDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  getAttributes() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [unAccountedTankTransaction],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.UNACCOUNTEDTANKTRANSACTION\r\n                ),\r\n            },\r\n            () => {\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                this.terminalSelectionChange([]);\r\n              } else {\r\n                this.localNodeAttribute();\r\n              }\r\n            }\r\n          );\r\n        } else {\r\n          console.log(\r\n            \"UnAccountedTransactionTankDetailsComposite:Error in getAttributes:\"\r\n          );\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:Error while getAttributes:\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  convertStringtoDecimal(modAccountedMeterTransaction, attributeList) {\r\n    try {\r\n      if (\r\n        modAccountedMeterTransaction.UnAccountedGrossQuantity !== null &&\r\n        modAccountedMeterTransaction.UnAccountedGrossQuantity !== \"\"\r\n      ) {\r\n        modAccountedMeterTransaction.UnAccountedGrossQuantity =\r\n          Utilities.convertStringtoDecimal(\r\n            modAccountedMeterTransaction.UnAccountedGrossQuantity\r\n          );\r\n      }\r\n      if (\r\n        modAccountedMeterTransaction.UnAccountedNetQuantity !== null &&\r\n        modAccountedMeterTransaction.UnAccountedNetQuantity !== \"\"\r\n      ) {\r\n        modAccountedMeterTransaction.UnAccountedNetQuantity =\r\n          Utilities.convertStringtoDecimal(\r\n            modAccountedMeterTransaction.UnAccountedNetQuantity\r\n          );\r\n      }\r\n      if (\r\n        modAccountedMeterTransaction.Density !== null &&\r\n        modAccountedMeterTransaction.Density !== \"\"\r\n      ) {\r\n        modAccountedMeterTransaction.Density = Utilities.convertStringtoDecimal(\r\n          modAccountedMeterTransaction.Density\r\n        );\r\n      }\r\n      modAccountedMeterTransaction = this.fillAttributeDetails(\r\n        modAccountedMeterTransaction,\r\n        attributeList\r\n      );\r\n      return modAccountedMeterTransaction;\r\n    } catch (err) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:convertStringtoDecimal error modAccountedMeterTransaction Details\",\r\n        err\r\n      );\r\n    }\r\n  }\r\n\r\n  fillAttributeDetails(modAccountedMeterTransaction, attributeList) {\r\n    try {\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modAccountedMeterTransaction.Attributes = [];\r\n      attributeList.forEach((comp) => {\r\n        let attribute = {\r\n          ListOfAttributeData: [],\r\n        };\r\n        attribute.TerminalCode = comp.TerminalCode;\r\n        comp.attributeMetaDataList.forEach((det) => {\r\n          attribute.ListOfAttributeData.push({\r\n            AttributeCode: det.Code,\r\n            AttributeValue: det.DefaultValue,\r\n          });\r\n        });\r\n        modAccountedMeterTransaction.Attributes.push(attribute);\r\n      });\r\n      this.setState({ modAccountedMeterTransaction });\r\n      return modAccountedMeterTransaction;\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:Error occured on fillAttributeDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  handleCellDataEdit = (attribute, value) => {\r\n    try {\r\n      attribute.DefaultValue = value;\r\n      this.setState({\r\n        attribute: attribute,\r\n      });\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:Error occured on handleCellDataEdit\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var selectedAttributeList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.attributeMetaDataList\r\n        );\r\n        selectedAttributeList = lodash.cloneDeep(\r\n          this.state.selectedAttributeList\r\n        );\r\n        const attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        var modTank = lodash.cloneDeep(this.state.modAccountedTransaction);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = selectedAttributeList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.UNACCOUNTEDTANKTRANSACTION.forEach(function (\r\n              attributeMetaData\r\n            ) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                var Attributevalue = modTank.Attributes.find(\r\n                  (baseproductAttribute) => {\r\n                    return baseproductAttribute.TerminalCode === terminal;\r\n                  }\r\n                );\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute =\r\n                      Attributevalue.ListOfAttributeData.find((x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      });\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        selectedAttributeList = [];\r\n        selectedAttributeList = attributesTerminalsList;\r\n        selectedAttributeList = Utilities.attributesConvertoDecimal(\r\n          selectedAttributeList\r\n        );\r\n\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.setState({ selectedAttributeList, attributeValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (Array.isArray(attributeMetaDataList.UNACCOUNTEDTANKTRANSACTION) && attributeMetaDataList.UNACCOUNTEDTANKTRANSACTION.length > 0) {\r\n        this.terminalSelectionChange([\r\n          attributeMetaDataList.UNACCOUNTEDTANKTRANSACTION[0].TerminalCode,\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionTankDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors:\r\n          Utilities.getAttributeInitialValidationErrors(\r\n            attributeMetaDataList.UNACCOUNTEDTANKTRANSACTION\r\n          ),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"handleAttributeValidationError:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader newEntityName=\"TankUnaccountedTransaction_Header\"></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <UnAccountedTransactionTankDetails\r\n            modAccountedTransaction={this.state.modAccountedTransaction}\r\n            listOptions={{\r\n              quantityUOMOptions: this.state.quantityUOMOptions,\r\n              densityUOMOptions: this.state.densityUOMOptions,\r\n              tankCodeOptions: this.state.tankCodeOptions,\r\n              transactionTypeOptions: this.state.transactionTypeOptions,\r\n              baseProdcutOptions: this.state.baseProdcutOptions,\r\n              customerOptions: this.state.customerOptions,\r\n              customerSearchOptions: this.state.customerSearchOptions,\r\n              transportationTypeOptions: this.state.transportationTypeOptions,\r\n            }}\r\n            onFieldChange={this.handleChange}\r\n            validationErrors={this.state.validationErrors}\r\n            onCustomerSearchChange={this.handleCustomerSearchChange}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            selectedAttributeList={this.state.selectedAttributeList}\r\n            handleCellDataEdit={this.handleCellDataEdit}\r\n          ></UnAccountedTransactionTankDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={functionGroups.add}\r\n            functionGroup={fnUnAccountedTransactionTank}\r\n            handleOperation={this.handleAddTransaction}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\nconst mapReceiptToProps = (receipt) => {\r\n  return {\r\n    userActions: bindActionCreators(getUserDetails, receipt),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapReceiptToProps\r\n)(UnAccountedTransactionTankDetailsComposite);\r\nUnAccountedTransactionTankDetailsComposite.propTypes = {\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  selectedRow: PropTypes.object.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["UnAccountedTransactionTankDetails","_ref","modAccountedTransaction","listOptions","validationErrors","onFieldChange","onCustomerSearchChange","isEnterpriseNode","selectedAttributeList","attributeValidationErrors","handleCellDataEdit","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","_jsx","TranslationConsumer","children","t","_jsxs","className","Select","fluid","placeholder","label","indicator","value","TankCode","options","tankCodeOptions","onChange","data","reserveSpace","error","noResultsMessage","transactionTypeOptions","UnAccountedTransactionTypeCode","transportationTypeOptions","TransportationType","search","quantityUOMOptions","QuantityUOM","Input","UnAccountedGrossQuantity","UnAccountedNetQuantity","Density","densityUOMOptions","DensityUOM","DatePicker","type","minuteStep","displayFormat","getCurrentDateFormat","TransactionStartTime","TransactionEndTime","baseProdcutOptions","BaseProductCode","Comments","customerOptions","onSearch","CustomerCode","length","map","attribute","ErrorBoundary","Accordion","Content","title","AttributeDetails","attributeMetaDataList","defaultProps","UnAccountedTransactionTankDetailsComposite","Component","constructor","arguments","state","AccountedTransaction","lodash","emptyAccountedTransaction","isReadyToRender","saveEnabled","customerSearchOptions","Utilities","UnAccountedTransactionTankValidationDef","showAuthenticationLayout","tempAccountedTransaction","handleReset","this","Object","keys","forEach","key","setState","props","userDetails","EntityResult","IsEnterpriseNode","terminalSelectionChange","handleResetAttributeValidationError","localNodeAttribute","console","log","componentWillReceiveProps","nextProps","undefined","selectedRow","Common_Code","tokenDetails","tokenInfo","handleCustomerSearchChange","filter","item","toLowerCase","includes","Constants","slice","handleChange","propertyName","handleAddTransaction","createAccountedTransaction","handleSave","fillDetails","attributeList","validateSave","convertStringtoDecimal","IsWebPortalUser","DefaultValue","Code","handleAuthenticationClose","GetUOMList","axios","RestAPIs","then","response","result","IsSuccess","Array","isArray","VOLUME","MASS","massUOM","push","DENSITY","ErrorList","catch","componentDidMount","IsArchived","getAttributes","GetTankList","GetBaseProductsList","GetUnAccountedTransactionTypeList","GetCustomerList","GetTransportationTypeOptions","ShareholderCode","selectedShareholder","FunctionsList","functionGroups","add","fnUnAccountedTransactionTank","shareholderCustomers","shareholderCust","customerDestinationOptions","CustomerDestinationsList","transportationTypeList","PIPELINE","transactionTypeOptionList","Tank","transactionOptions","TankType","text","prodType","concat","getAdditivesList","ALLPROD","additive","attributeMetaData","returnValue","x","values","every","obj","ShareHolderCode","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","onSaved","toLocaleString","unAccountedTankTransaction","UNACCOUNTEDTANKTRANSACTION","modAccountedMeterTransaction","fillAttributeDetails","err","Attributes","comp","ListOfAttributeData","det","AttributeCode","AttributeValue","selectedTerminals","attributesTerminalsList","modTank","existitem","Attributevalue","baseproductAttribute","valueAttribute","render","TMDetailsHeader","newEntityName","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","receipt","userActions","bindActionCreators","entityCode","popUpContents","style","margin","Popup","element","fieldName","fieldValue","Icon","marginLeft","root","name","size","position","List","content","Button","onClick","float","disabled","handleAttributeDateValue","convertAttributeDatetoString","Date","chars","split","Dateval","getFullYear","getMonth","getDate","DataType","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","INT","LONG","FLOAT","DOUBLE","BOOL","Checkbox","checked","toString","DATETIME","showYearSelector","onTextChange","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","getOptionsWithSelect","ddlOptions","selectOptionText","option","unshift","language","window","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}