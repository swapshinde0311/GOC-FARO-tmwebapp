{"version":3,"file":"static/js/3229.84223460.chunk.js","mappings":"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","sources":["Components/UIBase/Common/TMUserActions.jsx","Components/Composite/Common/TMUserActionsComposite.jsx","Components/UIBase/Common/WijmoGrid.jsx","Components/Composite/Common/WijmoGridComposite.jsx","Components/Composite/Entity/NotificationLogComposite.jsx","JS/functionalUtilities.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Icon,\r\n  Breadcrumb,\r\n  Select,\r\n  Modal,\r\n  Button,\r\n  Popup,\r\n  VerticalMenu,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nTMUserActions.propTypes = {\r\n  operationsVisibilty: PropTypes.shape({\r\n    add: PropTypes.bool,\r\n    delete: PropTypes.bool,\r\n    shareholder: PropTypes.bool,\r\n  }).isRequired,\r\n  breadcrumbItem: PropTypes.shape({\r\n    itemName: PropTypes.string,\r\n    itemCode: PropTypes.string,\r\n    itemProps: PropTypes.any,\r\n    localizedKey: PropTypes.string,\r\n    parents: PropTypes.array,\r\n    isComponent: PropTypes.bool,\r\n  }).isRequired,\r\n  shareholders: PropTypes.array.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onShareholderChange: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onAdd: PropTypes.func.isRequired,\r\n  popUpContent: PropTypes.array,\r\n};\r\nTMUserActions.defaultProps = {\r\n  operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n  breadcrumbItem: {\r\n    itemName: \"\",\r\n    itemCode: \"\",\r\n    localizedKey: \"\",\r\n    itemProps: {},\r\n    parents: [],\r\n    isComponent: false,\r\n  },\r\n  shareholders: [],\r\n  selectedShareholder: \"\",\r\n  popUpContent: [],\r\n  shrVisible: true,\r\n  addVisible: true,\r\n  deleteVisible: true\r\n};\r\nexport function TMUserActions({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [popUpOpen, setPopUpOpen] = useState(false);\r\n  function getShareholderDropdownOptions() {\r\n    return Utilities.transferListtoOptions(shareholders);\r\n    // var List = [];\r\n    // shareholders.forEach((element) => {\r\n    //   List.push({ text: element, value: element });\r\n    // });\r\n    // return List;\r\n  }\r\n\r\n  function buildBreadcrumb() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {breadcrumbItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item\r\n                  onClick={() => {\r\n                    if (\r\n                      handleBreadCrumbClick !== undefined &&\r\n                      handleBreadCrumbClick !== null\r\n                    ) {\r\n                      handleBreadCrumbClick(\r\n                        parentitem.itemCode,\r\n                        breadcrumbItem.parents\r\n                      );\r\n                    }\r\n                  }}\r\n                  key={parentitem.itemCode}\r\n                >\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={breadcrumbItem.itemCode}>\r\n              {t(breadcrumbItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  function handlePopUpClick() {\r\n    if (operationsVisibilty.add) {\r\n      if (popUpContent.length > 0) {\r\n        if (popUpOpen === false) setPopUpOpen(true);\r\n        else setPopUpOpen(false);\r\n      } else {\r\n        onAdd();\r\n      }\r\n    }\r\n  }\r\n\r\n  function popUpMenuClick(menuItem) {\r\n    setPopUpOpen(false);\r\n    onAdd(menuItem);\r\n  }\r\n  function displayIcons() {\r\n    return (\r\n      <div\r\n        style={{ float: \"right\", display: \"inline-block\", marginTop: \"10px\" }}\r\n      >\r\n        {addVisible ? <Popup\r\n          position=\"bottom right\"\r\n          className=\"popup-theme-wrap\"\r\n          element={\r\n            <div\r\n              className={\r\n                (operationsVisibilty.add\r\n                  ? \"iconCircle \"\r\n                  : \"iconCircleDisable \") + \"iconblock\"\r\n              }\r\n              onClick={handlePopUpClick}\r\n            >\r\n              <Icon\r\n                root=\"common\"\r\n                name=\"badge-plus\"\r\n                size=\"small\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          }\r\n          on=\"click\"\r\n          open={popUpOpen}\r\n        >\r\n          <div onMouseLeave={() => setPopUpOpen(false)}>\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <VerticalMenu>\r\n                  <VerticalMenu>\r\n                    <VerticalMenu.Header>\r\n                      {t(\"Common_Create\")}\r\n                    </VerticalMenu.Header>\r\n                    {popUpContent.map((item) => {\r\n                      return (\r\n                        <VerticalMenu.Item\r\n                          onClick={() => popUpMenuClick(item.fieldName)}\r\n                        >\r\n                          {t(item.fieldValue)}\r\n                        </VerticalMenu.Item>\r\n                      );\r\n                    })}\r\n                  </VerticalMenu>\r\n                </VerticalMenu>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        </Popup> : \"\"}\r\n        {deleteVisible ? <div\r\n          style={{ marginLeft: \"10px\" }}\r\n          onClick={() => {\r\n            if (operationsVisibilty.delete) {\r\n              setModelOpen(true);\r\n              //displayTMModalforDelete();\r\n              //onDelete();\r\n            }\r\n          }}\r\n          className={\r\n            (operationsVisibilty.delete\r\n              ? \"iconCircle \"\r\n              : \"iconCircleDisable \") + \"iconblock\"\r\n          }\r\n        >\r\n          <Icon root=\"common\" name=\"delete\" size=\"small\" color=\"white\" />\r\n        </div> : \"\"}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayTMModalforDelete() {\r\n    //console.log(\"entered to display modal actions\");\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  onDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n    //return <TMModal open={true}></TMModal>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\" style={{ alignItems: \"flex-start\", padding: \"0px\" }}>\r\n      <div\r\n        className=\"col-9 col-sm-9 col-md-9 col-lg-10 col-xl-10\"\r\n        style={{ padding: \"0px\" }}\r\n      >\r\n        <div className=\"row\" style={{ marginTop: \"10px\", alignItems: \"\" }}>\r\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n            <ErrorBoundary> {buildBreadcrumb()}</ErrorBoundary>\r\n          </div>\r\n          <div\r\n            className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-4\"\r\n          //style={{ verticalAlign: \"middle\" }}\r\n          >\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <div\r\n                  className=\"compartmentIcon\"\r\n                  style={{ justifyContent: \"flex-start\" }}\r\n                >\r\n                  {shrVisible === false ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <div>\r\n                        <h4 className=\"shrText\">{t(\"Common_Shareholder\")}:</h4>\r\n                      </div>\r\n                      <div className=\"opSelect\">\r\n                        <Select\r\n                          //className=\"opSelect\"\r\n                          placeholder={t(\"Common_Shareholder\")}\r\n                          value={selectedShareholder}\r\n                          disabled={!operationsVisibilty.shareholder}\r\n                          options={getShareholderDropdownOptions()}\r\n                          onChange={(value) => onShareholderChange(value)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n\r\n          {displayTMModalforDelete()}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-3 col-sm-3 col-md-3 col-lg-2 col-xl-2\">\r\n        {displayIcons()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TMUserActions } from \"../../UIBase/Common/TMUserActions\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nexport function TMUserActionsComposite({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n\r\n}) {\r\n  return (\r\n    <TMUserActions\r\n      operationsVisibilty={operationsVisibilty}\r\n      breadcrumbItem={breadcrumbItem}\r\n      shareholders={shareholders}\r\n      selectedShareholder={selectedShareholder}\r\n      onShareholderChange={onShareholderChange}\r\n      onDelete={onDelete}\r\n      onAdd={onAdd}\r\n      popUpContent={popUpContent}\r\n      shrVisible={shrVisible}\r\n      handleBreadCrumbClick={handleBreadCrumbClick}\r\n      addVisible={addVisible}\r\n      deleteVisible={deleteVisible}\r\n    ></TMUserActions>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as wjCore from \"@grapecity/wijmo\";\r\nimport * as wjGrid from \"@grapecity/wijmo.grid\";\r\nimport {\r\n  FlexGrid,\r\n  FlexGridColumn,\r\n  FlexGridCellTemplate,\r\n} from \"@grapecity/wijmo.react.grid\";\r\nimport { FlexGridFilter } from \"@grapecity/wijmo.react.grid.filter\";\r\nimport { Operator } from \"@grapecity/wijmo.grid.filter\";\r\nimport { FlexGridSearch } from \"@grapecity/wijmo.react.grid.search\";\r\nimport { CollectionView } from \"@grapecity/wijmo\";\r\nimport { CollectionViewNavigator, ListBox } from \"@grapecity/wijmo.react.input\";\r\nimport { Selector } from \"@grapecity/wijmo.grid.selector\";\r\nimport { HeadersVisibility } from \"@grapecity/wijmo.grid\";\r\nimport { showPopup, hidePopup, PopupPosition } from \"@grapecity/wijmo\";\r\nimport * as wjcGridXlsx from \"@grapecity/wijmo.grid.xlsx\";\r\nimport \"@grapecity/wijmo.styles/wijmo.css\";\r\nimport { GroupPanel } from \"@grapecity/wijmo.react.grid.grouppanel\";\r\nimport { Button, Card, Popup } from \"@scuf/common\";\r\nimport { TranslationConsumer, useTranslation } from \"@scuf/localization\";\r\nimport { Icon } from \"@scuf/common\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport * as loadash from \"lodash\";\r\nimport \"@grapecity/wijmo.touch\";\r\n\r\nconst WijmoGrid = (props) => {\r\n  const [flex, setFlex] = useState(null);\r\n  const [translator] = useTranslation();\r\n  const _getData = (pageLength) => {\r\n    return new CollectionView(props.sourceData, {\r\n      pageSize: pageLength,\r\n    });\r\n  };\r\n\r\n  const [data, setData] = useState(_getData(props.rowsPerPage));\r\n  const theGrid = React.createRef();\r\n  const theSearch = React.createRef();\r\n  const gridFilter = React.createRef();\r\n  const pagingComponent = React.createRef();\r\n  const colPicker = React.useRef();\r\n\r\n  // to keep track of selected rows\r\n  const selectedRows = React.useRef(props.selectionRequired ? [] : null);\r\n\r\n  // to initialize grid checkbox selection\r\n  let selector = null;\r\n\r\n  //Initialize grid\r\n  const gridInitialized = (grid) => {\r\n    try {\r\n      // localize grid filter\r\n      customizeFilterConditions();\r\n\r\n      if (props.onRowClick) {\r\n        // add row click event handler\r\n        grid.addEventListener(grid.hostElement, \"click\", (e) => {\r\n          let ht = grid.hitTest(e);\r\n          // condition to check if cell is not a grouped cell and a data cell\r\n          if (\r\n            ht.target.closest(\".wj-cell\") &&\r\n            ![...ht.target.closest(\".wj-cell\").classList].includes(\r\n              \"wj-group\"\r\n            ) &&\r\n            ht.cellType === wjGrid.CellType.Cell\r\n          ) {\r\n            // fetch row data\r\n            const rowData = grid.rows[ht.row].dataItem;\r\n            props.onRowClick(rowData);\r\n          }\r\n        });\r\n      }\r\n\r\n      grid.selectionMode = wjCore.asEnum(\"None\", wjGrid.SelectionMode);\r\n      grid.select(-1, -1);\r\n\r\n      setFlex(grid);\r\n      if (props.selectionRequired) {\r\n        // enable checkbox selection\r\n        selector = new Selector(grid, {\r\n          itemChecked: (s, e) => {\r\n            // if only single checkbox selection is required\r\n            if (props.singleSelection) {\r\n              grid.rows\r\n                .filter((row) => {\r\n                  return (\r\n                    row.isSelected &&\r\n                    selectedRows.current.filter((item) =>\r\n                      loadash.isEqual(item, row.dataItem)\r\n                    ).length === 1\r\n                  );\r\n                })\r\n                .forEach((row) => {\r\n                  row.isSelected = false;\r\n                });\r\n            }\r\n\r\n            // pass row data as parameter to checkbox selection handler\r\n            props.onSelectionHandle(\r\n              grid.rows\r\n                .filter((r) => r.isSelected)\r\n                .map((selectedRow) => selectedRow.dataItem)\r\n            );\r\n          },\r\n          // if only single checkbox selection is required\r\n          showCheckAll: !props.singleSelection,\r\n        });\r\n\r\n        let theGrid = selector.column.grid;\r\n        selector.column = theGrid.rowHeaders.columns[0];\r\n        theGrid.headersVisibility = HeadersVisibility.All;\r\n        theGrid.selectionMode = wjCore.asEnum(\"None\", wjGrid.SelectionMode);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in gridInitialized: \" + error);\r\n    }\r\n  };\r\n\r\n  //Update grid when data changes\r\n  useEffect(() => {\r\n    try {\r\n      if (theGrid != null) {\r\n        //Connect search to the grid\r\n        let grid = theGrid.current.control;\r\n        let search = theSearch.current.control;\r\n        search.grid = grid;\r\n      }\r\n\r\n      setData(_getData(props.rowsPerPage));\r\n    } catch (error) {\r\n      console.log(\"Error in grid update:\", error);\r\n    }\r\n  }, [props.sourceData]);\r\n\r\n  // Pre-select grid rows based on selectedItems props\r\n  useEffect(() => {\r\n    try {\r\n      if (flex && props.selectionRequired) {\r\n        // clear the selectedRows array\r\n        selectedRows.current.length = 0;\r\n        // add selectedItems array items to selectedRows\r\n        selectedRows.current.push(...props.selectedItems);\r\n\r\n        flex.rows.forEach((row) => {\r\n          if (\r\n            props.selectedItems.filter((item) =>\r\n              loadash.isEqual(item, row.dataItem)\r\n            ).length === 1\r\n          ) {\r\n            // checks the row checkbox\r\n            row.isSelected = true;\r\n          } else {\r\n            // unchecks the row checkbox\r\n            row.isSelected = false;\r\n          }\r\n        });\r\n\r\n        flex.refresh();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in pre-selecting rows:\", error);\r\n    }\r\n  }, [props.selectedItems]);\r\n\r\n  //Load the state of grid\r\n  useEffect(() => {\r\n    try {\r\n      if (\r\n        localStorage.getItem(props.parentComponent + \"GridState\") &&\r\n        localStorage.getItem(props.parentComponent + \"GridState\") !== \"null\" &&\r\n        flex\r\n      ) {\r\n        // restore grid settings\r\n        let gridState = JSON.parse(\r\n          localStorage.getItem(props.parentComponent + \"GridState\")\r\n        );\r\n        let newFlex = flex;\r\n\r\n        // restore column picker settings\r\n        newFlex.columns.forEach((col) => {\r\n          let matchedCol = gridState.columns.filter(\r\n            (colSetting) => colSetting.binding === col.binding\r\n          );\r\n          col.visible =\r\n            matchedCol.length > 0 ? matchedCol[0].visible : col.visible;\r\n        });\r\n\r\n        // restore filter settings\r\n        gridFilter.current.control.filterDefinition =\r\n          gridState.filterDefinition;\r\n\r\n        // restore sort settings\r\n        newFlex.collectionView.deferUpdate(() => {\r\n          newFlex.collectionView.sortDescriptions.clear();\r\n          for (let i = 0; i < gridState.sortDescriptions.length; i++) {\r\n            let sortDesc = gridState.sortDescriptions[i];\r\n            newFlex.collectionView.sortDescriptions.push(\r\n              new wjCore.SortDescription(sortDesc.property, sortDesc.ascending)\r\n            );\r\n          }\r\n        });\r\n\r\n        // restore grouping settings\r\n        for (let i = 0; i < gridState.groupDescriptions.length; i++) {\r\n          newFlex.collectionView.groupDescriptions.push(\r\n            new wjCore.PropertyGroupDescription(gridState.groupDescriptions[i])\r\n          );\r\n          newFlex.columns.filter(\r\n            (col) => col.binding === gridState.groupDescriptions[i]\r\n          )[0].visible = false;\r\n        }\r\n\r\n        if (\r\n          sessionStorage.getItem(props.parentComponent + \"GridState\") &&\r\n          sessionStorage.getItem(props.parentComponent + \"GridState\") !== \"null\"\r\n        ) {\r\n          let gridSessionState = JSON.parse(\r\n            sessionStorage.getItem(props.parentComponent + \"GridState\")\r\n          );\r\n          // restore paging settings\r\n          newFlex.collectionView.moveToPage(\r\n            newFlex.collectionView.pageCount - 1 >= gridSessionState.pageIndex\r\n              ? gridSessionState.pageIndex\r\n              : newFlex.collectionView.pageCount - 1\r\n          );\r\n\r\n          // restore search settings\r\n          if (theSearch) {\r\n            theSearch.current.control.text = gridSessionState.searchText;\r\n          }\r\n        }\r\n\r\n        setFlex(newFlex);\r\n        flex.refresh();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in restoring local storage settings: \", error);\r\n    }\r\n  }, [data]);\r\n\r\n  // Set Column Picker Properties\r\n  useEffect(() => {\r\n    try {\r\n      if (flex && colPicker.current && props.columnPickerRequired) {\r\n        colPicker.current.itemsSource = flex.columns;\r\n        colPicker.current.checkedMemberPath = \"visible\";\r\n        colPicker.current.displayMemberPath = \"header\";\r\n        colPicker.current.lostFocus.addHandler(() => {\r\n          hidePopup(colPicker.current.hostElement);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in initializing column picker properties:\", error);\r\n    }\r\n  }, [colPicker.current]);\r\n\r\n  useEffect(() => {\r\n    // remove column picker pop-up on component unmount\r\n    return () => {\r\n      if (props.columnPickerRequired && colPicker.current) {\r\n        hidePopup(colPicker.current.hostElement);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // export grid data to excel\r\n  const exportExcel = () => {\r\n    try {\r\n      let gridFlex = flex;\r\n      //to download all rows from all pages\r\n      gridFlex.itemsSource.pageSize = props.sourceData.length;\r\n      setFlex(gridFlex);\r\n      wjcGridXlsx.FlexGridXlsxConverter.saveAsync(\r\n        flex,\r\n        {\r\n          includeColumnHeaders: true,\r\n          includeCellStyles: false,\r\n          formatItem: null,\r\n        },\r\n        props.exportFileName\r\n      );\r\n\r\n      //to restore paging\r\n      gridFlex.itemsSource.pageSize = props.rowsPerPage;\r\n      setFlex(gridFlex);\r\n    } catch (error) {\r\n      console.log(\"Error in export grid to excel:\", error);\r\n    }\r\n  };\r\n\r\n  const terminalPopOver = (terminalCodes) => {\r\n    if (terminalCodes.split(\",\").length > props.terminalsToShow) {\r\n      return (\r\n        <Popup\r\n          className=\"popup-theme-wrap\"\r\n          on=\"hover\"\r\n          element={terminalCodes.split(\",\").length}\r\n        >\r\n          <Card>\r\n            <Card.Content>{terminalCodes}</Card.Content>\r\n          </Card>\r\n        </Popup>\r\n      );\r\n    } else {\r\n      return terminalCodes;\r\n    }\r\n  };\r\n\r\n  const displayValues = (value, columnDetail) => {\r\n    if (columnDetail !== undefined && columnDetail !== null) {\r\n      if (typeof value === \"boolean\" || columnDetail.Name === \"Active\") {\r\n        if (value) return <Icon name=\"check\" size=\"small\" color=\"green\" />;\r\n        else return <Icon name=\"close\" size=\"small\" color=\"red\" />;\r\n      } else if (value === \"\" || value === null || value === undefined) {\r\n        return value;\r\n      } else if (\r\n        (columnDetail.Name === \"TerminalCodes\" ||\r\n          columnDetail.PopOver === \"1\") &&\r\n        value !== null\r\n      ) {\r\n        return terminalPopOver(value);\r\n      }\r\n      // var columnType = columnDetails.find(function (detail) {\r\n      //   if (detail.Name === field) {\r\n      //     return detail;\r\n      //   }\r\n      // });\r\n      else if (\r\n        columnDetail.DataType !== undefined &&\r\n        columnDetail.DataType === \"DateTime\"\r\n      ) {\r\n        return (\r\n          new Date(value).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(value).toLocaleTimeString()\r\n        );\r\n      } else if (\r\n        columnDetail.DataType !== undefined &&\r\n        columnDetail.DataType === \"Date\"\r\n      ) {\r\n        return new Date(value).toLocaleDateString();\r\n      } else if (\r\n        columnDetail.DataType !== undefined &&\r\n        columnDetail.DataType === \"Time\"\r\n      ) {\r\n        return new Date(value).toLocaleTimeString();\r\n      }\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  //Initialize Column Picker\r\n  const initializedPicker = (picker) => {\r\n    if (props.columnPickerRequired) {\r\n      colPicker.current = picker;\r\n    }\r\n  };\r\n\r\n  // Column Picker Handler\r\n  const colPickerClickHandler = (event) => {\r\n    try {\r\n      let host = colPicker.current.hostElement;\r\n      if (!host.offsetHeight) {\r\n        showPopup(host, event.target, PopupPosition.Below, true, false);\r\n        colPicker.current.focus();\r\n      } else {\r\n        hidePopup(host, true, true);\r\n        flex.focus();\r\n      }\r\n\r\n      colPicker.current.focus();\r\n      event.preventDefault();\r\n    } catch (error) {\r\n      console.log(\"Error in Column Picker click event:\", error);\r\n    }\r\n  };\r\n\r\n  const saveGridState = () => {\r\n    try {\r\n      if (flex && gridFilter.current) {\r\n        // grid column, filter, sort and grouping settings\r\n        let gridState = {\r\n          columns: flex.columns.map((col) => {\r\n            return {\r\n              binding: col.binding,\r\n              visible: col.visible,\r\n            };\r\n          }),\r\n          filterDefinition: gridFilter.current.control.filterDefinition,\r\n          sortDescriptions: flex.collectionView.sortDescriptions.map(\r\n            (sortDesc) => {\r\n              return {\r\n                property: sortDesc.property,\r\n                ascending: sortDesc.ascending,\r\n              };\r\n            }\r\n          ),\r\n          groupDescriptions: flex.collectionView.groupDescriptions.map(\r\n            (group) => {\r\n              if (group.propertyName) {\r\n                return group.propertyName;\r\n              }\r\n\r\n              return null;\r\n            }\r\n          ),\r\n        };\r\n\r\n        // add class to grouped checkbox div element\r\n        if (\r\n          flex.collectionView.groupDescriptions &&\r\n          flex.collectionView.groupDescriptions.length > 0\r\n        ) {\r\n          let groupedCheckboxes = [\r\n            ...document.getElementsByClassName(\"wj-column-selector-group\"),\r\n          ];\r\n          groupedCheckboxes.forEach((chkbx) => {\r\n            chkbx.parentNode.parentNode.classList.add(\"wj-grouped-checkbox\");\r\n          });\r\n        }\r\n\r\n        // grid paging and search settings\r\n        let sessionState = {\r\n          pageIndex: flex.collectionView.pageIndex,\r\n          searchText: theSearch.current.control.text,\r\n        };\r\n\r\n        localStorage.setItem(\r\n          props.parentComponent + \"GridState\",\r\n          JSON.stringify(gridState)\r\n        );\r\n        sessionStorage.setItem(\r\n          props.parentComponent + \"GridState\",\r\n          JSON.stringify(sessionState)\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in saving grid state\");\r\n    }\r\n  };\r\n\r\n  // customize grid filter text and dropdowns\r\n  const customizeFilterConditions = () => {\r\n    // localize the FlexGrid filter\r\n    let filter = wjCore.culture.FlexGridFilter,\r\n      operator = Operator;\r\n    wjCore.culture.FlexGridFilter.header = translator(\"WijmoGridFilterHeader\");\r\n    wjCore.culture.FlexGridFilter.ascending =\r\n      \"\\u2191 \" + translator(\"WijmoGridFilterAscending\");\r\n    wjCore.culture.FlexGridFilter.descending =\r\n      \"\\u2193 \" + translator(\"WijmoGridFilterDescending\");\r\n    wjCore.culture.FlexGridFilter.apply = translator(\"RoleAdminEdit_Apply\");\r\n    wjCore.culture.FlexGridFilter.clear = translator(\"OrderCreate_btnClear\");\r\n    wjCore.culture.FlexGridFilter.conditions = translator(\r\n      \"WijmoGridFilterCondition\"\r\n    );\r\n    wjCore.culture.FlexGridFilter.values = translator(\"WijmoGridFilterValue\");\r\n    wjCore.culture.FlexGridFilter.search = translator(\r\n      \"LoadingDetailsView_SearchGrid\"\r\n    );\r\n    wjCore.culture.FlexGridFilter.selectAll = translator(\r\n      \"WijmoGridFilterSelectAll\"\r\n    );\r\n    wjCore.culture.FlexGridFilter.and = translator(\"WijmoGridFilterAnd\");\r\n    wjCore.culture.FlexGridFilter.or = translator(\"WijmoGridFilterOr\");\r\n    wjCore.culture.FlexGridFilter.cancel = translator(\"AccessCardInfo_Cancel\");\r\n    // wjCore.culture.FlexGridFilter.null = 'test';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.and = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.asc = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.dialog = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.dsc = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.edit = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.op1 = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.op2 = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.or = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.search = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.val1 = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.val2 = '';\r\n\r\n    // localize FlexGrid filter operators\r\n    filter.stringOperators = [\r\n      { name: translator(\"WijmoGridFilterUnset\"), op: null },\r\n      { name: translator(\"WijmoGridFilterEqual\"), op: operator.EQ },\r\n      { name: translator(\"WijmoGridFilterNotEqual\"), op: operator.NE },\r\n      { name: translator(\"WijmoGridFilterBeginsWith\"), op: operator.BW },\r\n      { name: translator(\"WijmoGridFilterEndsWith\"), op: operator.EW },\r\n      { name: translator(\"WijmoGridFilterContains\"), op: operator.CT },\r\n      { name: translator(\"WijmoGridFilterDoesNotContain\"), op: operator.NC },\r\n    ];\r\n    filter.numberOperators = [\r\n      { name: translator(\"WijmoGridFilterUnset\"), op: null },\r\n      { name: translator(\"WijmoGridFilterEqual\"), op: operator.EQ },\r\n      { name: translator(\"WijmoGridFilterNotEqual\"), op: operator.NE },\r\n      { name: translator(\"WijmoGridFilterGreaterThan\"), op: operator.GT },\r\n      { name: translator(\"WijmoGridFilterLessThan\"), op: operator.LT },\r\n      {\r\n        name: translator(\"WijmoGridFilterGreaterThanOrEqual\"),\r\n        op: operator.GE,\r\n      },\r\n      { name: translator(\"WijmoGridFilterLessThanOrEqual\"), op: operator.LE },\r\n    ];\r\n    filter.dateOperators = [\r\n      { name: translator(\"WijmoGridFilterUnset\"), op: null },\r\n      { name: translator(\"WijmoGridFilterEqual\"), op: operator.EQ },\r\n      { name: translator(\"WijmoGridFilterDateEarlierThan\"), op: operator.LT },\r\n      { name: translator(\"WijmoGridFilterDateLaterThan\"), op: operator.GT },\r\n    ];\r\n    filter.booleanOperators = [\r\n      { name: translator(\"WijmoGridFilterUnset\"), op: null },\r\n      { name: translator(\"WijmoGridFilterEqual\"), op: operator.EQ },\r\n      { name: translator(\"WijmoGridFilterNotEqual\"), op: operator.NE },\r\n    ];\r\n  };\r\n\r\n  // set column width based on screen size\r\n  const getWidth = (columnDetails) => {\r\n    try {\r\n      const screenWidth = window.screen.width;\r\n      if (screenWidth < 1024) {\r\n        if (columnDetails.WidthPx && columnDetails.WidthPx !== \"\")\r\n          return parseInt(columnDetails.WidthPx);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in width:\", error);\r\n    }\r\n\r\n    return columnDetails.WidthPercentage.includes(\"*\")\r\n      ? columnDetails.WidthPercentage\r\n      : parseInt(columnDetails.WidthPercentage);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pl-1\">\r\n      <ErrorBoundary>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <React.Fragment>\r\n              <div className=\"row pl-0\">\r\n                <div className=\"col-10 col-sm-12 col-md-5 col-lg-6\">\r\n                  <FlexGridSearch\r\n                    class=\"ui single-input\"\r\n                    ref={theSearch}\r\n                    placeholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                  />\r\n                </div>\r\n                <div className=\"col-10 col-sm-12 col-md-7 col-lg-6\">\r\n                  <div style={{ float: \"right\" }}>\r\n                    {props.columnPickerRequired ? (\r\n                      <Button\r\n                        id=\"colPicker\"\r\n                        actionType=\"button\"\r\n                        type=\"primary\"\r\n                        onClick={(event) => colPickerClickHandler(event)}\r\n                      >\r\n                        <div style={{ display: \"inline-block\" }}>\r\n                          {t(\"WijmoGridColumnPicker\")}\r\n                        </div>\r\n                        <div style={{ display: \"inline-block\" }}>\r\n                          <Icon\r\n                            name=\"caret-down\"\r\n                            className=\"btnIcon\"\r\n                            size=\"small\"\r\n                          />\r\n                        </div>\r\n                      </Button>\r\n                    ) : null}\r\n                    {props.exportRequired ? (\r\n                      <Button\r\n                        actionType=\"button\"\r\n                        type=\"primary\"\r\n                        className=\"mt-3 mt-md-0\"\r\n                        onClick={exportExcel}\r\n                      >\r\n                        <div style={{ display: \"inline-block\" }}>\r\n                          {t(\"WijmoGridExport\")}\r\n                        </div>\r\n                        <div\r\n                          style={{\r\n                            display: \"inline-block\",\r\n                            marginLeft: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <span\r\n                            className=\"icon-Xls\"\r\n                            style={{\r\n                              fontSize: \"17px\",\r\n                              position: \"absolute\",\r\n                              top: \"3px\",\r\n                            }}\r\n                          ></span>\r\n                        </div>\r\n                      </Button>\r\n                    ) : null}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"tableScroll\">\r\n                {props.columnGroupingRequired ? (\r\n                  <GroupPanel\r\n                    className=\"group-panel\"\r\n                    grid={flex}\r\n                    placeholder={t(\"WijmoGridGroupPanelPlaceholder\")}\r\n                  />\r\n                ) : null}\r\n                <ErrorBoundary>\r\n                  <FlexGrid\r\n                    ref={theGrid}\r\n                    autoGenerateColumns={false}\r\n                    alternatingRowStep={0}\r\n                    autoRowHeights={true}\r\n                    headersVisibility=\"Column\"\r\n                    itemsSource={data}\r\n                    selectionMode={wjCore.asEnum(\"None\", wjGrid.SelectionMode)}\r\n                    initialized={gridInitialized}\r\n                    virtualizationThreshold={[0, 10000]}\r\n                    onUpdatedView={saveGridState}\r\n                  >\r\n                    <FlexGridFilter ref={gridFilter} />\r\n                    {props.columns.map((column) => {\r\n                      return (\r\n                        <FlexGridColumn\r\n                          header={t(column.Name)}\r\n                          key={column.Name}\r\n                          binding={column.Name}\r\n                          width={getWidth(column)}\r\n                          minWidth={100}\r\n                          isReadOnly={true}\r\n                          wordWrap={true}\r\n                          align=\"left\"\r\n                        >\r\n                          <FlexGridCellTemplate\r\n                            cellType=\"Cell\"\r\n                            template={(context) => {\r\n                              return (\r\n                                <span\r\n                                  style={\r\n                                    props.conditionalRowStyleCheck == null ||\r\n                                    !props.conditionalRowStyleCheck(\r\n                                      context.item\r\n                                    )\r\n                                      ? null\r\n                                      : { ...props.conditionalRowStyles }\r\n                                  }\r\n                                >\r\n                                  {displayValues(\r\n                                    context.item[column.Name],\r\n                                    column\r\n                                  )}\r\n                                </span>\r\n                              );\r\n                            }}\r\n                          />\r\n                        </FlexGridColumn>\r\n                      );\r\n                    })}\r\n                  </FlexGrid>\r\n                </ErrorBoundary>\r\n                {props.columnPickerRequired ? (\r\n                  <div className=\"column-picker-div\">\r\n                    <ListBox\r\n                      className=\"column-picker\"\r\n                      initialized={(picker) => initializedPicker(picker)}\r\n                    />\r\n                  </div>\r\n                ) : null}\r\n              </div>\r\n              <div className=\"row\">\r\n                <CollectionViewNavigator\r\n                  ref={pagingComponent}\r\n                  className=\"ml-auto mr-auto mt-3\"\r\n                  headerFormat={t(\"WijmoGridPagingTemplate\")}\r\n                  byPage={true}\r\n                  cv={data}\r\n                />\r\n              </div>\r\n            </React.Fragment>\r\n          )}\r\n        </TranslationConsumer>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n};\r\n\r\nWijmoGrid.propTypes = {\r\n  sourceData: PropTypes.array.isRequired,\r\n  columns: PropTypes.array.isRequired,\r\n  exportRequired: PropTypes.bool.isRequired,\r\n  exportFileName: PropTypes.string,\r\n  selectionRequired: PropTypes.bool,\r\n  columnPickerRequired: PropTypes.bool,\r\n  columnGroupingRequired: PropTypes.bool,\r\n  conditionalRowStyleCheck: PropTypes.func,\r\n  conditionalRowStyles: PropTypes.object,\r\n  rowsPerPage: PropTypes.number,\r\n  onSelectionHandle: PropTypes.func,\r\n  parentComponent: PropTypes.string.isRequired,\r\n  onRowClick: PropTypes.func,\r\n  terminalsToShow: PropTypes.number,\r\n  singleSelection: PropTypes.bool,\r\n  selectedItems: PropTypes.array,\r\n};\r\n\r\nWijmoGrid.defaultProps = {\r\n  sourceData: [],\r\n  columns: [],\r\n  exportRequired: true,\r\n  exportFileName: \"Grid.xlsx\",\r\n  selectionRequired: false,\r\n  columnPickerRequired: false,\r\n  columnGroupingRequired: false,\r\n  rowsPerPage: 10,\r\n  terminalsToShow: 2,\r\n  singleSelection: false,\r\n  selectedItems: [],\r\n};\r\n\r\nexport default WijmoGrid;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WijmoGrid from '../../UIBase/Common/WijmoGrid';\r\n\r\nconst WijmoGridComposite = (props) => {\r\n    return (\r\n        <WijmoGrid\r\n            sourceData={props.data}\r\n            columns={props.columns}\r\n            exportRequired={props.exportRequired}\r\n            exportFileName={props.exportFileName}\r\n            columnPickerRequired={props.columnPickerRequired}\r\n            selectionRequired={props.selectionRequired}\r\n            columnGroupingRequired={props.columnGroupingRequired}\r\n            conditionalRowStyleCheck={props.conditionalRowStyleCheck}\r\n            conditionalRowStyles={props.conditionalRowStyles}\r\n            rowsPerPage={props.rowsPerPage}\r\n            onSelectionHandle={props.onSelectionHandle}\r\n            onRowClick={props.onRowClick}\r\n            parentComponent={props.parentComponent}\r\n            terminalsToShow={props.terminalsToShow}\r\n            singleSelection={props.singleSelection}\r\n            selectedItems={props.selectedItems}\r\n        />\r\n    )\r\n}\r\n\r\nWijmoGridComposite.propTypes = {\r\n    data: PropTypes.array.isRequired,\r\n    columns: PropTypes.array.isRequired,\r\n    exportRequired: PropTypes.bool.isRequired,\r\n    exportFileName: PropTypes.string,\r\n    selectionRequired: PropTypes.bool,\r\n    columnPickerRequired: PropTypes.bool,\r\n    columnGroupingRequired: PropTypes.bool,\r\n    conditionalRowStyleCheck: PropTypes.func,\r\n    conditionalRowStyles: PropTypes.object,\r\n    rowsPerPage: PropTypes.number,\r\n    onSelectionHandle: PropTypes.func,\r\n    parentComponent: PropTypes.string.isRequired,\r\n    onRowClick: PropTypes.func,\r\n    terminalsToShow: PropTypes.number,\r\n    singleSelection: PropTypes.bool,\r\n    selectedItems: PropTypes.array\r\n}\r\n\r\nexport default WijmoGridComposite;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TMUIInstallType } from \"../../../JS/Constants\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\nimport axios from 'axios';\r\nimport * as RestApis from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport WijmoGridComposite from \"../Common/WijmoGridComposite\";\r\nimport { Button, DatePicker, Icon, Tooltip } from \"@scuf/common\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nclass NotificationLogComposite extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.tmuiInstallType = this.props.userDetails.EntityResult.IsArchived ? TMUIInstallType.ARCHIVE : TMUIInstallType.LIVE\r\n    this.state = {\r\n      data: null,\r\n      columns: null,\r\n      fromDate: new Date(new Date().setHours(0, 0, 0, 0)),\r\n      toDate: null,\r\n      isReadyToRender: false,\r\n      fromDateErrorMsg: '',\r\n      toDateErrorMsg: false,\r\n      maxDateTimeDiff: 180,\r\n      recordCount: 99999,\r\n      refreshInterval: 9000\r\n    }\r\n    this.componentName = \"NotificationLog\";\r\n  }\r\n\r\n  loadData = () => {\r\n    try {\r\n      if (this.checkDateDiff()) {\r\n        let obj = {\r\n          StartTime: this.state.fromDate,\r\n          EndTime: this.state.toDate,\r\n        };\r\n        axios(\r\n          RestApis.GetNotificationList,\r\n          Utilities.getAuthenticationObjectforPost(\r\n            obj,\r\n            this.props.tokenDetails.tokenInfo\r\n          ))\r\n          .then((response) => {\r\n            this.setState({\r\n              data: response.data.EntityResult.Table,\r\n              isReadyToRender: true,\r\n              columns: response.data.EntityResult.Column,\r\n              recordCount: response.data.EntityResult.PageFields[0].NoOfRecords\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            this.setState({ data: [], isReadyToRender: false });\r\n            console.log(error);\r\n          })\r\n      }\r\n      else {\r\n        this.setState({ isReadyToRender: true, data: [] });\r\n      }\r\n    }\r\n    catch (error) {\r\n      this.setState({ isReadyToRender: true, data: [] });\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  autoRefreshData = () => {\r\n    if (this.state.toDate === null || this.state.toDate === '') {\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n    this.getLookupValues();\r\n\r\n    if (this.tmuiInstallType !== TMUIInstallType.ARCHIVE) {\r\n      // add auto refresh\r\n      this.timeoutID = setInterval(this.autoRefreshData, this.state.refreshInterval);\r\n    }\r\n\r\n    // clear storage on page refresh\r\n    window.addEventListener(\"beforeunload\", () => Utilities.clearSessionStorage(this.componentName + \"GridState\"));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.timeoutID) {\r\n      this.timeoutID = clearInterval(this.timeoutID);\r\n    }\r\n\r\n    // clear session storage\r\n    Utilities.clearSessionStorage(this.componentName + \"GridState\");\r\n\r\n    // remove event listener\r\n    window.removeEventListener(\"beforeunload\", () => Utilities.clearSessionStorage(this.componentName + \"GridState\"));\r\n  }\r\n\r\n  dateChange = (type, date) => {\r\n    let updatedDate = new Date(date);\r\n    if (updatedDate.toString() === \"Invalid Date\") {\r\n      updatedDate = null;\r\n    }\r\n\r\n    if (type === \"toDate\") {\r\n      if (updatedDate == null && !this.timeoutID && this.tmuiInstallType !== TMUIInstallType.ARCHIVE) {\r\n        // enable auto refresh\r\n        this.timeoutID = setInterval(this.autoRefreshData, this.state.refreshInterval);\r\n      }\r\n      else if (updatedDate != null && this.timeoutID) {\r\n        // remove auto refresh\r\n        this.timeoutID = clearInterval(this.timeoutID);\r\n      }\r\n    }\r\n\r\n    this.setState({ [type]: updatedDate });\r\n  }\r\n\r\n  checkDateDiff = () => {\r\n    if (this.state.fromDate !== null) {\r\n      if (this.state.toDate !== null && Utilities.validateDateRange(this.state.toDate, this.state.fromDate) === \"Common_InvalidDateRange\") {\r\n        this.setState({ fromDateErrorMsg: \"Greater than To Date\", toDateErrorMsg: false });\r\n        return false;\r\n      }\r\n      else if (this.state.toDate != null\r\n        && ((Math.abs(this.state.fromDate - this.state.toDate) / 1000) / 60) > 2160) {\r\n        this.setState({ fromDateErrorMsg: \"\", toDateErrorMsg: true })\r\n        return false;\r\n      }\r\n\r\n      this.setState({ fromDateErrorMsg: \"\", toDateErrorMsg: false });\r\n      return true;\r\n    }\r\n\r\n    this.setState({ fromDateErrorMsg: \"From Date cannot be empty\" })\r\n    return false;\r\n  }\r\n\r\n  goClick = () => {\r\n    // clear session storage\r\n    sessionStorage.clear();\r\n\r\n    this.setState({ isReadyToRender: false, data: [] })\r\n    this.loadData();\r\n  }\r\n\r\n  getLookupValues = () => {\r\n    try {\r\n      axios(\r\n        RestApis.GetLookUpData + \"?LookUpTypeCode=Notification\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({ maxDateTimeDiff: parseInt(result.EntityResult[\"MaxDateDiff\"]) / 60, refreshInterval: parseInt(result.EntityResult[\"AutoRefreshInterval\"]) },\r\n            () => {\r\n              if (this.timeoutID) {\r\n                clearInterval(this.timeoutID)\r\n                this.timeoutID = setInterval(this.autoRefreshData, this.state.refreshInterval);\r\n              }\r\n            })\r\n        }\r\n      })\r\n        .catch((error) => {\r\n          this.setState({ maxDateTimeDiff: 180 });\r\n          console.log(\r\n            \"NotificationLogComposite:Error occured on getLookUpData\",\r\n            error\r\n          );\r\n        })\r\n    } catch (error) {\r\n      console.log(\r\n        \"NotificationLogComposite:Error occured on getLookUpData\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  statusCheck = (row) => {\r\n    if (row[\"NotificationGroup_Status\"] !== null && row[\"NotificationGroup_Status\"].toLowerCase() === \"failure\") {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMUserActionsComposite\r\n            breadcrumbItem={this.props.activeItem}\r\n            shrVisible={false}\r\n            handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n            addVisible={false}\r\n            deleteVisible={false}\r\n          ></TMUserActionsComposite>\r\n        </ErrorBoundary>\r\n        {(this.state.isReadyToRender && this.state.data !== null) ?\r\n          (\r\n            <ErrorBoundary>\r\n              <TranslationConsumer>\r\n                {(t) => (\r\n                  <div>\r\n                    <div className=\"row\" style={{ \"maxWidth\": \"770px\" }}>\r\n                      <div className=\"col-12 col-sm-12 col-md-5\">\r\n                        <DatePicker\r\n                          type=\"datetime\"\r\n                          className=\"logDateTime\"\r\n                          value={this.state.fromDate}\r\n                          disableFuture={true}\r\n                          onChange={(date) => this.dateChange(\"fromDate\", date)}\r\n                          onTextChange={(date) => this.dateChange(\"fromDate\", date)}\r\n                          error={this.state.fromDateErrorMsg}\r\n                          reserveSpace={false} />\r\n                      </div>\r\n                      <div className=\"col-1 mt-md-2 pl-lg-0\" style={{ \"textAlign\": \"center\" }} >\r\n                        -\r\n                      </div>\r\n                      <div className=\"col-12 col-sm-12 col-md-5 pl-md-1\">\r\n                        <DatePicker\r\n                          type=\"datetime\"\r\n                          displayFormat={getCurrentDateFormat()}\r\n                          className=\"logDateTime\"\r\n                          value={this.state.toDate}\r\n                          disableFuture={true}\r\n                          onChange={(date) => this.dateChange(\"toDate\", date)}\r\n                          onTextChange={(date) => this.dateChange(\"toDate\", date)}\r\n                          error={this.state.toDateErrorMsg ? t(\"NotificationRangeValidationMessage\", [this.state.maxDateTimeDiff]) : null}\r\n                          reserveSpace={false} />\r\n                      </div>\r\n                      <div className=\"col-12 col-sm-12 col-md-1 pl-0\">\r\n                        <Tooltip\r\n                          content={t(\"NotificationGoHover\", [this.state.recordCount])}\r\n                          element={\r\n                            <Button type=\"primary\" className=\"doneButton\" actionType=\"button\" onClick={this.goClick}>\r\n                              <Icon root=\"common\" name=\"arrow-right\" size=\"small\" className=\"btnArrowRight\" />\r\n                            </Button>\r\n                          }\r\n                          event=\"hover\"\r\n                          hoverable={true}\r\n                          position=\"right center\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <WijmoGridComposite\r\n                      data={this.state.data}\r\n                      columns={this.state.columns}\r\n                      rowsPerPage={10}\r\n                      exportRequired={true}\r\n                      exportFileName=\"NotificationLogs.xlsx\"\r\n                      selectionRequired={false}\r\n                      columnPickerRequired={true}\r\n                      columnGroupingRequired={true}\r\n                      conditionalRowStyleCheck={this.statusCheck}\r\n                      conditionalRowStyles={{ color: \"red\" }}\r\n                      parentComponent={this.componentName}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </TranslationConsumer>\r\n            </ErrorBoundary>\r\n          ) :\r\n          (<LoadingPage message=\"Loading\"></LoadingPage>)\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(NotificationLogComposite);\r\n\r\nNotificationLogComposite.propTypes = {\r\n  activeItem: PropTypes.object,\r\n};\r\n","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["TMUserActions","_ref","operationsVisibilty","breadcrumbItem","shareholders","selectedShareholder","onShareholderChange","onDelete","onAdd","popUpContent","shrVisible","handleBreadCrumbClick","addVisible","deleteVisible","modelOpen","setModelOpen","useState","popUpOpen","setPopUpOpen","handlePopUpClick","add","length","_jsxs","className","style","alignItems","padding","children","_jsx","marginTop","ErrorBoundary","TranslationConsumer","t","Breadcrumb","parents","map","parentitem","Item","onClick","undefined","itemCode","localizedKey","justifyContent","_Fragment","Select","placeholder","value","disabled","shareholder","options","Utilities","onChange","Modal","open","size","Content","Footer","Button","type","content","float","display","Popup","position","element","Icon","root","name","color","on","onMouseLeave","VerticalMenu","Header","item","popUpMenuClick","menuItem","fieldName","fieldValue","marginLeft","delete","defaultProps","itemName","itemProps","isComponent","TMUserActionsComposite","WijmoGrid","props","flex","setFlex","translator","useTranslation","_getData","pageLength","CollectionView","sourceData","pageSize","data","setData","rowsPerPage","theGrid","React","theSearch","gridFilter","pagingComponent","colPicker","selectedRows","selectionRequired","selector","gridInitialized","grid","customizeFilterConditions","onRowClick","addEventListener","hostElement","e","ht","hitTest","target","closest","classList","includes","cellType","wjGrid","Cell","rowData","rows","row","dataItem","selectionMode","wjCore","select","Selector","itemChecked","s","singleSelection","filter","isSelected","current","loadash","forEach","onSelectionHandle","r","selectedRow","showCheckAll","column","rowHeaders","columns","headersVisibility","HeadersVisibility","All","error","console","log","useEffect","control","push","selectedItems","refresh","localStorage","getItem","parentComponent","gridState","JSON","parse","newFlex","col","matchedCol","colSetting","binding","visible","filterDefinition","collectionView","deferUpdate","sortDescriptions","clear","i","sortDesc","property","ascending","groupDescriptions","sessionStorage","gridSessionState","moveToPage","pageCount","pageIndex","text","searchText","columnPickerRequired","itemsSource","checkedMemberPath","displayMemberPath","lostFocus","addHandler","hidePopup","exportExcel","gridFlex","wjcGridXlsx","saveAsync","includeColumnHeaders","includeCellStyles","formatItem","exportFileName","displayValues","columnDetail","Name","PopOver","terminalCodes","split","terminalsToShow","Card","DataType","Date","toLocaleDateString","toLocaleTimeString","saveGridState","group","propertyName","document","getElementsByClassName","chkbx","parentNode","sessionState","setItem","stringify","FlexGridFilter","operator","Operator","header","descending","apply","conditions","values","search","selectAll","and","or","cancel","stringOperators","op","EQ","NE","BW","EW","CT","NC","numberOperators","GT","LT","GE","LE","dateOperators","booleanOperators","getWidth","columnDetails","window","screen","width","WidthPx","parseInt","WidthPercentage","FlexGridSearch","class","ref","id","actionType","event","host","offsetHeight","focus","showPopup","PopupPosition","Below","preventDefault","colPickerClickHandler","exportRequired","fontSize","top","columnGroupingRequired","GroupPanel","FlexGrid","autoGenerateColumns","alternatingRowStep","autoRowHeights","initialized","virtualizationThreshold","onUpdatedView","FlexGridColumn","minWidth","isReadOnly","wordWrap","align","FlexGridCellTemplate","template","context","conditionalRowStyleCheck","conditionalRowStyles","ListBox","picker","initializedPicker","CollectionViewNavigator","headerFormat","byPage","cv","NotificationLogComposite","Component","constructor","super","loadData","this","checkDateDiff","obj","StartTime","state","fromDate","EndTime","toDate","axios","RestApis","tokenDetails","tokenInfo","then","response","setState","EntityResult","Table","isReadyToRender","Column","recordCount","PageFields","NoOfRecords","catch","autoRefreshData","dateChange","date","updatedDate","toString","timeoutID","tmuiInstallType","TMUIInstallType","ARCHIVE","clearInterval","setInterval","refreshInterval","fromDateErrorMsg","toDateErrorMsg","Math","abs","goClick","getLookupValues","result","IsSuccess","maxDateTimeDiff","statusCheck","toLowerCase","userDetails","IsArchived","LIVE","setHours","componentName","componentDidMount","componentWillUnmount","removeEventListener","render","activeItem","DatePicker","disableFuture","onTextChange","reserveSpace","displayFormat","getCurrentDateFormat","Tooltip","hoverable","WijmoGridComposite","LoadingPage","message","connect","getUserDetails","TokenAuth","getOptionsWithSelect","ddlOptions","selectOptionText","Array","isArray","option","unshift","language","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell"],"sourceRoot":""}