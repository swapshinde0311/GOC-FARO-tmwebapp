{"version":3,"file":"static/js/4015.54019737.chunk.js","mappings":"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","sources":["Components/UIBase/Details/MeterDetails.jsx","Components/Composite/Details/MeterDetailsComposite.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Accordion, Select, Input } from '@scuf/common';\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport { AttributeDetails } from \"../../UIBase/Details/AttributeDetails\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\n\r\n\r\nexport default function MeterDetails({\r\n    meter,\r\n    LABlendType,\r\n    modMeter,\r\n    listOptions,\r\n    validationErrors,\r\n    onFieldChange,\r\n    onActiveStatusChange,\r\n    meterLineType,\r\n    attributeValidationErrors,\r\n    modAttributeMetaDataList,\r\n    onAttributeDataChange,\r\n    isTransloading,\r\n    source\r\n}) {\r\n    const [t] = useTranslation();\r\n\r\n    const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n        let attributeValidation = [];\r\n        attributeValidation = attributeValidationErrors.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n        })\r\n        return attributeValidation.attributeValidationErrors;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={modMeter.Code}\r\n                        label={t(\"Meter_Code\")}\r\n                        indicator=\"required\"\r\n                        disabled={meter.Code !== \"\"}\r\n                        onChange={(data) => onFieldChange(\"Code\", data)}\r\n                        error={t(validationErrors.Code)}\r\n                        reserveSpace={false}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={modMeter.Name}\r\n                        label={t(\"Meter_Name\")}\r\n                        indicator=\"required\"\r\n                        onChange={(data) => onFieldChange(\"Name\", data)}\r\n                        error={t(validationErrors.Name)}\r\n                        reserveSpace={false}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                        fluid\r\n                        placeholder=\"Select\"\r\n                        label={t(\"Meter_Type\")}\r\n                        value={modMeter.MeterType}\r\n                        disabled={(LABlendType === \"NONE\" && meterLineType === \"MAINLINE\") || meterLineType !== \"MAINLINE\" || meter.Code !== \"\" ? true : false}\r\n                        indicator=\"required\"\r\n                        options={source === \"PipelineSiteView\" ? listOptions.pipelineTypeOptions : meterLineType === \"MAINLINE\" ? listOptions.mainlineTypeOptions : listOptions.additiveTypeOptions}\r\n                        onChange={(data) => onFieldChange(\"MeterType\", data)}\r\n                        reserveSpace={false}\r\n                        search={false}\r\n                        noResultsMessage={t(\"noResultsMessage\")}\r\n                    />\r\n                </div>\r\n\r\n                {meterLineType === \"ADDITIVE\" ?\r\n                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Select\r\n                            fluid\r\n                            placeholder=\"Select\"\r\n                            label={t(\"Meter_AssociatedProdMeterCode\")}\r\n                            value={modMeter.ConjunctionNumber != null ? modMeter.ConjunctionNumber.toString() : \"\"}\r\n                            indicator=\"required\"\r\n                            options={listOptions.meterCodeOptions}\r\n                            onChange={(data) => onFieldChange(\"ConjunctionNumber\", data)}\r\n                            error={t(validationErrors.ConjunctionNumber)}\r\n                            reserveSpace={false}\r\n                        />\r\n                    </div> : (\"\")}\r\n\r\n                {meterLineType === \"MAINLINE\" ?\r\n                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                            fluid\r\n                            value={modMeter.MeterNumber}\r\n                            label={t(\"Meter_BCUMeterRefNumber\")}\r\n                            indicator=\"required\"\r\n                            disabled={meter.Code !== \"\"}\r\n                            onChange={(data) => onFieldChange(\"MeterNumber\", data)}\r\n                            reserveSpace={false}\r\n                            error={t(validationErrors.MeterNumber)}\r\n                        /> </div> :\r\n                    source !== \"PipelineSiteView\" ?\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modMeter.MeterNumber}\r\n                                label={t(\"Meter_BCUInjectorPosNo\")}\r\n                                indicator=\"required\"\r\n                                disabled={meter.Code !== \"\"}\r\n                                onChange={(data) => onFieldChange(\"MeterNumber\", data)}\r\n                                reserveSpace={false}\r\n                                error={t(validationErrors.MeterNumber)}\r\n                            /> </div> : null}\r\n\r\n                {meterLineType === \"MAINLINE\" && LABlendType === \"SIDE_STREAM\" && modMeter.MeterType !== \"FINISHED_PRODUCT_METER\" ?\r\n                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Select\r\n                            fluid\r\n                            placeholder=\"Select\"\r\n                            label={t(\"Meter_FPNumber\")}\r\n                            value={modMeter.ConjunctionNumber != null ? modMeter.ConjunctionNumber.toString() : \"\"}\r\n                            indicator=\"required\"\r\n                            options={listOptions.FpMeterCodes}\r\n                            onChange={(data) => onFieldChange(\"ConjunctionNumber\", data)}\r\n                            error={t(validationErrors.ConjunctionNumber)}\r\n                            reserveSpace={false}\r\n                        />\r\n                    </div> : (\"\")}\r\n\r\n\r\n                {isTransloading ?\r\n                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Select\r\n                            fluid\r\n                            placeholder=\"Select\"\r\n                            label={t(\"BaseProductList_Title\")}\r\n                            value={modMeter.BaseproductList}\r\n                            options={listOptions.baseProductOptions}\r\n                            onChange={(data) => onFieldChange(\"BaseproductList\", data)}\r\n                            multiple={true}\r\n                            reserveSpace={false}\r\n                        />\r\n                    </div>\r\n                    : meterLineType === \"MAINLINE\" && LABlendType === \"SEQUENTIAL\" ?\r\n                        <div className=\"col-12 col-md-6 col-lg-4\"><Select\r\n                            fluid\r\n                            placeholder=\"Select\"\r\n                            label={t(\"Meter_AvlTankGroup\")}\r\n                            value={modMeter.TankGroupList}\r\n                            multiple={true}\r\n                            indicator=\"required\"\r\n                            options={listOptions.tankGroupOptions}\r\n                            onChange={(data) => onFieldChange(\"TankGroupList\", data)}\r\n                            error={t(validationErrors.TankGroupCode)}\r\n                            noResultsMessage={t(\"noResultsMessage\")}\r\n                            reserveSpace={false}\r\n                            search={true}\r\n                        /></div>\r\n                        : modMeter.MeterType !== \"FINISHED_PRODUCT_METER\" && source !== \"PipelineSiteView\" ?\r\n                            <div className=\"col-12 col-md-6 col-lg-4\"><Select\r\n                                fluid\r\n                                placeholder=\"Select\"\r\n                                label={t(\"Meter_AvlTankGroup\")}\r\n                                value={modMeter.TankGroupCode}\r\n                                indicator=\"required\"\r\n                                options={listOptions.tankGroupOptions}\r\n                                onChange={(data) => onFieldChange(\"TankGroupCode\", data)}\r\n                                error={t(validationErrors.TankGroupCode)}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                            /></div>\r\n                            : null}\r\n\r\n                {source !== \"PipelineSiteView\" ?\r\n                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                            fluid\r\n                            label={t(\"Meter_ProductDensity\")}\r\n                            value={modMeter.ProductDensityInput}\r\n                            onChange={(data) => onFieldChange(\"ProductDensityInput\", data)}\r\n                            error={t(validationErrors.ProductDensityInput)}\r\n                            reserveSpace={false}\r\n                        />\r\n                    </div> : null}\r\n                {source !== \"PipelineSiteView\" ?\r\n                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                            fluid\r\n                            value={\r\n                                modMeter.Description === null\r\n                                    ? \"\"\r\n                                    : modMeter.Description\r\n                            }\r\n                            label={t(\"FinishedProductList_Description\")}\r\n                            onChange={(data) => onFieldChange(\"Description\", data)}\r\n                            error={t(validationErrors.Description)}\r\n                            reserveSpace={false}\r\n                        />\r\n                    </div> : null}\r\n                {source === \"PipelineSiteView\" ?\r\n                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Select\r\n                            fluid\r\n                            placeholder=\"Select\"\r\n                            label={t(\"Meter_BaseUOM\")}\r\n                            value={modMeter.MeterBaseUOM != null ? modMeter.MeterBaseUOM.toString() : \"\"}\r\n                            indicator=\"required\"\r\n                            disabled={meter.Code !== \"\"}\r\n                            options={listOptions.MeterBaseUOMs}\r\n                            onChange={(data) => onFieldChange(\"MeterBaseUOM\", data)}\r\n                            error={t(validationErrors.MeterBaseUOM)}\r\n                            reserveSpace={false}\r\n                        />\r\n                    </div> : (\"\")}\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                        fluid\r\n                        placeholder={t(\"FinishedProductInfo_Select\")}\r\n                        label={t(\"Cust_Status\")}\r\n                        value={modMeter.Active}\r\n                        options={[\r\n                            { text: t(\"ViewShipment_Ok\"), value: true },\r\n                            { text: t(\"ViewShipmentStatus_Inactive\"), value: false },\r\n                        ]}\r\n                        onChange={(data) => onActiveStatusChange(data)}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={\r\n                            modMeter.Remarks === null ? \"\" : modMeter.Remarks\r\n                        }\r\n                        label={t(\"Cust_Remarks\")}\r\n                        onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                        indicator={\r\n                            modMeter.Active !== meter.Active ? \"required\" : \"\"\r\n                        }\r\n                        error={t(validationErrors.Remarks)}\r\n                        reserveSpace={false}\r\n                    />\r\n                </div>\r\n            </div>\r\n            {\r\n                modAttributeMetaDataList.length > 0 ?\r\n                modAttributeMetaDataList.map((attire) =>\r\n                        <div className='bayAccordian'>\r\n                            <ErrorBoundary>\r\n                                <Accordion className=''>\r\n                                    <Accordion.Content\r\n                                        // className=\"attributeAccordian\"\r\n                                        title={t(\"Attributes_Header\")}\r\n                                    >\r\n                                        <AttributeDetails\r\n                                            selectedAttributeList={attire.attributeMetaDataList}\r\n                                            handleCellDataEdit={onAttributeDataChange}\r\n                                            attributeValidationErrors={handleValidationErrorFilter(attributeValidationErrors, attire.TerminalCode)}\r\n                                        ></AttributeDetails>\r\n                                    </Accordion.Content>\r\n                                </Accordion>\r\n                            </ErrorBoundary>\r\n                        </div>\r\n                    ) : null\r\n\r\n            }\r\n        </div >\r\n    );\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport { SiteDetailsUserActions } from \"../../UIBase/Common/SiteDetailsUserActions\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport lodash from \"lodash\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport { meterValidationDef } from \"../../../JS/ValidationDef\";\r\nimport { emptyMeter } from \"../../../JS/DefaultEntities\";\r\nimport {\r\n  functionGroups,\r\n  fnPipelineMeterSiteView,\r\n  fnSiteView,\r\n  fnRailSiteView,\r\n  fnMarineSiteView\r\n} from \"../../../JS/FunctionGroups\";\r\nimport MeterDetails from \"../../UIBase/Details/MeterDetails\";\r\nimport { meterAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass MeterDetailsComposite extends Component {\r\n  state = {\r\n    meter: {},\r\n    modMeter: {},\r\n    isReadyToRender: false,\r\n    saveEnabled: false,\r\n    parentCode: \"\",\r\n    isDeleteEnabled: false,\r\n    mainlineTypeOptions: [],\r\n    additiveTypeOptions: [],\r\n    pipelineTypeOptions: [],\r\n    tankGroupOptions: [],\r\n    baseProductOptions: [],\r\n    meterCodeOptions: [],\r\n    meterLineType: \"\",\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    validationErrors: Utilities.getInitialValidationErrors(meterValidationDef),\r\n    IsTransloading: false,\r\n    loadingArm: {},\r\n    FpMeterCodes: [],\r\n    MeterBaseUOMs: [],\r\n    showDeleteAuthenticationLayout: false,\r\n    showSaveAuthenticationLayout: false,\r\n    tempMeter: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      if (this.props.source === \"PipelineSiteView\") {\r\n        this.getMeterTypes();\r\n        this.getAttributes(this.props);\r\n        this.getUOMList();\r\n      } else {\r\n        this.getLoadingArm(this.props.parentCode);\r\n        this.getBCUDeviceDetails(this.props.deviceCode);\r\n        this.getMeterTypes();\r\n        this.getTankGroups(this.props.meterLineType);\r\n        this.getMeterCodes(this.props.parentCode);\r\n        //this.getMeter(this.props)\r\n        this.getAttributes(this.props);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getUOMList() {\r\n    axios(\r\n      RestAPIs.GetUOMList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            let volumeUOMs = result.EntityResult.VOLUME;\r\n            let massUOMs = result.EntityResult.MASS;\r\n            let MeterBaseUOMs = [];\r\n            volumeUOMs.forEach((volumeOption) => {\r\n              MeterBaseUOMs.push({\r\n                text: volumeOption,\r\n                value: volumeOption,\r\n              });\r\n            });\r\n            massUOMs.forEach((massOption) => {\r\n              MeterBaseUOMs.push({\r\n                text: massOption,\r\n                value: massOption,\r\n              });\r\n            });\r\n\r\n            this.setState({\r\n              MeterBaseUOMs,\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getUOM:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting getUOM:\", error);\r\n      });\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (this.props.source === \"PipelineSiteView\") {\r\n        this.getPipelineMeter(nextProps);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      } else if (\r\n        nextProps.LocationCode === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getTankGroups(nextProps.meterLineType);\r\n        this.getMeterCodes(nextProps.parentCode);\r\n        // this.getMeter(nextProps)\r\n        this.getAttributes(nextProps);\r\n        this.getLoadingArm(nextProps.parentCode);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getLoadingArm(parentCode) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.loadingArmCode,\r\n          value: parentCode,\r\n        },\r\n        {\r\n          key: KeyCodes.transportaionType,\r\n          value: Constants.TransportationType.ROAD,\r\n        },\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value: this.props.selectedTerminal,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.loadingArmCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetLoadingArm,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({ loadingArm: result.EntityResult });\r\n        } else {\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured in getLoadingArm\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getAttributes(props) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [meterAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.meter\r\n                ),\r\n            },\r\n            () => {\r\n              this.props.source === \"PipelineSiteView\"\r\n                ? this.getPipelineMeter(props.selectedRow)\r\n                : this.getMeter(props);\r\n            }\r\n          );\r\n        } else {\r\n          console.log(\"Error in getAttributes:\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n\r\n  getMeterTypes() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetMeterTypes,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            result.EntityResult.MAINLINE != null\r\n          ) {\r\n            var mainlineTypeOptions = Utilities.transferDictionarytoOptions(\r\n              result.EntityResult.MAINLINE\r\n            );\r\n\r\n            this.setState({ mainlineTypeOptions });\r\n          }\r\n          if (\r\n            result.EntityResult !== null &&\r\n            result.EntityResult.ADDITIVE != null\r\n          ) {\r\n            var additiveTypeOptions = Utilities.transferDictionarytoOptions(\r\n              result.EntityResult.ADDITIVE\r\n            );\r\n\r\n            this.setState({ additiveTypeOptions });\r\n          }\r\n          if (\r\n            result.EntityResult !== null &&\r\n            result.EntityResult.PIPELINE != null\r\n          ) {\r\n            var pipelineTypeOptions = Utilities.transferDictionarytoOptions(\r\n              result.EntityResult.PIPELINE\r\n            );\r\n\r\n            this.setState({ pipelineTypeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getDeviceTypes:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error while getting getBlendTypes\"\r\n      );\r\n    }\r\n  }\r\n\r\n  getFPMeterTypes() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetFPMeters + \"?LoadingArmCode=\" + this.props.parentCode,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            FpMeterCodes: Utilities.transferDictionarytoOptions(\r\n              result.EntityResult\r\n            ),\r\n          });\r\n        } else {\r\n          console.log(\"Error in getMeterTypes:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"MeterDetailsComposite:Error while getting getMeterTypes\");\r\n    }\r\n  }\r\n\r\n  getBaseProducts(terminalcode) {\r\n    axios(\r\n      RestAPIs.GetAllBaseProduct + \"?TerminalCode=\" + terminalcode,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let baseProductOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ baseProductOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getBaseProducts:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting BaseProducts:\", error);\r\n      });\r\n  }\r\n\r\n  getMeterCodes(loadingArmCode) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetProductMeterCode +\r\n          \"?armCode=\" +\r\n          loadingArmCode +\r\n          \"&transportationType=\" +\r\n          this.props.transportationtype,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            var meterCodeOptions = Utilities.transferDictionarytoOptions(\r\n              result.EntityResult.BASE_PRODUCT_METER\r\n            );\r\n\r\n            this.setState({ meterCodeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getDeviceTypes:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error while getting getBlendTypes\"\r\n      );\r\n    }\r\n  }\r\n\r\n  getBCUDeviceDetails(deviceCode) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.bcuCode,\r\n          value: deviceCode,\r\n        },\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value: this.props.selectedTerminal,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.bcuCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetBCUDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            IsTransloading: result.EntityResult.IsTransloading,\r\n          });\r\n          this.getBaseProducts(this.props.selectedTerminal);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MeterDetailsComposite:Error while getting getBCUDeviceDetails\"\r\n      );\r\n    }\r\n  }\r\n\r\n  getPipelineMeter(selectedRow) {\r\n    try {\r\n      emptyMeter.MeterType = Constants.meterTypeConstants.PIPELINE_HEADER_METER;\r\n      if (selectedRow.Common_Code === undefined) {\r\n        emptyMeter.MeterBaseUOM =\r\n          this.props.userDetails.EntityResult.PageAttibutes.DefaultUOMS.QuantityUOM;\r\n        this.setState(\r\n          {\r\n            meter: lodash.cloneDeep(emptyMeter),\r\n            modMeter: lodash.cloneDeep(emptyMeter),\r\n            modAttributeMetaDataList: [],\r\n            isReadyToRender: true,\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnPipelineMeterSiteView\r\n            ),\r\n          },\r\n          () => {\r\n            this.localNodeAttribute();\r\n          }\r\n        );\r\n        return;\r\n      }\r\n\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.meterCode,\r\n          value: selectedRow.Common_Code,\r\n        },\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value: this.props.selectedTerminal,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.meterCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetPipelineMeter,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              modAttributeMetaDataList: [],\r\n              meter: lodash.cloneDeep(result.EntityResult),\r\n              modMeter: lodash.cloneDeep(result.EntityResult),\r\n              isReadyToRender: true,\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnPipelineMeterSiteView\r\n              ),\r\n            },\r\n            () => {\r\n              this.terminalSelectionChange([result.EntityResult.TerminalCode]);\r\n            }\r\n          );\r\n        } else {\r\n          this.setState({\r\n            meter: lodash.cloneDeep(emptyMeter),\r\n            modMeter: lodash.cloneDeep(emptyMeter),\r\n            isReadyToRender: true,\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnPipelineMeterSiteView\r\n            ),\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MeterDetailsComposite:Error occured in getPipelinemeter\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getMeter(propsResult) {\r\n    let meterCode = propsResult.meterCode;\r\n    let meterLineType = propsResult.meterLineType;\r\n    if (meterLineType === Constants.meterLineType.MAINLINE) {\r\n      emptyMeter.MeterLineType = Constants.meterLineType.MAINLINE;\r\n      emptyMeter.MeterType = Constants.meterTypeConstants.BASE_PRODUCT_METER;\r\n    } else {\r\n      emptyMeter.MeterLineType = Constants.meterLineType.ADDITIVE;\r\n      emptyMeter.MeterType = Constants.meterTypeConstants.ADDITIVE_METER;\r\n    }\r\n    try {\r\n      if (meterCode === undefined || meterCode === \"\") {\r\n        this.setState(\r\n          {\r\n            meter: lodash.cloneDeep(emptyMeter),\r\n            modMeter: lodash.cloneDeep(emptyMeter),\r\n            modAttributeMetaDataList: [],\r\n            isDeleteEnabled: false,\r\n            isReadyToRender: true,\r\n            meterLineType: meterLineType,\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n          },\r\n          () => {\r\n            this.localNodeAttribute();\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      if (propsResult.isClone === true) {\r\n        this.setState(\r\n          {\r\n            meter: lodash.cloneDeep(emptyMeter),\r\n            modMeter: lodash.cloneDeep(emptyMeter),\r\n            modAttributeMetaDataList: [],\r\n            isDeleteEnabled: false,\r\n            isReadyToRender: true,\r\n            meterLineType: meterLineType,\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n          },\r\n          () => {\r\n            this.localNodeAttribute();\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.meterCode,\r\n          value: meterCode,\r\n        },\r\n        {\r\n          key: KeyCodes.transportaionType,\r\n          value: this.props.transportationtype,\r\n        },\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value: this.props.selectedTerminal,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.meterCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetMeter,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              modAttributeMetaDataList: [],\r\n              meter: lodash.cloneDeep(result.EntityResult),\r\n              modMeter: lodash.cloneDeep(result.EntityResult),\r\n              isReadyToRender: true,\r\n              isDeleteEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.remove,\r\n                Utilities.getSiteViewFunctionGroup(\r\n                  this.props.transportationtype\r\n                )\r\n              ),\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                Utilities.getSiteViewFunctionGroup(\r\n                  this.props.transportationtype\r\n                )\r\n              ),\r\n            },\r\n            () => {\r\n              if (\r\n                this.state.loadingArm.BlendType === \"SIDE_STREAM\" &&\r\n                result.EntityResult.MeterType !== \"FINISHED_PRODUCT_METER\"\r\n              )\r\n                this.getFPMeterTypes();\r\n              this.terminalSelectionChange([result.EntityResult.TerminalCode]);\r\n            }\r\n          );\r\n\r\n          let modMeter = lodash.cloneDeep(this.state.modMeter);\r\n          this.setState({\r\n            meterLineType: modMeter.MeterLineType,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            meter: lodash.cloneDeep(emptyMeter),\r\n            modMeter: lodash.cloneDeep(emptyMeter),\r\n            isDeleteEnabled: false,\r\n            isReadyToRender: true,\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured in getLoadingArm\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      let attributesTerminalsList = [];\r\n      var attributeMetaDataList = [];\r\n      var modAttributeMetaDataList = [];\r\n      attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n      var modMeter = lodash.cloneDeep(this.state.modMeter);\r\n\r\n      selectedTerminals.forEach((terminal) => {\r\n        var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n          return selectedAttribute.TerminalCode === terminal;\r\n        });\r\n\r\n        if (existitem === undefined) {\r\n          attributeMetaDataList.meter.forEach(function (attributeMetaData) {\r\n            if (attributeMetaData.TerminalCode === terminal) {\r\n              var Attributevalue = modMeter.Attributes.find((bayAttribute) => {\r\n                return bayAttribute.TerminalCode === terminal;\r\n              });\r\n              if (Attributevalue !== undefined) {\r\n                attributeMetaData.attributeMetaDataList.forEach(function (\r\n                  attributeMetaData\r\n                ) {\r\n                  var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                    (x) => {\r\n                      return x.AttributeCode === attributeMetaData.Code;\r\n                    }\r\n                  );\r\n                  if (valueAttribute !== undefined)\r\n                    attributeMetaData.DefaultValue =\r\n                      valueAttribute.AttributeValue;\r\n                });\r\n              }\r\n              attributesTerminalsList.push(attributeMetaData);\r\n            }\r\n          });\r\n        } else {\r\n          attributesTerminalsList.push(existitem);\r\n        }\r\n      });\r\n      modAttributeMetaDataList = [];\r\n      modAttributeMetaDataList = attributesTerminalsList;\r\n      modAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n        modAttributeMetaDataList\r\n      );\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n          return attributeValidation.TerminalCode === selectedTerminals;\r\n        });\r\n        if (existTerminal === undefined) {\r\n          Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n            (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n          );\r\n        }\r\n      });\r\n\r\n      this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MeterDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      this.terminalSelectionChange([this.props.selectedTerminal]);\r\n    } catch (error) {\r\n      console.log(\r\n        \"MeterDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTankGroups(meterLineType) {\r\n    axios(\r\n      RestAPIs.GetTankGroups + \"?MeterLine=\" + meterLineType,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            var tankGroupOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ tankGroupOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getLoadingTypes:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting getLoadingTypes:\", error);\r\n      });\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      let modMeter = lodash.cloneDeep(this.state.modMeter);\r\n      modMeter[propertyName] = data;\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      if (modMeter.Active === this.state.meter.Active) {\r\n        if (\r\n          this.state.meter.Remarks === modMeter.Remarks ||\r\n          modMeter.Remarks === \"\"\r\n        ) {\r\n          validationErrors.Remarks = \"\";\r\n        }\r\n        if (modMeter.Remarks === \"\")\r\n          modMeter.Remarks = this.state.meter.Remarks;\r\n      }\r\n      if (propertyName === \"MeterType\") {\r\n        if (\r\n          this.state.loadingArm.BlendType === \"SIDE_STREAM\" &&\r\n          data !== \"FINISHED_PRODUCT_METER\"\r\n        ) {\r\n          this.getFPMeterTypes();\r\n        }\r\n\r\n        if (data === \"VIRTUAL_BASE_PRODUCT_METER\") {\r\n          modMeter.Virtual = true;\r\n        }\r\n      }\r\n\r\n      if (propertyName === \"Active\") {\r\n        if (modMeter.Active !== this.state.meter.Active) {\r\n          modMeter.Remarks = \"\";\r\n        }\r\n      }\r\n      if (meterValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          meterValidationDef[propertyName],\r\n          data\r\n        );\r\n      }\r\n      this.setState({ validationErrors, modMeter });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modMeter = lodash.cloneDeep(this.state.modMeter);\r\n      modMeter.Active = value;\r\n      if (modMeter.Active !== this.state.meter.Active) modMeter.Remarks = \"\";\r\n      this.setState({ modMeter });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on handleActiveStatusChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  saveMeter = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempMeter = lodash.cloneDeep(this.state.tempMeter);\r\n     \r\n      if (this.props.source === \"PipelineSiteView\")\r\n          this.state.meter.Code === \"\"\r\n            ? this.createPipelineMeter(tempMeter)\r\n            : this.updatePipelineMeter(tempMeter);\r\n        else\r\n          this.state.meter.Code === \"\"\r\n            ? this.createMeter(tempMeter)\r\n            : this.updateMeter(tempMeter);\r\n\r\n    } catch (error) {\r\n      console.log(\"MeterComposite : Error in saveMeter\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n    //  this.setState({ saveEnabled: false });\r\n      let modMeter = this.fillDetails();\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      if (this.validateSave(modMeter, attributeList)) {\r\n        attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n        modMeter.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n       \r\n        let showSaveAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n\r\n      let tempMeter = lodash.cloneDeep(modMeter);\r\n      this.setState({ showSaveAuthenticationLayout, tempMeter }, () => {\r\n        if (showSaveAuthenticationLayout === false) {\r\n          this.saveMeter();\r\n        }\r\n    });\r\n\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"MeterDetailsComposite:Error occured on handleSave\", error);\r\n    }\r\n  };\r\n\r\n  validateSave(modMeter, attributeList) {\r\n    const validationErrors = { ...this.state.validationErrors };\r\n    Object.keys(meterValidationDef).forEach(function (key) {\r\n      if (modMeter[key] !== undefined)\r\n        validationErrors[key] = Utilities.validateField(\r\n          meterValidationDef[key],\r\n          modMeter[key]\r\n        );\r\n    });\r\n    if (modMeter.Active !== this.state.meter.Active) {\r\n      if (modMeter.Remarks === null || modMeter.Remarks === \"\") {\r\n        validationErrors[\"Remarks\"] = \"OriginTerminal_RemarksRequired\";\r\n      }\r\n    }\r\n    let meterLineType = this.state.meterLineType;\r\n    if (this.state.IsTransloading === false) {\r\n      if (\r\n        modMeter.MeterType !== \"FINISHED_PRODUCT_METER\" &&\r\n        this.state.loadingArm.BlendType !== \"SEQUENTIAL\" &&\r\n        (modMeter.TankGroupCode === null || modMeter.TankGroupCode === \"\") &&\r\n        this.props.source !== \"PipelineSiteView\"\r\n      ) {\r\n        validationErrors[\"TankGroupCode\"] = \"Meter_TankGrpSelect\";\r\n      }\r\n      if (\r\n        modMeter.MeteType !== \"FINISHED_PRODUCT_METER\" &&\r\n        meterLineType === Constants.meterLineType.MAINLINE &&\r\n        this.state.loadingArm === \"SEQUENTIAL\" &&\r\n        this.props.source !== \"PipelineSiteView\"\r\n      )\r\n        validationErrors[\"TankGroupCode\"] = \"Meter_TankGrpSelect\";\r\n    }\r\n    if (meterLineType === Constants.meterLineType.MAINLINE) {\r\n      if (modMeter.MeterNumber === null || modMeter.MeterNumber === \"\") {\r\n        validationErrors[\"MeterNumber\"] = \"Meter_BCUMeterRefNoMandatory\";\r\n      }\r\n\r\n      if (\r\n        this.state.loadingArm.BlendType === \"SIDE_STREAM\" &&\r\n        modMeter.MeterType !== \"FINISHED_PRODUCT_METER\" &&\r\n        (modMeter.ConjunctionNumber === null ||\r\n          modMeter.ConjunctionNumber === \"\")\r\n      ) {\r\n        validationErrors[\"ConjunctionNumber\"] = \"siteView_meter_select_FPMeter\";\r\n      }\r\n    }\r\n\r\n    if (meterLineType === Constants.meterLineType.ADDITIVE) {\r\n      if (modMeter.MeterNumber === null || modMeter.MeterNumber === \"\") {\r\n        validationErrors[\"MeterNumber\"] = \"Meter_BCUInjPosNum\";\r\n      }\r\n      if (\r\n        modMeter.ConjunctionNumber === null ||\r\n        modMeter.ConjunctionNumber === \"\"\r\n      ) {\r\n        validationErrors[\"ConjunctionNumber\"] = \"Meter_APMCMandatory\";\r\n      }\r\n    }\r\n\r\n    if (modMeter.MeterLineType === Constants.meterLineType.PIPELINE) {\r\n      if (modMeter.MeterBaseUOM === null || modMeter.MeterBaseUOM === \"\") {\r\n        validationErrors[\"MeterBaseUOM\"] = \"TankInfo_UOMRequired\";\r\n      }\r\n    }\r\n\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({ validationErrors, attributeValidationErrors });\r\n    var returnValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  fillDetails() {\r\n    try {\r\n      let modMeter = lodash.cloneDeep(this.state.modMeter);\r\n      if (this.props.source === \"PipelineSiteView\") {\r\n        modMeter.Duplicate = false;\r\n        modMeter.MeterLineType = Constants.meterLineType.PIPELINE;\r\n        modMeter.Virtual = false;\r\n        modMeter.TankGroupCode = null;\r\n      } else {\r\n        modMeter.LoadingArmCode = this.props.parentCode;\r\n        modMeter.TerminalCode = this.props.selectedTerminal;\r\n      }\r\n      return modMeter;\r\n    } catch (err) {\r\n      console.log(\"MeterDetailsComposite:Error occured on filldetails\", err);\r\n    }\r\n  }\r\n\r\n  handleDelete = () => {\r\n    try {\r\n      var deleteMeterKeys = [];\r\n      var MeterCode = this.state.modMeter.Code;\r\n      var keyData = {\r\n        keyDataCode: 0,\r\n        ShareHolderCode: \"\",\r\n        KeyCodes: [\r\n          { Key: KeyCodes.meterCode, Value: MeterCode },\r\n          { Key: KeyCodes.loadingArmCode, Value: this.props.parentCode },\r\n          {\r\n            Key: KeyCodes.transportaionType,\r\n            Value: this.props.transportationtype,\r\n          },\r\n          { Key: KeyCodes.terminalCode, Value: this.props.selectedTerminal },\r\n          { Key: KeyCodes.meterLineType, Value: this.state.meterLineType },\r\n        ],\r\n      };\r\n      deleteMeterKeys.push(keyData);\r\n      axios(\r\n        RestAPIs.DeleteMeter,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          deleteMeterKeys,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        var isRefreshDataRequire = result.IsSuccess;\r\n        if (\r\n          result.ResultDataList !== null &&\r\n          result.ResultDataList !== undefined\r\n        ) {\r\n          var failedResultsCount = result.ResultDataList.filter(function (res) {\r\n            return !res.IsSuccess;\r\n          }).length;\r\n          if (failedResultsCount === result.ResultDataList.length) {\r\n            isRefreshDataRequire = false;\r\n          } else isRefreshDataRequire = true;\r\n        }\r\n\r\n        let notification = {\r\n          messageType: \"critical\",\r\n          message: \"MeterDeletionStatus\",\r\n          messageResultDetails: [\r\n            {\r\n              keyFields: [\"MeterCode\"],\r\n              keyValues: [MeterCode],\r\n              isSuccess: false,\r\n              errorMessage: \"\",\r\n            },\r\n          ],\r\n        };\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (isRefreshDataRequire) {\r\n          this.getMeter({\r\n            meterCode: this.state.modMeter.Code,\r\n            selectedTerminal: this.props.selectedTerminal,\r\n            isClone: false,\r\n          });\r\n          this.setState({\r\n            isDeleteEnabled: false, showDeleteAuthenticationLayout: false,\r\n          });\r\n        } else {\r\n          this.setState({ isDeleteEnabled: true, showDeleteAuthenticationLayout: false, });\r\n        }\r\n\r\n        notification.messageResultDetails[0].errorMessage = result.ErrorList[0];\r\n\r\n        this.props.onDelete(this.state.modMeter, \"delete\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\"MeterDetailsComposite:Error occured on handleDelete\", error);\r\n    }\r\n  };\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MeterDetailsComposite:Error occured on handleAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  createMeter(modMeter) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.meterCode,\r\n          value: modMeter.Code,\r\n        },\r\n        {\r\n          key: KeyCodes.transportaionType,\r\n          value: this.props.transportationtype,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.meterCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modMeter,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"MeterCodeSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"MeterCode\"],\r\n            keyValues: [modMeter.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.CreateMeter,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n            showSaveAuthenticationLayout: false,\r\n          });\r\n          this.getMeter({\r\n            meterCode: this.state.modMeter.Code,\r\n            selectedTerminal: this.props.selectedTerminal,\r\n            isClone: false,\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n            showSaveAuthenticationLayout: false,\r\n          });\r\n        }\r\n        this.props.onSaved(this.state.modMeter, \"add\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on createLoadingArm\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  createPipelineMeter(modMeter) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.meterCode,\r\n          value: modMeter.Code,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.meterCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modMeter,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"MeterCodeSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"MeterCode\"],\r\n            keyValues: [modMeter.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.CreatePipelineMeter,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnPipelineMeterSiteView\r\n            ),\r\n            showSaveAuthenticationLayout: false,\r\n          });\r\n          this.getPipelineMeter({\r\n            Common_Code: this.state.modMeter.Code,\r\n            selectedTerminal: this.props.selectedTerminal,\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnPipelineMeterSiteView\r\n            ),\r\n            showSaveAuthenticationLayout: false,\r\n          });\r\n        }\r\n        this.props.onSaved(this.state.modMeter, \"add\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MeterDetailsComposite:Error occured on createPipelineMeter\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  updatePipelineMeter(modMeter) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.meterCode,\r\n          value: modMeter.Code,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.meterCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modMeter,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"MeterCodeSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"MeterCode\"],\r\n            keyValues: [modMeter.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.UpdatePipelineMeter,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnPipelineMeterSiteView\r\n            ),\r\n            showSaveAuthenticationLayout: false,\r\n          });\r\n          this.getPipelineMeter({\r\n            Common_Code: this.state.modMeter.Code,\r\n            selectedTerminal: this.props.selectedTerminal,\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnPipelineMeterSiteView\r\n            ),\r\n            showSaveAuthenticationLayout: false,\r\n          });\r\n        }\r\n        this.props.onSaved(this.state.modMeter, \"update\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"MeterDetailsComposite:Error occured on updatePipelineMeter\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modMeter: lodash.cloneDeep(this.state.meter),\r\n          selectedCompRow: [],\r\n          validationErrors,\r\n          modAttributeMetaDataList: [],\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange([this.state.meter.TerminalCode]);\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            this.localNodeAttribute();\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineMeterDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors:\r\n          Utilities.getAttributeInitialValidationErrors(\r\n            attributeMetaDataList.meter\r\n          ),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineMeterDetailsComposite:Error occured on handleResetAttributeValidationError\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  updateMeter(modMeter) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.meterCode,\r\n          value: modMeter.Code,\r\n        },\r\n        {\r\n          key: KeyCodes.transportaionType,\r\n          value: this.props.transportationtype,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.meterCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modMeter,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"MeterCodeSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"MeterCode\"],\r\n            keyValues: [modMeter.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.UpdateMeter,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n            showSaveAuthenticationLayout: false,\r\n          });\r\n          this.getMeter({\r\n            meterCode: this.state.modMeter.Code,\r\n            selectedTerminal: this.props.selectedTerminal,\r\n            isClone: false,\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n            showSaveAuthenticationLayout: false,\r\n          });\r\n        }\r\n        this.props.onSaved(this.state.modMeter, \"update\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on updateLoadingArm\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  authenticateDelete = () => {\r\n    try {\r\n      let showDeleteAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      this.setState({ showDeleteAuthenticationLayout });\r\n      if (showDeleteAuthenticationLayout === false) {\r\n        this.handleDelete();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"LoadingArmComposite : Error in authenticateDelete\");\r\n    }\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showSaveAuthenticationLayout: false,\r\n      showDeleteAuthenticationLayout: false,\r\n    });\r\n  };\r\n  \r\n  handleOperation()  {\r\n    return this.state.showDeleteAuthenticationLayout?this.handleDelete:this.saveMeter;\r\n };\r\n\r\n getFunctionGroupName() {\r\n  if(this.props.source === \"PipelineSiteView\")\r\n    return fnPipelineMeterSiteView\r\n  else if(this.props.transportationtype === Constants.TransportationType.RAIL)\r\n    return fnRailSiteView;\r\n  else  if(this.props.transportationtype === Constants.TransportationType.MARINE)\r\n    return fnMarineSiteView\r\n  else  \r\n    return fnSiteView\r\n };\r\n\r\n getFunctionName() {\r\n  return this.state.showDeleteAuthenticationLayout? functionGroups.remove: \r\n        this.state.meter.Code === \"\"\r\n         ? functionGroups.add\r\n         : functionGroups.modify\r\n };\r\n\r\n  render() {\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"DriverInfo_LastUpdated\",\r\n        fieldValue:\r\n          new Date(this.state.meter.LastUpdatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modMeter.LastUpdatedTime).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"DriverInfo_LastActive\",\r\n        fieldValue:\r\n          this.state.modMeter.LastActiveTime !== undefined &&\r\n          this.state.modMeter.LastActive !== null\r\n            ? new Date(\r\n                this.state.modMeter.LastActiveTime\r\n              ).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(this.state.modMeter.LastActiveTime).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"DriverInfo_CreatedTime\",\r\n        fieldValue:\r\n          new Date(this.state.modMeter.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modMeter.CreatedTime).toLocaleTimeString(),\r\n      },\r\n    ];\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.meter.Code}\r\n            newEntityName=\"Meter_Headder\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <MeterDetails\r\n            meter={this.state.meter}\r\n            modMeter={this.state.modMeter}\r\n            meterLineType={this.state.meterLineType}\r\n            LABlendType={this.state.loadingArm.BlendType}\r\n            listOptions={{\r\n              mainlineTypeOptions: this.state.mainlineTypeOptions,\r\n              additiveTypeOptions: this.state.additiveTypeOptions,\r\n              pipelineTypeOptions: this.state.pipelineTypeOptions,\r\n              tankGroupOptions: this.state.tankGroupOptions,\r\n              meterCodeOptions: this.state.meterCodeOptions,\r\n              baseProductOptions: this.state.baseProductOptions,\r\n              FpMeterCodes: this.state.FpMeterCodes,\r\n              MeterBaseUOMs: this.state.MeterBaseUOMs,\r\n            }}\r\n            validationErrors={this.state.validationErrors}\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            attributeMetaDataList={this.state.attributeMetaDataList}\r\n            onAttributeDataChange={this.handleAttributeDataChange}\r\n            onFieldChange={this.handleChange}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            isTransloading={this.state.IsTransloading}\r\n            source={this.props.source}\r\n          ></MeterDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          {this.props.source !== \"\" && this.props.source !== undefined ? (\r\n            <TMDetailsUserActions\r\n              handleBack={this.props.onBack}\r\n              handleSave={this.handleSave}\r\n              handleReset={this.handleReset}\r\n              saveEnabled={\r\n                this.props.userDetails.EntityResult.IsEnterpriseNode\r\n                  ? false\r\n                  : this.state.saveEnabled\r\n              }\r\n            ></TMDetailsUserActions>\r\n          ) : (\r\n            <SiteDetailsUserActions\r\n              isEnterpriseNode={\r\n                this.props.userDetails.EntityResult.IsEnterpriseNode\r\n              }\r\n              handleSave={this.handleSave}\r\n              handleDelete={this.authenticateDelete}\r\n              saveEnabled={this.state.saveEnabled}\r\n              isDeleteEnabled={this.state.isDeleteEnabled}\r\n            ></SiteDetailsUserActions>\r\n          )}\r\n        </ErrorBoundary>\r\n        {this.state.showDeleteAuthenticationLayout || this.state.showSaveAuthenticationLayout ?  (\r\n          <UserAuthenticationLayout\r\n          Username={this.props.userDetails.EntityResult.UserName}\r\n          functionName={this.getFunctionName()}\r\n          functionGroup={this.getFunctionGroupName()}\r\n          handleClose={this.handleAuthenticationClose}\r\n          handleOperation={this.handleOperation()}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MeterDetailsComposite);\r\n"],"names":["MeterDetails","_ref","meter","LABlendType","modMeter","listOptions","validationErrors","onFieldChange","onActiveStatusChange","meterLineType","attributeValidationErrors","modAttributeMetaDataList","onAttributeDataChange","isTransloading","source","t","useTranslation","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","_jsxs","className","children","_jsx","Input","fluid","value","Code","label","indicator","disabled","onChange","data","error","reserveSpace","Name","Select","placeholder","MeterType","options","pipelineTypeOptions","mainlineTypeOptions","additiveTypeOptions","search","noResultsMessage","ConjunctionNumber","toString","meterCodeOptions","MeterNumber","FpMeterCodes","BaseproductList","baseProductOptions","multiple","TankGroupList","tankGroupOptions","TankGroupCode","ProductDensityInput","Description","MeterBaseUOM","MeterBaseUOMs","Active","text","Remarks","length","map","attire","ErrorBoundary","Accordion","Content","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","handleCellDataEdit","MeterDetailsComposite","Component","constructor","arguments","state","isReadyToRender","saveEnabled","parentCode","isDeleteEnabled","Utilities","meterValidationDef","IsTransloading","loadingArm","showDeleteAuthenticationLayout","showSaveAuthenticationLayout","tempMeter","handleChange","propertyName","lodash","this","BlendType","getFPMeterTypes","Virtual","undefined","setState","console","log","handleActiveStatusChange","saveMeter","props","createPipelineMeter","updatePipelineMeter","createMeter","updateMeter","handleSave","fillDetails","attributeList","validateSave","Attributes","userDetails","EntityResult","IsWebPortalUser","handleDelete","deleteMeterKeys","MeterCode","keyData","keyDataCode","ShareHolderCode","KeyCodes","Key","Value","transportationtype","selectedTerminal","push","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","isRefreshDataRequire","IsSuccess","ResultDataList","filter","res","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","getMeter","meterCode","isClone","ErrorList","onDelete","handleAttributeDataChange","attribute","matchedAttributes","matchedAttributesList","modattribute","Array","isArray","DefaultValue","forEach","handleReset","Object","keys","key","selectedCompRow","IsEnterpriseNode","terminalSelectionChange","handleResetAttributeValidationError","localNodeAttribute","authenticateDelete","handleAuthenticationClose","componentDidMount","IsArchived","getMeterTypes","getAttributes","getUOMList","getLoadingArm","getBCUDeviceDetails","deviceCode","getTankGroups","getMeterCodes","volumeUOMs","VOLUME","massUOMs","MASS","volumeOption","massOption","catch","componentWillReceiveProps","nextProps","getPipelineMeter","LocationCode","keyCode","Constants","ROAD","obj","meterAttributeEntity","selectedRow","MAINLINE","ADDITIVE","PIPELINE","getBaseProducts","terminalcode","loadingArmCode","BASE_PRODUCT_METER","emptyMeter","PIPELINE_HEADER_METER","Common_Code","PageAttibutes","DefaultUOMS","QuantityUOM","FunctionsList","functionGroups","add","fnPipelineMeterSiteView","modify","propsResult","MeterLineType","ADDITIVE_METER","remove","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","bayAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","MeteType","returnValue","values","every","Duplicate","LoadingArmCode","err","Entity","onSaved","handleOperation","getFunctionGroupName","RAIL","fnRailSiteView","MARINE","fnMarineSiteView","fnSiteView","getFunctionName","render","popUpContents","fieldName","fieldValue","Date","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","LastActiveTime","LastActive","CreatedTime","TMDetailsHeader","entityCode","newEntityName","TMDetailsUserActions","handleBack","onBack","SiteDetailsUserActions","isEnterpriseNode","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleClose","LoadingPage","connect","getUserDetails","TokenAuth"],"sourceRoot":""}