{"version":3,"file":"static/js/7185.c9d8cdb8.chunk.js","mappings":"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","sources":["Components/UIBase/Details/RoleDetails.jsx","Components/Composite/Details/RoleDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","JS/functionalUtilities.js"],"sourcesContent":["import React from \"react\";\r\nimport { Select, Input, Checkbox, Button, Accordion } from \"@scuf/common\";\r\nimport { useTranslation, TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport { getOptionsWithSelect } from \"../../../JS/functionalUtilities\";\r\n\r\nRoleDetails.propTypes = {\r\n  role: PropTypes.object.isRequired,\r\n  modRole: PropTypes.object.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onVisibilityChange: PropTypes.func.isRequired,\r\n  roleOptions: PropTypes.array.isRequired,\r\n  handleCopyRoleAccess: PropTypes.func.isRequired,\r\n  modMenuItems: PropTypes.array.isRequired,\r\n  modFunctionGroupItems: PropTypes.array.isRequired,\r\n  onCopyPermissionChange: PropTypes.func.isRequired,\r\n  copyPermissionFromRole: PropTypes.string.isRequired,\r\n  onFunctionGroupChange: PropTypes.func.isRequired,\r\n};\r\n\r\nRoleDetails.defaultProps = {\r\n  modMenuItems: [],\r\n  modFunctionGroupItems: [],\r\n};\r\n\r\nexport function RoleDetails({\r\n  role,\r\n  modRole,\r\n  validationErrors,\r\n  onFieldChange,\r\n  onVisibilityChange,\r\n  roleOptions,\r\n  handleCopyRoleAccess,\r\n  modMenuItems,\r\n  modFunctionGroupItems,\r\n  copyPermissionFromRole,\r\n  onCopyPermissionChange,\r\n  onFunctionGroupChange,\r\n}) {\r\n  const [t] = useTranslation();\r\n\r\n  const visibilityCheckbox = (data) => {\r\n    return (\r\n      <div className={data.rowData.IsModified ? \"isModifiedCell\" : \"\"}>\r\n        <Checkbox\r\n          checked={data.rowData.Visible === true ? true : false}\r\n          onChange={(value) => onVisibilityChange(value, data)}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const showMenuName = (cellData) => {\r\n    let names = cellData.rowData.Name.split(\">\");\r\n    return (\r\n      <div>\r\n        {names.map((item, index) => {\r\n          if (names.length > index + 1)\r\n            return <span style={{ color: \"#a0a0a0\" }}>{t(item) + \" > \"}</span>;\r\n          else return <span>{t(item)}</span>;\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const showMenuGroup = (cellData) => {\r\n    try {\r\n      let menu = cellData.rowData.MenuGroup;\r\n      return (\r\n        <div>\r\n          {menu.map((menuNames) => {\r\n            if (menuNames !== null) {\r\n              let menuGroup = menuNames.split(\">\");\r\n              return (\r\n                <div>\r\n                  {menuGroup.map((item, index) => {\r\n                    if (menuGroup.length > index + 1)\r\n                      return (\r\n                        <span style={{ color: \"#a0a0a0\" }}>\r\n                          {t(item) + \" > \"}\r\n                        </span>\r\n                      );\r\n                    else return <span>{t(item)}</span>;\r\n                  })}\r\n                </div>\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n      );\r\n    } catch (error) {\r\n      console.log(\"Error occured on showMenuGroup\", error);\r\n    }\r\n  };\r\n\r\n  const renderCheckbox = (cellData, type, isPassword) => {\r\n    if (\r\n      cellData.rowData.FunctionInfoList.length > 0 &&\r\n      Array.isArray(cellData.rowData.FunctionInfoList)\r\n    ) {\r\n      let Item =\r\n        type === \"Add\"\r\n          ? cellData.rowData.FunctionInfoList.filter(\r\n              (item) => item.FunctionName === \"Add\"\r\n            )\r\n          : type === \"Modify\"\r\n          ? cellData.rowData.FunctionInfoList.filter(\r\n              (item) => item.FunctionName === \"Modify\"\r\n            )\r\n          : type === \"Remove\"\r\n          ? cellData.rowData.FunctionInfoList.filter(\r\n              (item) => item.FunctionName === \"Remove\"\r\n            )\r\n          : cellData.rowData.FunctionInfoList.filter(\r\n              (item) => item.FunctionName === \"View\"\r\n            );\r\n\r\n      if (Item.length > 0 && Array.isArray(Item)) {\r\n        return (\r\n          <div\r\n            className={\r\n              isPassword\r\n                ? Item[0].IsPasswordModified\r\n                  ? \"isModifiedCell\"\r\n                  : \"\"\r\n                : Item[0].FunctionProperties.IsModified\r\n                ? \"isModifiedCell\"\r\n                : \"\"\r\n            }\r\n          >\r\n            <Checkbox\r\n              disabled={\r\n                isPassword ? false : !Item[0].FunctionProperties.Editable\r\n              }\r\n              checked={\r\n                isPassword\r\n                  ? Item[0].PasswordEnabled === true\r\n                    ? true\r\n                    : false\r\n                  : Item[0].FunctionProperties.FunctionEnabled === true\r\n                  ? true\r\n                  : false\r\n              }\r\n              onChange={(value) =>\r\n                isPassword\r\n                  ? onFunctionGroupChange(\r\n                      cellData.rowData.FunctionGroupName,\r\n                      type,\r\n                      value,\r\n                      \"Password\"\r\n                    )\r\n                  : onFunctionGroupChange(\r\n                      cellData.rowData.FunctionGroupName,\r\n                      type,\r\n                      value\r\n                    )\r\n              }\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRole.RoleName}\r\n                indicator=\"required\"\r\n                disabled={role.RoleName !== \"\"}\r\n                onChange={(data) => onFieldChange(\"RoleName\", data)}\r\n                label={t(\"RoleAdmin_RoleName\")}\r\n                error={t(validationErrors.RoleName)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRole.Description}\r\n                label={t(\"RoleAdmin_Description\")}\r\n                onChange={(data) => onFieldChange(\"Description\", data)}\r\n                error={t(validationErrors.Description)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                value={copyPermissionFromRole}\r\n                label={t(\"RoleAdmin_CopyAccess\")}\r\n                options={getOptionsWithSelect(roleOptions, t(\"Common_Select\"))}\r\n                onChange={(data) => onCopyPermissionChange(data)}\r\n                reserveSpace={false}\r\n                search={true}\r\n                onResultsMessage={t(\"noResultsMessage\")}\r\n              />\r\n            </div>\r\n            <div>\r\n              <div\r\n                className=\"col-12 col-md-6 col-lg-4\"\r\n                style={{ marginTop: \"25px\" }}\r\n              >\r\n                <Button\r\n                  type=\"primary\"\r\n                  disabled={\r\n                    copyPermissionFromRole === \"\" ||\r\n                    copyPermissionFromRole === null\r\n                  }\r\n                  content={t(\"RoleAdminEdit_Apply\")}\r\n                  onClick={handleCopyRoleAccess}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <Accordion>\r\n            <Accordion.Content\r\n              className=\"attributeAccordian\"\r\n              title={t(\"RoleAdmin_PageMenu\")}\r\n            >\r\n              <div className=\"row marginRightZero tableScroll\">\r\n                <div className=\"col-12 detailsTable roleDatatableHeight\">\r\n                  <DataTable\r\n                    search={true}\r\n                    searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                    data={modMenuItems}\r\n                  >\r\n                    <DataTable.Column\r\n                      initialWidth=\"75%\"\r\n                      className=\"compColHeight\"\r\n                      key=\"Name\"\r\n                      field=\"Name\"\r\n                      header={t(\"RoleAdmin_MenuElement\")}\r\n                      renderer={showMenuName}\r\n                      editFieldType=\"text\"\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      initialWidth=\"25%\"\r\n                      className=\"compColHeight\"\r\n                      key=\"Visible\"\r\n                      field=\"Visible\"\r\n                      header={t(\"RoleAdmin_Visiblity\")}\r\n                      renderer={visibilityCheckbox}\r\n                      editFieldType=\"text\"\r\n                    ></DataTable.Column>\r\n                  </DataTable>\r\n                </div>\r\n              </div>\r\n            </Accordion.Content>\r\n\r\n            <Accordion.Content\r\n              className=\"attributeAccordian\"\r\n              title={t(\"RoleAdmin_FunctionGroups\")}\r\n            >\r\n              <div className=\"row marginRightZero tableScroll\">\r\n                <div className=\"col-12 detailsTable roleDatatableHeight\">\r\n                  <DataTable\r\n                    search={true}\r\n                    searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                    data={modFunctionGroupItems}\r\n                  >\r\n                    <DataTable.Column\r\n                      initialWidth=\"22%\"\r\n                      className=\"compColHeight\"\r\n                      header={t(\"Menu\")}\r\n                      renderer={showMenuGroup}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      initialWidth=\"20%\"\r\n                      className=\"compColHeight\"\r\n                      key=\"FunctionGroupName\"\r\n                      field=\"FunctionGroupName\"\r\n                      header={t(\"RoleAdmin_Features\")}\r\n                      editFieldType=\"text\"\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      initialWidth=\"5%\"\r\n                      className=\"compColHeight\"\r\n                      header={t(\"BayGroupList_Add\")}\r\n                      renderer={(cellData) =>\r\n                        renderCheckbox(cellData, \"Add\", false)\r\n                      }\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      initialWidth=\"7%\"\r\n                      className=\"compColHeight\"\r\n                      header={t(\"AccessCardInfo_x_Pwd\")}\r\n                      renderer={(cellData) =>\r\n                        renderCheckbox(cellData, \"Add\", true)\r\n                      }\r\n                    ></DataTable.Column>\r\n\r\n                    <DataTable.Column\r\n                      initialWidth=\"5%\"\r\n                      className=\"compColHeight\"\r\n                      header={t(\"RoleAdmin_Modify\")}\r\n                      renderer={(cellData) =>\r\n                        renderCheckbox(cellData, \"Modify\", false)\r\n                      }\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      initialWidth=\"7%\"\r\n                      className=\"compColHeight\"\r\n                      header={t(\"AccessCardInfo_x_Pwd\")}\r\n                      renderer={(cellData) =>\r\n                        renderCheckbox(cellData, \"Modify\", true)\r\n                      }\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      initialWidth=\"5%\"\r\n                      className=\"compColHeight\"\r\n                      header={t(\"AccessCardInfo_Delete\")}\r\n                      renderer={(cellData) =>\r\n                        renderCheckbox(cellData, \"Remove\", false)\r\n                      }\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      initialWidth=\"7%\"\r\n                      className=\"compColHeight\"\r\n                      header={t(\"AccessCardInfo_x_Pwd\")}\r\n                      renderer={(cellData) =>\r\n                        renderCheckbox(cellData, \"Remove\", true)\r\n                      }\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      initialWidth=\"5%\"\r\n                      className=\"compColHeight\"\r\n                      header={t(\"RoleAdmin_View\")}\r\n                      renderer={(cellData) =>\r\n                        renderCheckbox(cellData, \"View\", false)\r\n                      }\r\n                    ></DataTable.Column>\r\n                  </DataTable>\r\n                </div>\r\n              </div>\r\n            </Accordion.Content>\r\n          </Accordion>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { RoleDetails } from \"../../UIBase/Details/RoleDetails\";\r\nimport { emptyRole } from \"../../../JS/DefaultEntities\";\r\nimport lodash from \"lodash\";\r\nimport { roleValidationDef } from \"../../../JS/ValidationDef\";\r\nimport { functionGroups, fnRoleAdmin } from \"../../../JS/FunctionGroups\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Modal, Button } from \"@scuf/common\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass RoleDetailsComposite extends Component {\r\n  state = {\r\n    role: lodash.cloneDeep(emptyRole),\r\n    modRole: {},\r\n    isReadyToRender: false,\r\n    validationErrors: Utilities.getInitialValidationErrors(roleValidationDef),\r\n    saveEnabled: false,\r\n    roleOptions: [],\r\n    menuItems: [],\r\n    modMenuItems: [],\r\n    functionGroupItems: [],\r\n    modFunctionGroupItems: [],\r\n    copyPermissionFromRole: \"\",\r\n    isConfirmToSave: false,\r\n    allMenuItems: [],\r\n    showAuthenticationLayout: false,\r\n    tempRole: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getSecurityRoles();\r\n      this.getRole(this.props.selectedRow);\r\n    } catch (error) {\r\n      console.log(\r\n        \"RoleDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.role.RoleName !== \"\" &&\r\n        nextProps.selectedRow.RoleAdmin_RoleName === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getRole(nextProps.selectedRow);\r\n        this.getSecurityRoles();\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors, copyPermissionFromRole: \"\" });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"RoleDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getRole(roleRow) {\r\n    try {\r\n      if (roleRow.RoleAdmin_RoleName === undefined) {\r\n        axios(\r\n          RestAPIs.GetSecurityRole + \"?roleName=\",\r\n          Utilities.getAuthenticationObjectforGet(\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        ).then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            let menuList = [];\r\n            let functionGroupsList = [];\r\n            if (result.EntityResult !== null) {\r\n              if (\r\n                result.EntityResult.MenuItems.length > 0 &&\r\n                Array.isArray(result.EntityResult.MenuItems)\r\n              )\r\n                menuList = result.EntityResult.MenuItems.filter(\r\n                  (item) => item.IsComponent === true\r\n                );\r\n              if (\r\n                result.EntityResult.FunctionGroupItems.length > 0 &&\r\n                Array.isArray(result.EntityResult.FunctionGroupItems)\r\n              ) {\r\n                result.EntityResult.FunctionGroupItems.forEach(\r\n                  (functionGroup) => {\r\n                    var existitem = functionGroupsList.find((item) => {\r\n                      return (\r\n                        item.FunctionGroupName ===\r\n                        functionGroup.FunctionGroupName\r\n                      );\r\n                    });\r\n                    if (existitem === undefined) {\r\n                      let fgItem = {\r\n                        FunctionGroupName: functionGroup.FunctionGroupName,\r\n                        FunctionInfoList: functionGroup.FunctionInfoList,\r\n                        MenuGroup: [functionGroup.MenuGroup],\r\n                      };\r\n                      functionGroupsList.push(fgItem);\r\n                    } else {\r\n                      existitem.MenuGroup.push(functionGroup.MenuGroup);\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            }\r\n            this.setState({\r\n              allMenuItems: result.EntityResult.MenuItems,\r\n              menuItems: menuList,\r\n              modMenuItems: menuList,\r\n              isReadyToRender: true,\r\n              role: lodash.cloneDeep(emptyRole),\r\n              modRole: lodash.cloneDeep(emptyRole),\r\n              functionGroupItems: functionGroupsList,\r\n              modFunctionGroupItems: functionGroupsList,\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnRoleAdmin\r\n              ),\r\n            });\r\n          } else {\r\n            this.setState({\r\n              role: lodash.cloneDeep(emptyRole),\r\n              modRole: lodash.cloneDeep(emptyRole),\r\n              isReadyToRender: true,\r\n            });\r\n          }\r\n        });\r\n        return;\r\n      }\r\n      axios(\r\n        RestAPIs.GetSecurityRole + \"?roleName=\" + roleRow.RoleAdmin_RoleName,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let menuList = [];\r\n          let functionGroupsList = [];\r\n          if (result.EntityResult !== null) {\r\n            if (\r\n              result.EntityResult.MenuItems.length > 0 &&\r\n              Array.isArray(result.EntityResult.MenuItems)\r\n            )\r\n              menuList = result.EntityResult.MenuItems.filter(\r\n                (item) => item.IsComponent === true\r\n              );\r\n            if (\r\n              result.EntityResult.FunctionGroupItems.length > 0 &&\r\n              Array.isArray(result.EntityResult.FunctionGroupItems)\r\n            ) {\r\n              result.EntityResult.FunctionGroupItems.forEach(\r\n                (functionGroup) => {\r\n                  var existitem = functionGroupsList.find((item) => {\r\n                    return (\r\n                      item.FunctionGroupName === functionGroup.FunctionGroupName\r\n                    );\r\n                  });\r\n                  if (existitem === undefined) {\r\n                    let fgItem = {\r\n                      FunctionGroupName: functionGroup.FunctionGroupName,\r\n                      FunctionInfoList: functionGroup.FunctionInfoList,\r\n                      MenuGroup: [functionGroup.MenuGroup],\r\n                    };\r\n                    functionGroupsList.push(fgItem);\r\n                  } else {\r\n                    existitem.MenuGroup.push(functionGroup.MenuGroup);\r\n                  }\r\n                }\r\n              );\r\n            }\r\n          }\r\n          this.setState(\r\n            {\r\n              isReadyToRender: true,\r\n              role: lodash.cloneDeep(result.EntityResult),\r\n              modRole: lodash.cloneDeep(result.EntityResult),\r\n              allMenuItems: result.EntityResult.MenuItems,\r\n              menuItems: menuList,\r\n              modMenuItems: menuList,\r\n              functionGroupItems: functionGroupsList,\r\n              modFunctionGroupItems: functionGroupsList,\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnRoleAdmin\r\n              ),\r\n            },\r\n            () => {\r\n              this.updateCopyPermissionRole(result.EntityResult.RoleName);\r\n            }\r\n          );\r\n        } else {\r\n          this.setState({\r\n            role: lodash.cloneDeep(emptyRole),\r\n            modRole: lodash.cloneDeep(emptyRole),\r\n            menuItems: [],\r\n            modMenuItems: [],\r\n            isReadyToRender: true,\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"RoleDetailsComposite:Error occured on getRole\", error);\r\n    }\r\n  }\r\n\r\n  updateCopyPermissionRole = (roleName) => {\r\n    try {\r\n      const roleOptions = lodash.cloneDeep(this.state.roleOptions);\r\n      let roles = roleOptions.filter((item) => item.text !== roleName);\r\n      this.setState({ roleOptions: roles });\r\n    } catch (error) {\r\n      console.log(\r\n        \"RoleDetailsComposite:Error occured on updateCopyPermissionRole\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modRole = lodash.cloneDeep(this.state.modRole);\r\n      modRole[propertyName] = data;\r\n      this.setState({ modRole });\r\n\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (roleValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          roleValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"RoleDetailsComposite:Error occured on handleChange\", error);\r\n    }\r\n  };\r\n\r\n  handleCopyPermission = (data) => {\r\n    this.setState({ copyPermissionFromRole: data });\r\n  };\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n      const role = lodash.cloneDeep(this.state.role);\r\n      const menuItems = lodash.cloneDeep(this.state.menuItems);\r\n      const functionGroupItems = lodash.cloneDeep(\r\n        this.state.functionGroupItems\r\n      );\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n\r\n      this.setState({\r\n        modRole: { ...role },\r\n        validationErrors,\r\n        modMenuItems: menuItems,\r\n        modFunctionGroupItems: functionGroupItems,\r\n        copyPermissionFromRole: \"\",\r\n      });\r\n    } catch (error) {\r\n      console.log(\"RoleDetailsComposite:Error occured on handleReset\", error);\r\n    }\r\n  };\r\n\r\n  getSecurityRoles() {\r\n    axios(\r\n      RestAPIs.GetSecurityRoles,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let roleOptions = [];\r\n            roleOptions = Utilities.transferListtoOptions(result.EntityResult);\r\n            this.setState({ roleOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getSecurityRoles:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getSecurityRoles:\", error);\r\n      });\r\n  }\r\n\r\n  handleCopyRoleAccess = () => {\r\n    let copyPermissionFromRole = lodash.cloneDeep(\r\n      this.state.copyPermissionFromRole\r\n    );\r\n    if (copyPermissionFromRole !== \"\" || copyPermissionFromRole !== null) {\r\n      axios(\r\n        RestAPIs.GetSecurityRole + \"?roleName=\" + copyPermissionFromRole,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let menuList = [];\r\n          let functionGroupsList = [];\r\n          if (result.EntityResult !== null) {\r\n            if (\r\n              result.EntityResult.MenuItems.length > 0 &&\r\n              Array.isArray(result.EntityResult.MenuItems)\r\n            )\r\n              menuList = result.EntityResult.MenuItems.filter(\r\n                (item) => item.IsComponent === true\r\n              );\r\n            if (\r\n              result.EntityResult.FunctionGroupItems.length > 0 &&\r\n              Array.isArray(result.EntityResult.FunctionGroupItems)\r\n            ) {\r\n              result.EntityResult.FunctionGroupItems.forEach(\r\n                (functionGroup) => {\r\n                  var existitem = functionGroupsList.find((item) => {\r\n                    return (\r\n                      item.FunctionGroupName === functionGroup.FunctionGroupName\r\n                    );\r\n                  });\r\n                  if (existitem === undefined) {\r\n                    let fgItem = {\r\n                      FunctionGroupName: functionGroup.FunctionGroupName,\r\n                      FunctionInfoList: functionGroup.FunctionInfoList,\r\n                      MenuGroup: [functionGroup.MenuGroup],\r\n                    };\r\n                    functionGroupsList.push(fgItem);\r\n                  } else {\r\n                    existitem.MenuGroup.push(functionGroup.MenuGroup);\r\n                  }\r\n                }\r\n              );\r\n            }\r\n          }\r\n          this.setState({\r\n            allMenuItems: result.EntityResult.MenuItems,\r\n            modMenuItems: menuList,\r\n            modFunctionGroupItems: functionGroupsList,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  confirmToSave = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isConfirmToSave} size=\"small\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h5>{t(\"Role_ConfirmToSave\")}</h5>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  this.setState({ isConfirmToSave: false }, () => {\r\n                    this.handleSave();\r\n                  });\r\n                }}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => {\r\n                  this.setState({ isConfirmToSave: false });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n  handleSave = () => {\r\n    try {\r\n      let modRole = this.fillDetails();\r\n      if (this.validateSave(modRole)) {\r\n        let tempRole = lodash.cloneDeep(modRole);\r\n        let showAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n        this.setState({ showAuthenticationLayout, tempRole }, () => {\r\n          if (showAuthenticationLayout === false) {\r\n            this.saveRole();\r\n          }\r\n          })\r\n      ;\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.log(\"RoleDetailsComposite:Error occured on handleSave\", error);\r\n    }\r\n  };\r\n\r\n  saveRole = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempRole = lodash.cloneDeep(this.state.tempRole);\r\n      this.state.role.RoleName === \"\"\r\n        ? this.createRole(tempRole)\r\n        : this.updateRole(tempRole);\r\n    } catch (error) {\r\n      console.log(\"RoleDetailsComposite:Error occured on saveRole\", error);\r\n    }\r\n  };\r\n\r\n  handleSaveModal = () => {\r\n    this.setState({ isConfirmToSave: true });\r\n  };\r\n\r\n  fillDetails() {\r\n    try {\r\n      let modRole = lodash.cloneDeep(this.state.modRole);\r\n      let modMenuItems = lodash.cloneDeep(this.state.modMenuItems);\r\n      let allMenuItems = lodash.cloneDeep(this.state.allMenuItems);\r\n      let modFunctionGroupItems = lodash.cloneDeep(\r\n        this.state.modFunctionGroupItems\r\n      );\r\n      let menuList = [];\r\n      let functionGroupList = [];\r\n      modMenuItems.forEach((item) => {\r\n        let menu = {\r\n          MenuCode: item.MenuCode,\r\n          Visible: item.Visible,\r\n        };\r\n        menuList.push(menu);\r\n      });\r\n      allMenuItems\r\n        .filter((item) => item.IsComponent === false)\r\n        .forEach((item) => {\r\n          let menu = {\r\n            MenuCode: item.MenuCode,\r\n            Visible: 1,\r\n          };\r\n          menuList.push(menu);\r\n        });\r\n      modFunctionGroupItems.forEach((item) => {\r\n        let selectedData = item.FunctionInfoList.filter(\r\n          (functionGroupItem) =>\r\n            functionGroupItem.FunctionProperties.FunctionEnabled === true\r\n        );\r\n        let functionGroup = {\r\n          FunctionGroupName: item.FunctionGroupName,\r\n          FunctionInfoList: selectedData,\r\n        };\r\n        functionGroupList.push(functionGroup);\r\n      });\r\n      modRole.MenuItems = menuList;\r\n      modRole.FunctionGroupItems = functionGroupList;\r\n      this.setState({ modRole });\r\n      return modRole;\r\n    } catch (error) {\r\n      console.log(\"RoleDetailsComposite:Error occured on fillDetailss\", error);\r\n    }\r\n  }\r\n\r\n  validateSave(modRole) {\r\n    try {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      Object.keys(roleValidationDef).forEach(function (key) {\r\n        if (modRole[key] !== undefined)\r\n          validationErrors[key] = Utilities.validateField(\r\n            roleValidationDef[key],\r\n            modRole[key]\r\n          );\r\n      });\r\n      this.setState({ validationErrors });\r\n\r\n      let returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n      return returnValue;\r\n    } catch (error) {\r\n      console.log(\"RoleDetailsComposite:Error occured on validateSave\", error);\r\n    }\r\n  }\r\n\r\n  createRole(modRole) {\r\n    let obj = {\r\n      Entity: modRole,\r\n    };\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"RoleInfo_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"RoleAdmin_RoleName\"],\r\n          keyValues: [modRole.RoleName],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.CreateSecurityRole,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnRoleAdmin\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () => this.getRole({ RoleAdmin_RoleName: modRole.RoleName })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnRoleAdmin\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in createRole:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modRole, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnRoleAdmin\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modRole, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  updateRole(modRole) {\r\n    let obj = {\r\n      Entity: modRole,\r\n    };\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"RoleInfo_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"RoleAdmin_RoleName\"],\r\n          keyValues: [modRole.RoleName],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateSecurityRole,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnRoleAdmin\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () => this.getRole({ RoleAdmin_RoleName: modRole.RoleName })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnRoleAdmin\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in updateRole:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modRole, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnRoleAdmin\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modRole, \"update\", notification);\r\n      });\r\n  }\r\n\r\n  handleVisibilityChange = (newValue, data) => {\r\n    try {\r\n      let modMenuItems = lodash.cloneDeep(this.state.modMenuItems);\r\n      let menuItems = lodash.cloneDeep(this.state.menuItems);\r\n      let role = lodash.cloneDeep(this.state.role);\r\n      let matchedData = modMenuItems.filter(\r\n        (item) => item.MenuCode === data.rowData.MenuCode\r\n      );\r\n      if (matchedData.length > 0) {\r\n        matchedData[0].Visible = newValue;\r\n        if (role.RoleName !== \"\") {\r\n          let matchedOldData = menuItems.filter(\r\n            (item) => item.MenuCode === data.rowData.MenuCode\r\n          );\r\n          if (matchedData[0].Visible !== matchedOldData[0].Visible)\r\n            matchedData[0].IsModified = true;\r\n          else matchedData[0].IsModified = false;\r\n        }\r\n      }\r\n      this.setState({ modMenuItems });\r\n    } catch (error) {\r\n      console.log(\r\n        \"RoleDetailsComposite:Error occured on handleVisibilityChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleFunctionGroupChange = (\r\n    functionGroupName,\r\n    type,\r\n    data,\r\n    operationType\r\n  ) => {\r\n    try {\r\n      let modFunctionGroupItems = lodash.cloneDeep(\r\n        this.state.modFunctionGroupItems\r\n      );\r\n      let functionGroupItems = lodash.cloneDeep(this.state.functionGroupItems);\r\n      let role = lodash.cloneDeep(this.state.role);\r\n\r\n      let matchedData = modFunctionGroupItems.filter(\r\n        (item) => item.FunctionGroupName === functionGroupName\r\n      );\r\n      if (matchedData.length > 0) {\r\n        let functionInfo = matchedData[0].FunctionInfoList.filter(\r\n          (item) => item.FunctionName === type\r\n        );\r\n\r\n        if (functionInfo.length > 0) {\r\n          if (operationType === \"Password\") {\r\n            functionInfo[0].PasswordEnabled = data;\r\n            if (role.RoleName !== \"\") {\r\n              let mactchedOldGroupItems = functionGroupItems.filter(\r\n                (item) => item.FunctionGroupName === functionGroupName\r\n              );\r\n              let matchedOldFunctionInfo =\r\n                mactchedOldGroupItems[0].FunctionInfoList.filter(\r\n                  (item) => item.FunctionName === type\r\n                );\r\n              if (\r\n                functionInfo[0].PasswordEnabled !==\r\n                matchedOldFunctionInfo[0].PasswordEnabled\r\n              )\r\n                functionInfo[0].IsPasswordModified = true;\r\n              else functionInfo[0].IsPasswordModified = false;\r\n            }\r\n          } else {\r\n            functionInfo[0].FunctionProperties.FunctionEnabled = data;\r\n            if (role.RoleName !== \"\") {\r\n              let mactchedOldGroupItems = functionGroupItems.filter(\r\n                (item) => item.FunctionGroupName === functionGroupName\r\n              );\r\n              let matchedOldFunctionInfo =\r\n                mactchedOldGroupItems[0].FunctionInfoList.filter(\r\n                  (item) => item.FunctionName === type\r\n                );\r\n              if (\r\n                functionInfo[0].FunctionProperties.FunctionEnabled !==\r\n                matchedOldFunctionInfo[0].FunctionProperties.FunctionEnabled\r\n              )\r\n                functionInfo[0].FunctionProperties.IsModified = true;\r\n              else functionInfo[0].FunctionProperties.IsModified = false;\r\n            }\r\n          }\r\n          this.setState({ modFunctionGroupItems });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"RoleDetailsComposite:Error occured on handleFunctionGroupChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"BaseProductInfo_LastUpdated\",\r\n        fieldValue:\r\n          new Date(this.state.modRole.LastUpdatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modRole.LastUpdatedTime).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"BaseProductInfo_Created\",\r\n        fieldValue:\r\n          new Date(this.state.modRole.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modRole.CreatedTime).toLocaleTimeString(),\r\n      },\r\n    ];\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.role.RoleName}\r\n            newEntityName=\"RoleAdmin_NewRole\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <RoleDetails\r\n            role={this.state.role}\r\n            modRole={this.state.modRole}\r\n            validationErrors={this.state.validationErrors}\r\n            onFieldChange={this.handleChange}\r\n            onVisibilityChange={this.handleVisibilityChange}\r\n            roleOptions={this.state.roleOptions}\r\n            handleCopyRoleAccess={this.handleCopyRoleAccess}\r\n            modMenuItems={this.state.modMenuItems}\r\n            modFunctionGroupItems={this.state.modFunctionGroupItems}\r\n            copyPermissionFromRole={this.state.copyPermissionFromRole}\r\n            onCopyPermissionChange={this.handleCopyPermission}\r\n            onFunctionGroupChange={this.handleFunctionGroupChange}\r\n          ></RoleDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSaveModal}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.isConfirmToSave ? this.confirmToSave() : null}\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.role.RoleName === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnRoleAdmin}\r\n            handleOperation={this.saveRole}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(RoleDetailsComposite);\r\n\r\nRoleDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["RoleDetails","_ref","role","modRole","validationErrors","onFieldChange","onVisibilityChange","roleOptions","handleCopyRoleAccess","modMenuItems","modFunctionGroupItems","copyPermissionFromRole","onCopyPermissionChange","onFunctionGroupChange","t","useTranslation","visibilityCheckbox","data","_jsx","className","rowData","IsModified","children","Checkbox","checked","Visible","onChange","value","showMenuName","cellData","names","Name","split","map","item","index","length","style","color","showMenuGroup","menu","MenuGroup","menuNames","menuGroup","error","console","log","renderCheckbox","type","isPassword","FunctionInfoList","Array","isArray","Item","filter","FunctionName","IsPasswordModified","FunctionProperties","disabled","Editable","PasswordEnabled","FunctionEnabled","FunctionGroupName","TranslationConsumer","_jsxs","Input","fluid","RoleName","indicator","label","reserveSpace","Description","Select","placeholder","options","getOptionsWithSelect","search","onResultsMessage","marginTop","Button","content","onClick","Accordion","Content","title","DataTable","searchPlaceholder","Column","initialWidth","field","header","renderer","editFieldType","defaultProps","RoleDetailsComposite","Component","constructor","arguments","state","lodash","emptyRole","isReadyToRender","Utilities","roleValidationDef","saveEnabled","menuItems","functionGroupItems","isConfirmToSave","allMenuItems","showAuthenticationLayout","tempRole","updateCopyPermissionRole","roleName","roles","this","text","setState","handleChange","propertyName","undefined","handleCopyPermission","handleReset","Object","keys","forEach","key","axios","RestAPIs","props","tokenDetails","tokenInfo","then","response","result","IsSuccess","menuList","functionGroupsList","EntityResult","MenuItems","IsComponent","FunctionGroupItems","functionGroup","existitem","find","fgItem","push","confirmToSave","Modal","open","size","Footer","handleSave","handleAuthenticationClose","fillDetails","validateSave","userDetails","IsWebPortalUser","saveRole","createRole","updateRole","handleSaveModal","handleVisibilityChange","newValue","matchedData","MenuCode","matchedOldData","handleFunctionGroupChange","functionGroupName","operationType","functionInfo","matchedOldFunctionInfo","componentDidMount","IsArchived","getSecurityRoles","getRole","selectedRow","componentWillReceiveProps","nextProps","RoleAdmin_RoleName","roleRow","FunctionsList","functionGroups","modify","fnRoleAdmin","ErrorList","catch","functionGroupList","selectedData","functionGroupItem","values","every","obj","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","add","onSaved","render","popUpContents","fieldName","fieldValue","Date","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","CreatedTime","ErrorBoundary","TMDetailsHeader","entityCode","newEntityName","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","margin","Popup","element","Icon","marginLeft","root","name","position","List","float","ddlOptions","selectOptionText","option","unshift","getCurrentDateFormat","language","window","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}