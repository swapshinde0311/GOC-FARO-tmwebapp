{"version":3,"file":"static/js/5050.24d4646d.chunk.js","mappings":"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","sources":["Components/UIBase/Details/COAManagementFinishedProductDetails.jsx","Components/Composite/Details/COAManagementFinishedProductDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Details/AttributeDetails.jsx","Components/UIBase/Common/TMReportViewer.jsx","Components/UIBase/Details/ReportDetails.jsx","JS/functionalUtilities.js"],"sourcesContent":["import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport { Select,Input, Accordion } from \"@scuf/common\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\n\r\nCOAManagementFinishedProductDetails.propTypes = {\r\n  coaManagementFinishedProduct: PropTypes.object.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    templateParameters:PropTypes.array,\r\n  }).isRequired,\r\n  pageSize: PropTypes.number,\r\n};\r\n\r\nCOAManagementFinishedProductDetails.defaultProps = {\r\n  templateParameters:[],\r\n};\r\n\r\n\r\n\r\nexport function COAManagementFinishedProductDetails({\r\n  coaManagementFinishedProduct,\r\n  listOptions,\r\n  pageSize,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={coaManagementFinishedProduct.COACode}\r\n                label={t(\"COAManagementFinishedProductCode\")}\r\n                indicator=\"required\"\r\n                disabled={true}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <Input\r\n                fluid\r\n                value={coaManagementFinishedProduct.FinishedProductCode}\r\n                label={t(\"COAManagementFinishedProductFinishedProductCode\")}\r\n                disabled={true}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <Input\r\n                fluid\r\n                value={coaManagementFinishedProduct.FinishedProductName}\r\n                label={t(\"COAManagementFinishedProductFinishedProductName\")}\r\n                disabled={true}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <Input\r\n                fluid\r\n                value={coaManagementFinishedProduct.LOTNumber}\r\n                label={t(\"COAManagementFinishedProductLOTNumber\")}\r\n                disabled={true}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n                        <div className=\"col-12 col-md-12 col-lg-12\">\r\n                            <h4>{t(\"COAManagementFinishedProduct_Configuration\")}</h4>\r\n                            <div className=\"detailsTable\">\r\n                                <DataTable\r\n                                    data={listOptions.templateParameters}\r\n                                    search={true}\r\n                                    rows={pageSize}\r\n                                    searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"ParameterName\"\r\n                                        field=\"ParameterName\"\r\n                                        header={t(\"COAManagementDetail_ParameterName\")}\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"Specification\"\r\n                                        field=\"Specification\"\r\n                                        header={t(\"COAManagementDetail_Specification\")}\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"Method\"\r\n                                        field=\"Method\"\r\n                                        header={t(\"COAManagementDetail_Method\")}\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"Result\"\r\n                                        field=\"Result\"\r\n                                        header={t(\"COAManagementDetail_Result\")}\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"SortIndex\"\r\n                                        field=\"SortIndex\"\r\n                                        header={t(\"COAManagementDetail_SortIndex\")}\r\n                                    ></DataTable.Column>\r\n                                    {Array.isArray(listOptions.templateParameters) &&\r\n                                        listOptions.templateParameters.length > pageSize ? (\r\n                                        <DataTable.Pagination />) : (\"\")}\r\n                                </DataTable>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { COAManagementFinishedProductDetails } from \"../../UIBase/Details/COAManagementFinishedProductDetails\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport lodash from \"lodash\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport ReportDetails from \"../../UIBase/Details/ReportDetails\";\r\n\r\nclass COAManagementFinishedProductDetailsComposite extends Component {\r\n  state = {\r\n    coaManagementFinishedProduct: {},\r\n    isReadyToRender: false,\r\n    templateParameters: [],\r\n    showReport: false,\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.coaManagementFinishedProduct.COACode !== \"\" &&\r\n        nextProps.selectedRow.COACode === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getCOAManagementFinishedProduct(nextProps.selectedRow);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"COAManagementFinishedProductDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getCOAManagementFinishedProduct(this.props.selectedRow);\r\n    } catch (error) {\r\n      console.log(\r\n        \"COAManagementFinishedProductDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getCOAManagementFinishedProduct(selectedRow) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.coaManagementFinishedProductCode,\r\n        value: selectedRow.COACode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.coaManagementFinishedProductCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.GetCOAManagementFinishedProduct,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let details = result.EntityResult.COAManagementDetailsList;\r\n          var AvailableManagementParameters = [];\r\n          if (Array.isArray(details)) {\r\n            details.forEach((obj) => {\r\n              var tempObj = {\r\n                ParameterName:\r\n                  obj.ParameterName === undefined\r\n                    ? obj.AnalysisParameterName\r\n                    : obj.ParameterName,\r\n                Specification: obj.Specification,\r\n                Method: obj.Method,\r\n                SortIndex: obj.SortIndex,\r\n                Result: obj.Result,\r\n              };\r\n              AvailableManagementParameters.push(tempObj);\r\n            });\r\n          }\r\n\r\n          this.setState({\r\n            isReadyToRender: true,\r\n            coaManagementFinishedProduct: lodash.cloneDeep(result.EntityResult),\r\n            templateParameters: AvailableManagementParameters,\r\n          });\r\n        } else {\r\n          this.setState(\r\n            {\r\n              coaManagementFinishedProduct: {},\r\n              isReadyToRender: true,\r\n            },\r\n            () => {}\r\n          );\r\n          console.log(\r\n            \"Error in getCOAManagementFinishedProduct:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"Error while getting coaManagementFinishedProduct:\",\r\n          error,\r\n          selectedRow\r\n        );\r\n      });\r\n  }\r\n\r\n  handleModalBack = () => {\r\n    this.setState({ showReport: false });\r\n  };\r\n\r\n  renderModal() {\r\n    let path = null;\r\n    if (this.props.userDetails.EntityResult.IsArchived) {\r\n      path = \"TM/\" + Constants.TMReportArchive + \"/FinishedProductCOAReport\";\r\n    } else {\r\n      path = \"TM/\" + Constants.TMReports + \"/FinishedProductCOAReport\";\r\n    }\r\n    let paramValues = {\r\n      Culture: this.props.userDetails.EntityResult.UICulture,\r\n      COACode: this.state.coaManagementFinishedProduct.COACode,\r\n    };\r\n    return (\r\n      <ReportDetails\r\n        showReport={this.state.showReport}\r\n        handleBack={this.handleModalBack}\r\n        handleModalClose={this.handleModalBack}\r\n        proxyServerHost={RestAPIs.WebAPIURL}\r\n        reportServiceHost={this.reportServiceURI}\r\n        filePath={path}\r\n        parameters={paramValues}\r\n      />\r\n    );\r\n  }\r\n\r\n  handleViewFinishedProductCOAReport = () => {\r\n    if (this.reportServiceURI === undefined) {\r\n      axios(\r\n        RestAPIs.GetReportServiceURI,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        if (response.data.IsSuccess) {\r\n          this.reportServiceURI = response.data.EntityResult;\r\n          //this.reportServiceURI = \"http://t1svr:80/\";\r\n          this.setState({ showReport: true });\r\n        }\r\n      });\r\n    } else {\r\n      this.setState({ showReport: true });\r\n    }\r\n  };\r\n  render() {\r\n    const listOptions = {\r\n      templateParameters: this.state.templateParameters,\r\n    };\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"COAManagementFinishedProduct_LastUpDt\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.coaManagementFinishedProduct.LastUpdatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.coaManagementFinishedProduct.LastUpdatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"COAManagementFinishedProduct_LastUpdatedBy\",\r\n        fieldValue: this.state.coaManagementFinishedProduct.LastUpdatedBy,\r\n      },\r\n    ];\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.coaManagementFinishedProduct.COACode}\r\n            newEntityName=\"COAManagementFinishedProduct_Title\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n\r\n        <ErrorBoundary>\r\n          <COAManagementFinishedProductDetails\r\n            coaManagementFinishedProduct={\r\n              this.state.coaManagementFinishedProduct\r\n            }\r\n            genericProps={this.props.genericProps}\r\n            //listOptions={this.state.listOptions}\r\n            listOptions={listOptions}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            pageSize={\r\n              this.props.userDetails.EntityResult.PageAttibutes\r\n                .WebPortalListPageSize\r\n            }\r\n          ></COAManagementFinishedProductDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <div className=\"row userActionPosition\">\r\n                <div className=\"col col-2\">\r\n                  <Button\r\n                    className=\"backButton\"\r\n                    onClick={this.props.onBack}\r\n                    content={t(\"Back\")}\r\n                  ></Button>\r\n                </div>\r\n                <div className=\"col col-10\" style={{ textAlign: \"right\" }}>\r\n                  <Button\r\n                    content={t(\"COA_ViewFinishedProductCOAReport\")}\r\n                    onClick={() => this.handleViewFinishedProductCOAReport()}\r\n                  ></Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        </ErrorBoundary>\r\n        {this.renderModal()}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(\r\n  COAManagementFinishedProductDetailsComposite\r\n);\r\n\r\nCOAManagementFinishedProductDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  genericProps: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  activeItem: PropTypes.object,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport * as WjCore from \"@grapecity/wijmo\";\r\nimport { ReportViewer } from \"@grapecity/wijmo.react.viewer\";\r\nimport * as wjViewer from \"@grapecity/wijmo.viewer\";\r\nimport \"@grapecity/wijmo.styles/wijmo.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Constants from \"./../../../JS/Constants\";\r\nimport { connect } from \"react-redux\";\r\n\r\nTMReportViewer.propTypes = {\r\n  proxyServerHost: PropTypes.string.isRequired,\r\n  reportServiceHost: PropTypes.string.isRequired,\r\n  parameters: PropTypes.object.isRequired,\r\n};\r\n\r\nTMReportViewer.defaultProps = {\r\n  parameters: {},\r\n};\r\n\r\nWjCore.setLicenseKey(Constants.wizmoKey);\r\n\r\nfunction TMReportViewer({\r\n  proxyServerHost,\r\n  reportServiceHost,\r\n  parameters,\r\n  filePath,\r\n  ...props\r\n}) {\r\n  //   const [proxyHost, setProxyHost] = useState(\r\n  //     \"http://localhost:8888/TMWebProxyAPI/\"\r\n  //   );\r\n  //   const [reportServiceHost, setReportServiceHost] = useState(\r\n  //     \"http://localhost:5632/\"\r\n  //   );\r\n  //   const [reportUrl, setReportUrl] = useState(proxyHost + \"api/report\");\r\n  //   const [filePath, setFilePath] = useState(\r\n  //     \"TM/\" + \"TMReports/\" + \"CarrierCompanyReport\"\r\n  //   );\r\n  const reportUrl = proxyServerHost + \"api/report\";\r\n  //const filePath = \"TM/\" + \"TMReports/\" + reportName;\r\n\r\n  const beforeXhrRequestSend = (s, event) => {\r\n    // use this event for Authorization purpose\r\n    const prevBeforeSend = event.settings.beforeSend;\r\n    event.settings.beforeSend = function (xhr) {\r\n      prevBeforeSend && prevBeforeSend(xhr);\r\n      //here you may add the params for XMLHttpRequest as required\r\n      if (!props.userDetails.EntityResult.IsWebPortalUser)\r\n        xhr.withCredentials = true;\r\n      if (xhr.URL_DEBUG.indexOf(\"parameters\") > -1) {\r\n        xhr.onreadystatechange = function () {\r\n          if (this.readyState === 4 && this.status === 200) {\r\n            var host = s.hostElement;\r\n            setTimeout(() => {\r\n              var splitter = host.querySelector(\".wj-viewer-splitter\");\r\n              var param = host\r\n                .querySelector(\".wj-viewer-tabsleft\")\r\n                .querySelectorAll(\"li\")[2];\r\n              if (!param.disabled) {\r\n                param.className = \"hidden\";\r\n                splitter.click();\r\n              }\r\n            }, 1000);\r\n          }\r\n        };\r\n      }\r\n    };\r\n  };\r\n  let header = {\r\n    Authorization: \"Bearer \" + props.tokenDetails.tokenInfo,\r\n  };\r\n\r\n  // let header = {\r\n  //   Authorization: \"Bearer \" + \"fiewjfjewifi\",\r\n  // };\r\n\r\n  const initViewer = (s, event) => {\r\n    wjViewer._ReportService.prototype.load = function (data) {\r\n      var _this = this;\r\n      var promise = new wjViewer._Promise();\r\n      if (!this._checkReportController(promise)) {\r\n        return promise;\r\n      }\r\n      this.httpRequest(this._getReportInstancesUrl(), {\r\n        method: \"POST\",\r\n        data: data,\r\n      }).then(\r\n        function (xhr) {\r\n          var v = wjViewer._parseReportExecutionInfo(xhr.responseText);\r\n          _this._instanceId = v.id;\r\n          _this._status = wjViewer._ExecutionStatus.loaded;\r\n          _this._outlinesLocation = v.outlinesLocation;\r\n          _this._statusLocation = v.statusLocation.replace(\r\n            reportServiceHost,\r\n            proxyServerHost\r\n          );\r\n          _this._pageSettingsLocation = v.pageSettingsLocation;\r\n          _this._featuresLocation = v.featuresLocation;\r\n          _this._parametersLocation = v.parametersLocation;\r\n          promise.resolve(v);\r\n        },\r\n        function (xhr) {\r\n          promise.reject(_this._getError(xhr));\r\n        }\r\n      );\r\n      return promise;\r\n    };\r\n  };\r\n\r\n  //console.log(props.userDetails.EntityResult.IsWebPortalUser, header);\r\n  return (\r\n    <div>\r\n      {props.userDetails.EntityResult.IsWebPortalUser ? (\r\n        <div>\r\n          <ReportViewer\r\n            requestHeaders={header}\r\n            style={{ height: \"80vh\" }}\r\n            parameters={parameters}\r\n            serviceUrl={reportUrl}\r\n            filePath={filePath}\r\n            initialized={initViewer}\r\n            beforeSendRequest={beforeXhrRequestSend}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <ReportViewer\r\n            //requestHeaders={header}\r\n            style={{ height: \"80vh\" }}\r\n            parameters={parameters}\r\n            serviceUrl={reportUrl}\r\n            filePath={filePath}\r\n            initialized={initViewer}\r\n            beforeSendRequest={beforeXhrRequestSend}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TMReportViewer);\r\n","import React from \"react\";\r\nimport { Modal, Button, Header } from \"@scuf/common\";\r\nimport TMReportViewer from \"../Common/TMReportViewer\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nReportDetails.propTypes = {\r\n  proxyServerHost: PropTypes.string.isRequired,\r\n  reportServiceHost: PropTypes.string.isRequired,\r\n  filePath: PropTypes.string.isRequired,\r\n  handleBack: PropTypes.func.isRequired,\r\n  showReport: PropTypes.bool.isRequired,\r\n  handleModalClose: PropTypes.func.isRequired,\r\n  parameters: PropTypes.object.isRequired,\r\n};\r\nReportDetails.defaultProps = {\r\n  parameters: {},\r\n};\r\nexport default function ReportDetails({\r\n  proxyServerHost,\r\n  reportServiceHost,\r\n  filePath,\r\n  handleBack,\r\n  showReport,\r\n  handleModalClose,\r\n  parameters,\r\n}) {\r\n  const [t] = useTranslation();\r\n\r\n  return (\r\n    <Modal\r\n      style={{ padding: \"0px\" }}\r\n      size=\"fullscreen\"\r\n      open={showReport}\r\n      // onClose={handleModalClose}\r\n    >\r\n      <div>\r\n        <Header title={t(\"Header_TerminalManager\")} menu={false} />\r\n        <TMReportViewer\r\n          proxyServerHost={proxyServerHost}\r\n          reportServiceHost={reportServiceHost}\r\n          filePath={filePath}\r\n          parameters={parameters}\r\n        />\r\n        <div style={{ marginTop: \"10px\", marginLeft: \"20px\" }}>\r\n          <Button\r\n            className=\"backButton\"\r\n            onClick={handleBack}\r\n            content={t(\"Report_Back\")}\r\n          ></Button>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["COAManagementFinishedProductDetails","_ref","coaManagementFinishedProduct","listOptions","pageSize","_jsx","TranslationConsumer","children","t","_jsxs","className","Input","fluid","value","COACode","label","indicator","disabled","reserveSpace","FinishedProductCode","FinishedProductName","LOTNumber","DataTable","data","templateParameters","search","rows","searchPlaceholder","Column","field","header","Array","isArray","length","Pagination","defaultProps","COAManagementFinishedProductDetailsComposite","Component","constructor","arguments","state","isReadyToRender","showReport","handleModalBack","this","setState","handleViewFinishedProductCOAReport","undefined","reportServiceURI","axios","RestAPIs","Utilities","props","tokenDetails","tokenInfo","then","response","IsSuccess","EntityResult","componentWillReceiveProps","nextProps","selectedRow","getCOAManagementFinishedProduct","error","console","log","componentDidMount","userDetails","IsArchived","keyCode","key","KeyCodes","obj","ShareHolderCode","selectedShareholder","keyDataCode","result","details","COAManagementDetailsList","AvailableManagementParameters","forEach","tempObj","ParameterName","AnalysisParameterName","Specification","Method","SortIndex","Result","push","lodash","ErrorList","catch","renderModal","path","Constants","paramValues","Culture","UICulture","ReportDetails","handleBack","handleModalClose","proxyServerHost","reportServiceHost","filePath","parameters","render","popUpContents","fieldName","fieldValue","Date","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","LastUpdatedBy","ErrorBoundary","TMDetailsHeader","entityCode","newEntityName","genericProps","isEnterpriseNode","IsEnterpriseNode","PageAttibutes","WebPortalListPageSize","Button","onClick","onBack","content","style","textAlign","LoadingPage","message","connect","getUserDetails","TokenAuth","margin","Popup","element","Icon","marginLeft","root","name","size","position","List","map","Content","AttributeDetails","selectedAttributeList","handleCellDataEdit","attributeValidationErrors","handleAttributeDateValue","attribute","DefaultValue","convertAttributeDatetoString","chars","split","Dateval","getFullYear","getMonth","slice","getDate","DataType","toLowerCase","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","onChange","Code","INT","LONG","FLOAT","DOUBLE","BOOL","Checkbox","checked","toString","DATETIME","DatePicker","displayFormat","getCurrentDateFormat","showYearSelector","onTextChange","toLocaleString","TMReportViewer","reportUrl","beforeXhrRequestSend","s","event","prevBeforeSend","settings","beforeSend","xhr","IsWebPortalUser","withCredentials","URL_DEBUG","indexOf","onreadystatechange","readyState","status","host","hostElement","setTimeout","splitter","querySelector","param","querySelectorAll","click","Authorization","initViewer","wjViewer","prototype","load","_this","promise","_checkReportController","httpRequest","_getReportInstancesUrl","method","v","responseText","_instanceId","id","_status","loaded","_outlinesLocation","outlinesLocation","_statusLocation","statusLocation","replace","_pageSettingsLocation","pageSettingsLocation","_featuresLocation","featuresLocation","_parametersLocation","parametersLocation","resolve","reject","_getError","ReportViewer","requestHeaders","height","serviceUrl","initialized","beforeSendRequest","WjCore","useTranslation","Modal","padding","open","Header","title","menu","marginTop","getOptionsWithSelect","ddlOptions","selectOptionText","filter","option","text","unshift","language","window","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}