{"version":3,"file":"static/js/9647.8c4d6ab6.chunk.js","mappings":"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","sources":["Components/Composite/Common/TMDetailsKPILayout.jsx","Components/UIBase/Details/CaptainDetails.jsx","Components/Composite/Details/CaptainDetailsComposite.jsx","Components/UIBase/Common/AssociatedTerminals.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/functionalUtilities.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nexport default function TMDetailsKPILayout({\r\n    KPIList,\r\n    pageName,\r\n    rowHeight,\r\n    widgetHeight,\r\n    isDraggable,\r\n    isResizable,\r\n    kpiDisplayTopBreakpoint\r\n}) {\r\n    const [KPIDisplays, setKPIDisplays] = useState(1);\r\n\r\n    const kpiDiv = React.useRef(null);\r\n\r\n    const hideKpis = () => {\r\n        let currentScrollPos = window.pageYOffset;\r\n        let KPIDisplay = KPIDisplays;\r\n\r\n        // hide kpis based on div position to top of the window \r\n        if (kpiDiv.current && kpiDiv.current.getBoundingClientRect().top < kpiDisplayTopBreakpoint) {\r\n            KPIDisplay = 0;\r\n        }\r\n        // show the kpis once at top of the screen\r\n        else if (currentScrollPos === 0) {\r\n            KPIDisplay = 1\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n\r\n        setKPIDisplays(KPIDisplay);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            window.addEventListener(\"scroll\", hideKpis);\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // remove listener on unmount\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", hideKpis)\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div ref={kpiDiv}>\r\n            {KPIDisplays === 1 ? <TranslationConsumer>\r\n                {(t) => (\r\n                    <div style={{ marginTop: \"6px\" }}>\r\n                        <ErrorBoundary>\r\n                            <KPIDashboardLayout\r\n                                kpiList={KPIList}\r\n                                isDraggable={isDraggable}\r\n                                isResizable={isResizable}\r\n                                rowHeight={rowHeight}\r\n                                widgetHeight={widgetHeight}\r\n                                pageName={pageName}\r\n                            ></KPIDashboardLayout>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n\r\n                )}\r\n            </TranslationConsumer> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nTMDetailsKPILayout.propTypes = {\r\n    kpiDisplayTopBreakpoint: PropTypes.number\r\n}\r\n\r\nTMDetailsKPILayout.defaultProps = {\r\n    kpiDisplayTopBreakpoint: 100\r\n}","import React from 'react';\r\nimport { Select, Input, Accordion,InputLabel,Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { AssociatedTerminals } from \"../Common/AssociatedTerminals\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\n\r\n\r\nCaptainDetails.propTypes = {\r\n    captain: PropTypes.object.isRequired,\r\n    modCaptain:PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        languageOptions: PropTypes.array,\r\n        shareholders: PropTypes.array,\r\n        terminalCodes: PropTypes.array,\r\n    }).isRequired,\r\n    onActiveStatusChange: PropTypes.func.isRequired,\r\n    isEnterpriseNode: PropTypes.bool.isRequired,\r\n    onAllTerminalsChange: PropTypes.func.isRequired,\r\n    attributeValidationErrors: PropTypes.array.isRequired,\r\n    modAttributeMetaDataList: PropTypes.array.isRequired,\r\n    onAttributeDataChange: PropTypes.func.isRequired,\r\n    onShareholderChange: PropTypes.func.isRequired,\r\n    userType: PropTypes.string.isRequired,\r\n    onImageChange: PropTypes.func.isRequired,\r\n    handleCheckIn: PropTypes.func.isRequired,\r\n    handleCheckOut: PropTypes.func.isRequired,\r\n    handleCheckInCheckOutHistory: PropTypes.func.isRequired,\r\n    staffAttributeValidationErrors: PropTypes.array.isRequired,\r\n    modStaffAttributeMetaDataList: PropTypes.array.isRequired,\r\n    onStaffAttributeDataChange: PropTypes.func.isRequired,\r\n    visitorAttributeValidationErrors: PropTypes.array.isRequired,\r\n    modVisitorAttributeMetaDataList: PropTypes.array.isRequired,\r\n    onVisitorAttributeDataChange: PropTypes.func.isRequired,\r\n}\r\n\r\nCaptainDetails.defaultProps = {\r\n    listOptions: {\r\n        languageOptions: [],\r\n        shareholders: [],\r\n        terminalCodes: [],\r\n    },\r\n    isEnterpriseNode: false\r\n}\r\n\r\n\r\nexport function CaptainDetails({\r\n    captain,\r\n    modCaptain,\r\n    validationErrors,\r\n    onFieldChange,\r\n    listOptions,\r\n    onActiveStatusChange,\r\n    isEnterpriseNode,\r\n    onAllTerminalsChange,\r\n    modAttributeMetaDataList,\r\n    attributeValidationErrors,\r\n    onShareholderChange,\r\n    onAttributeDataChange,\r\n    userType,\r\n    onImageChange,\r\n    handleCheckIn,\r\n    handleCheckOut,\r\n    handleCheckInCheckOutHistory,\r\n    staffAttributeValidationErrors,\r\n    modStaffAttributeMetaDataList,\r\n    onStaffAttributeDataChange,\r\n    visitorAttributeValidationErrors,\r\n    modVisitorAttributeMetaDataList,\r\n    onVisitorAttributeDataChange\r\n}) {\r\n    const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n        let attributeValidation = [];\r\n        attributeValidation = attributeValidationErrors.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n        })\r\n        return attributeValidation.attributeValidationErrors;\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"detailsContainer\">\r\n                    {\r\n                        (userType === Constants.GeneralTMUserType.StaffVisitor) ?\r\n                        <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                          <InputLabel label={t(\"StaffOrVisitor_Image\")} />\r\n                          {modCaptain !== undefined &&\r\n                          modCaptain.GeneralTMUserImage !== undefined &&\r\n                          modCaptain.GeneralTMUserImage !== null &&\r\n                          modCaptain.GeneralTMUserImage.length > 0 ? (\r\n                            <img\r\n                              height=\"100\"\r\n                              width=\"100\"\r\n                              alt=\"\"\r\n                              src={\"data:image/jpg;base64,\" + modCaptain.GeneralTMUserImage}\r\n                            />\r\n                          ) : (\r\n                            <img alt=\"\" height=\"100\" width=\"100\" />\r\n                          )}\r\n                                    <br />\r\n                                    <input\r\n                              type=\"file\"\r\n                              accept=\"image/*\"\r\n                              name=\"image\"\r\n                              id=\"file\"\r\n                              onChange={onImageChange}\r\n                            />\r\n                        </div>\r\n                      </div> : (\"\")\r\n                    }\r\n             \r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input \r\n                                fluid\r\n                                value={modCaptain.Code}\r\n                                indicator=\"required\"\r\n                                disabled= {captain.Code !== \"\"}\r\n                                onChange={(data) => onFieldChange(\"Code\", data)}\r\n                                label={(userType === Constants.GeneralTMUserType.Captain) ? t(\"CaptainInfo_Code\") : t(\"Staff_visitor_code\")}\r\n                                error={t(validationErrors.Code)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input \r\n                                fluid\r\n                                value={modCaptain.Name}\r\n                                indicator=\"required\"\r\n                                onChange={(data) => onFieldChange(\"Name\", data)}\r\n                                label={(userType === Constants.GeneralTMUserType.Captain) ? t(\"CaptainInfo_CaptainName\"):t(\"Staff_visitor_name\")}\r\n                                error={t(validationErrors.Name)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        {(userType === Constants.GeneralTMUserType.StaffVisitor) ?\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                value={modCaptain.UserType}\r\n                                label={t(\"Staff_VisitorType\")}\r\n                                indicator=\"required\"\r\n                                options={[\r\n                                    { text: Constants.CommonEntityType.Staff, value: Constants.CommonEntityType.Staff },\r\n                                    { text: Constants.CommonEntityType.Visitor, value: Constants.CommonEntityType.Visitor },\r\n                                ]}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"UserType\", data);\r\n                                  }}\r\n                                error={t(validationErrors.UserType)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                                disabled= {captain.Code !== \"\"}\r\n                            />\r\n                        </div>:(\"\")\r\n                        }\r\n                        {(userType === Constants.GeneralTMUserType.Captain) ?\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                value={modCaptain.ShareholderCodes}\r\n                                label={t(\"Shareholder_Captain\")}\r\n                                indicator=\"required\"\r\n                                options = {listOptions.shareholders}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"ShareholderCodes\", data);\r\n                                  }}\r\n                                error={t(validationErrors.ShareholderCodes)}\r\n                                multiple={true}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>:(\"\")\r\n                        }\r\n                        \r\n                        {\r\n                            (userType === Constants.GeneralTMUserType.Captain) ?\r\n                            <div className= \"col-12 col-md-6 col-lg-4\">\r\n                            <Select \r\n                                fluid\r\n                                placeholder=\"Select\"\r\n                                value={modCaptain.LanguageCode}\r\n                                label={t(\"CaptainInfo_Language\")}\r\n                                indicator=\"required\"\r\n                                options={listOptions.languageOptions}\r\n                                onChange={(data) => onFieldChange(\"LanguageCode\", data)}\r\n                                error={t(validationErrors.LanguageCode)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                onResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>:(\"\")\r\n                        }\r\n                        \r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input \r\n                                fluid\r\n                                value={modCaptain.Phone === null ? \"\" : modCaptain.Phone}\r\n                                onChange={(data) => onFieldChange(\"Phone\", data)}\r\n                                label={t(\"CaptainInfo_Phone\")}\r\n                                error={t(validationErrors.Phone)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input \r\n                                fluid\r\n                                value={modCaptain.Mobile === null ? \"\" : modCaptain.Mobile}\r\n                                onChange={(data) => onFieldChange(\"Mobile\", data)}\r\n                                label={t(\"CaptainInfo_Mobile\")}\r\n                                error={t(validationErrors.Mobile)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input \r\n                                fluid\r\n                                value={modCaptain.MailID === null ? \"\" : modCaptain.MailID}\r\n                                onChange={(data) => onFieldChange(\"MailID\", data)}\r\n                                label={t(\"CaptainInfo_EMail\")}\r\n                                error={t(validationErrors.MailID)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        {\r\n                            (userType === Constants.GeneralTMUserType.StaffVisitor) ?\r\n                                     <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input \r\n                                fluid\r\n                                value={listOptions.locationCode === null ? \"\" : listOptions.locationCode}\r\n                                            label={t(\"StaffVisitor_Location\")}\r\n                                            disabled={true}\r\n                                reserveSpace={false}\r\n                            />\r\n                                    </div> : (\"\")\r\n                        }\r\n                        {\r\n                            (userType === Constants.GeneralTMUserType.StaffVisitor) ?\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input \r\n                                fluid\r\n                                value={listOptions.swipetime === null ? \"\" : listOptions.swipetime}\r\n                                            label={t(\"StaffVisitor_SwipeTime\")}\r\n                                            disabled={true}\r\n                                reserveSpace={false}\r\n                            />\r\n                                </div> : (\"\")\r\n                        }\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"CaptainInfo_Status\")}\r\n                                value={modCaptain.Active}\r\n                                options={[\r\n                                    { text: t(\"CaptainInfo_Active\"), value: true },\r\n                                    { text: t(\"CaptainInfo_Inactive\"), value: false },\r\n                                ]}\r\n                                onChange={(data) => onActiveStatusChange(data)}\r\n                                error={t(validationErrors.Active)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modCaptain.Remarks}\r\n                                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                                label={t(\"CaptainInfo_Remarks\")}\r\n                                error={t(validationErrors.Remarks)}\r\n                                indicator={modCaptain.Active !== captain.Active ? \"required\" : \"\"}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        {isEnterpriseNode &&  (userType === Constants.GeneralTMUserType.Captain) ?\r\n                            (<div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <AssociatedTerminals\r\n                                    terminalList={listOptions.terminalCodes}\r\n                                    selectedTerminal={modCaptain.TerminalCodes}\r\n                                    error={t(validationErrors.TerminalCodes)}\r\n                                    onFieldChange={onFieldChange}\r\n                                    onCheckChange={onAllTerminalsChange}\r\n                                ></AssociatedTerminals>\r\n                            </div>) : (\"\")}\r\n\r\n                            {isEnterpriseNode &&  (userType === Constants.GeneralTMUserType.StaffVisitor) ?\r\n                            (<div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                value={modCaptain.TerminalCodes}\r\n                                label={t(\"TerminalCodes\")}\r\n                                options = {Utilities.transferListtoOptions(listOptions.terminalCodes)}\r\n                                    multiple={true}\r\n                                    disabled={true}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                            </div>) : (\"\")}\r\n                    </div>\r\n\r\n                    {\r\n                        modAttributeMetaDataList.length > 0 ?\r\n                        modAttributeMetaDataList.map((attribute) =>\r\n                                <ErrorBoundary>\r\n                                    <Accordion >\r\n                                        <Accordion.Content\r\n                                            className=\"attributeAccordian\"\r\n                                            title={isEnterpriseNode ? (attribute.TerminalCode + ' - ' + t(\"Attributes_Header\")) : (t(\"Attributes_Header\"))}\r\n                                        >\r\n                                            <AttributeDetails\r\n                                                selectedAttributeList={attribute.attributeMetaDataList}\r\n                                                handleCellDataEdit={onAttributeDataChange}\r\n                                                attributeValidationErrors={handleValidationErrorFilter(attributeValidationErrors, attribute.TerminalCode)}\r\n                                            ></AttributeDetails>\r\n                                        </Accordion.Content>\r\n                                    </Accordion>\r\n                                </ErrorBoundary>\r\n                            ) : null\r\n                    }\r\n                     {\r\n                        modStaffAttributeMetaDataList.length > 0 ?\r\n                        modStaffAttributeMetaDataList.map((attribute) =>\r\n                                <ErrorBoundary>\r\n                                    <Accordion >\r\n                                        <Accordion.Content\r\n                                            className=\"attributeAccordian\"\r\n                                            title={isEnterpriseNode ? (attribute.TerminalCode + ' - ' + t(\"Attributes_Header\")) : (t(\"Attributes_Header\"))}\r\n                                        >\r\n                                            <AttributeDetails\r\n                                                selectedAttributeList={attribute.attributeMetaDataList}\r\n                                                handleCellDataEdit={onStaffAttributeDataChange}\r\n                                                attributeValidationErrors={handleValidationErrorFilter(staffAttributeValidationErrors, attribute.TerminalCode)}\r\n                                            ></AttributeDetails>\r\n                                        </Accordion.Content>\r\n                                    </Accordion>\r\n                                </ErrorBoundary>\r\n                            ) : null\r\n                    }\r\n                     {\r\n                        modVisitorAttributeMetaDataList.length > 0 ?\r\n                        modVisitorAttributeMetaDataList.map((attribute) =>\r\n                                <ErrorBoundary>\r\n                                    <Accordion >\r\n                                        <Accordion.Content\r\n                                            className=\"attributeAccordian\"\r\n                                            title={isEnterpriseNode ? (attribute.TerminalCode + ' - ' + t(\"Attributes_Header\")) : (t(\"Attributes_Header\"))}\r\n                                        >\r\n                                            <AttributeDetails\r\n                                                selectedAttributeList={attribute.attributeMetaDataList}\r\n                                                handleCellDataEdit={onVisitorAttributeDataChange}\r\n                                                attributeValidationErrors={handleValidationErrorFilter(visitorAttributeValidationErrors, attribute.TerminalCode)}\r\n                                            ></AttributeDetails>\r\n                                        </Accordion.Content>\r\n                                    </Accordion>\r\n                                </ErrorBoundary>\r\n                            ) : null\r\n                    }\r\n                     {\r\n                        (userType === Constants.GeneralTMUserType.StaffVisitor) ?\r\n                            <div className=\"row\">\r\n                                <div className=\"col col-md-8 col-lg-9 col col-xl-12\" style={{ textAlign: \"right\" }}>\r\n                                <br></br>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    onClick={handleCheckIn}\r\n                                    disabled={captain.Code === \"\" || (isEnterpriseNode && Array.isArray(modCaptain.TerminalCodes) && modCaptain.TerminalCodes.length > 0)}\r\n                                    content={t(\"StaffVisitor_checkIn\")}\r\n                                    ></Button>\r\n                                    <Button\r\n                                    type=\"primary\"\r\n                                    onClick={handleCheckOut}\r\n                                    disabled={captain.Code === \"\" || (isEnterpriseNode && Array.isArray(modCaptain.TerminalCodes) && modCaptain.TerminalCodes.length > 0)}\r\n                                    content={t(\"StaffVisitor_checkOut\")}\r\n                                    ></Button>\r\n                                     <Button\r\n                                    type=\"primary\"\r\n                                    onClick={handleCheckInCheckOutHistory}\r\n                                    disabled={captain.Code === \"\" || (isEnterpriseNode && Array.isArray(modCaptain.TerminalCodes) && modCaptain.TerminalCodes.length > 0)}\r\n                                    content={t(\"Staff_Visitor_Audit_Trail\")}\r\n                                ></Button>\r\n                                </div>\r\n                            </div> : (\"\")\r\n\r\n                    }\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { CaptainDetails } from \"../../UIBase/Details/CaptainDetails\";\r\nimport { emptyCaptain } from \"../../../JS/DefaultEntities\";\r\nimport { captainValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport PropTypes from \"prop-types\";\r\nimport lodash from \"lodash\";\r\nimport { functionGroups, fnCaptain ,fnKPIInformation,fnStaffVisitor} from \"../../../JS/FunctionGroups\";\r\nimport { captainAttributeEntity,staffAttributeEntity,visitorAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { Modal, Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport { toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiCaptainDetail, kpiStaffVisitorDetail } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass CaptainDetailsComposite extends Component {\r\n  state = {\r\n    captain: lodash.cloneDeep(emptyCaptain),\r\n    modCaptain: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      captainValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    saveEnabled: false,\r\n    attributeValidationErrors: [],\r\n    modAttributeMetaDataList: [],\r\n    languageOptions: [],\r\n    // terminalCodes: [],\r\n    attributeMetaDataList: [],\r\n    isCheckInCheckOutHistoryShow: false,\r\n    checkInCheckOutHistory: [],\r\n    staffAttributeMetaDataList: [],\r\n    staffAttributeValidationErrors: [],\r\n    visitorAttributeMetaDataList: [],\r\n    visitorAttributeValidationErrors: [],\r\n    locationCode: \"\",\r\n    swipetime: \"\",\r\n    modStaffAttributeMetaDataList: [],\r\n    modVisitorAttributeMetaDataList: [],\r\n    captainKPIList:[],\r\n    showAuthenticationLayout: false,\r\n    tempCaptain: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getLanguages();\r\n      this.getAttributes(this.props.selectedRow);\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      let CaptainCode = this.state.captain.Code\r\n      if (\r\n        CaptainCode !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getCaptain(nextProps.selectedRow);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getShareholders() {\r\n    try {\r\n      return Utilities.transferListtoOptions(\r\n        this.props.userDetails.EntityResult.ShareholderList\r\n      );\r\n    } catch (error) {\r\n      console.log(\"CaptainDetailsComposite:Error occured on getShareholders\", error);\r\n    }\r\n  }\r\n\r\n  getLanguages() {\r\n    axios(\r\n      RestAPIs.GetLanguageList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let languageOptions = [];\r\n          if (result.EntityResult !== null) {\r\n            Object.keys(result.EntityResult).forEach((key) =>\r\n              languageOptions.push({\r\n                text: result.EntityResult[key],\r\n                value: key,\r\n              })\r\n            );\r\n            this.setState({ languageOptions });\r\n          } else {\r\n            console.log(\"No languages identified.\");\r\n          }\r\n        } else {\r\n          console.log(\"Error in getLanguages:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Languages:\", error);\r\n      });\r\n  }\r\n\r\n  getAttributes(captainRow) {\r\n    try {\r\n      if (this.props.userType === Constants.GeneralTMUserType.Captain) {\r\n        axios(\r\n          RestAPIs.GetAttributesMetaData,\r\n          Utilities.getAuthenticationObjectforPost(\r\n            [captainAttributeEntity],\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        ).then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState(\r\n              {\r\n                attributeMetaDataList: lodash.cloneDeep(result.EntityResult.GeneralTMUser_CAPTAIN),\r\n                attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.GeneralTMUser_CAPTAIN\r\n                ),\r\n              },\r\n              () => this.getCaptain(captainRow)\r\n            );\r\n          } else {\r\n            console.log(\"Error in getAttributes:\");\r\n          }\r\n        });\r\n      } else {\r\n        axios(\r\n          RestAPIs.GetAttributesMetaData,\r\n          Utilities.getAuthenticationObjectforPost(\r\n            [staffAttributeEntity,visitorAttributeEntity],\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        ).then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState(\r\n              {\r\n                staffAttributeMetaDataList: lodash.cloneDeep(result.EntityResult.GeneralTMUser_STAFF),\r\n                staffAttributeValidationErrors: Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.GeneralTMUser_STAFF\r\n                ),\r\n                visitorAttributeMetaDataList: lodash.cloneDeep(result.EntityResult.GeneralTMUser_VISITOR),\r\n                visitorAttributeValidationErrors: Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.GeneralTMUser_VISITOR\r\n                ),\r\n              },\r\n              () => this.getCaptain(captainRow)\r\n            );\r\n          } else {\r\n            console.log(\"Error in getAttributes:\");\r\n          }\r\n        });\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n\r\n  createTMUser(modCaptain) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.captainCode,\r\n        value: modCaptain.Code,\r\n      },\r\n    ];\r\n\r\n    let obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.captainCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modCaptain,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: (this.props.userType === Constants.GeneralTMUserType.Captain) ? \"CaptainInfo_AddUpdateSuccessMsg\" :\r\n      (modCaptain.UserType === Constants.CommonEntityType.Staff) ? \"Staff_AddUpdateSuccessMsg\" : \"Visitor_AddUpdateSuccessMsg\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: (this.props.userType === Constants.GeneralTMUserType.Captain) ? [\"CaptainInfo_Code\"] : \r\n          (modCaptain.UserType === Constants.CommonEntityType.Staff) ?[\"StaffVisitorList_StaffCode\"]:[\"StaffVisitorList_VisitorCode\"],\r\n          keyValues: [modCaptain.Code],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.CreateTMUser,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: \r\n                Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.add,\r\n                  this.props.userType === Constants.GeneralTMUserType.Captain ? fnCaptain : fnStaffVisitor\r\n                ),\r\n                showAuthenticationLayout: false,\r\n            },\r\n            () => this.getCaptain({ Common_Code: modCaptain.Code,StaffVisitor_User_Type:modCaptain.UserType })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              this.props.userType === Constants.GeneralTMUserType.Captain ? fnCaptain : fnStaffVisitor\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in createTMUser:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modCaptain, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            this.props.userType === Constants.GeneralTMUserType.Captain ? fnCaptain : fnStaffVisitor\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modCaptain, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var modAttributeMetaDataList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.attributeMetaDataList\r\n        );\r\n        modAttributeMetaDataList = lodash.cloneDeep(\r\n          this.state.modAttributeMetaDataList\r\n        );\r\n        const attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        var modCaptain = lodash.cloneDeep(this.state.modCaptain);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.forEach(function (\r\n              attributeMetaData\r\n            ) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                var Attributevalue = modCaptain.Attributes.find(\r\n                  (captainAttribute) => {\r\n                    return captainAttribute.TerminalCode === terminal;\r\n                  }\r\n                );\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                      (x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      }\r\n                    );\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        modAttributeMetaDataList = [];\r\n        modAttributeMetaDataList = attributesTerminalsList;\r\n        modAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n          modAttributeMetaDataList\r\n        );\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  terminalSelectionChangeOnStaffAttribute(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var modStaffAttributeMetaDataList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.staffAttributeMetaDataList\r\n        );\r\n        modStaffAttributeMetaDataList = lodash.cloneDeep(\r\n          this.state.modStaffAttributeMetaDataList\r\n        );\r\n        const staffAttributeValidationErrors = lodash.cloneDeep(\r\n          this.state.staffAttributeValidationErrors\r\n        );\r\n        var modCaptain = lodash.cloneDeep(this.state.modCaptain);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = modStaffAttributeMetaDataList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.forEach(function (\r\n              attributeMetaData\r\n            ) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                var Attributevalue = modCaptain.Attributes.find(\r\n                  (captainAttribute) => {\r\n                    return captainAttribute.TerminalCode === terminal;\r\n                  }\r\n                );\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                      (x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      }\r\n                    );\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        modStaffAttributeMetaDataList = [];\r\n        modStaffAttributeMetaDataList = attributesTerminalsList;\r\n        modStaffAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n          modStaffAttributeMetaDataList\r\n        );\r\n        staffAttributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.setState({ modStaffAttributeMetaDataList, staffAttributeValidationErrors,modVisitorAttributeMetaDataList:[]});\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on terminalSelectionChangeOnStaffAttribute\",\r\n        error\r\n      );\r\n    }\r\n    \r\n  }\r\n\r\n  terminalSelectionChangeOnVisitorAttribute(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var modVisitorAttributeMetaDataList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.visitorAttributeMetaDataList\r\n        );\r\n        modVisitorAttributeMetaDataList = lodash.cloneDeep(\r\n          this.state.modVisitorAttributeMetaDataList\r\n        );\r\n        const visitorAttributeValidationErrors = lodash.cloneDeep(\r\n          this.state.visitorAttributeValidationErrors\r\n        );\r\n        var modCaptain = lodash.cloneDeep(this.state.modCaptain);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = modVisitorAttributeMetaDataList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.forEach(function (\r\n              attributeMetaData\r\n            ) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                var Attributevalue = modCaptain.Attributes.find(\r\n                  (captainAttribute) => {\r\n                    return captainAttribute.TerminalCode === terminal;\r\n                  }\r\n                );\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                      (x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      }\r\n                    );\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        modVisitorAttributeMetaDataList = [];\r\n        modVisitorAttributeMetaDataList = attributesTerminalsList;\r\n        modVisitorAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n          modVisitorAttributeMetaDataList\r\n        );\r\n        visitorAttributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.setState({ modVisitorAttributeMetaDataList, visitorAttributeValidationErrors,modStaffAttributeMetaDataList:[] });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on terminalSelectionChangeOnVisitorAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n\r\n      if (Array.isArray(attributeMetaDataList) && attributeMetaDataList.length > 0){\r\n        this.terminalSelectionChange([\r\n          attributeMetaDataList[0].TerminalCode,\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  localNodeStaffAttribute() {\r\n    try {\r\n      var staffAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.staffAttributeMetaDataList\r\n      );\r\n      if (staffAttributeMetaDataList.length > 0){\r\n        this.terminalSelectionChangeOnStaffAttribute([\r\n          staffAttributeMetaDataList[0].TerminalCode,\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on localNodeStaffAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  localNodeVisitorAttribute() {\r\n    try {\r\n      var visitorAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.visitorAttributeMetaDataList\r\n      );\r\n      if (visitorAttributeMetaDataList.length > 0){\r\n        this.terminalSelectionChangeOnVisitorAttribute([\r\n          visitorAttributeMetaDataList[0].TerminalCode,\r\n        ]);\r\n    }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on localNodeVisitorAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getCaptain(captainRow) {\r\n    emptyCaptain.LanguageCode = this.props.userDetails.EntityResult.UICulture;\r\n    emptyCaptain.ShareholderCode = this.props.selectedShareholder;\r\n    if (this.props.userType === Constants.GeneralTMUserType.Captain) {\r\n      emptyCaptain.UserType = Constants.GeneralTMUserType.Captain;\r\n      emptyCaptain.TerminalCodes =\r\n      this.props.terminalCodes.length === 1\r\n        ? [...this.props.terminalCodes]\r\n        : [];\r\n    }\r\n   \r\n\r\n    // var listOptions = lodash.cloneDeep(this.state.listOptions);\r\n    if (captainRow.Common_Code === undefined) {\r\n      this.setState(\r\n        {\r\n          captain: lodash.cloneDeep(emptyCaptain),\r\n          modCaptain: lodash.cloneDeep(emptyCaptain),\r\n          isReadyToRender: true,\r\n          modAttributeMetaDataList: [],\r\n          // listOptions,\r\n          saveEnabled: \r\n            Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n              this.props.userType  === Constants.GeneralTMUserType.Captain ? fnCaptain : fnStaffVisitor\r\n            ),\r\n          locationCode: \"\",\r\n          swipetime: \"\",\r\n          modStaffAttributeMetaDataList: [],\r\n          modVisitorAttributeMetaDataList: [],\r\n          captainKPIList:[],\r\n        },\r\n        () => {\r\n          if (this.props.userType === Constants.GeneralTMUserType.Captain) {\r\n            if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n              if (this.props.terminalCodes.length === 1) {\r\n                this.terminalSelectionChange(this.props.terminalCodes);\r\n              } else {\r\n                this.terminalSelectionChange([]);\r\n              }\r\n            } else {\r\n              this.localNodeAttribute();\r\n            }\r\n          }\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    \r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.generalTMUserCode,\r\n        value: captainRow.Common_Code,\r\n      },\r\n      {\r\n        key: KeyCodes.userType,\r\n        value: (this.props.userType === Constants.GeneralTMUserType.Captain) ?Constants.GeneralTMUserType.Captain :captainRow.StaffVisitor_User_Type,\r\n      },\r\n    ];\r\n    var obj = {\r\n      keyDataCode: KeyCodes.captainCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetGeneralTMUser,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              isReadyToRender: true,\r\n              captain: lodash.cloneDeep(result.EntityResult),\r\n              modCaptain: lodash.cloneDeep(result.EntityResult),\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                this.props.userType  === Constants.GeneralTMUserType.Captain ? fnCaptain : fnStaffVisitor\r\n              ),\r\n            },\r\n            () => {\r\n              this.getKPIList(this.props.selectedShareholder,result.EntityResult.CaptainCode)\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                if (this.props.userType === Constants.GeneralTMUserType.Captain) {\r\n                  this.terminalSelectionChange(result.EntityResult.TerminalCodes);\r\n                }\r\n                else if (result.EntityResult.UserType === Constants.CommonEntityType.Staff) {\r\n                  this.terminalSelectionChangeOnStaffAttribute(result.EntityResult.TerminalCodes);\r\n                }\r\n                else if (result.EntityResult.UserType === Constants.CommonEntityType.Visitor) {\r\n                  this.terminalSelectionChangeOnVisitorAttribute(result.EntityResult.TerminalCodes);\r\n                }\r\n               \r\n              } else {\r\n                if (this.props.userType === Constants.GeneralTMUserType.Captain) {\r\n                  this.localNodeAttribute();\r\n                }\r\n                else if (result.EntityResult.UserType === Constants.CommonEntityType.Staff) {\r\n                  this.localNodeStaffAttribute();\r\n                }\r\n                else if (result.EntityResult.UserType === Constants.CommonEntityType.Visitor) {\r\n                  this.localNodeVisitorAttribute();\r\n                }\r\n              }\r\n              if (this.props.userType !== Constants.GeneralTMUserType.Captain) {\r\n                this.getLastCheckInCheckOutInfo(result.EntityResult);\r\n              }\r\n            }\r\n          );\r\n\r\n        } else {\r\n          this.setState({\r\n            captain: lodash.cloneDeep(emptyCaptain),\r\n            modCaptain: lodash.cloneDeep(emptyCaptain),\r\n            isReadyToRender: true,\r\n            modAttributeMetaDataList: [],\r\n          });\r\n          console.log(\"Error in getCaptain:\", result.ErrorList);\r\n        }\r\n      })\r\n  }\r\n\r\n  saveCaptain = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempCaptain = lodash.cloneDeep(this.state.tempCaptain);\r\n\r\n      this.state.captain.Code === \"\"\r\n        ? this.createTMUser(tempCaptain)\r\n        : this.updateCaptain(tempCaptain);\r\n    } catch (error) {\r\n      console.log(\"PrimeMoversComposite : Error in savePrimeMover\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n     // this.setState({ saveEnabled: false });\r\n      let modCaptain = lodash.cloneDeep(this.state.modCaptain);\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let modStaffAttributeMetaDataList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modStaffAttributeMetaDataList\r\n      );\r\n      let modVisitorAttributeMetaDataList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modVisitorAttributeMetaDataList\r\n      );\r\n      if (this.validateSave(modCaptain, attributeList,modStaffAttributeMetaDataList,modVisitorAttributeMetaDataList)) {\r\n        modCaptain = this.fillAttributeData(modCaptain, attributeList,modStaffAttributeMetaDataList,modVisitorAttributeMetaDataList);\r\n        \r\n\r\n        let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      let tempCaptain = lodash.cloneDeep(modCaptain);\r\n      this.setState({ showAuthenticationLayout, tempCaptain }, () => {\r\n        if (showAuthenticationLayout === false) {\r\n          this.saveCaptain();\r\n        }\r\n    });\r\n\r\n\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"CaptainDetailsComposite:Error occured on handleSave\", error);\r\n    }\r\n  };\r\n\r\n  fillAttributeData(modCaptain, attributeList,modStaffAttributeMetaDataList,modVisitorAttributeMetaDataList) {\r\n    try {\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modStaffAttributeMetaDataList = Utilities.attributesDatatypeConversion(modStaffAttributeMetaDataList);\r\n      modVisitorAttributeMetaDataList = Utilities.attributesDatatypeConversion(modVisitorAttributeMetaDataList);\r\n      if (this.props.userType === Constants.GeneralTMUserType.Captain) {\r\n        modCaptain.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n      }\r\n      else if (modCaptain.UserType === Constants.CommonEntityType.Staff) {\r\n        modCaptain.Attributes = Utilities.fillAttributeDetails(modStaffAttributeMetaDataList);\r\n      }\r\n      else if (modCaptain.UserType === Constants.CommonEntityType.Visitor) {\r\n        modCaptain.Attributes = Utilities.fillAttributeDetails(modVisitorAttributeMetaDataList);\r\n      }\r\n      return modCaptain;\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on fillAttributeData\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  validateSave(modCaptain, attributeList,modStaffAttributeMetaDataList,modVisitorAttributeMetaDataList) {\r\n    const validationErrors = { ...this.state.validationErrors };\r\n    Object.keys(captainValidationDef).forEach(function (key) {\r\n      if (modCaptain[key] !== undefined)\r\n        validationErrors[key] = Utilities.validateField(\r\n          captainValidationDef[key],\r\n          modCaptain[key]\r\n        );\r\n    });\r\n    if (this.props.userType === Constants.GeneralTMUserType.Captain) {\r\n      if (modCaptain.ShareholderCodes === null || modCaptain.ShareholderCodes === \"\" || modCaptain.ShareholderCodes.length < 1) {\r\n        validationErrors[\"ShareholderCodes\"] = \"ShareholderList_SelectShareholder\";\r\n      }\r\n    }\r\n    else {\r\n      if (modCaptain.UserType === null || modCaptain.UserType === \"\") {\r\n        validationErrors[\"UserType\"] = \"StaffVisitor_selectUserType\";\r\n      }\r\n    }\r\n\r\n    if (modCaptain.Active !== this.state.captain.Active) {\r\n      if (modCaptain.Remarks === null || modCaptain.Remarks === \"\") {\r\n        validationErrors[\"Remarks\"] = \"CaptainInfo_RemarksRequired\";\r\n      }\r\n    }\r\n\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n    var staffAttributeValidationErrors = lodash.cloneDeep(\r\n      this.state.staffAttributeValidationErrors\r\n    );\r\n    var visitorAttributeValidationErrors = lodash.cloneDeep(\r\n      this.state.visitorAttributeValidationErrors\r\n    );\r\n\r\n    if (this.props.userType === Constants.GeneralTMUserType.Captain) {\r\n      attributeList.forEach((attribute) => {\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n            attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n              attributeValidation.attributeValidationErrors[\r\n                attributeMetaData.Code\r\n              ] = Utilities.valiateAttributeField(\r\n                attributeMetaData,\r\n                attributeMetaData.DefaultValue\r\n              );\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n    else if (modCaptain.UserType === Constants.CommonEntityType.Staff) {\r\n      modStaffAttributeMetaDataList.forEach((attribute) => {\r\n        staffAttributeValidationErrors.forEach((attributeValidation) => {\r\n          if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n            attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n              attributeValidation.attributeValidationErrors[\r\n                attributeMetaData.Code\r\n              ] = Utilities.valiateAttributeField(\r\n                attributeMetaData,\r\n                attributeMetaData.DefaultValue\r\n              );\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n    else if (modCaptain.UserType === Constants.CommonEntityType.Visitor) {\r\n      modVisitorAttributeMetaDataList.forEach((attribute) => {\r\n        visitorAttributeValidationErrors.forEach((attributeValidation) => {\r\n          if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n            attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n              attributeValidation.attributeValidationErrors[\r\n                attributeMetaData.Code\r\n              ] = Utilities.valiateAttributeField(\r\n                attributeMetaData,\r\n                attributeMetaData.DefaultValue\r\n              );\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n    this.setState({ validationErrors, attributeValidationErrors,visitorAttributeValidationErrors,staffAttributeValidationErrors });\r\n\r\n    var returnValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n    visitorAttributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n    staffAttributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n\r\n    return returnValue;\r\n  }\r\n \r\n\r\n  updateCaptain(modCaptain) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.captainCode,\r\n        value: modCaptain.Code,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.captainCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modCaptain,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: (this.props.userType === Constants.GeneralTMUserType.Captain) ? \"CaptainInfo_AddUpdateSuccessMsg\" :\r\n      (modCaptain.UserType === Constants.CommonEntityType.Staff) ? \"Staff_AddUpdateSuccessMsg\" : \"Visitor_AddUpdateSuccessMsg\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: (this.props.userType === Constants.GeneralTMUserType.Captain) ? [\"CaptainInfo_Code\"] : \r\n          (modCaptain.UserType === Constants.CommonEntityType.Staff) ?[\"StaffVisitorList_StaffCode\"]:[\"StaffVisitorList_VisitorCode\"],\r\n          keyValues: [modCaptain.Code],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateTMUser,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: \r\n                Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                  this.props.userType  === Constants.GeneralTMUserType.Captain ? fnCaptain : fnStaffVisitor\r\n                ) ,\r\n                showAuthenticationLayout: false,\r\n            },\r\n            () => this.getCaptain({ Common_Code: modCaptain.Code,StaffVisitor_User_Type:modCaptain.UserType })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: \r\n              Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                this.props.userType  === Constants.GeneralTMUserType.Captain ? fnCaptain : fnStaffVisitor\r\n              ) ,\r\n              showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in update Captain:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modCaptain, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: \r\n            Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              this.props.userType  === Constants.GeneralTMUserType.Captain ? fnCaptain : fnStaffVisitor\r\n            ),\r\n            showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modCaptain, \"modify\", notification);\r\n      });\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n      const captain = lodash.cloneDeep(this.state.captain);\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modCaptain: { ...captain },\r\n          selectedCompRow: [],\r\n          validationErrors,\r\n          modAttributeMetaDataList: [],\r\n          modStaffAttributeMetaDataList: [],\r\n          modVisitorAttributeMetaDataList:[]\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            if (this.props.userType === Constants.GeneralTMUserType.Captain) {\r\n              this.terminalSelectionChange(captain.TerminalCodes);\r\n            }\r\n            else if (captain.UserType === Constants.CommonEntityType.Staff) {\r\n              this.terminalSelectionChangeOnStaffAttribute(captain.TerminalCodes);\r\n            }\r\n            else if (captain.UserType === Constants.CommonEntityType.Visitor) {\r\n              this.terminalSelectionChangeOnVisitorAttribute(captain.TerminalCodes);\r\n            }\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            if (this.props.userType === Constants.GeneralTMUserType.Captain) {\r\n              this.localNodeAttribute();\r\n            }\r\n            else if (captain.UserType === Constants.CommonEntityType.Staff) {\r\n              this.localNodeStaffAttribute();\r\n            }\r\n            else if (captain.UserType === Constants.CommonEntityType.Visitor) {\r\n              this.localNodeVisitorAttribute();\r\n            }\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      var staffAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.staffAttributeMetaDataList\r\n      );\r\n      var visitorAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.visitorAttributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(attributeMetaDataList),\r\n        staffAttributeValidationErrors: Utilities.getAttributeInitialValidationErrors(staffAttributeMetaDataList),\r\n        visitorAttributeValidationErrors: Utilities.getAttributeInitialValidationErrors(visitorAttributeMetaDataList),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"handleAttributeValidationError:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modCaptain = lodash.cloneDeep(this.state.modCaptain);\r\n\r\n      modCaptain[propertyName] = data;\r\n      this.setState({ modCaptain });\r\n\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (captainValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          captainValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n\r\n      if (propertyName === \"TerminalCodes\") {\r\n        if (this.props.userType === Constants.GeneralTMUserType.Captain) {\r\n          this.terminalSelectionChange(data);\r\n        }\r\n        else if (modCaptain.UserType === Constants.CommonEntityType.Staff) {\r\n          this.terminalSelectionChangeOnStaffAttribute(data);\r\n        }\r\n        else if (modCaptain.UserType === Constants.CommonEntityType.Visitor) {\r\n          this.terminalSelectionChangeOnVisitorAttribute(data);\r\n        }\r\n      }\r\n      else if (propertyName === \"UserType\") {\r\n        if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n          if (data === Constants.CommonEntityType.Staff) {\r\n            this.terminalSelectionChangeOnStaffAttribute(modCaptain.TerminalCodes);\r\n          }\r\n          else if (data === Constants.CommonEntityType.Visitor) {\r\n            this.terminalSelectionChangeOnVisitorAttribute(modCaptain.TerminalCodes);\r\n          }\r\n        }\r\n        else {\r\n          if (data === Constants.CommonEntityType.Staff) {\r\n            this.localNodeStaffAttribute();\r\n          }\r\n          else if (data === Constants.CommonEntityType.Visitor) {\r\n            this.localNodeVisitorAttribute();\r\n          }\r\n        }\r\n        this.handleResetAttributeValidationError();\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleAllTerminalsChange = (checked) => {\r\n    try {\r\n      var terminalCodes = [...this.props.terminalCodes];\r\n      var modCaptain = lodash.cloneDeep(this.state.modCaptain);\r\n      if (checked) modCaptain.TerminalCodes = [...terminalCodes];\r\n      else modCaptain.TerminalCodes = [];\r\n      this.setState({ modCaptain: modCaptain });\r\n      if (this.props.userType === Constants.GeneralTMUserType.Captain) {\r\n        this.terminalSelectionChange(modCaptain.TerminalCodes);\r\n      }\r\n      else if (modCaptain.UserType !== \"\" && modCaptain.UserType === Constants.CommonEntityType.Staff) {\r\n        this.terminalSelectionChangeOnStaffAttribute(modCaptain.TerminalCodes);\r\n      }\r\n      else if (modCaptain.UserType !== \"\" && modCaptain.UserType === Constants.CommonEntityType.Visitor) {\r\n        this.terminalSelectionChangeOnVisitorAttribute(modCaptain.TerminalCodes);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on handleAllTerminasChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modCaptain = lodash.cloneDeep(this.state.modCaptain);\r\n      modCaptain.Active = value;\r\n      if (modCaptain.Active !== this.state.captain.Active)\r\n        modCaptain.Remarks = \"\";\r\n      this.setState({ modCaptain });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[\r\n            attribute.Code\r\n          ] = Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors,modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on handleAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleStaffAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modStaffAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modStaffAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modStaffAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const staffAttributeValidationErrors = lodash.cloneDeep(\r\n        this.state.staffAttributeValidationErrors\r\n      );\r\n\r\n      staffAttributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[\r\n            attribute.Code\r\n          ] = Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ staffAttributeValidationErrors,modStaffAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on handleStaffAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleVisitorAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modVisitorAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modVisitorAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modVisitorAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const visitorAttributeValidationErrors = lodash.cloneDeep(\r\n        this.state.visitorAttributeValidationErrors\r\n      );\r\n\r\n      visitorAttributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[\r\n            attribute.Code\r\n          ] = Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ visitorAttributeValidationErrors,modVisitorAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on handleVisitorAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  \r\n\r\n  handleImageChange = (event) => {\r\n    try {\r\n      var modCaptain = lodash.cloneDeep(this.state.modCaptain);\r\n\r\n      if (\r\n        event.target.files[0].type.includes(\"image\") &&\r\n        event.target.files[0].size <= 500 * 1024\r\n      ) {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(event.target.files[0]);\r\n        reader.onloadend = () => {\r\n          modCaptain.GeneralTMUserImage = reader.result.split(\";base64,\")[1];\r\n          this.setState({ modCaptain });\r\n        };\r\n      } else {\r\n        console.log(\"wrong type of image\");\r\n        event.target.value = null;\r\n        modCaptain.GeneralTMUserImage = null;\r\n        this.setState({ modCaptain });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on handleImageChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleCheckIn = () => {\r\n    try {\r\n      var modCaptain = lodash.cloneDeep(this.state.modCaptain);\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message:\"StaffVisitor_CheckedInStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields:  (modCaptain.UserType === Constants.CommonEntityType.Staff) ?[\"StaffVisitorList_StaffCode\"]:[\"StaffVisitorList_VisitorCode\"],\r\n            keyValues: [modCaptain.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.StaffVisitorCheckInCheckOut +\r\n        \"?StaffVisitorCode=\" + modCaptain.Code +\r\n        \"&UserType=\" + modCaptain.UserType +\r\n        \"&IsCheckIn=\" + true,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult.SwipeTime !== undefined && result.EntityResult.SwipeTime !== \"\") {\r\n              var swipetime = new Date(result.EntityResult.SwipeTime).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(result.EntityResult.SwipeTime).toLocaleTimeString()\r\n            }\r\n            this.setState({locationCode : result.EntityResult.LocationCode,swipetime: swipetime})\r\n          }\r\n          else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on handleCheckIn\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleCheckOut = () => {\r\n    try {\r\n      var modCaptain = lodash.cloneDeep(this.state.modCaptain);\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"StaffVisitor_CheckedOutStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields:  (modCaptain.UserType === Constants.CommonEntityType.Staff) ?[\"StaffVisitorList_StaffCode\"]:[\"StaffVisitorList_VisitorCode\"],\r\n            keyValues: [modCaptain.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.StaffVisitorCheckInCheckOut +\r\n        \"?StaffVisitorCode=\" + modCaptain.Code +\r\n        \"&UserType=\" + modCaptain.UserType +\r\n        \"&IsCheckIn=\" + false,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult.SwipeTime !== undefined && result.EntityResult.SwipeTime !== \"\") {\r\n              var swipetime = new Date(result.EntityResult.SwipeTime).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(result.EntityResult.SwipeTime).toLocaleTimeString()\r\n            }\r\n           \r\n            this.setState({locationCode : result.EntityResult.LocationCode,swipetime:swipetime })\r\n          }\r\n          else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n      \r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on handleCheckOut\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleCheckInCheckOutHistory = () => {\r\n    try {\r\n      var modCaptain = lodash.cloneDeep(this.state.modCaptain);\r\n      axios(\r\n        RestAPIs.GetAllCheckInCheckOut +\r\n        \"?staffVisitorCode=\" + modCaptain.Code +\r\n        \"&staffVisitorType=\" + modCaptain.UserType,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            result.EntityResult.Table.forEach((key) => {\r\n              if (key.SwipeTime !== undefined && key.SwipeTime !== null) {\r\n                key.SwipeTime = new Date(key.SwipeTime).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(key.SwipeTime).toLocaleTimeString()\r\n              }\r\n            });\r\n\r\n            this.setState({ checkInCheckOutHistory: result.EntityResult.Table,isCheckInCheckOutHistoryShow:true});\r\n          } else {\r\n            this.setState({ checkInCheckOutHistory: []});\r\n            console.log(\"Error in handleCheckInCheckOutHistory:\", result.ErrorList);\r\n          }\r\n        })\r\n    } catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on handleCheckInCheckOutHistory\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  checkInCheckOutHistory = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isCheckInCheckOutHistoryShow} className=\"marineModalPrint\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h5>{this.state.modCaptain.Code}</h5>\r\n                <div className=\"col-12 detailsTable\">\r\n                  <DataTable\r\n                    data={this.state.checkInCheckOutHistory}\r\n                  >\r\n                     <DataTable.Column\r\n                                initialWidth=\"20%\"\r\n                                className=\"compColHeight\"\r\n                                key=\"LocationCode\"\r\n                                field=\"LocationCode\"\r\n                                header={t(\"Location_Code\")}\r\n                    ></DataTable.Column>\r\n                     <DataTable.Column\r\n                                initialWidth=\"20%\"\r\n                                className=\"compColHeight\"\r\n                                key=\"PIN\"\r\n                                field=\"PIN\"\r\n                                header={t(\"DriverList_AccessCard\")}\r\n                    ></DataTable.Column>\r\n                     <DataTable.Column\r\n                                initialWidth=\"30%\"\r\n                                className=\"compColHeight\"\r\n                                key=\"SwipeTime\"\r\n                                field=\"SwipeTime\"\r\n                                header={t(\"TemporaryCard_CardSwipeTime\")}\r\n                    ></DataTable.Column>\r\n                     <DataTable.Column\r\n                                initialWidth=\"30%\"\r\n                                className=\"compColHeight\"\r\n                                key=\"LastUpdatedBy\"\r\n                                field=\"LastUpdatedBy\"\r\n                                header={t(\"ViewEAAuditTrail_LastUpdatedBy\")}\r\n                    ></DataTable.Column>\r\n                     {Array.isArray(this.state.checkInCheckOutHistory) &&\r\n                                    this.state.checkInCheckOutHistory.length > this.props.userDetails.EntityResult.PageAttibutes\r\n                                    .WebPortalListPageSize ? (\r\n                      <DataTable.Pagination />) : (\"\")}\r\n                  </DataTable>\r\n                </div>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"ReportConfiguration_btnClose\")}\r\n                onClick={() => {\r\n                  this.setState({ isCheckInCheckOutHistoryShow: false });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  getLastCheckInCheckOutInfo(modCaptain) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLastCheckInCheckOutInfo +\r\n        \"?StaffVisitorCode=\" + modCaptain.Code +\r\n        \"&UserType=\" + modCaptain.UserType,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult !== null) {\r\n              if (result.EntityResult.SwipeTime !== null && result.EntityResult.SwipeTime !== undefined && result.EntityResult.SwipeTime !== \"\") {\r\n                var swipetime = new Date(result.EntityResult.SwipeTime).toLocaleDateString() +\r\n                \" \" +\r\n                new Date(result.EntityResult.SwipeTime).toLocaleTimeString()\r\n              }\r\n              this.setState({locationCode : result.EntityResult.LocationCode,swipetime:swipetime })\r\n            }\r\n          }\r\n        })\r\n    }catch (error) {\r\n      console.log(\r\n        \"CaptainDetailsComposite:Error occured on getLastCheckInCheckOutInfo\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  getKPIList(shareholder,captainCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      let objKPIRequestData = {\r\n        PageName:\r\n          this.props.userType === Constants.GeneralTMUserType.Captain\r\n            ? kpiCaptainDetail\r\n            : kpiStaffVisitorDetail,\r\n        InputParameters: [ { key: \"CaptainCode\", value: captainCode }],\r\n      };\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              captainKPIList: result.EntityResult.ListKPIDetails,\r\n            });\r\n          } else {\r\n            this.setState({ captainKPIList: [] });\r\n            console.log(\"Error in captain KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Captain KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  getFunctionGroupName() {\r\n    return this.props.userType === Constants.GeneralTMUserType.Captain? fnCaptain: fnStaffVisitor\r\n   };\r\n\r\n  render() {\r\n    const listOptions = {\r\n      shareholders: this.getShareholders(),\r\n      languageOptions: this.state.languageOptions,\r\n      terminalCodes: this.props.terminalCodes,\r\n      locationCode: this.state.locationCode,\r\n      swipetime: this.state.swipetime,\r\n    };\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"CaptainInfo_LastUpdated\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modCaptain.LastUpdated\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modCaptain.LastUpdated\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"CaptainInfo_CreatedTime\",\r\n        fieldValue:\r\n          new Date(this.state.modCaptain.Created).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modCaptain.Created).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"CaptainInfo_LastActive\",\r\n        fieldValue:this.state.modCaptain.LastActive !== undefined &&\r\n          this.state.modCaptain.LastActive !== null\r\n            ?\r\n          new Date(this.state.modCaptain.LastActive).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modCaptain.LastActive).toLocaleTimeString():\"\",\r\n      },\r\n       {\r\n        fieldName: \"CaptainInfo_LastReported\",\r\n        fieldValue: this.state.modCaptain.LastReportTime !== undefined &&\r\n          this.state.modCaptain.LastReportTime !== null\r\n            ?\r\n          new Date(this.state.modCaptain.LastReportTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modCaptain.LastReportTime).toLocaleTimeString():\"\",\r\n      },\r\n    ];\r\n\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.captain.Code}\r\n            newEntityName={(this.props.userType === Constants.GeneralTMUserType.Captain) ? \"CaptainInfo_NewCaptain\":\"StaffOrVisitor_NewStaffOrVisitor\"}\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <TMDetailsKPILayout KPIList={this.state.captainKPIList}> </TMDetailsKPILayout>\r\n        <ErrorBoundary>\r\n          <CaptainDetails\r\n            captain={this.state.captain}\r\n            modCaptain={this.state.modCaptain}\r\n            listOptions={listOptions}\r\n            validationErrors={this.state.validationErrors}\r\n            onFieldChange={this.handleChange}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            onAllTerminalsChange={this.handleAllTerminalsChange}\r\n            // onShareholderChange={this.handleshareholderChange}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            onAttributeDataChange={this.handleAttributeDataChange} \r\n            userType={this.props.userType}\r\n            onImageChange={this.handleImageChange}\r\n            handleCheckIn={this.handleCheckIn}\r\n            handleCheckOut={this.handleCheckOut}\r\n            handleCheckInCheckOutHistory={this.handleCheckInCheckOutHistory}\r\n            staffAttributeValidationErrors={this.state.staffAttributeValidationErrors}\r\n            modStaffAttributeMetaDataList={this.state.modStaffAttributeMetaDataList}\r\n            onStaffAttributeDataChange={this.handleStaffAttributeDataChange}\r\n            visitorAttributeValidationErrors={this.state.visitorAttributeValidationErrors}\r\n            modVisitorAttributeMetaDataList={this.state.modVisitorAttributeMetaDataList}\r\n            onVisitorAttributeDataChange={this.handleVisitorAttributeDataChange}\r\n          ></CaptainDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.captain.Code === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={this.getFunctionGroupName()}\r\n            handleOperation={this.saveCaptain}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n        {this.state.isCheckInCheckOutHistoryShow ? this.checkInCheckOutHistory() : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CaptainDetailsComposite);\r\n\r\nCaptainDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n  userType:PropTypes.string.isRequired\r\n};","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Select, Checkbox } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nAssociatedTerminals.propTypes = {\r\n  terminalList: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  selectedTerminal: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  validationError: PropTypes.string,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onCheckChange: PropTypes.func.isRequired,\r\n};\r\nAssociatedTerminals.defaultProps = {\r\n  terminalList: [],\r\n  selectedTerminal: [],\r\n  validationError: \"\",\r\n};\r\nexport function AssociatedTerminals({\r\n  terminalList,\r\n  selectedTerminal,\r\n  validationError,\r\n  onFieldChange,\r\n  onCheckChange,\r\n}) {\r\n  //console.log(\"component terminalList\", terminalList);\r\n  if (selectedTerminal === null) selectedTerminal = [];\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <div style={{ width: \"80%\" }}>\r\n            <Select\r\n              fluid\r\n              placeholder={t(\"Common_Select\")}\r\n              label={t(\"TerminalCodes\")}\r\n              value={selectedTerminal}\r\n              multiple={true}\r\n              options={Utilities.transferListtoOptions(terminalList)}\r\n              onChange={(data) => onFieldChange(\"TerminalCodes\", data)}\r\n              error={t(validationError)}\r\n              disabled={terminalList.length === 0}\r\n              reserveSpace={false}\r\n            />\r\n          </div>\r\n          <div className=\"ddlSelectAll\">\r\n            <Checkbox\r\n              label={t(\"Common_All\")}\r\n              checked={\r\n                Array.isArray(selectedTerminal) &&\r\n                selectedTerminal.length === terminalList.length\r\n              }\r\n              onChange={(checked) => onCheckChange(checked)}\r\n            ></Checkbox>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["TMDetailsKPILayout","_ref","KPIList","pageName","rowHeight","widgetHeight","isDraggable","isResizable","kpiDisplayTopBreakpoint","KPIDisplays","setKPIDisplays","useState","kpiDiv","React","hideKpis","currentScrollPos","window","pageYOffset","KPIDisplay","current","getBoundingClientRect","top","useEffect","addEventListener","removeEventListener","_jsx","ref","children","TranslationConsumer","t","style","marginTop","ErrorBoundary","KPIDashboardLayout","kpiList","defaultProps","CaptainDetails","captain","modCaptain","validationErrors","onFieldChange","listOptions","onActiveStatusChange","isEnterpriseNode","onAllTerminalsChange","modAttributeMetaDataList","attributeValidationErrors","onShareholderChange","onAttributeDataChange","userType","onImageChange","handleCheckIn","handleCheckOut","handleCheckInCheckOutHistory","staffAttributeValidationErrors","modStaffAttributeMetaDataList","onStaffAttributeDataChange","visitorAttributeValidationErrors","modVisitorAttributeMetaDataList","onVisitorAttributeDataChange","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","_jsxs","className","Constants","StaffVisitor","InputLabel","label","undefined","GeneralTMUserImage","length","height","width","alt","src","type","accept","name","id","onChange","Input","fluid","value","Code","indicator","disabled","data","Captain","error","reserveSpace","Name","Select","placeholder","UserType","options","text","Staff","Visitor","search","noResultsMessage","ShareholderCodes","shareholders","multiple","LanguageCode","languageOptions","onResultsMessage","Phone","Mobile","MailID","locationCode","swipetime","Active","Remarks","AssociatedTerminals","terminalList","terminalCodes","selectedTerminal","TerminalCodes","onCheckChange","Utilities","map","attribute","Accordion","Content","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","handleCellDataEdit","textAlign","Button","onClick","Array","isArray","content","CaptainDetailsComposite","Component","constructor","arguments","state","lodash","emptyCaptain","captainValidationDef","isReadyToRender","saveEnabled","isCheckInCheckOutHistoryShow","checkInCheckOutHistory","staffAttributeMetaDataList","visitorAttributeMetaDataList","captainKPIList","showAuthenticationLayout","tempCaptain","saveCaptain","this","setState","createTMUser","updateCaptain","console","log","handleSave","attributeList","validateSave","fillAttributeData","props","userDetails","EntityResult","IsWebPortalUser","handleReset","Object","keys","forEach","key","selectedCompRow","IsEnterpriseNode","terminalSelectionChange","terminalSelectionChangeOnStaffAttribute","terminalSelectionChangeOnVisitorAttribute","handleResetAttributeValidationError","localNodeAttribute","localNodeStaffAttribute","localNodeVisitorAttribute","handleChange","propertyName","handleAllTerminalsChange","checked","handleActiveStatusChange","handleAttributeDataChange","matchedAttributes","matchedAttributesList","filter","modattribute","DefaultValue","handleStaffAttributeDataChange","handleVisitorAttributeDataChange","handleImageChange","event","target","files","includes","size","reader","FileReader","readAsDataURL","onloadend","result","split","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","axios","RestAPIs","tokenDetails","tokenInfo","then","response","IsSuccess","SwipeTime","Date","toLocaleDateString","toLocaleTimeString","LocationCode","ErrorList","toast","NotifyEvent","notificationMessage","autoClose","Table","Modal","open","DataTable","Column","initialWidth","field","header","PageAttibutes","WebPortalListPageSize","Pagination","Footer","handleAuthenticationClose","componentDidMount","IsArchived","getLanguages","getAttributes","selectedRow","componentWillReceiveProps","nextProps","Common_Code","getCaptain","getShareholders","ShareholderList","push","catch","captainRow","captainAttributeEntity","GeneralTMUser_CAPTAIN","staffAttributeEntity","visitorAttributeEntity","GeneralTMUser_STAFF","GeneralTMUser_VISITOR","keyCode","KeyCodes","obj","ShareHolderCode","selectedShareholder","keyDataCode","Entity","FunctionsList","functionGroups","add","fnCaptain","fnStaffVisitor","StaffVisitor_User_Type","onSaved","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","Attributes","captainAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","UICulture","ShareholderCode","modify","getKPIList","CaptainCode","getLastCheckInCheckOutInfo","returnValue","values","every","shareholder","captainCode","view","fnKPIInformation","objKPIRequestData","PageName","kpiCaptainDetail","kpiStaffVisitorDetail","InputParameters","ListKPIDetails","getFunctionGroupName","render","popUpContents","fieldName","fieldValue","LastUpdated","Created","LastActive","LastReportTime","TMDetailsHeader","entityCode","newEntityName","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","validationError","display","justifyContent","Checkbox","margin","Popup","element","Icon","marginLeft","root","position","List","float","handleAttributeDateValue","convertAttributeDatetoString","chars","Dateval","getFullYear","getMonth","slice","getDate","DataType","toLowerCase","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","INT","LONG","FLOAT","DOUBLE","BOOL","toString","DATETIME","DatePicker","displayFormat","getCurrentDateFormat","showYearSelector","onTextChange","toLocaleString","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","weighBridgeAttributeEntity","deuAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","getOptionsWithSelect","ddlOptions","selectOptionText","option","unshift","language","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}