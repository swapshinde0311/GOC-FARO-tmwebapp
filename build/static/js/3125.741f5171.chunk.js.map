{"version":3,"file":"static/js/3125.741f5171.chunk.js","mappings":"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","sources":["Components/Composite/Common/TMDetailsKPILayout.jsx","Components/UIBase/Details/AccessIDManagementDetails.jsx","Components/UIBase/Details/AccessIDManagementSectionDetails.jsx","Components/Composite/Details/AccessIDManagementDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/DateFieldsInEntities.js","JS/functionalUtilities.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nexport default function TMDetailsKPILayout({\r\n    KPIList,\r\n    pageName,\r\n    rowHeight,\r\n    widgetHeight,\r\n    isDraggable,\r\n    isResizable,\r\n    kpiDisplayTopBreakpoint\r\n}) {\r\n    const [KPIDisplays, setKPIDisplays] = useState(1);\r\n\r\n    const kpiDiv = React.useRef(null);\r\n\r\n    const hideKpis = () => {\r\n        let currentScrollPos = window.pageYOffset;\r\n        let KPIDisplay = KPIDisplays;\r\n\r\n        // hide kpis based on div position to top of the window \r\n        if (kpiDiv.current && kpiDiv.current.getBoundingClientRect().top < kpiDisplayTopBreakpoint) {\r\n            KPIDisplay = 0;\r\n        }\r\n        // show the kpis once at top of the screen\r\n        else if (currentScrollPos === 0) {\r\n            KPIDisplay = 1\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n\r\n        setKPIDisplays(KPIDisplay);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            window.addEventListener(\"scroll\", hideKpis);\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // remove listener on unmount\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", hideKpis)\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div ref={kpiDiv}>\r\n            {KPIDisplays === 1 ? <TranslationConsumer>\r\n                {(t) => (\r\n                    <div style={{ marginTop: \"6px\" }}>\r\n                        <ErrorBoundary>\r\n                            <KPIDashboardLayout\r\n                                kpiList={KPIList}\r\n                                isDraggable={isDraggable}\r\n                                isResizable={isResizable}\r\n                                rowHeight={rowHeight}\r\n                                widgetHeight={widgetHeight}\r\n                                pageName={pageName}\r\n                            ></KPIDashboardLayout>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n\r\n                )}\r\n            </TranslationConsumer> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nTMDetailsKPILayout.propTypes = {\r\n    kpiDisplayTopBreakpoint: PropTypes.number\r\n}\r\n\r\nTMDetailsKPILayout.defaultProps = {\r\n    kpiDisplayTopBreakpoint: 100\r\n}","import React from \"react\";\r\nimport {\r\n  Accordion,\r\n  Input,\r\n  DatePicker,\r\n  Select,\r\n  Checkbox,\r\n  Button,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\nimport { AttributeDetails } from \"./AttributeDetails\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\n\r\nAccessIDManagementDetails.propTypes = {\r\n  accessCard: PropTypes.object.isRequired,\r\n  modAccessCard: PropTypes.object.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    cardTypes: PropTypes.array,\r\n    CarrierCompanies: PropTypes.array,\r\n    EntityTypes: PropTypes.array,\r\n  }).isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n  onFASCNBlur: PropTypes.func.isRequired,\r\n  isTWICEnable: PropTypes.bool,\r\n\r\n  modAttributeMetaDataList: PropTypes.array.isRequired,\r\n  onAttributeDataChange: PropTypes.func.isRequired,\r\n  attributeValidationErrors: PropTypes.array.isRequired,\r\n  isEnterpriseNode: PropTypes.bool.isRequired,\r\n};\r\n\r\nAccessIDManagementDetails.defaultProps = {};\r\n\r\nexport function AccessIDManagementDetails({\r\n  accessCard,\r\n  modAccessCard,\r\n  validationErrors,\r\n  listOptions,\r\n  onFieldChange,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n  onFASCNBlur,\r\n  isTWICEnable,\r\n  modAttributeMetaDataList,\r\n  onAttributeDataChange,\r\n  attributeValidationErrors,\r\n  isEnterpriseNode,\r\n}) {\r\n  const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n    let attributeValidation = [];\r\n    attributeValidation = attributeValidationErrors.find(\r\n      (selectedAttribute) => {\r\n        return selectedAttribute.TerminalCode === terminal;\r\n      }\r\n    );\r\n    return attributeValidation.attributeValidationErrors;\r\n  };\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modAccessCard.PIN === \"\" ? \"\" : modAccessCard.PIN}\r\n                label={t(\"AccessCardInfo_x_IDCode\")}\r\n                indicator=\"required\"\r\n                disabled={accessCard.PIN !== \"\"}\r\n                onChange={(data) => onFieldChange(\"PIN\", data)}\r\n                error={t(validationErrors.PIN)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                value={modAccessCard.CardType}\r\n                label={t(\"AccessCardList_x_ID_Category\")}\r\n                indicator=\"required\"\r\n                options={Utilities.transferListtoOptions(listOptions.cardTypes)}\r\n                onChange={(data) => onFieldChange(\"CardType\", data)}\r\n                error={t(validationErrors.CardType)}\r\n                disabled={accessCard.CardType !== null}\r\n                multiple={false}\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n              />\r\n            </div>\r\n            {modAccessCard.CardType === \"ELECTRONIC\" &&\r\n            isTWICEnable === true ? (\r\n              <div\r\n                className=\"col-12 col-md-6 col-lg-4\"\r\n                style={{ marginTop: 20 }}\r\n              >\r\n                <Checkbox\r\n                  disabled={accessCard.PIN !== \"\"}\r\n                  label={t(\"AccessCardInfo_IsTWICCard\")}\r\n                  checked={modAccessCard.ISTWICCARD}\r\n                  onChange={(checked) => onFieldChange(\"ISTWICCARD\", checked)}\r\n                />\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {modAccessCard.ISTWICCARD === true ? (\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  onBlur={onFASCNBlur}\r\n                  value={modAccessCard.FASCN === \"\" ? \"\" : modAccessCard.FASCN}\r\n                  label={t(\"AccessCardInfo_FASCN\")}\r\n                  indicator=\"required\"\r\n                  disabled={accessCard.PIN !== \"\"}\r\n                  onChange={(data) => onFieldChange(\"FASCN\", data)}\r\n                  error={t(validationErrors.FASCN)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                label={t(\"AccessCardInfo_x_CardUsageStatus\")}\r\n                value={\r\n                  modAccessCard.CardStatus === null\r\n                    ? \"\"\r\n                    : modAccessCard.CardStatus\r\n                }\r\n                disabled={true}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                label={t(\"AccessCardInfo_Description\")}\r\n                value={\r\n                  modAccessCard.Description === null\r\n                    ? \"\"\r\n                    : modAccessCard.Description\r\n                }\r\n                onChange={(data) => onFieldChange(\"Description\", data)}\r\n                error={t(validationErrors.Description)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <DatePicker\r\n                fluid\r\n                value={\r\n                  modAccessCard.ExpiryDate === null\r\n                    ? \"\"\r\n                    : new Date(modAccessCard.ExpiryDate)\r\n                }\r\n                label={t(\"AccessCardInfo_x_CardExpiry\")}\r\n                disablePast={true}\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"ExpiryDate\", data)}\r\n                displayFormat={getCurrentDateFormat()}\r\n                error={t(validationErrors.ExpiryDate)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-12 col-md-6 col-lg-4\" style={{ marginTop: 20 }}>\r\n              <Checkbox\r\n                label={t(\"AccessCardInfo_x_Locked\")}\r\n                checked={modAccessCard.Locked}\r\n                disabled={\r\n                  accessCard.PIN === \"\" || accessCard.CardStatus === \"EXPIRED\"\r\n                }\r\n                onChange={(checked) => onFieldChange(\"Locked\", checked)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  modAccessCard.Remarks === null ? \"\" : modAccessCard.Remarks\r\n                }\r\n                label={t(\"AccessCardInfo_Remarks\")}\r\n                disabled={accessCard.PIN === \"\"}\r\n                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                indicator={modAccessCard.Locked !== accessCard.Locked ? \"required\" : \"\"}\r\n                error={t(validationErrors.Remarks)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                label={t(\"AccessCardInfoDetails_LastLocking\")}\r\n                value={\r\n                  accessCard.PIN === \"\"\r\n                    ? \"\"\r\n                    : modAccessCard.LastLockingTime === null\r\n                    ? \"\"\r\n                    : new Date(modAccessCard.LastLockingTime).toLocaleString()\r\n                }\r\n                disabled={true}\r\n              />\r\n            </div>\r\n          </div>\r\n          {modAttributeMetaDataList.length > 0 && !isEnterpriseNode\r\n            ? modAttributeMetaDataList.map((attire) => (\r\n                <ErrorBoundary>\r\n                  <Accordion>\r\n                    <Accordion.Content\r\n                      className=\"attributeAccordian\"\r\n                      title={\r\n                        isEnterpriseNode\r\n                          ? attire.TerminalCode + \" - \" + t(\"Attributes_Header\")\r\n                          : t(\"Attributes_Header\")\r\n                      }\r\n                    >\r\n                      <AttributeDetails\r\n                        selectedAttributeList={attire.attributeMetaDataList}\r\n                        handleCellDataEdit={(attribute, value) => {\r\n                          onAttributeDataChange(attribute, value);\r\n                        }}\r\n                        attributeValidationErrors={handleValidationErrorFilter(\r\n                          attributeValidationErrors,\r\n                          attire.TerminalCode\r\n                        )}\r\n                      ></AttributeDetails>\r\n                    </Accordion.Content>\r\n                  </Accordion>\r\n                </ErrorBoundary>\r\n              ))\r\n            : null}\r\n          <div className=\"detailsButton\">\r\n            <Button\r\n              content={t(\"LookUpData_btnReset\")}\r\n              className=\"cancelButton\"\r\n              onClick={handleReset}\r\n            ></Button>\r\n            <Button\r\n              content={t(\"Save\")}\r\n              disabled={!saveEnabled}\r\n              onClick={handleSave}\r\n            ></Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Input, Select, Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\n\r\nAccessIDManagementSectionDetails.propTypes = {\r\n  accessCard: PropTypes.object.isRequired,\r\n  modAccessCard: PropTypes.object.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    cardTypes: PropTypes.array,\r\n    CarrierCompanies: PropTypes.array,\r\n    EntityTypes: PropTypes.array,\r\n    EntityValues: PropTypes.array,\r\n  }).isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onChangePasswordClicked: PropTypes.func.isRequired,\r\n  onIssueClicked: PropTypes.func.isRequired,\r\n  onActivateClick: PropTypes.func.isRequired,\r\n  onRevokeClick: PropTypes.func.isRequired,\r\n  onResetPasswordClick: PropTypes.func.isRequired,\r\n  handleBack: PropTypes.func.isRequired,\r\n  issueEnabled: PropTypes.bool,\r\n  activateEnable: PropTypes.bool,\r\n  revokeEnable: PropTypes.bool,\r\n  passwordEnable: PropTypes.bool,\r\n  CarrierCodeEnable: PropTypes.bool,\r\n};\r\n\r\nAccessIDManagementSectionDetails.defaultProps = {};\r\n\r\nexport function AccessIDManagementSectionDetails({\r\n  accessCard,\r\n  modAccessCard,\r\n  validationErrors,\r\n  listOptions,\r\n  onFieldChange,\r\n  onChangePasswordClicked,\r\n  onIssueClicked,\r\n  onActivateClick,\r\n  onRevokeClick,\r\n  onResetPasswordClick,\r\n  handleBack,\r\n  issueEnabled,\r\n  activateEnable,\r\n  revokeEnable,\r\n  passwordEnable,\r\n  CarrierCodeEnable,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col col-md-8 col-lg-9 col col-xl-9\">\r\n              <h4>{t(\"Section\")}</h4>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                value={modAccessCard.CarrierCode}\r\n                label={t(\"AccessCardInfo_x_Carrier\")}\r\n                options={Utilities.transferListtoOptions(\r\n                  listOptions.CarrierCompanies\r\n                )}\r\n                onChange={(data) => onFieldChange(\"CarrierCode\", data)}\r\n                error={t(validationErrors.CarrierCode)}\r\n                disabled={\r\n                  modAccessCard.CardStatus !== \"AVAILABLE\" || CarrierCodeEnable\r\n                }\r\n                multiple={false}\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n                indicator=\"required\"\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                value={modAccessCard.EntityName}\r\n                label={t(\"AccessCardInfo_x_IssuedTo\")}\r\n                options={Utilities.transferListtoOptions(\r\n                  listOptions.EntityTypes\r\n                )}\r\n                onChange={(data) => onFieldChange(\"EntityName\", data)}\r\n                error={t(validationErrors.EntityName)}\r\n                disabled={modAccessCard.CardStatus !== \"AVAILABLE\"}\r\n                multiple={false}\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n                indicator=\"required\"\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                value={modAccessCard.EntityValue}\r\n                label={t(\"AccessCardInfo_x_Details\")}\r\n                options={Utilities.transferListtoOptions(\r\n                  listOptions.EntityValues\r\n                )}\r\n                disabled={modAccessCard.CardStatus !== \"AVAILABLE\"}\r\n                onChange={(data) => onFieldChange(\"EntityValue\", data)}\r\n                error={t(validationErrors.EntityValue)}\r\n                multiple={false}\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n                indicator=\"required\"\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  modAccessCard.Password === null ? \"\" : modAccessCard.Password\r\n                }\r\n                label={t(\"AccessCardInfo_x_Pwd\")}\r\n                disabled={\r\n                  !passwordEnable || modAccessCard.CardType === \"ELECTRONIC\"\r\n                }\r\n                onChange={(data) => onFieldChange(\"Password\", data)}\r\n                error={t(validationErrors.Password)}\r\n                reserveSpace={false}\r\n                type=\"password\"\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  modAccessCard.ConfirmPassword === null\r\n                    ? \"\"\r\n                    : modAccessCard.ConfirmPassword\r\n                }\r\n                label={t(\"AccessCardInfo_x_ConfirmPassword\")}\r\n                disabled={\r\n                  !passwordEnable || modAccessCard.CardType === \"ELECTRONIC\"\r\n                }\r\n                onChange={(data) => onFieldChange(\"ConfirmPassword\", data)}\r\n                error={t(validationErrors.ConfirmPassword)}\r\n                reserveSpace={false}\r\n                type=\"password\"\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\" style={{ marginTop: 25 }}>\r\n              <Button\r\n                type=\"primary\"\r\n                disabled={\r\n                  !passwordEnable || modAccessCard.CardType === \"ELECTRONIC\"\r\n                }\r\n                content={t(\"AccessCardInfo_x_ChangePwd\")}\r\n                onClick={onChangePasswordClicked}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  accessCard.PIN === \"\"\r\n                    ? \"\"\r\n                    : modAccessCard.IssueDate === null\r\n                    ? \"\"\r\n                    : new Date(modAccessCard.IssueDate).toLocaleString()\r\n                }\r\n                label={t(\"AccessCardInfo_x_IssueDate\")}\r\n                disabled={accessCard.IssueDate !== \"\"}\r\n                onChange={(data) => onFieldChange(\"IssueDate\", data)}\r\n                error={t(validationErrors.IssueDate)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  accessCard.PIN === \"\"\r\n                    ? \"\"\r\n                    : modAccessCard.ActivationTime === null\r\n                    ? \"\"\r\n                    : new Date(modAccessCard.ActivationTime).toLocaleString()\r\n                }\r\n                label={t(\"AccessCardList_ActivationTime\")}\r\n                disabled={accessCard.ActivationTime !== \"\"}\r\n                onChange={(data) => onFieldChange(\"ActivationTime\", data)}\r\n                error={t(validationErrors.ActivationTime)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col col-lg-2\" style={{ float: \"left\" }}>\r\n              <Button\r\n                className=\"backButton\"\r\n                onClick={handleBack}\r\n                content={t(\"Back\")}\r\n              ></Button>\r\n            </div>\r\n            <div className=\"col col-lg-10\" style={{ textAlign: \"right\" }}>\r\n              <Button\r\n                disabled={!issueEnabled ? true : modAccessCard.CardStatus !== \"AVAILABLE\" ? true : false}\r\n                onClick={onIssueClicked}\r\n                content={t(\"AccessCardInfo_x_IssueCard\")}\r\n              ></Button>\r\n              <Button\r\n                disabled={!activateEnable ? true : modAccessCard.CardStatus !== \"ISSUED\" ? true : false}\r\n                content={t(\"AccessCardInfo_x_ActivateCard\")}\r\n                onClick={onActivateClick}\r\n              ></Button>\r\n              <Button\r\n                disabled={!revokeEnable ? true : (modAccessCard.CardStatus !== \"ISSUED\" && modAccessCard.CardStatus !== \"ACTIVATED\") ? true : false}\r\n                content={t(\"AccessCardInfo_x_RevokeID\")}\r\n                onClick={onRevokeClick}\r\n              ></Button>\r\n              <Button\r\n                disabled={!passwordEnable}\r\n                content={t(\"AccessCardInfo_x_ResetPwd\")}\r\n                onClick={onResetPasswordClick}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport lodash from \"lodash\";\r\nimport { emptyAccessCard } from \"../../../JS/DefaultEntities\";\r\nimport { AccessIDManagementDetails } from \"../../UIBase/Details/AccessIDManagementDetails\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { accessCardValidationDef } from \"../../../JS/ValidationDef\";\r\nimport {\r\n  fnAccessCard,\r\n  fnResetPin,\r\n  functionGroups,\r\n  fnIssueCard,\r\n  fnActivateCard,\r\n  fnRevokeCard,\r\n  fnKPIInformation\r\n} from \"../../../JS/FunctionGroups\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport axios from \"axios\";\r\nimport { AccessIDManagementSectionDetails } from \"../../UIBase/Details/AccessIDManagementSectionDetails\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as RestApis from \"../../../JS/RestApis\";\r\nimport { toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { accessCardAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport * as DateFieldsInEntities from \"../../../JS/DateFieldsInEntities\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiAccessCardDetail } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass AccessIDManagementDetailsComposite extends Component {\r\n  state = {\r\n    accessCard: lodash.cloneDeep(emptyAccessCard),\r\n    modAccessCard: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      accessCardValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    saveEnabled: true,\r\n    issueEnabled: false,\r\n    activateEnable: false,\r\n    revokeEnable: false,\r\n    CarrierCompanies: [],\r\n    entityTypeList: [],\r\n    EntityValues: [],\r\n    modelOpen: true,\r\n    CarrierCodeEnable: false,\r\n    passwordEnable: false,\r\n    isTWICEnable: false,\r\n    FASCNId: \"\",\r\n\r\n    attributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    modAttributeMetaDataList: [],\r\n    attribute: [],\r\n    accescardKPIList: [],\r\n    tempAccessCard: {},\r\n\r\n    showAccessCardAuthenticationLayout: false,\r\n    showIssueAuthenticationLayout: false,\r\n    showRevokeAuthenticationLayout: false,\r\n    showActivateAuthenticationLayout: false,\r\n    showResetPinAuthenticationLayout: false,\r\n    showChangePasswordAuthenticationLayout: false,\r\n\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.accessCard.PIN !== \"\" &&\r\n        nextProps.selectedRow.AccessCardList_x_IDCode === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getAccessCard(nextProps.selectedRow);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  initializeTheButtonEnable() {\r\n    Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n    var { issueEnabled } = { ...this.state };\r\n    var { activateEnable } = { ...this.state };\r\n    var { revokeEnable } = { ...this.state };\r\n    issueEnabled = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.modify,\r\n      fnIssueCard\r\n    );\r\n    activateEnable = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.modify,\r\n      fnActivateCard\r\n    );\r\n    revokeEnable = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.modify,\r\n      fnRevokeCard\r\n    );\r\n    this.setState({\r\n      issueEnabled,\r\n      activateEnable,\r\n      revokeEnable,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      this.initializeTheButtonEnable();\r\n      this.getAccessCard(this.props.selectedRow);\r\n      this.getCarrierCompanies();\r\n      this.getEntityTypeList();\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getAttributes() {\r\n    try {\r\n      axios(\r\n        RestApis.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [accessCardAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult.accessCard === null ||\r\n            result.EntityResult.accessCard === undefined\r\n          ) {\r\n            result.EntityResult.accessCard = [];\r\n          }\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(\r\n                result.EntityResult.accessCard\r\n              ),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.accessCard\r\n                ),\r\n            },\r\n            () => {\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                if (this.state.attributeMetaDataList.length > 0) {\r\n                  this.terminalSelectionChange([\r\n                    this.state.attributeMetaDataList[0].TerminalCode,\r\n                  ]);\r\n                }\r\n              } else {\r\n                this.localNodeAttribute();\r\n              }\r\n            }\r\n          );\r\n        } else {\r\n          console.log(\"Failed to get Attributes\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getting Attributes:\", error);\r\n    }\r\n  }\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (\r\n        Array.isArray(attributeMetaDataList) &&\r\n        attributeMetaDataList.length > 0\r\n      ) {\r\n        this.terminalSelectionChange([attributeMetaDataList[0].TerminalCode]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      let attributesTerminalsList = [];\r\n      var attributeMetaDataList = [];\r\n      var modAttributeMetaDataList = [];\r\n\r\n      attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      // modAttributeMetaDataList = lodash.cloneDeep(\r\n      //   this.state.modAttributeMetaDataList\r\n      // );\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n      var modAccessCard = lodash.cloneDeep(this.state.modAccessCard);\r\n      selectedTerminals.forEach((terminal) => {\r\n        var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n          return selectedAttribute.TerminalCode === terminal;\r\n        });\r\n        if (existitem === undefined) {\r\n          attributeMetaDataList.forEach(function (attributeMetaData) {\r\n            if (attributeMetaData.TerminalCode === terminal) {\r\n              var Attributevalue = modAccessCard.Attributes.find(\r\n                (attribute) => {\r\n                  return attribute.TerminalCode === terminal;\r\n                }\r\n              );\r\n              if (Attributevalue !== undefined) {\r\n                attributeMetaData.attributeMetaDataList.forEach(function (\r\n                  attributeMetaData\r\n                ) {\r\n                  var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                    (x) => {\r\n                      return x.AttributeCode === attributeMetaData.Code;\r\n                    }\r\n                  );\r\n                  if (valueAttribute !== undefined)\r\n                    attributeMetaData.DefaultValue =\r\n                      valueAttribute.AttributeValue;\r\n                });\r\n              }\r\n              attributesTerminalsList.push(attributeMetaData);\r\n            }\r\n          });\r\n        } else {\r\n          attributesTerminalsList.push(existitem);\r\n        }\r\n      });\r\n      modAttributeMetaDataList = [];\r\n      modAttributeMetaDataList = attributesTerminalsList;\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n          return attributeValidation.TerminalCode === selectedTerminals;\r\n        });\r\n        if (existTerminal === undefined) {\r\n          Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n            (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n          );\r\n        }\r\n      });\r\n      this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n      if (\r\n        attribute.DataType === Constants.AttributeTypes.INT ||\r\n        attribute.DataType === Constants.AttributeTypes.LONG ||\r\n        attribute.DataType === Constants.AttributeTypes.FLOAT ||\r\n        attribute.DataType === Constants.AttributeTypes.DOUBLE\r\n      ) {\r\n        value = Utilities.convertStringtoDecimal(value);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on handleAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getAccessCard(selectedRow) {\r\n    emptyAccessCard.ShareholderCode = this.props.selectedShareholder;\r\n    if (selectedRow.AccessCardList_x_IDCode === undefined) {\r\n      this.setState(\r\n        {\r\n          accessCard: lodash.cloneDeep(emptyAccessCard),\r\n          modAccessCard: lodash.cloneDeep(emptyAccessCard),\r\n          isReadyToRender: true,\r\n          accescardKPIList: [],\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnAccessCard\r\n          ),\r\n        },\r\n        () => {\r\n          this.getAttributes();\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.accessCardCode,\r\n        value: selectedRow.AccessCardList_x_IDCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      Shareholdercode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.accessCardCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestApis.GetAccessCard,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let modAccessCard = lodash.cloneDeep(result.EntityResult);\r\n          let accessCard = lodash.cloneDeep(result.EntityResult);\r\n          if (\r\n            result.EntityResult.FASCN !== null &&\r\n            result.EntityResult.FASCN !== \"\"\r\n          ) {\r\n            modAccessCard.ISTWICCARD = true;\r\n          }\r\n          if (result.EntityResult.Password !== null) {\r\n            modAccessCard.Password = null;\r\n          }\r\n          this.setState({\r\n            isReadyToRender: true,\r\n            accessCard,\r\n            modAccessCard,\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnAccessCard\r\n            ),\r\n          });\r\n          if (\r\n            accessCard.CardStatus === \"ACTIVATED\" ||\r\n            accessCard.CardStatus === \"ISSUED\"\r\n          ) {\r\n            this.setState({\r\n              /*  saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnAccessCard\r\n                        ),*/\r\n              passwordEnable: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnResetPin\r\n              ),\r\n            });\r\n          }\r\n          this.initializeTheButtonEnable();\r\n          this.getEntityCodeList();\r\n          this.getTWICEnabled();\r\n          this.getAttributes();\r\n          this.getKPIList(this.props.selectedShareholder, result.EntityResult.PIN)\r\n        } else {\r\n          this.setState({\r\n            accessCard: lodash.cloneDeep(emptyAccessCard),\r\n            modAccessCard: lodash.cloneDeep(emptyAccessCard),\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in GetAccessCard:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting AccessCard:\", error, selectedRow);\r\n      });\r\n  }\r\n\r\n  getCarrierCompanies() {\r\n    axios(\r\n      RestApis.GetAllCarrierListForRole +\r\n      \"?ShareholderCode=\" +\r\n      this.props.selectedShareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          var list = result.EntityResult.Table2;\r\n          var CarrierCompanies = [];\r\n          list.forEach((item) => {\r\n            CarrierCompanies.push(item.Code);\r\n          });\r\n          this.setState({\r\n            CarrierCompanies: CarrierCompanies,\r\n          });\r\n        } else {\r\n          console.log(\"Error in GetCarrierListForRole:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Carrier List:\", error);\r\n      });\r\n  }\r\n\r\n  getEntityTypeList() {\r\n    axios(\r\n      RestApis.GetEntityTypeList +\r\n      \"?ShareholderCode=\" +\r\n      this.props.selectedShareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult != null) {\r\n            var list = result.EntityResult;\r\n            this.setState({\r\n              entityTypeList: list,\r\n            });\r\n          } else {\r\n            console.log(\"No entityTypeList identified\");\r\n          }\r\n        } else {\r\n          console.log(\"Error in getEntityTypeList:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting EntityType List:\", error);\r\n      });\r\n  }\r\n  //Get KPI for Access Card\r\n  getKPIList(shareholder, accessCardCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      let objKPIRequestData = {\r\n        PageName: kpiAccessCardDetail,\r\n        InputParameters: [{ key: \"ShareholderCode\", value: shareholder }, { key: \"AccessCardCode\", value: accessCardCode }],\r\n      };\r\n      axios(\r\n        RestApis.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              accescardKPIList: result.EntityResult.ListKPIDetails,\r\n            });\r\n          } else {\r\n            this.setState({ accescardKPIList: [] });\r\n            console.log(\"Error in Access Card KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Access Card KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAccessCardAuthenticationLayout: false,\r\n      showIssueAuthenticationLayout: false,\r\n      showRevokeAuthenticationLayout: false,\r\n      showActivateAuthenticationLayout: false,\r\n      showResetPinAuthenticationLayout: false,\r\n      showChangePasswordAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  getFunctionGroupName() {\r\n    if (this.state.showAccessCardAuthenticationLayout)\r\n      return fnAccessCard\r\n    else if (this.state.showIssueAuthenticationLayout)\r\n      return fnIssueCard\r\n    else if (this.state.showRevokeAuthenticationLayout)\r\n      return fnRevokeCard\r\n    else if (this.state.showActivateAuthenticationLayout)\r\n      return fnActivateCard\r\n    else if (this.state.showResetPinAuthenticationLayout || this.state.showChangePasswordAuthenticationLayout)\r\n      return fnResetPin\r\n\r\n  };\r\n\r\n  getAddorEditMode() {\r\n    if (this.state.showAccessCardAuthenticationLayout)\r\n      return this.state.accessCard.PIN === \"\" ? functionGroups.add : functionGroups.modify;\r\n    else\r\n      return functionGroups.modify;\r\n  };\r\n\r\n\r\n  handleOperation() {\r\n\r\n    if (this.state.showAccessCardAuthenticationLayout)\r\n      return this.saveAccessCard\r\n    else if (this.state.showIssueAuthenticationLayout)\r\n      return this.issueAccessCard\r\n    else if (this.state.showRevokeAuthenticationLayout)\r\n      return this.revokeAccessCard\r\n    else if (this.state.showActivateAuthenticationLayout)\r\n      return this.activateAccessCard\r\n    else if (this.state.showResetPinAuthenticationLayout)\r\n      return this.resetPassword\r\n    else if (this.state.showChangePasswordAuthenticationLayout)\r\n      return this.changePassword\r\n  };\r\n\r\n  render() {\r\n    const listOptions = {\r\n      cardTypes: [\"ELECTRONIC\", \"VIRTUAL\"],\r\n      CarrierCompanies: this.state.CarrierCompanies,\r\n      EntityTypes: this.state.entityTypeList,\r\n      EntityValues: this.state.EntityValues,\r\n    };\r\n    let popUpContents = null;\r\n    try {\r\n      popUpContents = [\r\n        {\r\n          fieldName: \"AccessCardInfo_LastUpdated\",\r\n          fieldValue:\r\n            new Date(\r\n              this.state.modAccessCard.LastUpdatedTime\r\n            ).toLocaleDateString() +\r\n            \" \" +\r\n            new Date(\r\n              this.state.modAccessCard.LastUpdatedTime\r\n            ).toLocaleTimeString(),\r\n        },\r\n        /*{\r\n                  fieldName: \"AccessCardInfo_LastActive\",\r\n                  fieldValue:\r\n                      this.state.modAccessCard.LastActiveTime !== undefined &&\r\n                      this.state.modAccessCard.LastActiveTime !== null\r\n                          ? new Date(\r\n                          this.state.modAccessCard.LastActiveTime\r\n                          ).toLocaleDateString() +\r\n                          \" \" +\r\n                          new Date(\r\n                              this.state.modAccessCard.LastActiveTime\r\n                          ).toLocaleTimeString()\r\n                          : \"\",\r\n              },*/\r\n        {\r\n          fieldName: \"AccessCardInfo_CreatedTime\",\r\n          fieldValue:\r\n            new Date(\r\n              this.state.modAccessCard.CreatedTime\r\n            ).toLocaleDateString() +\r\n            \" \" +\r\n            new Date(this.state.modAccessCard.CreatedTime).toLocaleTimeString(),\r\n        },\r\n      ];\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.accessCard.PIN}\r\n            newEntityName=\"AccessCardInfo_x_NewCard\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <TMDetailsKPILayout KPIList={this.state.accescardKPIList}> </TMDetailsKPILayout>\r\n        <ErrorBoundary>\r\n          <AccessIDManagementDetails\r\n            accessCard={this.state.accessCard}\r\n            modAccessCard={this.state.modAccessCard}\r\n            validationErrors={this.state.validationErrors}\r\n            listOptions={listOptions}\r\n            onFieldChange={this.handleChange}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n            onFASCNBlur={this.onFASCNBlur}\r\n            isTWICEnable={this.state.isTWICEnable}\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            onAttributeDataChange={this.handleAttributeDataChange}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n          ></AccessIDManagementDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <AccessIDManagementSectionDetails\r\n            accessCard={this.state.accessCard}\r\n            modAccessCard={this.state.modAccessCard}\r\n            validationErrors={this.state.validationErrors}\r\n            listOptions={listOptions}\r\n            onFieldChange={this.handleChange}\r\n            onChangePasswordClicked={this.handleChangePassword}\r\n            onIssueClicked={this.handleissueAccessCard}\r\n            onActivateClick={this.handleActivateAccessCard}\r\n            onRevokeClick={this.handleRevokeAccessCard}\r\n            onResetPasswordClick={this.handleResetPassword}\r\n            handleBack={this.props.onBack}\r\n            // onSelectFocus={this.onEntitySelectFocus}\r\n            issueEnabled={this.state.issueEnabled}\r\n            activateEnable={this.state.activateEnable}\r\n            revokeEnable={this.state.revokeEnable}\r\n            passwordEnable={this.state.passwordEnable}\r\n            CarrierCodeEnable={this.state.CarrierCodeEnable}\r\n          ></AccessIDManagementSectionDetails>\r\n        </ErrorBoundary>\r\n        {this.state.showAccessCardAuthenticationLayout ||\r\n          this.state.showIssueAuthenticationLayout ||\r\n          this.state.showRevokeAuthenticationLayout ||\r\n          this.state.showActivateAuthenticationLayout ||\r\n          this.state.showResetPinAuthenticationLayout ||\r\n          this.state.showChangePasswordAuthenticationLayout\r\n          ? (\r\n            <UserAuthenticationLayout\r\n              Username={this.props.userDetails.EntityResult.UserName}\r\n              functionName={this.getAddorEditMode()}\r\n              functionGroup={this.getFunctionGroupName()}\r\n              handleOperation={this.handleOperation()}\r\n              handleClose={this.handleAuthenticationClose}\r\n            ></UserAuthenticationLayout>\r\n          ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n\r\n  getEntityCodeList() {\r\n    const { modAccessCard } = this.state;\r\n    if (this.props.selectedShareholder === null) {\r\n      return;\r\n    }\r\n    if (\r\n      modAccessCard.CarrierCode === undefined ||\r\n      modAccessCard.EntityName === undefined\r\n    ) {\r\n      return;\r\n    }\r\n    axios(\r\n      RestApis.GetEntityCodesByCarrierAndEntityType +\r\n      \"?ShareholderCode=\" +\r\n      this.props.selectedShareholder +\r\n      \"&CarrierCode=\" +\r\n      modAccessCard.CarrierCode +\r\n      \"&EntityType=\" +\r\n      modAccessCard.EntityName,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            EntityValues: result.EntityResult,\r\n          });\r\n        } else {\r\n          console.log(\"Error in onEntitySelectFocus:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Entity Code:\", error);\r\n      });\r\n  }\r\n\r\n  onEntitySelectFocus = (data) => {\r\n    const { modAccessCard } = this.state;\r\n    var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    validationErrors[\"EntityValue\"] = \"\";\r\n\r\n    Object.keys(accessCardValidationDef).forEach(function (key) {\r\n      validationErrors[key] = \"\";\r\n      if (key === \"EntityName\")\r\n        validationErrors[key] = Utilities.validateField(\r\n          accessCardValidationDef[key],\r\n          modAccessCard[key]\r\n        );\r\n    });\r\n    this.setState({ validationErrors });\r\n    var returnValue = Object.values(validationErrors).every(function (value) {\r\n      return value === \"\";\r\n    });\r\n    if (returnValue) {\r\n      axios(\r\n        RestApis.GetEntityCodesByCarrierAndEntityType +\r\n        \"?ShareholderCode=\" +\r\n        this.props.selectedShareholder +\r\n        \"&CarrierCode=\" +\r\n        modAccessCard.CarrierCode +\r\n        \"&EntityType=\" +\r\n        modAccessCard.EntityName,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              EntityValues: result.EntityResult,\r\n            });\r\n          } else {\r\n            console.log(\"Error in onEntitySelectFocus:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Entity Code:\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  handleChangePassword = () => {\r\n    if (this.validatePassword()) {\r\n\r\n      let showChangePasswordAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n\r\n      this.setState({ showChangePasswordAuthenticationLayout, }, () => {\r\n        if (showChangePasswordAuthenticationLayout === false) {\r\n          this.changePassword();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  changePassword = () => {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      let modAccessCard = lodash.cloneDeep(this.state.modAccessCard);\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.accessCardCode,\r\n          value: modAccessCard.PIN,\r\n        },\r\n        {\r\n          key: \"NewPassword\",\r\n          value: modAccessCard.ConfirmPassword,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.accessCardCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"AccessCardInfoDetails_SavedStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"AccessCardInfo_x_Title\"],\r\n            keyValues: [modAccessCard.PIN],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestApis.ChangePasswordForAccessCard,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            modAccessCard.Password = null;\r\n            modAccessCard.ConfirmPassword = null;\r\n            this.setState({ modAccessCard });\r\n          } else {\r\n            this.setState({ CarrierCodeEnable: false });\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            console.log(\"Error in issueAccessCard:\", result.ErrorList);\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification} />\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose:\r\n                notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose:\r\n                notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        });\r\n\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on changePassword\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n\r\n  handleissueAccessCard = () => {\r\n\r\n    this.setState({ issueEnabled: false });\r\n\r\n    if (this.validateIssue()) {\r\n\r\n      let showIssueAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n\r\n      this.setState({ showIssueAuthenticationLayout, }, () => {\r\n        if (showIssueAuthenticationLayout === false) {\r\n          this.issueAccessCard();\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      this.setState({ issueEnabled: true });\r\n    }\r\n  }\r\n\r\n\r\n  issueAccessCard = () => {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      this.initializeTheButtonEnable();\r\n      let modAccessCard = lodash.cloneDeep(this.state.modAccessCard);\r\n\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.accessCardCode,\r\n          value: modAccessCard.PIN,\r\n        },\r\n        {\r\n          key: \"EntityType\",\r\n          value: modAccessCard.EntityName,\r\n        },\r\n        {\r\n          key: \"EntityCode\",\r\n          value: modAccessCard.EntityValue,\r\n        },\r\n        {\r\n          key: KeyCodes.carrierCode,\r\n          value: modAccessCard.CarrierCode\r\n        }\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.accessCardCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"AccessCardInfoDetails_SavedStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"AccessCardInfo_x_Title\"],\r\n            keyValues: [modAccessCard.PIN],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestApis.IssueAccessCard,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess\r\n            ? \"success\"\r\n            : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.setState(\r\n              {\r\n                CarrierCodeEnable: false,\r\n              },\r\n              () =>\r\n                this.getAccessCard({\r\n                  AccessCardList_x_IDCode: modAccessCard.PIN,\r\n                })\r\n            );\r\n          } else {\r\n            this.setState({ CarrierCodeEnable: false });\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            console.log(\"Error in issueAccessCard:\", result.ErrorList);\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification} />\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose:\r\n                notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose:\r\n                notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on issueAccessCard\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  validateIssue() {\r\n    const { modAccessCard } = this.state;\r\n    var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    Object.keys(accessCardValidationDef).forEach(function (key) {\r\n      if (key !== \"CarrierCode\" && key !== \"FASCN\") {\r\n        validationErrors[key] = Utilities.validateField(\r\n          accessCardValidationDef[key],\r\n          modAccessCard[key]\r\n        );\r\n      }\r\n    });\r\n    this.setState({ validationErrors });\r\n    var returnValue = Object.values(validationErrors).every(function (value) {\r\n      return value === \"\";\r\n    });\r\n    return returnValue;\r\n  }\r\n\r\n\r\n  handleActivateAccessCard = () => {\r\n\r\n    this.setState({ activateEnable: false });\r\n    if (this.validateActivate()) {\r\n\r\n      let showActivateAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n\r\n      this.setState({ showActivateAuthenticationLayout, }, () => {\r\n        if (showActivateAuthenticationLayout === false) {\r\n          this.activateAccessCard();\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      this.setState({ activateEnable: true });\r\n    }\r\n  }\r\n\r\n  validateActivate() {\r\n    return true;\r\n  }\r\n\r\n  validateRevoke() {\r\n    return true;\r\n  }\r\n\r\n  validatePassword() {\r\n    const { modAccessCard } = this.state;\r\n    var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n\r\n    if (\r\n      modAccessCard.Password.length <= 3 ||\r\n      modAccessCard.Password.length > 20\r\n    ) {\r\n      validationErrors[\"Password\"] = \"AccessCardInfo_PwdCriteriaFailed\";\r\n    } else {\r\n      validationErrors[\"Password\"] = \"\";\r\n    }\r\n    if (\r\n      modAccessCard.ConfirmPassword.length <= 3 ||\r\n      modAccessCard.ConfirmPassword.length > 20\r\n    ) {\r\n      validationErrors[\"ConfirmPassword\"] =\r\n        \"ERRMSG_ACCESSCARD_PASSWORD_LENGTH_INVALID\";\r\n    } else {\r\n      validationErrors[\"ConfirmPassword\"] = \"\";\r\n    }\r\n    if (modAccessCard.Password !== modAccessCard.ConfirmPassword) {\r\n      validationErrors[\"ConfirmPassword\"] =\r\n        \"AccessCardInfo_x_ConfirmPasswordMatch\";\r\n    }\r\n    this.setState({ validationErrors });\r\n    var returnValue = Object.values(validationErrors).every(function (value) {\r\n      return value === \"\";\r\n    });\r\n    return returnValue;\r\n  }\r\n\r\n  activateAccessCard = () => {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      this.initializeTheButtonEnable();\r\n      let modAccessCard = lodash.cloneDeep(this.state.modAccessCard);\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.accessCardCode,\r\n          value: modAccessCard.PIN,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.accessCardCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"AccessCardInfoDetails_SavedStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"AccessCardInfo_x_Title\"],\r\n            keyValues: [modAccessCard.PIN],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestApis.ActivateAccessCard,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess\r\n            ? \"success\"\r\n            : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({}, () =>\r\n              this.getAccessCard({\r\n                AccessCardList_x_IDCode: modAccessCard.PIN,\r\n              })\r\n            );\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            console.log(\"Error in activateAccessCard:\", result.ErrorList);\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose:\r\n                notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose:\r\n                notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        });\r\n\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on activateAccessCard\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleRevokeAccessCard = () => {\r\n\r\n    this.setState({ revokeEnable: false });\r\n    if (this.validateRevoke()) {\r\n\r\n      let showRevokeAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n\r\n      this.setState({ showRevokeAuthenticationLayout, }, () => {\r\n        if (showRevokeAuthenticationLayout === false) {\r\n          this.revokeAccessCard();\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      this.setState({ revokeEnable: true });\r\n    }\r\n  }\r\n\r\n  revokeAccessCard = () => {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      this.initializeTheButtonEnable();\r\n      var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      let modAccessCard = lodash.cloneDeep(this.state.modAccessCard);\r\n\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.accessCardCode,\r\n          value: modAccessCard.PIN,\r\n        },\r\n        {\r\n          key: \"EntityType\",\r\n          value: modAccessCard.EntityName,\r\n        },\r\n        {\r\n          key: \"EntityCode\",\r\n          value: modAccessCard.EntityValue,\r\n        },\r\n        {\r\n          key: KeyCodes.carrierCode,\r\n          value: modAccessCard.CarrierCode\r\n        }\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.accessCardCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"AccessCardInfoDetails_SavedStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"AccessCardInfo_x_Title\"],\r\n            keyValues: [modAccessCard.PIN],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestApis.RevokeAccessCard,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess\r\n            ? \"success\"\r\n            : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            modAccessCard.Password = \"\";\r\n            modAccessCard.ConfirmPassword = \"\";\r\n            validationErrors[\"Password\"] = \"\";\r\n            validationErrors[\"ConfirmPassword\"] = \"\";\r\n            this.setState(\r\n              {\r\n                modAccessCard,\r\n                validationErrors,\r\n                CarrierCodeEnable: false,\r\n                passwordEnable: false,\r\n              },\r\n              () =>\r\n                this.getAccessCard({\r\n                  AccessCardList_x_IDCode: modAccessCard.PIN,\r\n                })\r\n            );\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            console.log(\"Error in revokeAccessCard:\", result.ErrorList);\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose:\r\n                notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose:\r\n                notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        });\r\n\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on revokeAccessCard\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n\r\n  handleResetPassword = () => {\r\n\r\n    let showResetPinAuthenticationLayout =\r\n      this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n        ? true\r\n        : false;\r\n\r\n    this.setState({ showResetPinAuthenticationLayout, }, () => {\r\n      if (showResetPinAuthenticationLayout === false) {\r\n        this.resetPassword();\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  resetPassword = () => {\r\n    this.handleAuthenticationClose();\r\n    let modAccessCard = lodash.cloneDeep(this.state.modAccessCard);\r\n    if (modAccessCard.PIN === \"\" || modAccessCard.PIN === null) {\r\n      return;\r\n    }\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.accessCardCode,\r\n        value: modAccessCard.PIN,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.accessCardCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"AccessCardInfoDetails_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"AccessCardInfo_x_Title\"],\r\n          keyValues: [modAccessCard.PIN],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestApis.ResetPasswordForAccessCard,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          console.log(\"Error in resetPassword:\", result.ErrorList);\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification} />\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  validateSave() {\r\n    const { modAccessCard, accessCard } = this.state;\r\n    var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    Object.keys(accessCardValidationDef).forEach(function (key) {\r\n      if (\r\n        key !== \"CarrierCode\" &&\r\n        key !== \"EntityName\" &&\r\n        key !== \"EntityValue\" &&\r\n        key !== \"FASCN\"\r\n      )\r\n        validationErrors[key] = Utilities.validateField(\r\n          accessCardValidationDef[key],\r\n          modAccessCard[key]\r\n        );\r\n    });\r\n\r\n    if (\r\n      modAccessCard.ShareholderCode === null ||\r\n      modAccessCard.ShareholderCode.trim() === \"\"\r\n    )\r\n      validationErrors[\"ShareholderCode\"] =\r\n        \"MarineReceipt_MandatoryShareholder\";\r\n\r\n    if (modAccessCard.Locked !== accessCard.Locked) {\r\n      if (modAccessCard.Remarks === null || modAccessCard.Remarks === \"\") {\r\n        validationErrors[\"Remarks\"] = \"Please enter the remarks\";\r\n      }\r\n    }\r\n    this.setState({ validationErrors });\r\n    /*  var returnValue = Object.values(validationErrors).every(function (value) {\r\n            return value === \"\" ;\r\n        });*/\r\n    var flag = true;\r\n    Object.keys(validationErrors).forEach(function (key) {\r\n      if (\r\n        key !== \"CarrierCode\" &&\r\n        key !== \"EntityName\" &&\r\n        key !== \"EntityValue\" &&\r\n        key !== \"Password\" &&\r\n        key !== \"ConfirmPassword\"\r\n      ) {\r\n        if (validationErrors[key] !== \"\") {\r\n          flag = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n    let modAttributeMetaDataList = lodash.cloneDeep(\r\n      this.state.modAttributeMetaDataList\r\n    );\r\n    modAttributeMetaDataList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n    this.setState({ attributeValidationErrors });\r\n    let returnAttributeValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      returnAttributeValue = Object.values(x.attributeValidationErrors).every(\r\n        function (value) {\r\n          return value === \"\";\r\n        }\r\n      );\r\n    });\r\n    return flag && returnAttributeValue;\r\n  }\r\n\r\n  saveAccessCard = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempAccessCard = lodash.cloneDeep(this.state.tempAccessCard);\r\n\r\n      this.state.accessCard.PIN === \"\"\r\n        ? this.createAccessCard(tempAccessCard)\r\n        : this.updateAccessCard(tempAccessCard);\r\n    } catch (error) {\r\n      console.log(\"AccessCardComposite : Error in saveAccessCard\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n      // this.setState({ saveEnabled: false });\r\n      let attributeList = lodash.cloneDeep(this.state.modAttributeMetaDataList);\r\n      let modAccessCard = lodash.cloneDeep(this.state.modAccessCard);\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modAccessCard.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n\r\n      if (this.validateSave()) {\r\n        modAccessCard = Utilities.convertDatesToString(\r\n          DateFieldsInEntities.DatesInEntity.AccessCard,\r\n          modAccessCard\r\n        );\r\n\r\n        let showAccessCardAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n        let tempAccessCard = lodash.cloneDeep(modAccessCard);\r\n        this.setState({ showAccessCardAuthenticationLayout, tempAccessCard }, () => {\r\n          if (showAccessCardAuthenticationLayout === false) {\r\n            this.saveAccessCard();\r\n          }\r\n        });\r\n\r\n\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  createAccessCard(modAccessCard) {\r\n    var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    if (this.state.FASCNId !== \"\") {\r\n      modAccessCard.PIN = this.state.FASCNId;\r\n      modAccessCard.LogicalPIN = this.state.FASCNId;\r\n      this.setState({ FASCNId: \"\" });\r\n    }\r\n    if (modAccessCard.ISTWICCARD === true) {\r\n      validationErrors[\"FASCN\"] = Utilities.validateField(\r\n        accessCardValidationDef[\"FASCN\"],\r\n        modAccessCard[\"FASCN\"]\r\n      );\r\n      if (validationErrors[\"FASCN\"] !== \"\") {\r\n        this.setState({\r\n          validationErrors,\r\n          saveEnabled: true,\r\n        });\r\n        return;\r\n      }\r\n    }\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.accessCardCode,\r\n        value: modAccessCard.PIN,\r\n      },\r\n    ];\r\n    modAccessCard.CardStatus = \"AVAILABLE\";\r\n    modAccessCard.ShareHolderCode = this.props.selectedShareholder;\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.accessCardCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modAccessCard,\r\n    };\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"AccessCardInfoDetails_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"AccessCardInfo_x_Title\"],\r\n          keyValues: [modAccessCard.PIN],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestApis.CreateAccessCard,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnAccessCard\r\n              ),\r\n              showAccessCardAuthenticationLayout: false,\r\n            },\r\n            () =>\r\n              this.getAccessCard({ AccessCardList_x_IDCode: modAccessCard.PIN })\r\n          );\r\n          this.props.deleteCallBack({\r\n            AccessCardList_x_IDCode: modAccessCard.PIN,\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnAccessCard\r\n            ),\r\n            showAccessCardAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in CreateAccessCard:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modAccessCard, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnAccessCard\r\n          ),\r\n          showAccessCardAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modAccessCard, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  updateAccessCard(modAccessCard) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.accessCardCode,\r\n        value: modAccessCard.PIN,\r\n      },\r\n    ];\r\n    let obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.accessCardCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modAccessCard,\r\n    };\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"AccessCardInfoDetails_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"AccessCardInfo_x_Title\"],\r\n          keyValues: [modAccessCard.PIN],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestApis.UpdateAccessCard,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnAccessCard\r\n              ),\r\n              showAccessCardAuthenticationLayout: false,\r\n            },\r\n            () =>\r\n              this.getAccessCard({ AccessCardList_x_IDCode: modAccessCard.PIN })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnAccessCard\r\n            ),\r\n            showAccessCardAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in UpdateAccessCard:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modAccessCard, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modAccessCard, \"modify\", notification);\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.modify,\r\n            fnAccessCard\r\n          ),\r\n          showAccessCardAuthenticationLayout: false,\r\n        });\r\n      });\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      const accessCard = lodash.cloneDeep(this.state.accessCard);\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modAccessCard: { ...accessCard },\r\n          validationErrors,\r\n          modAttributeMetaDataList: [],\r\n        },\r\n        () => {\r\n          this.localNodeAttribute();\r\n          this.handleResetAttributeValidationError();\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors:\r\n          Utilities.getAttributeInitialValidationErrors(attributeMetaDataList),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"handleAttributeValidationError:Error occured on handleResetAttributeValidationError\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modAccessCard = lodash.cloneDeep(this.state.modAccessCard);\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      modAccessCard[propertyName] = data;\r\n      if (propertyName === \"EntityName\" && data !== null) {\r\n        modAccessCard[\"EntityValue\"] = \"\";\r\n        this.setState({ modAccessCard }, () => this.onEntitySelectFocus());\r\n      } else {\r\n        this.setState({ modAccessCard });\r\n      }\r\n      if (propertyName === \"CarrierCode\" && data !== null) {\r\n        if (modAccessCard.EntityName !== null) {\r\n          this.setState({ modAccessCard }, () => this.onEntitySelectFocus());\r\n        }\r\n      }\r\n      if (propertyName === \"CardType\" && data === \"ELECTRONIC\") {\r\n        this.getTWICEnabled();\r\n      }\r\n      if (propertyName === \"CardType\") {\r\n        modAccessCard.FASCN = \"\";\r\n        modAccessCard.ISTWICCARD = false;\r\n        validationErrors[\"FASCN\"] = \"\";\r\n        this.setState({ modAccessCard, validationErrors });\r\n      }\r\n      if (propertyName === \"ISTWICCARD\" && data === false) {\r\n        validationErrors[\"FASCN\"] = \"\";\r\n        modAccessCard.FASCN = \"\";\r\n        this.setState({\r\n          validationErrors,\r\n          modAccessCard,\r\n        });\r\n      }\r\n      if (accessCardValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          accessCardValidationDef[propertyName],\r\n          data\r\n        );\r\n        if (propertyName === \"EntityName\") {\r\n          if (\r\n            data === Constants.CommonEntityType.TMUser ||\r\n            data === Constants.CommonEntityType.Staff ||\r\n            data === Constants.CommonEntityType.Visitor\r\n          ) {\r\n            modAccessCard.CarrierCode = null;\r\n            this.setState({ modAccessCard, CarrierCodeEnable: true });\r\n            validationErrors[\"CarrierCode\"] = \"\";\r\n          } else {\r\n            this.setState({ CarrierCodeEnable: false });\r\n          }\r\n        } else {\r\n          if (\r\n            propertyName === \"EntityValue\" &&\r\n            (modAccessCard.EntityName === Constants.CommonEntityType.TMUser ||\r\n              modAccessCard.EntityName === Constants.CommonEntityType.Staff ||\r\n              modAccessCard.EntityName === Constants.CommonEntityType.Visitor)\r\n          ) {\r\n            this.setState({ CarrierCodeEnable: true });\r\n            validationErrors[\"CarrierCode\"] = \"\";\r\n          } else {\r\n            this.setState({ CarrierCodeEnable: false });\r\n          }\r\n        }\r\n\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getTWICEnabled() {\r\n    axios(\r\n      RestApis.GetTWICEnabled,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            isTWICEnable: result.EntityResult === \"1\",\r\n          });\r\n        } else {\r\n          console.log(\"Error in getTWICEnabled:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getTWICEnabled:\", error);\r\n      });\r\n  }\r\n\r\n  validateFASCN() {\r\n    const { modAccessCard } = this.state;\r\n    const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    if (modAccessCard.ISTWICCARD === false) {\r\n      validationErrors[\"FASCN\"] = \"\";\r\n      this.setState({ validationErrors });\r\n      console.log(\"validateFASCN over\");\r\n      return;\r\n    }\r\n    console.log(\"validateFASCN do\");\r\n    var keyCode = [\r\n      {\r\n        key: \"FASCN\",\r\n        value: modAccessCard.FASCN,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.accessCardCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    this.setState({\r\n      saveEnabled: false,\r\n    });\r\n    axios(\r\n      RestApis.ValidateFASCN,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        /**  {\"ResultDataList\":null,\"EntityResult\":null,\"IsSuccess\":false,\"ErrorList\":[\"Not Found\"],\"ConfiguredDetails\":null} **/\r\n        if (result.IsSuccess === true) {\r\n          var FASCNId = result.EntityResult;\r\n          this.setState({\r\n            FASCNId: FASCNId,\r\n            saveEnabled: true,\r\n          });\r\n        } else {\r\n          console.log(\"Error while validateFASCN\");\r\n          validationErrors[\"FASCN\"] = \"AccessCardInfo_InvalidFASCN\";\r\n          this.setState({ validationErrors, saveEnabled: true });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while validateFASCN:\", error);\r\n      });\r\n  }\r\n\r\n  onFASCNBlur = () => {\r\n    this.validateFASCN();\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(AccessIDManagementDetailsComposite);\r\n\r\nAccessIDManagementDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  genericProps: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n  deleteCallBack: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","export const DatesInEntity={\r\n    Driver : [\r\n    \"License1ExpiryDate\",\r\n    \"License1IssueDate\",\r\n    \"License2IssueDate\",\r\n    \"License2ExpiryDate\",\r\n    \"License3IssueDate\",\r\n    \"License3ExpiryDate\",\r\n    \"HazardousLicenseExpiry\"\r\n  ],\r\n  CarrierCompany:[\"PermitExpiryDate\"],\r\n  PrimeMover:[\"RoadTaxNoIssueDate\",\"RoadTaxNoExpiryDate\",\"licenseExpiryDate\"],\r\n  Wagon:[\"LicenseExpiryDate\"],\r\n  Vehicle:[\"LicenseNoIssueDate\",\"LicenseNoExpiryDate\",\r\n  \"RoadTaxNoIssueDate\",\"RoadTaxNoExpiryDate\",\"Bondexpirydate\",\"HazardousLicenseExpiry\"],\r\n  Contract:[\"StartDate\",\"EndDate\"],\r\n  ContractItem:[\"StartDate\",\"EndDate\"],\r\n  Order:[\"OrderStartDate\",\"OrderEndDate\",\"OrderDate\",\"DeliveryDate\"],\r\n  AccessCard:[\"ExpiryDate\",\"IssueDate\",\"PasswordExpiryDate\"],\r\n  Trailer:[\"HazardousLicenseExpiry\"],\r\n  };","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["TMDetailsKPILayout","_ref","KPIList","pageName","rowHeight","widgetHeight","isDraggable","isResizable","kpiDisplayTopBreakpoint","KPIDisplays","setKPIDisplays","useState","kpiDiv","React","hideKpis","currentScrollPos","window","pageYOffset","KPIDisplay","current","getBoundingClientRect","top","useEffect","addEventListener","removeEventListener","_jsx","ref","children","TranslationConsumer","t","style","marginTop","ErrorBoundary","KPIDashboardLayout","kpiList","defaultProps","AccessIDManagementDetails","accessCard","modAccessCard","validationErrors","listOptions","onFieldChange","handleSave","handleReset","saveEnabled","onFASCNBlur","isTWICEnable","modAttributeMetaDataList","onAttributeDataChange","attributeValidationErrors","isEnterpriseNode","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","_jsxs","className","Input","fluid","value","PIN","label","indicator","disabled","onChange","data","error","reserveSpace","Select","placeholder","CardType","options","Utilities","cardTypes","multiple","search","noResultsMessage","Checkbox","checked","ISTWICCARD","onBlur","FASCN","CardStatus","Description","DatePicker","ExpiryDate","Date","disablePast","displayFormat","getCurrentDateFormat","Locked","Remarks","LastLockingTime","toLocaleString","length","map","attire","Accordion","Content","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","handleCellDataEdit","attribute","Button","content","onClick","AccessIDManagementSectionDetails","onChangePasswordClicked","onIssueClicked","onActivateClick","onRevokeClick","onResetPasswordClick","handleBack","issueEnabled","activateEnable","revokeEnable","passwordEnable","CarrierCodeEnable","CarrierCode","CarrierCompanies","EntityName","EntityTypes","EntityValue","EntityValues","Password","type","ConfirmPassword","IssueDate","ActivationTime","float","textAlign","AccessIDManagementDetailsComposite","Component","constructor","arguments","state","lodash","emptyAccessCard","accessCardValidationDef","isReadyToRender","entityTypeList","modelOpen","FASCNId","accescardKPIList","tempAccessCard","showAccessCardAuthenticationLayout","showIssueAuthenticationLayout","showRevokeAuthenticationLayout","showActivateAuthenticationLayout","showResetPinAuthenticationLayout","showChangePasswordAuthenticationLayout","handleAttributeDataChange","matchedAttributes","this","matchedAttributesList","filter","modattribute","Array","isArray","Code","DefaultValue","forEach","setState","DataType","Constants","INT","LONG","FLOAT","DOUBLE","console","log","handleAuthenticationClose","onEntitySelectFocus","Object","keys","key","values","every","axios","RestApis","props","selectedShareholder","tokenDetails","tokenInfo","then","response","result","IsSuccess","EntityResult","ErrorList","catch","handleChangePassword","validatePassword","userDetails","IsWebPortalUser","changePassword","keyCode","KeyCodes","obj","ShareHolderCode","keyDataCode","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","toast","NotifyEvent","notificationMessage","autoClose","handleissueAccessCard","validateIssue","issueAccessCard","initializeTheButtonEnable","getAccessCard","AccessCardList_x_IDCode","handleActivateAccessCard","validateActivate","activateAccessCard","handleRevokeAccessCard","validateRevoke","revokeAccessCard","handleResetPassword","resetPassword","saveAccessCard","createAccessCard","updateAccessCard","attributeList","Attributes","validateSave","DateFieldsInEntities","AccessCard","localNodeAttribute","handleResetAttributeValidationError","handleChange","propertyName","getTWICEnabled","undefined","TMUser","Staff","Visitor","validateFASCN","componentWillReceiveProps","nextProps","selectedRow","IsArchived","FunctionsList","functionGroups","modify","fnIssueCard","fnActivateCard","fnRevokeCard","componentDidMount","getCarrierCompanies","getEntityTypeList","getAttributes","accessCardAttributeEntity","IsEnterpriseNode","terminalSelectionChange","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","push","ShareholderCode","Shareholdercode","fnAccessCard","fnResetPin","getEntityCodeList","getKPIList","add","list","Table2","item","shareholder","accessCardCode","view","fnKPIInformation","objKPIRequestData","PageName","kpiAccessCardDetail","InputParameters","ListKPIDetails","getFunctionGroupName","getAddorEditMode","handleOperation","render","popUpContents","fieldName","fieldValue","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","CreatedTime","TMDetailsHeader","entityCode","newEntityName","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleClose","LoadingPage","trim","flag","returnAttributeValue","LogicalPIN","Entity","deleteCallBack","onSaved","connect","getUserDetails","TokenAuth","margin","Popup","element","Icon","marginLeft","root","name","size","position","List","handleAttributeDateValue","convertAttributeDatetoString","chars","split","Dateval","getFullYear","getMonth","slice","getDate","toLowerCase","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","BOOL","toString","DATETIME","showYearSelector","onTextChange","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","DatesInEntity","Driver","CarrierCompany","PrimeMover","Wagon","Vehicle","Contract","ContractItem","Order","Trailer","getOptionsWithSelect","ddlOptions","selectOptionText","option","text","unshift","language","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}