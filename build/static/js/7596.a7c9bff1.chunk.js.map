{"version":3,"file":"static/js/7596.a7c9bff1.chunk.js","mappings":"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","sources":["Components/UIBase/Details/LoadingArmDetails.jsx","Components/Composite/Details/LoadingArmDetailsComposite.jsx"],"sourcesContent":["import React from 'react';\r\n// import { Select, Checkbox } from \"@scuf/common\";\r\nimport { Accordion, Select, Input, InputLabel, Checkbox } from '@scuf/common';\r\nimport { DataTable } from '@scuf/datatable';\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport { AttributeDetails } from \"../../UIBase/Details/AttributeDetails\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\n\r\nexport default function LoadingArmDetails({\r\n    loadingArm,\r\n    modLoadingArm,\r\n    modAssociations,\r\n    listOptions,\r\n    selectedRows,\r\n    handleRowSelectionChange,\r\n    handleCellDataEdit,\r\n    validationErrors,\r\n    onFieldChange,\r\n    onActiveStatusChange,\r\n    attributeValidationErrors,\r\n    selectedAttributeList,\r\n    handleAttributeCellDataEdit,\r\n    deviceModel,\r\n    IsDualBay,\r\n    possibleSwingArmList,\r\n    selectedSwingArmAssociations,\r\n    onSwingArmAssociationSelectionChange\r\n}) {\r\n    const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n        let attributeValidation = [];\r\n        attributeValidation = attributeValidationErrors.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n        })\r\n        return attributeValidation.attributeValidationErrors;\r\n    }\r\n\r\n    const [t] = useTranslation();\r\n    const handleCustomEditTextBox = (cellData) => {\r\n        return (\r\n            <Input\r\n                fluid\r\n                value={modAssociations[cellData.rowIndex][cellData.field]}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n            />\r\n        );\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={modLoadingArm.Code}\r\n                        label={t(\"Loadingrm_Code\")}\r\n                        indicator=\"required\"\r\n                        disabled={loadingArm.Code !== \"\"}\r\n                        onChange={(data) => onFieldChange(\"Code\", data)}\r\n                        error={t(validationErrors.Code)}\r\n                        reserveSpace={false}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={modLoadingArm.Name}\r\n                        label={t(\"Loadingrm_Name\")}\r\n                        indicator=\"required\"\r\n                        onChange={(data) => onFieldChange(\"Name\", data)}\r\n                        error={t(validationErrors.Name)}\r\n                        reserveSpace={false}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={modLoadingArm.ArmNumberInBCU}\r\n                        label={t(\"LoadingArmInfo_ArmNoInBCU\")}\r\n                        indicator=\"required\"\r\n                        onChange={(data) => onFieldChange(\"ArmNumberInBCU\", data)}\r\n                        error={t(validationErrors.ArmNumberInBCU)}\r\n                        reserveSpace={false}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                        fluid\r\n                        placeholder=\"Select\"\r\n                        label={t(\"BlendType_Title\")}\r\n                        value={modLoadingArm.BlendType}\r\n                        disabled={loadingArm.Code !== \"\"}\r\n                        indicator=\"required\"\r\n                        options={listOptions.deviceBlendOptions}\r\n                        onChange={(data) => onFieldChange(\"BlendType\", data)}\r\n                        error={t(validationErrors.BlendType)}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                        fluid\r\n                        placeholder=\"Select\"\r\n                        label={t(\"LoadingArm_ArmLoadingType\")}\r\n                        value={modLoadingArm.ArmLoadingType}\r\n                        disabled={loadingArm.Code !== \"\"}\r\n                        indicator=\"required\"\r\n                        options={[\r\n                            { text: \"BOTH\", value: \"BOTH\" },\r\n                            { text: \"LOADING\", value: \"LOADING\" },\r\n                            { text: \"UNLOADING\", value: \"UNLOADING\" },\r\n                        ]}\r\n                        onChange={(data) => onFieldChange(\"ArmLoadingType\", data)}\r\n                        error={t(validationErrors.ArmLoadingType)}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        label={t(\"BCU_NodeAddress\")}\r\n                        value={modLoadingArm.NodeAddress}\r\n                        onChange={(data) => onFieldChange(\"NodeAddress\", data)}\r\n                        reserveSpace={false}\r\n                        // indicator=\"required\"\r\n                        indicator={deviceModel === \"Accuload-IV\" || deviceModel === \"Accuload-III\" ? \"required\" : \"\"}\r\n                        error={t(validationErrors.NodeAddress)}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <InputLabel\r\n                        label={t(\"LoadingArm_CLFQty\")}\r\n                        indicator=\"required\"\r\n                    ></InputLabel>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-8 col-xl-9 pr-0\"><Input\r\n                            fluid\r\n                            value={modLoadingArm.CleanLineFinishQuantity}\r\n                            onChange={(data) => onFieldChange(\"CleanLineFinishQuantity\", data)}\r\n                            error={t(validationErrors.CleanLineFinishQuantity)}\r\n                            reserveSpace={false}\r\n                        /></div>\r\n                        <div className=\"col-12 col-md-4 col-xl-3 pl-0\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                value={modLoadingArm.CleanLineFinishQuantityUOM}\r\n                                options={listOptions.densityUOMOptions}\r\n                                onChange={(data) => onFieldChange(\"CleanLineFinishQuantityUOM\", data)}\r\n                                indicator=\"required\"\r\n                                reserveSpace={false}\r\n                                search={false}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <InputLabel\r\n                        label={t(\"LoadingArm_MLQty\")}\r\n                        indicator=\"required\"\r\n                    ></InputLabel>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-8 col-xl-9 pr-0\"><Input\r\n                            fluid\r\n                            value={modLoadingArm.MinimumLoadableQuantity}\r\n                            onChange={(data) => onFieldChange(\"MinimumLoadableQuantity\", data)}\r\n                            error={t(validationErrors.MinimumLoadableQuantity)}\r\n                            reserveSpace={false}\r\n                        /></div>\r\n                        <div className=\"col-12 col-md-4 col-xl-3 pl-0\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                value={modLoadingArm.MLQtyUOM}\r\n                                options={listOptions.densityUOMOptions}\r\n                                onChange={(data) => onFieldChange(\"MLQtyUOM\", data)}\r\n                                indicator=\"required\"\r\n                                reserveSpace={false}\r\n                                search={false}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        label={t(\"BCU_MainLineMeters\")}\r\n                        disabled={true}\r\n                        value={modLoadingArm.MainlineMeters}\r\n                        onChange={(data) => onFieldChange(\"MainlineMeters\", data)}\r\n                        reserveSpace={false}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        disabled={true}\r\n                        label={t(\"BCU_AdditiveMeters\")}\r\n                        value={modLoadingArm.AdditiveMeters}\r\n                        onChange={(data) => onFieldChange(\"AdditiveMeters\", data)}\r\n                        reserveSpace={false}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={\r\n                            modLoadingArm.Description === null\r\n                                ? \"\"\r\n                                : modLoadingArm.Description\r\n                        }\r\n                        label={t(\"FinishedProductList_Description\")}\r\n                        onChange={(data) => onFieldChange(\"Description\", data)}\r\n                        error={t(validationErrors.Description)}\r\n                        reserveSpace={false}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                        fluid\r\n                        placeholder={t(\"FinishedProductInfo_Select\")}\r\n                        label={t(\"Cust_Status\")}\r\n                        value={modLoadingArm.Status}\r\n                        options={[\r\n                            { text: t(\"ViewShipment_Ok\"), value: true },\r\n                            { text: t(\"ViewShipmentStatus_Inactive\"), value: false },\r\n                        ]}\r\n                        onChange={(data) => onActiveStatusChange(data)}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={\r\n                            modLoadingArm.Remarks === null ? \"\" : modLoadingArm.Remarks\r\n                        }\r\n                        label={t(\"Cust_Remarks\")}\r\n                        onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                        indicator={\r\n                            modLoadingArm.Status !== loadingArm.Status ? \"required\" : \"\"\r\n                        }\r\n                        error={t(validationErrors.Remarks)}\r\n                        reserveSpace={false}\r\n                    />\r\n                </div>\r\n                {IsDualBay === true ?\r\n                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Select\r\n                            fluid\r\n                            placeholder={t(\"Common_Select\")}\r\n                            label={t(\"LoadingArm_SelectAssociatedBay\")}\r\n                            value={modLoadingArm.AssociatedBay}\r\n                            options={Constants.associatedBayOptions}\r\n                            onChange={(data) => onFieldChange(\"AssociatedBay\", data)}\r\n                            indicator=\"required\"\r\n                            disabled={modLoadingArm.Swingable === true ? true : false}\r\n                            reserveSpace={false}\r\n                            search={false}\r\n                            noResultsMessage={t(\"noResultsMessage\")}\r\n                        />\r\n                    </div> : \"\"\r\n                }\r\n                {\r\n                    ((modLoadingArm.ArmLoadingType === \"LOADING\" || modLoadingArm.ArmLoadingType === \"BOTH\") && deviceModel !== Constants.DeviceModels.Microload) ?\r\n                        <div className=\"col-12 col-md-6 col-lg-4 \">\r\n                            <Checkbox className=\"deviceDualandTransCheckBox\"\r\n                                label={t(\"Loadingarm_Swingable\")}\r\n                                checked={modLoadingArm.Swingable}\r\n                                onChange={(data) => onFieldChange(\"Swingable\", data)}\r\n                            >\r\n                            </Checkbox>\r\n\r\n                        </div> : null\r\n                }\r\n                {\r\n                    (modLoadingArm.Swingable && !IsDualBay && deviceModel !== Constants.DeviceModels.Microload) ? (\r\n                        <div className='col-12'>\r\n                            <h5>{t(\"LoadingArms_SwingArmAssociations\")}</h5>\r\n                            <DataTable\r\n                                data={possibleSwingArmList}\r\n                                selectionMode=\"multiple\"\r\n                                scrollable={true}\r\n                                selection={selectedSwingArmAssociations}\r\n                                onSelectionChange={onSwingArmAssociationSelectionChange}\r\n                                onSelectAll={onSwingArmAssociationSelectionChange}\r\n                                className=\"swing-arm-association\"\r\n                                scrollHeight=\"100px\">\r\n                                <DataTable.Column\r\n                                    header={t(\"BCU_Code\")}\r\n                                    key=\"BCUCode\"\r\n                                    field=\"BCUCode\" />\r\n                                <DataTable.Column\r\n                                    header={t(\"LoadingArmCode\")}\r\n                                    key=\"LoadArmCode\"\r\n                                    field=\"LoadArmCode\" />\r\n                            </DataTable>\r\n                        </div>\r\n                    ) : null\r\n                }\r\n                <div className=\"col-12 pb-0\">\r\n                    {\r\n                        selectedAttributeList.length > 0 ?\r\n                            selectedAttributeList.map((attire) =>\r\n                                <div className='bayAccordian'>\r\n                                    <ErrorBoundary>\r\n                                        <Accordion className=''>\r\n                                            <Accordion.Content\r\n                                                // className=\"attributeAccordian\"\r\n                                                title={t(\"Attributes_Header\")}\r\n                                            >\r\n                                                <AttributeDetails\r\n                                                    selectedAttributeList={attire.attributeMetaDataList}\r\n                                                    handleCellDataEdit={handleAttributeCellDataEdit}\r\n                                                    attributeValidationErrors={handleValidationErrorFilter(attributeValidationErrors, attire.TerminalCode)}\r\n                                                ></AttributeDetails>\r\n                                            </Accordion.Content>\r\n                                        </Accordion>\r\n                                    </ErrorBoundary>\r\n                                </div>\r\n                            ) : null\r\n\r\n                    }\r\n                </div>\r\n\r\n\r\n                <div className=\"col-12 pb-0 pt-3\">\r\n                    <h5>{t(\"BCU_FP\")}</h5>\r\n                    <DataTable\r\n                        data={modAssociations}\r\n                        selectionMode=\"multiple\"\r\n                        selection={selectedRows}\r\n                        onSelectionChange={handleRowSelectionChange}\r\n                        scrollable={true}\r\n                        scrollHeight=\"100px\"\r\n                    >\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"Shareholdercode\"\r\n                            field=\"Shareholdercode\"\r\n                            header={t(\"BCU_shareHolder\")}\r\n                            sortable={true}\r\n                            editFieldType=\"text\"\r\n                            customEditRenderer={handleCustomEditTextBox}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"Code\"\r\n                            field=\"Code\"\r\n                            header={t(\"LoadingArm_FinishedProduct\")}\r\n                            sortable={true}\r\n                            editFieldType=\"text\"\r\n                            customEditRenderer={handleCustomEditTextBox}\r\n                        ></DataTable.Column>\r\n                    </DataTable>\r\n                </div>\r\n\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport LoadingArmDetails from \"../../UIBase/Details/LoadingArmDetails\";\r\nimport { SiteDetailsUserActions } from \"../../UIBase/Common/SiteDetailsUserActions\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport lodash from \"lodash\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport { loadingArmValidationDef } from \"../../../JS/ValidationDef\";\r\nimport { emptyLoadingArm } from \"../../../JS/DefaultEntities\";\r\nimport { fnSiteView, fnRailSiteView, fnMarineSiteView, functionGroups } from \"../../../JS/FunctionGroups\";\r\nimport { loadingArmAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass LoadingArmDetailsComposite extends Component {\r\n  state = {\r\n    loadingArm: {},\r\n    modLoadingArm: {},\r\n    isReadyToRender: false,\r\n    saveEnabled: false,\r\n    isDeleteEnabled: false,\r\n    selectedLocationType: \"\",\r\n    checkedDevices: [],\r\n    deviceBlendOptions: [],\r\n    loadingTypeOptions: [],\r\n    deviceModel: \"\",\r\n    IsTransloading: false,\r\n    densityUOMOptions: [],\r\n    modAssociations: [],\r\n    selectedRows: [],\r\n    unselectedRows: [],\r\n    attributeMetaDataList: [],\r\n    selectedAttributeList: [],\r\n    attributeValidationErrors: [],\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      loadingArmValidationDef\r\n    ),\r\n    IsDualBay: false,\r\n    possibleFps: [],\r\n    deniedFPs: [],\r\n    showDeleteAuthenticationLayout: false,\r\n    showSaveAuthenticationLayout: false,\r\n    tempLoadingArm: {},\r\n    possibleSwingArmAssociations: [],\r\n    selectedSwingArmAssociations: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getBCUDeviceDetails(this.props.deviceCode);\r\n      //this.getLoadingArm(this.props\r\n      this.getLoadingTypes();\r\n      this.getBlendTypes(this.state.deviceModel);\r\n      this.getUOMList();\r\n      this.getAttributes(this.props);\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        nextProps.LocationCode === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        // this.getLoadingArm(nextProps)\r\n        this.getAttributes(nextProps);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getAttributes(props) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [loadingArmAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.loadingArm\r\n                ),\r\n            },\r\n            () => this.getLoadingArm(props)\r\n          );\r\n        } else {\r\n          console.log(\"Error in getAttributes:\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n\r\n  getBlendTypes(deviceModel) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetBlendTypes + deviceModel,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            var deviceBlendOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ deviceBlendOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getDeviceTypes:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error while getting getBlendTypes\"\r\n      );\r\n    }\r\n  }\r\n\r\n  getBCUDeviceDetails(deviceCode) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.bcuCode,\r\n          value: deviceCode,\r\n        },\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value: this.props.selectedTerminal,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.bcuCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetBCUDevice,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            deviceModel: result.EntityResult.Model,\r\n            IsTransloading: result.EntityResult.IsTransloading,\r\n            IsDualBay: result.EntityResult.IsDualBay,\r\n          });\r\n\r\n          this.getBlendTypes(this.state.deviceModel);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error while getting getBCUDeviceDetails\"\r\n      );\r\n    }\r\n  }\r\n\r\n  getLoadingArm(propsResult) {\r\n    let loadingArmCode = propsResult.loadingArmCode;\r\n    let isTransloading = lodash.cloneDeep(this.state.IsTransloading);\r\n    if (isTransloading === true) {\r\n      emptyLoadingArm.BlendType = Constants.IsTransloading.NONE;\r\n      emptyLoadingArm.ArmLoadingType = Constants.IsTransloading.LOADING;\r\n    } else {\r\n      emptyLoadingArm.BlendType = \"\";\r\n      emptyLoadingArm.ArmLoadingType = \"\";\r\n    }\r\n    try {\r\n      if (propsResult.isClone === true) {\r\n        this.setState(\r\n          {\r\n            selectedAttributeList: [],\r\n            loadingArm: lodash.cloneDeep(emptyLoadingArm),\r\n            modLoadingArm: lodash.cloneDeep(emptyLoadingArm),\r\n            isReadyToRender: true,\r\n            modAssociations: [],\r\n            selectedRows: [],\r\n            isDeleteEnabled: false,\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n          },\r\n          () => {\r\n            this.localNodeAttribute();\r\n            if (!this.state.IsDualBay)\r\n              this.fetchPossibleSwingArmAssociation();\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      if (loadingArmCode === undefined || loadingArmCode === \"\") {\r\n        this.setState(\r\n          {\r\n            selectedAttributeList: [],\r\n            loadingArm: lodash.cloneDeep(emptyLoadingArm),\r\n            modLoadingArm: lodash.cloneDeep(emptyLoadingArm),\r\n            modAssociations: [],\r\n            selectedRows: [],\r\n            isDeleteEnabled: false,\r\n            isReadyToRender: true,\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n          },\r\n          () => {\r\n            this.localNodeAttribute();\r\n            if (!this.state.IsDualBay)\r\n              this.fetchPossibleSwingArmAssociation();\r\n          }\r\n        );\r\n        return;\r\n      }\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.loadingArmCode,\r\n          value: loadingArmCode,\r\n        },\r\n        {\r\n          key: KeyCodes.transportaionType,\r\n          value: this.props.transportationtype,\r\n        },\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value: this.props.selectedTerminal,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.loadingArmCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetLoadingArm,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        let modAssociations = [];\r\n        let selectedRows = [];\r\n\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              selectedAttributeList: [],\r\n              loadingArm: lodash.cloneDeep(result.EntityResult),\r\n              modLoadingArm: lodash.cloneDeep(result.EntityResult),\r\n              isReadyToRender: true,\r\n              modAssociations: [],\r\n              selectedRows: [],\r\n              isDeleteEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.remove,\r\n                Utilities.getSiteViewFunctionGroup(\r\n                  this.props.transportationtype\r\n                )\r\n              ),\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                Utilities.getSiteViewFunctionGroup(\r\n                  this.props.transportationtype\r\n                )\r\n              ),\r\n            },\r\n            () => {\r\n              if (this.state.loadingArm.Swingable && !this.state.IsDualBay) {\r\n                this.fetchPossibleSwingArmAssociation();\r\n              }\r\n\r\n              this.terminalSelectionChange([result.EntityResult.TerminalCode]);\r\n            }\r\n          );\r\n          let modLoadingArm = this.state.modLoadingArm;\r\n          var deviceModel = this.state.deviceModel;\r\n          let possibleFps = [];\r\n          let deniedFPs = [];\r\n          if (\r\n            deviceModel === Constants.LoadingArmConstants.MSC_L &&\r\n            modLoadingArm.BlendType === Constants.LoadingArmConstants.RATIO\r\n          ) {\r\n            modLoadingArm.BlendType =\r\n              Constants.LoadingArmConstants.RATIO_SEQUENTIAL;\r\n          }\r\n          if (result.EntityResult.DeniedFPs != null) {\r\n            deniedFPs = result.EntityResult.DeniedFPs;\r\n\r\n            deniedFPs.forEach((deniedFp) => {\r\n              modAssociations.push({\r\n                Code: deniedFp.Code,\r\n                Shareholdercode: deniedFp.Shareholdercode,\r\n              });\r\n            });\r\n          }\r\n          if (result.EntityResult.PossibleFPs != null) {\r\n            possibleFps = result.EntityResult.PossibleFPs;\r\n            possibleFps.forEach((possibleFp) => {\r\n              modAssociations.push({\r\n                Code: possibleFp.Code,\r\n                Shareholdercode: possibleFp.Shareholdercode,\r\n              });\r\n            });\r\n\r\n            possibleFps.forEach((possibleFp) => {\r\n              selectedRows.push({\r\n                Code: possibleFp.Code,\r\n                Shareholdercode: possibleFp.Shareholdercode,\r\n              });\r\n            });\r\n          }\r\n          this.setState({\r\n            modLoadingArm,\r\n            modAssociations,\r\n            selectedRows: selectedRows,\r\n            possibleFps: possibleFps,\r\n            deniedFPs: deniedFPs,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            loadingArm: lodash.cloneDeep(emptyLoadingArm),\r\n            modLoadingArm: lodash.cloneDeep(emptyLoadingArm),\r\n            isReadyToRender: true,\r\n            modAssociations: [],\r\n            selectedRows: [],\r\n            isDeleteEnabled: false,\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured in getLoadingArm\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      let attributesTerminalsList = [];\r\n      var attributeMetaDataList = [];\r\n      var selectedAttributeList = [];\r\n      attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      selectedAttributeList = lodash.cloneDeep(\r\n        this.state.selectedAttributeList\r\n      );\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n      var modLoadingArm = lodash.cloneDeep(this.state.modLoadingArm);\r\n\r\n      selectedTerminals.forEach((terminal) => {\r\n        var existitem = selectedAttributeList.find((selectedAttribute) => {\r\n          return selectedAttribute.TerminalCode === terminal;\r\n        });\r\n\r\n        if (existitem === undefined) {\r\n          attributeMetaDataList.loadingArm.forEach(function (\r\n            attributeMetaData\r\n          ) {\r\n            if (attributeMetaData.TerminalCode === terminal) {\r\n              var Attributevalue = modLoadingArm.Attributes.find(\r\n                (bayAttribute) => {\r\n                  return bayAttribute.TerminalCode === terminal;\r\n                }\r\n              );\r\n              if (Attributevalue !== undefined) {\r\n                attributeMetaData.attributeMetaDataList.forEach(function (\r\n                  attributeMetaData\r\n                ) {\r\n                  var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                    (x) => {\r\n                      return x.AttributeCode === attributeMetaData.Code;\r\n                    }\r\n                  );\r\n                  if (valueAttribute !== undefined)\r\n                    attributeMetaData.DefaultValue =\r\n                      valueAttribute.AttributeValue;\r\n                });\r\n              }\r\n              attributesTerminalsList.push(attributeMetaData);\r\n            }\r\n          });\r\n        } else {\r\n          attributesTerminalsList.push(existitem);\r\n        }\r\n      });\r\n      selectedAttributeList = [];\r\n      selectedAttributeList = attributesTerminalsList;\r\n      selectedAttributeList = Utilities.attributesConvertoDecimal(\r\n        selectedAttributeList\r\n      );\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n          return attributeValidation.TerminalCode === selectedTerminals;\r\n        });\r\n        if (existTerminal === undefined) {\r\n          Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n            (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n          );\r\n        }\r\n      });\r\n\r\n      this.setState({ selectedAttributeList, attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      this.terminalSelectionChange([this.props.selectedTerminal]);\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleCellDataEdit = (newVal, cellData) => {\r\n    let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n    modAssociations[cellData.rowIndex][cellData.field] = newVal;\r\n    this.setState({ modAssociations });\r\n  };\r\n\r\n  getLoadingTypes() {\r\n    axios(\r\n      RestAPIs.GetLoadingType,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            var loadingTypeOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ loadingTypeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getLoadingTypes:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting getLoadingTypes:\", error);\r\n      });\r\n  }\r\n  getUOMList() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetUOMList,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            let densityUOMOptions = [];\r\n            let uomOptions = [];\r\n            if (\r\n              Array.isArray(result.EntityResult.VOLUME) &&\r\n              Array.isArray(result.EntityResult.MASS)\r\n            ) {\r\n              uomOptions = result.EntityResult.VOLUME.concat(\r\n                result.EntityResult.MASS\r\n              );\r\n            }\r\n\r\n            densityUOMOptions = Utilities.transferListtoOptions(uomOptions);\r\n            this.setState({ densityUOMOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"LoadingArmDetailsComposite:Error while getting GetUOMList\");\r\n    }\r\n  }\r\n\r\n  handleRowSelectionChange = (associationRow) => {\r\n    this.setState({ selectedRows: associationRow });\r\n  };\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      let modLoadingArm = lodash.cloneDeep(this.state.modLoadingArm);\r\n      modLoadingArm[propertyName] = data;\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      if (modLoadingArm.Status === this.state.loadingArm.Status) {\r\n        if (\r\n          this.state.loadingArm.Remarks === modLoadingArm.Remarks ||\r\n          modLoadingArm.Remarks === \"\"\r\n        ) {\r\n          validationErrors.Remarks = \"\";\r\n        }\r\n        if (modLoadingArm.Remarks === \"\")\r\n          modLoadingArm.Remarks = this.state.loadingArm.Remarks;\r\n      }\r\n      if (modLoadingArm.Swingable === true) {\r\n        modLoadingArm.AssociatedBay = 0;\r\n      }\r\n      if (propertyName === \"Status\") {\r\n        if (modLoadingArm.Status !== this.state.loadingArm.Status) {\r\n          modLoadingArm.Remarks = \"\";\r\n        }\r\n      }\r\n      if (loadingArmValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          loadingArmValidationDef[propertyName],\r\n          data\r\n        );\r\n      }\r\n      this.setState({ validationErrors, modLoadingArm });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modLoadingArm = lodash.cloneDeep(this.state.modLoadingArm);\r\n      modLoadingArm.Status = value;\r\n      if (modLoadingArm.Status !== this.state.loadingArm.Status)\r\n        modLoadingArm.Remarks = \"\";\r\n      this.setState({ modLoadingArm });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on handleActiveStatusChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  saveLoadingArm = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempLoadingArm = lodash.cloneDeep(this.state.tempLoadingArm);\r\n\r\n      this.state.loadingArm.Code === \"\"\r\n        ? this.createLoadingArm(tempLoadingArm)\r\n        : this.updateLoadingArm(tempLoadingArm);\r\n\r\n    } catch (error) {\r\n      console.log(\"GantryComposite : Error in saveGantry\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n      //  this.setState({ saveEnabled: false });\r\n      let modLoadingArm = this.fillDetails();\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.selectedAttributeList\r\n      );\r\n      if (this.validateSave(modLoadingArm, attributeList)) {\r\n        modLoadingArm = this.fillAttributeDetails(modLoadingArm, attributeList);\r\n\r\n        let showSaveAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n        let tempLoadingArm = lodash.cloneDeep(modLoadingArm);\r\n        this.setState({ showSaveAuthenticationLayout, tempLoadingArm }, () => {\r\n          if (showSaveAuthenticationLayout === false) {\r\n            this.saveLoadingArm();\r\n          }\r\n        });\r\n\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleDelete = () => {\r\n    try {\r\n      var deleteLocationKeys = [];\r\n      var LoadingArmCode = this.state.modLoadingArm.Code;\r\n      var keyData = {\r\n        keyDataCode: 0,\r\n        ShareHolderCode: \"\",\r\n        KeyCodes: [\r\n          { Key: KeyCodes.loadingArmCode, Value: LoadingArmCode },\r\n          {\r\n            Key: KeyCodes.transportaionType,\r\n            Value: this.props.transportationtype,\r\n          },\r\n          { Key: KeyCodes.terminalCode, Value: this.props.selectedTerminal },\r\n        ],\r\n      };\r\n      deleteLocationKeys.push(keyData);\r\n      axios(\r\n        RestAPIs.DeleteLoadingArm,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          deleteLocationKeys,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        var isRefreshDataRequire = result.IsSuccess;\r\n        if (\r\n          result.ResultDataList !== null &&\r\n          result.ResultDataList !== undefined\r\n        ) {\r\n          var failedResultsCount = result.ResultDataList.filter(function (res) {\r\n            return !res.IsSuccess;\r\n          }).length;\r\n          if (failedResultsCount === result.ResultDataList.length) {\r\n            isRefreshDataRequire = false;\r\n          } else isRefreshDataRequire = true;\r\n        }\r\n        var notification = Utilities.convertResultsDatatoNotification(\r\n          result,\r\n          [\"LoadingArmDeletionSuccess\"],\r\n          [\"LoadingArmCode\"]\r\n        );\r\n        if (isRefreshDataRequire) {\r\n          this.getLoadingArm({\r\n            loadingArmCode: this.state.modLoadingArm.Code,\r\n            selectedTerminal: this.props.selectedTerminal,\r\n            isClone: false,\r\n          });\r\n          this.setState({\r\n            isDeleteEnabled: false, showDeleteAuthenticationLayout: false,\r\n          });\r\n        } else {\r\n          this.setState({ isDeleteEnabled: true, showDeleteAuthenticationLayout: false });\r\n        }\r\n        notification.messageResultDetails.forEach((messageResult) => {\r\n          if (messageResult.keyFields.length > 0)\r\n            messageResult.keyFields[0] = [\"Loadingrm_Code\"];\r\n        });\r\n\r\n        this.props.onDelete(this.state.modLoadingArm, \"delete\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on handleDelete\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  fillDetails() {\r\n    try {\r\n      let modLoadingArm = lodash.cloneDeep(this.state.modLoadingArm);\r\n      let IsDualBay = lodash.cloneDeep(this.state.IsDualBay);\r\n      if (\r\n        modLoadingArm.BlendType ===\r\n        Constants.LoadingArmConstants.RATIO_SEQUENTIAL\r\n      ) {\r\n        modLoadingArm.BlendType = Constants.LoadingArmConstants.RATIO;\r\n      }\r\n      modLoadingArm.BcuCode = this.props.deviceCode;\r\n      modLoadingArm.TerminalCode = this.props.selectedTerminal;\r\n      if (IsDualBay !== true) {\r\n        modLoadingArm.AssociatedBay = 0;\r\n      }\r\n\r\n      if (IsDualBay === true && modLoadingArm.Swingable === true) {\r\n        modLoadingArm.AssociatedBay = 0;\r\n      }\r\n      let possibleFps = lodash.cloneDeep(this.state.possibleFps);\r\n      let selectedRows = lodash.cloneDeep(this.state.selectedRows);\r\n      let deniedFPs = lodash.cloneDeep(this.state.deniedFPs);\r\n      let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n\r\n      if (modAssociations.length === 1) {\r\n        if (\r\n          possibleFps.length === 1 &&\r\n          selectedRows.length === 0 &&\r\n          deniedFPs.length === 0\r\n        ) {\r\n          possibleFps.forEach((possibleFp) => {\r\n            modLoadingArm.DeniedFPs.push({\r\n              Code: possibleFp.Code,\r\n              Shareholdercode: possibleFp.Shareholdercode,\r\n            });\r\n          });\r\n\r\n          modLoadingArm.PossibleFPs = [];\r\n        } else if (\r\n          possibleFps.length === 0 &&\r\n          selectedRows.length === 1 &&\r\n          deniedFPs.length === 1\r\n        ) {\r\n          deniedFPs.forEach((possibleFp) => {\r\n            modLoadingArm.PossibleFPs.push({\r\n              Code: possibleFp.Code,\r\n              Shareholdercode: possibleFp.Shareholdercode,\r\n            });\r\n          });\r\n\r\n          modLoadingArm.DeniedFPs = [];\r\n        }\r\n      } else if (modAssociations.length === selectedRows.length) {\r\n        modLoadingArm.PossibleFPs = [];\r\n\r\n        selectedRows.forEach((possibleFp) => {\r\n          modLoadingArm.PossibleFPs.push({\r\n            Code: possibleFp.Code,\r\n            Shareholdercode: possibleFp.Shareholdercode,\r\n          });\r\n        });\r\n\r\n        modLoadingArm.DeniedFPs = [];\r\n      } else {\r\n        if (selectedRows.length === 0) {\r\n          modLoadingArm.DeniedFPs = [];\r\n\r\n          modAssociations.forEach((possibleFp) => {\r\n            modLoadingArm.DeniedFPs.push({\r\n              Code: possibleFp.Code,\r\n              Shareholdercode: possibleFp.Shareholdercode,\r\n            });\r\n          });\r\n\r\n          modLoadingArm.PossibleFPs = [];\r\n        } else {\r\n          modLoadingArm.DeniedFPs = [];\r\n          modLoadingArm.PossibleFPs = [];\r\n          modAssociations.forEach((var2) => {\r\n            if (selectedRows.filter(row => row.Code === var2.Code && row.Shareholdercode === var2.Shareholdercode).length === 0) {\r\n              modLoadingArm.DeniedFPs.push({\r\n                Code: var2.Code,\r\n                Shareholdercode: var2.Shareholdercode\r\n              })\r\n            }\r\n          });\r\n\r\n          selectedRows.forEach((var2) => {\r\n            modLoadingArm.PossibleFPs.push({\r\n              Code: var2.Code,\r\n              Shareholdercode: var2.Shareholdercode,\r\n            });\r\n          });\r\n        }\r\n      }\r\n\r\n      if (modLoadingArm.Swingable && !IsDualBay) {\r\n        let associatedArmCollection = []\r\n        this.state.possibleSwingArmAssociations.forEach(arm => {\r\n          if (this.state.selectedSwingArmAssociations.filter(selectedRow => selectedRow.LoadArmCode === arm.LoadArmCode).length > 0) {\r\n            associatedArmCollection.push(arm.LoadArmCode);\r\n          }\r\n        });\r\n\r\n        modLoadingArm.AssociatedArmCollection = [...associatedArmCollection];\r\n      }\r\n\r\n      return modLoadingArm;\r\n    } catch (err) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on filldetails\",\r\n        err\r\n      );\r\n    }\r\n  }\r\n\r\n  fillAttributeDetails(modLoadingArm, attributeList) {\r\n    try {\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modLoadingArm.Attributes = [];\r\n      attributeList.forEach((comp) => {\r\n        let attribute = {\r\n          ListOfAttributeData: [],\r\n        };\r\n        attribute.TerminalCode = comp.TerminalCode;\r\n        comp.attributeMetaDataList.forEach((det) => {\r\n          attribute.ListOfAttributeData.push({\r\n            AttributeCode: det.Code,\r\n            AttributeValue: det.DefaultValue,\r\n          });\r\n        });\r\n        modLoadingArm.Attributes.push(attribute);\r\n      });\r\n      return modLoadingArm;\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on fillAttributeDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  validateSave(modLoadingArm, attributeList) {\r\n    const validationErrors = { ...this.state.validationErrors };\r\n    Object.keys(loadingArmValidationDef).forEach(function (key) {\r\n      if (modLoadingArm[key] !== undefined)\r\n        validationErrors[key] = Utilities.validateField(\r\n          loadingArmValidationDef[key],\r\n          modLoadingArm[key]\r\n        );\r\n    });\r\n    if (modLoadingArm.Status !== this.state.loadingArm.Status) {\r\n      if (modLoadingArm.Remarks === null || modLoadingArm.Remarks === \"\") {\r\n        validationErrors[\"Remarks\"] = \"OriginTerminal_RemarksRequired\";\r\n      }\r\n    }\r\n\r\n    if (this.state.deviceModel === \"Accuload-IV\") {\r\n      if (\r\n        modLoadingArm.NodeAddress === null ||\r\n        modLoadingArm.NodeAddress === \"\"\r\n      ) {\r\n        validationErrors[\"NodeAddress\"] = \"CardReader_MandatoryAddress\";\r\n      }\r\n    }\r\n    if (\r\n      modLoadingArm.CleanLineFinishQuantity === null ||\r\n      modLoadingArm.CleanLineFinishQuantity === \"\"\r\n    ) {\r\n      validationErrors[\"CleanLineFinishQuantity\"] =\r\n        \"CleanLineFinishQuantity_Empty_x\";\r\n    }\r\n    if (\r\n      modLoadingArm.MinimumLoadableQuantity === null ||\r\n      modLoadingArm.MinimumLoadableQuantity === \"\"\r\n    ) {\r\n      validationErrors[\"MinimumLoadableQuantity\"] =\r\n        \"MinimumLoadableQuantity_Empty_x\";\r\n    }\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: [\"LoadingArmSavedSuccess\"],\r\n      messageResultDetails: [],\r\n    };\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({ validationErrors, attributeValidationErrors });\r\n    var returnValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n    if (notification.messageResultDetails.length > 0) {\r\n      this.props.onSaved(this.state.modLocation, \"update\", notification);\r\n      return false;\r\n    }\r\n    return returnValue;\r\n  }\r\n\r\n  createLoadingArm(modLoadingArm) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.loadingArmCode,\r\n          value: modLoadingArm.Code,\r\n        },\r\n        {\r\n          key: KeyCodes.transportaionType,\r\n          value: this.props.transportationtype,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.loadingArmCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modLoadingArm,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"LoadingArmCodeSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"LoadingArmCode\"],\r\n            keyValues: [modLoadingArm.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.CreateLoadingArm,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n            showSaveAuthenticationLayout: false,\r\n          });\r\n          this.getLoadingArm({\r\n            loadingArmCode: this.state.modLoadingArm.Code,\r\n            selectedTerminal: this.props.selectedTerminal,\r\n            isClone: false,\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n            showSaveAuthenticationLayout: false,\r\n          });\r\n        }\r\n        this.props.onSaved(this.state.modLoadingArm, \"add\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on createLoadingArm\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  updateLoadingArm(modLoadingArm) {\r\n    try {\r\n      let keyCode = [\r\n        {\r\n          key: KeyCodes.loadingArmCode,\r\n          value: modLoadingArm.Code,\r\n        },\r\n        {\r\n          key: KeyCodes.transportaionType,\r\n          value: this.props.transportationtype,\r\n        },\r\n      ];\r\n\r\n      let obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: KeyCodes.loadingArmCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modLoadingArm,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: [\"LoadingArmCodeSavedSuccess\"],\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"LoadingArmCode\"],\r\n            keyValues: [modLoadingArm.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.UpdateLoadingArm,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n            showSaveAuthenticationLayout: false,\r\n          });\r\n          this.getLoadingArm({\r\n            loadingArmCode: this.state.modLoadingArm.Code,\r\n            selectedTerminal: this.props.selectedTerminal,\r\n            isClone: false,\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              Utilities.getSiteViewFunctionGroup(this.props.transportationtype)\r\n            ),\r\n            showSaveAuthenticationLayout: false,\r\n          });\r\n        }\r\n        this.props.onSaved(this.state.modLocation, \"update\", notification);\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on updateLoadingArm\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleAttributeCellDataEdit = (attribute, value) => {\r\n    try {\r\n      attribute.DefaultValue = value;\r\n      this.setState({\r\n        attribute: attribute,\r\n      });\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"LoadingArmDetailsComposite:Error occured on handleCellDataEdit\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  authenticateDelete = () => {\r\n    try {\r\n      let showDeleteAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      this.setState({ showDeleteAuthenticationLayout });\r\n      if (showDeleteAuthenticationLayout === false) {\r\n        this.handleDelete();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"LoadingArmComposite : Error in authenticateDelete\");\r\n    }\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showSaveAuthenticationLayout: false,\r\n      showDeleteAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  handleOperation() {\r\n    return this.state.showDeleteAuthenticationLayout ? this.handleDelete : this.saveLoadingArm;\r\n  };\r\n\r\n  getFunctionGroupName() {\r\n    if (this.props.transportationtype === Constants.TransportationType.RAIL)\r\n      return fnRailSiteView;\r\n    else if (this.props.transportationtype === Constants.TransportationType.MARINE)\r\n      return fnMarineSiteView\r\n    else\r\n      return fnSiteView\r\n  };\r\n\r\n  getFunctionName() {\r\n    return this.state.showDeleteAuthenticationLayout ? functionGroups.remove :\r\n      this.state.loadingArm.Code === \"\"\r\n        ? functionGroups.add\r\n        : functionGroups.modify\r\n  };\r\n\r\n  fetchPossibleSwingArmAssociation = () => {\r\n    let swingArmRequestObj = {\r\n      ShareHolderCode: \"\",\r\n      keyDataCode: KeyCodes.loadingArmCode,\r\n      KeyCodes: [{\r\n        key: KeyCodes.loadingArmCode,\r\n        value: this.state.loadingArm.Code,\r\n      },\r\n      {\r\n        key: KeyCodes.transportaionType,\r\n        value: this.props.transportationtype,\r\n      },\r\n      {\r\n        key: KeyCodes.terminalCode,\r\n        value: this.props.selectedTerminal,\r\n      },\r\n      {\r\n        key: KeyCodes.bcuCode,\r\n        value: this.props.deviceCode,\r\n      }]\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.GetLoadingArmSwingArmList,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        swingArmRequestObj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    ).then(response => {\r\n      if (response.data.IsSuccess) {\r\n        let selectedSwingArms = [];\r\n        if (Array.isArray(this.state.loadingArm.AssociatedArmCollection) && Array.isArray(response.data.EntityResult)) {\r\n          response.data.EntityResult.forEach(row => {\r\n            if (this.state.loadingArm.AssociatedArmCollection.includes(row.LoadArmCode)) {\r\n              selectedSwingArms.push(row);\r\n            }\r\n          })\r\n        }\r\n\r\n        this.setState({\r\n          possibleSwingArmAssociations: response.data.EntityResult,\r\n          selectedSwingArmAssociations: selectedSwingArms\r\n        });\r\n      }\r\n    }).catch(error => {\r\n      this.setState({\r\n        possibleSwingArmAssociations: [],\r\n        selectedSwingArmAssociations: []\r\n      });\r\n      console.log(\"Error fetching possible swing arm associations: \", error);\r\n    });\r\n  }\r\n\r\n  handleSwingArmAssociationSelectionChange = (selectedArms) => {\r\n    this.setState({\r\n      selectedSwingArmAssociations: selectedArms\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"DriverInfo_LastUpdated\",\r\n        fieldValue:\r\n          new Date(this.state.loadingArm.LastUpdated).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modLoadingArm.LastUpdated).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"DriverInfo_LastActive\",\r\n        fieldValue:\r\n          this.state.modLoadingArm.LastActive !== undefined &&\r\n            this.state.modLoadingArm.LastActive !== null\r\n            ? new Date(\r\n              this.state.modLoadingArm.LastActive\r\n            ).toLocaleDateString() +\r\n            \" \" +\r\n            new Date(this.state.modLoadingArm.LastActive).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"DriverInfo_CreatedTime\",\r\n        fieldValue:\r\n          new Date(this.state.modLoadingArm.Created).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modLoadingArm.Created).toLocaleTimeString(),\r\n      },\r\n    ];\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.loadingArm.Code}\r\n            newEntityName=\"Loadingrm_Headder\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <LoadingArmDetails\r\n            loadingArm={this.state.loadingArm}\r\n            modLoadingArm={this.state.modLoadingArm}\r\n            modAssociations={this.state.modAssociations}\r\n            handleCellDataEdit={this.handleCellDataEdit}\r\n            IsDualBay={this.state.IsDualBay}\r\n            deviceModel={this.state.deviceModel}\r\n            listOptions={{\r\n              deviceBlendOptions: this.state.deviceBlendOptions,\r\n              loadingTypeOptions: this.state.loadingTypeOptions,\r\n              densityUOMOptions: this.state.densityUOMOptions,\r\n            }}\r\n            selectedRows={this.state.selectedRows}\r\n            handleRowSelectionChange={this.handleRowSelectionChange}\r\n            validationErrors={this.state.validationErrors}\r\n            onFieldChange={this.handleChange}\r\n            selectedAttributeList={this.state.selectedAttributeList}\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            attributeMetaDataList={this.state.attributeMetaDataList}\r\n            handleAttributeCellDataEdit={this.handleAttributeCellDataEdit}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            possibleSwingArmList={this.state.possibleSwingArmAssociations}\r\n            selectedSwingArmAssociations={this.state.selectedSwingArmAssociations}\r\n            onSwingArmAssociationSelectionChange={this.handleSwingArmAssociationSelectionChange}\r\n          />\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <SiteDetailsUserActions\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            handleSave={this.handleSave}\r\n            handleDelete={this.authenticateDelete}\r\n            saveEnabled={this.state.saveEnabled}\r\n            isDeleteEnabled={this.state.isDeleteEnabled}\r\n          ></SiteDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.showDeleteAuthenticationLayout || this.state.showSaveAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={this.getFunctionName()}\r\n            functionGroup={this.getFunctionGroupName()}\r\n            handleClose={this.handleAuthenticationClose}\r\n            handleOperation={this.handleOperation()}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(LoadingArmDetailsComposite);\r\n"],"names":["LoadingArmDetails","_ref","loadingArm","modLoadingArm","modAssociations","listOptions","selectedRows","handleRowSelectionChange","handleCellDataEdit","validationErrors","onFieldChange","onActiveStatusChange","attributeValidationErrors","selectedAttributeList","handleAttributeCellDataEdit","deviceModel","IsDualBay","possibleSwingArmList","selectedSwingArmAssociations","onSwingArmAssociationSelectionChange","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","t","useTranslation","handleCustomEditTextBox","cellData","_jsx","Input","fluid","value","rowIndex","field","onChange","reserveSpace","className","children","_jsxs","Code","label","indicator","disabled","data","error","Name","ArmNumberInBCU","Select","placeholder","BlendType","options","deviceBlendOptions","ArmLoadingType","text","NodeAddress","InputLabel","CleanLineFinishQuantity","CleanLineFinishQuantityUOM","densityUOMOptions","search","noResultsMessage","MinimumLoadableQuantity","MLQtyUOM","MainlineMeters","AdditiveMeters","Description","Status","Remarks","AssociatedBay","Constants","Swingable","Microload","Checkbox","checked","DataTable","selectionMode","scrollable","selection","onSelectionChange","onSelectAll","scrollHeight","Column","header","length","map","attire","ErrorBoundary","Accordion","Content","title","AttributeDetails","attributeMetaDataList","sortable","editFieldType","customEditRenderer","LoadingArmDetailsComposite","Component","constructor","arguments","state","isReadyToRender","saveEnabled","isDeleteEnabled","selectedLocationType","checkedDevices","loadingTypeOptions","IsTransloading","unselectedRows","Utilities","loadingArmValidationDef","possibleFps","deniedFPs","showDeleteAuthenticationLayout","showSaveAuthenticationLayout","tempLoadingArm","possibleSwingArmAssociations","newVal","lodash","this","setState","associationRow","handleChange","propertyName","undefined","console","log","handleActiveStatusChange","saveLoadingArm","createLoadingArm","updateLoadingArm","handleSave","fillDetails","attributeList","validateSave","fillAttributeDetails","props","userDetails","EntityResult","IsWebPortalUser","handleDelete","deleteLocationKeys","LoadingArmCode","keyData","keyDataCode","ShareHolderCode","KeyCodes","Key","Value","transportationtype","selectedTerminal","push","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","isRefreshDataRequire","IsSuccess","ResultDataList","filter","res","notification","getLoadingArm","loadingArmCode","isClone","messageResultDetails","forEach","messageResult","keyFields","onDelete","attribute","DefaultValue","authenticateDelete","handleAuthenticationClose","fetchPossibleSwingArmAssociation","swingArmRequestObj","key","deviceCode","selectedSwingArms","Array","isArray","AssociatedArmCollection","row","includes","LoadArmCode","catch","handleSwingArmAssociationSelectionChange","selectedArms","componentDidMount","IsArchived","getBCUDeviceDetails","getLoadingTypes","getBlendTypes","getUOMList","getAttributes","componentWillReceiveProps","nextProps","LocationCode","Object","keys","loadingArmAttributeEntity","ErrorList","keyCode","obj","Model","propsResult","emptyLoadingArm","NONE","LOADING","FunctionsList","functionGroups","add","localNodeAttribute","remove","modify","terminalSelectionChange","MSC_L","RATIO","RATIO_SEQUENTIAL","DeniedFPs","deniedFp","Shareholdercode","PossibleFPs","possibleFp","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","Attributes","bayAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","uomOptions","VOLUME","MASS","concat","BcuCode","var2","associatedArmCollection","arm","selectedRow","err","comp","det","messageType","message","returnValue","values","every","onSaved","modLocation","Entity","keyValues","isSuccess","errorMessage","handleOperation","getFunctionGroupName","RAIL","fnRailSiteView","MARINE","fnMarineSiteView","fnSiteView","getFunctionName","render","popUpContents","fieldName","fieldValue","Date","LastUpdated","toLocaleDateString","toLocaleTimeString","LastActive","Created","TMDetailsHeader","entityCode","newEntityName","SiteDetailsUserActions","isEnterpriseNode","IsEnterpriseNode","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleClose","LoadingPage","connect","getUserDetails","TokenAuth"],"sourceRoot":""}