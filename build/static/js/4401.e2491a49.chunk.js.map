{"version":3,"file":"static/js/4401.e2491a49.chunk.js","mappings":"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","sources":["Components/UIBase/Details/PipelineDispatchManualEntryDetails.jsx","Components/Composite/Details/PipelineDispatchManualEntryDetailsComposite.jsx"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Input, Select, DatePicker, Accordion, Tab } from \"@scuf/common\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nPipelineDispatchManualEntryDetails.propTypes = {\r\n  modPipelineSnapshotInfo: PropTypes.object.isRequired,\r\n  modPipelineTankTransactionSnapshotInfo: PropTypes.object.isRequired,\r\n  modPipelineMeterTransactionSnapshotInfo: PropTypes.object.isRequired,\r\n  modDispatch: PropTypes.object.isRequired,\r\n  tankValidationErrors: PropTypes.object.isRequired,\r\n  meterValidationErrors: PropTypes.object.isRequired,\r\n  modAttributeMetaDataList: PropTypes.array.isRequired,\r\n  onAttributeDataChange: PropTypes.func.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    quantityUOMOptions: PropTypes.array,\r\n    densityUOMS: PropTypes.array,\r\n    temperatureUOMs: PropTypes.array,\r\n    volumeUOMs: PropTypes.array,\r\n    pressureUOMs: PropTypes.array,\r\n    tankCodes: PropTypes.array,\r\n    meterCodes: PropTypes.array,\r\n  }).isRequired,\r\n  attributeValidationErrors: PropTypes.array.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onTabChange: PropTypes.func.isRequired,\r\n  activeIndex: PropTypes.number.isRequired,\r\n  isMeterRequired: PropTypes.bool.isRequired,\r\n  isTankRequired: PropTypes.bool.isRequired,\r\n  onDateTextChange: PropTypes.func.isRequired,\r\n};\r\n\r\nPipelineDispatchManualEntryDetails.defaultProps = {};\r\n\r\nexport function PipelineDispatchManualEntryDetails({\r\n  modPipelineSnapshotInfo,\r\n  modPipelineTankTransactionSnapshotInfo,\r\n  modPipelineMeterTransactionSnapshotInfo,\r\n  tankValidationErrors,\r\n  meterValidationErrors,\r\n  listOptions,\r\n  modAttributeMetaDataList,\r\n  attributeValidationErrors,\r\n  onFieldChange,\r\n  onTabChange,\r\n  onAttributeDataChange,\r\n  activeIndex,\r\n  modDispatch,\r\n  isMeterRequired,\r\n  isTankRequired,\r\n  onDateTextChange\r\n}) {\r\n  const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n    let attributeValidation = [];\r\n    if (attributeValidationErrors !== undefined)\r\n      attributeValidation = attributeValidationErrors.find(\r\n        (selectedAttribute) => {\r\n          return selectedAttribute.TerminalCode === terminal;\r\n        }\r\n      );\r\n    return attributeValidation.attributeValidationErrors;\r\n  };\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div>\r\n          <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modDispatch.FinishedProductCode}\r\n                  label={t(\"PipelineDispatch_FinishedProductCode\")}\r\n                  disabled={true}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modDispatch.PipelineDispatchCode}\r\n                  label={t(\"PipelineEntry_PipelineHeaderDispatchCode\")}\r\n                  disabled={true}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modDispatch.PipelineHeaderCode}\r\n                  label={t(\"PipelineEntry_PipelineHeaderCode\")}\r\n                  disabled={true}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  value={listOptions.tankCodes}\r\n                  label={t(\"PipelineEntry_PlanedTank\")}\r\n                  options={Utilities.transferListtoOptions(\r\n                    listOptions.tankCodes\r\n                  )}\r\n                  disabled={true}\r\n                  multiple={true}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  value={[modDispatch.PipelineHeaderMeterCode]}\r\n                  label={t(\"PipelineEntry_PlanedMeter\")}\r\n                  options={Utilities.transferListtoOptions(\r\n                    listOptions.meterCodes\r\n                  )}\r\n                  disabled={true}\r\n                  multiple={true}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <DatePicker\r\n                  fluid\r\n                  value={modPipelineTankTransactionSnapshotInfo.ScanStartTime}\r\n                  label={t(\"PipelineEntry_CaptureStartTime\")}\r\n                  type=\"datetime\"\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  disablePast={false}\r\n                  disableFuture={true}\r\n                  indicator=\"required\"\r\n                  onChange={(data) =>\r\n                    onFieldChange(\"ScanStartTime\", data, \"Tank\")\r\n                  }\r\n                  onTextChange={(value, error) => {\r\n                    onDateTextChange(\"ScanStartTime\", value, error);\r\n                  }}\r\n                  error={t(tankValidationErrors.ScanStartTime)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <DatePicker\r\n                  fluid\r\n                  value={modPipelineTankTransactionSnapshotInfo.ScanEndTime}\r\n                  label={t(\"PipelineEntry_CaptureEndTime\")}\r\n                  type=\"datetime\"\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  disablePast={false}\r\n                  disableFuture={true}\r\n                  indicator=\"required\"\r\n                  onChange={(data) =>\r\n                    onFieldChange(\"ScanEndTime\", data, \"Tank\")\r\n                  }\r\n                  onTextChange={(value, error) => {\r\n                    onDateTextChange(\"ScanEndTime\", value, error);\r\n                  }}\r\n                  error={t(tankValidationErrors.ScanEndTime)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modPipelineSnapshotInfo.Remarks}\r\n                  label={t(\"LoadingDetailsEntry_Remarks\")}\r\n                  onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                  reserveSpace={false}\r\n                  error={t(tankValidationErrors.Remarks)}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {modAttributeMetaDataList.length > 0\r\n              ? modAttributeMetaDataList.map((attire) => (\r\n                  <ErrorBoundary>\r\n                    <Accordion>\r\n                      <Accordion.Content\r\n                        className=\"attributeAccordian\"\r\n                        title={t(\"Attributes_Header\")}\r\n                      >\r\n                        <AttributeDetails\r\n                          selectedAttributeList={attire.attributeMetaDataList}\r\n                          handleCellDataEdit={onAttributeDataChange}\r\n                          attributeValidationErrors={handleValidationErrorFilter(\r\n                            attributeValidationErrors,\r\n                            attire.TerminalCode\r\n                          )}\r\n                        ></AttributeDetails>\r\n                      </Accordion.Content>\r\n                    </Accordion>\r\n                  </ErrorBoundary>\r\n                ))\r\n              : null}\r\n\r\n            <Tab\r\n              activeIndex={activeIndex}\r\n              onTabChange={(index) => onTabChange(index)}\r\n            >\r\n              <Tab.Pane title={t(\"Pipeline_Header_meter_Level_Trasaction\")}>\r\n                <div className=\"row\">\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      placeholder={t(\"Common_Select\")}\r\n                      label={t(\"PipelineEntry_PipelineMeterCode\")}\r\n                      value={modPipelineMeterTransactionSnapshotInfo.MeterCode}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"MeterCode\", data, \"Meter\")\r\n                      }\r\n                      indicator={isMeterRequired ? \"required\" : null}\r\n                      error={t(meterValidationErrors.MeterCode)}\r\n                      options={Utilities.transferListtoOptions(\r\n                        listOptions.meterCodes\r\n                      )}\r\n                      reserveSpace={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineMeterTransactionSnapshotInfo.GrossStartTotalizer\r\n                      }\r\n                      label={t(\"PipelineMeter_StartGrossTotalizer\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"GrossStartTotalizer\", data, \"Meter\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(meterValidationErrors.GrossStartTotalizer)}\r\n                      indicator={\r\n                        modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineMeterTransactionSnapshotInfo.NetStartTotalizer\r\n                      }\r\n                      label={t(\"PipelineMeter_StartNetTotalizer\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"NetStartTotalizer\", data, \"Meter\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(meterValidationErrors.NetStartTotalizer)}\r\n                      indicator={\r\n                        modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineMeterTransactionSnapshotInfo.GrossEndTotalizer\r\n                      }\r\n                      label={t(\"PipelineMeter_EndGrossTotalizer\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"GrossEndTotalizer\", data, \"Meter\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(meterValidationErrors.GrossEndTotalizer)}\r\n                      indicator={\r\n                        modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineMeterTransactionSnapshotInfo.NetEndTotalizer\r\n                      }\r\n                      label={t(\"TankMeter_EndNetTotalizer\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"NetEndTotalizer\", data, \"Meter\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(meterValidationErrors.NetEndTotalizer)}\r\n                      indicator={\r\n                        modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineMeterTransactionSnapshotInfo.Temperature\r\n                      }\r\n                      label={t(\"LoadingDetailsEntry_Temperature\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Temperature\", data, \"Meter\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(meterValidationErrors.Temperature)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={\r\n                        modPipelineMeterTransactionSnapshotInfo.TemperatureUOM\r\n                      }\r\n                      options={listOptions.temperatureUOMs}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"MarineDispatchManualEntry_TemperatureUOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"TemperatureUOM\", data, \"Meter\")\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(meterValidationErrors.TemperatureUOM)}\r\n                      indicator={\r\n                        modPipelineMeterTransactionSnapshotInfo.Temperature !==\r\n                        \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modPipelineMeterTransactionSnapshotInfo.Density}\r\n                      label={t(\"Density\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Density\", data, \"Meter\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(meterValidationErrors.Density)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modPipelineMeterTransactionSnapshotInfo.DensityUOM}\r\n                      options={listOptions.densityUOMS}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"BaseProductInfox_UOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"DensityUOM\", data, \"Meter\")\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(meterValidationErrors.DensityUOM)}\r\n                      indicator={\r\n                        modPipelineMeterTransactionSnapshotInfo.Density !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Tab.Pane>\r\n              <Tab.Pane title={t(\"Pipeline_Tank_Level_Trasaction\")}>\r\n                <div className=\"row\">\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      placeholder={t(\"Common_Select\")}\r\n                      label={t(\"AtgConfigure_TankCode\")}\r\n                      value={modPipelineTankTransactionSnapshotInfo.TankCode}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"TankCode\", data, \"Tank\")\r\n                      }\r\n                      indicator={isTankRequired ? \"required\" : null}\r\n                      error={t(tankValidationErrors.TankCode)}\r\n                      options={Utilities.transferListtoOptions(\r\n                        listOptions.tankCodes\r\n                      )}\r\n                      reserveSpace={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.GrossMass}\r\n                      label={t(\"TankInfo_GrossMass\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"GrossMass\", data, \"Tank\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.GrossMass)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.MassUOM}\r\n                      options={listOptions.quantityUOMOptions}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"TankEODEntry_MassQuantityUOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"MassUOM\", data, \"Tank\")\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(tankValidationErrors.MassUOM)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.GrossMass !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineTankTransactionSnapshotInfo.GrossStartVolume\r\n                      }\r\n                      label={t(\"Gross_start_Volume\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"GrossStartVolume\", data, \"Tank\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.GrossStartVolume)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.TankCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineTankTransactionSnapshotInfo.NetStartVolume\r\n                      }\r\n                      label={t(\"Net_start_Volume\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"NetStartVolume\", data, \"Tank\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.NetStartVolume)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.TankCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineTankTransactionSnapshotInfo.GrossEndVolume\r\n                      }\r\n                      label={t(\"Gross_end_Volume\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"GrossEndVolume\", data, \"Tank\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.GrossEndVolume)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.TankCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={\r\n                        modPipelineTankTransactionSnapshotInfo.NetEndVolume\r\n                      }\r\n                      label={t(\"Net_end_Volume\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"NetEndVolume\", data, \"Tank\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.NetEndVolume)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.TankCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.VolumeUOM}\r\n                      options={listOptions.volumeUOMs}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"TankTransaction_VolumeUom\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"VolumeUOM\", data, \"Tank\")\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(tankValidationErrors.VolumeUOM)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.TankCode !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.Temperature}\r\n                      label={t(\"LoadingDetailsEntry_Temperature\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Temperature\", data, \"Tank\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.Temperature)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={\r\n                        modPipelineTankTransactionSnapshotInfo.TemperatureUOM\r\n                      }\r\n                      options={listOptions.temperatureUOMs}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"MarineDispatchManualEntry_TemperatureUOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"TemperatureUOM\", data, \"Tank\")\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(tankValidationErrors.TemperatureUOM)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.Temperature !==\r\n                        \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.Density}\r\n                      label={t(\"Density\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Density\", data, \"Tank\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.Density)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.DensityUOM}\r\n                      options={listOptions.densityUOMS}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"BaseProductInfox_UOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"DensityUOM\", data, \"Tank\")\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(tankValidationErrors.DensityUOM)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.Density !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.Pressure}\r\n                      label={t(\"LoadingDetailsEntry_Pressure\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"Pressure\", data, \"Tank\")\r\n                      }\r\n                      reserveSpace={false}\r\n                      error={t(tankValidationErrors.Pressure)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      value={modPipelineTankTransactionSnapshotInfo.PressureUOM}\r\n                      options={listOptions.pressureUOMs}\r\n                      placeholder=\"Select\"\r\n                      label={t(\"BCU_PressureUOM\")}\r\n                      onChange={(data) =>\r\n                        onFieldChange(\"PressureUOM\", data, \"Tank\")\r\n                      }\r\n                      multiple={false}\r\n                      reserveSpace={false}\r\n                      search={false}\r\n                      noResultsMessage={t(\"noResultsMessage\")}\r\n                      error={t(tankValidationErrors.PressureUOM)}\r\n                      indicator={\r\n                        modPipelineTankTransactionSnapshotInfo.Pressure !== \"\"\r\n                          ? \"required\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Tab.Pane>\r\n            </Tab>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { toast } from \"react-toastify\";\r\nimport { PipelineDispatchManualEntryDetails } from \"../../UIBase/Details/PipelineDispatchManualEntryDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport lodash from \"lodash\";\r\nimport {\r\n  emptyPipelineSnapshotInfo,\r\n  emptyPipelineCommonTransactionSnapshotInfo,\r\n} from \"../../../JS/DefaultEntities\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { PipelineDispatchManualEntryValidationDef } from \"../../../JS/ValidationDef\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport axios from \"axios\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { functionGroups,fnPipelineDispatchManualEntry} from \"../../../JS/FunctionGroups\";\r\nimport { pipelineTransactionsAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Modal, Button } from \"@scuf/common\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass PipelineDispatchManualEntryDetailsComposite extends Component {\r\n  state = {\r\n    modPipelineSnapshotInfo: lodash.cloneDeep(emptyPipelineSnapshotInfo),\r\n    modPipelineTankTransactionSnapshotInfo: lodash.cloneDeep(\r\n      emptyPipelineCommonTransactionSnapshotInfo\r\n    ),\r\n    modPipelineMeterTransactionSnapshotInfo: lodash.cloneDeep(\r\n      emptyPipelineCommonTransactionSnapshotInfo\r\n    ),\r\n    quantityUOMOptions: [],\r\n    densityUOMS: [],\r\n    temperatureUOMs: [],\r\n    volumeUOMs: [],\r\n    pressureUOMs: [],\r\n    tankCodes: [],\r\n    meterCodes: this.props.pipelineHeaderMeterOptions,\r\n    tankValidationErrors: Utilities.getInitialValidationErrors(\r\n      PipelineDispatchManualEntryValidationDef\r\n    ),\r\n    meterValidationErrors: Utilities.getInitialValidationErrors(\r\n      PipelineDispatchManualEntryValidationDef\r\n    ),\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    activeIndex: 0,\r\n    manualEntrySaveEnable: true,\r\n    isComminglingAlert: false,\r\n\r\n    showAuthenticationLayout: false,\r\n    tempPipelineSnapshotInfo: {},\r\n\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      // this.setDefaultValues();\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      //Get Activity Info\r\n      this.GetUOMList();\r\n      this.getAttributes();\r\n      this.setDefaultValues();\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetailsComposite : Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  setDefaultValues() {\r\n    try {\r\n      let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n        this.state.modPipelineTankTransactionSnapshotInfo\r\n      );\r\n      let modPipelineMeterTransactionSnapshotInfo = lodash.cloneDeep(\r\n        this.state.modPipelineMeterTransactionSnapshotInfo\r\n      );\r\n      modPipelineTankTransactionSnapshotInfo.VolumeUOM =\r\n        this.props.pipelineDispatch.QuantityUOM;\r\n      modPipelineTankTransactionSnapshotInfo.ScanStartTime = new Date();\r\n      modPipelineTankTransactionSnapshotInfo.ScanEndTime = new Date();\r\n      modPipelineMeterTransactionSnapshotInfo.TemperatureUOM =\r\n        this.props.userDetails.EntityResult.PageAttibutes.DefaultUOMS.TemperatureUOM;\r\n      modPipelineMeterTransactionSnapshotInfo.DensityUOM =\r\n        this.props.userDetails.EntityResult.PageAttibutes.DefaultUOMS.DensityUOM;\r\n\r\n      this.setState(\r\n        {\r\n          modPipelineTankTransactionSnapshotInfo,\r\n          modPipelineMeterTransactionSnapshotInfo,\r\n        },\r\n        () => {\r\n          this.getmeterCodes();\r\n          this.getTankCodes();\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetailsComposite : Error occured while setting default values\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTankDetails(modPipelineTankTransactionSnapshotInfo) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.tankCode,\r\n          value: modPipelineTankTransactionSnapshotInfo.TankCode,\r\n        },\r\n\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value:\r\n            this.props.pipelineDispatch.TerminalCodes !== null &&\r\n            this.props.pipelineDispatch.TerminalCodes.length > 0\r\n              ? this.props.pipelineDispatch.TerminalCodes[0]\r\n              : null,\r\n        },\r\n      ];\r\n      var obj = {\r\n        keyDataCode: KeyCodes.tankCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetTank,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          if (result.IsSuccess) {\r\n            let tank = result.EntityResult;\r\n            modPipelineTankTransactionSnapshotInfo.PressureUOM =\r\n              tank.PressureUOM;\r\n            modPipelineTankTransactionSnapshotInfo.MassUOM = tank.GrossMassUOM;\r\n            modPipelineTankTransactionSnapshotInfo.DensityUOM = tank.DensityUOM;\r\n            modPipelineTankTransactionSnapshotInfo.TemperatureUOM =\r\n              tank.TemperatureUOM;\r\n            this.setState({ modPipelineTankTransactionSnapshotInfo });\r\n          } else {\r\n            this.setState({ modPipelineTankTransactionSnapshotInfo });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"PipelineDispatchManualEntryDetailsComposite : Error while getting Tank Details\",\r\n            error\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetailsComposite : Error in getting Tank Details\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getmeterCodes() {\r\n    try {\r\n      let dispatch = lodash.cloneDeep(this.props.pipelineDispatch);\r\n      this.setState(\r\n        { meterCodes: this.props.pipelineHeaderMeterOptions },\r\n        () => {\r\n          if (\r\n            this.props.isMeterRequired &&\r\n            dispatch.PipelineHeaderMeterCode !== undefined &&\r\n            dispatch.PipelineHeaderMeterCode !== null\r\n          ) {\r\n            let modPipelineMeterTransactionSnapshotInfo = lodash.cloneDeep(\r\n              this.state.modPipelineMeterTransactionSnapshotInfo\r\n            );\r\n\r\n            modPipelineMeterTransactionSnapshotInfo.MeterCode =\r\n              dispatch.PipelineHeaderMeterCode;\r\n\r\n            this.setState({ modPipelineMeterTransactionSnapshotInfo });\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetailsCOmposite : Error in getting meter codes\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTankCodes() {\r\n    try {\r\n      let fpCode =\r\n        this.props.pipelineDispatch.FinishedProductCode === null ||\r\n        this.props.pipelineDispatch.FinishedProductCode === undefined\r\n          ? \"\"\r\n          : this.props.pipelineDispatch.FinishedProductCode;\r\n      let shCode = this.props.selectedShareholder;\r\n\r\n      axios(\r\n        RestAPIs.GetDispatchPlannedTanks +\r\n          \"?shCode=\" +\r\n          shCode +\r\n          \"&finishedProductCode=\" +\r\n          fpCode,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult !== null) {\r\n              let tankCodes = [];\r\n              tankCodes = result.EntityResult;\r\n              this.setState({ tankCodes }, () => {\r\n                if (this.props.isTankRequired && tankCodes.length === 1) {\r\n                  let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n                    this.state.modPipelineTankTransactionSnapshotInfo\r\n                  );\r\n\r\n                  modPipelineTankTransactionSnapshotInfo.TankCode =\r\n                    tankCodes[0];\r\n\r\n                  this.getTankDetails(modPipelineTankTransactionSnapshotInfo);\r\n                }\r\n              });\r\n            }\r\n          } else {\r\n            console.log(\r\n              \"TruckShipmentManualEntryDetailsComposite: Error in getTankCodes:\",\r\n              result.ErrorList\r\n            );\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"TruckShipmentManualEntryDetailsComposite: Error while getting getTankCodes:\",\r\n            error\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetailsComposite : error in getting tank codes\"\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  addLoadingDetails = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempPipelineSnapshotInfo = lodash.cloneDeep(this.state.tempPipelineSnapshotInfo);\r\n\r\n      this.CreateManualEntry(tempPipelineSnapshotInfo);\r\n\r\n    } catch (error) {\r\n      console.log(\"Pipeline Dispatch Manual Entry Composite : Error in addLoadingDetails\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n      //this.setState({ manualEntrySaveEnable: false });\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      if (this.validateSave(attributeList)) {\r\n        let pipelineSnapShotInfo = this.fillDetails(attributeList);\r\n        \r\n        let showAuthenticationLayout =this.props.userDetails.EntityResult.IsWebPortalUser !== true? true: false;\r\n        \r\n        let tempPipelineSnapshotInfo = lodash.cloneDeep(pipelineSnapShotInfo);\r\n        this.setState({ showAuthenticationLayout, tempPipelineSnapshotInfo }, () => {\r\n          if (showAuthenticationLayout === false) {\r\n            this.addLoadingDetails();\r\n          }\r\n      });\r\n       \r\n      } else this.setState({ manualEntrySaveEnable: true });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  CreateManualEntry(request) {\r\n    this.handleAuthenticationClose();\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shareholderCode,\r\n        value: this.props.selectedShareholder,\r\n      },\r\n      {\r\n        key: KeyCodes.dispatchCode,\r\n        value: this.props.pipelineDispatch.PipelineDispatchCode,\r\n      },\r\n    ];\r\n\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"PipelineDispatch_ManualEntryCreateStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"PipelineDispatch_DispatchCode\"],\r\n          keyValues: [this.props.pipelineDispatch.PipelineDispatchCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.pipelineDispatchCode,\r\n      KeyCodes: keyCode,\r\n      Entity: request,\r\n    };\r\n    axios(\r\n      RestAPIs.CreatePipelineDispatchManualEntry,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          if (result.ErrorList.length > 0 && result.ErrorList[0] !== \"\")\r\n            this.setState(\r\n              {\r\n                manualEntrySaveEnable: false,\r\n                isComminglingAlert: true,\r\n                modPipelineMeterTransactionSnapshotInfo: lodash.cloneDeep(\r\n                  emptyPipelineCommonTransactionSnapshotInfo\r\n                ),\r\n                modPipelineTankTransactionSnapshotInfo: lodash.cloneDeep(\r\n                  emptyPipelineCommonTransactionSnapshotInfo\r\n                ),\r\n              },\r\n              () => {\r\n                this.setDefaultValues();\r\n                var attributeMetaDataList = lodash.cloneDeep(\r\n                  this.state.attributeMetaDataList\r\n                );\r\n                this.formAttributesForUI(attributeMetaDataList);\r\n              }\r\n            );\r\n          else\r\n            this.setState(\r\n              {\r\n                manualEntrySaveEnable: true,\r\n                modPipelineMeterTransactionSnapshotInfo: lodash.cloneDeep(\r\n                  emptyPipelineCommonTransactionSnapshotInfo\r\n                ),\r\n                modPipelineTankTransactionSnapshotInfo: lodash.cloneDeep(\r\n                  emptyPipelineCommonTransactionSnapshotInfo\r\n                ),\r\n              },\r\n              () => {\r\n                this.setDefaultValues();\r\n                var attributeMetaDataList = lodash.cloneDeep(\r\n                  this.state.attributeMetaDataList\r\n                );\r\n                this.formAttributesForUI(attributeMetaDataList);\r\n              }\r\n            );\r\n        } else {\r\n          notification.message = \"MarineDispatchManualEntry_SaveFailure\";\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({ manualEntrySaveEnable: true });\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        console.log(\r\n          \"PipelineDispatchManualEntryDetailsComposite: Error while creating Manual Entry:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  ComminglingAlert = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isComminglingAlert} size=\"small\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h5>\r\n                  {t(\"PipelineManualEntry_ComminglingError\")\r\n                    .replace(\"{0}\", this.props.selectedShareholder)\r\n                    .replace(\r\n                      \"{1}\",\r\n                      this.state.modPipelineTankTransactionSnapshotInfo.TankCode\r\n                    )}\r\n                </h5>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  this.setState({ isComminglingAlert: false });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  fillDetails(attributeList) {\r\n    let request = {\r\n      pipelineSnapshotInfoList: [],\r\n      commonTransactionSnapshotInfoList: [],\r\n      isBonded: this.props.pipelineDispatch.IsBonded,\r\n      tankCode: \"\",\r\n    };\r\n    try {\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n\r\n      let Attributes = Utilities.fillAttributeDetails(attributeList);\r\n\r\n      let modPipelineSnapshotInfo = lodash.cloneDeep(\r\n        this.state.modPipelineSnapshotInfo\r\n      );\r\n\r\n      let pipelineSnapShotInfoList = [];\r\n\r\n      modPipelineSnapshotInfo.PlanCode =\r\n        this.props.pipelineDispatch.PipelineDispatchCode === null ||\r\n        this.props.pipelineDispatch.PipelineDispatchCode === \"\"\r\n          ? \"\"\r\n          : this.props.pipelineDispatch.PipelineDispatchCode;\r\n\r\n      modPipelineSnapshotInfo.TransactionType = Constants.PipeLineType.DISPATCH;\r\n\r\n      modPipelineSnapshotInfo.ShareholderCode =\r\n        this.props.selectedShareholder === null ||\r\n        this.props.selectedShareholder === \"\"\r\n          ? \"\"\r\n          : this.props.selectedShareholder;\r\n\r\n      pipelineSnapShotInfoList.push(modPipelineSnapshotInfo);\r\n\r\n      let commonTransactionSnapshotInfoList = [];\r\n      let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n        this.state.modPipelineTankTransactionSnapshotInfo\r\n      );\r\n      //Fill Tank Details\r\n      if (\r\n        modPipelineTankTransactionSnapshotInfo.TankCode !== \"\" &&\r\n        modPipelineTankTransactionSnapshotInfo.TankCode !== null\r\n      ) {\r\n        request.tankCode = modPipelineTankTransactionSnapshotInfo.TankCode;\r\n\r\n        let commonTransactionTankStartSnapShot = lodash.cloneDeep(\r\n          emptyPipelineCommonTransactionSnapshotInfo\r\n        );\r\n        let commonTransactionTankEndSnapShot = lodash.cloneDeep(\r\n          emptyPipelineCommonTransactionSnapshotInfo\r\n        );\r\n\r\n        commonTransactionTankStartSnapShot.TransactionType =\r\n          Constants.PipeLineType.DISPATCH;\r\n        commonTransactionTankEndSnapShot.TransactionType =\r\n          Constants.PipeLineType.DISPATCH;\r\n\r\n        commonTransactionTankStartSnapShot.ScanTime =\r\n          modPipelineTankTransactionSnapshotInfo.ScanStartTime;\r\n        commonTransactionTankEndSnapShot.ScanTime =\r\n          modPipelineTankTransactionSnapshotInfo.ScanEndTime;\r\n\r\n        if (\r\n          this.props.pipelineDispatch.PipelineHeaderCode !== null &&\r\n          this.props.pipelineDispatch.PipelineHeaderCode !== \"\"\r\n        ) {\r\n          commonTransactionTankStartSnapShot.PipelineHeaderCode =\r\n            this.props.pipelineDispatch.PipelineHeaderCode;\r\n          commonTransactionTankEndSnapShot.PipelineHeaderCode =\r\n            this.props.pipelineDispatch.PipelineHeaderCode;\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.TankCode !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.TankCode !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.TankCode =\r\n            modPipelineTankTransactionSnapshotInfo.TankCode;\r\n          commonTransactionTankEndSnapShot.TankCode =\r\n            modPipelineTankTransactionSnapshotInfo.TankCode;\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.MeterCode !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.MeterCode !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.MeterCode =\r\n            modPipelineTankTransactionSnapshotInfo.MeterCode;\r\n          commonTransactionTankEndSnapShot.MeterCode =\r\n            modPipelineTankTransactionSnapshotInfo.MeterCode;\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.FlowRate !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.FlowRate !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.FlowRate =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.FlowRate\r\n            );\r\n          commonTransactionTankEndSnapShot.FlowRate =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.FlowRate\r\n            );\r\n        }\r\n\r\n        commonTransactionTankStartSnapShot.FlowRateUOM =\r\n          modPipelineTankTransactionSnapshotInfo.FlowRateUOM;\r\n        commonTransactionTankEndSnapShot.FlowRateUOM =\r\n          modPipelineTankTransactionSnapshotInfo.FlowRateUOM;\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.GrossStartTotalizer !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.GrossStartTotalizer !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.GrossTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.GrossStartTotalizer\r\n            );\r\n          commonTransactionTankEndSnapShot.GrossTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.GrossEndTotalizer\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.NetStartTotalizer !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.NetStartTotalizer !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.NetTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.NetStartTotalizer\r\n            );\r\n          commonTransactionTankEndSnapShot.NetTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.NetEndTotalizer\r\n            );\r\n        }\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.NetEndTotalizer !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.NetEndTotalizer !== null\r\n        ) {\r\n          commonTransactionTankEndSnapShot.NetTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.NetEndTotalizer\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.GrossStartVolume !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.GrossStartVolume !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.GrossVolume =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.GrossStartVolume\r\n            );\r\n        }\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.GrossEndVolume !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.GrossEndVolume !== null\r\n        ) {\r\n          commonTransactionTankEndSnapShot.GrossVolume =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.GrossEndVolume\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.NetStartVolume !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.NetStartVolume !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.NetVolume =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.NetStartVolume\r\n            );\r\n        }\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.NetEndVolume !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.NetEndVolume !== null\r\n        ) {\r\n          commonTransactionTankEndSnapShot.NetVolume =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.NetEndVolume\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.Temperature !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.Temperature !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.Temperature =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.Temperature\r\n            );\r\n          commonTransactionTankEndSnapShot.Temperature =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.Temperature\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.TemperatureUOM !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.TemperatureUOM !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.TemperatureUOM =\r\n            modPipelineTankTransactionSnapshotInfo.TemperatureUOM;\r\n          commonTransactionTankEndSnapShot.TemperatureUOM =\r\n            modPipelineTankTransactionSnapshotInfo.TemperatureUOM;\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.Density !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.Density !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.Density =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.Density\r\n            );\r\n          commonTransactionTankEndSnapShot.Density =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.Density\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.DensityUOM !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.DensityUOM !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.DensityUOM =\r\n            modPipelineTankTransactionSnapshotInfo.DensityUOM;\r\n          commonTransactionTankEndSnapShot.DensityUOM =\r\n            modPipelineTankTransactionSnapshotInfo.DensityUOM;\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.GrossMass !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.GrossMass !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.GrossMass =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.GrossMass\r\n            );\r\n          commonTransactionTankEndSnapShot.GrossMass =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.GrossMass\r\n            );\r\n\r\n          commonTransactionTankStartSnapShot.MassUOM =\r\n            modPipelineTankTransactionSnapshotInfo.MassUOM;\r\n          commonTransactionTankEndSnapShot.MassUOM =\r\n            modPipelineTankTransactionSnapshotInfo.MassUOM;\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.Pressure !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.Pressure !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.Pressure =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.Pressure\r\n            );\r\n          commonTransactionTankEndSnapShot.Pressure =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineTankTransactionSnapshotInfo.Pressure\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.PressureUOMv !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.PressureUOM !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.PressureUOM =\r\n            modPipelineTankTransactionSnapshotInfo.PressureUOM;\r\n          commonTransactionTankEndSnapShot.PressureUOM =\r\n            modPipelineTankTransactionSnapshotInfo.PressureUOM;\r\n        }\r\n        commonTransactionTankStartSnapShot.IsManualEntry = true;\r\n        commonTransactionTankEndSnapShot.IsManualEntry = true;\r\n\r\n        commonTransactionTankStartSnapShot.LastUpdatedBy =\r\n          this.props.userDetails.EntityResult.Firstname +\r\n          \" \" +\r\n          this.props.userDetails.EntityResult.LastName;\r\n        commonTransactionTankEndSnapShot.LastUpdatedBy =\r\n          this.props.userDetails.EntityResult.Firstname +\r\n          \" \" +\r\n          this.props.userDetails.EntityResult.LastName;\r\n\r\n        //Attributes : TODO\r\n        commonTransactionTankStartSnapShot.Attributes = Attributes;\r\n        commonTransactionTankEndSnapShot.Attributes = Attributes;\r\n\r\n        if (\r\n          modPipelineTankTransactionSnapshotInfo.VolumeUOM !== \"\" &&\r\n          modPipelineTankTransactionSnapshotInfo.VolumeUOM !== null\r\n        ) {\r\n          commonTransactionTankStartSnapShot.IsStart = true;\r\n          commonTransactionTankStartSnapShot.IsEnd = false;\r\n          commonTransactionTankEndSnapShot.IsStart = false;\r\n          commonTransactionTankEndSnapShot.IsEnd = true;\r\n\r\n          commonTransactionTankStartSnapShot.VolumeUOM =\r\n            modPipelineTankTransactionSnapshotInfo.VolumeUOM;\r\n          commonTransactionTankEndSnapShot.VolumeUOM =\r\n            modPipelineTankTransactionSnapshotInfo.VolumeUOM;\r\n        }\r\n\r\n        commonTransactionSnapshotInfoList.push(\r\n          commonTransactionTankStartSnapShot\r\n        );\r\n        commonTransactionSnapshotInfoList.push(\r\n          commonTransactionTankEndSnapShot\r\n        );\r\n      }\r\n\r\n      //Fill Meter Details\r\n      let modPipelineMeterTransactionSnapshotInfo = lodash.cloneDeep(\r\n        this.state.modPipelineMeterTransactionSnapshotInfo\r\n      );\r\n\r\n      if (\r\n        modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\" &&\r\n        modPipelineMeterTransactionSnapshotInfo.MeterCode !== undefined\r\n      ) {\r\n        let commonTransactionMeterStartSnapshotInfo = lodash.cloneDeep(\r\n          emptyPipelineCommonTransactionSnapshotInfo\r\n        );\r\n        let commonTransactionMeterEndSnapshotInfo = lodash.cloneDeep(\r\n          emptyPipelineCommonTransactionSnapshotInfo\r\n        );\r\n\r\n        commonTransactionMeterStartSnapshotInfo.TransactionType =\r\n          Constants.PipeLineType.DISPATCH;\r\n        commonTransactionMeterEndSnapshotInfo.TransactionType =\r\n          Constants.PipeLineType.DISPATCH;\r\n\r\n        if (\r\n          this.props.pipelineDispatch.PipelineHeaderCode !== null &&\r\n          this.props.pipelineDispatch.PipelineHeaderCode !== \"\"\r\n        ) {\r\n          commonTransactionMeterStartSnapshotInfo.PipelineHeaderCode =\r\n            this.props.pipelineDispatch.PipelineHeaderCode;\r\n          commonTransactionMeterEndSnapshotInfo.PipelineHeaderCode =\r\n            this.props.pipelineDispatch.PipelineHeaderCode;\r\n        } else {\r\n          commonTransactionMeterStartSnapshotInfo.PipelineHeaderCode = \"\";\r\n          commonTransactionMeterEndSnapshotInfo.PipelineHeaderCode = \"\";\r\n        }\r\n\r\n        if (\r\n          modPipelineMeterTransactionSnapshotInfo.Density !== \"\" &&\r\n          modPipelineMeterTransactionSnapshotInfo.Density !== null\r\n        ) {\r\n          commonTransactionMeterStartSnapshotInfo.Density =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.Density\r\n            );\r\n          commonTransactionMeterEndSnapshotInfo.Density =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.Density\r\n            );\r\n        } else {\r\n          commonTransactionMeterStartSnapshotInfo.Density = 0;\r\n          commonTransactionMeterEndSnapshotInfo.Density = 0;\r\n        }\r\n\r\n        commonTransactionMeterStartSnapshotInfo.DensityUOM =\r\n          modPipelineMeterTransactionSnapshotInfo.DensityUOM;\r\n        commonTransactionMeterEndSnapshotInfo.DensityUOM =\r\n          modPipelineMeterTransactionSnapshotInfo.DensityUOM;\r\n\r\n        commonTransactionMeterStartSnapshotInfo.IsManualEntry = true;\r\n        commonTransactionMeterEndSnapshotInfo.IsManualEntry = true;\r\n\r\n        if (\r\n          modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\" &&\r\n          modPipelineMeterTransactionSnapshotInfo.MeterCode !== null\r\n        ) {\r\n          commonTransactionMeterStartSnapshotInfo.MeterCode =\r\n            modPipelineMeterTransactionSnapshotInfo.MeterCode;\r\n          commonTransactionMeterEndSnapshotInfo.MeterCode =\r\n            modPipelineMeterTransactionSnapshotInfo.MeterCode;\r\n        }\r\n\r\n        if (\r\n          modPipelineMeterTransactionSnapshotInfo.Temperature !== \"\" &&\r\n          modPipelineMeterTransactionSnapshotInfo.Temperature !== null\r\n        ) {\r\n          commonTransactionMeterStartSnapshotInfo.Temperature =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.Temperature\r\n            );\r\n          commonTransactionMeterEndSnapshotInfo.Temperature =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.Temperature\r\n            );\r\n        }\r\n\r\n        commonTransactionMeterStartSnapshotInfo.TemperatureUOM =\r\n          modPipelineMeterTransactionSnapshotInfo.TemperatureUOM;\r\n        commonTransactionMeterEndSnapshotInfo.TemperatureUOM =\r\n          modPipelineMeterTransactionSnapshotInfo.TemperatureUOM;\r\n\r\n        if (\r\n          modPipelineMeterTransactionSnapshotInfo.GrossStartTotalizer !== \"\" &&\r\n          modPipelineMeterTransactionSnapshotInfo.GrossEndTotalizer !== null\r\n        ) {\r\n          commonTransactionMeterStartSnapshotInfo.GrossTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.GrossStartTotalizer\r\n            );\r\n          commonTransactionMeterEndSnapshotInfo.GrossTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.GrossEndTotalizer\r\n            );\r\n        }\r\n\r\n        if (\r\n          modPipelineMeterTransactionSnapshotInfo.NetStartTotalizer !== \"\" &&\r\n          modPipelineMeterTransactionSnapshotInfo.NetEndTotalizer !== null\r\n        ) {\r\n          commonTransactionMeterStartSnapshotInfo.NetTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.NetStartTotalizer\r\n            );\r\n          commonTransactionMeterEndSnapshotInfo.NetTotalizer =\r\n            Utilities.convertStringtoDecimal(\r\n              modPipelineMeterTransactionSnapshotInfo.NetEndTotalizer\r\n            );\r\n        }\r\n\r\n        commonTransactionMeterStartSnapshotInfo.ScanTime =\r\n          modPipelineTankTransactionSnapshotInfo.ScanStartTime;\r\n        commonTransactionMeterEndSnapshotInfo.ScanTime =\r\n          modPipelineTankTransactionSnapshotInfo.ScanEndTime;\r\n\r\n        commonTransactionMeterStartSnapshotInfo.LastUpdatedBy =\r\n          this.props.userDetails.EntityResult.Firstname +\r\n          \" \" +\r\n          this.props.userDetails.EntityResult.LastName;\r\n        commonTransactionMeterEndSnapshotInfo.LastUpdatedBy =\r\n          this.props.userDetails.EntityResult.Firstname +\r\n          \" \" +\r\n          this.props.userDetails.EntityResult.LastName;\r\n\r\n        commonTransactionMeterStartSnapshotInfo.Attributes = Attributes;\r\n        commonTransactionMeterEndSnapshotInfo.Attributes = Attributes;\r\n\r\n        commonTransactionMeterStartSnapshotInfo.IsStart = true;\r\n        commonTransactionMeterStartSnapshotInfo.IsEnd = false;\r\n\r\n        commonTransactionMeterEndSnapshotInfo.IsStart = false;\r\n        commonTransactionMeterEndSnapshotInfo.IsEnd = true;\r\n\r\n        commonTransactionSnapshotInfoList.push(\r\n          commonTransactionMeterStartSnapshotInfo\r\n        );\r\n        commonTransactionSnapshotInfoList.push(\r\n          commonTransactionMeterEndSnapshotInfo\r\n        );\r\n      }\r\n\r\n      request.pipelineSnapshotInfoList = pipelineSnapShotInfoList;\r\n      request.commonTransactionSnapshotInfoList =\r\n        commonTransactionSnapshotInfoList;\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetailsComposite:Error occured on forming request\",\r\n        error\r\n      );\r\n    }\r\n    return request;\r\n  }\r\n\r\n  validateSave(attributeList) {\r\n    const tankValidationErrors = { ...this.state.tankValidationErrors };\r\n    const meterValidationErrors = { ...this.state.meterValidationErrors };\r\n\r\n    let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n      this.state.modPipelineTankTransactionSnapshotInfo\r\n    );\r\n    let modPipelineMeterTransactionSnapshotInfo = lodash.cloneDeep(\r\n      this.state.modPipelineMeterTransactionSnapshotInfo\r\n    );\r\n\r\n    Object.keys(PipelineDispatchManualEntryValidationDef).forEach(function (\r\n      key\r\n    ) {\r\n      if (modPipelineTankTransactionSnapshotInfo[key] !== undefined)\r\n        tankValidationErrors[key] = Utilities.validateField(\r\n          PipelineDispatchManualEntryValidationDef[key],\r\n          modPipelineTankTransactionSnapshotInfo[key]\r\n        );\r\n    });\r\n\r\n    Object.keys(PipelineDispatchManualEntryValidationDef).forEach(function (\r\n      key\r\n    ) {\r\n      if (modPipelineMeterTransactionSnapshotInfo[key] !== undefined)\r\n        meterValidationErrors[key] = Utilities.validateField(\r\n          PipelineDispatchManualEntryValidationDef[key],\r\n          modPipelineMeterTransactionSnapshotInfo[key]\r\n        );\r\n    });\r\n\r\n    //Date validation\r\n    if (\r\n      modPipelineTankTransactionSnapshotInfo.ScanStartTime >=\r\n      modPipelineTankTransactionSnapshotInfo.ScanEndTime\r\n    ) {\r\n      tankValidationErrors[\"ScanStartTime\"] =\r\n        \"MarineDispatchManualEntry_ErrorLoadTime\";\r\n    }\r\n\r\n    if (\r\n      (modPipelineMeterTransactionSnapshotInfo.MeterCode === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.MeterCode === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.MeterCode === undefined) &&\r\n      this.props.isMeterRequired\r\n    )\r\n      meterValidationErrors[\"MeterCode\"] =\r\n        \"PipelineReceiptDetails_MandatoryHeaderMeterCode\";\r\n\r\n    if (\r\n      modPipelineMeterTransactionSnapshotInfo.MeterCode !== \"\" &&\r\n      modPipelineMeterTransactionSnapshotInfo.MeterCode !== null &&\r\n      modPipelineMeterTransactionSnapshotInfo.MeterCode !== undefined\r\n    ) {\r\n      if (\r\n        modPipelineMeterTransactionSnapshotInfo.GrossStartTotalizer === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.GrossStartTotalizer === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.GrossStartTotalizer ===\r\n          undefined\r\n      )\r\n        meterValidationErrors[\"GrossStartTotalizer\"] =\r\n          \"PipelineEntry_MandatoryStartGrossTotalizer\";\r\n      if (\r\n        modPipelineMeterTransactionSnapshotInfo.GrossEndTotalizer === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.GrossEndTotalizer === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.GrossEndTotalizer === undefined\r\n      )\r\n        meterValidationErrors[\"GrossEndTotalizer\"] =\r\n          \"PipelineEntry_MandatoryEndGrossTotalizer\";\r\n      if (\r\n        modPipelineMeterTransactionSnapshotInfo.NetStartTotalizer === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.NetStartTotalizer === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.NetStartTotalizer === undefined\r\n      )\r\n        meterValidationErrors[\"NetStartTotalizer\"] =\r\n          \"PipelineEntry_MandatoryStartNetTotalizer\";\r\n      if (\r\n        modPipelineMeterTransactionSnapshotInfo.NetEndTotalizer === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.NetEndTotalizer === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.NetEndTotalizer === undefined\r\n      )\r\n        meterValidationErrors[\"NetEndTotalizer\"] =\r\n          \"PipelineEntry_MandatoryEndNetTotalizer\";\r\n    }\r\n\r\n    if (\r\n      modPipelineMeterTransactionSnapshotInfo.Temperature !== \"\" &&\r\n      modPipelineMeterTransactionSnapshotInfo.Temperature !== null &&\r\n      modPipelineMeterTransactionSnapshotInfo.Temperature !== undefined &&\r\n      (modPipelineMeterTransactionSnapshotInfo.TemperatureUOM === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.TemperatureUOM === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.TemperatureUOM === undefined)\r\n    )\r\n      meterValidationErrors[\"TemperatureUOM\"] = \"BCU_TemperatureUOMRequired\";\r\n    if (\r\n      modPipelineMeterTransactionSnapshotInfo.Density !== \"\" &&\r\n      modPipelineMeterTransactionSnapshotInfo.Density !== null &&\r\n      modPipelineMeterTransactionSnapshotInfo.Density !== undefined &&\r\n      (modPipelineMeterTransactionSnapshotInfo.DensityUOM === \"\" ||\r\n        modPipelineMeterTransactionSnapshotInfo.DensityUOM === null ||\r\n        modPipelineMeterTransactionSnapshotInfo.DensityUOM === undefined)\r\n    )\r\n      meterValidationErrors[\"DensityUOM\"] =\r\n        \"Reconciliation_DensityUOMMandatory\";\r\n\r\n    if (\r\n      this.props.isTankRequired &&\r\n      (modPipelineTankTransactionSnapshotInfo.TankCode === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.TankCode === null ||\r\n        modPipelineTankTransactionSnapshotInfo.TankCode === undefined)\r\n    )\r\n      tankValidationErrors[\"TankCode\"] =\r\n        \"PipelineReceiptDetails_MandatoryHeaderMeterCode\";\r\n\r\n    if (\r\n      modPipelineTankTransactionSnapshotInfo.TankCode !== \"\" &&\r\n      modPipelineTankTransactionSnapshotInfo.TankCode !== null &&\r\n      modPipelineTankTransactionSnapshotInfo.TankCode !== undefined\r\n    ) {\r\n      if (\r\n        modPipelineTankTransactionSnapshotInfo.GrossStartVolume === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.GrossStartVolume === null ||\r\n        modPipelineTankTransactionSnapshotInfo.GrossStartVolume === undefined\r\n      )\r\n        tankValidationErrors[\"GrossStartVolume\"] =\r\n          \"PipelineEntry_MandatoryStartGrossVolume\";\r\n      if (\r\n        modPipelineTankTransactionSnapshotInfo.GrossEndVolume === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.GrossEndVolume === null ||\r\n        modPipelineTankTransactionSnapshotInfo.GrossEndVolume === undefined\r\n      )\r\n        tankValidationErrors[\"GrossEndVolume\"] =\r\n          \"PipelineEntry_MandatoryEndGrossVolume\";\r\n      if (\r\n        modPipelineTankTransactionSnapshotInfo.NetStartVolume === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.NetStartVolume === null ||\r\n        modPipelineTankTransactionSnapshotInfo.NetStartVolume === undefined\r\n      )\r\n        tankValidationErrors[\"NetStartVolume\"] =\r\n          \"PipelineEntry_MandatoryStartNetVolume\";\r\n      if (\r\n        modPipelineTankTransactionSnapshotInfo.NetEndVolume === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.NetEndVolume === null ||\r\n        modPipelineTankTransactionSnapshotInfo.NetEndVolume === undefined\r\n      )\r\n        tankValidationErrors[\"NetEndVolume\"] =\r\n          \"PipelineEntry_MandatoryEndNetVolume\";\r\n      if (\r\n        modPipelineTankTransactionSnapshotInfo.VolumeUOM === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.VolumeUOM === null ||\r\n        modPipelineTankTransactionSnapshotInfo.VolumeUOM === undefined\r\n      )\r\n        tankValidationErrors[\"VolumeUOM\"] =\r\n          \"PipelineEntry_MandatoryEndNetTotalizer\";\r\n    }\r\n\r\n    if (\r\n      modPipelineTankTransactionSnapshotInfo.GrossMass !== \"\" &&\r\n      modPipelineTankTransactionSnapshotInfo.GrossMass !== null &&\r\n      modPipelineTankTransactionSnapshotInfo.GrossMass !== undefined &&\r\n      (modPipelineTankTransactionSnapshotInfo.MassUOM === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.MassUOM === null ||\r\n        modPipelineTankTransactionSnapshotInfo.MassUOM === undefined)\r\n    )\r\n      tankValidationErrors[\"MassUOM\"] = \"PipelineEntry_MandatoryMassUOM\";\r\n    if (\r\n      modPipelineTankTransactionSnapshotInfo.Temperature !== \"\" &&\r\n      modPipelineTankTransactionSnapshotInfo.Temperature !== null &&\r\n      modPipelineTankTransactionSnapshotInfo.Temperature !== undefined &&\r\n      (modPipelineTankTransactionSnapshotInfo.TemperatureUOM === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.TemperatureUOM === null ||\r\n        modPipelineTankTransactionSnapshotInfo.TemperatureUOM === undefined)\r\n    )\r\n      tankValidationErrors[\"TemperatureUOM\"] = \"BCU_TemperatureUOMRequired\";\r\n    if (\r\n      modPipelineTankTransactionSnapshotInfo.Density !== \"\" &&\r\n      modPipelineTankTransactionSnapshotInfo.Density !== null &&\r\n      modPipelineTankTransactionSnapshotInfo.Density !== undefined &&\r\n      (modPipelineTankTransactionSnapshotInfo.DensityUOM === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.DensityUOM === null ||\r\n        modPipelineTankTransactionSnapshotInfo.DensityUOM === undefined)\r\n    )\r\n      tankValidationErrors[\"DensityUOM\"] = \"Reconciliation_DensityUOMMandatory\";\r\n    if (\r\n      modPipelineTankTransactionSnapshotInfo.Pressure !== \"\" &&\r\n      modPipelineTankTransactionSnapshotInfo.Pressure !== null &&\r\n      modPipelineTankTransactionSnapshotInfo.Pressure !== undefined &&\r\n      (modPipelineTankTransactionSnapshotInfo.PressureUOM === \"\" ||\r\n        modPipelineTankTransactionSnapshotInfo.PressureUOM === null ||\r\n        modPipelineTankTransactionSnapshotInfo.PressureUOM === undefined)\r\n    )\r\n      tankValidationErrors[\"PressureUOM\"] =\r\n        \"PipelineEntry_MandatoryPressureUOM\";\r\n\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({\r\n      tankValidationErrors,\r\n      meterValidationErrors,\r\n      attributeValidationErrors,\r\n    });\r\n\r\n    var returnValue = true;\r\n    var meterReturnValue = true;\r\n    var tankReturnValue = true;\r\n    meterReturnValue = Object.values(meterValidationErrors).every(function (\r\n      value\r\n    ) {\r\n      return value === \"\";\r\n    });\r\n    if (!meterReturnValue)\r\n      this.setState({\r\n        activeIndex: 0,\r\n      });\r\n\r\n    if (meterReturnValue)\r\n      tankReturnValue = Object.values(tankValidationErrors).every(function (\r\n        value\r\n      ) {\r\n        return value === \"\";\r\n      });\r\n    if (!tankReturnValue)\r\n      this.setState({\r\n        activeIndex: 1,\r\n      });\r\n\r\n    if (tankReturnValue)\r\n      attributeValidationErrors.forEach((x) => {\r\n        if (returnValue) {\r\n          returnValue = Object.values(x.attributeValidationErrors).every(\r\n            function (value) {\r\n              return value === \"\";\r\n            }\r\n          );\r\n        } else {\r\n          return returnValue;\r\n        }\r\n      });\r\n\r\n    return returnValue && tankReturnValue && meterReturnValue;\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n        emptyPipelineCommonTransactionSnapshotInfo\r\n      );\r\n      let modPipelineMeterTransactionSnapshotInfo = lodash.cloneDeep(\r\n        emptyPipelineCommonTransactionSnapshotInfo\r\n      );\r\n      if (\r\n        this.props.isMeterRequired &&\r\n        this.state.meterCodes !== null &&\r\n        this.state.meterCodes.length === 1\r\n      ) {\r\n        modPipelineMeterTransactionSnapshotInfo.MeterCode =\r\n          this.state.meterCodes[0];\r\n      }\r\n\r\n      const tankValidationErrors = { ...this.state.tankValidationErrors };\r\n      const meterValidationErrors = { ...this.state.meterValidationErrors };\r\n\r\n      Object.keys(tankValidationErrors).forEach(function (key) {\r\n        tankValidationErrors[key] = \"\";\r\n      });\r\n\r\n      Object.keys(meterValidationErrors).forEach(function (key) {\r\n        meterValidationErrors[key] = \"\";\r\n      });\r\n\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n\r\n      this.setState(\r\n        {\r\n          modPipelineMeterTransactionSnapshotInfo,\r\n          modPipelineTankTransactionSnapshotInfo,\r\n          tankValidationErrors,\r\n          meterValidationErrors,\r\n          modAttributeMetaDataList: [],\r\n          attributeValidationErrors:\r\n            Utilities.getAttributeInitialValidationErrors(\r\n              attributeMetaDataList.PIPELINETRANSACTIONS\r\n            ),\r\n        },\r\n        () => {\r\n          this.formAttributesForUI(attributeMetaDataList);\r\n          this.setDefaultValues();\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetailsComposite: Error in reset\"\r\n      );\r\n    }\r\n  };\r\n\r\n  formAttributesForUI(attributeMetaDataList) {\r\n    try {\r\n      if (attributeMetaDataList.PIPELINETRANSACTIONS.length > 0) {\r\n        let modAttributeMetaDataList = [];\r\n        let selectedTerminals =\r\n          attributeMetaDataList.PIPELINETRANSACTIONS[0].TerminalCode;\r\n        attributeMetaDataList.PIPELINETRANSACTIONS.forEach(function (\r\n          attributeMetaData\r\n        ) {\r\n          if (attributeMetaData.TerminalCode === selectedTerminals) {\r\n            modAttributeMetaDataList.push(attributeMetaData);\r\n          }\r\n        });\r\n        this.setState({\r\n          modAttributeMetaDataList,\r\n        });\r\n        let attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n            (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n          );\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetails : Error in forming attributes for UI\"\r\n      );\r\n    }\r\n  }\r\n\r\n  getAttributes() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [pipelineTransactionsAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.PIPELINETRANSACTIONS\r\n                ),\r\n            },\r\n            () => {\r\n              this.formAttributesForUI(result.EntityResult);\r\n            }\r\n          );\r\n        } else {\r\n          console.log(\"Failed to get Attributes\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getting Attributes:\", error);\r\n    }\r\n  }\r\n\r\n  GetUOMList() {\r\n    try {\r\n      if (this.props.UOMS !== null && this.props.UOMS !== undefined) {\r\n        let UOMS = this.props.UOMS;\r\n        let quantityUOMOptions = [];\r\n        let densityUOMS = [];\r\n        let temperatureUOMs = [];\r\n        let volumeUOMs = [];\r\n        let pressureUOMs = [];\r\n\r\n        if (Array.isArray(UOMS.VOLUME)) {\r\n          volumeUOMs = Utilities.transferListtoOptions(UOMS.VOLUME);\r\n        }\r\n        if (Array.isArray(UOMS.MASS)) {\r\n          quantityUOMOptions = Utilities.transferListtoOptions(UOMS.MASS);\r\n        }\r\n        if (Array.isArray(UOMS.DENSITY)) {\r\n          densityUOMS = Utilities.transferListtoOptions(UOMS.DENSITY);\r\n        }\r\n        if (Array.isArray(UOMS.TEMPERATURE)) {\r\n          temperatureUOMs = Utilities.transferListtoOptions(UOMS.TEMPERATURE);\r\n        }\r\n        if (Array.isArray(UOMS.PRESSURE)) {\r\n          pressureUOMs = Utilities.transferListtoOptions(UOMS.PRESSURE);\r\n        }\r\n\r\n        this.setState({\r\n          quantityUOMOptions,\r\n          densityUOMS,\r\n          temperatureUOMs,\r\n          volumeUOMs,\r\n          pressureUOMs,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetailsComposite : Error in getting UOMS\"\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChange = (propertyName, data, source = \"\") => {\r\n    try {\r\n      if (source === \"Tank\") {\r\n        let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n          this.state.modPipelineTankTransactionSnapshotInfo\r\n        );\r\n        const tankValidationErrors = lodash.cloneDeep(\r\n          this.state.tankValidationErrors\r\n        );\r\n        modPipelineTankTransactionSnapshotInfo[propertyName] = data;\r\n        if (propertyName === \"TankCode\") {\r\n          this.getTankDetails(modPipelineTankTransactionSnapshotInfo);\r\n        } else if (propertyName === \"ScanEndTime\") {\r\n          tankValidationErrors.ScanStartTime = \"\";\r\n          this.setState({ modPipelineTankTransactionSnapshotInfo });\r\n        } else {\r\n          this.setState({ modPipelineTankTransactionSnapshotInfo });\r\n        }\r\n        if (\r\n          PipelineDispatchManualEntryValidationDef[propertyName] !== undefined\r\n        ) {\r\n          tankValidationErrors[propertyName] = Utilities.validateField(\r\n            PipelineDispatchManualEntryValidationDef[propertyName],\r\n            data\r\n          );\r\n        }\r\n        this.setState({ tankValidationErrors });\r\n      } else if (source === \"Meter\") {\r\n        let modPipelineMeterTransactionSnapshotInfo = lodash.cloneDeep(\r\n          this.state.modPipelineMeterTransactionSnapshotInfo\r\n        );\r\n        modPipelineMeterTransactionSnapshotInfo[propertyName] = data;\r\n        const meterValidationErrors = lodash.cloneDeep(\r\n          this.state.meterValidationErrors\r\n        );\r\n        if (\r\n          PipelineDispatchManualEntryValidationDef[propertyName] !== undefined\r\n        ) {\r\n          meterValidationErrors[propertyName] = Utilities.validateField(\r\n            PipelineDispatchManualEntryValidationDef[propertyName],\r\n            data\r\n          );\r\n        }\r\n        this.setState({\r\n          modPipelineMeterTransactionSnapshotInfo,\r\n          meterValidationErrors,\r\n        });\r\n      } else {\r\n        let modPipelineSnapshotInfo = lodash.clone(\r\n          this.state.modPipelineSnapshotInfo\r\n        );\r\n        modPipelineSnapshotInfo[propertyName] = data;\r\n\r\n        const tankValidationErrors = lodash.cloneDeep(\r\n          this.state.tankValidationErrors\r\n        );\r\n        if (\r\n          PipelineDispatchManualEntryValidationDef[propertyName] !== undefined\r\n        ) {\r\n          tankValidationErrors[propertyName] = Utilities.validateField(\r\n            PipelineDispatchManualEntryValidationDef[propertyName],\r\n            data\r\n          );\r\n\r\n          this.setState({\r\n            modPipelineSnapshotInfo,\r\n            tankValidationErrors,\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetailsComposite : Error in handle change\"\r\n      );\r\n    }\r\n  };\r\n\r\n  handleDateTextChange = (propertyName, value, error) => {\r\n    try {\r\n      let modPipelineTankTransactionSnapshotInfo = lodash.cloneDeep(\r\n        this.state.modPipelineTankTransactionSnapshotInfo\r\n      );\r\n      const tankValidationErrors = lodash.cloneDeep(\r\n        this.state.tankValidationErrors\r\n      );\r\n      tankValidationErrors[propertyName] = error;\r\n      modPipelineTankTransactionSnapshotInfo[propertyName] = value;\r\n      this.setState({\r\n        tankValidationErrors,\r\n        modPipelineTankTransactionSnapshotInfo,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchManualEntryDetailsComposite:Error occured on handleDateTextChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleTabChange = (index) => {\r\n    this.setState({\r\n      activeIndex: index,\r\n    });\r\n  };\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchtManualEntryDetailsComposite:Error occured on handleAttributeCellDataEditFP\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleTabChange = (index) => {\r\n    this.setState({\r\n      activeIndex: index,\r\n    });\r\n  };\r\n\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const listOptions = {\r\n      quantityUOMOptions: this.state.quantityUOMOptions,\r\n      densityUOMS: this.state.densityUOMS,\r\n      temperatureUOMs: this.state.temperatureUOMs,\r\n      volumeUOMs: this.state.volumeUOMs,\r\n      pressureUOMs: this.state.pressureUOMs,\r\n      tankCodes: this.state.tankCodes,\r\n      meterCodes: this.state.meterCodes,\r\n    };\r\n    return (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <PipelineDispatchManualEntryDetails\r\n            onFieldChange={this.handleChange}\r\n            onTabChange={this.handleTabChange}\r\n            listOptions={listOptions}\r\n            modDispatch={this.props.pipelineDispatch}\r\n            modPipelineSnapshotInfo={this.state.modPipelineSnapshotInfo}\r\n            modPipelineTankTransactionSnapshotInfo={\r\n              this.state.modPipelineTankTransactionSnapshotInfo\r\n            }\r\n            modPipelineMeterTransactionSnapshotInfo={\r\n              this.state.modPipelineMeterTransactionSnapshotInfo\r\n            }\r\n            tankValidationErrors={this.state.tankValidationErrors}\r\n            meterValidationErrors={this.state.meterValidationErrors}\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            onAttributeDataChange={this.handleAttributeDataChange}\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            activeIndex={this.state.activeIndex}\r\n            isMeterRequired={this.props.isMeterRequired}\r\n            isTankRequired={this.props.isTankRequired}\r\n            onDateTextChange={this.handleDateTextChange}\r\n          ></PipelineDispatchManualEntryDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.handleBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.manualEntrySaveEnable}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.isComminglingAlert ? this.ComminglingAlert() : null}\r\n\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={functionGroups.add}\r\n            functionGroup={fnPipelineDispatchManualEntry}\r\n            handleOperation={this.addLoadingDetails}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(\r\n  PipelineDispatchManualEntryDetailsComposite\r\n);\r\n\r\nPipelineDispatchManualEntryDetailsComposite.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  pipelineDispatch: PropTypes.object.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  UOMS: PropTypes.object.isRequired,\r\n};\r\n"],"names":["PipelineDispatchManualEntryDetails","_ref","modPipelineSnapshotInfo","modPipelineTankTransactionSnapshotInfo","modPipelineMeterTransactionSnapshotInfo","tankValidationErrors","meterValidationErrors","listOptions","modAttributeMetaDataList","attributeValidationErrors","onFieldChange","onTabChange","onAttributeDataChange","activeIndex","modDispatch","isMeterRequired","isTankRequired","onDateTextChange","handleValidationErrorFilter","terminal","attributeValidation","undefined","find","selectedAttribute","TerminalCode","_jsx","TranslationConsumer","children","t","_jsxs","className","Input","fluid","value","FinishedProductCode","label","disabled","reserveSpace","PipelineDispatchCode","PipelineHeaderCode","Select","tankCodes","options","Utilities","multiple","PipelineHeaderMeterCode","meterCodes","DatePicker","ScanStartTime","type","displayFormat","getCurrentDateFormat","disablePast","disableFuture","indicator","onChange","data","onTextChange","error","ScanEndTime","Remarks","length","map","attire","ErrorBoundary","Accordion","Content","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","handleCellDataEdit","Tab","index","Pane","placeholder","MeterCode","noResultsMessage","GrossStartTotalizer","NetStartTotalizer","GrossEndTotalizer","NetEndTotalizer","Temperature","TemperatureUOM","temperatureUOMs","search","Density","DensityUOM","densityUOMS","TankCode","GrossMass","MassUOM","quantityUOMOptions","GrossStartVolume","NetStartVolume","GrossEndVolume","NetEndVolume","VolumeUOM","volumeUOMs","Pressure","PressureUOM","pressureUOMs","defaultProps","PipelineDispatchManualEntryDetailsComposite","Component","constructor","_this","arguments","this","state","lodash","emptyPipelineSnapshotInfo","emptyPipelineCommonTransactionSnapshotInfo","props","pipelineHeaderMeterOptions","PipelineDispatchManualEntryValidationDef","manualEntrySaveEnable","isComminglingAlert","showAuthenticationLayout","tempPipelineSnapshotInfo","addLoadingDetails","setState","saveEnabled","CreateManualEntry","console","log","handleSave","attributeList","validateSave","pipelineSnapShotInfo","fillDetails","userDetails","EntityResult","IsWebPortalUser","ComminglingAlert","Modal","open","size","replace","selectedShareholder","Footer","Button","content","onClick","handleReset","Object","keys","forEach","key","PIPELINETRANSACTIONS","formAttributesForUI","setDefaultValues","handleChange","propertyName","source","getTankDetails","handleDateTextChange","handleTabChange","handleAttributeDataChange","attribute","matchedAttributes","matchedAttributesList","filter","modattribute","Array","isArray","Code","DefaultValue","handleAuthenticationClose","componentDidMount","IsArchived","GetUOMList","getAttributes","pipelineDispatch","QuantityUOM","Date","PageAttibutes","DefaultUOMS","getmeterCodes","getTankCodes","keyCode","KeyCodes","TerminalCodes","obj","keyDataCode","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","IsSuccess","tank","GrossMassUOM","catch","dispatch","fpCode","shCode","ErrorList","request","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","ShareHolderCode","Entity","toast","NotifyEvent","notificationMessage","autoClose","pipelineSnapshotInfoList","commonTransactionSnapshotInfoList","isBonded","IsBonded","tankCode","Attributes","pipelineSnapShotInfoList","PlanCode","TransactionType","Constants","DISPATCH","ShareholderCode","push","commonTransactionTankStartSnapShot","commonTransactionTankEndSnapShot","ScanTime","FlowRate","FlowRateUOM","GrossTotalizer","NetTotalizer","GrossVolume","NetVolume","PressureUOMv","IsManualEntry","LastUpdatedBy","Firstname","LastName","IsStart","IsEnd","commonTransactionMeterStartSnapshotInfo","commonTransactionMeterEndSnapshotInfo","attributeMetaData","meterReturnValue","returnValue","tankReturnValue","values","every","x","selectedTerminals","pipelineTransactionsAttributeEntity","UOMS","VOLUME","MASS","DENSITY","TEMPERATURE","PRESSURE","render","TMDetailsUserActions","handleBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroups","add","functionGroup","fnPipelineDispatchManualEntry","handleOperation","handleClose","connect","getUserDetails","TokenAuth"],"sourceRoot":""}