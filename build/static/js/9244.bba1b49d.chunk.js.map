{"version":3,"file":"static/js/9244.bba1b49d.chunk.js","mappings":"2YAuBO,SAASA,EAAiBC,GAS7B,IAT8B,WAC9BC,EAAU,cACVC,EAAa,iBACbC,EAAgB,cAChBC,EAAa,iBACbC,EAAgB,sBAChBC,EAAqB,0BACrBC,EAAyB,mBACzBC,GACHR,EAEG,MAAMS,EAA8BA,CAACF,EAA2BG,KAC5D,IAAIC,EAAsB,GAI1B,OAHAA,EAAsBJ,EAA0BK,MAAMC,GAC3CA,EAAkBC,eAAiBJ,IAEvCC,EAAoBJ,yBAAyB,EAGxD,OACIQ,EAAAA,EAAAA,KAACC,EAAAA,oBAAmB,CAAAC,SACfA,CAACC,EAAGC,KACDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBJ,SAAA,EAC7BG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKJ,SAAA,EAChBF,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACrCF,EAAAA,EAAAA,KAACO,EAAAA,MAAK,CAEFC,OAAK,EACLC,MAAOtB,EAAcuB,KACrBC,UAAU,WACVC,SAA8B,KAApB1B,EAAWwB,KACrBG,SAAWC,GAASzB,EAAc,OAAQyB,GAC1CC,MAAOZ,EAAE,uBACTa,MAAOb,EAAEf,EAAiBsB,MAC1BO,cAAc,GARTb,MAWbJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACrCF,EAAAA,EAAAA,KAACO,EAAAA,MAAK,CAEFC,OAAK,EACLC,MAAOtB,EAAc+B,OACrBL,SAAWC,GAASzB,EAAc,SAAUyB,GAC5CC,MAAOZ,EAAE,yBACTa,MAAOb,EAAEf,EAAiB8B,QAC1BD,cAAc,GANTb,MAWbJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACrCF,EAAAA,EAAAA,KAACO,EAAAA,MAAK,CAEFC,OAAK,EACLC,MAAOtB,EAAcgC,YACrBN,SAAWC,GAASzB,EAAc,cAAeyB,GACjDC,MAAOZ,EAAE,0BACTa,MAAOb,EAAEf,EAAiB+B,aAC1BF,cAAc,EACdN,UAAU,YAPLP,MAWbJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACrCF,EAAAA,EAAAA,KAACO,EAAAA,MAAK,CAEFC,OAAK,EACLC,MAAOtB,EAAciC,UACrBP,SAAWC,GAASzB,EAAc,YAAayB,GAC/CC,MAAOZ,EAAE,wBACTa,MAAOb,EAAEf,EAAiBgC,WAC1BH,cAAc,EACdN,UAAU,YAPLP,MAUbJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACrCF,EAAAA,EAAAA,KAACO,EAAAA,MAAK,CAEFC,OAAK,EACLC,MAAOtB,EAAckC,cACrBR,SAAWC,GAASzB,EAAc,gBAAiByB,GACnDC,MAAOZ,EAAE,4BACTa,MAAOb,EAAEf,EAAiBiC,eAC1BJ,cAAc,EACdN,UAAU,YAPLP,MAUbJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACrCF,EAAAA,EAAAA,KAACO,EAAAA,MAAK,CAEFC,OAAK,EACLC,MAAOtB,EAAcmC,OACrBT,SAAWC,GAASzB,EAAc,SAAUyB,GAC5CC,MAAOZ,EAAE,qBACTa,MAAOb,EAAEf,EAAiBkC,QAC1BL,cAAc,GANTb,QAYbb,EAAsBgC,OAAS,EAC3BhC,EAAsBiC,KAAKC,IACvBzB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAa,CAAAxB,UACVF,EAAAA,EAAAA,KAAC2B,EAAAA,UAAS,CAAAzB,UACNF,EAAAA,EAAAA,KAAC2B,EAAAA,UAAUC,QAAO,CACdtB,UAAU,qBACVuB,MAAOvC,EAAoBmC,EAAU1B,aAAe,MAAQI,EAAE,qBAAyBA,EAAE,qBAAsBD,UAE/GF,EAAAA,EAAAA,KAAC8B,EAAAA,EAAgB,CACbvC,sBAAuBkC,EAAUM,sBACjCtC,mBAAoBA,EACpBD,0BAA2BE,EAA4BF,EAA2BiC,EAAU1B,wBAK5G,SAQhC,CAjIAf,EAAkBgD,aAAe,CAC7B1C,kBAAkB,G,0BCAtB,MAAM2C,UAAmCC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KAC/CC,MAAQ,CACJnD,WAAYoD,IAAAA,UAAiBC,EAAAA,IAC7BpD,cAAe,CAAC,EAChBC,iBAAkBoD,EAAAA,GAAqCC,EAAAA,IACvDC,iBAAiB,EACjBC,aAAa,EACbC,WAAY,KACZC,UAAU,EACVd,sBAAuB,GACvBxC,sBAAuB,GACxBC,0BAA2B,GAC3BsD,0BAA0B,EAC1BC,eAAgB,CAAC,GACnB,KAyODC,aAAe,CAACC,EAAcnC,KAC1B,IACI,MAAM3B,EAAgBmD,IAAAA,UAAiBY,KAAKb,MAAMlD,eAClDA,EAAc8D,GAAgBnC,EAC9BoC,KAAKC,SAAS,CAAEhE,kBAEhB,MAAMC,EAAmBkD,IAAAA,UAAiBY,KAAKb,MAAMjD,uBACPgE,IAA1CX,EAAAA,GAAwBQ,KACxB7D,EAAiB6D,GAAgBT,EAAAA,GAC7BC,EAAAA,GAAwBQ,GACxBnC,GAEJoC,KAAKC,SAAS,CAAE/D,qBAExB,CAAE,MAAO4B,GACLqC,QAAQC,IACJ,2DACAtC,EAER,GACF,KAEFuC,YAAc,KACV,IACI,MAAM,iBAAEnE,GAAqB,IAAK8D,KAAKb,OACjCnD,EAAaoD,IAAAA,UAAiBY,KAAKb,MAAMnD,YAC/CsE,OAAOC,KAAKrE,GAAkBsE,SAAQ,SAAUC,GAC5CvE,EAAiBuE,GAAO,EAC5B,IACAT,KAAKC,SAAS,CACVhE,cAAe,IAAKD,GACpB0E,gBAAiB,GACjBxE,oBAER,CAAE,MAAO4B,GACLqC,QAAQC,IAAI,0DAA2DtC,EAC3E,GACF,KACJ6C,0BAA4B,KAC1BX,KAAKC,SAAS,CACZL,0BAA0B,GAC1B,EACF,KAEFgB,eAAiB,KACf,IACEZ,KAAKC,SAAS,CAAER,aAAa,IAC7B,IAAII,EAAiBT,IAAAA,UAAiBY,KAAKb,MAAMU,gBAC7CgB,EAAgBvB,EAAAA,GAClBU,KAAKb,MAAM9C,uBAEbwD,EAAiBG,KAAKc,uBACpBjB,EACAgB,GAE6B,KAA/Bb,KAAKb,MAAMnD,WAAWwB,KAClBwC,KAAKe,iBAAiBlB,GACtBG,KAAKgB,iBAAiBnB,EAC5B,CACE,MAAO/B,GACPqC,QAAQC,IAAI,uDACZ,GACL,KACGa,WAAa,KACT,IACI,IAAIhF,EAAgB+D,KAAKkB,cACrBL,EAAgBvB,EAAAA,GAChBU,KAAKb,MAAM9C,uBAGf,GAAI2D,KAAKmB,aAAalF,EAAc4E,GAAgB,CAClD,IAAIjB,GACsD,IAAxDI,KAAKoB,MAAMC,YAAYC,aAAaC,gBAGlC1B,EAAiBT,IAAAA,UAAiBnD,GACtC+D,KAAKC,SAAS,CAAEL,2BAA0BC,mBAAkB,MACzB,IAA7BD,GACFI,KAAKY,gBACP,GAEJ,MAAOZ,KAAKC,SAAS,CAAER,aAAa,GACxC,CACA,MAAO3B,GACHqC,QAAQC,IAAI,yDAA0DtC,EAC1E,GACF,KA0RFvB,mBAAqB,CAACgC,EAAWhB,KAC7B,IACEgB,EAAUiD,aAAejE,EACzByC,KAAKC,SAAS,CACZ1B,UAAWA,IAEb,MAAMjC,EAA4B8C,IAAAA,UAChCY,KAAKb,MAAM7C,2BAGbA,EAA0BkE,SAAS9D,IAC7BA,EAAoBG,eAAiB0B,EAAU1B,eACjDH,EAAoBJ,0BAClBiC,EAAUf,MACR8B,EAAAA,GAAgCf,EAAWhB,GACjD,IAEFyC,KAAKC,SAAS,CAAE3D,6BAClB,CAAE,MAAOwB,GACPqC,QAAQC,IACN,iEACAtC,EAEJ,EACA,CA/mBJ2D,iBAAAA,GACI,IACInC,EAAAA,GAAqBU,KAAKoB,MAAMC,YAAYC,aAAaI,YACzD1B,KAAK2B,cAAc3B,KAAKoB,MAAMQ,YAElC,CAAE,MAAO9D,GACLqC,QAAQC,IACJ,gEACAtC,EAER,CACJ,CAEA+D,yBAAAA,CAA0BC,GACtB,IACI,GACmC,KAA/B9B,KAAKb,MAAMnD,WAAWwB,WACgB0C,IAAtC4B,EAAUF,YAAYG,aACtB/B,KAAKoB,MAAMY,aAAaC,YAAcH,EAAUE,aAAaC,UAC/D,CAEEjC,KAAK2B,cAAcG,EAAUF,aAC7B,IAAI1F,EAAmB,IAAK8D,KAAKb,MAAMjD,kBACvCoE,OAAOC,KAAKrE,GAAkBsE,SAASC,IACnCvE,EAAiBuE,GAAO,EAAE,IAE9BT,KAAKC,SAAS,CAAE/D,oBACpB,CACJ,CAAE,MAAO4B,GACLqC,QAAQC,IACJ,wEACAtC,EAER,CACJ,CAEAoE,kBAAAA,GACI,IACE,IAAIrD,EAAwBO,IAAAA,UAC1BY,KAAKb,MAAMN,uBAETsD,MAAMC,QAAQvD,EAAsBwD,aAAexD,EAAsBwD,WAAWhE,OAAS,GAC/F2B,KAAKsC,wBAAwB,CAC3BzD,EAAsBwD,WAAW,GAAGxF,cAI1C,CAAE,MAAOiB,GACPqC,QAAQC,IACN,iEACAtC,EAEJ,CACF,CAEAwE,uBAAAA,CAAwBC,GACtB,IACE,QAA0BrC,IAAtBqC,GAAyD,OAAtBA,EAA4B,CACjE,IAAIC,EAA0B,GAC9B,IAAI3D,EAAwB,GACxBxC,EAAwB,GAC5BwC,EAAwBO,IAAAA,UACtBY,KAAKb,MAAMN,uBAEbxC,EAAwB+C,IAAAA,UACtBY,KAAKb,MAAM9C,uBAEb,MAAMC,EAA4B8C,IAAAA,UAChCY,KAAKb,MAAM7C,2BAEb,IAAIL,EAAgBmD,IAAAA,UAAiBY,KAAKb,MAAMlD,eAEhDsG,EAAkB/B,SAAS/D,IACzB,IAAIgG,EAAYpG,EAAsBM,MAAMC,GACnCA,EAAkBC,eAAiBJ,SAG1ByD,IAAduC,EACF5D,EAAsBwD,WAAW7B,SAAQ,SACvCkC,GAEA,GAAIA,EAAkB7F,eAAiBJ,EAAU,CAC/C,IAAIkG,EAAiB1G,EAAc2G,WAAWjG,MAC3CkG,GACQA,EAAoBhG,eAAiBJ,SAGzByD,IAAnByC,GACFD,EAAkB7D,sBAAsB2B,SAAQ,SAC9CkC,GAEA,IAAII,EAAiBH,EAAeI,oBAAoBpG,MACrDqG,GACQA,EAAEC,gBAAkBP,EAAkBlF,YAG1B0C,IAAnB4C,IACFJ,EAAkBlB,aAChBsB,EAAeI,eACrB,IAEFV,EAAwBW,KAAKT,EAC/B,CACF,IAEAF,EAAwBW,KAAKV,EAC/B,IAEFpG,EAAwB,GACxBA,EAAwBmG,EACxBnG,EAAwBiD,EAAAA,GACtBjD,GAEFC,EAA0BkE,SAAS9D,SAIXwD,IAHFqC,EAAkB5F,MAAM4F,GACnC7F,EAAoBG,eAAiB0F,KAG5CjC,OAAOC,KAAK7D,EAAoBJ,2BAA2BkE,SACxDC,GAAS/D,EAAoBJ,0BAA0BmE,GAAO,IAEnE,IAEFT,KAAKC,SAAS,CAAE5D,wBAAuBC,6BACzC,CACF,CAAE,MAAOwB,GACPqC,QAAQC,IACN,wEACAtC,EAEJ,CACF,CAEF6D,aAAAA,CAAcyB,GACV,IACEC,IACEC,EAAAA,IACAhE,EAAAA,GACE,CAACiE,EAAAA,IACDvD,KAAKoB,MAAMY,aAAaC,YAE1BuB,MAAMC,IACN,IAAIC,EAASD,EAAS7F,MACG,IAArB8F,EAAOC,UACT3D,KAAKC,SACH,CACEpB,sBAAuBO,IAAAA,UAAiBsE,EAAOpC,cAC/ChF,0BAA2BgD,EAAAA,GACzBoE,EAAOpC,aAAae,cAGxB,IAAMrC,KAAK4D,cAAcR,KAG3BjD,QAAQC,IAAI,0BACd,GAEJ,CAAE,MAAOtC,GACPqC,QAAQC,IAAI,6BAA8BtC,EAC5C,CACF,CAEF8F,aAAAA,CAAcR,GAEV,QAAkClD,IAA9BkD,EAAcrB,YAAlB,CAkBA,IAAI8B,EAAU,CACV,CACIpD,IAAKqD,EAAAA,GACLvG,MAAO6F,EAAcrB,cAGzBgC,EAAM,CACNC,eAAgBZ,EAAcrB,YAC9BkC,YAAaH,EAAAA,GACbA,SAAUD,GAEdR,IACIC,EAAAA,IACAhE,EAAAA,GACIyE,EACA/D,KAAKoB,MAAMY,aAAaC,YAE9BuB,MAAMC,IACJ,IAAIC,EAASD,EAAS7F,MACG,IAArB8F,EAAOC,WACPD,EAAOpC,aAAa9D,KAAOkG,EAAOpC,aAAa9D,KAAK0G,WACpDlE,KAAKC,SACD,CACIT,iBAAiB,EACjBxD,WAAYoD,IAAAA,UAAiBsE,EAAOpC,cACpCrF,cAAemD,IAAAA,UAAiBsE,EAAOpC,cACvC7B,YAAaH,EAAAA,GACTU,KAAKoB,MAAMC,YAAYC,aAAa6C,cACpCC,EAAAA,EAAeC,OACfC,EAAAA,MAEN,KACEtE,KAAKkC,oBAAoB,MAIjClC,KAAKC,SAAS,CACVjE,WAAYoD,IAAAA,UAAiBC,EAAAA,IAC7BpD,cAAemD,IAAAA,UAAiBC,EAAAA,IAChCG,iBAAiB,IAErBW,QAAQC,IAAI,0BAA2BsD,EAAOa,WAClD,IAECC,OAAO1G,IACJqC,QAAQC,IAAI,6BAA8BtC,EAAOsF,EAAc,GA9CvE,MAhBIpD,KAAKC,SAAS,CACVjE,WAAYoD,IAAAA,UAAiBC,EAAAA,IAC7BpD,cAAemD,IAAAA,UAAiBC,EAAAA,IAChCG,iBAAiB,EACjBnD,sBAAuB,GACvBoD,YAAaH,EAAAA,GACTU,KAAKoB,MAAMC,YAAYC,aAAa6C,cACpCC,EAAAA,EAAeK,IACfH,EAAAA,MAGR,KACItE,KAAKkC,oBAAoB,GAoDrC,CA0FAwC,oBAAAA,CAAqBzI,EAAe4E,GAChC,IAkBE,OAjBAA,EAAgBvB,EAAAA,GAAuCuB,GAEvD5E,EAAc2G,WAAa,GAC3B/B,EAAcL,SAASmE,IACrB,IAAIpG,EAAY,CACdwE,oBAAqB,IAEvBxE,EAAU1B,aAAe8H,EAAK9H,aAC9B8H,EAAK9F,sBAAsB2B,SAASoE,IAClCrG,EAAUwE,oBAAoBI,KAAK,CACjCF,cAAe2B,EAAIpH,KACnB0F,eAAgB0B,EAAIpD,cACpB,IAEJvF,EAAc2G,WAAWO,KAAK5E,EAAU,IAE1CyB,KAAKC,SAAS,CAAEhE,kBACTA,CACT,CAAE,MAAO6B,GACPqC,QAAQC,IACN,mEACAtC,EAEJ,CACF,CAEFoD,WAAAA,GACI,IACI,IAAIjF,EAAgBmD,IAAAA,UAAiBY,KAAKb,MAAMlD,eAEhD,OADA+D,KAAKC,SAAS,CAAEhE,kBACTA,CAEX,CAAE,MAAO6B,GACLqC,QAAQC,IAAI,mEAAoEtC,EACpF,CACJ,CAEAqD,YAAAA,CAAalF,EAAc4E,GACvB,IAAI3E,EAAmBkD,IAAAA,UAAiBY,KAAKb,MAAMjD,kBACnDoE,OAAOC,KAAKhB,EAAAA,IAAyBiB,SAAQ,SAAUC,GACnDvE,EAAiBuE,GAAOnB,EAAAA,GACpBC,EAAAA,GAAwBkB,GACxBxE,EAAcwE,GAEtB,IAEA,IAAInE,EAA4B8C,IAAAA,UAC5BY,KAAKb,MAAM7C,2BAGbuE,EAAcL,SAASjC,IACrBjC,EAA0BkE,SAAS9D,IAC7BA,EAAoBG,eAAiB0B,EAAU1B,cACjD0B,EAAUM,sBAAsB2B,SAASkC,IACvChG,EAAoBJ,0BAClBoG,EAAkBlF,MAChB8B,EAAAA,GACFoD,EACAA,EAAkBlB,aACnB,GAEL,GACA,IAGJxB,KAAKC,SAAS,CAAE/D,mBAAkBI,8BAGpC,IAAIuI,GAAc,EAmClB,OAjCAvI,EAA0BkE,SAASwC,IAC/B,IAAI6B,EAOF,OAAOA,EANPA,EAAcvE,OAAOwE,OAAO9B,EAAE1G,2BAA2ByI,OACvD,SAAUxH,GACR,MAAiB,KAAVA,CACT,GAIJ,IAG8B,KAA9BtB,EAAcgC,aAAoD,OAA9BhC,EAAcgC,aAAoD,KAA5BhC,EAAciC,WAAgD,OAA5BjC,EAAciC,WACtH8G,SAAS/I,EAAcgC,cAAgB+G,SAAS/I,EAAciC,aAC9DhC,EAA8B,YAAI,kCAGR,KAA9BD,EAAcgC,aAAoD,OAA9BhC,EAAcgC,aAAoD,KAA5BhC,EAAciC,WAAgD,OAA5BjC,EAAciC,WACtH8G,SAAS/I,EAAciC,YAAc8G,SAAS/I,EAAcgC,eAC5D/B,EAA4B,UAAI,2BAGJ,KAAhCD,EAAckC,eAAwD,OAAhClC,EAAckC,gBAC/C6G,SAAS/I,EAAckC,eAAkB6G,SAAS/I,EAAciC,YAAe8G,SAAS/I,EAAckC,eAAkB6G,SAAS/I,EAAcgC,YAAc,MAC9J/B,EAAgC,cAAI,+BAGxC2I,IACAA,EAAcvE,OAAOwE,OAAO5I,GAAkB6I,OAAM,SAAUxH,GAC1D,MAAiB,KAAVA,CACX,KAGGsH,CACX,CAEA9D,gBAAAA,CAAiB9E,GACb,IAAI4H,EAAU,CACV,CACIpD,IAAKqD,EAAAA,GACLvG,MAAOtB,EAAcuB,OAGzBuG,EAAM,CACNE,YAAaH,EAAAA,GACbA,SAAUD,EACVoB,OAAQhJ,GAGRiJ,EAAe,CACfC,YAAa,WACbC,QAAS,gCACTC,qBAAsB,CAClB,CACIC,UAAW,CAAC,0BACZC,UAAW,CAACtJ,EAAcuB,MAC1BgI,WAAW,EACXC,aAAc,MAK1BpC,IACIC,EAAAA,IACAhE,EAAAA,GACIyE,EACA/D,KAAKoB,MAAMY,aAAaC,YAE9BuB,MAAMC,IACJ,IAAIC,EAASD,EAAS7F,KACtBsH,EAAaC,YAAczB,EAAOC,UAAY,UAAY,WAC1DxD,QAAQC,IAAIsD,GACZwB,EAAaG,qBAAqB,GAAGG,UAAY9B,EAAOC,WAC/B,IAArBD,EAAOC,UACP3D,KAAKC,SACD,CACIR,YAAaH,EAAAA,GACTU,KAAKoB,MAAMC,YAAYC,aAAa6C,cACpCC,EAAAA,EAAeC,OACfC,EAAAA,IAER1E,0BAA0B,IAG1B,IAAMI,KAAK4D,cAAc,CAAE7B,YAAa9F,EAAcuB,UAG1D0H,EAAaG,qBAAqB,GAAGI,aACjC/B,EAAOa,UAAU,GACrBvE,KAAKC,SAAS,CACVR,YAAaH,EAAAA,GACTU,KAAKoB,MAAMC,YAAYC,aAAa6C,cACpCC,EAAAA,EAAeK,IACfH,EAAAA,IAEN1E,0BAA0B,IAG5BO,QAAQC,IAAI,uBAAwBsD,EAAOa,YAE/CvE,KAAKoB,MAAMsE,QAAQ1F,KAAKb,MAAMlD,cAAe,MAAOiJ,EAAa,IAEhEV,OAAO1G,IACJkC,KAAKC,SAAS,CACVR,YAAaH,EAAAA,GACTU,KAAKoB,MAAMC,YAAYC,aAAa6C,cACpCC,EAAAA,EAAeK,IACfH,EAAAA,IAEN1E,0BAA0B,IAG5BsF,EAAaG,qBAAqB,GAAGI,aAAe3H,EACpDkC,KAAKoB,MAAMsE,QAAQ1F,KAAKb,MAAMlD,cAAe,MAAOiJ,EAAa,GAE7E,CAEApE,sBAAAA,CAAuB6E,EAAe9E,GAClC,IAGE,OADE8E,EAAgB3F,KAAK0E,qBAAqBiB,EAAe9E,EAE7D,CAAE,MAAO+E,GACPzF,QAAQC,IAAI,kDAAmDwF,EACjE,CACF,CAEF5E,gBAAAA,CAAiB/E,GACb,IAAI4H,EAAU,CACV,CACIpD,IAAKqD,EAAAA,GACLvG,MAAOtB,EAAc4J,iBAGzB9B,EAAM,CACNE,YAAaH,EAAAA,GACbA,SAAUD,EACVoB,OAAQhJ,GAGRiJ,EAAe,CACfC,YAAa,WACbC,QAAS,gCACTC,qBAAsB,CAClB,CACIC,UAAW,CAAC,0BACZC,UAAW,CAACtJ,EAAcuB,MAC1BgI,WAAW,EACXC,aAAc,MAK1BpC,IACIC,EAAAA,IACAhE,EAAAA,GACIyE,EACA/D,KAAKoB,MAAMY,aAAaC,YAE9BuB,MAAMC,IACJ,IAAIC,EAASD,EAAS7F,KACtBsH,EAAaC,YAAczB,EAAOC,UAAY,UAAY,WAC1DuB,EAAaG,qBAAqB,GAAGG,UAAY9B,EAAOC,WAC/B,IAArBD,EAAOC,UACP3D,KAAKC,SACD,CACIR,YAAaH,EAAAA,GACTU,KAAKoB,MAAMC,YAAYC,aAAa6C,cACpCC,EAAAA,EAAeC,OACfC,EAAAA,IAER1E,0BAA0B,IAG1B,IAAMI,KAAK4D,cAAc,CAAE7B,YAAa9F,EAAcuB,UAG1D0H,EAAaG,qBAAqB,GAAGI,aACjC/B,EAAOa,UAAU,GACrBvE,KAAKC,SAAS,CACVR,YAAaH,EAAAA,GACTU,KAAKoB,MAAMC,YAAYC,aAAa6C,cACpCC,EAAAA,EAAeC,OACfC,EAAAA,IAEN1E,0BAA0B,IAG5BO,QAAQC,IAAI,8BAA+BsD,EAAOa,YAEtDvE,KAAKoB,MAAMsE,QAAQ1F,KAAKb,MAAMlD,cAAe,SAAUiJ,EAAa,IAEnEV,OAAO1G,IACJkC,KAAKC,SAAS,CACVR,YAAaH,EAAAA,GACTU,KAAKoB,MAAMC,YAAYC,aAAa6C,cACpCC,EAAAA,EAAeC,OACfC,EAAAA,IAEN1E,0BAA0B,IAG5BsF,EAAaG,qBAAqB,GAAGI,aAAe3H,EACpDkC,KAAKoB,MAAMsE,QAAQ1F,KAAKb,MAAMlD,cAAe,SAAUiJ,EAAa,GAEhF,CA6BAY,MAAAA,GACI3F,QAAQC,IAAIJ,KAAKoB,MAAMC,aACvB,MAAM0E,EAAgB,CAClB,CACIC,UAAW,6BACXC,WACI,IAAIC,KAAKlG,KAAKb,MAAMlD,cAAckK,iBAAiBC,qBACnD,IACA,IAAIF,KAAKlG,KAAKb,MAAMlD,cAAckK,iBAAiBE,sBAG3D,CACIL,UAAW,yBACXC,WACI,IAAIC,KAAKlG,KAAKb,MAAMlD,cAAcqK,aAAaF,qBAC/C,IACA,IAAIF,KAAKlG,KAAKb,MAAMlD,cAAcqK,aAAaD,sBAEvD,CACIL,UAAW,+BACXC,WAAWjG,KAAKb,MAAMlD,cAAcsK,gBAI5C,OAAOvG,KAAKb,MAAMK,iBACdrC,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACIF,EAAAA,EAAAA,KAAC0B,EAAAA,EAAa,CAAAxB,UACVF,EAAAA,EAAAA,KAAC0J,EAAAA,EAAe,CACZC,WAAYzG,KAAKb,MAAMnD,WAAWwB,KAClCkJ,cAAc,uBACdX,cAAeA,OAIvBjJ,EAAAA,EAAAA,KAAC0B,EAAAA,EAAa,CAAAxB,UACVF,EAAAA,EAAAA,KAAChB,EAAiB,CACdE,WAAYgE,KAAKb,MAAMnD,WACvBC,cAAe+D,KAAKb,MAAMlD,cAC1BC,iBAAkB8D,KAAKb,MAAMjD,iBAC7BC,cAAe6D,KAAKF,aACpB1D,iBAAkB4D,KAAKoB,MAAMC,YAAYC,aAAaqF,iBACtDrK,0BAA2B0D,KAAKb,MAAM7C,0BACtCD,sBAAuB2D,KAAKb,MAAM9C,sBAClCE,mBAAoByD,KAAKzD,wBAIjCO,EAAAA,EAAAA,KAAC0B,EAAAA,EAAa,CAAAxB,UACVF,EAAAA,EAAAA,KAAC8J,EAAAA,EAAoB,CACjBC,WAAY7G,KAAKoB,MAAM0F,OACvB7F,WAAYjB,KAAKiB,WACjBZ,YAAaL,KAAKK,YAClBZ,YAAaO,KAAKb,MAAMM,gBAGnCO,KAAKb,MAAMS,0BACV9C,EAAAA,EAAAA,KAACiK,EAAAA,EAAwB,CACvBC,SAAUhH,KAAKoB,MAAMC,YAAYC,aAAa2F,SAC9CC,aACiC,KAA/BlH,KAAKb,MAAMnD,WAAWwB,KAClB4G,EAAAA,EAAeK,IACfL,EAAAA,EAAeC,OAErB8C,cAAe7C,EAAAA,GACf8C,gBAAiBpH,KAAKY,eACtByG,YAAarH,KAAKW,4BAElB,SAGJ7D,EAAAA,EAAAA,KAACwK,EAAAA,EAAW,CAAClC,QAAQ,WAE7B,EAIJ,MAOA,GAAemC,EAAAA,EAAAA,KAPUpI,IACd,CACHkC,YAAalC,EAAMqI,eAAenG,YAClCW,aAAc7C,EAAMqI,eAAeC,aAI3C,CAAwC1I,E,iFCntBjC,SAASyH,EAAezK,GAAgD,IAA/C,WAAE0K,EAAU,cAAEC,EAAa,cAAEX,GAAehK,EAC1E,OACEe,EAAAA,EAAAA,KAACC,EAAAA,oBAAmB,CAAAC,SAChBC,IACAH,EAAAA,EAAAA,KAAA,OAAKM,UAAU,kBAAiBJ,UAC9BG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBJ,SAAA,EAChCF,EAAAA,EAAAA,KAAA,OAAKM,UAAU,4BAA2BJ,UACxCF,EAAAA,EAAAA,KAAA,QAAM4K,MAAO,CAAEC,OAAQ,QAAUvK,UAAU,cAAaJ,SACtC,KAAfyJ,QAAoCvG,IAAfuG,EAClBxJ,EAAEyJ,GACFD,MAGQ,KAAfA,QACcvG,IAAfuG,GACAV,EAAc1H,OAAS,GACrBvB,EAAAA,EAAAA,KAAA,OAAKM,UAAU,kBAAiBJ,UAC9BF,EAAAA,EAAAA,KAAC8K,EAAAA,MAAK,CACJC,SACE1K,EAAAA,EAAAA,MAAA,OAAAH,SAAA,CACGC,EAAE8I,EAAc,GAAGC,WAAa,IAAI,IACpC,IAAMD,EAAc,GAAGE,YACxBnJ,EAAAA,EAAAA,KAACgL,EAAAA,KAAI,CACHJ,MAAO,CAAEK,WAAY,QACrBC,KAAK,SACLC,KAAK,aACLC,KAAK,aAIXC,SAAS,cACTnL,UAEAF,EAAAA,EAAAA,KAACsL,EAAAA,KAAI,CAAChL,UAAU,qBAAoBJ,SACjC+I,EAAczH,KAAK+J,IAClBlL,EAAAA,EAAAA,MAACiL,EAAAA,KAAK1J,QAAO,CAEXtB,UAAU,gCAA+BJ,SAAA,CAExCC,EAAEoL,EAAQrC,WAAa,IAAI,IAAE,IAAMqC,EAAQpC,aAHxC,6BAUd,SAOd,CA3DAO,EAAgB1H,aAAe,CAC7B2H,WAAY,GACZC,cAAe,GACfX,cAAe,IA0DjB,S,gFCjEO,SAASa,EAAoB7K,GAKhC,IALiC,WACnC8K,EAAU,WACV5F,EAAU,YACVZ,EAAW,YACXZ,GACD1D,EACC,OACEe,EAAAA,EAAAA,KAACC,EAAAA,oBAAmB,CAAAC,SAChBC,IACAE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBJ,SAAA,EACrCF,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACvCF,EAAAA,EAAAA,KAACwL,EAAAA,OAAM,CACLlL,UAAU,aACVmL,QAAS1B,EACTwB,QAASpL,EAAE,aAGfH,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACvCG,EAAAA,EAAAA,MAAA,OAAKuK,MAAO,CAAEc,MAAO,SAAUxL,SAAA,EAC7BF,EAAAA,EAAAA,KAACwL,EAAAA,OAAM,CACLD,QAASpL,EAAE,uBACXG,UAAU,eACVmL,QAASlI,KAEXvD,EAAAA,EAAAA,KAACwL,EAAAA,OAAM,CACLD,QAASpL,EAAE,QACXS,UAAW+B,EACX8I,QAAStH,aAWzB,CAvCA2F,EAAqB9H,aAAe,CAAEW,aAAa,E,sGCH5C,SAASb,EAAgB7C,GAI5B,IAJ6B,sBAC7BM,EAAqB,mBACrBE,EAAkB,0BAClBD,GACHP,EACG,MAAM0M,EAA4BlK,IAC9B,GAA+B,eAA3BA,EAAUiD,aAEV,OADAkH,EAA6BnK,EAAU,IAAI2H,MACpC,IAAIA,KAEX,IAAIyC,EAAQpK,EAAUiD,aAAaoH,MAAM,KACzC,OAAO,IAAI1C,KAAKyC,EAAM,GAAGA,EAAM,GAAG,EAAEA,EAAM,GAC9C,EAEED,EAA+BA,CAACnK,EAAWhB,KAC7C,IAAIsL,EAAU,IAAI3C,KAAK3I,GACvBA,EAAQsL,EAAQC,cAAgB,KAAO,KAAOD,EAAQE,WAAa,IAAIC,OAAO,GAAK,KAAO,IAAMH,EAAQI,WAAWD,OAAO,GAC1HzM,EAAmBgC,EAAUhB,EAAM,EAEvC,OACIT,EAAAA,EAAAA,KAACC,EAAAA,oBAAmB,CAAAC,SACdC,IACEH,EAAAA,EAAAA,KAAA,OAAKM,UAAU,MAAKJ,UAChBF,EAAAA,EAAAA,KAAA,OAAKM,UAAU,kCAAiCJ,UAC5CF,EAAAA,EAAAA,KAAA,OAAKM,UAAU,MAAKJ,SAEZX,EAAsBiC,KAAKC,GACvBA,EAAU2K,SAASC,gBAAkBC,EAAAA,GAAmBC,OAAOF,gBAAyC,IAAxB5K,EAAU+K,WACtFxM,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACrCF,EAAAA,EAAAA,KAACO,EAAAA,MAAK,CACFC,OAAK,EACLO,MAAOZ,EAAEsB,EAAUgL,aACnBhM,MAAkC,OAA3BgB,EAAUiD,aAAwB,GAAKjD,EAAUiD,aACxD/D,WAAqC,IAA1Bc,EAAUiL,YAAuB,WAAa,KACzD9L,UAAmC,IAAzBa,EAAUkL,WACpB9L,SAAWJ,GAAUhB,EAAmBgC,EAAWhB,GACnDO,MAAOb,EAAEX,EAA0BiC,EAAUf,OAC7CO,cAAc,MAEZQ,EAAU2K,SAASC,gBAAkBC,EAAAA,GAAmBM,IAAIP,eAAiB5K,EAAU2K,SAASC,gBAAkBC,EAAAA,GAAmBO,KAAKR,gBAA0C,IAAxB5K,EAAU+K,UAezK/K,EAAU2K,SAASC,gBAAkBC,EAAAA,GAAmBQ,MAAMT,eAAiB5K,EAAU2K,SAASC,gBAAkBC,EAAAA,GAAmBS,OAAOV,gBAA0C,IAAxB5K,EAAU+K,UAgBzK/K,EAAU2K,SAASC,gBAAkBC,EAAAA,GAAmBU,KAAKX,gBAAyC,IAAxB5K,EAAU+K,WACpFxM,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACrCF,EAAAA,EAAAA,KAACiN,EAAAA,SAAQ,CAAC3M,UAAU,sCAChBS,MAAOZ,EAAEsB,EAAUgL,aACnBS,QAAoC,OAA3BzL,EAAUiD,aAAwB,GAAyD,SAApDjD,EAAUiD,aAAa0C,WAAWiF,cAClFzL,UAAmC,IAAzBa,EAAUkL,WACpB9L,SAAWJ,GAAUhB,EAAmBgC,EAAWhB,OAIzDgB,EAAU2K,SAASC,gBAAkBC,EAAAA,GAAmBa,SAASd,gBAAyC,IAAxB5K,EAAU+K,WAE1FxM,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACrCF,EAAAA,EAAAA,KAACoN,EAAAA,WAAU,CACP5M,OAAK,EACLC,MAAmC,OAA3BgB,EAAUiD,cAAoD,KAA3BjD,EAAUiD,aAAuB,GACtEiH,EAAyBlK,GAE/BV,MAAOZ,EAAEsB,EAAUgL,aACnBY,eAAeC,EAAAA,EAAAA,MACfC,iBAAiB,OACjB5M,WAAqC,IAA1Bc,EAAUiL,YAAuB,WAAa,KACzD9L,UAAmC,IAAzBa,EAAUkL,WACpB9L,SAAWJ,GACPmL,EAA6BnK,EAAWhB,GAE5C+M,aAAe/M,IACXmL,EAA6BnK,EAAWhB,EAAM,EAElDO,MAAOb,EAAEX,EAA0BiC,EAAUf,OAC7CO,cAAc,MAEb,MA/CjBjB,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACrCF,EAAAA,EAAAA,KAACO,EAAAA,MAAK,CACFC,OAAK,EACLO,MAAOZ,EAAEsB,EAAUgL,aACnBhM,MAEgC,OAA3BgB,EAAUiD,cAAoD,KAA3BjD,EAAUiD,aAAuB,GAAMjD,EAAUiD,aAAc+I,iBAEvG9M,WAAqC,IAA1Bc,EAAUiL,YAAuB,WAAa,KACzD9L,UAAmC,IAAzBa,EAAUkL,WACpB9L,SAAWJ,GAAUhB,EAAmBgC,EAAWhB,GACnDO,MAAOb,EAAEX,EAA0BiC,EAAUf,OAC7CO,cAAc,OA3B1BjB,EAAAA,EAAAA,KAAA,OAAKM,UAAU,2BAA0BJ,UACrCF,EAAAA,EAAAA,KAACO,EAAAA,MAAK,CACFC,OAAK,EACLO,MAAOZ,EAAEsB,EAAUgL,aACnBhM,MAAkC,OAA3BgB,EAAUiD,aAAwB,GAAKjD,EAAUiD,aAExD/D,WAAqC,IAA1Bc,EAAUiL,YAAuB,WAAa,KACzD9L,UAAmC,IAAzBa,EAAUkL,WACpB9L,SAAWJ,GAAUhB,EAAmBgC,EAAWhB,GACnDO,MAAOb,EAAEX,EAA0BiC,EAAUf,OAC7CO,cAAc,eA6DlE,C,mjCCtHO,MAAMyM,EAAwB,SACxBC,EAAyB,iBACzBC,EAA6B,cAC7BC,EAA6B,cAC7BC,EAAyB,UACzBC,EAA6B,qBAC7BC,EAA0B,WAC1BC,EAA0B,WAC1BC,EAA6B,cAC7BC,EAAiC,kBACjCC,EAAsB,OACtBC,EAAwB,gBACxBC,EAAmC,4BACnCC,EAA0B,WAC1BC,EAAyB,UACzBC,EAAgC,iBAChCC,EAAgC,iBAChCC,EAAqB,MACrBC,EAA4B,aAC5BC,EAA4B,aAC5BC,EAAmC,oBACnCC,EAAuB,QACvBC,EAA0B,WAC1BC,EAAqC,sBACrCC,EAAgD,iCAChDC,EAAiC,kBACjCC,EAA4C,6BAC5CC,EAAiC,kBACjCC,EAAoC,qBACpCC,EAAgC,iBAChCC,EAAoC,kCACpCC,EAA2B,YAC3BC,EAA4B,aAC5BC,EAAqB,MACrBC,EAA6B,kBAE7BC,EAAgC,6BAEhCC,EAA0C,yBAC1CC,EAA0C,yBAC1CC,EAA2C,+BAI3CC,EAAkC,mBAClCC,EAAkC,mBAClCC,EAA0C,2BAC1CC,EAAmC,oBACnCC,EAA6C,8BAC7CC,EAA+C,+BAC/CC,EAAuC,+BACvCC,EAAsC,uBACtCC,EAAsC,uBACtCC,EAA4C,6BAC5CC,EAA+B,gBAC/BC,EAA8B,8BAC9BC,GAA6B,6BAC7BC,GAAqC,yBACrCC,GAA8C,+BAC9CC,GAAwC,yBAExCC,GAAmC,iCACnCC,GAAoC,2BACpCC,GAAoC,2BACpCC,GAA4B,aAG5BC,GAA0C,mBAC1CC,GAA0C,mBAC1CC,GAA2C,yBAC3CC,GAA0B,0BAC1BC,GAA2B,2BAC3BC,GAAyB,UACzBC,GAAsC,wBAEtCC,GAAuB,QACvBC,GAA2B,YAC3BC,GAA0B,WAC1BC,GAA8B,gBAC9BC,GAAmC,mCACnCC,GAAyB,wBACzBC,GAA6B,cAC7BC,GAAqB,MAErBC,GAAuB,sBACvBC,GAAyB,wBACzBC,GAAgC,iBAChC7L,GAA4B,aAC5B8L,GAAwB,kBACxBC,GAAuB,uBACvBC,GAAsB,sBAEtBC,GAAyB,yBACzBC,GAAwB,wBAExBC,GAAkC,mBAClCC,GAAsC,uBACtCC,GAA4C,6BAC5CC,GAA2C,4BAC3CC,GAA+B,gBAE/BC,GAAuC,wBAGvCC,GAAiD,kCACjDC,GAA8C,+BAC9CC,GAAiD,kCACjDC,GAAwD,yCACxDC,GAAkD,mCAClDC,GAAiD,kCACjDC,GAAgD,iCAChDC,GAA+C,gCAC/CC,GAAgD,iCAChDC,GAA6C,8BAC7CC,GAAgD,iCAChDC,GAAuD,wCACvDC,GAAiD,kCACjDC,GAAgD,iCAChDC,GAA+C,gCAC/CC,GAA8C,+BAE9CC,GAA2B,uBAE3BC,GAA6B,cAC7BC,GAA+B,gBAC/BC,GAA6B,cAI7BC,GAA+B,e,6GC9HrC,SAASC,EAAqBC,EAAYC,GAC/C,GAAIpP,MAAMC,QAAQkP,GAAa,CAIA,IAHTA,EAAWE,QAC5BC,GAAWA,EAAOC,OAASH,IAEZlT,QAChBiT,EAAWK,QAAQ,CACjBpU,MAAO,KACPmU,KAAMH,GAEZ,CACA,OAAOD,CACT,CAEO,SAASlH,IACd,IAAIwH,EAAWC,OAAOC,UAAUC,cAAgBF,OAAOC,UAAUF,SAMjE,OALAI,IAAAA,OAAcJ,GACGI,IAAAA,aAEOC,eAAe,IAGzC,CAGO,SAASC,EAAgCtU,GAC9C,OACET,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EAAKF,EAAAA,EAAAA,KAAA,QAAAE,SAAOY,KAAYd,EAAAA,EAAAA,KAAA,OAAKqV,MAAM,wDAEvC,C","sources":["Components/UIBase/Details/SealMasterDetails.jsx","Components/Composite/Details/SealMasterDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/functionalUtilities.js"],"sourcesContent":["import React from \"react\";\r\nimport { Input ,Accordion} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\n\r\nSealMasterDetails.propTypes = {\r\n    sealmaster: PropTypes.object.isRequired,\r\n    modSealmaster: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n\r\n    isEnterpriseNode: PropTypes.bool.isRequired,\r\n    selectedAttributeList: PropTypes.array.isRequired,\r\n    attributeValidationErrors: PropTypes.array.isRequired,\r\n    handleCellDataEdit: PropTypes.func.isRequired,\r\n}\r\n\r\nSealMasterDetails.defaultProps = {\r\n    isEnterpriseNode: false,\r\n}\r\n\r\nexport function SealMasterDetails({\r\n    sealmaster,\r\n    modSealmaster,\r\n    validationErrors,\r\n    onFieldChange,\r\n    isEnterpriseNode,\r\n    selectedAttributeList,\r\n    attributeValidationErrors,\r\n    handleCellDataEdit,\r\n}) {\r\n\r\n    const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n        let attributeValidation = [];\r\n        attributeValidation = attributeValidationErrors.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n        })\r\n        return attributeValidation.attributeValidationErrors;\r\n    }\r\n    \r\n    return (\r\n        <TranslationConsumer>\r\n            {(t, index) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                key={index}\r\n                                fluid\r\n                                value={modSealmaster.Code}\r\n                                indicator=\"required\"\r\n                                disabled={sealmaster.Code !== \"\"}\r\n                                onChange={(data) => onFieldChange(\"Code\", data)}\r\n                                label={t(\"SealMasterList_Code\")}\r\n                                error={t(validationErrors.Code)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                key={index}\r\n                                fluid\r\n                                value={modSealmaster.Prefix}\r\n                                onChange={(data) => onFieldChange(\"Prefix\", data)}\r\n                                label={t(\"SealMasterList_Prefix\")}\r\n                                error={t(validationErrors.Prefix)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n\r\n\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                key={index}\r\n                                fluid\r\n                                value={modSealmaster.StartSealNo}\r\n                                onChange={(data) => onFieldChange(\"StartSealNo\", data)}\r\n                                label={t(\"SealMaster_StartSealNo\")}\r\n                                error={t(validationErrors.StartSealNo)}\r\n                                reserveSpace={false}\r\n                                indicator=\"required\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                key={index}\r\n                                fluid\r\n                                value={modSealmaster.EndSealNo}\r\n                                onChange={(data) => onFieldChange(\"EndSealNo\", data)}\r\n                                label={t(\"SealMaster_EndSealNo\")}\r\n                                error={t(validationErrors.EndSealNo)}\r\n                                reserveSpace={false}\r\n                                indicator=\"required\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                key={index}\r\n                                fluid\r\n                                value={modSealmaster.CurrentSealNo}\r\n                                onChange={(data) => onFieldChange(\"CurrentSealNo\", data)}\r\n                                label={t(\"SealMaster_CurrentSealNo\")}\r\n                                error={t(validationErrors.CurrentSealNo)}\r\n                                reserveSpace={false}\r\n                                indicator=\"required\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                key={index}\r\n                                fluid\r\n                                value={modSealmaster.Suffix}\r\n                                onChange={(data) => onFieldChange(\"Suffix\", data)}\r\n                                label={t(\"SealMaster_Suffix\")}\r\n                                error={t(validationErrors.Suffix)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {\r\n                        selectedAttributeList.length > 0 ?\r\n                            selectedAttributeList.map((attribute) =>\r\n                                <ErrorBoundary>\r\n                                    <Accordion >\r\n                                        <Accordion.Content\r\n                                            className=\"attributeAccordian\"\r\n                                            title={isEnterpriseNode ? (attribute.TerminalCode + ' - ' + t(\"Attributes_Header\")) : (t(\"Attributes_Header\"))}\r\n                                        >\r\n                                            <AttributeDetails\r\n                                                selectedAttributeList={attribute.attributeMetaDataList}\r\n                                                handleCellDataEdit={handleCellDataEdit}\r\n                                                attributeValidationErrors={handleValidationErrorFilter(attributeValidationErrors, attribute.TerminalCode)}\r\n                                            ></AttributeDetails>\r\n                                        </Accordion.Content>\r\n                                    </Accordion>\r\n                                </ErrorBoundary>\r\n                            ) : null\r\n                    }\r\n                    \r\n                </div>\r\n\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { emptySealMaster } from \"../../../JS/DefaultEntities\";\r\nimport { sealMasterValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport { functionGroups, fnSealMaster } from \"../../../JS/FunctionGroups\";\r\nimport { SealMasterDetails } from \"../../UIBase/Details/SealMasterDetails\";\r\nimport { sealMasterAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass SealMasterDetailsComposite extends Component {\r\n    state = {\r\n        sealmaster: lodash.cloneDeep(emptySealMaster),\r\n        modSealmaster: {},\r\n        validationErrors: Utilities.getInitialValidationErrors(sealMasterValidationDef),\r\n        isReadyToRender: false,\r\n        saveEnabled: false,\r\n        lookUpData: null,\r\n        isEnable: true,\r\n        attributeMetaDataList: [],\r\n        selectedAttributeList: [],\r\n       attributeValidationErrors: [],\r\n       showAuthenticationLayout: false,\r\n       tempSealmaster: {},\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {\r\n            Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n            this.getAttributes(this.props.selectedRow);\r\n            // this.getSealMaster(this.props.selectedRow);\r\n        } catch (error) {\r\n            console.log(\r\n                \"SealMasterDetailsComposite:Error occured on componentDidMount\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        try {\r\n            if (\r\n                this.state.sealmaster.Code !== \"\" &&\r\n                nextProps.selectedRow.Common_Code === undefined &&\r\n                this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n            ) {\r\n               // this.getSealMaster(nextProps.selectedRow);\r\n                this.getAttributes(nextProps.selectedRow);\r\n                let validationErrors = { ...this.state.validationErrors };\r\n                Object.keys(validationErrors).forEach((key) => {\r\n                    validationErrors[key] = \"\";\r\n                });\r\n                this.setState({ validationErrors });\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"SealMasterDetailsComposite:Error occured on componentWillReceiveProps\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n   \r\n    localNodeAttribute() {\r\n        try {\r\n          var attributeMetaDataList = lodash.cloneDeep(\r\n            this.state.attributeMetaDataList\r\n          );\r\n          if (Array.isArray(attributeMetaDataList.SEALMASTER) && attributeMetaDataList.SEALMASTER.length > 0) {\r\n            this.terminalSelectionChange([\r\n              attributeMetaDataList.SEALMASTER[0].TerminalCode,\r\n            ]);\r\n          }\r\n         \r\n        } catch (error) {\r\n          console.log(\r\n            \"SealMasterDetailsComposite:Error occured on localNodeAttribute\",\r\n            error\r\n          );\r\n        }\r\n      }\r\n\r\n      terminalSelectionChange(selectedTerminals) {\r\n        try {\r\n          if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n            let attributesTerminalsList = [];\r\n            var attributeMetaDataList = [];\r\n            var selectedAttributeList = [];\r\n            attributeMetaDataList = lodash.cloneDeep(\r\n              this.state.attributeMetaDataList\r\n            );\r\n            selectedAttributeList = lodash.cloneDeep(\r\n              this.state.selectedAttributeList\r\n            );\r\n            const attributeValidationErrors = lodash.cloneDeep(\r\n              this.state.attributeValidationErrors\r\n            );\r\n            var modSealmaster = lodash.cloneDeep(this.state.modSealmaster);\r\n    \r\n            selectedTerminals.forEach((terminal) => {\r\n              var existitem = selectedAttributeList.find((selectedAttribute) => {\r\n                return selectedAttribute.TerminalCode === terminal;\r\n              });\r\n    \r\n              if (existitem === undefined) {\r\n                attributeMetaDataList.SEALMASTER.forEach(function (\r\n                  attributeMetaData\r\n                ) {\r\n                  if (attributeMetaData.TerminalCode === terminal) {\r\n                    var Attributevalue = modSealmaster.Attributes.find(\r\n                      (sealMasterAttribute) => {\r\n                        return sealMasterAttribute.TerminalCode === terminal;\r\n                      }\r\n                    );\r\n                    if (Attributevalue !== undefined) {\r\n                      attributeMetaData.attributeMetaDataList.forEach(function (\r\n                        attributeMetaData\r\n                      ) {\r\n                        var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                          (x) => {\r\n                            return x.AttributeCode === attributeMetaData.Code;\r\n                          }\r\n                        );\r\n                        if (valueAttribute !== undefined)\r\n                          attributeMetaData.DefaultValue =\r\n                            valueAttribute.AttributeValue;\r\n                      });\r\n                    }\r\n                    attributesTerminalsList.push(attributeMetaData);\r\n                  }\r\n                });\r\n              } else {\r\n                attributesTerminalsList.push(existitem);\r\n              }\r\n            });\r\n            selectedAttributeList = [];\r\n            selectedAttributeList = attributesTerminalsList;\r\n            selectedAttributeList = Utilities.attributesConvertoDecimal(\r\n              selectedAttributeList\r\n            );\r\n            attributeValidationErrors.forEach((attributeValidation) => {\r\n              var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n                return attributeValidation.TerminalCode === selectedTerminals;\r\n              });\r\n              if (existTerminal === undefined) {\r\n                Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n                  (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n                );\r\n              }\r\n            });\r\n            this.setState({ selectedAttributeList, attributeValidationErrors });\r\n          }\r\n        } catch (error) {\r\n          console.log(\r\n            \"Seal Master DetailsComposite:Error occured on terminalSelectionChange\",\r\n            error\r\n          );\r\n        }\r\n      }\r\n      \r\n    getAttributes(sealMasterRow) {\r\n        try {\r\n          axios(\r\n            RestAPIs.GetAttributesMetaData,\r\n            Utilities.getAuthenticationObjectforPost(\r\n              [sealMasterAttributeEntity],\r\n              this.props.tokenDetails.tokenInfo\r\n            )\r\n          ).then((response) => {\r\n            var result = response.data;\r\n            if (result.IsSuccess === true) {\r\n              this.setState(\r\n                {\r\n                  attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n                  attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(\r\n                    result.EntityResult.SEALMASTER\r\n                  ),\r\n                },\r\n                () => this.getSealMaster(sealMasterRow)\r\n              );\r\n            } else {\r\n              console.log(\"Error in getAttributes:\");\r\n            }\r\n          });\r\n        } catch (error) {\r\n          console.log(\"Error while getAttributes:\", error);\r\n        }\r\n      }\r\n\r\n    getSealMaster(sealMasterRow) {\r\n        \r\n        if (sealMasterRow.Common_Code === undefined) {\r\n            this.setState({\r\n                sealmaster: lodash.cloneDeep(emptySealMaster),\r\n                modSealmaster: lodash.cloneDeep(emptySealMaster),\r\n                isReadyToRender: true,\r\n                selectedAttributeList: [],\r\n                saveEnabled: Utilities.isInFunction(\r\n                    this.props.userDetails.EntityResult.FunctionsList,\r\n                    functionGroups.add,\r\n                    fnSealMaster\r\n                ),\r\n            },\r\n            ()=> {\r\n                this.localNodeAttribute();\r\n            }\r\n            );\r\n            return;\r\n        }\r\n        var keyCode = [\r\n            {\r\n                key: KeyCodes.sealMasterCode,\r\n                value: sealMasterRow.Common_Code,\r\n            }\r\n        ];\r\n        var obj = {\r\n            SealMasterCode: sealMasterRow.Common_Code,\r\n            keyDataCode: KeyCodes.sealMasterCode,\r\n            KeyCodes: keyCode,\r\n        };\r\n        axios(\r\n            RestAPIs.GetSealMaster,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        ).then((response) => {\r\n            var result = response.data;\r\n            if (result.IsSuccess === true) {\r\n                result.EntityResult.Code = result.EntityResult.Code.toString();\r\n                this.setState(\r\n                    {\r\n                        isReadyToRender: true,\r\n                        sealmaster: lodash.cloneDeep(result.EntityResult),\r\n                        modSealmaster: lodash.cloneDeep(result.EntityResult),\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnSealMaster\r\n                        ),\r\n                    },()=> {\r\n                        this.localNodeAttribute();\r\n                    }\r\n                );\r\n            } else {\r\n                this.setState({\r\n                    sealmaster: lodash.cloneDeep(emptySealMaster),\r\n                    modSealmaster: lodash.cloneDeep(emptySealMaster),\r\n                    isReadyToRender: true,\r\n                });\r\n                console.log(\"Error in getSealMaster:\", result.ErrorList);\r\n            }\r\n        })\r\n            .catch((error) => {\r\n                console.log(\"Error while getSealMaster:\", error, sealMasterRow);\r\n            });\r\n    }\r\n\r\n    handleChange = (propertyName, data) => {\r\n        try {\r\n            const modSealmaster = lodash.cloneDeep(this.state.modSealmaster);\r\n            modSealmaster[propertyName] = data;\r\n            this.setState({ modSealmaster });\r\n\r\n            const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n            if (sealMasterValidationDef[propertyName] !== undefined) {\r\n                validationErrors[propertyName] = Utilities.validateField(\r\n                    sealMasterValidationDef[propertyName],\r\n                    data\r\n                );\r\n                this.setState({ validationErrors });\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"SealMasterDetailsComposite:Error occured on handleChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    handleReset = () => {\r\n        try {\r\n            const { validationErrors } = { ...this.state };\r\n            const sealmaster = lodash.cloneDeep(this.state.sealmaster);\r\n            Object.keys(validationErrors).forEach(function (key) {\r\n                validationErrors[key] = \"\";\r\n            });\r\n            this.setState({\r\n                modSealmaster: { ...sealmaster },\r\n                selectedCompRow: [],\r\n                validationErrors,\r\n            });\r\n        } catch (error) {\r\n            console.log(\"SealMasterDetailsComposite:Error occured on handleReset\", error);\r\n        }\r\n    };\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  saveSealMaster = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempSealmaster = lodash.cloneDeep(this.state.tempSealmaster);\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.selectedAttributeList\r\n      );\r\n      tempSealmaster = this.convertStringtoDecimal(\r\n        tempSealmaster,\r\n        attributeList\r\n      )\r\n      this.state.sealmaster.Code === \"\"\r\n        ? this.CreateSealMaster(tempSealmaster)\r\n        : this.updateSealMaster(tempSealmaster);\r\n    }\r\n      catch (error) {\r\n      console.log(\"SealMasterDetailsComposite : Error in saveSealMaster\");\r\n      }\r\n}\r\n    handleSave = () => {\r\n        try {\r\n            let modSealmaster = this.fillDetails();\r\n            let attributeList = Utilities.attributesConverttoLocaleString(\r\n                this.state.selectedAttributeList\r\n              );\r\n            // this.setState({ saveEnabled: false });\r\n            if (this.validateSave(modSealmaster,attributeList)) {\r\n              let showAuthenticationLayout =\r\n                this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n                  ? true\r\n                  : false;\r\n              let tempSealmaster = lodash.cloneDeep(modSealmaster);\r\n              this.setState({ showAuthenticationLayout, tempSealmaster }, () => {\r\n                if (showAuthenticationLayout === false) {\r\n                  this.saveSealMaster();\r\n                }\r\n              });\r\n            } else this.setState({ saveEnabled: true });\r\n        }\r\n        catch (error) {\r\n            console.log(\"SealMasterDetailsComposite:Error occured on handleSave\", error);\r\n        }\r\n    };\r\n\r\n    fillAttributeDetails(modSealmaster, attributeList) {\r\n        try {\r\n          attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n    \r\n          modSealmaster.Attributes = [];\r\n          attributeList.forEach((comp) => {\r\n            let attribute = {\r\n              ListOfAttributeData: [],\r\n            };\r\n            attribute.TerminalCode = comp.TerminalCode;\r\n            comp.attributeMetaDataList.forEach((det) => {\r\n              attribute.ListOfAttributeData.push({\r\n                AttributeCode: det.Code,\r\n                AttributeValue: det.DefaultValue,\r\n              });\r\n            });\r\n            modSealmaster.Attributes.push(attribute);\r\n          });\r\n          this.setState({ modSealmaster });\r\n          return modSealmaster;\r\n        } catch (error) {\r\n          console.log(\r\n            \"SealMasterDetailsComposite:Error occured on fillAttributeDetails\",\r\n            error\r\n          );\r\n        }\r\n      }\r\n\r\n    fillDetails() {\r\n        try {\r\n            let modSealmaster = lodash.cloneDeep(this.state.modSealmaster);\r\n            this.setState({ modSealmaster });\r\n            return modSealmaster;\r\n\r\n        } catch (error) {\r\n            console.log(\"SealMasterDetailsComposite:Error occured on fillAttributeDetails\", error);\r\n        }\r\n    }\r\n\r\n    validateSave(modSealmaster,attributeList) {\r\n        var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n        Object.keys(sealMasterValidationDef).forEach(function (key) {\r\n            validationErrors[key] = Utilities.validateField(\r\n                sealMasterValidationDef[key],\r\n                modSealmaster[key]\r\n            );\r\n        });\r\n\r\n        var attributeValidationErrors = lodash.cloneDeep(\r\n            this.state.attributeValidationErrors\r\n          );\r\n          \r\n          attributeList.forEach((attribute) => {\r\n            attributeValidationErrors.forEach((attributeValidation) => {\r\n              if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n                attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n                  attributeValidation.attributeValidationErrors[\r\n                    attributeMetaData.Code\r\n                  ] = Utilities.valiateAttributeField(\r\n                    attributeMetaData,\r\n                    attributeMetaData.DefaultValue\r\n                  );\r\n                });\r\n              }\r\n            });\r\n          });\r\n      \r\n          this.setState({ validationErrors, attributeValidationErrors });\r\n\r\n       \r\n        var returnValue = true;\r\n\r\n        attributeValidationErrors.forEach((x) => {\r\n            if (returnValue) {\r\n              returnValue = Object.values(x.attributeValidationErrors).every(\r\n                function (value) {\r\n                  return value === \"\";\r\n                }\r\n              );\r\n            } else {\r\n              return returnValue;\r\n            }\r\n          });\r\n\r\n        if (modSealmaster.StartSealNo !== \"\" && modSealmaster.StartSealNo !== null && modSealmaster.EndSealNo !== \"\" && modSealmaster.EndSealNo !== null) {\r\n            if (parseInt(modSealmaster.StartSealNo) >= parseInt(modSealmaster.EndSealNo)) {\r\n                validationErrors[\"StartSealNo\"] = \"SealMaster_Start_End_SealError\";\r\n            }\r\n        }\r\n        if (modSealmaster.StartSealNo !== \"\" && modSealmaster.StartSealNo !== null && modSealmaster.EndSealNo !== \"\" && modSealmaster.EndSealNo !== null) {\r\n            if (parseInt(modSealmaster.EndSealNo) <= parseInt(modSealmaster.StartSealNo)) {\r\n                validationErrors[\"EndSealNo\"] = \"SealMaster_Endseal_comp\";\r\n            }\r\n        }\r\n        if (modSealmaster.CurrentSealNo !== \"\" && modSealmaster.CurrentSealNo !== null) {\r\n            if ((parseInt(modSealmaster.CurrentSealNo)) > parseInt(modSealmaster.EndSealNo) || (parseInt(modSealmaster.CurrentSealNo)) < parseInt(modSealmaster.StartSealNo - 1)) {\r\n                validationErrors[\"CurrentSealNo\"] = \"SealMaster_CurrentSeal_comp\";\r\n            }\r\n        }\r\n        if (returnValue)\r\n            returnValue = Object.values(validationErrors).every(function (value) {\r\n                return value === \"\";\r\n            });\r\n\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    CreateSealMaster(modSealmaster) {\r\n        let keyCode = [\r\n            {\r\n                key: KeyCodes.sealMasterCode,\r\n                value: modSealmaster.Code,\r\n            },\r\n        ];\r\n        let obj = {\r\n            keyDataCode: KeyCodes.sealMasterCode,\r\n            KeyCodes: keyCode,\r\n            Entity: modSealmaster,\r\n        };\r\n\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"SealMasterDetails_SavedStatus\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [\"SealMasterDetails_Code\"],\r\n                    keyValues: [modSealmaster.Code],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n\r\n        axios(\r\n            RestAPIs.CreateSealMaster,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        ).then((response) => {\r\n            let result = response.data;\r\n            notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n            console.log(result)\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n                this.setState(\r\n                    {\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnSealMaster\r\n                    ),\r\n                    showAuthenticationLayout: false,\r\n\r\n                    },\r\n                    () => this.getSealMaster({ Common_Code: modSealmaster.Code })\r\n                );\r\n            } else {\r\n                notification.messageResultDetails[0].errorMessage =\r\n                    result.ErrorList[0];\r\n                this.setState({\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnSealMaster\r\n                  ),\r\n                  showAuthenticationLayout: false,\r\n\r\n                });\r\n                console.log(\"Error in SealMaster:\", result.ErrorList);\r\n            }\r\n            this.props.onSaved(this.state.modSealmaster, \"add\", notification);\r\n        })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnSealMaster\r\n                  ),\r\n                  showAuthenticationLayout: false,\r\n\r\n                });\r\n                notification.messageResultDetails[0].errorMessage = error;\r\n                this.props.onSaved(this.state.modSealmaster, \"add\", notification);\r\n            });\r\n    }\r\n\r\n    convertStringtoDecimal(modSealMaster, attributeList) {\r\n        try {\r\n          \r\n            modSealMaster = this.fillAttributeDetails(modSealMaster, attributeList);\r\n          return modSealMaster;\r\n        } catch (err) {\r\n          console.log(\"convertStringtoDecimal error sealMaster Details\", err);\r\n        }\r\n      }\r\n\r\n    updateSealMaster(modSealmaster) {\r\n        let keyCode = [\r\n            {\r\n                key: KeyCodes.sealMasterCode,\r\n                value: modSealmaster.sealMasterCode,\r\n            },\r\n        ];\r\n        let obj = {\r\n            keyDataCode: KeyCodes.sealMasterCode,\r\n            KeyCodes: keyCode,\r\n            Entity: modSealmaster,\r\n        };\r\n\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"SealMasterDetails_SavedStatus\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [\"SealMasterDetails_Code\"],\r\n                    keyValues: [modSealmaster.Code],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n\r\n        axios(\r\n            RestAPIs.UpdateSealMaster,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        ).then((response) => {\r\n            let result = response.data;\r\n            notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n                this.setState(\r\n                    {\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnSealMaster\r\n                    ),\r\n                    showAuthenticationLayout: false,\r\n\r\n                    },\r\n                    () => this.getSealMaster({ Common_Code: modSealmaster.Code })\r\n                );\r\n            } else {\r\n                notification.messageResultDetails[0].errorMessage =\r\n                    result.ErrorList[0];\r\n                this.setState({\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.modify,\r\n                        fnSealMaster\r\n                  ),\r\n                  showAuthenticationLayout: false,\r\n\r\n                });\r\n                console.log(\"Error in update SealMaster:\", result.ErrorList);\r\n            }\r\n            this.props.onSaved(this.state.modSealmaster, \"update\", notification);\r\n        })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.modify,\r\n                        fnSealMaster\r\n                  ),\r\n                  showAuthenticationLayout: false,\r\n\r\n                });\r\n                notification.messageResultDetails[0].errorMessage = error;\r\n                this.props.onSaved(this.state.modSealmaster, \"modify\", notification);\r\n            });\r\n    }\r\n\r\n\r\n    handleCellDataEdit = (attribute, value) => {\r\n        try {\r\n          attribute.DefaultValue = value;\r\n          this.setState({\r\n            attribute: attribute,\r\n          });\r\n          const attributeValidationErrors = lodash.cloneDeep(\r\n            this.state.attributeValidationErrors\r\n          );\r\n    \r\n          attributeValidationErrors.forEach((attributeValidation) => {\r\n            if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n              attributeValidation.attributeValidationErrors[\r\n                attribute.Code\r\n              ] = Utilities.valiateAttributeField(attribute, value);\r\n            }\r\n          });\r\n          this.setState({ attributeValidationErrors });\r\n        } catch (error) {\r\n          console.log(\r\n            \"SealmasterDetailsComposite:Error occured on handleCellDataEdit\",\r\n            error\r\n          );\r\n        }\r\n      };\r\n\r\n    render() {\r\n        console.log(this.props.userDetails)\r\n        const popUpContents = [\r\n            {\r\n                fieldName: \"SealMaster_LastUpdatedTime\",\r\n                fieldValue:\r\n                    new Date(this.state.modSealmaster.LastUpdatedTime).toLocaleDateString() +\r\n                    \" \" +\r\n                    new Date(this.state.modSealmaster.LastUpdatedTime).toLocaleTimeString(),\r\n            },\r\n           \r\n            {\r\n                fieldName: \"SealMaster_CreatedTime\",\r\n                fieldValue:\r\n                    new Date(this.state.modSealmaster.CreatedTime).toLocaleDateString() +\r\n                    \" \" +\r\n                    new Date(this.state.modSealmaster.CreatedTime).toLocaleTimeString(),\r\n            },\r\n            {\r\n                fieldName: \"SealMasterList_LastUpdatedBy\",\r\n                fieldValue:this.state.modSealmaster.LastUpdatedBy\r\n                   \r\n            },\r\n        ];\r\n        return this.state.isReadyToRender ? (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <TMDetailsHeader\r\n                        entityCode={this.state.sealmaster.Code}\r\n                        newEntityName=\"SealMaster_NewDetail\"\r\n                        popUpContents={popUpContents}\r\n\r\n                    ></TMDetailsHeader>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <SealMasterDetails\r\n                        sealmaster={this.state.sealmaster}\r\n                        modSealmaster={this.state.modSealmaster}\r\n                        validationErrors={this.state.validationErrors}\r\n                        onFieldChange={this.handleChange}\r\n                        isEnterpriseNode={this.props.userDetails.EntityResult.IsEnterpriseNode}\r\n                        attributeValidationErrors={this.state.attributeValidationErrors}\r\n                        selectedAttributeList={this.state.selectedAttributeList}\r\n                        handleCellDataEdit={this.handleCellDataEdit}\r\n                        >\r\n                    </SealMasterDetails>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <TMDetailsUserActions\r\n                        handleBack={this.props.onBack}\r\n                        handleSave={this.handleSave}\r\n                        handleReset={this.handleReset}\r\n                        saveEnabled={this.state.saveEnabled}\r\n                    ></TMDetailsUserActions>\r\n            </ErrorBoundary>\r\n            {this.state.showAuthenticationLayout ? (\r\n              <UserAuthenticationLayout\r\n                Username={this.props.userDetails.EntityResult.UserName}\r\n                functionName={\r\n                  this.state.sealmaster.Code === \"\"\r\n                    ? functionGroups.add\r\n                    : functionGroups.modify\r\n                }\r\n                functionGroup={fnSealMaster}\r\n                handleOperation={this.saveSealMaster}\r\n                handleClose={this.handleAuthenticationClose}\r\n              ></UserAuthenticationLayout>\r\n            ) : null}\r\n            </div>\r\n        ) : (\r\n            <LoadingPage message=\"Loading\"></LoadingPage>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(SealMasterDetailsComposite);\r\n\r\nSealMasterDetailsComposite.propTypes = {\r\n    selectedRow: PropTypes.object.isRequired,\r\n    terminalCodes: PropTypes.array.isRequired,\r\n    onBack: PropTypes.func.isRequired,\r\n    onSaved: PropTypes.func.isRequired,\r\n};\r\n\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["SealMasterDetails","_ref","sealmaster","modSealmaster","validationErrors","onFieldChange","isEnterpriseNode","selectedAttributeList","attributeValidationErrors","handleCellDataEdit","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","_jsx","TranslationConsumer","children","t","index","_jsxs","className","Input","fluid","value","Code","indicator","disabled","onChange","data","label","error","reserveSpace","Prefix","StartSealNo","EndSealNo","CurrentSealNo","Suffix","length","map","attribute","ErrorBoundary","Accordion","Content","title","AttributeDetails","attributeMetaDataList","defaultProps","SealMasterDetailsComposite","Component","constructor","arguments","state","lodash","emptySealMaster","Utilities","sealMasterValidationDef","isReadyToRender","saveEnabled","lookUpData","isEnable","showAuthenticationLayout","tempSealmaster","handleChange","propertyName","this","setState","undefined","console","log","handleReset","Object","keys","forEach","key","selectedCompRow","handleAuthenticationClose","saveSealMaster","attributeList","convertStringtoDecimal","CreateSealMaster","updateSealMaster","handleSave","fillDetails","validateSave","props","userDetails","EntityResult","IsWebPortalUser","DefaultValue","componentDidMount","IsArchived","getAttributes","selectedRow","componentWillReceiveProps","nextProps","Common_Code","tokenDetails","tokenInfo","localNodeAttribute","Array","isArray","SEALMASTER","terminalSelectionChange","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","Attributes","sealMasterAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","push","sealMasterRow","axios","RestAPIs","sealMasterAttributeEntity","then","response","result","IsSuccess","getSealMaster","keyCode","KeyCodes","obj","SealMasterCode","keyDataCode","toString","FunctionsList","functionGroups","modify","fnSealMaster","ErrorList","catch","add","fillAttributeDetails","comp","det","returnValue","values","every","parseInt","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","onSaved","modSealMaster","err","sealMasterCode","render","popUpContents","fieldName","fieldValue","Date","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","CreatedTime","LastUpdatedBy","TMDetailsHeader","entityCode","newEntityName","IsEnterpriseNode","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","style","margin","Popup","element","Icon","marginLeft","root","name","size","position","List","content","Button","onClick","float","handleAttributeDateValue","convertAttributeDatetoString","chars","split","Dateval","getFullYear","getMonth","slice","getDate","DataType","toLowerCase","Constants","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","INT","LONG","FLOAT","DOUBLE","BOOL","Checkbox","checked","DATETIME","DatePicker","displayFormat","getCurrentDateFormat","showYearSelector","onTextChange","toLocaleString","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","getOptionsWithSelect","ddlOptions","selectOptionText","filter","option","text","unshift","language","window","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}