{"version":3,"file":"static/js/6851.20a7758c.chunk.js","mappings":"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","sources":["Components/UIBase/Details/ExchangePartnerDetails.jsx","Components/Composite/Details/ExchangePartnerDetailsComposite.jsx","Components/Composite/Summary/ExchangePartnerSummaryComposite.jsx","Components/Composite/Entity/ExchangePartnerComposite.jsx","JS/KeyCodes.js"],"sourcesContent":["import React from \"react\";\r\nimport { Input, Select } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nExchangePartnerDetails.propTypes = {\r\n    exchangepartner: PropTypes.object.isRequired,\r\n    modExchangePartner: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    onShareholderChange: PropTypes.func.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        ShareholderOptions: PropTypes.array\r\n    }).isRequired,\r\n}\r\n\r\nExchangePartnerDetails.defaultProps = {\r\n    isEnterpriseNode: false,\r\n    listOptions: {\r\n        ShareholderOptions: []\r\n    }\r\n}\r\n\r\nexport function ExchangePartnerDetails({\r\n    exchangepartner,\r\n    modExchangePartner,\r\n    validationErrors,\r\n    onFieldChange,\r\n    listOptions,\r\n}) {\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t, index) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                key={index}\r\n                                fluid\r\n                                value={modExchangePartner.ExchangePartnerName}\r\n                                indicator=\"required\"\r\n                                disabled={exchangepartner.ExchangePartnerName !== \"\"}\r\n                                onChange={(data) => onFieldChange(\"ExchangePartnerName\", data)}\r\n                                label={t(\"Exchange_Partner_Name\")}\r\n                                error={t(validationErrors.ExchangePartnerName)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"FinishedProductInfo_Select\")}\r\n                                value={modExchangePartner.SellerId == null ? \"\" : modExchangePartner.SellerId }\r\n                                label={t(\"Exchange_Partner_SellerId\")}\r\n                                indicator=\"required\"\r\n                                options={listOptions.ShareholderOptions}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"SellerId\", data);\r\n                                }}\r\n                                error={t(validationErrors.SellerId)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"FinishedProductInfo_Select\")}\r\n                                value={modExchangePartner.FinalShipperID === null ? \"\" : modExchangePartner.FinalShipperID}\r\n                                label={t(\"Exchange_Partner_FinalShipper\")}\r\n                                indicator=\"required\"\r\n                                options={listOptions.ShareholderOptions}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"FinalShipperID\", data);\r\n                                }}\r\n                                error={t(validationErrors.FinalShipperID)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { emptyExchangePartner } from \"../../../JS/DefaultEntities\";\r\nimport { exchangePartnerValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport { functionGroups, fnShareholder } from \"../../../JS/FunctionGroups\";\r\nimport { ExchangePartnerDetails } from \"../../UIBase/Details/ExchangePartnerDetails\";\r\nimport ShowAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass ExchangePartnerDetailsComposite extends Component {\r\n    state = {\r\n        exchangepartner: lodash.cloneDeep(emptyExchangePartner),\r\n        modExchangePartner: {},\r\n        validationErrors: Utilities.getInitialValidationErrors(exchangePartnerValidationDef),\r\n        isReadyToRender: false,\r\n        saveEnabled: false,\r\n        lookUpData: null,\r\n        isEnable: true,\r\n        shareHolderList: [],\r\n        sharholderSerchOptions: [],\r\n        sellerSharholder: [],\r\n        ShareholderOptions: [],\r\n        showAuthenticationLayout: false,\r\n        tempExchangePartner: {},\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {\r\n            Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n            this.getExchangePartner(this.props.selectedRow);\r\n            this.getSellerSharholder();\r\n        } catch (error) {\r\n            console.log(\r\n                \"ExchangePartnerDetailsComposite:Error occured on componentDidMount\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        try {\r\n            if (\r\n                this.state.exchangepartner.exchangePartnerName !== \"\" &&\r\n                nextProps.selectedRow.Name === undefined &&\r\n                this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n            ) {\r\n                this.getExchangePartner(nextProps.selectedRow);\r\n                let validationErrors = { ...this.state.validationErrors };\r\n                Object.keys(validationErrors).forEach((key) => {\r\n                    validationErrors[key] = \"\";\r\n                });\r\n                this.setState({ validationErrors });\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"ExchangePartnerDetailsComposite:Error occured on componentWillReceiveProps\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    getExchangePartner(exchangePartnerRow) {\r\n        try {\r\n            // this.state.modExchangePartner.SellerId = exchangePartnerRow.SellerId;\r\n            if (exchangePartnerRow.Name === undefined) {\r\n                this.setState({\r\n                    exchangepartner: lodash.cloneDeep(emptyExchangePartner),\r\n                    modExchangePartner: lodash.cloneDeep(emptyExchangePartner),\r\n                    isReadyToRender: true,\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnShareholder\r\n                    ),\r\n                });\r\n                return;\r\n            }\r\n            var keyCode = [\r\n                {\r\n                    key: KeyCodes.shareholderCode,\r\n                    value: exchangePartnerRow.Name,\r\n                }\r\n            ];\r\n            var obj = {\r\n                ShareHolderCode: exchangePartnerRow.Name,\r\n                keyDataCode: KeyCodes.exchangePartnerName,\r\n                KeyCodes: keyCode,\r\n            };\r\n            axios(\r\n                RestAPIs.GetExchangePartner,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState(\r\n                        {\r\n                            isReadyToRender: true,\r\n                            exchangepartner: lodash.cloneDeep(result.EntityResult),\r\n                            modExchangePartner: lodash.cloneDeep(result.EntityResult),\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnShareholder\r\n                            ),\r\n                        }\r\n                    );\r\n                } else {\r\n                    this.setState({\r\n                        exchangepartner: lodash.cloneDeep(emptyExchangePartner),\r\n                        modExchangePartner: lodash.cloneDeep(emptyExchangePartner),\r\n                        isReadyToRender: true,\r\n                    });\r\n                    console.log(\"Error in getexchangePartner:\", result.ErrorList);\r\n                }\r\n            })\r\n                .catch((error) => {\r\n                    console.log(\"Error while getexchangePartner:\", error, exchangePartnerRow);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"Error in get ExchangePartner\",error)\r\n        }\r\n    }\r\n    handleChange = (propertyName, data) => {\r\n        try {\r\n            const modExchangePartner = lodash.cloneDeep(this.state.modExchangePartner);\r\n            modExchangePartner[propertyName] = data;\r\n            this.setState({ modExchangePartner });\r\n\r\n            const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n            if (exchangePartnerValidationDef[propertyName] !== undefined) {\r\n                validationErrors[propertyName] = Utilities.validateField(\r\n                    exchangePartnerValidationDef[propertyName],\r\n                    data\r\n                );\r\n                this.setState({ validationErrors });\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"ExchangePartnerDetailsComposite:Error occured on handleChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    // handleShareHolderChange = (ShareholderCode) => {\r\n    //     try {\r\n    //         this.getSellerSharholder(ShareholderCode, true);\r\n    //         let validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    //         validationErrors[\"ShareholderCode\"] = \"\";\r\n    //         this.setState({ validationErrors });\r\n    //     } catch (error) {\r\n    //         console.log(\r\n    //             \"TruckReceiptDetailsComposite::Error occured on handleShareHolderChange\",\r\n    //             error\r\n    //         );\r\n    //     }\r\n    // };\r\n    handleReset = () => {\r\n        try {\r\n            const { validationErrors } = { ...this.state };\r\n            const exchangepartner = lodash.cloneDeep(this.state.exchangepartner);\r\n            Object.keys(validationErrors).forEach(function (key) {\r\n                validationErrors[key] = \"\";\r\n            });\r\n            this.setState({\r\n                modExchangePartner: { ...exchangepartner },\r\n                validationErrors,\r\n            });\r\n        } catch (error) {\r\n            console.log(\"exchangepartnerDetailsComposite:Error occured on handleReset\", error);\r\n        }\r\n    };\r\n    saveExchagePartner = () => {\r\n        try {\r\n            this.setState({ saveEnabled: false });\r\n            let tempExchangePartner = lodash.cloneDeep(this.state.tempExchangePartner);\r\n            \r\n            \r\n            this.state.exchangepartner.ExchangePartnerName === \"\"\r\n                ? this.CreateExchagePartner(tempExchangePartner)\r\n                : this.UpdateExchagePartner(tempExchangePartner);\r\n        } catch (error) {\r\n            console.log(\"ExchangePartnerDetailsComposite : Error in ExchangePartner\")\r\n        }\r\n    }\r\n    handleSave = () => {\r\n        try {\r\n            let returnValue = Object.values(this.state.validationErrors).every(\r\n                function (value) {\r\n                    return value === \"\";\r\n                }\r\n            );\r\n            if (returnValue) {\r\n                // this.setState({ saveEnabled: false });\r\n                let modExchangePartner = this.fillDetails();\r\n                if (this.validateSave(modExchangePartner)) {\r\n                    let tempExchangePartner = lodash.cloneDeep(modExchangePartner);\r\n                    let showAuthenticationLayout =\r\n                        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n                            ? true\r\n                            : false;\r\n                    this.setState({ showAuthenticationLayout, tempExchangePartner }, () => {\r\n                        if (showAuthenticationLayout === false) {\r\n                            this.saveExchagePartner();\r\n                        }\r\n                    });\r\n                } else this.setState({ saveEnabled: true });\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(\"ExchangePartnerDetailsComposite:Error occured on handleSave\", error);\r\n        }\r\n    };\r\n    fillDetails() {\r\n        try {\r\n            let modExchangePartner = lodash.cloneDeep(this.state.modExchangePartner);\r\n            console.log(this.state.ShareholderOptions)\r\n            if (this.state.ShareholderOptions.length >= 0 && modExchangePartner.SellerId!==\"\"&&modExchangePartner.FinalShipperID!==\"\") {\r\n                let selleridValue = this.state.ShareholderOptions.findIndex(item => { return item.value === modExchangePartner.SellerId })\r\n                modExchangePartner.SellerId = this.state.ShareholderOptions[selleridValue].text;\r\n                let finalShipperidValue = this.state.ShareholderOptions.findIndex(item => { return item.value === modExchangePartner.FinalShipperID })\r\n                modExchangePartner.FinalShipperID = this.state.ShareholderOptions[finalShipperidValue].text;\r\n                this.setState({ modExchangePartner });\r\n            }\r\n            this.setState({ modExchangePartner });\r\n                return modExchangePartner;\r\n\r\n        } catch (error) {\r\n            console.log(\"ExchangePartnerDetailsComposite:Error occured on fillAttributeDetails\", error);\r\n        }\r\n    }\r\n    validateSave(modExchangePartner) {\r\n        try {\r\n            var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n            Object.keys(exchangePartnerValidationDef).forEach(function (key) {\r\n                validationErrors[key] = Utilities.validateField(\r\n                    exchangePartnerValidationDef[key],\r\n                    modExchangePartner[key]\r\n                );\r\n            });\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: [\"ExchangePartnerList_SavedSuccess\"],\r\n                messageResultDetails: [],\r\n            };\r\n            if (modExchangePartner.SellerId === modExchangePartner.FinalShipperID && modExchangePartner.SellerId !== \"\" && modExchangePartner.FinalShipperID !== \"\") {\r\n                notification.messageResultDetails.push({\r\n                    keyFields: [\"ExchangePartnerName\"],\r\n                    keyValues: [modExchangePartner.ExchangePartnerName],\r\n                    isSuccess: false,\r\n                    errorMessage: \"Exchange_Partner_Seller_FinalShipper_Different\",\r\n                });\r\n            }\r\n            this.setState({ validationErrors });\r\n            var returnValue = true;\r\n            if (returnValue)\r\n                returnValue = Object.values(validationErrors).every(function (value) {\r\n                    return value === \"\";\r\n                });\r\n            if (notification.messageResultDetails.length > 0) {\r\n                this.props.onSaved(this.state.modExchangePartner, \"update\", notification);\r\n                return false;\r\n            }\r\n\r\n            return returnValue;\r\n        } catch(error){\r\n            console.log(\"error in validate save\",error)\r\n        }\r\n    }\r\n    CreateExchagePartner(modExchangePartner) {\r\n        try {\r\n            let keyCode = [\r\n                {\r\n                    key: KeyCodes.shareholderCode,\r\n                    value: modExchangePartner.ExchangePartnerName,\r\n                },\r\n            ];\r\n            let obj = {\r\n                keyDataCode: KeyCodes.exchangePartnerName,\r\n                ShareHolderCode: modExchangePartner.ExchangePartnerName,\r\n                KeyCodes: keyCode,\r\n                Entity: modExchangePartner,\r\n            };\r\n\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"ExchangePartnerList_SavedSuccess\",\r\n                messageResultDetails: [\r\n                    {\r\n                        keyFields: [\"Exchange_Partner_Name\"],\r\n                        keyValues: [modExchangePartner.ExchangePartnerName],\r\n                        isSuccess: false,\r\n                        errorMessage: \"\",\r\n                    },\r\n                ],\r\n            };\r\n\r\n            axios(\r\n                RestAPIs.CreateExchangePartner,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                let result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                console.log(result)\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState(\r\n                        {\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnShareholder\r\n                            ),\r\n                            showAuthenticationLayout: false,\r\n\r\n                        },\r\n                        () => this.getExchangePartner({ Name: modExchangePartner.ExchangePartnerName })\r\n                    );\r\n                } else {\r\n                    notification.messageResultDetails[0].errorMessage =\r\n                        result.ErrorList[0];\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnShareholder\r\n                        ),\r\n                        showAuthenticationLayout: false,\r\n\r\n                    });\r\n                    console.log(\"Error in ExchangePartner:\", result.ErrorList);\r\n                }\r\n                this.props.onSaved(this.state.modExchangePartner, \"add\", notification);\r\n            })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnShareholder\r\n                        ),\r\n                        showAuthenticationLayout: false,\r\n\r\n                    });\r\n                    notification.messageResultDetails[0].errorMessage = error;\r\n                    this.props.onSaved(this.state.modExchangePartner, \"add\", notification);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"error in create ExchangePartner\",error)\r\n        }\r\n    }\r\n    UpdateExchagePartner(modExchangePartner) {\r\n        try {\r\n            let keyCode = [\r\n                {\r\n                    key: KeyCodes.shareholderCode,\r\n                    value: modExchangePartner.ExchangePartnerName,\r\n                },\r\n            ];\r\n            let obj = {\r\n                keyDataCode: KeyCodes.shareholderCode,\r\n                KeyCodes: keyCode,\r\n                Entity: modExchangePartner,\r\n            };\r\n\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"ExchangePartnerList_SavedSuccess\",\r\n                messageResultDetails: [\r\n                    {\r\n                        keyFields: [\"Exchange_Partner_Name\"],\r\n                        keyValues: [modExchangePartner.ExchangePartnerName],\r\n                        isSuccess: false,\r\n                        errorMessage: \"\",\r\n                    },\r\n                ],\r\n            };\r\n\r\n            axios(\r\n                RestAPIs.UpdateExchangePartner,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                let result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState(\r\n                        {\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnShareholder\r\n                            ),\r\n                            showAuthenticationLayout: false,\r\n\r\n                        },\r\n                        () => this.getExchangePartner({ Name: modExchangePartner.ExchangePartnerName })\r\n                    );\r\n                } else {\r\n                    notification.messageResultDetails[0].errorMessage =\r\n                        result.ErrorList[0];\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnShareholder\r\n                        ),\r\n                        showAuthenticationLayout: false,\r\n\r\n                    });\r\n                    console.log(\"Error in update ExchangePartner:\", result.ErrorList);\r\n                }\r\n                this.props.onSaved(this.state.modExchangePartner, \"update\", notification);\r\n            })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnShareholder\r\n                        ),\r\n                        showAuthenticationLayout: false,\r\n\r\n                    });\r\n                    notification.messageResultDetails[0].errorMessage = error;\r\n                    this.props.onSaved(this.state.modExchangePartner, \"update\", notification);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"Error in update exchange Partner\",error)\r\n        }\r\n    }\r\n    // getShareholders() {\r\n    //     try {\r\n    //         return Utilities.transferListtoOptions(\r\n    //             this.props.userDetails.EntityResult.ShareholderList\r\n    //         );\r\n    //     } catch (error) {\r\n    //         console.log(\"ExchangeDetailsComposite:Error occured on getShareholders\", error);\r\n    //     }\r\n    // }\r\n    handleShareholderSearchChange = (vehicleCode) => {\r\n        try {\r\n            let shareholderSearchOptions = this.state.shareholderOptions.filter((item) =>\r\n                item.value.toLowerCase().includes(vehicleCode.toLowerCase())\r\n            );\r\n            if (shareholderSearchOptions.length > Constants.filteredOptionsCount) {\r\n                shareholderSearchOptions = shareholderSearchOptions.slice(\r\n                    0,\r\n                    Constants.filteredOptionsCount\r\n                );\r\n            }\r\n\r\n            this.setState({\r\n                shareholderSearchOptions,\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \":Error occured on handleVehicleSearchChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    getSellerSharholder() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetShareholdersList,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        let ShareholderOptions = [];\r\n                        \r\n                        if (\r\n                            result.EntityResult !== null\r\n                        ) {\r\n                            Object.keys(result.EntityResult).forEach((element) => {\r\n                                ShareholderOptions.push({ text: result.EntityResult[element], value: element });\r\n                            });\r\n                        \r\n                            this.setState({ ShareholderOptions, isReadyToRender: true });\r\n                        }\r\n                    } else {\r\n                        this.setState({ ShareholderOptions: [], isReadyToRender: true });\r\n                        console.log(\"Error in getShareholderList:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({ ShareholderOptions: [], isReadyToRender: true });\r\n                    console.log(\"Error while getting ShareholderList:\", error);\r\n                });\r\n        } catch(error) {\r\n            console.log(\"error while getting Shareholder\",error)\r\n        }\r\n    \r\n    }\r\n    handleAuthenticationClose = () => {\r\n        this.setState({\r\n            showAuthenticationLayout: false,\r\n        });\r\n    };\r\n    render() {\r\n        // const listOptions = {\r\n        //     shareholders: this.getShareholders(),\r\n        //     ShareholderOptions: this.getSellerSharholder()\r\n        // }\r\n        return this.state.isReadyToRender ? (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <TMDetailsHeader\r\n                        entityCode={this.state.exchangepartner.ExchangePartnerName}\r\n                        newEntityName=\"Exchange_Partner_NewDetail\"\r\n                    ></TMDetailsHeader>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <ExchangePartnerDetails\r\n                        exchangepartner={this.state.exchangepartner}\r\n                        modExchangePartner={this.state.modExchangePartner}\r\n                        validationErrors={this.state.validationErrors}\r\n                        onFieldChange={this.handleChange}\r\n                        isEnterpriseNode={this.props.userDetails.EntityResult.IsEnterpriseNode}\r\n                        // ShareholderOptions={this.state.ShareholderOptions}\r\n                        onShareholderChange={this.handleShareHolderChange}\r\n                        listOptions={{\r\n                            ShareholderOptions: this.state.ShareholderOptions\r\n                            }}\r\n                    >\r\n                    </ExchangePartnerDetails>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <TMDetailsUserActions\r\n                        handleBack={this.props.onBack}\r\n                        handleSave={this.handleSave}\r\n                        handleReset={this.handleReset}\r\n                        saveEnabled={this.state.saveEnabled}\r\n                    ></TMDetailsUserActions>\r\n                </ErrorBoundary>\r\n                {this.state.showAuthenticationLayout ? (\r\n                    <ShowAuthenticationLayout\r\n                        Username={this.props.userDetails.EntityResult.UserName}\r\n                        functionName={\r\n                            this.state.exchangepartner.ExchangePartnerName === \"\"\r\n                                ? functionGroups.add\r\n                                : functionGroups.modify\r\n                        }\r\n                        functionGroup={fnShareholder}\r\n                        handleOperation={this.saveExchagePartner}\r\n                        handleClose={this.handleAuthenticationClose}\r\n                    ></ShowAuthenticationLayout>\r\n                ) : null}\r\n            </div>\r\n        ) : (\r\n            <LoadingPage message=\"Loading\"></LoadingPage>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ExchangePartnerDetailsComposite);\r\n\r\nExchangePartnerDetailsComposite.propTypes = {\r\n    selectedRow: PropTypes.object.isRequired,\r\n    selectedShareholder: PropTypes.string.isRequired,\r\n    terminalCodes: PropTypes.array.isRequired,\r\n    onBack: PropTypes.func.isRequired,\r\n    onSaved: PropTypes.func.isRequired,\r\n};\r\n\r\n","import React from \"react\";\r\nimport { TMSummaryPageComposite } from \"../Common/TMSummaryPageComposite\";\r\n\r\nexport function ExchangePartnerSummaryPageComposite({\r\n    tableData,\r\n    columnDetails,\r\n    pageSize,\r\n    terminalsToShow,\r\n    selectedItems,\r\n    onSelectionChange,\r\n    onRowClick,\r\n}) {\r\n    return (\r\n        <TMSummaryPageComposite\r\n            tableData={tableData}\r\n            columnDetails={columnDetails}\r\n            pageSize={pageSize}\r\n            terminalsToShow={terminalsToShow}\r\n            selectedItems={selectedItems}\r\n            onSelectionChange={onSelectionChange}\r\n            onRowClick={onRowClick}\r\n        ></TMSummaryPageComposite>\r\n    );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { functionGroups, fnShareholder } from \"../../../JS/FunctionGroups\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\nimport { ExchangePartnerSummaryPageComposite } from \"../Summary/ExchangePartnerSummaryComposite\";\r\nimport ExchangePartnerDetailsComposite from \"../Details/ExchangePartnerDetailsComposite\";\r\nimport ShowAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass ExchangePartnerComposite extends Component {\r\n  state = {\r\n    isDetails: false,\r\n    isReadyToRender: false,\r\n    isDetailsModified: false,\r\n    operationsVisibilty: { add: true, delete: false, shareholder: false },\r\n    selectedRow: {},\r\n    selectedItems: [],\r\n    data: {},\r\n    selectedShareholder:\r\n      this.props.selectedShareholder === undefined ||\r\n      this.props.selectedShareholder === null ||\r\n      this.props.selectedShareholder === \"\"\r\n        ? this.props.userDetails.EntityResult.PrimaryShareholder\r\n        : this.props.selectedShareholder,\r\n    showAuthenticationLayout: false\r\n\r\n  };\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.GetExchangePartnerList();\r\n    } catch (error) {\r\n      console.log(\r\n        \"BayGroupComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  handleAdd = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete = false;\r\n      operationsVisibilty.add = false;\r\n      operationsVisibilty.shareholder = false;\r\n      this.setState({\r\n        isDetails: true,\r\n        selectedRow: {},\r\n        data: {},\r\n        operationsVisibilty,\r\n        selectedItems: [],\r\n      });\r\n    } catch (error) {\r\n      console.log(\"ExchangePartnerComposite:Error occured on handleAdd\", error);\r\n    }\r\n  };\r\n  savedEvent = (data, saveType, notification) => {\r\n    try {\r\n      const operationsVisibilty = { ...this.state.operationsVisibilty };\r\n      if (notification.messageType === \"success\") {\r\n         operationsVisibilty.add = Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          fnShareholder\r\n        );\r\n\t      operationsVisibilty.delete = Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.remove,\r\n          fnShareholder\r\n        );\r\n        this.setState({ isDetailsModified: true, operationsVisibilty });\r\n      }\r\n      if (notification.messageType === \"success\" && saveType === \"add\") {\r\n        var selectedItems = [\r\n          {\r\n            Name: data.Name,\r\n          },\r\n        ];\r\n        this.setState({ selectedItems });\r\n      }\r\n      toast(\r\n        <ErrorBoundary>\r\n          <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n        </ErrorBoundary>,\r\n        {\r\n          autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"ExchangePartnerComposite:Error occured on savedEvent\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleBack = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnShareholder\r\n      );\r\n      operationsVisibilty.delete = false;\r\n      this.setState({\r\n        isDetails: false,\r\n        selectedRow: {},\r\n        selectedItems: [],\r\n        isReadyToRender: false,\r\n      });\r\n      this.GetExchangePartnerList();\r\n    } catch (error) {\r\n      console.log(\"baygroupComposite:Error occured on Back click\", error);\r\n    }\r\n  };\r\n  handleDelete = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete = false;\r\n      this.setState({ operationsVisibilty });\r\n      var deleteExchangePartnerKeys = [];\r\n      for (var i = 0; i < this.state.selectedItems.length; i++) {\r\n        var PartnerName = this.state.selectedItems[i][\"Name\"];\r\n        var keyData = {\r\n          ShareHolderCode: PartnerName,\r\n          KeyCodes: [{ Key: KeyCodes.exchangePartnerName, Value: PartnerName }],\r\n        };\r\n        deleteExchangePartnerKeys.push(keyData);\r\n      }\r\n\r\n      axios(\r\n        RestAPIs.DeleteExchangePartner,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          deleteExchangePartnerKeys,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          var isRefreshDataRequire = result.IsSuccess;\r\n\r\n          if (\r\n            result.ResultDataList !== null &&\r\n            result.ResultDataList !== undefined\r\n          ) {\r\n            var failedResultsCount = result.ResultDataList.filter(function (\r\n              res\r\n            ) {\r\n              return !res.IsSuccess;\r\n            }).length;\r\n\r\n            if (failedResultsCount === result.ResultDataList.length) {\r\n              isRefreshDataRequire = false;\r\n            } else isRefreshDataRequire = true;\r\n          }\r\n          var notification = Utilities.convertResultsDatatoNotification(\r\n            result,\r\n            \"ExchangePart_Deletesucess\",\r\n            [\"ShareHolderCode\"]\r\n          );\r\n\r\n          if (isRefreshDataRequire) {\r\n            this.setState({\r\n              isReadyToRender: false,\r\n              showAuthenticationLayout: false,\r\n            });\r\n            this.GetExchangePartnerList();\r\n            operationsVisibilty.delete = false;\r\n            this.setState({\r\n              selectedItems: [],\r\n              operationsVisibilty,\r\n              selectedRow: {},\r\n              showAuthenticationLayout: false,\r\n\r\n            });\r\n          } else {\r\n            operationsVisibilty.delete = true;\r\n            this.setState({\r\n              operationsVisibilty,\r\n              showAuthenticationLayout: false,\r\n            });\r\n          }\r\n\r\n          notification.messageResultDetails.forEach((messageResult) => {\r\n            if (messageResult.keyFields.length > 0)\r\n              messageResult.keyFields[0] = \"Exchange_Partner_Name\";\r\n          });\r\n\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error occured while deleting:\" + error);\r\n          var { operationsVisibilty } = { ...this.state };\r\n          operationsVisibilty.delete = true;\r\n          this.setState({ operationsVisibilty,\r\n            showAuthenticationLayout: false,\r\n           });\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ExchangePartnerComposite:Error occured on handleDelete\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleSelection = (items) => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n\r\n      operationsVisibilty.delete =\r\n        items.length > 0 &&\r\n        Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.remove,\r\n          fnShareholder\r\n        );\r\n\r\n      this.setState({ selectedItems: items, operationsVisibilty });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ExchangePartnerComposite:Error occured on handleSelection\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleRowClick = (item) => {\r\n    try {\r\n      if (item.Name !== undefined) {\r\n        var { operationsVisibilty } = { ...this.state };\r\n        operationsVisibilty.add = Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          fnShareholder\r\n        );\r\n        if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n          operationsVisibilty.delete = false;\r\n        } else {\r\n          operationsVisibilty.delete = Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.remove,\r\n            fnShareholder\r\n          );\r\n        }\r\n        operationsVisibilty.shareholder = false;\r\n        this.setState({\r\n          isDetails: true,\r\n          selectedRow: item,\r\n          selectedItems: [item],\r\n          operationsVisibilty,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ExchangePartnerComposite:Error occured on Row click\", error);\r\n    }\r\n  };\r\n  GetExchangePartnerList() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetExchangePartnerList,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            var { operationsVisibilty } = { ...this.state };\r\n            operationsVisibilty.add = Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnShareholder\r\n            );\r\n            this.setState({\r\n              data: result.EntityResult,\r\n              isReadyToRender: true,\r\n              operationsVisibilty,\r\n\r\n            });\r\n          } else {\r\n            this.setState({ data: [], isReadyToRender: true,\r\n             });\r\n            console.log(\"Error in getexchangepartnerList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          this.setState({\r\n            data: [], isReadyToRender: true,\r\n          });\r\n          console.log(\"Error while getting getexchangepartnerList:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in getexchangepartnerList \", error);\r\n    }\r\n  }\r\n  authenticateDelete = () => {\r\n    try {\r\n      let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      this.setState({ showAuthenticationLayout });\r\n      if (showAuthenticationLayout === false) {\r\n        this.handleDelete();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ShareholderComposite : Error in authenticateDelete\");\r\n    }\r\n  };\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n  render() {\r\n    // const user = this.props.userDetails.EntityResult;\r\n    // let tmuiInstallType=TMUIInstallType.LIVE;\r\n\r\n    // if(user.IsArchived)\r\n    // tmuiInstallType=TMUIInstallType.ARCHIVE;\r\n\r\n    return (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMUserActionsComposite\r\n            operationsVisibilty={this.state.operationsVisibilty}\r\n            breadcrumbItem={this.props.activeItem}\r\n            onAdd={this.handleAdd}\r\n            onDelete={this.authenticateDelete}\r\n            shrVisible={false}\r\n            handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n          ></TMUserActionsComposite>\r\n        </ErrorBoundary>\r\n        {this.state.isDetails === true ? (\r\n          <ErrorBoundary>\r\n            <ExchangePartnerDetailsComposite\r\n              key=\"Exchange_Partner_NewDetail\"\r\n              selectedRow={this.state.selectedRow}\r\n              onBack={this.handleBack}\r\n              onSaved={this.savedEvent}\r\n            ></ExchangePartnerDetailsComposite>\r\n          </ErrorBoundary>\r\n        ) : this.state.isReadyToRender ? (\r\n          <ErrorBoundary>\r\n            <ExchangePartnerSummaryPageComposite\r\n              tableData={this.state.data.Table}\r\n              columnDetails={this.state.data.Column}\r\n              pageSize={\r\n                this.props.userDetails.EntityResult.PageAttibutes\r\n                  .WebPortalListPageSize\r\n              }\r\n              terminalsToShow={\r\n                this.props.userDetails.EntityResult.PageAttibutes\r\n                  .NoOfTerminalsToShow\r\n              }\r\n              selectedItems={this.state.selectedItems}\r\n              selectedBays={this.state.selectedBays}\r\n              expandedRows={this.state.expandedRows}\r\n              toggleExpand={this.toggleExpand}\r\n              onRowClick={this.handleRowClick}\r\n              onSelectionChange={this.handleSelection}\r\n            ></ExchangePartnerSummaryPageComposite>\r\n          </ErrorBoundary>\r\n        ) : (\r\n          <>\r\n            <LoadingPage message=\"Loading\"></LoadingPage>\r\n          </>\r\n        )}\r\n        {this.state.showAuthenticationLayout ? (\r\n          <ShowAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={functionGroups.remove}\r\n            functionGroup={fnShareholder}\r\n            handleClose={this.handleAuthenticationClose}\r\n            handleOperation={this.handleDelete}\r\n          ></ShowAuthenticationLayout>\r\n        ) : null}\r\n        <ErrorBoundary>\r\n          <ToastContainer\r\n            hideProgressBar={true}\r\n            closeOnClick={false}\r\n            closeButton={true}\r\n            newestOnTop={true}\r\n            position=\"bottom-right\"\r\n            toastClassName=\"toast-notification-wrap\"\r\n          />\r\n        </ErrorBoundary>\r\n        {/* <ErrorBoundary>\r\n          <div className=\"detailsContainer\">\r\n            <object\r\n              className=\"tmuiPlaceHolder\"\r\n              type=\"text/html\"\r\n              width=\"100%\"\r\n              height=\"880px\"\r\n              //data=\"http://localhost/TMUI/ExchangePartnerList_x.aspx\"\r\n              data={\"/\"+ tmuiInstallType +\"/ExchangePartnerList_x.aspx\"}\r\n            ></object>\r\n          </div>\r\n        </ErrorBoundary> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ExchangePartnerComposite);\r\n\r\nExchangePartnerComposite.propTypes = {\r\n  activeItem: PropTypes.object,\r\n  selectedShareholder: PropTypes.string,\r\n};\r\n","export const carrierCode = \"CarrierCode\";\r\nexport const transportationType = \"TransportationType\";\r\nexport const shareholderCode = \"ShareHolderCode\";\r\nexport const driverCode = \"DriverCode\";\r\nexport const customerCode = \"CustomerCode\";\r\nexport const trailerCode = \"TrailerCode\";\r\nexport const originTerminalCode = \"OriginTerminalCode\";\r\nexport const primeMoverCode = \"PrimeMoverCode\";\r\nexport const vehicleCode = \"VehicleCode\";\r\nexport const destinationCode = \"DestinationCode\";\r\nexport const finishedProductCode = \"FinishedProductCode\";\r\nexport const shipmentCode = \"ShipmentCode\";\r\nexport const orderCode = \"OrderCode\";\r\nexport const receiptCode = \"ReceiptCode\";\r\nexport const suppliercode = \"SupplierCode\";\r\nexport const marineDispatchCode = \"MarineDispatchCode\";\r\nexport const marineReceiptCode = \"MarineReceiptCode\";\r\nexport const supplierCode = \"SupplierCode\";\r\nexport const contractCode = \"ContractCode\";\r\n\r\nexport const railDispatchCode = \"RailDispatchCode\";\r\nexport const railReceiptCode = \"RailReceiptCode\";\r\nexport const railRouteCode = \"RailRouteCode\";\r\nexport const wagonCode = \"WagonCode\";\r\n\r\nexport const compartmentCode = \"CompartmentCode\";\r\n\r\nexport const smsConfigurationCode = \"SMSConfigurationCode\";\r\nexport const pipelineDispatchCode = \"PipelineDispatchCode\";\r\nexport const pipelineReceiptCode = \"PipelineReceiptCode\";\r\nexport const EmailConfigurationCode = \"EmailConfigurationCode\";\r\n\r\nexport const baseProductCode = \"BaseProductCode\";\r\nexport const locationCode = \"LocationCode\";\r\nexport const gantryCode = \"GantryCode\";\r\n\r\nexport const siteViewType = \"SiteViewType\";\r\n\r\nexport const entityCode = \"EntityCode\";\r\n\r\nexport const entityType = \"EntityType\";\r\nexport const cardReaderCode = \"CardReaderCode\";\r\nexport const accessCardCode = \"AccessCardCode\";\r\nexport const bcuCode = \"BcuCode\";\r\nexport const deuCode = \"DeuCode\";\r\nexport const weighBridgeCode = \"WeighBridgeCode\";\r\nexport const weight = \"Weight\";\r\nexport const outOfToleranceAllowed = \"OutOfToleranceAllowed\";\r\n\r\nexport const loadingArmCode = \"LoadingArmCode\";\r\nexport const transportaionType = \"TransportationType\";\r\nexport const bayCode = \"BayCode\";\r\nexport const TransactionNumber = \"TransactionNumber\";\r\nexport const BatchNumber = \"BatchNumber\";\r\nexport const terminalCode = \"TerminalCode\";\r\nexport const tankGroupCode = \"TankGroupCode\";\r\nexport const tankCode = \"TankCode\";\r\nexport const meterCode = \"MeterCode\";\r\n\r\nexport const shipmentType = \"ShipmentType\";\r\nexport const shipmentStatus = \"ShipmentStatus\";\r\nexport const meterLineType = \"MeterLineType\";\r\nexport const dispatchCode = \"DispatchCode\";\r\nexport const railReceiptStatus = \"RailReceiptStatus\";\r\nexport const receiptStatus = \"ReceiptStatus\";\r\nexport const fptTansactionID = \"FPTransactionID\";\r\nexport const productCategoryType = \"ProductCategoryType\";\r\nexport const marineReason = \"Reason\";\r\n\r\nexport const sealMasterCode = \"SealMasterCode\";\r\nexport const marineDispatchReason = \"Reason\";\r\nexport const OperationName = \"OperationName\";\r\nexport const FPTransactionID = \"FPTransactionID\";\r\nexport const ProductCategoryType = \"ProductCategoryType\";\r\nexport const compartmentSeqNoInVehicle = \"CompartmentSeqNoInVehicle\";\r\nexport const adjustedPlanQuantity = \"AdjustedPlanQuantity\";\r\nexport const forceComplete = \"ForceComplete\";\r\nexport const dispatchStatus = \"DispatchStatus\";\r\nexport const HolidayDate = \"HolidayDate\";\r\nexport const ActionID = \"ActionID\";\r\nexport const EODTimePrev = \"EODTimePrev\";\r\nexport const TerminalAction = \"TerminalAction\";\r\nexport const EODTime = \"EODTime\";\r\nexport const MonthStartDay = \"MonthStartDay\";\r\nexport const captainCode = \"CaptainCode\";\r\nexport const userType = \"GeneralTMUserType\";\r\nexport const generalTMUserCode = \"GeneralTMUserCode\";\r\nexport const isPriority = \"IsPriority\";\r\nexport const actualTerminalCode = \"ActualTerminalCode\";\r\nexport const shipmentBondNo = \"ShipmentBondNo\"\r\nexport const receiptBondNo = \"ReceiptBondNo\"\r\nexport const marineReceiptStatus = \"MarineReceiptStatus\";\r\nexport const deviceType = \"DeviceType\";\r\nexport const deviceCode = \"DeviceCode\";\r\nexport const bayGroup = \"BayGroup\";\r\nexport const pipelineHeaderCode = \"PipelineHeaderCode\";\r\nexport const exchangePartnerName = \"ExchangePartner\";\r\nexport const personID = \"PersonID\";\r\nexport const userName = \"UserName\";\r\nexport const pipelinePlanCode = \"PipelinePlanCode\";\r\nexport const pipelinePlanType = \"PipelinePlanType\";\r\nexport const channelCode = \"ChannelCode\";\r\nexport const ProcessName = \"ProcessName\";\r\nexport const reconciliationCode = \"ReconciliationCode\";\r\nexport const NotificationGroupCode = \"NotificationGroupCode\";\r\nexport const NotificationGroupStatus = \"NotificationGroupStatus\";\r\nexport const NotificationGroupDesc = \"NotificationGroupDesc\";\r\nexport const NotificationResSource = \"NotificationResSource\";\r\nexport const NotificationResMsgCode = \"NotificationResMsgCode\";\r\nexport const NotificationOrigResSource = \"NotificationOrigResSource\";\r\nexport const NotificationOrigResMsgCode = \"NotificationOrigResMsgCode\";\r\nexport const NotificationMessageCode = \"NotificationMessageCode\"\r\nexport const positionType = \"PositionType\";\r\nexport const roleName = \"RoleName\";\r\nexport const exchangeAgreementCode = \"ExchangeAgreementCode\";\r\nexport const ProductTransferAgreementCode = \"ProductTransferAgreementCode\";\r\nexport const ShareholderAgreementStatus = \"ShareholderAgreementStatus\";\r\nexport const RequestorShareholder = \"RequestorShareholder\";\r\nexport const LenderShareholder = \"LenderShareholder\";\r\nexport const requestCode = \"RequestCode\";\r\nexport const TransferReferenceCode = \"TransferReferenceCode\";\r\nexport const ShiftID = \"ShiftID\";\r\nexport const ShiftName = \"ShiftName\";\r\nexport const printerName = \"PrinterName\";\r\nexport const locationtype = \"LocationType\";\r\nexport const forceClosureReason = \"ForceClosureReason\";\r\nexport const TransactionType = \"TransactionType\";\r\nexport const CustomerRecipeCode = \"CustomerRecipeCode\";\r\n\r\nexport const coaTemplateCode = \"COATemplateCode\";\r\nexport const coaManagementCode = \"COAManagementCode\";\r\nexport const coaParameterCode = \"COAParameterCode\";\r\nexport const coaManagementFinishedProductCode = \"COAManagementFinishedProductCode\";\r\nexport const coaCustomerCode = \"COACustomerCode\";\r\nexport const coaFinishedProductCode = \"COAFinishedProductCode\";\r\nexport const coaAssignmentCode = \"COAAssignmentCode\";\r\nexport const coaTransportationType = \"COATransportationType\";\r\nexport const coaTransactionType = \"COATransactionType\";\r\nexport const coaSeqNumber = \"COASeqNumber\";\r\nexport const forecastDate = \"ForecastDate\";\r\nexport const forecastTanks = \"ForecastTanks\";"],"names":["ExchangePartnerDetails","_ref","exchangepartner","modExchangePartner","validationErrors","onFieldChange","listOptions","_jsx","TranslationConsumer","children","t","index","className","_jsxs","Input","fluid","value","ExchangePartnerName","indicator","disabled","onChange","data","label","error","reserveSpace","Select","placeholder","SellerId","options","ShareholderOptions","search","noResultsMessage","FinalShipperID","defaultProps","isEnterpriseNode","ExchangePartnerDetailsComposite","Component","constructor","arguments","state","lodash","emptyExchangePartner","Utilities","exchangePartnerValidationDef","isReadyToRender","saveEnabled","lookUpData","isEnable","shareHolderList","sharholderSerchOptions","sellerSharholder","showAuthenticationLayout","tempExchangePartner","handleChange","propertyName","this","setState","undefined","console","log","handleReset","Object","keys","forEach","key","saveExchagePartner","CreateExchagePartner","UpdateExchagePartner","handleSave","values","every","fillDetails","validateSave","props","userDetails","EntityResult","IsWebPortalUser","handleShareholderSearchChange","vehicleCode","shareholderSearchOptions","shareholderOptions","filter","item","toLowerCase","includes","length","Constants","slice","handleAuthenticationClose","componentDidMount","IsArchived","getExchangePartner","selectedRow","getSellerSharholder","componentWillReceiveProps","nextProps","exchangePartnerName","Name","tokenDetails","tokenInfo","exchangePartnerRow","FunctionsList","functionGroups","add","fnShareholder","keyCode","KeyCodes","obj","ShareHolderCode","keyDataCode","axios","RestAPIs","then","response","result","IsSuccess","modify","ErrorList","catch","selleridValue","findIndex","text","finalShipperidValue","notification","messageType","message","messageResultDetails","push","keyFields","keyValues","isSuccess","errorMessage","returnValue","onSaved","Entity","element","render","ErrorBoundary","TMDetailsHeader","entityCode","newEntityName","IsEnterpriseNode","onShareholderChange","handleShareHolderChange","TMDetailsUserActions","handleBack","onBack","ShowAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","ExchangePartnerSummaryPageComposite","tableData","columnDetails","pageSize","terminalsToShow","selectedItems","onSelectionChange","onRowClick","TMSummaryPageComposite","ExchangePartnerComposite","isDetails","isDetailsModified","operationsVisibilty","delete","shareholder","selectedShareholder","PrimaryShareholder","handleAdd","savedEvent","saveType","remove","toast","NotifyEvent","notificationMessage","autoClose","GetExchangePartnerList","handleDelete","deleteExchangePartnerKeys","i","PartnerName","keyData","Key","Value","isRefreshDataRequire","ResultDataList","res","messageResult","handleSelection","items","handleRowClick","authenticateDelete","TMUserActionsComposite","breadcrumbItem","activeItem","onAdd","onDelete","shrVisible","handleBreadCrumbClick","Table","Column","PageAttibutes","WebPortalListPageSize","NoOfTerminalsToShow","selectedBays","expandedRows","toggleExpand","_Fragment","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","position","toastClassName","carrierCode","transportationType","shareholderCode","driverCode","customerCode","trailerCode","originTerminalCode","primeMoverCode","destinationCode","finishedProductCode","shipmentCode","orderCode","receiptCode","marineDispatchCode","marineReceiptCode","supplierCode","contractCode","railDispatchCode","railReceiptCode","railRouteCode","wagonCode","compartmentCode","smsConfigurationCode","pipelineDispatchCode","pipelineReceiptCode","EmailConfigurationCode","baseProductCode","locationCode","siteViewType","entityType","cardReaderCode","accessCardCode","bcuCode","deuCode","weighBridgeCode","weight","outOfToleranceAllowed","loadingArmCode","transportaionType","bayCode","TransactionNumber","BatchNumber","terminalCode","tankGroupCode","tankCode","meterCode","shipmentType","shipmentStatus","meterLineType","dispatchCode","receiptStatus","fptTansactionID","productCategoryType","marineReason","sealMasterCode","marineDispatchReason","OperationName","FPTransactionID","ProductCategoryType","compartmentSeqNoInVehicle","adjustedPlanQuantity","forceComplete","dispatchStatus","HolidayDate","ActionID","EODTimePrev","TerminalAction","EODTime","MonthStartDay","captainCode","userType","generalTMUserCode","isPriority","actualTerminalCode","shipmentBondNo","receiptBondNo","deviceType","deviceCode","bayGroup","pipelineHeaderCode","personID","userName","pipelinePlanCode","pipelinePlanType","channelCode","ProcessName","reconciliationCode","NotificationGroupCode","NotificationGroupStatus","NotificationGroupDesc","NotificationResSource","NotificationResMsgCode","NotificationOrigResSource","NotificationOrigResMsgCode","NotificationMessageCode","positionType","exchangeAgreementCode","ProductTransferAgreementCode","ShareholderAgreementStatus","RequestorShareholder","LenderShareholder","requestCode","TransferReferenceCode","ShiftID","ShiftName","printerName","locationtype","forceClosureReason","TransactionType","CustomerRecipeCode","coaTemplateCode","coaManagementCode","coaParameterCode","coaManagementFinishedProductCode","coaSeqNumber","forecastDate","forecastTanks"],"sourceRoot":""}