{"version":3,"file":"static/js/4624.72137781.chunk.js","mappings":"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","sources":["Components/UIBase/Details/HSEConfigurationDetails.jsx","Components/Composite/Details/HSEConfigurationDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Input, Select, Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Constants from \"./../../../JS/Constants\";\r\nimport \"../../../CSS/hseConfiguration.css\";\r\n\r\nHSEConfigurationDetails.propTypes = {\r\n  HSEConfiguration: PropTypes.object.isRequired,\r\n  modHSEConfiguration: PropTypes.object.isRequired,\r\n  modAssociations: PropTypes.array.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    TransactionType: PropTypes.array,\r\n    TransportationUnit: PropTypes.array,\r\n    TransportationUnitType: PropTypes.array,\r\n    LocationTypeCode: PropTypes.array\r\n  }).isRequired,\r\n  downloadTemplate: PropTypes.func.isRequired,\r\n  uploadToPreview: PropTypes.func.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  isNewHSEConfiguration: PropTypes.bool.isRequired,\r\n  transportationType: PropTypes.string.isRequired,\r\n  fileSelectorValue: PropTypes.string.isRequired\r\n};\r\n\r\nexport function HSEConfigurationDetails({\r\n  HSEConfiguration,\r\n  modHSEConfiguration,\r\n  modAssociations,\r\n  validationErrors,\r\n  listOptions,\r\n  downloadTemplate,\r\n  uploadToPreview,\r\n  onFieldChange,\r\n  isNewHSEConfiguration,\r\n  transportationType,\r\n  fileSelectorValue\r\n}) {\r\n\r\n  const questionTable = {\r\n    English: [],\r\n    Localized: []\r\n  }\r\n  let key = 0;\r\n  for (let question of modAssociations) {\r\n    questionTable.English.push(\r\n      <div className=\"hse-configuration-list-item\" key={key}>\r\n        <div className={`hse-configuration-list-item-severity ${question.Severity === \"0\" ? 'severity-0' : 'severity-1'}`}></div>\r\n        <div className=\"hse-configuration-list-item-text\">{question.EnglishText}</div>\r\n      </div>\r\n    );\r\n    questionTable.Localized.push(\r\n      <div className=\"hse-configuration-list-item\" key={key}>\r\n        <div className={`hse-configuration-list-item-severity ${question.Severity === \"0\" ? 'severity-0' : 'severity-1'}`}></div>\r\n        <div className=\"hse-configuration-list-item-text\">{question.LocalizedText}</div>\r\n      </div>\r\n    );\r\n    key += 1;\r\n  }\r\n  \r\n  const inputRef = React.createRef();\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(HSEConfiguration.Questions);\r\n  };\r\n\r\n  const handleSelectConfigFile = () => {\r\n    inputRef.current.click()\r\n  };\r\n\r\n  const handleUploadToPreview = () => {\r\n    const file = inputRef.current.files[0];\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsText(file);\r\n    fileReader.onload = () => {\r\n      uploadToPreview(fileReader.result)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div>\r\n          <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  indicator=\"required\"\r\n                  placeholder={t(\"Common_Select\")}\r\n                  label={t(\"HSE_TransactionType\")}\r\n                  value={modHSEConfiguration.TransactionType}\r\n                  onChange={(data) => onFieldChange(\"TransactionType\", data)}\r\n                  error={t(validationErrors.TransactionType)}\r\n                  options={listOptions.TransactionType}\r\n                  reserveSpace={false}\r\n                  disabled={isNewHSEConfiguration === false}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  indicator=\"required\"\r\n                  placeholder={t(\"Common_Select\")}\r\n                  label={t(\"HSE_TransportationUnit\")}\r\n                  value={modHSEConfiguration.TransportationUnit}\r\n                  onChange={(data) => onFieldChange(\"TransportationUnit\", data)}\r\n                  error={t(validationErrors.TransportationUnit)}\r\n                  options={listOptions.TransportationUnit}\r\n                  reserveSpace={false}\r\n                  disabled={isNewHSEConfiguration === false}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                />\r\n              </div>\r\n              {transportationType === Constants.TransportationType.ROAD || \r\n                transportationType === Constants.TransportationType.PIPELINE\r\n                ? null \r\n                : <div className=\"col-12 col-md-6 col-lg-4\">\r\n                  <Select\r\n                    fluid\r\n                    indicator=\"required\"\r\n                    placeholder={t(\"Common_Select\")}\r\n                    label={t(\"HSE_TransportationUnitType\")}\r\n                    value={modHSEConfiguration.TransportationUnitType}\r\n                    onChange={(data) => onFieldChange(\"TransportationUnitType\", data)}\r\n                    error={t(validationErrors.TransportationUnitType)}\r\n                    options={listOptions.TransportationUnitType}\r\n                    reserveSpace={false}\r\n                    disabled={isNewHSEConfiguration === false}\r\n                    noResultsMessage={t(\"noResultsMessage\")}\r\n                  />\r\n                </div>}\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  indicator=\"required\"\r\n                  placeholder={t(\"Common_Select\")}\r\n                  label={t(\"LocationInfo_LocationType\")}\r\n                  value={modHSEConfiguration.LocationTypeCode}\r\n                  onChange={(data) => onFieldChange(\"LocationTypeCode\", data)}\r\n                  error={t(validationErrors.LocationTypeCode)}\r\n                  options={listOptions.LocationTypeCode}\r\n                  reserveSpace={false}\r\n                  disabled={isNewHSEConfiguration === false}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modHSEConfiguration.Description}\r\n                  onChange={(data) => onFieldChange(\"Description\", data)}\r\n                  label={t(\"Entity_Description\")}\r\n                  error={t(validationErrors.Description)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Button\r\n                  className=\"hse-configuration-button\"\r\n                  type=\"secondary\"\r\n                  content={t(\"HSE_DownloadQuestionsTemplate\")}\r\n                  onClick={handleDownloadTemplate}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Button\r\n                  className=\"hse-configuration-button\"\r\n                  type=\"primary\"\r\n                  content={t(\"HSE_UploadToPreview\")}\r\n                  onClick={handleSelectConfigFile}\r\n                />\r\n                <input\r\n                  ref={inputRef}\r\n                  type=\"file\"\r\n                  accept=\"text/xml\"\r\n                  style={{ display: \"none\" }}\r\n                  onChange={handleUploadToPreview}\r\n                  value={fileSelectorValue}\r\n                ></input>\r\n              </div>\r\n            </div>\r\n\r\n            {modAssociations.length > 0 ? (\r\n              <div className=\"row row-flex-start\">\r\n              <div className=\"col-12 col-md-6\">\r\n                <div className=\"hse-configuration-list\">\r\n                  <div className=\"hse-configuration-list-header\">{t(\"HSE_QuestionsEnglishText\")}</div>\r\n                  <div className=\"hse-configuration-list-content\">\r\n                    {questionTable.English}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-12 col-md-6\">\r\n                <div className=\"hse-configuration-list\">\r\n                  <div className=\"hse-configuration-list-header\">{t(\"HSE_QuestionsLocalizedText\")}</div>\r\n                  <div className=\"hse-configuration-list-content\">\r\n                    {questionTable.Localized}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}","import React, { Component } from \"react\";\r\nimport { HSEConfigurationDetails } from \"../../UIBase/Details/HSEConfigurationDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { HSEConfigurationValidationDef } from \"../../../JS/ValidationDef\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { emptyHSEConfiguration } from \"../../../JS/DefaultEntities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Constants from \"./../../../JS/Constants\";\r\nimport * as getUserDetails from \"../../../Redux/Actions/GetUserDetails\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"./../../../Components/ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport { functionGroups, fnHSEConfiguration, fnRoadHSEConfiguration, fnRailHSEConfiguration, fnMarineHSEConfiguration, fnPipelineHSEConfiguration } from \"../../../JS/FunctionGroups\";\r\nimport lodash from \"lodash\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass HSEConfigurationDetailsComposite extends Component {\r\n  state = {\r\n    HSEConfiguration: lodash.cloneDeep(emptyHSEConfiguration),\r\n    modHSEConfiguration: {},\r\n    modAssociations: [],\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      HSEConfigurationValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    shareholders: this.getShareholders(),\r\n    transactionTypeOptions: [],\r\n    transportationUnitObject: {},\r\n    transportationUnitOptions: [],\r\n    transportationUnitTypeOptions: [],\r\n    locationTypeOptions: [],\r\n    saveEnabled: false,\r\n    isNewHSEConfiguration: true,\r\n    fileSelectorValue: \"\",\r\n    showAuthenticationLayout: false,\r\n    tempHSEConfiguration: {},\r\n  };\r\n\r\n  getShareholders() {\r\n    return Utilities.transferListtoOptions(\r\n      this.props.userDetails.EntityResult.ShareholderList\r\n    );\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modHSEConfiguration = lodash.cloneDeep(\r\n        this.state.modHSEConfiguration\r\n      );\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n\r\n      modHSEConfiguration[propertyName] = data;\r\n      if (propertyName === \"TransportationUnit\") {\r\n        const transportationUnitTypeList = this.state.transportationUnitObject[\r\n          data\r\n        ];\r\n        if (transportationUnitTypeList.length === 1) {\r\n          modHSEConfiguration.TransportationUnitType =\r\n            transportationUnitTypeList[0];\r\n        }\r\n        this.setState({\r\n          transportationUnitTypeOptions: Utilities.transferListtoOptions(\r\n            transportationUnitTypeList\r\n          ),\r\n        });\r\n      }\r\n      this.setState({ modHSEConfiguration });\r\n      if (HSEConfigurationValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          HSEConfigurationValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"HSEConfigurationDetailsComposite: Error occurred on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.HSEConfiguration.TransactionType !== null &&\r\n        nextProps.selectedRow.PipelineEntry_TransactionType === undefined\r\n      ) {\r\n        this.getHSEConfiguration(nextProps.selectedRow);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"HSEConfigurationDetailsComposite: Error occurred on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      this.getTransactionTypes();\r\n      this.getHSEConfigurationCommonData();\r\n    } catch (error) {\r\n      console.log(\r\n        \"HSEConfigurationDetailsComposite: Error occurred on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTransactionTypes() {\r\n    const data =\r\n      this.props.transportationType === Constants.TransportationType.ROAD\r\n        ? {\r\n            shipment: \"SHIPMENT\",\r\n            receipt: \"RECEIPT\",\r\n          }\r\n        : {\r\n            shipment: \"DISPATCH\",\r\n            receipt: \"RECEIPT\",\r\n          };\r\n    const transactionTypeOptions = [];\r\n    for (let key in data) {\r\n      transactionTypeOptions.push({ text: key, value: data[key] });\r\n    }\r\n    this.setState({ transactionTypeOptions });\r\n  }\r\n\r\n  getHSEConfigurationCommonData() {\r\n    const keyCode = [\r\n      {\r\n        key: \"TransportationType\",\r\n        value: this.props.transportationType,\r\n      },\r\n    ];\r\n    const obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.HSEConfigurationCommonData,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          const transportationUnitObject = {};\r\n          const transportationUnitList = [];\r\n          if (Array.isArray(result.EntityResult.Table)) {\r\n            result.EntityResult.Table.forEach((item) => {\r\n              if (transportationUnitObject[item.Unit] === undefined) {\r\n                transportationUnitObject[item.Unit] = [];\r\n                transportationUnitList.push(item.Unit);\r\n              }\r\n              transportationUnitObject[item.Unit].push(item.UnitType);\r\n            });\r\n          }\r\n          const locationTypeList = [];\r\n          if (Array.isArray(result.EntityResult.Table1)) {\r\n            result.EntityResult.Table1.forEach((item) => {\r\n              locationTypeList.push(item.LocationTypeCode);\r\n            });\r\n          }\r\n          this.setState({\r\n            transportationUnitObject,\r\n            transportationUnitOptions: Utilities.transferListtoOptions(\r\n              transportationUnitList\r\n            ),\r\n            locationTypeOptions: Utilities.transferListtoOptions(\r\n              locationTypeList\r\n            ),\r\n          });\r\n          this.getHSEConfiguration(this.props.selectedRow);\r\n        } else {\r\n          console.log(\r\n            \"Error in getHSEConfigurationCommonData:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"getHSEConfigurationCommonData: Error occurred on getHSEConfigurationCommonData\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  getHSEConfiguration(selectedRow) {\r\n    emptyHSEConfiguration.TransportationType = this.props.transportationType;\r\n\r\n    if (selectedRow.PipelineEntry_TransactionType === undefined) {\r\n      this.setState({\r\n        HSEConfiguration: { ...emptyHSEConfiguration },\r\n        modHSEConfiguration: { ...emptyHSEConfiguration },\r\n        modAssociations: [],\r\n        isReadyToRender: true,\r\n        saveEnabled: Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          this.props.transportationType + fnHSEConfiguration\r\n        ),\r\n        isNewHSEConfiguration: true,\r\n        fileSelectorValue: \"\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const keyCode = [\r\n      {\r\n        key: \"TransportationType\",\r\n        value: this.props.transportationType,\r\n      },\r\n      {\r\n        key: \"TransactionType\",\r\n        value: selectedRow.PipelineEntry_TransactionType,\r\n      },\r\n      {\r\n        key: \"LocationType\",\r\n        value: selectedRow.LocationInfo_LocationType,\r\n      },\r\n      {\r\n        key: \"TransportationUnit\",\r\n        value: selectedRow.HSE_TransportationUnit,\r\n      },\r\n      {\r\n        key: \"TransportationUnitType\",\r\n        value: selectedRow.HSE_TransportationUnitType,\r\n      },\r\n      {\r\n        key: \"TerminalCode\",\r\n        value: this.props.selectedTerminal,\r\n      },\r\n    ];\r\n    const obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetHSEConfiguration,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          const transportationUnitTypeList = this.state\r\n            .transportationUnitObject[result.EntityResult.TransportationUnit];\r\n          this.setState({\r\n            isReadyToRender: true,\r\n            HSEConfiguration: lodash.cloneDeep(result.EntityResult),\r\n            modHSEConfiguration: lodash.cloneDeep(result.EntityResult),\r\n            modAssociations: this.getAssociationsFromXMLString(\r\n              result.EntityResult.Questions\r\n            ),\r\n            transportationUnitTypeOptions: Utilities.transferListtoOptions(\r\n              transportationUnitTypeList\r\n            ),\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              this.props.transportationType + fnHSEConfiguration\r\n            ),\r\n            isNewHSEConfiguration: false,\r\n            fileSelectorValue: \"\",\r\n          });\r\n        } else {\r\n          this.setState({\r\n            HSEConfiguration: lodash.cloneDeep(emptyHSEConfiguration),\r\n            modHSEConfiguration: lodash.cloneDeep(emptyHSEConfiguration),\r\n            isReadyToRender: true,\r\n            isNewHSEConfiguration: true,\r\n          });\r\n          console.log(\"Error in getHSEConfiguration:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"HSEConfigurationDetailsComposite: Error occurred on getHSEConfiguration\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  getAssociationsFromXMLString(xmlString) {\r\n    let questionsDoc = null;\r\n    let isTransferSuccess = true;\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"HSE_Configuration_ValidateUploadQuestions\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"HSE_Configuration_ValidateUploadQuestions_Error\",\r\n        },\r\n      ],\r\n    };\r\n    if (!!xmlString) {\r\n      try {\r\n        if (window.ActiveXObject) {\r\n          const xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\r\n          xmlDoc.async = false;\r\n          xmlDoc.loadXML(xmlString);\r\n          questionsDoc = xmlDoc;\r\n        } else {\r\n          const parser = new DOMParser();\r\n          const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n          questionsDoc = xmlDoc.getElementsByTagName(\"Questions\")[0];\r\n        }\r\n      } catch (error) {\r\n        console.log(\r\n          \"HSEConfigurationDetailsComposite: Error occurred on getAssociationsFromXMLString\",\r\n          error\r\n        );\r\n        isTransferSuccess = false;\r\n      }\r\n    } else {\r\n      isTransferSuccess = false;\r\n    }\r\n    if (isTransferSuccess) {\r\n      const associations = [];\r\n      if (this.validateAndTransferQuestionsDoc(questionsDoc, associations)) {\r\n        return associations;\r\n      }\r\n    }\r\n    toast(\r\n      <ErrorBoundary>\r\n        <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n      </ErrorBoundary>,\r\n      {\r\n        autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n      }\r\n    );\r\n    return [];\r\n  }\r\n\r\n  validateAndTransferQuestionsDoc(questionsDoc, questionList) {\r\n    const questionNodeList = [];\r\n    for (let question of questionsDoc.childNodes) {\r\n      if (question.nodeName === \"Question\") {\r\n        questionNodeList.push(question);\r\n      }\r\n    }\r\n    if (questionNodeList.length === 0) {\r\n      return false;\r\n    }\r\n    for (let questionNode of questionNodeList) {\r\n      const itemCheck = {\r\n        Severity: false,\r\n        EnglishText: false,\r\n        LocalizedText: false,\r\n      };\r\n      let itemNumber = 0;\r\n      const question = {};\r\n      for (let item of questionNode.childNodes) {\r\n        if (\r\n          item.nodeName !== \"Severity\" &&\r\n          item.nodeName !== \"EnglishText\" &&\r\n          item.nodeName !== \"LocalizedText\" &&\r\n          item.nodeName !== \"#text\" &&\r\n          item.nodeName !== \"#comment\"\r\n        ) {\r\n          return false;\r\n        } else if (item.nodeName === \"Severity\") {\r\n          if (item.textContent !== \"0\" && item.textContent !== \"1\") {\r\n            return false;\r\n          }\r\n          itemNumber += 1;\r\n          question[item.nodeName] = item.textContent;\r\n        } else if (\r\n          item.nodeName === \"EnglishText\" ||\r\n          item.nodeName === \"LocalizedText\"\r\n        ) {\r\n          if (item.textContent === \"\") {\r\n            return false;\r\n          }\r\n          itemNumber += 1;\r\n          question[item.nodeName] = item.textContent;\r\n        }\r\n        itemCheck[item.nodeName] = true;\r\n      }\r\n      if (\r\n        itemCheck.Severity === false ||\r\n        itemCheck.EnglishText === false ||\r\n        itemCheck.LocalizedText === false\r\n      ) {\r\n        return false;\r\n      } else if (itemNumber !== 3) {\r\n        return false;\r\n      }\r\n      questionList.push(question);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  getXMLStringFromAssociations(modAssociations) {\r\n    let xmlString = \"<Questions>\";\r\n    for (let question of modAssociations) {\r\n      xmlString += \"<Question>\";\r\n      for (let key in question) {\r\n        xmlString += `<${key}>${question[key]}</${key}>`;\r\n      }\r\n      xmlString += \"</Question>\";\r\n    }\r\n    xmlString += \"</Questions>\";\r\n    return xmlString;\r\n  }\r\n\r\n  downloadTemplate = (xmlString) => {\r\n    if (xmlString === null) {\r\n      this.getHSEQuestionsTemplate(this.downloadTemplateCallback);\r\n    } else {\r\n      this.downloadTemplateCallback('<?xml version=\"1.0\"?>' + xmlString);\r\n    }\r\n  };\r\n\r\n  downloadTemplateCallback = (xmlString) => {\r\n    const exportBlob = new Blob([this.formatXML(xmlString)]);\r\n    const filename = \"HSEConfigTemplate.xml\";\r\n    if (navigator.msSaveBlob) {\r\n      navigator.msSaveBlob(exportBlob, filename);\r\n    } else {\r\n      const saveLink = document.createElementNS(\r\n        \"http://www.w3.org/1999/xhtml\",\r\n        \"a\"\r\n      );\r\n      const urlObject = window.URL || window.webkitURL || window;\r\n      saveLink.href = urlObject.createObjectURL(exportBlob);\r\n      saveLink.download = filename;\r\n      const event = document.createEvent(\"MouseEvents\");\r\n      event.initMouseEvent(\r\n        \"click\",\r\n        true,\r\n        false,\r\n        window,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        false,\r\n        false,\r\n        false,\r\n        false,\r\n        0,\r\n        null\r\n      );\r\n      saveLink.dispatchEvent(event);\r\n    }\r\n  };\r\n\r\n  getHSEQuestionsTemplate(callback) {\r\n    axios(\r\n      RestAPIs.DownloadHSEQuestion,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess) {\r\n          callback(result.EntityResult);\r\n        } else {\r\n          console.log(\"Error in getHSEQuestionsTemplate:\", result.ErrorList);\r\n          return null;\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"HSEConfigurationDetailsComposite: Error occurred on getHSEQuestionsTemplate\",\r\n          error\r\n        );\r\n        return null;\r\n      });\r\n  }\r\n\r\n  formatXML(xmlString, tab) {\r\n    let formatted = \"\",\r\n      indent = \"\";\r\n    tab = tab || \"    \";\r\n    const xmlArray = xmlString.split(/>\\s*</);\r\n    for (let i = 0; i < xmlArray.length; i++) {\r\n      let node = xmlArray[i];\r\n      if (node.match(/^\\/\\w/)) {\r\n        indent = indent.substring(tab.length);\r\n      }\r\n      if (node.substring(0, 1) !== \"!\") {\r\n        formatted += indent;\r\n      }\r\n      formatted += \"<\" + node + \">\";\r\n      if (i < xmlArray.length - 1 && xmlArray[i + 1].substring(0, 1) !== \"!\") {\r\n        formatted += \"\\r\\n\";\r\n      }\r\n      if (node.match(/^<?\\w[^>]*[^/]$/)) {\r\n        indent += tab;\r\n      }\r\n    }\r\n    return formatted.substring(1, formatted.length - 1);\r\n  }\r\n\r\n  uploadToPreview = (xmlString) => {\r\n    const modAssociations = this.getAssociationsFromXMLString(xmlString);\r\n    this.setState({ modAssociations });\r\n  };\r\n\r\n  saveHSEConfig = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempHSEConfiguration = lodash.cloneDeep(this.state.tempHSEConfiguration);\r\n\r\n      this.state.isNewHSEConfiguration === true\r\n          ? this.createHSEConfiguration(tempHSEConfiguration)\r\n          : this.updateHSEConfiguration(tempHSEConfiguration);\r\n    } catch (error) {\r\n      console.log(\"PrimeMoversComposite : Error in savePrimeMover\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n     // this.setState({ saveEnabled: false });\r\n      const modHSEConfiguration = lodash.cloneDeep(\r\n        this.state.modHSEConfiguration\r\n      );\r\n      modHSEConfiguration.TerminalCode= this.props.selectedTerminal;\r\n      modHSEConfiguration.Questions = this.getXMLStringFromAssociations(\r\n        this.state.modAssociations\r\n      );\r\n      if (this.validateSave(modHSEConfiguration)) {\r\n       \r\n        let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      let tempHSEConfiguration = lodash.cloneDeep(modHSEConfiguration);\r\n      this.setState({ showAuthenticationLayout, tempHSEConfiguration }, () => {\r\n        if (showAuthenticationLayout === false) {\r\n          this.saveHSEConfig();\r\n        }\r\n    });\r\n\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"HSEConfigurationDetailsComposite: Error occurred on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  validateSave(modHSEConfiguration) {\r\n    const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n\r\n    Object.keys(HSEConfigurationValidationDef).forEach((key) => {\r\n      if (modHSEConfiguration[key] !== undefined) {\r\n        validationErrors[key] = Utilities.validateField(\r\n          HSEConfigurationValidationDef[key],\r\n          modHSEConfiguration[key]\r\n        );\r\n      }\r\n    });\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"HSE_Configuration_SavedStatus\",\r\n      messageResultDetails: [],\r\n    };\r\n\r\n    if (modHSEConfiguration.Questions === \"<Questions></Questions>\") {\r\n      notification.messageResultDetails.push({\r\n        keyFields: [],\r\n        keyValues: [],\r\n        isSuccess: false,\r\n        errorMessage: \"HSE_Questions_MandatoryCode\",\r\n      });\r\n    }\r\n\r\n    this.setState({ validationErrors });\r\n    const returnValue = Object.values(validationErrors).every((value) => {\r\n      return value === \"\";\r\n    });\r\n    if (notification.messageResultDetails.length > 0) {\r\n      this.props.onSaved(\r\n        this.state.modHSEConfiguration,\r\n        \"update\",\r\n        notification\r\n      );\r\n      return false;\r\n    }\r\n    return returnValue;\r\n  }\r\n\r\n  createHSEConfiguration(modHSEConfiguration) {\r\n    const keyCode = [\r\n      {\r\n        key: \"TransportationType\",\r\n        value: modHSEConfiguration.TransportationType,\r\n      },\r\n      {\r\n        key: \"TransactionType\",\r\n        value: modHSEConfiguration.TransactionType,\r\n      },\r\n      {\r\n        key: \"LocationType\",\r\n        value: modHSEConfiguration.LocationTypeCode,\r\n      },\r\n      {\r\n        key: \"TransportationUnit\",\r\n        value: modHSEConfiguration.TransportationUnit,\r\n      },\r\n      {\r\n        key: \"TransportationUnitType\",\r\n        value: modHSEConfiguration.TransportationUnitType,\r\n      },\r\n      {\r\n        key: \"TerminalCode\",\r\n        value: modHSEConfiguration.TerminalCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      // keyDataCode: KeyCodes.HSEConfiguration,\r\n      KeyCodes: keyCode,\r\n      Entity: modHSEConfiguration,\r\n    };\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"HSE_Configuration_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"HSE_Configuration\"],\r\n          keyValues: [this.props.transportationType],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.CreateHSEConfiguration,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({ showAuthenticationLayout: false, });\r\n\r\n          this.getHSEConfiguration({\r\n            HSE_TransportationUnit: modHSEConfiguration.TransportationUnit,\r\n            HSE_TransportationUnitType:\r\n              modHSEConfiguration.TransportationUnitType,\r\n            LocationInfo_LocationType: modHSEConfiguration.LocationTypeCode,\r\n            PipelineEntry_TransactionType: modHSEConfiguration.TransactionType,\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({ saveEnabled: true,showAuthenticationLayout: false, });\r\n          console.log(\"Error in createHSEConfiguration:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modHSEConfiguration, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ saveEnabled: true, showAuthenticationLayout: false, });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modHSEConfiguration, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  updateHSEConfiguration(modHSEConfiguration) {\r\n    const keyCode = [\r\n      {\r\n        key: \"TransportationType\",\r\n        value: modHSEConfiguration.TransportationType,\r\n      },\r\n      {\r\n        key: \"TransactionType\",\r\n        value: modHSEConfiguration.TransactionType,\r\n      },\r\n      {\r\n        key: \"LocationType\",\r\n        value: modHSEConfiguration.LocationTypeCode,\r\n      },\r\n      {\r\n        key: \"TransportationUnit\",\r\n        value: modHSEConfiguration.TransportationUnit,\r\n      },\r\n      {\r\n        key: \"TransportationUnitType\",\r\n        value: modHSEConfiguration.TransportationUnitType,\r\n      },\r\n      {\r\n        key: \"TerminalCode\",\r\n        value: modHSEConfiguration.TerminalCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      // keyDataCode: KeyCodes.HSEConfiguration,\r\n      KeyCodes: keyCode,\r\n      Entity: modHSEConfiguration,\r\n    };\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"HSE_Configuration_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"HSE_Configuration\"],\r\n          keyValues: [this.props.transportationType],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateHSEConfiguration,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({ showAuthenticationLayout: false, });\r\n          this.getHSEConfiguration({\r\n            HSE_TransportationUnit: modHSEConfiguration.TransportationUnit,\r\n            HSE_TransportationUnitType:\r\n              modHSEConfiguration.TransportationUnitType,\r\n            LocationInfo_LocationType: modHSEConfiguration.LocationTypeCode,\r\n            PipelineEntry_TransactionType: modHSEConfiguration.TransactionType,\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({ saveEnabled: true,showAuthenticationLayout: false, });\r\n          console.log(\"Error in updateHSEConfiguration:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(\r\n          this.state.modHSEConfiguration,\r\n          \"update\",\r\n          notification\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ saveEnabled: true,showAuthenticationLayout: false, });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(\r\n          this.state.modHSEConfiguration,\r\n          \"modify\",\r\n          notification\r\n        );\r\n      });\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      const HSEConfiguration = lodash.cloneDeep(this.state.HSEConfiguration);\r\n      Object.keys(validationErrors).forEach((key) => {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState({\r\n        modHSEConfiguration: HSEConfiguration,\r\n        modAssociations: HSEConfiguration.Questions\r\n          ? this.getAssociationsFromXMLString(HSEConfiguration.Questions)\r\n          : [],\r\n        validationErrors,\r\n        fileSelectorValue: \"\",\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"HSEConfigurationDetailsComposite: Error occurred on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  getFunctionGroupName() {\r\n    if(this.props.transportationType === Constants.TransportationType.RAIL)\r\n      return fnRailHSEConfiguration;                   \r\n    else  if(this.props.transportationType === Constants.TransportationType.MARINE)\r\n      return fnMarineHSEConfiguration;\r\n    else  if(this.props.transportationType === Constants.TransportationType.PIPELINE)\r\n      return fnPipelineHSEConfiguration\r\n    else  \r\n      return fnRoadHSEConfiguration;\r\n   };\r\n   \r\n  render() {\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            newEntityName={\"HSE_Configuration_\" + this.props.transportationType}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <HSEConfigurationDetails\r\n            HSEConfiguration={this.state.HSEConfiguration}\r\n            modHSEConfiguration={this.state.modHSEConfiguration}\r\n            modAssociations={this.state.modAssociations}\r\n            validationErrors={this.state.validationErrors}\r\n            listOptions={{\r\n              TransactionType: this.state.transactionTypeOptions,\r\n              TransportationUnit: this.state.transportationUnitOptions,\r\n              TransportationUnitType: this.state.transportationUnitTypeOptions,\r\n              LocationTypeCode: this.state.locationTypeOptions,\r\n            }}\r\n            downloadTemplate={this.downloadTemplate}\r\n            uploadToPreview={this.uploadToPreview}\r\n            onFieldChange={this.handleChange}\r\n            isNewHSEConfiguration={this.state.isNewHSEConfiguration}\r\n            transportationType={this.props.transportationType}\r\n            fileSelectorValue={this.state.fileSelectorValue}\r\n          ></HSEConfigurationDetails>\r\n        </ErrorBoundary>\r\n\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.isNewHSEConfiguration === true\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={this.getFunctionGroupName()}\r\n            handleOperation={this.saveHSEConfig}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n        </ErrorBoundary>\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    userActions: bindActionCreators(getUserDetails, dispatch),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(HSEConfigurationDetailsComposite);\r\n\r\nHSEConfigurationDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  selectedTerminal: PropTypes.string.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n"],"names":["HSEConfigurationDetails","_ref","HSEConfiguration","modHSEConfiguration","modAssociations","validationErrors","listOptions","downloadTemplate","uploadToPreview","onFieldChange","isNewHSEConfiguration","transportationType","fileSelectorValue","questionTable","English","Localized","key","question","push","_jsxs","className","children","_jsx","concat","Severity","EnglishText","LocalizedText","inputRef","React","handleDownloadTemplate","Questions","handleSelectConfigFile","current","click","handleUploadToPreview","file","files","fileReader","FileReader","readAsText","onload","result","TranslationConsumer","t","Select","fluid","indicator","placeholder","label","value","TransactionType","onChange","data","error","options","reserveSpace","disabled","noResultsMessage","TransportationUnit","Constants","ROAD","PIPELINE","TransportationUnitType","LocationTypeCode","Input","Description","Button","type","content","onClick","ref","accept","style","display","length","HSEConfigurationDetailsComposite","Component","constructor","arguments","state","lodash","emptyHSEConfiguration","Utilities","HSEConfigurationValidationDef","isReadyToRender","shareholders","this","getShareholders","transactionTypeOptions","transportationUnitObject","transportationUnitOptions","transportationUnitTypeOptions","locationTypeOptions","saveEnabled","showAuthenticationLayout","tempHSEConfiguration","handleChange","propertyName","transportationUnitTypeList","setState","undefined","console","log","xmlString","getHSEQuestionsTemplate","downloadTemplateCallback","exportBlob","Blob","formatXML","filename","navigator","msSaveBlob","saveLink","document","createElementNS","urlObject","window","URL","webkitURL","href","createObjectURL","download","event","createEvent","initMouseEvent","dispatchEvent","getAssociationsFromXMLString","saveHSEConfig","createHSEConfiguration","updateHSEConfiguration","handleSave","TerminalCode","props","selectedTerminal","getXMLStringFromAssociations","validateSave","userDetails","EntityResult","IsWebPortalUser","handleReset","Object","keys","forEach","handleAuthenticationClose","ShareholderList","componentWillReceiveProps","nextProps","selectedRow","PipelineEntry_TransactionType","getHSEConfiguration","componentDidMount","getTransactionTypes","getHSEConfigurationCommonData","shipment","receipt","text","keyCode","obj","ShareHolderCode","selectedShareholder","KeyCodes","axios","RestAPIs","tokenDetails","tokenInfo","then","response","IsSuccess","transportationUnitList","Array","isArray","Table","item","Unit","UnitType","locationTypeList","Table1","ErrorList","catch","TransportationType","FunctionsList","functionGroups","add","fnHSEConfiguration","LocationInfo_LocationType","HSE_TransportationUnit","HSE_TransportationUnitType","modify","questionsDoc","isTransferSuccess","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","ActiveXObject","xmlDoc","async","loadXML","parser","DOMParser","parseFromString","getElementsByTagName","associations","validateAndTransferQuestionsDoc","toast","ErrorBoundary","NotifyEvent","notificationMessage","autoClose","questionList","questionNodeList","childNodes","nodeName","questionNode","itemCheck","itemNumber","textContent","callback","tab","formatted","indent","xmlArray","split","i","node","match","substring","returnValue","values","every","onSaved","PrimaryShareholder","Entity","getFunctionGroupName","RAIL","fnRailHSEConfiguration","MARINE","fnMarineHSEConfiguration","fnPipelineHSEConfiguration","fnRoadHSEConfiguration","render","TMDetailsHeader","newEntityName","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","dispatch","userActions","bindActionCreators","entityCode","popUpContents","margin","Popup","element","fieldName","fieldValue","Icon","marginLeft","root","name","size","position","List","map","Content","defaultProps","float"],"sourceRoot":""}