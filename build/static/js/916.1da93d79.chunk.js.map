{"version":3,"file":"static/js/916.1da93d79.chunk.js","mappings":"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","sources":["Components/UIBase/Common/TMUserActions.jsx","Components/Composite/Common/TMUserActionsComposite.jsx","Components/Composite/Common/UserAuthentication.jsx","Components/UIBase/Common/WijmoGrid.jsx","Components/Composite/Common/WijmoGridComposite.jsx","Components/UIBase/Details/ProcessConfigDetails.jsx","Components/Composite/Details/ProcessConfigDetailsComposite.jsx","Components/Composite/Summary/ProcessConfigurationSummaryComposite.jsx","Components/Composite/Entity/ProcessConfigComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/FunctionGroups.js","JS/KeyCodes.js","JS/functionalUtilities.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Icon,\r\n  Breadcrumb,\r\n  Select,\r\n  Modal,\r\n  Button,\r\n  Popup,\r\n  VerticalMenu,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nTMUserActions.propTypes = {\r\n  operationsVisibilty: PropTypes.shape({\r\n    add: PropTypes.bool,\r\n    delete: PropTypes.bool,\r\n    shareholder: PropTypes.bool,\r\n  }).isRequired,\r\n  breadcrumbItem: PropTypes.shape({\r\n    itemName: PropTypes.string,\r\n    itemCode: PropTypes.string,\r\n    itemProps: PropTypes.any,\r\n    localizedKey: PropTypes.string,\r\n    parents: PropTypes.array,\r\n    isComponent: PropTypes.bool,\r\n  }).isRequired,\r\n  shareholders: PropTypes.array.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onShareholderChange: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onAdd: PropTypes.func.isRequired,\r\n  popUpContent: PropTypes.array,\r\n};\r\nTMUserActions.defaultProps = {\r\n  operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n  breadcrumbItem: {\r\n    itemName: \"\",\r\n    itemCode: \"\",\r\n    localizedKey: \"\",\r\n    itemProps: {},\r\n    parents: [],\r\n    isComponent: false,\r\n  },\r\n  shareholders: [],\r\n  selectedShareholder: \"\",\r\n  popUpContent: [],\r\n  shrVisible: true,\r\n  addVisible: true,\r\n  deleteVisible: true\r\n};\r\nexport function TMUserActions({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [popUpOpen, setPopUpOpen] = useState(false);\r\n  function getShareholderDropdownOptions() {\r\n    return Utilities.transferListtoOptions(shareholders);\r\n    // var List = [];\r\n    // shareholders.forEach((element) => {\r\n    //   List.push({ text: element, value: element });\r\n    // });\r\n    // return List;\r\n  }\r\n\r\n  function buildBreadcrumb() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {breadcrumbItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item\r\n                  onClick={() => {\r\n                    if (\r\n                      handleBreadCrumbClick !== undefined &&\r\n                      handleBreadCrumbClick !== null\r\n                    ) {\r\n                      handleBreadCrumbClick(\r\n                        parentitem.itemCode,\r\n                        breadcrumbItem.parents\r\n                      );\r\n                    }\r\n                  }}\r\n                  key={parentitem.itemCode}\r\n                >\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={breadcrumbItem.itemCode}>\r\n              {t(breadcrumbItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  function handlePopUpClick() {\r\n    if (operationsVisibilty.add) {\r\n      if (popUpContent.length > 0) {\r\n        if (popUpOpen === false) setPopUpOpen(true);\r\n        else setPopUpOpen(false);\r\n      } else {\r\n        onAdd();\r\n      }\r\n    }\r\n  }\r\n\r\n  function popUpMenuClick(menuItem) {\r\n    setPopUpOpen(false);\r\n    onAdd(menuItem);\r\n  }\r\n  function displayIcons() {\r\n    return (\r\n      <div\r\n        style={{ float: \"right\", display: \"inline-block\", marginTop: \"10px\" }}\r\n      >\r\n        {addVisible ? <Popup\r\n          position=\"bottom right\"\r\n          className=\"popup-theme-wrap\"\r\n          element={\r\n            <div\r\n              className={\r\n                (operationsVisibilty.add\r\n                  ? \"iconCircle \"\r\n                  : \"iconCircleDisable \") + \"iconblock\"\r\n              }\r\n              onClick={handlePopUpClick}\r\n            >\r\n              <Icon\r\n                root=\"common\"\r\n                name=\"badge-plus\"\r\n                size=\"small\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          }\r\n          on=\"click\"\r\n          open={popUpOpen}\r\n        >\r\n          <div onMouseLeave={() => setPopUpOpen(false)}>\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <VerticalMenu>\r\n                  <VerticalMenu>\r\n                    <VerticalMenu.Header>\r\n                      {t(\"Common_Create\")}\r\n                    </VerticalMenu.Header>\r\n                    {popUpContent.map((item) => {\r\n                      return (\r\n                        <VerticalMenu.Item\r\n                          onClick={() => popUpMenuClick(item.fieldName)}\r\n                        >\r\n                          {t(item.fieldValue)}\r\n                        </VerticalMenu.Item>\r\n                      );\r\n                    })}\r\n                  </VerticalMenu>\r\n                </VerticalMenu>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        </Popup> : \"\"}\r\n        {deleteVisible ? <div\r\n          style={{ marginLeft: \"10px\" }}\r\n          onClick={() => {\r\n            if (operationsVisibilty.delete) {\r\n              setModelOpen(true);\r\n              //displayTMModalforDelete();\r\n              //onDelete();\r\n            }\r\n          }}\r\n          className={\r\n            (operationsVisibilty.delete\r\n              ? \"iconCircle \"\r\n              : \"iconCircleDisable \") + \"iconblock\"\r\n          }\r\n        >\r\n          <Icon root=\"common\" name=\"delete\" size=\"small\" color=\"white\" />\r\n        </div> : \"\"}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayTMModalforDelete() {\r\n    //console.log(\"entered to display modal actions\");\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  onDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n    //return <TMModal open={true}></TMModal>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\" style={{ alignItems: \"flex-start\", padding: \"0px\" }}>\r\n      <div\r\n        className=\"col-9 col-sm-9 col-md-9 col-lg-10 col-xl-10\"\r\n        style={{ padding: \"0px\" }}\r\n      >\r\n        <div className=\"row\" style={{ marginTop: \"10px\", alignItems: \"\" }}>\r\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n            <ErrorBoundary> {buildBreadcrumb()}</ErrorBoundary>\r\n          </div>\r\n          <div\r\n            className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-4\"\r\n          //style={{ verticalAlign: \"middle\" }}\r\n          >\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <div\r\n                  className=\"compartmentIcon\"\r\n                  style={{ justifyContent: \"flex-start\" }}\r\n                >\r\n                  {shrVisible === false ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <div>\r\n                        <h4 className=\"shrText\">{t(\"Common_Shareholder\")}:</h4>\r\n                      </div>\r\n                      <div className=\"opSelect\">\r\n                        <Select\r\n                          //className=\"opSelect\"\r\n                          placeholder={t(\"Common_Shareholder\")}\r\n                          value={selectedShareholder}\r\n                          disabled={!operationsVisibilty.shareholder}\r\n                          options={getShareholderDropdownOptions()}\r\n                          onChange={(value) => onShareholderChange(value)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n\r\n          {displayTMModalforDelete()}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-3 col-sm-3 col-md-3 col-lg-2 col-xl-2\">\r\n        {displayIcons()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TMUserActions } from \"../../UIBase/Common/TMUserActions\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nexport function TMUserActionsComposite({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n\r\n}) {\r\n  return (\r\n    <TMUserActions\r\n      operationsVisibilty={operationsVisibilty}\r\n      breadcrumbItem={breadcrumbItem}\r\n      shareholders={shareholders}\r\n      selectedShareholder={selectedShareholder}\r\n      onShareholderChange={onShareholderChange}\r\n      onDelete={onDelete}\r\n      onAdd={onAdd}\r\n      popUpContent={popUpContent}\r\n      shrVisible={shrVisible}\r\n      handleBreadCrumbClick={handleBreadCrumbClick}\r\n      addVisible={addVisible}\r\n      deleteVisible={deleteVisible}\r\n    ></TMUserActions>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Modal, Button, Select, Checkbox, Input, Icon } from \"@scuf/common\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { userAuthenticationValidationDef } from \"../../../JS/ValidationDef\";\r\nimport axios from \"axios\";\r\nimport lodash from \"lodash\";\r\nimport cryptojs from \"crypto-js\";\r\n\r\nclass UserAuthenticationLayout extends Component {\r\n  state = {\r\n    isPasswordRequired: false,\r\n    Password: \"\",\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      userAuthenticationValidationDef\r\n    ),\r\n    authenticationResponse: \"\",\r\n    btnAuthenticateEnabled: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      this.IsPasswordRequired();\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  IsPasswordRequired() {\r\n    try {\r\n      let isPasswordRequired = Utilities.isPasswordEnabled(\r\n        this.props.userDetails.EntityResult.roleFunctionInfo,\r\n        this.props.functionName,\r\n        this.props.functionGroup\r\n      );\r\n      this.setState({ isPasswordRequired });\r\n\r\n      if (isPasswordRequired === false) this.props.handleOperation();\r\n    } catch (error) {\r\n      console.log(\"Error in IsPasswordRequired method:\", error);\r\n    }\r\n  }\r\n\r\n  onFieldChange = (propertyName, data) => {\r\n    this.setState({ Password: data });\r\n    const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    if (userAuthenticationValidationDef[propertyName] !== undefined) {\r\n      validationErrors[propertyName] = Utilities.validateField(\r\n        userAuthenticationValidationDef[propertyName],\r\n        data\r\n      );\r\n      this.setState({ validationErrors, authenticationResponse: \"\" });\r\n    }\r\n\r\n  };\r\n\r\n  validatePassword = (Password) => {\r\n    this.setState({ btnAuthenticateEnabled: false });\r\n    const validationErrors = { ...this.state.validationErrors };\r\n    if (Password === null || Password === \"\") {\r\n      validationErrors[\"Password\"] = \"UserValidationForm_ReqfldValPassword\";\r\n    }\r\n    this.setState({ validationErrors });\r\n    var returnValue = true;\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n\r\n    return returnValue;\r\n  };\r\n\r\n  // AuthenticateUser = () => {\r\n  //     if (this.validatePassword(this.state.Password)) {\r\n  //         this.props.parentCallBack();\r\n  //     }\r\n  // }\r\n  onCloseClick = () => {\r\n    this.setState(\r\n      {\r\n        isPasswordRequired: false,\r\n        authenticationResponse: \"\",\r\n        btnAuthenticateEnabled: true,\r\n      },\r\n      () => this.props.handleClose()\r\n    );\r\n  };\r\n\r\n  // unescapeBase64Url = function (key) {\r\n  //   return key.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n  // };\r\n\r\n  // escapeBase64Url = function (key) {\r\n  //   return key.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\r\n  // };\r\n\r\n  AuthenticateUser = () => {\r\n    if (this.validatePassword(this.state.Password)) {\r\n      this.setState({ authenticationResponse: \"\" });\r\n      // this.props.parentCallBack();\r\n      try {\r\n        var keySize = 256;\r\n        var iterations = 100;\r\n        //assign the entered password\r\n        var msg = this.state.Password;\r\n        //assign the username from GetLoggedInUserDetails\r\n        var pass = this.props.Username;\r\n        var salt = cryptojs.lib.WordArray.random(128 / 8);\r\n\r\n        var key = cryptojs.PBKDF2(pass, salt, {\r\n          keySize: keySize / 32,\r\n          iterations: iterations,\r\n        });\r\n\r\n        var iv = cryptojs.lib.WordArray.random(128 / 8);\r\n\r\n        var encrypted = cryptojs.AES.encrypt(msg, key, {\r\n          iv: iv,\r\n          padding: cryptojs.pad.Pkcs7,\r\n          mode: cryptojs.mode.CBC,\r\n        });\r\n        var transitmessage =\r\n          salt.toString() + iv.toString() + encrypted.toString();\r\n        //console.log(\"EncryptedPWD\", transitmessage);\r\n\r\n        axios(\r\n          RestAPIs.ValidateUserCredentials +\r\n          \"?encryptedPassword=\" +\r\n          encodeURIComponent(transitmessage),\r\n          Utilities.getAuthenticationObjectforGet(\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        )\r\n          .then((response) => {\r\n            var result = response.data;\r\n            if (result.IsSuccess === true) {\r\n              if (result.EntityResult.toLowerCase() === \"true\") {\r\n                this.setState({ isPasswordRequired: false });\r\n                this.props.handleOperation();\r\n              } else {\r\n                this.setState({\r\n                  authenticationResponse: result.ErrorList[0],\r\n                  btnAuthenticateEnabled: true,\r\n                });\r\n              }\r\n            } else {\r\n              this.setState({\r\n                authenticationResponse: result.ErrorList[0],\r\n                btnAuthenticateEnabled: true,\r\n              });\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            this.setState({\r\n              authenticationResponse: error,\r\n              btnAuthenticateEnabled: true,\r\n            });\r\n          });\r\n      } catch (error) {\r\n        this.setState({\r\n          authenticationResponse: error,\r\n          btnAuthenticateEnabled: true,\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({ btnAuthenticateEnabled: true });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.isPasswordRequired === true ? (\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <Modal open={true} size=\"mini\">\r\n                <Modal.Content>\r\n                  <div className=\"row\">\r\n                    <div\r\n                      className=\"col col-lg-8\"\r\n                      style={{ marginLeft: \"10px\" }}\r\n                    >\r\n                      <h4>{t(\"User_Authentication\")}</h4>\r\n                    </div>\r\n                    <div\r\n                      className=\"col-12 col-lg-3\"\r\n                      style={{ textAlign: \"right\" }}\r\n                      onClick={this.onCloseClick}\r\n                    >\r\n                      <Icon root=\"common\" name=\"close\" />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                    <div className=\"col col-lg-12\">\r\n                      <label>\r\n                        <h5>\r\n                          {t(\"UserValidation_Form_AccountName\")}:\r\n                          {this.props.Username}\r\n                        </h5>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col col-lg-12\">\r\n                      <Input\r\n                        fluid\r\n                        type=\"password\"\r\n                        disablePasswordToggle={false}\r\n                        value={this.state.Password}\r\n                        indicator=\"required\"\r\n                        onChange={(data) =>\r\n                          this.onFieldChange(\"Password\", data)\r\n                        }\r\n                        label={t(\"AccessCardInfo_x_Pwd\")}\r\n                        error={t(this.state.validationErrors.Password)}\r\n                        reserveSpace={false}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </Modal.Content>\r\n                <Modal.Footer>\r\n                  <span className=\"ui error-message autherrormsg\">\r\n                    {t(this.state.authenticationResponse)}\r\n                  </span>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    disabled={!this.state.btnAuthenticateEnabled}\r\n                    content={t(\"UserValidationForm_Authentication\")}\r\n                    onClick={this.AuthenticateUser}\r\n                  />\r\n                </Modal.Footer>\r\n              </Modal>\r\n            )}\r\n          </TranslationConsumer>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(UserAuthenticationLayout);\r\n\r\nUserAuthenticationLayout.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as wjCore from \"@grapecity/wijmo\";\r\nimport * as wjGrid from \"@grapecity/wijmo.grid\";\r\nimport {\r\n  FlexGrid,\r\n  FlexGridColumn,\r\n  FlexGridCellTemplate,\r\n} from \"@grapecity/wijmo.react.grid\";\r\nimport { FlexGridFilter } from \"@grapecity/wijmo.react.grid.filter\";\r\nimport { Operator } from \"@grapecity/wijmo.grid.filter\";\r\nimport { FlexGridSearch } from \"@grapecity/wijmo.react.grid.search\";\r\nimport { CollectionView } from \"@grapecity/wijmo\";\r\nimport { CollectionViewNavigator, ListBox } from \"@grapecity/wijmo.react.input\";\r\nimport { Selector } from \"@grapecity/wijmo.grid.selector\";\r\nimport { HeadersVisibility } from \"@grapecity/wijmo.grid\";\r\nimport { showPopup, hidePopup, PopupPosition } from \"@grapecity/wijmo\";\r\nimport * as wjcGridXlsx from \"@grapecity/wijmo.grid.xlsx\";\r\nimport \"@grapecity/wijmo.styles/wijmo.css\";\r\nimport { GroupPanel } from \"@grapecity/wijmo.react.grid.grouppanel\";\r\nimport { Button, Card, Popup } from \"@scuf/common\";\r\nimport { TranslationConsumer, useTranslation } from \"@scuf/localization\";\r\nimport { Icon } from \"@scuf/common\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport * as loadash from \"lodash\";\r\nimport \"@grapecity/wijmo.touch\";\r\n\r\nconst WijmoGrid = (props) => {\r\n  const [flex, setFlex] = useState(null);\r\n  const [translator] = useTranslation();\r\n  const _getData = (pageLength) => {\r\n    return new CollectionView(props.sourceData, {\r\n      pageSize: pageLength,\r\n    });\r\n  };\r\n\r\n  const [data, setData] = useState(_getData(props.rowsPerPage));\r\n  const theGrid = React.createRef();\r\n  const theSearch = React.createRef();\r\n  const gridFilter = React.createRef();\r\n  const pagingComponent = React.createRef();\r\n  const colPicker = React.useRef();\r\n\r\n  // to keep track of selected rows\r\n  const selectedRows = React.useRef(props.selectionRequired ? [] : null);\r\n\r\n  // to initialize grid checkbox selection\r\n  let selector = null;\r\n\r\n  //Initialize grid\r\n  const gridInitialized = (grid) => {\r\n    try {\r\n      // localize grid filter\r\n      customizeFilterConditions();\r\n\r\n      if (props.onRowClick) {\r\n        // add row click event handler\r\n        grid.addEventListener(grid.hostElement, \"click\", (e) => {\r\n          let ht = grid.hitTest(e);\r\n          // condition to check if cell is not a grouped cell and a data cell\r\n          if (\r\n            ht.target.closest(\".wj-cell\") &&\r\n            ![...ht.target.closest(\".wj-cell\").classList].includes(\r\n              \"wj-group\"\r\n            ) &&\r\n            ht.cellType === wjGrid.CellType.Cell\r\n          ) {\r\n            // fetch row data\r\n            const rowData = grid.rows[ht.row].dataItem;\r\n            props.onRowClick(rowData);\r\n          }\r\n        });\r\n      }\r\n\r\n      grid.selectionMode = wjCore.asEnum(\"None\", wjGrid.SelectionMode);\r\n      grid.select(-1, -1);\r\n\r\n      setFlex(grid);\r\n      if (props.selectionRequired) {\r\n        // enable checkbox selection\r\n        selector = new Selector(grid, {\r\n          itemChecked: (s, e) => {\r\n            // if only single checkbox selection is required\r\n            if (props.singleSelection) {\r\n              grid.rows\r\n                .filter((row) => {\r\n                  return (\r\n                    row.isSelected &&\r\n                    selectedRows.current.filter((item) =>\r\n                      loadash.isEqual(item, row.dataItem)\r\n                    ).length === 1\r\n                  );\r\n                })\r\n                .forEach((row) => {\r\n                  row.isSelected = false;\r\n                });\r\n            }\r\n\r\n            // pass row data as parameter to checkbox selection handler\r\n            props.onSelectionHandle(\r\n              grid.rows\r\n                .filter((r) => r.isSelected)\r\n                .map((selectedRow) => selectedRow.dataItem)\r\n            );\r\n          },\r\n          // if only single checkbox selection is required\r\n          showCheckAll: !props.singleSelection,\r\n        });\r\n\r\n        let theGrid = selector.column.grid;\r\n        selector.column = theGrid.rowHeaders.columns[0];\r\n        theGrid.headersVisibility = HeadersVisibility.All;\r\n        theGrid.selectionMode = wjCore.asEnum(\"None\", wjGrid.SelectionMode);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in gridInitialized: \" + error);\r\n    }\r\n  };\r\n\r\n  //Update grid when data changes\r\n  useEffect(() => {\r\n    try {\r\n      if (theGrid != null) {\r\n        //Connect search to the grid\r\n        let grid = theGrid.current.control;\r\n        let search = theSearch.current.control;\r\n        search.grid = grid;\r\n      }\r\n\r\n      setData(_getData(props.rowsPerPage));\r\n    } catch (error) {\r\n      console.log(\"Error in grid update:\", error);\r\n    }\r\n  }, [props.sourceData]);\r\n\r\n  // Pre-select grid rows based on selectedItems props\r\n  useEffect(() => {\r\n    try {\r\n      if (flex && props.selectionRequired) {\r\n        // clear the selectedRows array\r\n        selectedRows.current.length = 0;\r\n        // add selectedItems array items to selectedRows\r\n        selectedRows.current.push(...props.selectedItems);\r\n\r\n        flex.rows.forEach((row) => {\r\n          if (\r\n            props.selectedItems.filter((item) =>\r\n              loadash.isEqual(item, row.dataItem)\r\n            ).length === 1\r\n          ) {\r\n            // checks the row checkbox\r\n            row.isSelected = true;\r\n          } else {\r\n            // unchecks the row checkbox\r\n            row.isSelected = false;\r\n          }\r\n        });\r\n\r\n        flex.refresh();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in pre-selecting rows:\", error);\r\n    }\r\n  }, [props.selectedItems]);\r\n\r\n  //Load the state of grid\r\n  useEffect(() => {\r\n    try {\r\n      if (\r\n        localStorage.getItem(props.parentComponent + \"GridState\") &&\r\n        localStorage.getItem(props.parentComponent + \"GridState\") !== \"null\" &&\r\n        flex\r\n      ) {\r\n        // restore grid settings\r\n        let gridState = JSON.parse(\r\n          localStorage.getItem(props.parentComponent + \"GridState\")\r\n        );\r\n        let newFlex = flex;\r\n\r\n        // restore column picker settings\r\n        newFlex.columns.forEach((col) => {\r\n          let matchedCol = gridState.columns.filter(\r\n            (colSetting) => colSetting.binding === col.binding\r\n          );\r\n          col.visible =\r\n            matchedCol.length > 0 ? matchedCol[0].visible : col.visible;\r\n        });\r\n\r\n        // restore filter settings\r\n        gridFilter.current.control.filterDefinition =\r\n          gridState.filterDefinition;\r\n\r\n        // restore sort settings\r\n        newFlex.collectionView.deferUpdate(() => {\r\n          newFlex.collectionView.sortDescriptions.clear();\r\n          for (let i = 0; i < gridState.sortDescriptions.length; i++) {\r\n            let sortDesc = gridState.sortDescriptions[i];\r\n            newFlex.collectionView.sortDescriptions.push(\r\n              new wjCore.SortDescription(sortDesc.property, sortDesc.ascending)\r\n            );\r\n          }\r\n        });\r\n\r\n        // restore grouping settings\r\n        for (let i = 0; i < gridState.groupDescriptions.length; i++) {\r\n          newFlex.collectionView.groupDescriptions.push(\r\n            new wjCore.PropertyGroupDescription(gridState.groupDescriptions[i])\r\n          );\r\n          newFlex.columns.filter(\r\n            (col) => col.binding === gridState.groupDescriptions[i]\r\n          )[0].visible = false;\r\n        }\r\n\r\n        if (\r\n          sessionStorage.getItem(props.parentComponent + \"GridState\") &&\r\n          sessionStorage.getItem(props.parentComponent + \"GridState\") !== \"null\"\r\n        ) {\r\n          let gridSessionState = JSON.parse(\r\n            sessionStorage.getItem(props.parentComponent + \"GridState\")\r\n          );\r\n          // restore paging settings\r\n          newFlex.collectionView.moveToPage(\r\n            newFlex.collectionView.pageCount - 1 >= gridSessionState.pageIndex\r\n              ? gridSessionState.pageIndex\r\n              : newFlex.collectionView.pageCount - 1\r\n          );\r\n\r\n          // restore search settings\r\n          if (theSearch) {\r\n            theSearch.current.control.text = gridSessionState.searchText;\r\n          }\r\n        }\r\n\r\n        setFlex(newFlex);\r\n        flex.refresh();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in restoring local storage settings: \", error);\r\n    }\r\n  }, [data]);\r\n\r\n  // Set Column Picker Properties\r\n  useEffect(() => {\r\n    try {\r\n      if (flex && colPicker.current && props.columnPickerRequired) {\r\n        colPicker.current.itemsSource = flex.columns;\r\n        colPicker.current.checkedMemberPath = \"visible\";\r\n        colPicker.current.displayMemberPath = \"header\";\r\n        colPicker.current.lostFocus.addHandler(() => {\r\n          hidePopup(colPicker.current.hostElement);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in initializing column picker properties:\", error);\r\n    }\r\n  }, [colPicker.current]);\r\n\r\n  useEffect(() => {\r\n    // remove column picker pop-up on component unmount\r\n    return () => {\r\n      if (props.columnPickerRequired && colPicker.current) {\r\n        hidePopup(colPicker.current.hostElement);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // export grid data to excel\r\n  const exportExcel = () => {\r\n    try {\r\n      let gridFlex = flex;\r\n      //to download all rows from all pages\r\n      gridFlex.itemsSource.pageSize = props.sourceData.length;\r\n      setFlex(gridFlex);\r\n      wjcGridXlsx.FlexGridXlsxConverter.saveAsync(\r\n        flex,\r\n        {\r\n          includeColumnHeaders: true,\r\n          includeCellStyles: false,\r\n          formatItem: null,\r\n        },\r\n        props.exportFileName\r\n      );\r\n\r\n      //to restore paging\r\n      gridFlex.itemsSource.pageSize = props.rowsPerPage;\r\n      setFlex(gridFlex);\r\n    } catch (error) {\r\n      console.log(\"Error in export grid to excel:\", error);\r\n    }\r\n  };\r\n\r\n  const terminalPopOver = (terminalCodes) => {\r\n    if (terminalCodes.split(\",\").length > props.terminalsToShow) {\r\n      return (\r\n        <Popup\r\n          className=\"popup-theme-wrap\"\r\n          on=\"hover\"\r\n          element={terminalCodes.split(\",\").length}\r\n        >\r\n          <Card>\r\n            <Card.Content>{terminalCodes}</Card.Content>\r\n          </Card>\r\n        </Popup>\r\n      );\r\n    } else {\r\n      return terminalCodes;\r\n    }\r\n  };\r\n\r\n  const displayValues = (value, columnDetail) => {\r\n    if (columnDetail !== undefined && columnDetail !== null) {\r\n      if (typeof value === \"boolean\" || columnDetail.Name === \"Active\") {\r\n        if (value) return <Icon name=\"check\" size=\"small\" color=\"green\" />;\r\n        else return <Icon name=\"close\" size=\"small\" color=\"red\" />;\r\n      } else if (value === \"\" || value === null || value === undefined) {\r\n        return value;\r\n      } else if (\r\n        (columnDetail.Name === \"TerminalCodes\" ||\r\n          columnDetail.PopOver === \"1\") &&\r\n        value !== null\r\n      ) {\r\n        return terminalPopOver(value);\r\n      }\r\n      // var columnType = columnDetails.find(function (detail) {\r\n      //   if (detail.Name === field) {\r\n      //     return detail;\r\n      //   }\r\n      // });\r\n      else if (\r\n        columnDetail.DataType !== undefined &&\r\n        columnDetail.DataType === \"DateTime\"\r\n      ) {\r\n        return (\r\n          new Date(value).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(value).toLocaleTimeString()\r\n        );\r\n      } else if (\r\n        columnDetail.DataType !== undefined &&\r\n        columnDetail.DataType === \"Date\"\r\n      ) {\r\n        return new Date(value).toLocaleDateString();\r\n      } else if (\r\n        columnDetail.DataType !== undefined &&\r\n        columnDetail.DataType === \"Time\"\r\n      ) {\r\n        return new Date(value).toLocaleTimeString();\r\n      }\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  //Initialize Column Picker\r\n  const initializedPicker = (picker) => {\r\n    if (props.columnPickerRequired) {\r\n      colPicker.current = picker;\r\n    }\r\n  };\r\n\r\n  // Column Picker Handler\r\n  const colPickerClickHandler = (event) => {\r\n    try {\r\n      let host = colPicker.current.hostElement;\r\n      if (!host.offsetHeight) {\r\n        showPopup(host, event.target, PopupPosition.Below, true, false);\r\n        colPicker.current.focus();\r\n      } else {\r\n        hidePopup(host, true, true);\r\n        flex.focus();\r\n      }\r\n\r\n      colPicker.current.focus();\r\n      event.preventDefault();\r\n    } catch (error) {\r\n      console.log(\"Error in Column Picker click event:\", error);\r\n    }\r\n  };\r\n\r\n  const saveGridState = () => {\r\n    try {\r\n      if (flex && gridFilter.current) {\r\n        // grid column, filter, sort and grouping settings\r\n        let gridState = {\r\n          columns: flex.columns.map((col) => {\r\n            return {\r\n              binding: col.binding,\r\n              visible: col.visible,\r\n            };\r\n          }),\r\n          filterDefinition: gridFilter.current.control.filterDefinition,\r\n          sortDescriptions: flex.collectionView.sortDescriptions.map(\r\n            (sortDesc) => {\r\n              return {\r\n                property: sortDesc.property,\r\n                ascending: sortDesc.ascending,\r\n              };\r\n            }\r\n          ),\r\n          groupDescriptions: flex.collectionView.groupDescriptions.map(\r\n            (group) => {\r\n              if (group.propertyName) {\r\n                return group.propertyName;\r\n              }\r\n\r\n              return null;\r\n            }\r\n          ),\r\n        };\r\n\r\n        // add class to grouped checkbox div element\r\n        if (\r\n          flex.collectionView.groupDescriptions &&\r\n          flex.collectionView.groupDescriptions.length > 0\r\n        ) {\r\n          let groupedCheckboxes = [\r\n            ...document.getElementsByClassName(\"wj-column-selector-group\"),\r\n          ];\r\n          groupedCheckboxes.forEach((chkbx) => {\r\n            chkbx.parentNode.parentNode.classList.add(\"wj-grouped-checkbox\");\r\n          });\r\n        }\r\n\r\n        // grid paging and search settings\r\n        let sessionState = {\r\n          pageIndex: flex.collectionView.pageIndex,\r\n          searchText: theSearch.current.control.text,\r\n        };\r\n\r\n        localStorage.setItem(\r\n          props.parentComponent + \"GridState\",\r\n          JSON.stringify(gridState)\r\n        );\r\n        sessionStorage.setItem(\r\n          props.parentComponent + \"GridState\",\r\n          JSON.stringify(sessionState)\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in saving grid state\");\r\n    }\r\n  };\r\n\r\n  // customize grid filter text and dropdowns\r\n  const customizeFilterConditions = () => {\r\n    // localize the FlexGrid filter\r\n    let filter = wjCore.culture.FlexGridFilter,\r\n      operator = Operator;\r\n    wjCore.culture.FlexGridFilter.header = translator(\"WijmoGridFilterHeader\");\r\n    wjCore.culture.FlexGridFilter.ascending =\r\n      \"\\u2191 \" + translator(\"WijmoGridFilterAscending\");\r\n    wjCore.culture.FlexGridFilter.descending =\r\n      \"\\u2193 \" + translator(\"WijmoGridFilterDescending\");\r\n    wjCore.culture.FlexGridFilter.apply = translator(\"RoleAdminEdit_Apply\");\r\n    wjCore.culture.FlexGridFilter.clear = translator(\"OrderCreate_btnClear\");\r\n    wjCore.culture.FlexGridFilter.conditions = translator(\r\n      \"WijmoGridFilterCondition\"\r\n    );\r\n    wjCore.culture.FlexGridFilter.values = translator(\"WijmoGridFilterValue\");\r\n    wjCore.culture.FlexGridFilter.search = translator(\r\n      \"LoadingDetailsView_SearchGrid\"\r\n    );\r\n    wjCore.culture.FlexGridFilter.selectAll = translator(\r\n      \"WijmoGridFilterSelectAll\"\r\n    );\r\n    wjCore.culture.FlexGridFilter.and = translator(\"WijmoGridFilterAnd\");\r\n    wjCore.culture.FlexGridFilter.or = translator(\"WijmoGridFilterOr\");\r\n    wjCore.culture.FlexGridFilter.cancel = translator(\"AccessCardInfo_Cancel\");\r\n    // wjCore.culture.FlexGridFilter.null = 'test';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.and = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.asc = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.dialog = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.dsc = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.edit = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.op1 = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.op2 = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.or = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.search = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.val1 = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.val2 = '';\r\n\r\n    // localize FlexGrid filter operators\r\n    filter.stringOperators = [\r\n      { name: translator(\"WijmoGridFilterUnset\"), op: null },\r\n      { name: translator(\"WijmoGridFilterEqual\"), op: operator.EQ },\r\n      { name: translator(\"WijmoGridFilterNotEqual\"), op: operator.NE },\r\n      { name: translator(\"WijmoGridFilterBeginsWith\"), op: operator.BW },\r\n      { name: translator(\"WijmoGridFilterEndsWith\"), op: operator.EW },\r\n      { name: translator(\"WijmoGridFilterContains\"), op: operator.CT },\r\n      { name: translator(\"WijmoGridFilterDoesNotContain\"), op: operator.NC },\r\n    ];\r\n    filter.numberOperators = [\r\n      { name: translator(\"WijmoGridFilterUnset\"), op: null },\r\n      { name: translator(\"WijmoGridFilterEqual\"), op: operator.EQ },\r\n      { name: translator(\"WijmoGridFilterNotEqual\"), op: operator.NE },\r\n      { name: translator(\"WijmoGridFilterGreaterThan\"), op: operator.GT },\r\n      { name: translator(\"WijmoGridFilterLessThan\"), op: operator.LT },\r\n      {\r\n        name: translator(\"WijmoGridFilterGreaterThanOrEqual\"),\r\n        op: operator.GE,\r\n      },\r\n      { name: translator(\"WijmoGridFilterLessThanOrEqual\"), op: operator.LE },\r\n    ];\r\n    filter.dateOperators = [\r\n      { name: translator(\"WijmoGridFilterUnset\"), op: null },\r\n      { name: translator(\"WijmoGridFilterEqual\"), op: operator.EQ },\r\n      { name: translator(\"WijmoGridFilterDateEarlierThan\"), op: operator.LT },\r\n      { name: translator(\"WijmoGridFilterDateLaterThan\"), op: operator.GT },\r\n    ];\r\n    filter.booleanOperators = [\r\n      { name: translator(\"WijmoGridFilterUnset\"), op: null },\r\n      { name: translator(\"WijmoGridFilterEqual\"), op: operator.EQ },\r\n      { name: translator(\"WijmoGridFilterNotEqual\"), op: operator.NE },\r\n    ];\r\n  };\r\n\r\n  // set column width based on screen size\r\n  const getWidth = (columnDetails) => {\r\n    try {\r\n      const screenWidth = window.screen.width;\r\n      if (screenWidth < 1024) {\r\n        if (columnDetails.WidthPx && columnDetails.WidthPx !== \"\")\r\n          return parseInt(columnDetails.WidthPx);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in width:\", error);\r\n    }\r\n\r\n    return columnDetails.WidthPercentage.includes(\"*\")\r\n      ? columnDetails.WidthPercentage\r\n      : parseInt(columnDetails.WidthPercentage);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pl-1\">\r\n      <ErrorBoundary>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <React.Fragment>\r\n              <div className=\"row pl-0\">\r\n                <div className=\"col-10 col-sm-12 col-md-5 col-lg-6\">\r\n                  <FlexGridSearch\r\n                    class=\"ui single-input\"\r\n                    ref={theSearch}\r\n                    placeholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                  />\r\n                </div>\r\n                <div className=\"col-10 col-sm-12 col-md-7 col-lg-6\">\r\n                  <div style={{ float: \"right\" }}>\r\n                    {props.columnPickerRequired ? (\r\n                      <Button\r\n                        id=\"colPicker\"\r\n                        actionType=\"button\"\r\n                        type=\"primary\"\r\n                        onClick={(event) => colPickerClickHandler(event)}\r\n                      >\r\n                        <div style={{ display: \"inline-block\" }}>\r\n                          {t(\"WijmoGridColumnPicker\")}\r\n                        </div>\r\n                        <div style={{ display: \"inline-block\" }}>\r\n                          <Icon\r\n                            name=\"caret-down\"\r\n                            className=\"btnIcon\"\r\n                            size=\"small\"\r\n                          />\r\n                        </div>\r\n                      </Button>\r\n                    ) : null}\r\n                    {props.exportRequired ? (\r\n                      <Button\r\n                        actionType=\"button\"\r\n                        type=\"primary\"\r\n                        className=\"mt-3 mt-md-0\"\r\n                        onClick={exportExcel}\r\n                      >\r\n                        <div style={{ display: \"inline-block\" }}>\r\n                          {t(\"WijmoGridExport\")}\r\n                        </div>\r\n                        <div\r\n                          style={{\r\n                            display: \"inline-block\",\r\n                            marginLeft: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <span\r\n                            className=\"icon-Xls\"\r\n                            style={{\r\n                              fontSize: \"17px\",\r\n                              position: \"absolute\",\r\n                              top: \"3px\",\r\n                            }}\r\n                          ></span>\r\n                        </div>\r\n                      </Button>\r\n                    ) : null}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"tableScroll\">\r\n                {props.columnGroupingRequired ? (\r\n                  <GroupPanel\r\n                    className=\"group-panel\"\r\n                    grid={flex}\r\n                    placeholder={t(\"WijmoGridGroupPanelPlaceholder\")}\r\n                  />\r\n                ) : null}\r\n                <ErrorBoundary>\r\n                  <FlexGrid\r\n                    ref={theGrid}\r\n                    autoGenerateColumns={false}\r\n                    alternatingRowStep={0}\r\n                    autoRowHeights={true}\r\n                    headersVisibility=\"Column\"\r\n                    itemsSource={data}\r\n                    selectionMode={wjCore.asEnum(\"None\", wjGrid.SelectionMode)}\r\n                    initialized={gridInitialized}\r\n                    virtualizationThreshold={[0, 10000]}\r\n                    onUpdatedView={saveGridState}\r\n                  >\r\n                    <FlexGridFilter ref={gridFilter} />\r\n                    {props.columns.map((column) => {\r\n                      return (\r\n                        <FlexGridColumn\r\n                          header={t(column.Name)}\r\n                          key={column.Name}\r\n                          binding={column.Name}\r\n                          width={getWidth(column)}\r\n                          minWidth={100}\r\n                          isReadOnly={true}\r\n                          wordWrap={true}\r\n                          align=\"left\"\r\n                        >\r\n                          <FlexGridCellTemplate\r\n                            cellType=\"Cell\"\r\n                            template={(context) => {\r\n                              return (\r\n                                <span\r\n                                  style={\r\n                                    props.conditionalRowStyleCheck == null ||\r\n                                    !props.conditionalRowStyleCheck(\r\n                                      context.item\r\n                                    )\r\n                                      ? null\r\n                                      : { ...props.conditionalRowStyles }\r\n                                  }\r\n                                >\r\n                                  {displayValues(\r\n                                    context.item[column.Name],\r\n                                    column\r\n                                  )}\r\n                                </span>\r\n                              );\r\n                            }}\r\n                          />\r\n                        </FlexGridColumn>\r\n                      );\r\n                    })}\r\n                  </FlexGrid>\r\n                </ErrorBoundary>\r\n                {props.columnPickerRequired ? (\r\n                  <div className=\"column-picker-div\">\r\n                    <ListBox\r\n                      className=\"column-picker\"\r\n                      initialized={(picker) => initializedPicker(picker)}\r\n                    />\r\n                  </div>\r\n                ) : null}\r\n              </div>\r\n              <div className=\"row\">\r\n                <CollectionViewNavigator\r\n                  ref={pagingComponent}\r\n                  className=\"ml-auto mr-auto mt-3\"\r\n                  headerFormat={t(\"WijmoGridPagingTemplate\")}\r\n                  byPage={true}\r\n                  cv={data}\r\n                />\r\n              </div>\r\n            </React.Fragment>\r\n          )}\r\n        </TranslationConsumer>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n};\r\n\r\nWijmoGrid.propTypes = {\r\n  sourceData: PropTypes.array.isRequired,\r\n  columns: PropTypes.array.isRequired,\r\n  exportRequired: PropTypes.bool.isRequired,\r\n  exportFileName: PropTypes.string,\r\n  selectionRequired: PropTypes.bool,\r\n  columnPickerRequired: PropTypes.bool,\r\n  columnGroupingRequired: PropTypes.bool,\r\n  conditionalRowStyleCheck: PropTypes.func,\r\n  conditionalRowStyles: PropTypes.object,\r\n  rowsPerPage: PropTypes.number,\r\n  onSelectionHandle: PropTypes.func,\r\n  parentComponent: PropTypes.string.isRequired,\r\n  onRowClick: PropTypes.func,\r\n  terminalsToShow: PropTypes.number,\r\n  singleSelection: PropTypes.bool,\r\n  selectedItems: PropTypes.array,\r\n};\r\n\r\nWijmoGrid.defaultProps = {\r\n  sourceData: [],\r\n  columns: [],\r\n  exportRequired: true,\r\n  exportFileName: \"Grid.xlsx\",\r\n  selectionRequired: false,\r\n  columnPickerRequired: false,\r\n  columnGroupingRequired: false,\r\n  rowsPerPage: 10,\r\n  terminalsToShow: 2,\r\n  singleSelection: false,\r\n  selectedItems: [],\r\n};\r\n\r\nexport default WijmoGrid;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WijmoGrid from '../../UIBase/Common/WijmoGrid';\r\n\r\nconst WijmoGridComposite = (props) => {\r\n    return (\r\n        <WijmoGrid\r\n            sourceData={props.data}\r\n            columns={props.columns}\r\n            exportRequired={props.exportRequired}\r\n            exportFileName={props.exportFileName}\r\n            columnPickerRequired={props.columnPickerRequired}\r\n            selectionRequired={props.selectionRequired}\r\n            columnGroupingRequired={props.columnGroupingRequired}\r\n            conditionalRowStyleCheck={props.conditionalRowStyleCheck}\r\n            conditionalRowStyles={props.conditionalRowStyles}\r\n            rowsPerPage={props.rowsPerPage}\r\n            onSelectionHandle={props.onSelectionHandle}\r\n            onRowClick={props.onRowClick}\r\n            parentComponent={props.parentComponent}\r\n            terminalsToShow={props.terminalsToShow}\r\n            singleSelection={props.singleSelection}\r\n            selectedItems={props.selectedItems}\r\n        />\r\n    )\r\n}\r\n\r\nWijmoGridComposite.propTypes = {\r\n    data: PropTypes.array.isRequired,\r\n    columns: PropTypes.array.isRequired,\r\n    exportRequired: PropTypes.bool.isRequired,\r\n    exportFileName: PropTypes.string,\r\n    selectionRequired: PropTypes.bool,\r\n    columnPickerRequired: PropTypes.bool,\r\n    columnGroupingRequired: PropTypes.bool,\r\n    conditionalRowStyleCheck: PropTypes.func,\r\n    conditionalRowStyles: PropTypes.object,\r\n    rowsPerPage: PropTypes.number,\r\n    onSelectionHandle: PropTypes.func,\r\n    parentComponent: PropTypes.string.isRequired,\r\n    onRowClick: PropTypes.func,\r\n    terminalsToShow: PropTypes.number,\r\n    singleSelection: PropTypes.bool,\r\n    selectedItems: PropTypes.array\r\n}\r\n\r\nexport default WijmoGridComposite;","import React from 'react';\r\nimport { Select, Input, Button, Icon, Accordion } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\n\r\nProcessConfigDetails.propTypes = {\r\n    processConfig: PropTypes.object.isRequired,\r\n    modProcessConfig: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    onActiveStatusChange: PropTypes.func.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        workFlowTypeOptions: PropTypes.array,\r\n        deviceTypeOptions: PropTypes.array,\r\n        deviceCodeOptions: PropTypes.array,\r\n        availableDevices: PropTypes.array,\r\n        associatedDevices: PropTypes.array,\r\n        selectedAvailableDevices: PropTypes.array,\r\n        selectedAssociatedDevices: PropTypes.array,\r\n    }),\r\n    pageSize: PropTypes.number,\r\n    onAvailableDeviceSelection: PropTypes.func.isRequired,\r\n    onAssociatedDeviceSelection: PropTypes.func.isRequired,\r\n    onDeviceAssociation: PropTypes.func.isRequired,\r\n    onDeviceDisassociation: PropTypes.func.isRequired,\r\n    modAttributeMetaDataList: PropTypes.array.isRequired,\r\n    attributeValidationErrors: PropTypes.array.isRequired,\r\n    onAttributeDataChange: PropTypes.func.isRequired,\r\n    isMultidrop: PropTypes.bool\r\n}\r\n\r\nProcessConfigDetails.defaultProps = {\r\n    listOptions: {\r\n        workFlowTypeOptions: [],\r\n        deviceTypeOptions: [],\r\n        deviceCodeOptions: [],\r\n        availableDevices: [],\r\n        associatedDevices: [],\r\n        selectedAvailableDevices: [],\r\n        selectedAssociatedDevices: []\r\n    }\r\n}\r\n\r\nexport function ProcessConfigDetails({\r\n    processConfig,\r\n    modProcessConfig,\r\n    validationErrors,\r\n    onFieldChange,\r\n    onActiveStatusChange,\r\n    listOptions,\r\n    pageSize,\r\n    onAvailableDeviceSelection,\r\n    onAssociatedDeviceSelection,\r\n    onDeviceAssociation,\r\n    onDeviceDisassociation,\r\n    modAttributeMetaDataList,\r\n    attributeValidationErrors,\r\n    onAttributeDataChange,\r\n    isMultidrop\r\n}) {\r\n    const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n        let attributeValidation = [];\r\n        attributeValidation = attributeValidationErrors.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n        })\r\n        return attributeValidation.attributeValidationErrors;\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modProcessConfig.ProcessName}\r\n                                indicator=\"required\"\r\n                                disabled={processConfig.ProcessName !== \"\"}\r\n                                onChange={(data) => onFieldChange(\"ProcessName\", data)}\r\n                                label={t(\"ProcessConfig_ProcessName\")}\r\n                                error={t(validationErrors.ProcessName)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                value={modProcessConfig.WorkFlowType}\r\n                                label={t(\"ExeConfiguration_WorkFlow\")}\r\n                                indicator=\"required\"\r\n                                options={listOptions.workFlowTypeOptions}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"WorkFlowType\", data);\r\n                                }}\r\n                                error={t(validationErrors.WorkFlowType)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                value={modProcessConfig.PrimaryDeviceType}\r\n                                label={t(\"ProcessConfig_DeviceType\")}\r\n                                indicator=\"required\"\r\n                                options={listOptions.deviceTypeOptions}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"PrimaryDeviceType\", data);\r\n                                }}\r\n                                error={t(validationErrors.PrimaryDeviceType)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                value={modProcessConfig.PrimaryDeviceCode}\r\n                                label={t(\"ProcessConfig_PrimaryDeviceCode\")}\r\n                                indicator=\"required\"\r\n                                options={listOptions.deviceCodeOptions}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"PrimaryDeviceCode\", data);\r\n                                }}\r\n                                error={t(validationErrors.PrimaryDeviceCode)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"ProcessConfig_Status\")}\r\n                                value={modProcessConfig.Active}\r\n                                options={[\r\n                                    { text: t(\"PipeLineHeaderInfo_Active\"), value: true },\r\n                                    { text: t(\"PipeLineHeaderInfo_Inactive\"), value: false },\r\n                                ]}\r\n                                onChange={(data) => onActiveStatusChange(data)}\r\n                                error={t(validationErrors.Active)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modProcessConfig.Remarks}\r\n                                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                                label={t(\"ProcessConfig_Remarks\")}\r\n                                error={t(validationErrors.Remarks)}\r\n                                indicator={modProcessConfig.Active !== processConfig.Active ? \"required\" : \"\"}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-5 col-lg-5\">\r\n                            <h4>{t(\"ProcessConfig_AvlDevices\")}</h4>\r\n                            <div className=\"detailsTable\">\r\n                                <DataTable\r\n                                    data={listOptions.availableDevices}\r\n                                    search={true}\r\n                                    selectionMode=\"multiple\"\r\n                                    selection={listOptions.selectedAvailableDevices}\r\n                                    onSelectionChange={onAvailableDeviceSelection}\r\n                                    rows={pageSize}\r\n                                    searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"DeviceCode\"\r\n                                        field=\"DeviceCode\"\r\n                                        header={t(\"ProcessConfig_BCU\")}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"ChannelCode\"\r\n                                        field=\"ChannelCode\"\r\n                                        header={t(\"ProcessConfig_Channel\")}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    {Array.isArray(listOptions.availableDevices) &&\r\n                                        listOptions.availableDevices.length > pageSize ? (\r\n                                        <DataTable.Pagination />) : (\"\")}\r\n                                </DataTable>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-12 col-md-2 col-lg-2\">\r\n                            <br></br><br></br>\r\n                            <div style={{ textAlign: \"center\" }}>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    icon={<Icon name=\"caret-right\" root=\"common\" />}\r\n                                    content=\"\"\r\n                                    iconPosition=\"right\"\r\n                                    onClick={onDeviceAssociation}\r\n                                    disabled={listOptions.availableDevices.length > 0 ? false : true}\r\n                                /><br></br><br></br>\r\n\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    icon={<Icon name=\"caret-left\" root=\"common\" />}\r\n                                    content=\"\"\r\n                                    iconPosition=\"right\"\r\n                                    onClick={onDeviceDisassociation}\r\n                                    disabled={listOptions.associatedDevices.length > 0 ? false : true}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-12 col-md-5 col-lg-5\">\r\n                            <h4>{t(\"ProcessConfig_AssociatedDevices\")}</h4>\r\n                            <div className=\"detailsTable\">\r\n                                <DataTable\r\n                                    data={listOptions.associatedDevices}\r\n                                    search={true}\r\n                                    selectionMode=\"multiple\"\r\n                                    selection={listOptions.selectedAssociatedDevices}\r\n                                    onSelectionChange={onAssociatedDeviceSelection}\r\n                                    rows={pageSize}\r\n                                    searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"DeviceCode\"\r\n                                        field=\"DeviceCode\"\r\n                                        header={t(\"ProcessConfig_BCU\")}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"ChannelCode\"\r\n                                        field=\"ChannelCode\"\r\n                                        header={t(\"ProcessConfig_Channel\")}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    {Array.isArray(listOptions.associatedDevices) &&\r\n                                        listOptions.associatedDevices.length > pageSize ? (\r\n                                        <DataTable.Pagination />) : (\"\")}\r\n                                </DataTable>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    {\r\n                        modAttributeMetaDataList.length > 0 ?\r\n                            modAttributeMetaDataList.map((attribute) =>\r\n                                <ErrorBoundary>\r\n                                    <Accordion >\r\n                                        <Accordion.Content\r\n                                            className=\"attributeAccordian\"\r\n                                            title={(t(\"Attributes_Header\"))}\r\n                                        >\r\n                                            <AttributeDetails\r\n                                                selectedAttributeList={attribute.attributeMetaDataList}\r\n                                                handleCellDataEdit={onAttributeDataChange}\r\n                                                attributeValidationErrors={handleValidationErrorFilter(attributeValidationErrors, attribute.TerminalCode)}\r\n                                            ></AttributeDetails>\r\n                                        </Accordion.Content>\r\n                                    </Accordion>\r\n                                </ErrorBoundary>\r\n                            ) : null\r\n                    }\r\n\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { ProcessConfigDetails } from \"../../UIBase/Details/ProcessConfigDetails\";\r\nimport { emptyProcessConfigInfo } from \"../../../JS/DefaultEntities\";\r\nimport { processConfigValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport PropTypes from \"prop-types\";\r\nimport lodash from \"lodash\";\r\nimport { functionGroups, fnProcessConfiguration } from \"../../../JS/FunctionGroups\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { processConfigAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass ProcessConfigDetailsComposite extends Component {\r\n  state = {\r\n    processConfig: lodash.cloneDeep(emptyProcessConfigInfo),\r\n    modProcessConfig: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      processConfigValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    saveEnabled: false,\r\n    workFlowTypeOptions: [],\r\n    deviceTypeOptions: [],\r\n    deviceCodeOptions: [],\r\n    availableDevices: [],\r\n    associatedDevices: [],\r\n    selectedAvailableDevices: [],\r\n    selectedAssociatedDevices: [],\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    isMultidrop: false,\r\n    tempProcessConfig: {},\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getAttributes(this.props.selectedRow);\r\n      this.getWorkFlowType();\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.processConfig.ProcessName !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getAttributes(nextProps.selectedRow);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getProcessConfig(processConfigRow) {\r\n    if (processConfigRow.ProcessConfig_ProcessName === undefined) {\r\n      this.setState({\r\n        processConfig: lodash.cloneDeep(emptyProcessConfigInfo),\r\n        modProcessConfig: lodash.cloneDeep(emptyProcessConfigInfo),\r\n        isReadyToRender: true,\r\n        saveEnabled: Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          fnProcessConfiguration\r\n        ),\r\n        availableDevices: [],\r\n        associatedDevices: [],\r\n        selectedAvailableDevices: [],\r\n        selectedAssociatedDevices: [],\r\n        modAttributeMetaDataList: [],\r\n      }, () => {\r\n        this.localNodeAttribute();\r\n      })\r\n      return;\r\n    }\r\n\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.ProcessName,\r\n        value: processConfigRow.ProcessConfig_ProcessName,\r\n      }];\r\n    var obj = {\r\n      keyDataCode: KeyCodes.ProcessName,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetProcessConfiguration,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          result.EntityResult.PrimaryDeviceType = Object.keys(Constants.deviceTypeCode).find(\r\n            (key) => Constants.deviceTypeCode[key] === result.EntityResult.PrimaryDeviceType\r\n          );\r\n          this.setState(\r\n            {\r\n              isReadyToRender: true,\r\n              processConfig: lodash.cloneDeep(result.EntityResult),\r\n              modProcessConfig: lodash.cloneDeep(result.EntityResult),\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnProcessConfiguration\r\n              )\r\n            }, () => {\r\n              this.getProcessConfigDeviceType(result.EntityResult.WorkFlowType);\r\n              this.getProcessConfigDeviceCodes(result.EntityResult.WorkFlowType, result.EntityResult.PrimaryDeviceType);\r\n              this.getMultiDropDevices(result.EntityResult.PrimaryDeviceType, result.EntityResult.PrimaryDeviceCode);\r\n              this.localNodeAttribute();\r\n            });\r\n        } else {\r\n          this.setState({\r\n            processConfig: lodash.cloneDeep(emptyProcessConfigInfo),\r\n            modProcessConfig: lodash.cloneDeep(emptyProcessConfigInfo),\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in getProcessConfig:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getProcessConfig:\", error, processConfigRow);\r\n      });\r\n  }\r\n\r\n  getAttributes(processConfigRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [processConfigAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(\r\n                result.EntityResult.PROCESSCONFIG\r\n              ),\r\n            },\r\n            () => this.getProcessConfig(processConfigRow)\r\n          );\r\n        } else {\r\n          console.log(\"Error in getAttributes:\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (Array.isArray(attributeMetaDataList.PROCESSCONFIG) && attributeMetaDataList.PROCESSCONFIG.length > 0) {\r\n        this.terminalSelectionChange([\r\n          attributeMetaDataList.PROCESSCONFIG[0].TerminalCode,\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on localNodeAttribute\", error);\r\n    }\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var modAttributeMetaDataList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.attributeMetaDataList\r\n        );\r\n        modAttributeMetaDataList = lodash.cloneDeep(\r\n          this.state.modAttributeMetaDataList\r\n        );\r\n        const attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        var modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.PROCESSCONFIG.forEach(function (\r\n              attributeMetaData\r\n            ) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                if (modProcessConfig.Attributes !== null) {\r\n                  var Attributevalue = modProcessConfig.Attributes.find(\r\n                    (baseproductAttribute) => {\r\n                      return baseproductAttribute.TerminalCode === terminal;\r\n                    }\r\n                  );\r\n                }\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                      (x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      }\r\n                    );\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        modAttributeMetaDataList = [];\r\n        modAttributeMetaDataList = attributesTerminalsList;\r\n        modAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n          modAttributeMetaDataList\r\n        );\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getWorkFlowType() {\r\n    axios(\r\n      RestAPIs.GetWorkflowTypes,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let workFlowTypeOptions = [];\r\n          if (result.EntityResult !== null && result.EntityResult.Table !== null && Array.isArray(result.EntityResult.Table)) {\r\n            result.EntityResult.Table.forEach((element) => {\r\n              workFlowTypeOptions.push({\r\n                text: element.WorkflowCode,\r\n                value: element.WorkflowCode,\r\n              });\r\n            });\r\n            this.setState({ workFlowTypeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getWorkFlowType:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getWorkFlowType:\", error);\r\n      });\r\n  }\r\n\r\n  getProcessConfigDeviceType(workFlowType) {\r\n    axios(\r\n      RestAPIs.GetProcessConfigDeviceType +\r\n      \"?workflowTypeCode=\" + workFlowType,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let deviceTypeOptions = [];\r\n          if (result.EntityResult !== null && result.EntityResult.Table !== null && Array.isArray(result.EntityResult.Table)) {\r\n            result.EntityResult.Table.forEach((element) => {\r\n              deviceTypeOptions.push({\r\n                text: element.Code,\r\n                value: element.Code,\r\n              });\r\n            });\r\n            this.setState({ deviceTypeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getProcessConfigDeviceType:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getProcessConfigDeviceType:\", error);\r\n      });\r\n  }\r\n\r\n  getProcessConfigDeviceCodes(workFlowType, deviceType) {\r\n    axios(\r\n      RestAPIs.GetProcessConfigDeviceCodes +\r\n      \"?workflowType=\" + workFlowType + \"&deviceType=\" + deviceType,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null && Array.isArray(result.EntityResult)) {\r\n            let deviceCodeOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ deviceCodeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getProcessConfigDeviceCodes:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getProcessConfigDeviceCodes:\", error);\r\n      });\r\n  }\r\n\r\n  getMultiDropDevices(deviceType, deviceCode) {\r\n    const modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n    const processConfig = lodash.cloneDeep(this.state.processConfig);\r\n    axios(\r\n      RestAPIs.GetMultiDropDevices +\r\n      \"?deviceType=\" + deviceType + \"&deviceCode=\" + deviceCode,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let availableDevices = [];\r\n          let associatedDevices = [];\r\n          var isMultidrop = false;\r\n          if (result.EntityResult !== null) {\r\n            if((this.state.modProcessConfig.WorkFlowType === \"EntryGate\"\r\n              || this.state.modProcessConfig.WorkFlowType === \"ExitGate\")\r\n              && deviceType === \"CARD_READER\") {\r\n               availableDevices = result.EntityResult.Table1;\r\n              associatedDevices = [];\r\n              }\r\n            else if (processConfig.ProcessName !== \"\" && result.EntityResult.Table2[0].IsMultiDrop === \"1\"){\r\n              let AllDevices = result.EntityResult.Table;\r\n              AllDevices.forEach((obj) => {\r\n                let matchedDevices = modProcessConfig.AssociatedDevices.filter((modDevice) => { return (modDevice.DeviceCode === obj.DeviceCode); });\r\n                if (matchedDevices.length > 0) {\r\n                  associatedDevices.push(obj);\r\n                }\r\n                else {\r\n                  availableDevices.push(obj);\r\n                }\r\n              })\r\n            }\r\n            else {\r\n               availableDevices = result.EntityResult.Table1;\r\n                associatedDevices = result.EntityResult.Table;\r\n            }\r\n             isMultidrop = result.EntityResult.Table2[0].IsMultiDrop === \"1\" ? true : false;\r\n            this.setState({ availableDevices, associatedDevices, isMultidrop });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getMultiDropDevices:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getMultiDropDevices:\", error);\r\n      });\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n      modProcessConfig[propertyName] = data;\r\n      this.setState({ modProcessConfig }, () => {\r\n        if (propertyName === \"WorkFlowType\") {\r\n          this.handleWorkFlowTypeChange(data);\r\n        }\r\n        else if (propertyName === \"PrimaryDeviceType\") {\r\n          this.handePrimaryDeviceTypeChanges(modProcessConfig.WorkFlowType, data);\r\n        }\r\n        else if (propertyName === \"PrimaryDeviceCode\") {\r\n          this.getMultiDropDevices(modProcessConfig.PrimaryDeviceType, data);\r\n        }\r\n      });\r\n\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (processConfigValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          processConfigValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleWorkFlowTypeChange(workFlowType) {\r\n    try {\r\n      const modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n      modProcessConfig[\"PrimaryDeviceType\"] = \"\";\r\n      modProcessConfig[\"PrimaryDeviceCode\"] = \"\";\r\n      this.setState({ modProcessConfig, deviceCodeOptions: [], availableDevices: [], associatedDevices: [] });\r\n      this.getProcessConfigDeviceType(workFlowType);\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handleWorkFlowTypeChange\", error);\r\n    }\r\n  }\r\n\r\n  handePrimaryDeviceTypeChanges(workFlowType, deviceType) {\r\n    try {\r\n      const modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n      modProcessConfig[\"PrimaryDeviceCode\"] = \"\";\r\n      this.setState({ modProcessConfig, availableDevices: [], associatedDevices: [] });\r\n      this.getProcessConfigDeviceCodes(workFlowType, deviceType,);\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handePrimaryDeviceTypeChanges\", error);\r\n    }\r\n  }\r\n\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n      modProcessConfig.Active = value;\r\n      if (modProcessConfig.Active !== this.state.processConfig.Active)\r\n        modProcessConfig.Remarks = \"\";\r\n      this.setState({ modProcessConfig });\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handleActiveStatusChange\", error);\r\n    }\r\n  };\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n      const processConfig = lodash.cloneDeep(this.state.processConfig);\r\n\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modProcessConfig: { ...processConfig },\r\n          selectedCompRow: [],\r\n          validationErrors,\r\n          availableDevices: [],\r\n          associatedDevices: [],\r\n          selectedAvailableDevices: [],\r\n          selectedAssociatedDevices: [],\r\n          modAttributeMetaDataList: [],\r\n        }, () => {\r\n          this.localNodeAttribute();\r\n          this.handleResetAttributeValidationError();\r\n        });\r\n      if (processConfig.ProcessName === \"\") {\r\n        this.setState({ deviceCodeOptions: [], deviceTypeOptions: [] })\r\n      }\r\n      else {\r\n        this.getProcessConfigDeviceType(processConfig.WorkFlowType);\r\n        this.getProcessConfigDeviceCodes(processConfig.WorkFlowType, processConfig.PrimaryDeviceType,);\r\n        this.getMultiDropDevices(processConfig.PrimaryDeviceType, processConfig.PrimaryDeviceCode);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handleReset\", error);\r\n    }\r\n  };\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(\r\n          attributeMetaDataList.PROCESSCONFIG\r\n        ),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigDetailsComposite:Error occured on handleResetAttributeValidationError\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  saveProcessConfig = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempProcessConfig = lodash.cloneDeep(this.state.tempProcessConfig);\r\n\r\n      this.state.processConfig.ProcessName === \"\"\r\n          ? this.createProcessConfig(tempProcessConfig)\r\n          : this.updateProcessConfig(tempProcessConfig);\r\n\r\n    } catch (error) {\r\n      console.log(\"SaveProcessConfig Composite : Error in saveProcessConfig\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n      \r\n      let modProcessConfig = this.fillDetails();\r\n      let attributeList = Utilities.attributesConverttoLocaleString(this.state.modAttributeMetaDataList);\r\n      if (this.validateSave(modProcessConfig, attributeList)) {\r\n        attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n        modProcessConfig.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n     \r\n\r\n        let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      let tempProcessConfig = lodash.cloneDeep(modProcessConfig);\r\n      this.setState({ showAuthenticationLayout, tempProcessConfig }, () => {\r\n        if (showAuthenticationLayout === false) {\r\n          this.saveProcessConfig();\r\n        }\r\n    });\r\n\r\n\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handleSave\", error);\r\n    }\r\n  }\r\n\r\n  fillDetails() {\r\n    try {\r\n      let modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n      let associatedDevices = lodash.cloneDeep(this.state.associatedDevices);\r\n      modProcessConfig.AssociatedDevices = [];\r\n      associatedDevices.forEach((obj) => {\r\n        var devices = {\r\n          DeviceCode: obj.DeviceCode,\r\n          DeviceType: modProcessConfig.PrimaryDeviceType\r\n        }\r\n        modProcessConfig.AssociatedDevices.push(devices);\r\n      })\r\n      return modProcessConfig;\r\n    }\r\n    catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on fillDetails\", error);\r\n    }\r\n  }\r\n\r\n  validateSave(modProcessConfig, attributeList) {\r\n    try {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      Object.keys(processConfigValidationDef).forEach(function (key) {\r\n        if (modProcessConfig[key] !== undefined)\r\n          validationErrors[key] = Utilities.validateField(\r\n            processConfigValidationDef[key],\r\n            modProcessConfig[key]\r\n          );\r\n      });\r\n\r\n      if (modProcessConfig.Active !== this.state.processConfig.Active) {\r\n        if (modProcessConfig.Remarks === null || modProcessConfig.Remarks === \"\") {\r\n          validationErrors[\"Remarks\"] = \"BaseProductInfo_EnterRemarks\";\r\n        }\r\n      }\r\n\r\n      var attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n      attributeList.forEach((attribute) => {\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n            attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n              attributeValidation.attributeValidationErrors[\r\n                attributeMetaData.Code\r\n              ] = Utilities.valiateAttributeField(\r\n                attributeMetaData,\r\n                attributeMetaData.DefaultValue\r\n              );\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      this.setState({ validationErrors, attributeValidationErrors });\r\n\r\n      var returnValue = true;\r\n      attributeValidationErrors.forEach((x) => {\r\n        if (returnValue) {\r\n          returnValue = Object.values(x.attributeValidationErrors).every(\r\n            function (value) {\r\n              return value === \"\";\r\n            }\r\n          );\r\n        } else {\r\n          return returnValue;\r\n        }\r\n      });\r\n\r\n      if (returnValue)\r\n        returnValue = Object.values(validationErrors).every(function (value) {\r\n          return value === \"\";\r\n        });\r\n\r\n      return returnValue;\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on validateSave\", error);\r\n    }\r\n  }\r\n\r\n  createProcessConfig(modProcessConfig) {\r\n    this.handleAuthenticationClose();\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.ProcessName,\r\n        value: modProcessConfig.ProcessName,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.ProcessName,\r\n      KeyCodes: keyCode,\r\n      Entity: modProcessConfig,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ExeConfiguration_AddUpdateStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ExeConfiguration_ExeName\"],\r\n          keyValues: [modProcessConfig.ProcessName],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.CreateProcessConfiguration,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnProcessConfiguration\r\n              ),\r\n            },\r\n            () => this.getProcessConfig({ ProcessConfig_ProcessName: modProcessConfig.ProcessName })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnProcessConfiguration\r\n            ),\r\n          });\r\n          console.log(\"Error in create ProcessConfig:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modProcessConfig, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnProcessConfiguration\r\n          ),\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modProcessConfig, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  updateProcessConfig(modProcessConfig) {\r\n    this.handleAuthenticationClose();\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.ProcessName,\r\n        value: modProcessConfig.ProcessName,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.ProcessName,\r\n      KeyCodes: keyCode,\r\n      Entity: modProcessConfig,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ExeConfiguration_AddUpdateStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ExeConfiguration_ExeName\"],\r\n          keyValues: [modProcessConfig.ProcessName],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateProcessConfiguration,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnProcessConfiguration\r\n              ),\r\n            },\r\n            () => this.getProcessConfig({ ProcessConfig_ProcessName: modProcessConfig.ProcessName })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnProcessConfiguration\r\n            ),\r\n          });\r\n          console.log(\"Error in update ProcessConfig:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modProcessConfig, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.modify,\r\n            fnProcessConfiguration\r\n          ),\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modProcessConfig, \"modify\", notification);\r\n      });\r\n  }\r\n\r\n  handleAvailableDeviceSelection = (e) => {\r\n    this.setState({ selectedAvailableDevices: e });\r\n  }\r\n\r\n  handleAssociatedDeviceSelection = (e) => {\r\n    this.setState({ selectedAssociatedDevices: e });\r\n  }\r\n\r\n  handleDeviceAssociation = () => {\r\n    try {\r\n      this.setState({ isReadyToRender: false }, () => {\r\n        const selectedAvailableDevices = lodash.cloneDeep(this.state.selectedAvailableDevices);\r\n        let availableDevices = lodash.cloneDeep(this.state.availableDevices);\r\n        let associatedDevices = lodash.cloneDeep(this.state.associatedDevices);\r\n        selectedAvailableDevices.forEach((obj) => {\r\n          associatedDevices.push(obj);\r\n          availableDevices = availableDevices.filter(\r\n            (com) => {\r\n              return (com.DeviceCode !== obj.DeviceCode);\r\n            });\r\n        })\r\n        this.setState({ associatedDevices, selectedAvailableDevices: [], availableDevices, isReadyToRender: true })\r\n      })\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handleDeviceAssociation\", error);\r\n    }\r\n  }\r\n\r\n  handleDeviceDisassociation = () => {\r\n    try {\r\n      this.setState({ isReadyToRender: false }, () => {\r\n        const selectedAssociatedDevices = lodash.cloneDeep(this.state.selectedAssociatedDevices);\r\n        let availableDevices = lodash.cloneDeep(this.state.availableDevices);\r\n        let associatedDevices = lodash.cloneDeep(this.state.associatedDevices);\r\n        selectedAssociatedDevices.forEach((obj) => {\r\n          availableDevices.push(obj);\r\n          associatedDevices = associatedDevices.filter(\r\n            (com) => {\r\n              return (com.DeviceCode !== obj.DeviceCode);\r\n            });\r\n        })\r\n        this.setState({ associatedDevices, selectedAssociatedDevices: [], availableDevices, isReadyToRender: true })\r\n      })\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handleDeviceAssociation\", error);\r\n    }\r\n  }\r\n\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] = Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigDetailsComposite:Error occured on handleAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  \r\n\r\n  render() {\r\n    const listOptions = {\r\n      workFlowTypeOptions: this.state.workFlowTypeOptions,\r\n      deviceTypeOptions: this.state.deviceTypeOptions,\r\n      deviceCodeOptions: this.state.deviceCodeOptions,\r\n      availableDevices: this.state.availableDevices,\r\n      associatedDevices: this.state.associatedDevices,\r\n      selectedAvailableDevices: this.state.selectedAvailableDevices,\r\n      selectedAssociatedDevices: this.state.selectedAssociatedDevices\r\n    }\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"ProcessConfig_LastUpdatedTime\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modProcessConfig.LastUpdatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modProcessConfig.LastUpdatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"ProcessConfig_CreatedTime\",\r\n        fieldValue:\r\n          new Date(this.state.modProcessConfig.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modProcessConfig.CreatedTime).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"ProcessConfig_LastActiveTime\",\r\n        fieldValue: this.state.modProcessConfig.LastActiveTime !== undefined &&\r\n          this.state.modProcessConfig.LastActiveTime !== null\r\n          ?\r\n          new Date(this.state.modProcessConfig.LastActiveTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modProcessConfig.LastActiveTime).toLocaleTimeString() : \"\",\r\n      }\r\n    ];\r\n\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.processConfig.ProcessName}\r\n            newEntityName={\"ExeConfiguration_Title\"}\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n\r\n        <ErrorBoundary>\r\n          <ProcessConfigDetails\r\n            processConfig={this.state.processConfig}\r\n            modProcessConfig={this.state.modProcessConfig}\r\n            listOptions={listOptions}\r\n            validationErrors={this.state.validationErrors}\r\n            onFieldChange={this.handleChange}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            pageSize={this.props.userDetails.EntityResult.PageAttibutes.WebPortalListPageSize}\r\n            onAvailableDeviceSelection={this.handleAvailableDeviceSelection}\r\n            onAssociatedDeviceSelection={this.handleAssociatedDeviceSelection}\r\n            onDeviceAssociation={this.handleDeviceAssociation}\r\n            onDeviceDisassociation={this.handleDeviceDisassociation}\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            onAttributeDataChange={this.handleAttributeDataChange}\r\n            isMultidrop={this.state.isMultidrop}\r\n          >\r\n          </ProcessConfigDetails>\r\n        </ErrorBoundary>\r\n\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.processConfig.ProcessName === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnProcessConfiguration}\r\n            handleOperation={this.saveProcessConfig}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProcessConfigDetailsComposite);\r\n\r\nProcessConfigDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};","import React from \"react\";\r\nimport WijmoGridComposite from \"../Common/WijmoGridComposite\";\r\n\r\nexport function ProcessConfigurationSummaryComposite({\r\n  tableData,\r\n  columnDetails,\r\n  pageSize,\r\n  exportRequired,\r\n  exportFileName,\r\n  columnPickerRequired,\r\n  columnGroupingRequired,\r\n  terminalsToShow,\r\n  selectionRequired,     \r\n  onSelectionChange,\r\n  onRowClick,\r\n  parentComponent\r\n}) {\r\n  return (\r\n    <WijmoGridComposite\r\n    data={tableData}\r\n    columns={columnDetails}\r\n    rowsPerPage={pageSize}\r\n    exportRequired={exportRequired}\r\n    exportFileName={exportFileName}\r\n    columnPickerRequired={columnPickerRequired}\r\n    columnGroupingRequired={columnGroupingRequired}\r\n    terminalsToShow={terminalsToShow}\r\n    selectionRequired={selectionRequired}\r\n    onSelectionHandle={onSelectionChange}\r\n    onRowClick={onRowClick}\r\n    parentComponent={parentComponent}\r\n    ></WijmoGridComposite>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../../../CSS/styles.css\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { functionGroups, fnProcessConfiguration } from \"../../../JS/FunctionGroups\";\r\nimport { ProcessConfigurationSummaryComposite } from \"../Summary/ProcessConfigurationSummaryComposite\";\r\nimport ProcessConfigDetailsComposite from \"../Details/ProcessConfigDetailsComposite\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass ProcessConfigComposite extends Component {\r\n  state = {\r\n    isDetails: false,\r\n    isReadyToRender: false,\r\n    isDetailsModified: false,\r\n    operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n    selectedRow: {},\r\n    selectedItems: [],\r\n    data: {},\r\n    showAuthenticationLayout: false,\r\n  };\r\n\r\n  componentName = \"ProcessConfigComponent\";\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnProcessConfiguration\r\n      );\r\n      this.setState({\r\n        operationsVisibilty,\r\n      });\r\n      this.getProcessConfigurationList();\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n      // clear session storage on window refresh event\r\n      window.addEventListener(\"beforeunload\", () => Utilities.clearSessionStorage(this.componentName + \"GridState\"));\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    Utilities.clearSessionStorage(this.componentName + \"GridState\");\r\n    window.removeEventListener(\"beforeunload\", () => Utilities.clearSessionStorage(this.componentName + \"GridState\"));\r\n  }\r\n\r\n  getProcessConfigurationList() {\r\n    axios(\r\n      RestAPIs.GetProcessConfigurationListForRole,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({ data: result.EntityResult, isReadyToRender: true });\r\n        } else {\r\n          this.setState({ data: [], isReadyToRender: true });\r\n          console.log(\"Error in getProcessConfigurationList:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ data: [], isReadyToRender: true });\r\n        console.log(\"Error while getProcessConfigurationList:\", error);\r\n      });\r\n  }\r\n\r\n   handleAdd = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete = false;\r\n      operationsVisibilty.add = false;\r\n      this.setState({\r\n        isDetails: true,\r\n        selectedRow: {},\r\n        operationsVisibilty,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigComposite:Error occured on handleAdd\",error);\r\n    }\r\n  };\r\n\r\n  handleBack = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnProcessConfiguration\r\n      );\r\n      operationsVisibilty.delete = false;\r\n      this.setState({\r\n        isDetails: false,\r\n        selectedRow: {},\r\n        selectedItems: [],\r\n        isReadyToRender: false,\r\n      });\r\n      this.getProcessConfigurationList();\r\n    } catch (error) {\r\n      console.log( \"ProcessConfigComposite:Error occured on Back click\",error);\r\n    }\r\n  };\r\n\r\n  handleRowClick = (item) => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnProcessConfiguration\r\n      );\r\n      operationsVisibilty.delete = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.remove,\r\n        fnProcessConfiguration\r\n      );\r\n      this.setState({\r\n        isDetails: true,\r\n        selectedRow: item,\r\n        selectedItems: [item],\r\n        operationsVisibilty,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigComposite:Error occured on Row click\",error);\r\n    }\r\n  };\r\n\r\n  handleSelection = (items) => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete =\r\n        items.length > 0 &&\r\n        Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.remove,\r\n          fnProcessConfiguration\r\n        );\r\n\r\n      this.setState({ selectedItems: items, operationsVisibilty });\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigComposite:Error occured on handleSelection\",error);\r\n    }\r\n  };\r\n\r\n  handleDelete = () => {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete = false;\r\n      this.setState({ operationsVisibilty });\r\n      var deleteProcessConfigKeys = [];\r\n      for (var i = 0; i < this.state.selectedItems.length; i++) {\r\n        var processName = this.state.selectedItems[i][\"ProcessConfig_ProcessName\"];\r\n        var keyData = {\r\n          KeyCodes: [\r\n            {\r\n              Key: KeyCodes.ProcessName,\r\n              Value: processName,\r\n            },\r\n          ],\r\n        };\r\n        deleteProcessConfigKeys.push(keyData);\r\n      }\r\n      axios(\r\n        RestAPIs.DeleteProcessConfiguration,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          deleteProcessConfigKeys,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          var isRefreshDataRequire = result.isSuccess;\r\n          if (\r\n            result.ResultDataList !== null &&\r\n            result.ResultDataList !== undefined\r\n          ) {\r\n            var failedResultsCount = result.ResultDataList.filter(function (\r\n              res\r\n            ) {\r\n              return !res.IsSuccess;\r\n            }).length;\r\n\r\n            if (failedResultsCount === result.ResultDataList.length) {\r\n              isRefreshDataRequire = false;\r\n            } else isRefreshDataRequire = true;\r\n          }\r\n          var notification = Utilities.convertResultsDatatoNotification(\r\n            result,\r\n            \"ExeConfiguration_DeletionStatus\",\r\n            [\"ProcessName\"]\r\n          );\r\n\r\n          if (isRefreshDataRequire) {\r\n            this.setState({ isReadyToRender: false });\r\n            this.getProcessConfigurationList();\r\n            operationsVisibilty.delete = false;\r\n            this.setState({\r\n              selectedItems: [],\r\n              operationsVisibilty,\r\n              selectedRow: {},\r\n            });\r\n          } else {\r\n            operationsVisibilty.delete = true;\r\n            this.setState({ operationsVisibilty });\r\n          }\r\n\r\n          notification.messageResultDetails.forEach((messageResult) => {\r\n            if (messageResult.keyFields.length > 0)\r\n              messageResult.keyFields[0] = \"ProcessConfig_ProcessName\";\r\n          });\r\n\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error occured while deleting:\" + error);\r\n          var { operationsVisibilty } = { ...this.state };\r\n          operationsVisibilty.delete = true;\r\n          this.setState({ operationsVisibilty });\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigComposite:Error occured on handleDelete\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  savedEvent = (data, saveType, notification) => {\r\n    try {\r\n      const operationsVisibilty = { ...this.state.operationsVisibilty };\r\n      if (notification.messageType === \"success\") {\r\n        operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnProcessConfiguration\r\n      );\r\n\t  operationsVisibilty.delete = Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.remove,\r\n          fnProcessConfiguration\r\n        );\r\n        this.setState({ isDetailsModified: true, operationsVisibilty });\r\n      }\r\n      if (notification.messageType === \"success\" && saveType === \"add\") {\r\n        var selectedItems = [\r\n          {\r\n            ProcessConfig_ProcessName: data.ProcessName,\r\n          },\r\n        ];\r\n        this.setState({ selectedItems });\r\n      }\r\n      toast(\r\n        <ErrorBoundary>\r\n          <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n        </ErrorBoundary>,\r\n        {\r\n          autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log( \"ProcessConfigComposite:Error occured on savedEvent\",error);\r\n    }\r\n  };\r\n\r\n  authenticateDelete = () => {\r\n    try {\r\n      let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      this.setState({ showAuthenticationLayout });\r\n      if (showAuthenticationLayout === false) {\r\n        this.handleDelete();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigComposite : Error in authenticateDelete\");\r\n    }\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n         <ErrorBoundary>\r\n          <TMUserActionsComposite\r\n            operationsVisibilty={this.state.operationsVisibilty}\r\n            breadcrumbItem={this.props.activeItem}\r\n            onDelete={this.authenticateDelete}\r\n            onAdd={this.handleAdd}\r\n            shrVisible={false}\r\n            handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n          ></TMUserActionsComposite>\r\n        </ErrorBoundary>\r\n        {this.state.isDetails === true ? (\r\n          <ErrorBoundary>\r\n            <ProcessConfigDetailsComposite\r\n              key=\"BaseProductDetails\"\r\n              selectedRow={this.state.selectedRow}\r\n              onBack={this.handleBack}\r\n              onSaved={this.savedEvent}\r\n              terminalCodes={this.state.terminalCodes}\r\n            ></ProcessConfigDetailsComposite>\r\n          </ErrorBoundary>\r\n        ) : this.state.isReadyToRender ? (\r\n          <div>\r\n            <ErrorBoundary>\r\n              <ProcessConfigurationSummaryComposite\r\n                tableData={this.state.data.Table}\r\n                columnDetails={this.state.data.Column}\r\n                pageSize={\r\n                  this.props.userDetails.EntityResult.PageAttibutes\r\n                    .WebPortalListPageSize\r\n                }\r\n\r\n                exportRequired={true}\r\n                exportFileName=\"ProcessConfigList\"\r\n                columnPickerRequired={true}\r\n                \r\n                terminalsToShow={\r\n                  this.props.userDetails.EntityResult.PageAttibutes\r\n                    .NoOfTerminalsToShow\r\n                }\r\n                selectionRequired={true}\r\n                columnGroupingRequired={true}\r\n                onSelectionChange={this.handleSelection}\r\n                onRowClick={this.handleRowClick}\r\n                parentComponent={this.componentName}\r\n              ></ProcessConfigurationSummaryComposite>\r\n            </ErrorBoundary>\r\n          </div>\r\n        ) : (\r\n          <LoadingPage message=\"Loading\"></LoadingPage>\r\n        )}\r\n         <ErrorBoundary>\r\n          <ToastContainer\r\n            hideProgressBar={true}\r\n            closeOnClick={false}\r\n            closeButton={true}\r\n            newestOnTop={true}\r\n            position=\"bottom-right\"\r\n            toastClassName=\"toast-notification-wrap\"\r\n          />\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={functionGroups.remove}\r\n            functionGroup={fnProcessConfiguration}\r\n            handleClose={this.handleAuthenticationClose}\r\n            handleOperation={this.handleDelete}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProcessConfigComposite);\r\n\r\nProcessConfigComposite.propTypes = {\r\n  activeItem: PropTypes.object,\r\n};","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","export const functionGroups = {\r\n  view: \"view\",\r\n  add: \"add\",\r\n  modify: \"modify\",\r\n  remove: \"remove\",\r\n};\r\nexport const fnCarrierCompany = \"carriercompany\";\r\nexport const fnDriver = \"driver\";\r\nexport const fnCustomer = \"customer\";\r\nexport const fnTrailer = \"trailer\";\r\nexport const fnOriginTerminal = \"originterminal\";\r\nexport const fnDestination = \"destination\";\r\nexport const fnPrimeMover = \"primemover\";\r\nexport const fnVehicle = \"vehicle\";\r\nexport const fnSBC = \"shipmentbycompartment\";\r\nexport const fnSBP = \"shipmentbyproduct\";\r\nexport const fnShipmentStatus = \"ViewShipmentStatus\";\r\nexport const fnVessel = \"vessel\";\r\nexport const fnOrder = \"order\";\r\nexport const fnOrderForceClose = \"OrderForceClose\";\r\n\r\nexport const fnContract = \"contract\";\r\nexport const fnTruckReceipt = \"receiptplanbycompartment\";\r\nexport const fnMarineDispatch = \"ViewMarineShipment\";\r\nexport const fnMarineShipmentByCompartment = \"MarineShipmentByCompartment\";\r\nexport const fnMarineReceipt = \"ViewMarineReceipt\";\r\nexport const fnSupplier = \"supplier\";\r\nexport const fnFinishedProduct = \"finishedproduct\";\r\nexport const fnRailDispatch = \"RailDispatch\";\r\nexport const fnRailReceipt = \"RailReceipt\";\r\nexport const fnRailRoute = \"RailRoute\";\r\nexport const fnRailWagon = \"RailWagon\"\r\n\r\nexport const fnCloseRailDispatch = \"CloseRailDispatch\";\r\nexport const fnPrintRailBOL = \"PrintRailBOL\";\r\nexport const fnPrintRailFAN = \"PrintRailFAN\";\r\nexport const fnRailDispatchLoadSpotAssignment = \"RailDispatchLoadSpotAssignment\";\r\nexport const fnRailDispatchProductAssignment = \"RailDispatchProductAssignment\";\r\nexport const fnViewRailDispatch = \"ViewRailDispatch\"\r\nexport const fnViewRailLoadingDetails = \"ViewRailLoadingDetails\"\r\n\r\nexport const fnCloseRailReceipt = \"CloseRailReceipt\";\r\nexport const fnPrintRailBOD = \"PrintRailBOD\";\r\nexport const fnPrintRailRAN = \"PrintRailRAN\";\r\nexport const fnViewRailReceipt = \"ViewRailReceipt\"\r\nexport const fnViewRailUnLoadingDetails = \"ViewRailUnLoadingDetails\"\r\n\r\nexport const fnSMSConfiguration = \"SMS\";\r\nexport const fnUnAccountedTransactionTank = \"UnAccountedTransactionTank\"\r\nexport const fnUnAccountedTransactionMeter = \"UnAccountedTransactionMeter\"\r\nexport const fnPipelineDispatch = \"PipelineDispatch\";\r\nexport const fnPipelineReceipt = \"PipelineReceipt\";\r\n\r\nexport const fnPipelineDispatchManualEntry = \"PipelineDispatchManualEntry\";\r\nexport const fnPipelineReceiptManualEntry = \"PipelineReceiptManualEntry\";\r\n\r\nexport const fnLookUpData = \"LookUpData\";\r\n\r\n\r\n\r\nexport const fnHSEInspection = \"HSEInspection\";\r\nexport const fnHSEConfiguration = \"HSEInspectionConfig\"\r\n\r\nexport const fnEmailConfiguration = \"Email\";\r\nexport const fnShareholder = \"Shareholder\";\r\nexport const fnLocation = \"LocationConfig\";\r\nexport const fnDevice = \"DeviceConfig\";\r\nexport const fnBaseProduct = \"baseproduct\";\r\nexport const fnSiteView = \"SiteView\";\r\nexport const fnLeakageManualEntry = \"LeakageManualEntry\";\r\nexport const fnTerminal = \"Terminal\";\r\nexport const fnSlotInformation = \"SlotInformation\";\r\nexport const fnTankGroup = \"TankGroup\";\r\nexport const fnTank = \"Tank\";\r\nexport const fnSealMaster = \"SealMaster\"\r\nexport const fnTankEODEntry = \"TankEODEntry\";\r\nexport const fnUnmatchedLocalTransactions = \"UnmatchedLocalTransactions\";\r\nexport const fnAccessCard = \"AccessCard\";\r\nexport const fnResetPin = \"ResetPin\";\r\nexport const fnSlotConfiguration = \"SlotConfiguration\";\r\nexport const fnUOM = \"UOM\";\r\nexport const fnPrintMarineFAN = \"PrintMarineFAN\";\r\nexport const fnPrintMarineBOL = \"PrintMarineBOL\";\r\nexport const fnViewMarineLoadingDetails = \"ViewMarineLoadingDetails\";\r\nexport const fnViewMarineShipmentAuditTrail = \"ViewMarineShipmentAuditTrail\";\r\nexport const fnCloseMarineShipment = \"CloseMarineShipment\";\r\nexport const fnIssueCard = \"IssueCard\";\r\nexport const fnActivateCard = \"ActivateCard\";\r\nexport const fnRevokeCard = \"RevokeCard\";\r\nexport const fnAutoIDAssociation = \"AutoIDAssociation\";\r\nexport const fnMarineReceiptByCompartment = \"MarineReceiptByCompartment\";\r\nexport const fnPrintMarineRAN = \"PrintMarineRAN\";\r\nexport const fnPrintMarineBOD = \"PrintMarineBOD\";\r\nexport const fnViewMarineUnloadingDetails = \"ViewMarineUnloadingDetails\";\r\nexport const fnViewMarineReceiptAuditTrail = \"ViewMarineReceiptAuditTrail\";\r\n\r\nexport const fnCloseMarineReceipt = \"CloseMarineReceipt\";\r\nexport const fnWeekendConfig = \"WeekendConfig\";\r\nexport const fnEODAdmin = \"EODAdmin\";\r\nexport const fnPrintBOL = \"PrintBOL\";\r\nexport const fnPrintFAN = \"PrintFAN\";\r\nexport const fnPrintBOD = \"PrintBOD\";\r\nexport const fnCloseShipment = \"CloseShipment\";\r\nexport const fnCloseReceipt = \"CloseReceipt\";\r\nexport const fnContractForceClose = \"CONTRACTFORCECLOSE\";\r\nexport const fnCaptain = \"Captain\";\r\nexport const fnOverrideShipmentSeq = \"OverrideShipmentSequence\";\r\nexport const fnKPIInformation = \"KPIInformation\";\r\n\r\nexport const fnLanguage = \"Language\";\r\nexport const fnWebPortalUserMap = \"WebPortalUserMap\";\r\nexport const fnBayGroup = \"BayGroup\";\r\nexport const fnPipelineHeaderSiteView = \"PipelineHeaderSiteView\";\r\n\r\nexport const fnExchangePartner = \"ExchangePartner\";\r\nexport const fnTankMonitor = \"TankMonitor\";\r\nexport const fnUser = \"PersonAdmin\";\r\nexport const fnProductReconciliationReports = \"ProductReconciliationReports\";\r\n\r\nexport const fnReportConfiguration = \"ReportConfiguration\";\r\nexport const fnProcessConfiguration = \"EXECONFIGURATION\";\r\n\r\nexport const fnShareholderAllocation = \"ShareholderAllocation\";\r\nexport const fnNotificationGroup = \"NotificationGroup\";\r\nexport const fnNotificationRestriction = \"NotificationRestriction\";\r\nexport const fnNotificationConfig = \"NotificationConfig\";\r\n\r\n\r\n\r\nexport const fn_WEIGHBRIDGEMANUALENTRY = \"WEIGHBRIDGEMANUALENTRY\";\r\nexport const fnAllowWeighBridgeManualEntry = \"AllowWeighBridgeManualEntry\";\r\n\r\n\r\nexport const fnProductAllocation = \"ProductAllocation\";\r\nexport const fnMasterDeviceConfiguration = \"MasterDeviceConfiguration\";\r\nexport const fnShareholderAgreement = \"ShareholderAgreement\";\r\nexport const fnTankShareholderPrimeFunction = \"TANKSHAREHOLDERPRIMEFUNCTION\";\r\nexport const fnRoleAdmin = \"ROLEADMIN\";\r\nexport const fnShiftConfig = \"ShiftConfig\";\r\nexport const fnPrinterConfiguration = \"PrinterConfiguration\";\r\nexport const fnCustomerAgreement = \"CustomerAgreement\";\r\nexport const fnbaySCADAConfiguration = \"BaySCADAConfiguration\";\r\nexport const fnRailReceiptUnloadSpotAssignment =\r\n  \"RailReceiptUnloadSpotAssignment\";\r\nexport const fnStaffVisitor = \"STAFF_VISITOR\";\r\nexport const fnPipelineMeterSiteView = \"PipelineMeterSiteView\";\r\nexport const fnRailSiteView = \"RailSiteView\";\r\nexport const fnMarineSiteView = \"MarineSiteView\";\r\nexport const fnLoadingDetails = \"LoadingDetails\";\r\nexport const fnUnloadingDetails = \"UnloadingDetails\";\r\n\r\n\r\n\r\nexport const fnRoadHSEInspection = \"RoadHSEInspection\";\r\nexport const fnRoadHSEConfiguration = \"RoadHSEInspectionConfig\";\r\n\r\nexport const fnMarineHSEInspection = \"MarineHSEInspection\";\r\nexport const fnMarineHSEConfiguration = \"MarineHSEInspectionConfig\";\r\n\r\nexport const fnRailHSEInspection = \"RailHSEInspection\";\r\nexport const fnRailHSEConfiguration = \"RailHSEInspectionConfig\";\r\n\r\nexport const fnPipelineHSEInspection = \"PipelineHSEInspection\";\r\nexport const fnPipelineHSEConfiguration = \"PipelineHSEInspectionConfig\";\r\nexport const fnPrintRAN = \"PrintRAN\";\r\nexport const fnViewReceiptStatus = \"ViewReceiptStatus\";\r\nexport const fnViewReceiptAuditTrail = \"ViewReceiptAuditTrail\";\r\nexport const fnCustomerRecipe = \"customerrecipe\";\r\n\r\nexport const fnCOAParameter = \"COAParameter\";\r\nexport const fnCOATemplate = \"COATemplate\";\r\nexport const fnCOAManagement = \"COAManagement\";\r\nexport const fnCOAManagementFinishedProduct = \"COAManagementFinishedProduct\";\r\nexport const fnCOACustomer = \"COACustomer\";\r\nexport const fnCOAAssignment = \"COAAssignment\";\r\n\r\nexport const fnShipmentDriver = \"ShipmentDriver\";\r\nexport const fnReceiptDriver = \"ReceiptDriver\";\r\n\r\nexport const fnProductForecastConfiguration = \"ProductForecastConfiguration\";","export const carrierCode = \"CarrierCode\";\r\nexport const transportationType = \"TransportationType\";\r\nexport const shareholderCode = \"ShareHolderCode\";\r\nexport const driverCode = \"DriverCode\";\r\nexport const customerCode = \"CustomerCode\";\r\nexport const trailerCode = \"TrailerCode\";\r\nexport const originTerminalCode = \"OriginTerminalCode\";\r\nexport const primeMoverCode = \"PrimeMoverCode\";\r\nexport const vehicleCode = \"VehicleCode\";\r\nexport const destinationCode = \"DestinationCode\";\r\nexport const finishedProductCode = \"FinishedProductCode\";\r\nexport const shipmentCode = \"ShipmentCode\";\r\nexport const orderCode = \"OrderCode\";\r\nexport const receiptCode = \"ReceiptCode\";\r\nexport const suppliercode = \"SupplierCode\";\r\nexport const marineDispatchCode = \"MarineDispatchCode\";\r\nexport const marineReceiptCode = \"MarineReceiptCode\";\r\nexport const supplierCode = \"SupplierCode\";\r\nexport const contractCode = \"ContractCode\";\r\n\r\nexport const railDispatchCode = \"RailDispatchCode\";\r\nexport const railReceiptCode = \"RailReceiptCode\";\r\nexport const railRouteCode = \"RailRouteCode\";\r\nexport const wagonCode = \"WagonCode\";\r\n\r\nexport const compartmentCode = \"CompartmentCode\";\r\n\r\nexport const smsConfigurationCode = \"SMSConfigurationCode\";\r\nexport const pipelineDispatchCode = \"PipelineDispatchCode\";\r\nexport const pipelineReceiptCode = \"PipelineReceiptCode\";\r\nexport const EmailConfigurationCode = \"EmailConfigurationCode\";\r\n\r\nexport const baseProductCode = \"BaseProductCode\";\r\nexport const locationCode = \"LocationCode\";\r\nexport const gantryCode = \"GantryCode\";\r\n\r\nexport const siteViewType = \"SiteViewType\";\r\n\r\nexport const entityCode = \"EntityCode\";\r\n\r\nexport const entityType = \"EntityType\";\r\nexport const cardReaderCode = \"CardReaderCode\";\r\nexport const accessCardCode = \"AccessCardCode\";\r\nexport const bcuCode = \"BcuCode\";\r\nexport const deuCode = \"DeuCode\";\r\nexport const weighBridgeCode = \"WeighBridgeCode\";\r\nexport const weight = \"Weight\";\r\nexport const outOfToleranceAllowed = \"OutOfToleranceAllowed\";\r\n\r\nexport const loadingArmCode = \"LoadingArmCode\";\r\nexport const transportaionType = \"TransportationType\";\r\nexport const bayCode = \"BayCode\";\r\nexport const TransactionNumber = \"TransactionNumber\";\r\nexport const BatchNumber = \"BatchNumber\";\r\nexport const terminalCode = \"TerminalCode\";\r\nexport const tankGroupCode = \"TankGroupCode\";\r\nexport const tankCode = \"TankCode\";\r\nexport const meterCode = \"MeterCode\";\r\n\r\nexport const shipmentType = \"ShipmentType\";\r\nexport const shipmentStatus = \"ShipmentStatus\";\r\nexport const meterLineType = \"MeterLineType\";\r\nexport const dispatchCode = \"DispatchCode\";\r\nexport const railReceiptStatus = \"RailReceiptStatus\";\r\nexport const receiptStatus = \"ReceiptStatus\";\r\nexport const fptTansactionID = \"FPTransactionID\";\r\nexport const productCategoryType = \"ProductCategoryType\";\r\nexport const marineReason = \"Reason\";\r\n\r\nexport const sealMasterCode = \"SealMasterCode\";\r\nexport const marineDispatchReason = \"Reason\";\r\nexport const OperationName = \"OperationName\";\r\nexport const FPTransactionID = \"FPTransactionID\";\r\nexport const ProductCategoryType = \"ProductCategoryType\";\r\nexport const compartmentSeqNoInVehicle = \"CompartmentSeqNoInVehicle\";\r\nexport const adjustedPlanQuantity = \"AdjustedPlanQuantity\";\r\nexport const forceComplete = \"ForceComplete\";\r\nexport const dispatchStatus = \"DispatchStatus\";\r\nexport const HolidayDate = \"HolidayDate\";\r\nexport const ActionID = \"ActionID\";\r\nexport const EODTimePrev = \"EODTimePrev\";\r\nexport const TerminalAction = \"TerminalAction\";\r\nexport const EODTime = \"EODTime\";\r\nexport const MonthStartDay = \"MonthStartDay\";\r\nexport const captainCode = \"CaptainCode\";\r\nexport const userType = \"GeneralTMUserType\";\r\nexport const generalTMUserCode = \"GeneralTMUserCode\";\r\nexport const isPriority = \"IsPriority\";\r\nexport const actualTerminalCode = \"ActualTerminalCode\";\r\nexport const shipmentBondNo = \"ShipmentBondNo\"\r\nexport const receiptBondNo = \"ReceiptBondNo\"\r\nexport const marineReceiptStatus = \"MarineReceiptStatus\";\r\nexport const deviceType = \"DeviceType\";\r\nexport const deviceCode = \"DeviceCode\";\r\nexport const bayGroup = \"BayGroup\";\r\nexport const pipelineHeaderCode = \"PipelineHeaderCode\";\r\nexport const exchangePartnerName = \"ExchangePartner\";\r\nexport const personID = \"PersonID\";\r\nexport const userName = \"UserName\";\r\nexport const pipelinePlanCode = \"PipelinePlanCode\";\r\nexport const pipelinePlanType = \"PipelinePlanType\";\r\nexport const channelCode = \"ChannelCode\";\r\nexport const ProcessName = \"ProcessName\";\r\nexport const reconciliationCode = \"ReconciliationCode\";\r\nexport const NotificationGroupCode = \"NotificationGroupCode\";\r\nexport const NotificationGroupStatus = \"NotificationGroupStatus\";\r\nexport const NotificationGroupDesc = \"NotificationGroupDesc\";\r\nexport const NotificationResSource = \"NotificationResSource\";\r\nexport const NotificationResMsgCode = \"NotificationResMsgCode\";\r\nexport const NotificationOrigResSource = \"NotificationOrigResSource\";\r\nexport const NotificationOrigResMsgCode = \"NotificationOrigResMsgCode\";\r\nexport const NotificationMessageCode = \"NotificationMessageCode\"\r\nexport const positionType = \"PositionType\";\r\nexport const roleName = \"RoleName\";\r\nexport const exchangeAgreementCode = \"ExchangeAgreementCode\";\r\nexport const ProductTransferAgreementCode = \"ProductTransferAgreementCode\";\r\nexport const ShareholderAgreementStatus = \"ShareholderAgreementStatus\";\r\nexport const RequestorShareholder = \"RequestorShareholder\";\r\nexport const LenderShareholder = \"LenderShareholder\";\r\nexport const requestCode = \"RequestCode\";\r\nexport const TransferReferenceCode = \"TransferReferenceCode\";\r\nexport const ShiftID = \"ShiftID\";\r\nexport const ShiftName = \"ShiftName\";\r\nexport const printerName = \"PrinterName\";\r\nexport const locationtype = \"LocationType\";\r\nexport const forceClosureReason = \"ForceClosureReason\";\r\nexport const TransactionType = \"TransactionType\";\r\nexport const CustomerRecipeCode = \"CustomerRecipeCode\";\r\n\r\nexport const coaTemplateCode = \"COATemplateCode\";\r\nexport const coaManagementCode = \"COAManagementCode\";\r\nexport const coaParameterCode = \"COAParameterCode\";\r\nexport const coaManagementFinishedProductCode = \"COAManagementFinishedProductCode\";\r\nexport const coaCustomerCode = \"COACustomerCode\";\r\nexport const coaFinishedProductCode = \"COAFinishedProductCode\";\r\nexport const coaAssignmentCode = \"COAAssignmentCode\";\r\nexport const coaTransportationType = \"COATransportationType\";\r\nexport const coaTransactionType = \"COATransactionType\";\r\nexport const coaSeqNumber = \"COASeqNumber\";\r\nexport const forecastDate = \"ForecastDate\";\r\nexport const forecastTanks = \"ForecastTanks\";","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["TMUserActions","_ref","operationsVisibilty","breadcrumbItem","shareholders","selectedShareholder","onShareholderChange","onDelete","onAdd","popUpContent","shrVisible","handleBreadCrumbClick","addVisible","deleteVisible","modelOpen","setModelOpen","useState","popUpOpen","setPopUpOpen","handlePopUpClick","add","length","_jsxs","className","style","alignItems","padding","children","_jsx","marginTop","ErrorBoundary","TranslationConsumer","t","Breadcrumb","parents","map","parentitem","Item","onClick","undefined","itemCode","localizedKey","justifyContent","_Fragment","Select","placeholder","value","disabled","shareholder","options","Utilities","onChange","Modal","open","size","Content","Footer","Button","type","content","float","display","Popup","position","element","Icon","root","name","color","on","onMouseLeave","VerticalMenu","Header","item","popUpMenuClick","menuItem","fieldName","fieldValue","marginLeft","delete","defaultProps","itemName","itemProps","isComponent","TMUserActionsComposite","UserAuthenticationLayout","Component","constructor","arguments","state","isPasswordRequired","Password","validationErrors","userAuthenticationValidationDef","authenticationResponse","btnAuthenticateEnabled","onFieldChange","propertyName","data","this","setState","lodash","validatePassword","returnValue","Object","values","every","onCloseClick","props","handleClose","AuthenticateUser","msg","pass","Username","salt","cryptojs","WordArray","random","key","keySize","iterations","iv","encrypted","encrypt","Pkcs7","mode","CBC","transitmessage","toString","axios","RestAPIs","encodeURIComponent","tokenDetails","tokenInfo","then","response","result","IsSuccess","EntityResult","toLowerCase","handleOperation","ErrorList","catch","error","componentDidMount","IsPasswordRequired","console","log","userDetails","roleFunctionInfo","functionName","functionGroup","render","textAlign","flexWrap","Input","fluid","disablePasswordToggle","indicator","label","reserveSpace","connect","getUserDetails","TokenAuth","WijmoGrid","flex","setFlex","translator","useTranslation","_getData","pageLength","CollectionView","sourceData","pageSize","setData","rowsPerPage","theGrid","React","theSearch","gridFilter","pagingComponent","colPicker","selectedRows","selectionRequired","selector","gridInitialized","grid","customizeFilterConditions","onRowClick","addEventListener","hostElement","e","ht","hitTest","target","closest","classList","includes","cellType","wjGrid","Cell","rowData","rows","row","dataItem","selectionMode","wjCore","select","Selector","itemChecked","s","singleSelection","filter","isSelected","current","loadash","forEach","onSelectionHandle","r","selectedRow","showCheckAll","column","rowHeaders","columns","headersVisibility","HeadersVisibility","All","useEffect","control","push","selectedItems","refresh","localStorage","getItem","parentComponent","gridState","JSON","parse","newFlex","col","matchedCol","colSetting","binding","visible","filterDefinition","collectionView","deferUpdate","sortDescriptions","clear","i","sortDesc","property","ascending","groupDescriptions","sessionStorage","gridSessionState","moveToPage","pageCount","pageIndex","text","searchText","columnPickerRequired","itemsSource","checkedMemberPath","displayMemberPath","lostFocus","addHandler","hidePopup","exportExcel","gridFlex","wjcGridXlsx","saveAsync","includeColumnHeaders","includeCellStyles","formatItem","exportFileName","displayValues","columnDetail","Name","PopOver","terminalCodes","split","terminalsToShow","Card","DataType","Date","toLocaleDateString","toLocaleTimeString","saveGridState","group","document","getElementsByClassName","chkbx","parentNode","sessionState","setItem","stringify","FlexGridFilter","operator","Operator","header","descending","apply","conditions","search","selectAll","and","or","cancel","stringOperators","op","EQ","NE","BW","EW","CT","NC","numberOperators","GT","LT","GE","LE","dateOperators","booleanOperators","getWidth","columnDetails","window","screen","width","WidthPx","parseInt","WidthPercentage","FlexGridSearch","class","ref","id","actionType","event","host","offsetHeight","focus","showPopup","PopupPosition","Below","preventDefault","colPickerClickHandler","exportRequired","fontSize","top","columnGroupingRequired","GroupPanel","FlexGrid","autoGenerateColumns","alternatingRowStep","autoRowHeights","initialized","virtualizationThreshold","onUpdatedView","FlexGridColumn","minWidth","isReadOnly","wordWrap","align","FlexGridCellTemplate","template","context","conditionalRowStyleCheck","conditionalRowStyles","ListBox","picker","initializedPicker","CollectionViewNavigator","headerFormat","byPage","cv","ProcessConfigDetails","processConfig","modProcessConfig","onActiveStatusChange","listOptions","onAvailableDeviceSelection","onAssociatedDeviceSelection","onDeviceAssociation","onDeviceDisassociation","modAttributeMetaDataList","attributeValidationErrors","onAttributeDataChange","isMultidrop","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","ProcessName","WorkFlowType","workFlowTypeOptions","noResultsMessage","PrimaryDeviceType","deviceTypeOptions","PrimaryDeviceCode","deviceCodeOptions","Active","Remarks","DataTable","availableDevices","selection","selectedAvailableDevices","onSelectionChange","searchPlaceholder","Column","field","editFieldType","Array","isArray","Pagination","icon","iconPosition","associatedDevices","selectedAssociatedDevices","attribute","Accordion","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","handleCellDataEdit","ProcessConfigDetailsComposite","emptyProcessConfigInfo","processConfigValidationDef","isReadyToRender","saveEnabled","tempProcessConfig","handleChange","handleWorkFlowTypeChange","handePrimaryDeviceTypeChanges","getMultiDropDevices","handleActiveStatusChange","handleReset","keys","selectedCompRow","localNodeAttribute","handleResetAttributeValidationError","getProcessConfigDeviceType","getProcessConfigDeviceCodes","saveProcessConfig","createProcessConfig","updateProcessConfig","handleSave","fillDetails","attributeList","validateSave","Attributes","showAuthenticationLayout","IsWebPortalUser","handleAvailableDeviceSelection","handleAssociatedDeviceSelection","handleDeviceAssociation","obj","com","DeviceCode","handleDeviceDisassociation","handleAttributeDataChange","matchedAttributes","matchedAttributesList","modattribute","Code","DefaultValue","handleAuthenticationClose","IsArchived","getAttributes","getWorkFlowType","componentWillReceiveProps","nextProps","Common_Code","getProcessConfig","processConfigRow","ProcessConfig_ProcessName","keyCode","KeyCodes","keyDataCode","Constants","FunctionsList","functionGroups","modify","fnProcessConfiguration","processConfigAttributeEntity","PROCESSCONFIG","terminalSelectionChange","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","baseproductAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","Table","WorkflowCode","workFlowType","deviceType","deviceCode","Table2","IsMultiDrop","AssociatedDevices","modDevice","Table1","devices","DeviceType","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","onSaved","popUpContents","LastUpdatedTime","CreatedTime","LastActiveTime","TMDetailsHeader","entityCode","newEntityName","PageAttibutes","WebPortalListPageSize","TMDetailsUserActions","handleBack","onBack","UserName","LoadingPage","ProcessConfigurationSummaryComposite","tableData","WijmoGridComposite","ProcessConfigComposite","isDetails","isDetailsModified","componentName","componentWillUnmount","removeEventListener","handleAdd","getProcessConfigurationList","handleRowClick","remove","handleSelection","items","handleDelete","deleteProcessConfigKeys","processName","keyData","Key","Value","isRefreshDataRequire","ResultDataList","res","messageResult","toast","NotifyEvent","notificationMessage","autoClose","savedEvent","saveType","authenticateDelete","activeItem","NoOfTerminalsToShow","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","toastClassName","margin","List","handleAttributeDateValue","convertAttributeDatetoString","chars","Dateval","getFullYear","getMonth","slice","getDate","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","INT","LONG","FLOAT","DOUBLE","BOOL","Checkbox","checked","DATETIME","DatePicker","displayFormat","getCurrentDateFormat","showYearSelector","onTextChange","toLocaleString","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","view","fnCarrierCompany","fnDriver","fnCustomer","fnTrailer","fnOriginTerminal","fnDestination","fnPrimeMover","fnVehicle","fnSBC","fnSBP","fnShipmentStatus","fnVessel","fnOrder","fnOrderForceClose","fnContract","fnTruckReceipt","fnMarineDispatch","fnMarineShipmentByCompartment","fnMarineReceipt","fnSupplier","fnFinishedProduct","fnRailDispatch","fnRailReceipt","fnRailRoute","fnRailWagon","fnCloseRailDispatch","fnPrintRailBOL","fnPrintRailFAN","fnRailDispatchLoadSpotAssignment","fnRailDispatchProductAssignment","fnViewRailDispatch","fnViewRailLoadingDetails","fnCloseRailReceipt","fnPrintRailBOD","fnPrintRailRAN","fnViewRailReceipt","fnViewRailUnLoadingDetails","fnSMSConfiguration","fnUnAccountedTransactionTank","fnUnAccountedTransactionMeter","fnPipelineDispatch","fnPipelineReceipt","fnPipelineDispatchManualEntry","fnPipelineReceiptManualEntry","fnLookUpData","fnHSEInspection","fnHSEConfiguration","fnEmailConfiguration","fnShareholder","fnLocation","fnDevice","fnBaseProduct","fnSiteView","fnLeakageManualEntry","fnTerminal","fnSlotInformation","fnTankGroup","fnTank","fnSealMaster","fnTankEODEntry","fnUnmatchedLocalTransactions","fnAccessCard","fnResetPin","fnSlotConfiguration","fnPrintMarineFAN","fnPrintMarineBOL","fnViewMarineLoadingDetails","fnViewMarineShipmentAuditTrail","fnCloseMarineShipment","fnIssueCard","fnActivateCard","fnRevokeCard","fnAutoIDAssociation","fnMarineReceiptByCompartment","fnPrintMarineRAN","fnPrintMarineBOD","fnViewMarineUnloadingDetails","fnViewMarineReceiptAuditTrail","fnCloseMarineReceipt","fnWeekendConfig","fnEODAdmin","fnPrintBOL","fnPrintFAN","fnPrintBOD","fnCloseShipment","fnCloseReceipt","fnContractForceClose","fnCaptain","fnOverrideShipmentSeq","fnKPIInformation","fnLanguage","fnWebPortalUserMap","fnBayGroup","fnPipelineHeaderSiteView","fnTankMonitor","fnUser","fnProductReconciliationReports","fnReportConfiguration","fnShareholderAllocation","fnNotificationGroup","fnNotificationRestriction","fnNotificationConfig","fnAllowWeighBridgeManualEntry","fnProductAllocation","fnMasterDeviceConfiguration","fnShareholderAgreement","fnTankShareholderPrimeFunction","fnRoleAdmin","fnShiftConfig","fnPrinterConfiguration","fnCustomerAgreement","fnbaySCADAConfiguration","fnRailReceiptUnloadSpotAssignment","fnStaffVisitor","fnPipelineMeterSiteView","fnRailSiteView","fnMarineSiteView","fnLoadingDetails","fnUnloadingDetails","fnRoadHSEInspection","fnRoadHSEConfiguration","fnMarineHSEInspection","fnMarineHSEConfiguration","fnRailHSEInspection","fnRailHSEConfiguration","fnPipelineHSEInspection","fnPipelineHSEConfiguration","fnPrintRAN","fnViewReceiptStatus","fnCustomerRecipe","fnCOAParameter","fnCOATemplate","fnCOAManagement","fnCOACustomer","fnCOAAssignment","fnProductForecastConfiguration","carrierCode","transportationType","shareholderCode","driverCode","customerCode","trailerCode","originTerminalCode","primeMoverCode","vehicleCode","destinationCode","finishedProductCode","shipmentCode","orderCode","receiptCode","marineDispatchCode","marineReceiptCode","supplierCode","contractCode","railDispatchCode","railReceiptCode","railRouteCode","wagonCode","compartmentCode","smsConfigurationCode","pipelineDispatchCode","pipelineReceiptCode","EmailConfigurationCode","baseProductCode","locationCode","siteViewType","entityType","cardReaderCode","accessCardCode","bcuCode","deuCode","weighBridgeCode","weight","outOfToleranceAllowed","loadingArmCode","transportaionType","bayCode","TransactionNumber","BatchNumber","terminalCode","tankGroupCode","tankCode","meterCode","shipmentType","shipmentStatus","meterLineType","dispatchCode","receiptStatus","fptTansactionID","productCategoryType","marineReason","sealMasterCode","marineDispatchReason","OperationName","FPTransactionID","ProductCategoryType","compartmentSeqNoInVehicle","adjustedPlanQuantity","forceComplete","dispatchStatus","HolidayDate","ActionID","EODTimePrev","TerminalAction","EODTime","MonthStartDay","captainCode","userType","generalTMUserCode","isPriority","actualTerminalCode","shipmentBondNo","receiptBondNo","bayGroup","pipelineHeaderCode","exchangePartnerName","personID","userName","pipelinePlanCode","pipelinePlanType","channelCode","reconciliationCode","NotificationGroupCode","NotificationGroupStatus","NotificationGroupDesc","NotificationResSource","NotificationResMsgCode","NotificationOrigResSource","NotificationOrigResMsgCode","NotificationMessageCode","positionType","exchangeAgreementCode","ProductTransferAgreementCode","ShareholderAgreementStatus","RequestorShareholder","LenderShareholder","requestCode","TransferReferenceCode","ShiftID","ShiftName","printerName","locationtype","forceClosureReason","TransactionType","CustomerRecipeCode","coaTemplateCode","coaManagementCode","coaParameterCode","coaManagementFinishedProductCode","coaSeqNumber","forecastDate","forecastTanks","getOptionsWithSelect","ddlOptions","selectOptionText","option","unshift","language","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell"],"sourceRoot":""}