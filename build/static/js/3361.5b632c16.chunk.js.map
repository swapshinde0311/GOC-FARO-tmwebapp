{"version":3,"file":"static/js/3361.5b632c16.chunk.js","mappings":"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","sources":["Components/Composite/Common/TMDetailsKPILayout.jsx","Components/Composite/Details/TankDetailsComposite.jsx","JS/AttributeEntity.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nexport default function TMDetailsKPILayout({\r\n    KPIList,\r\n    pageName,\r\n    rowHeight,\r\n    widgetHeight,\r\n    isDraggable,\r\n    isResizable,\r\n    kpiDisplayTopBreakpoint\r\n}) {\r\n    const [KPIDisplays, setKPIDisplays] = useState(1);\r\n\r\n    const kpiDiv = React.useRef(null);\r\n\r\n    const hideKpis = () => {\r\n        let currentScrollPos = window.pageYOffset;\r\n        let KPIDisplay = KPIDisplays;\r\n\r\n        // hide kpis based on div position to top of the window \r\n        if (kpiDiv.current && kpiDiv.current.getBoundingClientRect().top < kpiDisplayTopBreakpoint) {\r\n            KPIDisplay = 0;\r\n        }\r\n        // show the kpis once at top of the screen\r\n        else if (currentScrollPos === 0) {\r\n            KPIDisplay = 1\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n\r\n        setKPIDisplays(KPIDisplay);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            window.addEventListener(\"scroll\", hideKpis);\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // remove listener on unmount\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", hideKpis)\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div ref={kpiDiv}>\r\n            {KPIDisplays === 1 ? <TranslationConsumer>\r\n                {(t) => (\r\n                    <div style={{ marginTop: \"6px\" }}>\r\n                        <ErrorBoundary>\r\n                            <KPIDashboardLayout\r\n                                kpiList={KPIList}\r\n                                isDraggable={isDraggable}\r\n                                isResizable={isResizable}\r\n                                rowHeight={rowHeight}\r\n                                widgetHeight={widgetHeight}\r\n                                pageName={pageName}\r\n                            ></KPIDashboardLayout>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n\r\n                )}\r\n            </TranslationConsumer> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nTMDetailsKPILayout.propTypes = {\r\n    kpiDisplayTopBreakpoint: PropTypes.number\r\n}\r\n\r\nTMDetailsKPILayout.defaultProps = {\r\n    kpiDisplayTopBreakpoint: 100\r\n}","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { TankDetails } from \"../../UIBase/Details/TankDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { emptyTank } from \"../../../JS/DefaultEntities\";\r\nimport { tankValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport {\r\n  functionGroups,\r\n  fnTank,\r\n  fnKPIInformation,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport { toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { tankAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Modal, Button } from \"@scuf/common\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiTankDetail } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\nclass TankDetailsComposite extends Component {\r\n  state = {\r\n    tank: lodash.cloneDeep(emptyTank),\r\n    modTank: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(tankValidationDef),\r\n    isReadyToRender: false,\r\n    saveEnabled: false,\r\n    terminalOptions: [],\r\n    tankModeOptions: [],\r\n    tankGroupOptions: [],\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    tankGroupBaseProduts: {},\r\n    volumeUOMOptions: [],\r\n    weightUOMOptions: [],\r\n    lengthUOMOptions: [],\r\n    densityUOMOptions: [],\r\n    massUOMOptions: [],\r\n    temperatureUOMOptions: [],\r\n    pressureUOMOptions: [],\r\n    isEnableATGButton: false,\r\n    isEnableATGConfigButton: false,\r\n    isBondingEnable: false,\r\n    isATGEnabled: false,\r\n    atgInfoDisable: lodash.cloneDeep(Utilities.atgDisableInfo),\r\n    isChangeBondedStatus: false,\r\n    tankKPIList: [],\r\n    showAuthenticationLayout: false,\r\n    tempTank: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getAttributes(this.props.selectedRow);\r\n      this.GetTankMode();\r\n      if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n        this.getTerminal();\r\n      } else {\r\n        this.getLocalNodeTankGroup();\r\n      }\r\n      this.getUOMList();\r\n      this.getLookUpData();\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsCompositeComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.tank.Code !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getAttributes(nextProps.selectedRow);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getAttributes(tankRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [tankAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.tank\r\n                ),\r\n            },\r\n            () => this.getTank(tankRow)\r\n          );\r\n        } else {\r\n          console.log(\"Error in getAttributes:\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n\r\n  getTank(tankRow) {\r\n    if (tankRow.Common_Code === undefined) {\r\n      this.setState(\r\n        {\r\n          tank: lodash.cloneDeep(emptyTank),\r\n          modTank: lodash.cloneDeep(emptyTank),\r\n          isReadyToRender: true,\r\n          modAttributeMetaDataList: [],\r\n          tankKPIList: [],\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnTank\r\n          ),\r\n          atgInfoDisable: lodash.cloneDeep(Utilities.atgDisableInfo),\r\n          isEnableATGButton: false,\r\n          isEnableATGConfigButton: false,\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange([]);\r\n          } else {\r\n            this.localNodeAttribute();\r\n          }\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.tankCode,\r\n        value: tankRow.Common_Code,\r\n      },\r\n\r\n      {\r\n        key: KeyCodes.terminalCode,\r\n        value: tankRow.TerminalCode !== \"\" ? tankRow.TerminalCode : null,\r\n      },\r\n    ];\r\n    var obj = {\r\n      keyDataCode: KeyCodes.tankCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetTank,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult.GrossVolume === null)\r\n            result.EntityResult.GrossVolumeUOM = null;\r\n          if (result.EntityResult.NetVolume === null)\r\n            result.EntityResult.NetVolumeUOM = null;\r\n          this.setState(\r\n            {\r\n              isReadyToRender: true,\r\n              tank: lodash.cloneDeep(result.EntityResult),\r\n              modTank: lodash.cloneDeep(result.EntityResult),\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnTank\r\n              ),\r\n            },\r\n            () => {\r\n              this.handleTankGroupChange(result.EntityResult.TankGroupCode);\r\n              this.getKPIList(result.EntityResult.Code);\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                this.handleTerminalChange(result.EntityResult.TerminalCode);\r\n                this.terminalSelectionChange([\r\n                  result.EntityResult.TerminalCode,\r\n                ]);\r\n              } else {\r\n                this.localNodeAttribute();\r\n              }\r\n              this.GetTankATGConfiguration(result.EntityResult.Code);\r\n            }\r\n          );\r\n        } else {\r\n          this.setState({\r\n            tank: lodash.cloneDeep(emptyTank),\r\n            modTank: lodash.cloneDeep(emptyTank),\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in getTank:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Tank:\", error, tankRow);\r\n      });\r\n  }\r\n\r\n  GetTankATGConfiguration(TankCode) {\r\n    const atgInfoDisable = lodash.cloneDeep(this.state.atgInfoDisable);\r\n    const isATGEnabled = lodash.cloneDeep(this.state.isATGEnabled);\r\n\r\n    try {\r\n      axios(\r\n        RestAPIs.GetTankATGConfiguration + \"?TankCode=\" + TankCode,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult.EnableTankScan && isATGEnabled === true) {\r\n              result.EntityResult.AtgAttributeConfigurationData.forEach(\r\n                (atgconfig) => {\r\n                  if (atgconfig.EnableScan === true) {\r\n                    if (atgconfig.TankAttributeCode === \"TankMode\")\r\n                      atgInfoDisable[\"TankMode\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"Density\")\r\n                      atgInfoDisable[\"Density\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"AvailableRoom\")\r\n                      atgInfoDisable[\"AvailableRoom\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"Temperature\")\r\n                      atgInfoDisable[\"Temperature\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"TankLevel\")\r\n                      atgInfoDisable[\"TankLevel\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"GrossVolume\")\r\n                      atgInfoDisable[\"GrossVolume\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"NetVolume\")\r\n                      atgInfoDisable[\"NetVolume\"] = true;\r\n                    else if (\r\n                      atgconfig.TankAttributeCode === \"VapourGrossQuantity\"\r\n                    )\r\n                      atgInfoDisable[\"VapourGrossQuantity\"] = true;\r\n                    else if (\r\n                      atgconfig.TankAttributeCode === \"VapourNetQuantity\"\r\n                    )\r\n                      atgInfoDisable[\"VapourNetQuantity\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"Pressure\")\r\n                      atgInfoDisable[\"Pressure\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"WaterLevel\")\r\n                      atgInfoDisable[\"WaterLevel\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"WaterVolume\")\r\n                      atgInfoDisable[\"WaterVolume\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"Mass\")\r\n                      atgInfoDisable[\"Mass\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"NetMass\")\r\n                      atgInfoDisable[\"NetMass\"] = true;\r\n                  }\r\n                }\r\n              );\r\n            }\r\n            this.setState({\r\n              isEnableATGButton: result.EntityResult.EnableTankScan,\r\n              atgInfoDisable,\r\n            });\r\n          } else {\r\n            console.log(\"Error in GetTankATGConfiguration:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting GetTankATGConfiguration:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while getting GetTankATGConfiguration:\", error);\r\n    }\r\n  }\r\n\r\n  getTerminal() {\r\n    axios(\r\n      RestAPIs.GetTerminals,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let terminalOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ terminalOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getTerminal:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Terminal:\", error);\r\n      });\r\n  }\r\n\r\n  GetTankMode() {\r\n    axios(\r\n      RestAPIs.GetTankMode,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let tankModeOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ tankModeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetTankMode:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting TankMode:\", error);\r\n      });\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modTank = lodash.cloneDeep(this.state.modTank);\r\n      const tank = lodash.cloneDeep(this.state.tank);\r\n\r\n      if (propertyName === \"IsBonded\") {\r\n        if (tank.Code !== \"\") {\r\n          if (tank.IsBonded !== data)\r\n            this.setState({ isChangeBondedStatus: true });\r\n        } else {\r\n          this.setState({ isChangeBondedStatus: true });\r\n        }\r\n      }\r\n\r\n      modTank[propertyName] = data;\r\n      this.setState({ modTank });\r\n\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (tankValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          tankValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite:Error occured on handleChange\", error);\r\n    }\r\n  };\r\n\r\n  handleTerminalChange = (data) => {\r\n    try {\r\n      const modTank = lodash.cloneDeep(this.state.modTank);\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      modTank[\"TerminalCode\"] = data;\r\n      // modTank[\"TankGroupCode\"] = \"\";\r\n      //modTank[\"BaseProductCode\"] = \"\";\r\n      modTank[\"BPDensityUOM\"] = \"\";\r\n      modTank[\"BPMinDensity\"] = \"\";\r\n      modTank[\"BPMaxDensity\"] = \"\";\r\n\r\n      validationErrors[\"TerminalCode\"] = \"\";\r\n      this.terminalSelectionChange([data]);\r\n      this.setState({ modTank, validationErrors }, () =>\r\n        this.getTankGroup(data)\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankGroupDetailsComposite:Error occured on handleTerminalChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleTankGroupChange = (data) => {\r\n    try {\r\n      const modTank = lodash.cloneDeep(this.state.modTank);\r\n      const tankGroupBaseProduts = lodash.cloneDeep(\r\n        this.state.tankGroupBaseProduts\r\n      );\r\n\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      modTank[\"TankGroupCode\"] = data;\r\n      modTank[\"BaseProductCode\"] = tankGroupBaseProduts[data];\r\n      modTank[\"BPDensityUOM\"] = \"\";\r\n      modTank[\"BPMinDensity\"] = \"\";\r\n      modTank[\"BPMaxDensity\"] = \"\";\r\n      validationErrors[\"TankGroupCode\"] = \"\";\r\n      this.setState({ modTank, validationErrors }, () =>\r\n        this.GetProductData(data)\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on handleTankGroupChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  GetProductData(TankGroupCode) {\r\n    try {\r\n      const modTank = lodash.cloneDeep(this.state.modTank);\r\n\r\n      axios(\r\n        RestAPIs.GetProductData + \"?TankGroupCode=\" + TankGroupCode,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (\r\n              result.EntityResult !== null &&\r\n              result.EntityResult !== undefined\r\n            ) {\r\n              modTank[\"BPDensityUOM\"] = result.EntityResult.DensityUOM;\r\n              if (\r\n                result.EntityResult.MinDensity !== null &&\r\n                result.EntityResult.MinDensity !== \"\"\r\n              )\r\n                modTank[\"BPMinDensity\"] = parseFloat(\r\n                  result.EntityResult.MinDensity\r\n                );\r\n              if (\r\n                result.EntityResult.MaxDensity !== null &&\r\n                result.EntityResult.MaxDensity !== \"\"\r\n              )\r\n                modTank[\"BPMaxDensity\"] = parseFloat(\r\n                  result.EntityResult.MaxDensity\r\n                );\r\n              this.setState({ modTank });\r\n            }\r\n          } else {\r\n            console.log(\"Error in GetProductData:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting ProductData:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on GetProductData\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTankGroup(terminalcode) {\r\n    axios(\r\n      RestAPIs.GetTankGroupData + \"?terminalcode=\" + terminalcode,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        let tankGroupOptions = [];\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            result.EntityResult !== undefined\r\n          ) {\r\n            Object.keys(result.EntityResult).forEach((element) => {\r\n              tankGroupOptions.push({ text: element, value: element });\r\n            });\r\n          }\r\n          this.setState({\r\n            tankGroupOptions,\r\n            tankGroupBaseProduts: result.EntityResult,\r\n          });\r\n        } else {\r\n          console.log(\"Error in getTankGroup:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting TankGroup:\", error);\r\n      });\r\n  }\r\n\r\n  getLocalNodeTankGroup() {\r\n    axios(\r\n      RestAPIs.GetTankGroupData,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        let tankGroupOptions = [];\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            result.EntityResult !== undefined\r\n          ) {\r\n            Object.keys(result.EntityResult).forEach((element) => {\r\n              tankGroupOptions.push({ text: element, value: element });\r\n            });\r\n          }\r\n          this.setState({\r\n            tankGroupOptions,\r\n            tankGroupBaseProduts: result.EntityResult,\r\n          });\r\n        } else {\r\n          console.log(\"Error in getLocalNodeTankGroup:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting LocalNodeTankGroup:\", error);\r\n      });\r\n  }\r\n\r\n  getUOMList() {\r\n    axios(\r\n      RestAPIs.GetUOMList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            let weightUOMs = result.EntityResult.MASS;\r\n            let volumeUOMOptions = [];\r\n            let massUOMOptions = [];\r\n            weightUOMs.forEach((weightOption) => {\r\n              massUOMOptions.push({\r\n                text: weightOption,\r\n                value: weightOption,\r\n              });\r\n            });\r\n\r\n            let volumeUOMs = result.EntityResult.VOLUME;\r\n\r\n            volumeUOMs.forEach((volumeOption) => {\r\n              volumeUOMOptions.push({\r\n                text: volumeOption,\r\n                value: volumeOption,\r\n              });\r\n            });\r\n\r\n            let lengthUOMs = result.EntityResult.LENGTH;\r\n            let lengthUOMOptions = [];\r\n            lengthUOMs.forEach((lengthOption) => {\r\n              lengthUOMOptions.push({\r\n                text: lengthOption,\r\n                value: lengthOption,\r\n              });\r\n            });\r\n            let densityUOMs = result.EntityResult.DENSITY;\r\n            let densityUOMOptions = [];\r\n            densityUOMs.forEach((densityOption) => {\r\n              densityUOMOptions.push({\r\n                text: densityOption,\r\n                value: densityOption,\r\n              });\r\n            });\r\n\r\n            let temperatureUOMs = result.EntityResult.TEMPERATURE;\r\n            let temperatureUOMOptions = [];\r\n            temperatureUOMs.forEach((temperatureOption) => {\r\n              temperatureUOMOptions.push({\r\n                text: temperatureOption,\r\n                value: temperatureOption,\r\n              });\r\n            });\r\n\r\n            let pressureUOMs = result.EntityResult.PRESSURE;\r\n            let pressureUOMOptions = [];\r\n            pressureUOMs.forEach((pressureOption) => {\r\n              pressureUOMOptions.push({\r\n                text: pressureOption,\r\n                value: pressureOption,\r\n              });\r\n            });\r\n\r\n            this.setState({\r\n              volumeUOMOptions,\r\n              lengthUOMOptions,\r\n              densityUOMOptions,\r\n              massUOMOptions,\r\n              temperatureUOMOptions,\r\n              pressureUOMOptions,\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getUOM:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting getUOM:\", error);\r\n      });\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n      const tank = lodash.cloneDeep(this.state.tank);\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modTank: { ...tank },\r\n          selectedCompRow: [],\r\n          validationErrors,\r\n          modAttributeMetaDataList: [],\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange([tank.TerminalCode]);\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            this.localNodeAttribute();\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite:Error occured on handleReset\", error);\r\n    }\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n  handleSave = () => {\r\n    try {\r\n      let modTank = this.fillDetails();\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      if (this.validateSave(modTank, attributeList)) {\r\n        let showAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n        let tempTank = lodash.cloneDeep(modTank);\r\n        this.setState({ showAuthenticationLayout, tempTank }, () => {\r\n          if (showAuthenticationLayout === false) {\r\n            this.saveTank();\r\n          }\r\n});\r\n\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite:Error occured on handleSave\", error);\r\n    }\r\n  };\r\n\r\n  saveTank = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempTank = lodash.cloneDeep(this.state.tempTank);\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      tempTank = this.convertStringtoDecimal(tempTank, attributeList);\r\n      this.state.tank.Code === \"\"\r\n        ? this.createTank(tempTank)\r\n        : this.updateTank(tempTank);\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite : Error in saveTank\");\r\n    }\r\n  };\r\n\r\n  fillDetails() {\r\n    try {\r\n      let modTank = lodash.cloneDeep(this.state.modTank);\r\n\r\n      modTank.Capacity =\r\n        modTank.Capacity !== null && modTank.Capacity !== \"\"\r\n          ? modTank.Capacity.toLocaleString()\r\n          : null;\r\n      modTank.AvailableRoom =\r\n        modTank.AvailableRoom !== null && modTank.AvailableRoom !== \"\"\r\n          ? modTank.AvailableRoom.toLocaleString()\r\n          : null;\r\n      modTank.Density =\r\n        modTank.Density !== null && modTank.Density !== \"\"\r\n          ? modTank.Density.toLocaleString()\r\n          : null;\r\n      modTank.GrossMass =\r\n        modTank.GrossMass !== null && modTank.GrossMass !== \"\"\r\n          ? modTank.GrossMass.toLocaleString()\r\n          : null;\r\n      modTank.GrossVolume =\r\n        modTank.GrossVolume !== null && modTank.GrossVolume !== \"\"\r\n          ? modTank.GrossVolume.toLocaleString()\r\n          : null;\r\n      modTank.NetVolume =\r\n        modTank.NetVolume !== null && modTank.NetVolume !== \"\"\r\n          ? modTank.NetVolume.toLocaleString()\r\n          : null;\r\n      modTank.WaterVolume =\r\n        modTank.WaterVolume !== null && modTank.WaterVolume !== \"\"\r\n          ? modTank.WaterVolume.toLocaleString()\r\n          : null;\r\n      modTank.TankLevel =\r\n        modTank.TankLevel !== null && modTank.TankLevel !== \"\"\r\n          ? modTank.TankLevel.toLocaleString()\r\n          : null;\r\n      modTank.WaterLevel =\r\n        modTank.WaterLevel !== null && modTank.WaterLevel !== \"\"\r\n          ? modTank.WaterLevel.toLocaleString()\r\n          : null;\r\n      modTank.Temperature =\r\n        modTank.Temperature !== null && modTank.Temperature !== \"\"\r\n          ? modTank.Temperature.toLocaleString()\r\n          : null;\r\n      modTank.Pressure =\r\n        modTank.Pressure !== null && modTank.Pressure !== \"\"\r\n          ? modTank.Pressure.toLocaleString()\r\n          : null;\r\n      modTank.VapourGrossQuantity =\r\n        modTank.VapourGrossQuantity !== null &&\r\n        modTank.VapourGrossQuantity !== \"\"\r\n          ? modTank.VapourGrossQuantity.toLocaleString()\r\n          : null;\r\n      modTank.VapourNetQuantity =\r\n        modTank.VapourNetQuantity !== null && modTank.VapourNetQuantity !== \"\"\r\n          ? modTank.VapourNetQuantity.toLocaleString()\r\n          : null;\r\n\r\n      if (modTank.GrossMass === null || modTank.GrossMass === \"\")\r\n        modTank.GrossMassUOM = \"\";\r\n      if (modTank.GrossVolume === null || modTank.GrossVolume === \"\")\r\n        modTank.GrossVolumeUOM = \"\";\r\n      if (modTank.NetVolume === null || modTank.NetVolume === \"\")\r\n        modTank.NetVolumeUOM = \"\";\r\n      if (modTank.WaterVolume === null || modTank.WaterVolume === \"\")\r\n        modTank.WaterVolumeUOM = \"\";\r\n      if (modTank.Pressure === null || modTank.Pressure === \"\")\r\n        modTank.PressureUOM = \"\";\r\n\r\n      return modTank;\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite:Error occured on fillDetails\", error);\r\n    }\r\n  }\r\n\r\n  validateSave(modTank, attributeList) {\r\n    const validationErrors = { ...this.state.validationErrors };\r\n    Object.keys(tankValidationDef).forEach(function (key) {\r\n      if (modTank[key] !== undefined)\r\n        validationErrors[key] = Utilities.validateField(\r\n          tankValidationDef[key],\r\n          modTank[key]\r\n        );\r\n    });\r\n\r\n    if (modTank.Active !== this.state.tank.Active) {\r\n      if (modTank.Remarks === null || modTank.Remarks === \"\") {\r\n        validationErrors[\"Remarks\"] = \"BaseProductInfo_EnterRemarks\";\r\n      }\r\n    }\r\n\r\n    if (\r\n      modTank.GrossMass !== null &&\r\n      (modTank.GrossMassUOM === null || modTank.GrossMassUOM === \"\")\r\n    ) {\r\n      validationErrors[\"GrossMassUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      modTank.GrossVolume !== null &&\r\n      (modTank.GrossVolumeUOM === null || modTank.GrossVolumeUOM === \"\")\r\n    ) {\r\n      validationErrors[\"GrossVolumeUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      modTank.NetVolume !== null &&\r\n      (modTank.NetVolumeUOM === null || modTank.NetVolumeUOM === \"\")\r\n    ) {\r\n      validationErrors[\"NetVolumeUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      modTank.WaterVolume !== null &&\r\n      (modTank.WaterVolumeUOM === null || modTank.WaterVolumeUOM === \"\")\r\n    ) {\r\n      validationErrors[\"WaterVolumeUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      (modTank.TankLevel !== null || modTank.WaterLevel !== null) &&\r\n      (modTank.LevelUOM === null || modTank.LevelUOM === \"\")\r\n    ) {\r\n      validationErrors[\"LevelUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      modTank.Temperature !== null &&\r\n      (modTank.TemperatureUOM === null || modTank.TemperatureUOM === \"\")\r\n    ) {\r\n      validationErrors[\"TemperatureUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      modTank.Pressure !== null &&\r\n      (modTank.PressureUOM === null || modTank.PressureUOM === \"\")\r\n    ) {\r\n      validationErrors[\"PressureUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      (modTank.VapourGrossQuantity !== null ||\r\n        modTank.VapourNetQuantity !== null) &&\r\n      (modTank.VapourUOM === null || modTank.VapourUOM === \"\")\r\n    ) {\r\n      validationErrors[\"VapourUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n\r\n    if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n      if (modTank.TerminalCode === null || modTank.TerminalCode === \"\") {\r\n        validationErrors[\"TerminalCode\"] = \"TankGroupInfo_TerminalRequired\";\r\n      } else {\r\n        validationErrors[\"TerminalCode\"] = \"\";\r\n      }\r\n    }\r\n\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({ validationErrors, attributeValidationErrors });\r\n\r\n    var returnValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  convertStringtoDecimal(modTank, attributeList) {\r\n    try {\r\n      if (modTank.Capacity !== null && modTank.Capacity !== \"\") {\r\n        modTank.Capacity = Utilities.convertStringtoDecimal(modTank.Capacity);\r\n      }\r\n      if (modTank.AvailableRoom !== null && modTank.AvailableRoom !== \"\") {\r\n        modTank.AvailableRoom = Utilities.convertStringtoDecimal(\r\n          modTank.AvailableRoom\r\n        );\r\n      }\r\n      if (modTank.Density !== null && modTank.Density !== \"\") {\r\n        modTank.Density = Utilities.convertStringtoDecimal(modTank.Density);\r\n      }\r\n      if (modTank.GrossMass !== null && modTank.GrossMass !== \"\") {\r\n        modTank.GrossMass = Utilities.convertStringtoDecimal(modTank.GrossMass);\r\n      }\r\n      if (modTank.GrossVolume !== null && modTank.GrossVolume !== \"\") {\r\n        modTank.GrossVolume = Utilities.convertStringtoDecimal(\r\n          modTank.GrossVolume\r\n        );\r\n      }\r\n      if (modTank.NetVolume !== null && modTank.NetVolume !== \"\") {\r\n        modTank.NetVolume = Utilities.convertStringtoDecimal(modTank.NetVolume);\r\n      }\r\n      if (modTank.WaterVolume !== null && modTank.WaterVolume !== \"\") {\r\n        modTank.WaterVolume = Utilities.convertStringtoDecimal(\r\n          modTank.WaterVolume\r\n        );\r\n      }\r\n      if (modTank.TankLevel !== null && modTank.TankLevel !== \"\") {\r\n        modTank.TankLevel = Utilities.convertStringtoDecimal(modTank.TankLevel);\r\n      }\r\n      if (modTank.WaterLevel !== null && modTank.WaterLevel !== \"\") {\r\n        modTank.WaterLevel = Utilities.convertStringtoDecimal(\r\n          modTank.WaterLevel\r\n        );\r\n      }\r\n      if (modTank.Temperature !== null && modTank.Temperature !== \"\") {\r\n        modTank.Temperature = Utilities.convertStringtoDecimal(\r\n          modTank.Temperature\r\n        );\r\n      }\r\n      if (modTank.Pressure !== null && modTank.Pressure !== \"\") {\r\n        modTank.Pressure = Utilities.convertStringtoDecimal(modTank.Pressure);\r\n      }\r\n      if (\r\n        modTank.VapourGrossQuantity !== null &&\r\n        modTank.VapourGrossQuantity !== \"\"\r\n      ) {\r\n        modTank.VapourGrossQuantity = Utilities.convertStringtoDecimal(\r\n          modTank.VapourGrossQuantity\r\n        );\r\n      }\r\n      if (\r\n        modTank.VapourNetQuantity !== null &&\r\n        modTank.VapourNetQuantity !== \"\"\r\n      ) {\r\n        modTank.VapourNetQuantity = Utilities.convertStringtoDecimal(\r\n          modTank.VapourNetQuantity\r\n        );\r\n      }\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modTank.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n      return modTank;\r\n    } catch (err) {\r\n      console.log(\"convertStringtoDecimal error Tank Details\", err);\r\n    }\r\n  }\r\n\r\n  createTank(modTank) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.tankCode,\r\n        value: modTank.Code,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.tankCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modTank,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"TankInfo_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"TankTransaction_TankCode\"],\r\n          keyValues: [modTank.Code],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.CreateTank,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnTank\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () =>\r\n              this.getTank({\r\n                Common_Code: modTank.Code,\r\n                TerminalCode: modTank.TerminalCode,\r\n              })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnTank\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in createTank:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modTank, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnTank\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modTank, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  updateTank(modTank) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.tankCode,\r\n        value: modTank.Code,\r\n      },\r\n      {\r\n        key: KeyCodes.terminalCode,\r\n        value: modTank.TerminalCode,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.tankCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modTank,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"TankInfo_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"TankTransaction_TankCode\"],\r\n          keyValues: [modTank.Code],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateTank,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnTank\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () =>\r\n              this.getTank({\r\n                Common_Code: modTank.Code,\r\n                TerminalCode: modTank.TerminalCode,\r\n              })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnTank\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in update Tank:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modTank, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.modify,\r\n            fnTank\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modTank, \"modify\", notification);\r\n      });\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var modAttributeMetaDataList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.attributeMetaDataList\r\n        );\r\n        modAttributeMetaDataList = lodash.cloneDeep(\r\n          this.state.modAttributeMetaDataList\r\n        );\r\n        const attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        var modTank = lodash.cloneDeep(this.state.modTank);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.tank.forEach(function (attributeMetaData) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                var Attributevalue = modTank.Attributes.find(\r\n                  (baseproductAttribute) => {\r\n                    return baseproductAttribute.TerminalCode === terminal;\r\n                  }\r\n                );\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute =\r\n                      Attributevalue.ListOfAttributeData.find((x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      });\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        modAttributeMetaDataList = [];\r\n        modAttributeMetaDataList = attributesTerminalsList;\r\n        modAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n          modAttributeMetaDataList\r\n        );\r\n\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on handleAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (\r\n        Array.isArray(attributeMetaDataList.tank) &&\r\n        attributeMetaDataList.tank.length > 0\r\n      ) {\r\n        this.terminalSelectionChange([\r\n          attributeMetaDataList.tank[0].TerminalCode,\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors:\r\n          Utilities.getAttributeInitialValidationErrors(\r\n            attributeMetaDataList.tank\r\n          ),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"handleAttributeValidationError:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleReadATGData = () => {\r\n    try {\r\n      let modTank = lodash.cloneDeep(this.state.modTank);\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"TankInfo_ATGDataUpdateSuccess\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"TankTransaction_TankCode\"],\r\n            keyValues: [modTank.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.GetATGData + \"?TankCode=\" + modTank.Code,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              modTank: lodash.cloneDeep(result.EntityResult),\r\n            },\r\n            () => {\r\n              this.handleUOMValues();\r\n            }\r\n          );\r\n        } else {\r\n          if (result.EntityResult !== null) {\r\n            this.setState(\r\n              {\r\n                modTank: lodash.cloneDeep(result.EntityResult),\r\n              },\r\n              () => {\r\n                this.handleUOMValues();\r\n              }\r\n            );\r\n          }\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on handleReadATGData\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleUOMValues() {\r\n    const modTank = lodash.cloneDeep(this.state.modTank);\r\n    if (modTank.GrossMass === null || modTank.GrossMass === \"\")\r\n      modTank.GrossMassUOM = \"\";\r\n    if (modTank.GrossVolume === null || modTank.GrossVolume === \"\")\r\n      modTank.GrossVolumeUOM = \"\";\r\n    if (modTank.NetVolume === null || modTank.NetVolume === \"\")\r\n      modTank.NetVolumeUOM = \"\";\r\n    if (modTank.WaterVolume === null || modTank.WaterVolume === \"\")\r\n      modTank.WaterVolumeUOM = \"\";\r\n    if (modTank.Pressure === null || modTank.Pressure === \"\")\r\n      modTank.PressureUOM = \"\";\r\n    if (modTank.Temperature === null || modTank.Temperature === \"\")\r\n      modTank.TemperatureUOM = \"\";\r\n    if (\r\n      (modTank.VapourGrossQuantity === null ||\r\n        modTank.VapourGrossQuantity === \"\") &&\r\n      (modTank.VapourNetQuantity === null || modTank.VapourNetQuantity === \"\")\r\n    )\r\n      modTank.VapourUOM = \"\";\r\n    if (\r\n      (modTank.WaterLevel === null || modTank.WaterLevel === \"\") &&\r\n      (modTank.TankLevel === null || modTank.TankLevel === \"\")\r\n    )\r\n      modTank.LevelUOM = \"\";\r\n    this.setState({ modTank });\r\n  }\r\n\r\n  handleSaveATGData = () => {\r\n    try {\r\n      let modTank = lodash.cloneDeep(this.state.modTank);\r\n      let obj = {\r\n        keyDataCode: KeyCodes.tankCode,\r\n        Entity: modTank,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"TankInfo_ReadATGDataSuccess\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"TankTransaction_TankCode\"],\r\n            keyValues: [modTank.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.SaveATGData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on handleSaveATGData\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getLookUpData() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=Bonding\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            isBondingEnable:\r\n              result.EntityResult[\"EnableBondingNon-Bonding\"] === \"True\"\r\n                ? true\r\n                : false,\r\n          });\r\n        }\r\n      });\r\n\r\n      if (!this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n        axios(\r\n          RestAPIs.GetLookUpData + \"?LookUpTypeCode=ATG\",\r\n          Utilities.getAuthenticationObjectforGet(\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        ).then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              isATGEnabled:\r\n                result.EntityResult[\"ATGEnabled\"] === \"True\" ? true : false,\r\n            });\r\n            if (result.EntityResult[\"ATGEnabled\"] === \"True\") {\r\n              if (\r\n                this.props.selectedRow.TankList_ATGConfiguration !==\r\n                  undefined &&\r\n                this.props.selectedRow.TankList_ATGConfiguration !== null\r\n              ) {\r\n                this.setState({ isEnableATGConfigButton: true });\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite:Error occured on getLookUpData\", error);\r\n    }\r\n  }\r\n\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modTank = lodash.cloneDeep(this.state.modTank);\r\n      modTank.Active = value;\r\n      if (modTank.Active !== this.state.tank.Active) modTank.Remarks = \"\";\r\n      this.setState({ modTank });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  handleATGConfig = () => {\r\n    try {\r\n      let modTank = lodash.cloneDeep(this.state.modTank);\r\n      this.props.handleATGConfiguration(modTank, this.props.selectedRow);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  confirmChangeBondedStatus = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isChangeBondedStatus} size=\"small\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h5>{t(\"Tank_ChangeBondedStatus\")}</h5>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  this.setState({ isChangeBondedStatus: false }, () => {\r\n                    this.bondedStatusChanged();\r\n                  });\r\n                }}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => {\r\n                  this.setState({ isChangeBondedStatus: false });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  bondedStatusChanged = () => {\r\n    try {\r\n      let modTank = lodash.cloneDeep(this.state.modTank);\r\n      modTank.Remarks = \"\";\r\n      this.setState({ modTank });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  //Get KPI for Tanks\r\n  getKPIList(tankCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      let objKPIRequestData = {\r\n        PageName: kpiTankDetail,\r\n        InputParameters: [{ key: \"TankCode\", value: tankCode }],\r\n      };\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({ tankKPIList: result.EntityResult.ListKPIDetails });\r\n          } else {\r\n            this.setState({ tankKPIList: [] });\r\n            console.log(\"Error in tank KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Tank KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n  render() {\r\n    const listOptions = {\r\n      terminalCode: this.state.terminalOptions,\r\n      tankMode: this.state.tankModeOptions,\r\n      tankGroup: this.state.tankGroupOptions,\r\n      volumeUOM: this.state.volumeUOMOptions,\r\n      densityUOM: this.state.densityUOMOptions,\r\n      massUOM: this.state.massUOMOptions,\r\n      lengthUOM: this.state.lengthUOMOptions,\r\n      temperatureUOM: this.state.temperatureUOMOptions,\r\n      pressureUOM: this.state.pressureUOMOptions,\r\n    };\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"BaseProductInfo_LastUpdated\",\r\n        fieldValue:\r\n          new Date(this.state.modTank.UpdatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modTank.UpdatedTime).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"BaseProductInfo_LastActivatedTime\",\r\n        fieldValue:\r\n          this.state.modTank.LastActive !== undefined &&\r\n          this.state.modTank.LastActive !== null\r\n            ? new Date(this.state.modTank.LastActive).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(this.state.modTank.LastActive).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"BaseProductInfo_Created\",\r\n        fieldValue:\r\n          new Date(this.state.modTank.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modTank.CreatedTime).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"TankInfo_ATGLastUpdatedTime\",\r\n        fieldValue:\r\n          this.state.modTank.AtgLastUpdatedTime !== undefined &&\r\n          this.state.modTank.AtgLastUpdatedTime !== null\r\n            ? new Date(\r\n                this.state.modTank.AtgLastUpdatedTime\r\n              ).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(\r\n                this.state.modTank.AtgLastUpdatedTime\r\n              ).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n    ];\r\n\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.tank.Code}\r\n            newEntityName=\"TankInfo_NewTank\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <TMDetailsKPILayout KPIList={this.state.tankKPIList}>\r\n          {\" \"}\r\n        </TMDetailsKPILayout>\r\n        <ErrorBoundary>\r\n          <TankDetails\r\n            tank={this.state.tank}\r\n            modTank={this.state.modTank}\r\n            listOptions={listOptions}\r\n            validationErrors={this.state.validationErrors}\r\n            onFieldChange={this.handleChange}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            onAttributeDataChange={this.handleAttributeDataChange}\r\n            onTerminalChange={this.handleTerminalChange}\r\n            onTankGroupChange={this.handleTankGroupChange}\r\n            isEnableATGButton={this.state.isEnableATGButton}\r\n            atgInfoDisable={this.state.atgInfoDisable}\r\n            handleReadATGData={this.handleReadATGData}\r\n            handleSaveATGData={this.handleSaveATGData}\r\n            isBondingEnable={this.state.isBondingEnable}\r\n            isATGEnabled={this.state.isATGEnabled}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            handleATGConfiguration={this.handleATGConfig}\r\n            isEnableATGConfigButton={this.state.isEnableATGConfigButton}\r\n          ></TankDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.isChangeBondedStatus\r\n          ? this.confirmChangeBondedStatus()\r\n          : null}\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.tank.Code === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnTank}\r\n            handleOperation={this.saveTank}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TankDetailsComposite);\r\n\r\nTankDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n  handleATGConfiguration: PropTypes.func.isRequired,\r\n};\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";"],"names":["TMDetailsKPILayout","_ref","KPIList","pageName","rowHeight","widgetHeight","isDraggable","isResizable","kpiDisplayTopBreakpoint","KPIDisplays","setKPIDisplays","useState","kpiDiv","React","hideKpis","currentScrollPos","window","pageYOffset","KPIDisplay","current","getBoundingClientRect","top","useEffect","addEventListener","removeEventListener","_jsx","ref","children","TranslationConsumer","t","style","marginTop","ErrorBoundary","KPIDashboardLayout","kpiList","defaultProps","TankDetailsComposite","Component","constructor","arguments","state","tank","lodash","emptyTank","modTank","validationErrors","Utilities","tankValidationDef","isReadyToRender","saveEnabled","terminalOptions","tankModeOptions","tankGroupOptions","attributeMetaDataList","modAttributeMetaDataList","attributeValidationErrors","tankGroupBaseProduts","volumeUOMOptions","weightUOMOptions","lengthUOMOptions","densityUOMOptions","massUOMOptions","temperatureUOMOptions","pressureUOMOptions","isEnableATGButton","isEnableATGConfigButton","isBondingEnable","isATGEnabled","atgInfoDisable","isChangeBondedStatus","tankKPIList","showAuthenticationLayout","tempTank","handleChange","propertyName","data","this","Code","IsBonded","setState","undefined","error","console","log","handleTerminalChange","terminalSelectionChange","getTankGroup","handleTankGroupChange","GetProductData","handleReset","Object","keys","forEach","key","selectedCompRow","props","userDetails","EntityResult","IsEnterpriseNode","TerminalCode","handleResetAttributeValidationError","localNodeAttribute","handleAuthenticationClose","handleSave","fillDetails","attributeList","validateSave","IsWebPortalUser","saveTank","convertStringtoDecimal","createTank","updateTank","handleAttributeDataChange","attribute","value","matchedAttributes","matchedAttributesList","filter","modattribute","length","Array","isArray","DefaultValue","attributeValidation","handleReadATGData","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","IsSuccess","handleUOMValues","ErrorList","toast","NotifyEvent","notificationMessage","autoClose","handleSaveATGData","obj","keyDataCode","KeyCodes","Entity","handleActiveStatusChange","Active","Remarks","handleATGConfig","handleATGConfiguration","selectedRow","confirmChangeBondedStatus","_jsxs","Modal","open","size","Content","className","Footer","Button","type","content","onClick","bondedStatusChanged","componentDidMount","IsArchived","getAttributes","GetTankMode","getTerminal","getLocalNodeTankGroup","getUOMList","getLookUpData","componentWillReceiveProps","nextProps","Common_Code","tankRow","tankAttributeEntity","getTank","keyCode","GrossVolume","GrossVolumeUOM","NetVolume","NetVolumeUOM","FunctionsList","functionGroups","modify","fnTank","TankGroupCode","getKPIList","GetTankATGConfiguration","catch","add","TankCode","EnableTankScan","AtgAttributeConfigurationData","atgconfig","EnableScan","TankAttributeCode","DensityUOM","MinDensity","parseFloat","MaxDensity","terminalcode","element","push","text","weightUOMs","MASS","weightOption","VOLUME","volumeOption","lengthUOMs","LENGTH","lengthOption","densityUOMs","DENSITY","densityOption","temperatureUOMs","TEMPERATURE","temperatureOption","pressureUOMs","PRESSURE","pressureOption","Capacity","toLocaleString","AvailableRoom","Density","GrossMass","WaterVolume","TankLevel","WaterLevel","Temperature","Pressure","VapourGrossQuantity","VapourNetQuantity","GrossMassUOM","WaterVolumeUOM","PressureUOM","LevelUOM","TemperatureUOM","VapourUOM","attributeMetaData","returnValue","x","values","every","Attributes","err","onSaved","selectedTerminals","attributesTerminalsList","terminal","existitem","find","selectedAttribute","Attributevalue","baseproductAttribute","valueAttribute","ListOfAttributeData","AttributeCode","AttributeValue","TankList_ATGConfiguration","tankCode","view","fnKPIInformation","objKPIRequestData","PageName","kpiTankDetail","InputParameters","ListKPIDetails","render","listOptions","terminalCode","tankMode","tankGroup","volumeUOM","densityUOM","massUOM","lengthUOM","temperatureUOM","pressureUOM","popUpContents","fieldName","fieldValue","Date","UpdatedTime","toLocaleDateString","toLocaleTimeString","LastActive","CreatedTime","AtgLastUpdatedTime","TMDetailsHeader","entityCode","newEntityName","TankDetails","onFieldChange","isEnterpriseNode","onAttributeDataChange","onTerminalChange","onTankGroupChange","onActiveStatusChange","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity"],"sourceRoot":""}