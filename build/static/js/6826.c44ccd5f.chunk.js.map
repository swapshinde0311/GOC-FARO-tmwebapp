{"version":3,"file":"static/js/6826.c44ccd5f.chunk.js","mappings":"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","sources":["Components/UIBase/Details/TruckReceiptDetails.jsx","Components/Composite/Details/TruckReceiptDetailsComposite.jsx","Components/Composite/Details/TruckReceiptSealDetailsComposite.jsx","Components/UIBase/Common/AssociatedTerminals.jsx","Components/UIBase/Details/TruckReceiptViewAuditTrailsDetails.jsx","Components/UIBase/Details/TruckReceiptViewUnLoadingDetails.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Select,\r\n  Icon,\r\n  Input,\r\n  DatePicker,\r\n  Tab,\r\n  Checkbox,\r\n  Accordion,\r\n  Button,\r\n  Modal,\r\n  Tooltip,\r\n} from \"@scuf/common\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport { AssociatedTerminals } from \"../Common/AssociatedTerminals\";\r\nimport {\r\n  getOptionsWithSelect,\r\n  getCurrentDateFormat,\r\n} from \"../../../JS/functionalUtilities\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\n\r\nTruckReceiptDetails.propTypes = {\r\n  receipt: PropTypes.object.isRequired,\r\n  modReceipt: PropTypes.object.isRequired,\r\n  modAssociations: PropTypes.array.isRequired,\r\n  modCompartments: PropTypes.array.isRequired,\r\n  modRecordWeight: PropTypes.array.isRequired,\r\n  modCustomerInventory: PropTypes.array.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  modCustomValues: PropTypes.object.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    terminalCodes: PropTypes.array,\r\n    quantityUOMOptions: PropTypes.array,\r\n    vehicleOptions: PropTypes.array,\r\n    driverOptions: PropTypes.array,\r\n    compSeqOptions: PropTypes.array,\r\n    finishedProductOptions: PropTypes.array,\r\n    supplierOriginOptions: PropTypes.array,\r\n    supplierOptions: PropTypes.array,\r\n    baseProductOptions: PropTypes.array,\r\n    customerOptions: PropTypes.array,\r\n  }).isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onDateTextChange: PropTypes.func.isRequired,\r\n  onAllTerminalsChange: PropTypes.func.isRequired,\r\n  selectedAssociations: PropTypes.array.isRequired,\r\n  handleRowSelectionChange: PropTypes.func.isRequired,\r\n  handleCustomerSelectionChange: PropTypes.func.isRequired,\r\n  selectedCustomerInventory: PropTypes.func.isRequired,\r\n  handleCellDataEdit: PropTypes.func.isRequired,\r\n  handleCellCompartmentDataEdit: PropTypes.func.isRequired,\r\n  handleCustomerInventory: PropTypes.func.isRequired,\r\n  handleAddAssociation: PropTypes.func.isRequired,\r\n  handleAddCustomerInventory: PropTypes.func.isRequired,\r\n  handleDeleteCustomerInventory: PropTypes.func.isRequired,\r\n  handleDeleteAssociation: PropTypes.func.isRequired,\r\n  onActiveStatusChange: PropTypes.func.isRequired,\r\n  onVehicleChange: PropTypes.func.isRequired,\r\n  onSupplierChange: PropTypes.func.isRequired,\r\n  onVehicleSearchChange: PropTypes.func.isRequired,\r\n  onDriverChange: PropTypes.func.isRequired,\r\n  onDriverSearchChange: PropTypes.func.isRequired,\r\n  onVehicleResultsClear: PropTypes.func.isRequired,\r\n  onDriverResultsClear: PropTypes.func.isRequired,\r\n  isEnterpriseNode: PropTypes.bool.isRequired,\r\n  IsWebPortalUser: PropTypes.bool.isRequired,\r\n  onTabChange: PropTypes.func.isRequired,\r\n  activeTab: PropTypes.number.isRequired,\r\n  expandedRows: PropTypes.array.isRequired,\r\n  attributeToggleExpand: PropTypes.func.isRequired,\r\n  toggleExpand: PropTypes.func.isRequired,\r\n  compartmentDetailsSave: PropTypes.func.isRequired,\r\n  customerInventoryTab: PropTypes.bool.isRequired,\r\n  compartmentTab: PropTypes.bool.isRequired,\r\n  recordweightTab: PropTypes.bool.isRequired,\r\n  selectedAttributeList: PropTypes.array.isRequired,\r\n  attributeValidationErrors: PropTypes.object.isRequired,\r\n  handleAttributeCellDataEdit: PropTypes.func.isRequired,\r\n  handleCompAttributeCellDataEdit: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n  IsPastDisable: PropTypes.bool.isRequired,\r\n  SupplierEnable: PropTypes.bool.isRequired,\r\n  isHSEInspectionEnable: PropTypes.bool.isRequired,\r\n  isSlotbookinginUI: PropTypes.bool.isRequired,\r\n  compartmentDetailsPageSize: PropTypes.number.isRequired,\r\n  isBonded: PropTypes.bool.isRequired,\r\n  UpdateReceiptBondNo: PropTypes.func.isRequired,\r\n  handleCellCheck: PropTypes.func.isRequired,\r\n  ReceiptBay: PropTypes.string.isRequired,\r\n  UpdateReceiptDriver: PropTypes.func.isRequired,\r\n  isWebportalCarrierRoleUser: PropTypes.bool.isRequired,\r\n};\r\n\r\nTruckReceiptDetails.defaultProps = {\r\n  listOptions: {\r\n    quantityUOMOptions: [],\r\n    vehicleOptions: [],\r\n    terminalCodes: [],\r\n    driverOptions: [],\r\n    supplierOriginOptions: [],\r\n    originalterminalOptions: [],\r\n    compSeqOptions: [],\r\n    finishedProductOptions: [],\r\n    baseProductCode: [],\r\n    supplierOptions: [],\r\n    customerCode: [],\r\n    baseProductOptions: [],\r\n    customerOptions: [],\r\n  },\r\n  isEnterpriseNode: false,\r\n  IsWebPortalUser: false,\r\n  isSlotbookinginUI: false,\r\n  isBonded: false,\r\n  ReceiptBay: \"\",\r\n};\r\nexport default function TruckReceiptDetails({\r\n  receipt,\r\n  modReceipt,\r\n  modAssociations,\r\n  validationErrors,\r\n  listOptions,\r\n  searchResults,\r\n  onFieldChange,\r\n  onDateTextChange,\r\n  onAllTerminalsChange,\r\n  selectedAssociations,\r\n  handleRowSelectionChange,\r\n  handleCustomerSelectionChange,\r\n  selectedCustomerInventory,\r\n  handleCellDataEdit,\r\n  handleCellCompartmentDataEdit,\r\n  handleCustomerInventory,\r\n  handleAddCustomerInventory,\r\n  handleAddAssociation,\r\n  handleDeleteAssociation,\r\n  handleDeleteCustomerInventory,\r\n  onActiveStatusChange,\r\n  onVehicleChange,\r\n  onSupplierChange,\r\n  onVehicleSearchChange,\r\n  onDriverChange,\r\n  onDriverSearchChange,\r\n  onVehicleResultsClear,\r\n  onDriverResultsClear,\r\n  isEnterpriseNode,\r\n  IsWebPortalUser,\r\n  onTabChange,\r\n  activeTab,\r\n  expandedRows,\r\n  toggleExpand,\r\n  attributeToggleExpand,\r\n  modCompartments,\r\n  customerInventoryTab,\r\n  modCustomerInventory,\r\n  // customerInventory,\r\n  compartmentTab,\r\n  recordweightTab,\r\n  selectedAttributeList,\r\n  attributeValidationErrors,\r\n  handleAttributeCellDataEdit,\r\n  handleCompAttributeCellDataEdit,\r\n  handleCellCheck,\r\n  compartmentDetailsSave,\r\n  saveEnabled,\r\n  IsPastDisable,\r\n  SupplierEnable,\r\n  isHSEInspectionEnable,\r\n  isSlotbookinginUI,\r\n  compartmentDetailsPageSize,\r\n  isBonded,\r\n  UpdateReceiptBondNo,\r\n  modRecordWeight,\r\n  modCustomValues,\r\n  ReceiptBay,\r\n  UpdateReceiptDriver,\r\n  isWebportalCarrierRoleUser\r\n}) {\r\n  const [t] = useTranslation();\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [modCellData, setModCellData] = useState({});\r\n  // const handleSupplierEditDropDown = (cellData) => {\r\n  //   let supplierOptions = [];\r\n  //       if (\r\n  //           listOptions.supplierOriginOptions !== undefined &&\r\n  //           listOptions.supplierOriginOptions !== null\r\n  //       ) {\r\n  //           Object.keys(listOptions.supplierOriginOptions).forEach((supplier) =>\r\n  //               supplierOptions.push({ text: supplier, value: supplier })\r\n  //           );\r\n  //       }\r\n  //       return handleCustomEditDropDown(cellData, supplierOptions);\r\n  //   };\r\n\r\n  const handleEnableOriginTerminalEditDropDown = (cellData) => {\r\n    let originalterminalOptions = [];\r\n    if (\r\n      listOptions.supplierOriginOptions !== undefined &&\r\n      listOptions.supplierOriginOptions !== null\r\n    ) {\r\n      if (\r\n        listOptions.supplierOriginOptions[cellData.rowData.SupplierCode] !==\r\n          undefined &&\r\n        Array.isArray(\r\n          listOptions.supplierOriginOptions[cellData.rowData.SupplierCode]\r\n        )\r\n      ) {\r\n        listOptions.supplierOriginOptions[\r\n          cellData.rowData.SupplierCode\r\n        ].forEach((origins) =>\r\n          originalterminalOptions.push({ text: origins, value: origins })\r\n        );\r\n      }\r\n    }\r\n    return handleCustomEditDropDown(cellData, originalterminalOptions);\r\n  };\r\n  const handleOriginTerminalEditDropDown = (cellData) => {\r\n    let originalterminalOptions = [];\r\n    if (\r\n      listOptions.supplierOriginOptions !== undefined &&\r\n      listOptions.supplierOriginOptions !== null\r\n    ) {\r\n      if (\r\n        listOptions.supplierOriginOptions[modReceipt.SupplierCode] !==\r\n          undefined &&\r\n        Array.isArray(\r\n          listOptions.supplierOriginOptions[modReceipt.SupplierCode]\r\n        )\r\n      ) {\r\n        listOptions.supplierOriginOptions[modReceipt.SupplierCode].forEach(\r\n          (origins) =>\r\n            originalterminalOptions.push({ text: origins, value: origins })\r\n        );\r\n      }\r\n    }\r\n    return handleCustomEditDropDown(cellData, originalterminalOptions);\r\n  };\r\n\r\n  const handleCustomEditDropDown = (cellData, dropDownoptions) => {\r\n    return (\r\n      // <TranslationConsumer>\r\n      //   {(t) => (\r\n      <Select\r\n        className=\"selectDropwdown\"\r\n        value={modAssociations[cellData.rowIndex][cellData.field]}\r\n        fluid\r\n        options={dropDownoptions}\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        indicator=\"required\"\r\n        reserveSpace={false}\r\n        search={true}\r\n        noResultsMessage={t(\"noResultsMessage\")}\r\n      />\r\n      //   )}\r\n      // </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  const handleCustomEditTextBox = (cellData) => {\r\n    return (\r\n      // <TranslationConsumer>\r\n      //   {(t) => (\r\n\r\n      <Input\r\n        fluid\r\n        value={modAssociations[cellData.rowIndex][cellData.field]}\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        reserveSpace={false}\r\n      />\r\n      //   )}\r\n      // </TranslationConsumer>\r\n    );\r\n  };\r\n  const handleCustomerInvetoryEditDropDown = (cellData, dropDownoptions) => {\r\n    return (\r\n      // <TranslationConsumer>\r\n      //   {(t) => (\r\n      <Select\r\n        className=\"selectDropwdown\"\r\n        value={modCustomerInventory[cellData.rowIndex][cellData.field]}\r\n        fluid\r\n        options={dropDownoptions}\r\n        onChange={(value) => handleCustomerInventory(value, cellData)}\r\n        indicator=\"required\"\r\n        reserveSpace={false}\r\n        search={true}\r\n        noResultsMessage={t(\"noResultsMessage\")}\r\n      />\r\n      //   )}\r\n      // </TranslationConsumer>\r\n    );\r\n  };\r\n  const handleCustomerInvetoryEditTextBox = (cellData) => {\r\n    return (\r\n      <Input\r\n        fluid\r\n        value={modCustomerInventory[cellData.rowIndex][cellData.field]}\r\n        onChange={(value) => handleCustomerInventory(value, cellData)}\r\n        reserveSpace={false}\r\n      />\r\n    );\r\n  };\r\n  const decimalDisplayValues = (cellData) => {\r\n    const { value } = cellData;\r\n    if (typeof value === \"number\") {\r\n      return value.toLocaleString();\r\n    } else {\r\n      return value;\r\n    }\r\n  };\r\n  function displayTMModalForceCompleteConfirm() {\r\n    return (\r\n      <Modal open={modelOpen} size=\"small\">\r\n        <Modal.Content>\r\n          <div>\r\n            <b>{t(\"ForceToComplete\")}</b>\r\n          </div>\r\n        </Modal.Content>\r\n        <Modal.Footer>\r\n          <Button\r\n            type=\"secondary\"\r\n            content={t(\"Cancel\")}\r\n            onClick={() => {\r\n              setModelOpen(false);\r\n              handleCellCheck(modCellData, false);\r\n            }}\r\n          />\r\n          <Button\r\n            type=\"primary\"\r\n            content={t(\"Confirm\")}\r\n            onClick={() => {\r\n              setModelOpen(false);\r\n              handleCellCheck(modCellData, true);\r\n            }}\r\n          />\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n  const handleForceComplete = (cellData) => {\r\n    let chkForceCompleted = false;\r\n    if (\r\n      cellData.rowData.CompartmentStaus !== null ||\r\n      cellData.rowData.CompartmentStaus !== undefined\r\n    )\r\n      chkForceCompleted =\r\n        Constants.Receipt_Status[modReceipt.ReceiptStatus] ===\r\n          Constants.Receipt_Status.CLOSED ||\r\n        Constants.ReceiptCompartment_Status[\r\n          cellData.rowData.CompartmentStaus\r\n        ] === Constants.ReceiptCompartment_Status.COMPLETED ||\r\n        Constants.ReceiptCompartment_Status[\r\n          cellData.rowData.CompartmentStaus\r\n        ] === Constants.ReceiptCompartment_Status.UNLOADING ||\r\n        Constants.ReceiptCompartment_Status[\r\n          cellData.rowData.CompartmentStaus\r\n        ] === Constants.ReceiptCompartment_Status.FORCE_COMPLETED\r\n          ? true\r\n          : false;\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <Checkbox\r\n          className=\"forceCompleteChkBox\"\r\n          checked={cellData.rowData.ForceCompleted}\r\n          disabled={\r\n            cellData.rowData.CompartmentStaus !== null ||\r\n            cellData.rowData.CompartmentStaus !== undefined\r\n              ? chkForceCompleted\r\n              : false\r\n          }\r\n          onChange={(data) => {\r\n            setModCellData(cellData);\r\n            if (data) {\r\n              setModelOpen(true);\r\n            } else {\r\n              handleCellCheck(cellData, data);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  const handleStatus = (e) => {\r\n    if (e === Constants.ReceiptCompartment_Status.EMPTY) {\r\n      return \"EMPTY\";\r\n    } else if (e === Constants.ReceiptCompartment_Status.UNLOADING) {\r\n      return \"UNLOADING\";\r\n    } else if (e === Constants.ReceiptCompartment_Status.PART_UNLOADED) {\r\n      return \"PART_UNLOADED\";\r\n    } else if (e === Constants.ReceiptCompartment_Status.OVER_UNLOADED) {\r\n      return \"OVER_UNLOADED\";\r\n    } else if (e === Constants.ReceiptCompartment_Status.FORCE_COMPLETED) {\r\n      return \"FORCE_COMPLETED\";\r\n    } else if (e === Constants.ReceiptCompartment_Status.COMPLETED) {\r\n      return \"COMPLETED\";\r\n    } else if (e === Constants.ReceiptCompartment_Status.UNLOAD_NOTSTARTED) {\r\n      return \"UNLOAD_NOTSTARTED\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n  //  const handleQuantity = (e, UOM) => {\r\n  //   if (e != null) {\r\n  //     return e + UOM;\r\n  //   } else {\r\n  //     return \"\";\r\n  //   }\r\n  // };\r\n\r\n  const expanderTemplate = (data) => {\r\n    const open =\r\n      expandedRows.findIndex((x) => x.SeqNumber === data.rowData.SeqNumber) >= 0\r\n        ? true\r\n        : false;\r\n    return (\r\n      <div\r\n        onClick={() => toggleExpand(data.rowData, open)}\r\n        className=\"compartmentIcon gridButtonFontColor\"\r\n      >\r\n        {/* <span>{open ? t(\"Hide_Attributes\") : t(\"View_Attributes\")}</span> */}\r\n        <Icon\r\n          root=\"common\"\r\n          name={open ? \"slidercontrols-minus\" : \"ellipsis-horizontal\"}\r\n          className=\"margin_l10\"\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  const expanderAttributeTemplate = (data) => {\r\n    //const open = expandedRows.includes(data.rowData);\r\n    const open =\r\n      expandedRows.findIndex(\r\n        (x) =>\r\n          x.CompartmentSeqNoInTrailer === data.rowData.CompartmentSeqNoInTrailer\r\n      ) >= 0\r\n        ? true\r\n        : false;\r\n    return (\r\n      <div\r\n        onClick={() => attributeToggleExpand(data.rowData, open)}\r\n        className=\"compartmentIcon gridButtonFontColor\"\r\n      >\r\n        <span>{open ? t(\"Hide_Attributes\") : t(\"View_Attributes\")}</span>\r\n        <Icon\r\n          root=\"common\"\r\n          name={open ? \"caret-up\" : \"caret-down\"}\r\n          className=\"margin_l10\"\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  const handleInputTextBox = (data) => {\r\n    let field = data.field;\r\n    return (\r\n      <Input\r\n        fluid\r\n        disabled={\r\n          // modReceipt.ReceiptStatus !== Constants.Receipt_Status.QUEUED ||\r\n          // (data.rowData.CompartmentStaus !== (Constants.ReceiptCompartment_Status.FORCE_COMPLETED || Constants.ReceiptCompartment_Status.UNLOADING || Constants.ReceiptCompartment_Status.COMPLETED || Constants.ReceiptCompartment_Status.OVER_UNLOADED || Constants.Receipt_Status.MANUALLY_UNLOADED))\r\n          modReceipt.ReceiptStatus === Constants.Receipt_Status.CLOSED ||\r\n          modReceipt.ReceiptStatus === Constants.Receipt_Status.READY ||\r\n          modReceipt.ReceiptStatus ===\r\n            Constants.Receipt_Status.MANUALLY_UNLOADED\r\n        }\r\n        value={data.rowData[field]}\r\n        onChange={(value) => handleCellCompartmentDataEdit(value, data)}\r\n        reserveSpace={false}\r\n      />\r\n    );\r\n  };\r\n  function rowExpansionTemplate(data) {\r\n    let compData = [];\r\n    compData.push(data);\r\n    return Array.isArray(compData) && compData.length > 0 ? (\r\n      <div className=\"ChildGridViewAllShipmentLoadingDetails\">\r\n        <DataTable data={compData}>\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"revisedplannedquantity\"\r\n            field=\"revisedplannedquantity\"\r\n            header={t(\"ViewReceiptList_AdjustPlannedQuantity\")}\r\n            editable={false}\r\n            renderer={(cellData) => decimalDisplayValues(cellData)}\r\n            customEditRenderer={handleCustomEditTextBox}\r\n          ></DataTable.Column>\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            // editable={true}\r\n            field=\"AdjustedQuantity\"\r\n            key=\"AdjustedQuantity\"\r\n            header={t(\"ViewShipment_AdjustmentToPlannedQuantity\")}\r\n            renderer={handleInputTextBox}\r\n          />\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"UnLoadedQuantity\"\r\n            field=\"UnLoadedQuantity\"\r\n            header={t(\"ViewMarineReceiptList_UnloadedQuantity\")}\r\n            editable={false}\r\n            editFieldType=\"text\"\r\n            renderer={(cellData) => decimalDisplayValues(cellData)}\r\n            customEditRenderer={handleCustomEditTextBox}\r\n          ></DataTable.Column>\r\n        </DataTable>\r\n      </div>\r\n    ) : (\r\n      \"\"\r\n      // <div className=\"compartmentIcon\">\r\n      //     <div className=\"gridButtonAlignLeft\">\r\n      //         {t(\"CustomerInventory_NoRecordsFound\")}\r\n      //     </div>\r\n      // </div>\r\n    );\r\n  }\r\n  const handleAttributeType = (data) => {\r\n    const attribute = data.rowData;\r\n    const handleAttributeDateValue = (dateval) => {\r\n      var chars = dateval.split(\"-\");\r\n      return new Date(chars[0], chars[1] - 1, chars[2]);\r\n    };\r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n      var Dateval = new Date(value);\r\n      value =\r\n        Dateval.getFullYear() +\r\n        \"-\" +\r\n        (\"0\" + (Dateval.getMonth() + 1)).slice(-2) +\r\n        \"-\" +\r\n        (\"0\" + Dateval.getDate()).slice(-2);\r\n      handleCompAttributeCellDataEdit(attribute, value);\r\n    };\r\n    try {\r\n      return attribute.DataType.toLowerCase() ===\r\n        Constants.DataType.STRING.toLowerCase() ? (\r\n        <Input\r\n          fluid\r\n          value={attribute.AttributeValue}\r\n          disabled={attribute.IsReadonly}\r\n          onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n          reserveSpace={false}\r\n        />\r\n      ) : attribute.DataType.toLowerCase() ===\r\n        Constants.DataType.INT.toLowerCase() ? (\r\n        <Input\r\n          fluid\r\n          value={attribute.AttributeValue}\r\n          disabled={attribute.IsReadonly}\r\n          onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n          reserveSpace={false}\r\n        />\r\n      ) : attribute.DataType.toLowerCase() ===\r\n          Constants.DataType.FLOAT.toLowerCase() ||\r\n        attribute.DataType.toLowerCase() ===\r\n          Constants.DataType.LONG.toLowerCase() ||\r\n        attribute.DataType.toLowerCase() ===\r\n          Constants.DataType.DOUBLE.toLowerCase() ? (\r\n        <Input\r\n          fluid\r\n          value={\r\n            attribute.AttributeValue === null ||\r\n            attribute.AttributeValue === undefined ||\r\n            attribute.AttributeValue === \"\"\r\n              ? \"\"\r\n              : attribute.AttributeValue.toLocaleString()\r\n          }\r\n          disabled={attribute.IsReadonly}\r\n          onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n          reserveSpace={false}\r\n        />\r\n      ) : attribute.DataType.toLowerCase() ===\r\n        Constants.DataType.BOOL.toLowerCase() ? (\r\n        <Checkbox\r\n          checked={\r\n            attribute.AttributeValue.toString().toLowerCase() === \"true\"\r\n              ? true\r\n              : false\r\n          }\r\n          disabled={attribute.IsReadonly}\r\n          onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n        ></Checkbox>\r\n      ) : attribute.DataType.toLowerCase() ===\r\n        Constants.DataType.DATETIME.toLowerCase() ? (\r\n        <DatePicker\r\n          fluid\r\n          value={\r\n            attribute.AttributeValue === null ||\r\n            attribute.AttributeValue === undefined ||\r\n            attribute.AttributeValue === \"\"\r\n              ? \"\"\r\n              : handleAttributeDateValue(attribute.AttributeValue)\r\n          }\r\n          disabled={attribute.IsReadonly}\r\n          showYearSelector=\"true\"\r\n          onChange={(value) => convertAttributeDatetoString(data, value)}\r\n          onTextChange={(value) => {\r\n            convertAttributeDatetoString(data, value);\r\n          }}\r\n          minuteStep={1}\r\n          reserveSpace={false}\r\n        />\r\n      ) : null;\r\n    } catch (error) {\r\n      console.log(\"OrderDetails:Error occured on handleAttributeType\", error);\r\n    }\r\n  };\r\n  const handleIsRequiredCompAttributes = (data) => {\r\n    return data.rowData.IsMandatory ? (\r\n      <div>\r\n        <span>{data.rowData.AttributeName}</span>\r\n        <div className=\"ui red circular empty label badge  circle-padding\" />\r\n      </div>\r\n    ) : (\r\n      <div>\r\n        <span>{data.rowData.AttributeName}</span>\r\n      </div>\r\n    );\r\n  };\r\n  function rowExpansionAtributeTemplate(data) {\r\n    let compData = [];\r\n    compData.push(\"rowExpansionAtributeTemplate\", data);\r\n    return Array.isArray(data.AttributesforUI) &&\r\n      data.AttributesforUI.length > 0 ? (\r\n      <div className=\"childTable ChildGridViewAllShipmentLoadingDetails\">\r\n        <DataTable\r\n          data={data.AttributesforUI}\r\n          //  rows={5}\r\n          rows={compartmentDetailsPageSize}\r\n        >\r\n          {isEnterpriseNode ? (\r\n            <DataTable.Column\r\n              className=\"compColHeight\"\r\n              key=\"TerminalCode\"\r\n              field=\"TerminalCode\"\r\n              header={t(\"CompartmentTerminal\")}\r\n              editable={false}\r\n            ></DataTable.Column>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"AttributeName\"\r\n            header={t(\"CompartmentAttributeName\")}\r\n            renderer={handleIsRequiredCompAttributes}\r\n            editable={false}\r\n          ></DataTable.Column>\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            header={t(\"CompartmentAttributeValue\")}\r\n            renderer={handleAttributeType}\r\n          />\r\n          {Array.isArray(data.AttributesforUI) &&\r\n          data.AttributesforUI.length > compartmentDetailsPageSize ? (\r\n            <DataTable.Pagination />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </DataTable>\r\n      </div>\r\n    ) : (\r\n      <div className=\"compartmentIcon\">\r\n        <div className=\"gridButtonAlignLeft\">\r\n          {t(\"CustomerInventory_NoRecordsFound\")}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n    let attributeValidation = [];\r\n    attributeValidation = attributeValidationErrors.find(\r\n      (selectedAttribute) => {\r\n        return selectedAttribute.TerminalCode === terminal;\r\n      }\r\n    );\r\n    return attributeValidation.attributeValidationErrors;\r\n  };\r\n  return (\r\n    // <TranslationConsumer>\r\n    //   {(t) => (\r\n    <div className=\"detailsContainer\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-md-6 col-lg-4\">\r\n          <Input\r\n            fluid\r\n            value={modReceipt.ReceiptCode}\r\n            label={t(\"Receipt_Code\")}\r\n            indicator=\"required\"\r\n            disabled={receipt.ReceiptCode !== \"\"}\r\n            onChange={(data) => onFieldChange(\"ReceiptCode\", data)}\r\n            error={t(validationErrors.ReceiptCode)}\r\n            reserveSpace={false}\r\n          />\r\n        </div>\r\n        <div className=\"col-12 col-md-6 col-lg-4 planneddate\">\r\n          <DatePicker\r\n            fluid\r\n            value={new Date(modReceipt.ScheduledDate)}\r\n            initialWidth=\"160px\"\r\n            label={t(\"Receipt_ArrivalDateTime\")}\r\n            displayFormat={getCurrentDateFormat()}\r\n            type=\"datetime\"\r\n            showYearSelector=\"true\"\r\n            disablePast={IsPastDisable === true ? false : true}\r\n            indicator=\"required\"\r\n            minuteStep={1}\r\n            onChange={(data) => onFieldChange(\"ScheduledDate\", data)}\r\n            onTextChange={(value, error) => {\r\n              onDateTextChange(\"ScheduledDate\", value, error);\r\n            }}\r\n            error={t(validationErrors.ScheduledDate)}\r\n            reserveSpace={false}\r\n            // disabled={receipt.ReceiptStatus !== \"READY\"}\r\n            disabled={\r\n              receipt.ReceiptCode !== \"\" &&\r\n              modCustomValues[\"ReceiptUpdateAllow\"] !== \"TRUE\"\r\n            }\r\n          />\r\n        </div>\r\n        <div className=\"col-12 col-md-6 col-lg-4\">\r\n          <Input\r\n            fluid\r\n            value={\r\n              modReceipt.ReceiptStatus === null ? \"\" : modReceipt.ReceiptStatus\r\n            }\r\n            label={t(\"Receipt_ReceiptStatus\")}\r\n            disabled={true}\r\n          />\r\n        </div>\r\n        {!(\r\n          receipt.ReceiptStatus === Constants.Receipt_Status.READY &&\r\n          receipt.ReceiptCode === \"\"\r\n        ) &&\r\n        !isEnterpriseNode &&\r\n        isHSEInspectionEnable ? (\r\n          <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <Input\r\n              fluid\r\n              //  value={getVehicleHSEValue()}\r\n              value={modReceipt.HSEInspectionStatus}\r\n              label={t(\"Marine_ShipmentCompDetail_InspectionStatus\")}\r\n              reserveSpace={false}\r\n              disabled={true}\r\n            />\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div className=\"col-12 col-md-6 col-lg-4\">\r\n          <Select\r\n            fluid\r\n            placeholder={t(\"FinishedProductInfo_Select\")}\r\n            label={t(\"Receipt_Vehicle\")}\r\n            value={\r\n              modReceipt.VehicleCode === null ? \"\" : modReceipt.VehicleCode\r\n            }\r\n            options={listOptions.vehicleOptions}\r\n            onChange={(data) => {\r\n              onVehicleChange(data);\r\n            }}\r\n            indicator=\"required\"\r\n            search={true}\r\n            noResultsMessage={t(\"noResultsMessage\")}\r\n            error={t(validationErrors.VehicleCode)}\r\n            onSearch={onVehicleSearchChange}\r\n            reserveSpace={false}\r\n            // disabled={receipt.ReceiptStatus !== \"READY\"}\r\n            disabled={\r\n              receipt.ReceiptCode !== \"\" &&\r\n              modCustomValues[\"ReceiptUpdateAllow\"] !== \"TRUE\"\r\n            }\r\n          />\r\n        </div>\r\n\r\n        {/* <div className=\"col-12 col-md-6 col-lg-4\">\r\n          <div className=\"ui fluid\">\r\n            <InputLabel\r\n              label={t(\"Receipt_Vehicle\")}\r\n              indicator=\"required\"\r\n            ></InputLabel>\r\n            <Search\r\n              results={searchResults.vehicleOptions}\r\n              value={\r\n                modReceipt.VehicleCode === null ? \"\" : modReceipt.VehicleCode\r\n              }\r\n              disabled={receipt.ReceiptStatus !== \"READY\"}\r\n              onResultSelect={(result) => onVehicleChange(result.title)}\r\n              onSearchChange={(value) => onVehicleSearchChange(value)}\r\n              onResultClear={onVehicleResultsClear}\r\n              error={t(validationErrors.VehicleCode)}\r\n              reserveSpace={false}\r\n              noResultsMessage={t(\"noResultsMessage\")}\r\n            />\r\n          </div> */}\r\n        {/* </div> */}\r\n\r\n        <div className=\"col-12 col-md-6 col-lg-4\">\r\n          <Input\r\n            fluid\r\n            value={\r\n              modReceipt.CarrierCode === null ? \"\" : modReceipt.CarrierCode\r\n            }\r\n            label={t(\"Receipt_CarrierCompany\")}\r\n            disabled={true}\r\n            error={t(validationErrors.CarrierCode)}\r\n            reserveSpace={false}\r\n          />\r\n        </div>\r\n       \r\n        <div className=\"col-12 col-md-6 col-lg-4\">\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <Select className={isWebportalCarrierRoleUser?\"pr-2\":\"\"}\r\n            fluid\r\n            placeholder={t(\"FinishedProductInfo_Select\")}\r\n            label={t(\"Receipt_Driver\")}\r\n            value={modReceipt.DriverCode === null ? \"\" : modReceipt.DriverCode}\r\n            options={getOptionsWithSelect(\r\n              listOptions.driverOptions,\r\n              t(\"Common_Select\")\r\n            )}\r\n            onChange={(data) => {\r\n              onFieldChange(\"DriverCode\", data);\r\n            }}\r\n            search={true}\r\n            noResultsMessage={t(\"noResultsMessage\")}\r\n            // disabled={receipt.ReceiptStatus !== \"READY\"}\r\n           \r\n\r\n            disabled={ (isWebportalCarrierRoleUser && modCustomValues[\"ReceiptUpdateAllow\"] === \"TRUE\")?false:(receipt.ReceiptCode !== \"\"\r\n            ? modCustomValues[\"ReceiptUpdateAllow\"] !== \"TRUE\"\r\n            : false) }\r\n\r\n            onSearch={onDriverSearchChange}\r\n          />\r\n               {isWebportalCarrierRoleUser ? (\r\n\r\n            <Tooltip\r\n            content={t(\"ShipmentCompDetail_BtnSave\")}\r\n            element={\r\n              <Button  className=\"iconBtn mt-auto\"\r\n              type=\"primary\"\r\n\r\n              onClick={() => {\r\n                UpdateReceiptDriver();\r\n              }}\r\n              disabled={ receipt.ReceiptStatus === Constants.Receipt_Status.READY  ? false : true}\r\n            ><Icon root=\"building\" name=\"save\" size=\"large\" className=\"mt-auto\"/>\r\n\r\n            </Button>\r\n            }\r\n            position=\"left center\"\r\n            event=\"hover\"\r\n            hoverable={true}\r\n            />\r\n\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n        </div>\r\n        </div>\r\n        {!SupplierEnable ? (\r\n          <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <Select\r\n              fluid\r\n              placeholder={t(\"FinishedProductInfo_Select\")}\r\n              label={t(\"Receipt_Supplier\")}\r\n              value={modReceipt.SupplierCode}\r\n              options={listOptions.supplierOptions}\r\n              onChange={(data) => {\r\n                onSupplierChange(data);\r\n                //onFieldChange(\"SupplierCode\", data);\r\n              }}\r\n              indicator=\"required\"\r\n              search={true}\r\n              noResultsMessage={t(\"noResultsMessage\")}\r\n              error={t(validationErrors.SupplierCode)}\r\n              reserveSpace={false}\r\n              // disabled={receipt.ReceiptStatus !== \"READY\"}\r\n              disabled={\r\n                receipt.ReceiptCode !== \"\" &&\r\n                modCustomValues[\"ReceiptUpdateAllow\"] !== \"TRUE\"\r\n              }\r\n            />\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div className=\"col-12 col-md-6 col-lg-4\">\r\n          <Select\r\n            fluid\r\n            placeholder={t(\"FinishedProductInfo_Select\")}\r\n            label={t(\"Receipt_QuantityUOM\")}\r\n            value={\r\n              modReceipt.ReceiptQuantityUOM === null\r\n                ? \"\"\r\n                : modReceipt.ReceiptQuantityUOM\r\n            }\r\n            options={listOptions.quantityUOMOptions}\r\n            onChange={(data) => onFieldChange(\"ReceiptQuantityUOM\", data)}\r\n            indicator=\"required\"\r\n            error={t(validationErrors.ReceiptQuantityUOM)}\r\n            reserveSpace={false}\r\n            // disabled={receipt.ReceiptStatus !== \"READY\"}\r\n            disabled={\r\n              receipt.ReceiptCode !== \"\" &&\r\n              modCustomValues[\"ReceiptUpdateAllow\"] !== \"TRUE\"\r\n            }\r\n            search={true}\r\n            noResultsMessage={t(\"noResultsMessage\")}\r\n          />\r\n        </div>\r\n        {receipt.ReceiptCode !== \"\" &&\r\n        receipt.ReceiptStatus !== Constants.Receipt_Status.READY ? (\r\n          <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <Input\r\n              fluid\r\n              value={modReceipt.ActualTerminalCode}\r\n              label={t(\"Shipment_LoadedTerminal\")}\r\n              options={Utilities.transferListtoOptions([\r\n                modReceipt.ActualTerminalCode,\r\n              ])}\r\n              reserveSpace={false}\r\n              disabled={true}\r\n              multiple={true}\r\n            />\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div className=\"col-12 col-md-6 col-lg-4\">\r\n          <Input\r\n            fluid\r\n            value={\r\n              modReceipt.Description === null ? \"\" : modReceipt.Description\r\n            }\r\n            onChange={(data) => onFieldChange(\"Description\", data)}\r\n            label={t(\"Receipt_Desc\")}\r\n            error={t(validationErrors.Description)}\r\n            reserveSpace={false}\r\n            // disabled={receipt.ReceiptStatus !== \"READY\"}\r\n            disabled={\r\n              receipt.ReceiptCode !== \"\" &&\r\n              modCustomValues[\"ReceiptUpdateAllow\"] !== \"TRUE\"\r\n            }\r\n          />\r\n        </div>\r\n        {/* <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder={t(\"FinishedProductInfo_Select\")}\r\n                label={t(\"Receipt_Driver\")}\r\n                value={\r\n                  modReceipt.DriverCode === null ? \"\" : modReceipt.DriverCode\r\n                }\r\n                options={getOptionsWithSelect(\r\n                  listOptions.driverOptions,\r\n                  t(\"Common_Select\")\r\n                )}\r\n                onChange={(data) => {\r\n                  onFieldChange(\"DriverCode\", data);\r\n                }}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n                disabled={receipt.ReceiptStatus !== \"READY\"}\r\n              />\r\n            </div> */}\r\n\r\n        <div className=\"col-12 col-md-6 col-lg-4\">\r\n          <Select\r\n            fluid\r\n            placeholder={t(\"FinishedProductInfo_Select\")}\r\n            label={t(\"Receipt_Status\")}\r\n            value={modReceipt.Active}\r\n            options={[\r\n              { text: t(\"Receipt_Active\"), value: true },\r\n              { text: t(\"Receipt_InActive\"), value: false },\r\n            ]}\r\n            onChange={(data) => onActiveStatusChange(data)}\r\n            disabled={receipt.ReceiptStatus !== \"READY\"}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-12 col-md-6 col-lg-4\">\r\n          <Input\r\n            fluid\r\n            value={modReceipt.Remarks === null ? \"\" : modReceipt.Remarks}\r\n            label={t(\"Receipt_Remarks\")}\r\n            onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n            indicator={modReceipt.Active !== receipt.Active ? \"required\" : \"\"}\r\n            error={t(validationErrors.Remarks)}\r\n            reserveSpace={false}\r\n            disabled={\r\n              receipt.ReceiptCode !== \"\" &&\r\n              modCustomValues[\"ReceiptUpdateAllow\"] !== \"TRUE\"\r\n            }\r\n          />\r\n        </div>\r\n        {receipt.ReceiptCode !== \"\" && isSlotbookinginUI ? (\r\n          <div className=\"col-12 col-md-6 col-lg-4 ddlSelectAll\">\r\n            <div className=\"ui single-input fluid disabled\">\r\n              <div className=\"ui input-label\">\r\n                <span className=\"input-label-message\">\r\n                  {t(\"ViewShipment_IsSlotBooked\")}\r\n                </span>\r\n              </div>\r\n              <div className=\"input-wrap\">\r\n                <label style={{ fontWeight: \"bold\" }}>\r\n                  {modReceipt.SlotBooked ? \"Booked\" : \"Not Booked\"}\r\n                </label>\r\n                {/* <Checkbox\r\n                                            //className=\"LabelEnabled\"\r\n                                            //label={t(\"ViewShipment_IsSlotBooked\")}\r\n                                            checked={modShipment.SlotBooked}\r\n                                            disabled={true}\r\n                                        /> */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {receipt.ReceiptCode !== \"\" &&\r\n        receipt.ReceiptStatus !== \"READY\" &&\r\n        receipt.ReceiptStatus !== \"CLOSE\" &&\r\n        ReceiptBay !== null &&\r\n        ReceiptBay !== \"\" &&\r\n        ReceiptBay !== undefined ? (\r\n          <div className=\"col-12 col-md-6 col-lg-4 ddlSelectAll\">\r\n            <div className=\"ui single-input fluid disabled\">\r\n              <div className=\"ui input-label\">\r\n                <span className=\"input-label-message\">\r\n                  {t(\"ViewAllocateBay_AllocateBay\")}\r\n                  {\":\"}\r\n                </span>\r\n              </div>\r\n              <div className=\"input-wrap\">\r\n                <label style={{ fontWeight: \"bold\" }}>{ReceiptBay}</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {isBonded ? (\r\n          <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <div\r\n              className=\"ui single-input fluid disabled\"\r\n              style={{ width: \"30%\", float: \"left\" }}\r\n            >\r\n              <div class=\"ui input-label\">\r\n                <span className=\"input-label-message\">\r\n                  {t(\"VehicleInfo_Bonded\")}\r\n                </span>\r\n              </div>\r\n              <div className=\"input-wrap\">\r\n                <Checkbox\r\n                  onChange={(data) => onFieldChange(\"IsBonded\", data)}\r\n                  checked={modReceipt.IsBonded}\r\n                  disabled={receipt.ReceiptStatus !== \"READY\"}\r\n                />\r\n              </div>\r\n            </div>\r\n            {modReceipt.IsBonded ? (\r\n              <div style={{ width: \"70%\", float: \"right\" }}>\r\n                <Input\r\n                  fluid\r\n                  value={modReceipt.BondNo === null ? \"\" : modReceipt.BondNo}\r\n                  onChange={(data) => onFieldChange(\"BondNo\", data)}\r\n                  label={t(\"RailDispatchPlanDetail_BondedNumber\")}\r\n                  reserveSpace={false}\r\n                  // disabled={\r\n                  //   modReceipt.ReceiptCode !== \"\"\r\n                  //   // && modCustomValues[\"BondUpdateAllow\"] !== \"TRUE\"\r\n                  // }\r\n                />\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {receipt.ReceiptCode !== \"\" && modReceipt.IsBonded && isBonded ? (\r\n          <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <Button\r\n              content={t(\"ReceiptViewDetail_SaveReceiptBondNo\")}\r\n              // disabled={\r\n              //     // modCustomValues[\"BondUpdateAllow\"] !== \"TRUE\"\r\n              // }\r\n              onClick={UpdateReceiptBondNo}\r\n            ></Button>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {isEnterpriseNode ? (\r\n          <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <AssociatedTerminals\r\n              terminalList={listOptions.terminalCodes}\r\n              selectedTerminal={modReceipt.TerminalCodes}\r\n              error={t(validationErrors.TerminalCodes)}\r\n              onFieldChange={onFieldChange}\r\n              onCheckChange={onAllTerminalsChange}\r\n            ></AssociatedTerminals>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n      {selectedAttributeList.length > 0\r\n        ? selectedAttributeList.map((attire) => (\r\n            <ErrorBoundary>\r\n              <Accordion>\r\n                <Accordion.Content\r\n                  className=\"attributeAccordian\"\r\n                  title={\r\n                    isEnterpriseNode\r\n                      ? attire.TerminalCode + \" - \" + t(\"Attributes_Header\")\r\n                      : t(\"Attributes_Header\")\r\n                  }\r\n                >\r\n                  <AttributeDetails\r\n                    selectedAttributeList={attire.attributeMetaDataList}\r\n                    handleCellDataEdit={handleAttributeCellDataEdit}\r\n                    attributeValidationErrors={handleValidationErrorFilter(\r\n                      attributeValidationErrors,\r\n                      attire.TerminalCode\r\n                    )}\r\n                  ></AttributeDetails>\r\n                </Accordion.Content>\r\n              </Accordion>\r\n            </ErrorBoundary>\r\n          ))\r\n        : null}\r\n      {/* {IsWebPortalUser ? ( */}\r\n      <div className=\"shipmentTabAlignment\">\r\n        <Tab\r\n          activeIndex={activeTab}\r\n          onTabChange={(activeIndex) => {\r\n            onTabChange(activeIndex);\r\n          }}\r\n        >\r\n          <Tab.Pane title={t(\"Receipt_PlanHeader\")}>\r\n            <div className=\"row compartmentRow\">\r\n              <div className=\"col \">\r\n                <div className=\"compartmentIconContainer\">\r\n                  <div\r\n                    onClick={handleAddAssociation}\r\n                    className=\"compartmentIcon\"\r\n                  >\r\n                    <div>\r\n                      <Icon root=\"common\" name=\"badge-plus\" size=\"medium\" />\r\n                    </div>\r\n                    <div className=\"margin_l10\">\r\n                      <h5 className=\"font14\">{t(\"TrailerInfo_Add\")}</h5>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div\r\n                    onClick={handleDeleteAssociation}\r\n                    className=\"compartmentIcon margin_l30\"\r\n                  >\r\n                    <div>\r\n                      <Icon root=\"common\" name=\"delete\" size=\"medium\" />\r\n                    </div>\r\n                    <div className=\"margin_l10\">\r\n                      <h5 className=\"font14\">{t(\"TrailerInfo_Delete\")}</h5>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"row marginRightZero tableScroll\">\r\n              <div className=\"col-12 detailsTable\">\r\n                <DataTable\r\n                  data={modAssociations}\r\n                  selectionMode=\"multiple\"\r\n                  selection={selectedAssociations}\r\n                  onSelectionChange={handleRowSelectionChange}\r\n                  scrollable={true}\r\n                  scrollHeight=\"320px\"\r\n                  expandedRows={expandedRows}\r\n                  rowExpansionTemplate={rowExpansionAtributeTemplate}\r\n                >\r\n                  <DataTable.Column\r\n                    className=\"compColHeight colminWidth\"\r\n                    key=\"CompartmentSeqNoInVehicle\"\r\n                    field=\"CompartmentSeqNoInVehicle\"\r\n                    header={t(\"Receipt_CompSeqInVehicle\")}\r\n                    // editable={modReceipt.ReceiptStatus === Constants.Receipt_Status.READY ? true : false}\r\n                    editable={\r\n                      receipt.ReceiptCode !== \"\" &&\r\n                      modCustomValues[\"ReceiptUpdateAllow\"] === \"TRUE\"\r\n                        ? true\r\n                        : false\r\n                    }\r\n                    editFieldType=\"text\"\r\n                    customEditRenderer={(celldata) =>\r\n                      handleCustomEditDropDown(\r\n                        celldata,\r\n                        listOptions.compSeqOptions\r\n                      )\r\n                    }\r\n                  ></DataTable.Column>\r\n                  <DataTable.Column\r\n                    className=\"compColHeight colminWidth\"\r\n                    key=\"CompartmentCode\"\r\n                    field=\"CompartmentCode\"\r\n                    header={t(\"Receipt_CompartmentCode\")}\r\n                    // editable={modReceipt.ReceiptStatus === Constants.Receipt_Status.READY ? true : false}\r\n                    editable={\r\n                      modReceipt.ReceiptStatus ===\r\n                        Constants.Receipt_Status.READY ||\r\n                      modCustomValues[\"ReceiptUpdateAllow\"] === \"TRUE\"\r\n                        ? true\r\n                        : false\r\n                    }\r\n                    editFieldType=\"text\"\r\n                    customEditRenderer={(celldata) =>\r\n                      handleCustomEditDropDown(\r\n                        celldata,\r\n                        listOptions.compSeqOptions\r\n                      )\r\n                    }\r\n                  ></DataTable.Column>\r\n                  <DataTable.Column\r\n                    className=\"compColHeight colminWidth\"\r\n                    key=\"FinishedProductCode\"\r\n                    field=\"FinishedProductCode\"\r\n                    header={t(\"Receipt_Product\")}\r\n                    // editable={modReceipt.ReceiptStatus === Constants.Receipt_Status.READY ? true : false}\r\n                    editable={\r\n                      modReceipt.ReceiptStatus ===\r\n                        Constants.Receipt_Status.READY ||\r\n                      modCustomValues[\"ReceiptUpdateAllow\"] === \"TRUE\"\r\n                        ? true\r\n                        : false\r\n                    }\r\n                    editFieldType=\"text\"\r\n                    customEditRenderer={(celldata) =>\r\n                      handleCustomEditDropDown(\r\n                        celldata,\r\n                        listOptions.finishedProductOptions\r\n                      )\r\n                    }\r\n                  ></DataTable.Column>\r\n                  {SupplierEnable ? (\r\n                    <DataTable.Column\r\n                      className=\"compColHeight colminWidth\"\r\n                      key=\"SupplierCode\"\r\n                      field=\"SupplierCode\"\r\n                      header={t(\"Receipt_Supplier\")}\r\n                      // editable={modReceipt.ReceiptStatus === Constants.Receipt_Status.READY ? true : false}\r\n                      editable={\r\n                        modReceipt.ReceiptStatus ===\r\n                          Constants.Receipt_Status.READY ||\r\n                        modCustomValues[\"ReceiptUpdateAllow\"] === \"TRUE\"\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      editFieldType=\"text\"\r\n                      customEditRenderer={(celldata) =>\r\n                        handleCustomEditDropDown(\r\n                          celldata,\r\n                          listOptions.supplierOptions\r\n                        )\r\n                      }\r\n                    ></DataTable.Column>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {SupplierEnable ? (\r\n                    <DataTable.Column\r\n                      className=\"compColHeight colminWidth\"\r\n                      key=\"OriginTerminalCode\"\r\n                      field=\"OriginTerminalCode\"\r\n                      header={t(\"OriginTerminal\")}\r\n                      // editable={modReceipt.ReceiptStatus === Constants.Receipt_Status.READY ? true : false}\r\n                      editable={\r\n                        modReceipt.ReceiptStatus ===\r\n                          Constants.Receipt_Status.READY ||\r\n                        modCustomValues[\"ReceiptUpdateAllow\"] === \"TRUE\"\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      editFieldType=\"text\"\r\n                      customEditRenderer={(celldata) =>\r\n                        handleEnableOriginTerminalEditDropDown(\r\n                          celldata,\r\n                          listOptions.originalterminalOptions\r\n                        )\r\n                      }\r\n                    ></DataTable.Column>\r\n                  ) : (\r\n                    <DataTable.Column\r\n                      className=\"compColHeight colminWidth\"\r\n                      key=\"OriginTerminalCode\"\r\n                      field=\"OriginTerminalCode\"\r\n                      header={t(\"OriginTerminal\")}\r\n                      // editable={modReceipt.ReceiptStatus === Constants.Receipt_Status.READY ? true : false}\r\n                      editable={\r\n                        modReceipt.ReceiptStatus ===\r\n                          Constants.Receipt_Status.READY ||\r\n                        modCustomValues[\"ReceiptUpdateAllow\"] === \"TRUE\"\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      editFieldType=\"text\"\r\n                      customEditRenderer={(celldata) =>\r\n                        handleOriginTerminalEditDropDown(\r\n                          celldata,\r\n                          listOptions.originalterminalOptions\r\n                        )\r\n                      }\r\n                    ></DataTable.Column>\r\n                  )}\r\n                  <DataTable.Column\r\n                    className=\"compColHeight colminWidth\"\r\n                    key=\"Quantity\"\r\n                    field=\"Quantity\"\r\n                    header={t(\"Receipt_Quantity\")}\r\n                    // editable={modReceipt.ReceiptStatus === Constants.Receipt_Status.READY ? true : false}\r\n                    editable={\r\n                      modReceipt.ReceiptStatus ===\r\n                        Constants.Receipt_Status.READY ||\r\n                      modCustomValues[\"ReceiptUpdateAllow\"] === \"TRUE\"\r\n                        ? true\r\n                        : false\r\n                    }\r\n                    editFieldType=\"text\"\r\n                    renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                    customEditRenderer={handleCustomEditTextBox}\r\n                  ></DataTable.Column>\r\n                  <DataTable.Column\r\n                    className=\"expandedColumn\"\r\n                    initialWidth=\"200px\"\r\n                    renderer={expanderAttributeTemplate}\r\n                  />\r\n                </DataTable>\r\n              </div>\r\n            </div>\r\n          </Tab.Pane>\r\n\r\n          {compartmentTab ? (\r\n            <Tab.Pane title={t(\"ViewReceiptList_CompartmentDetails\")}>\r\n              {\" \"}\r\n              <div className=\"row marginRightZero tableScroll\">\r\n                <div className=\"col-12 detailsTable\">\r\n                  <DataTable\r\n                    data={modCompartments}\r\n                    rowExpansionTemplate={rowExpansionTemplate}\r\n                    scrollable={true}\r\n                    scrollHeight=\"320px\"\r\n                    expandedRows={expandedRows}\r\n                  >\r\n                    <DataTable.Column\r\n                      className=\"compColHeight colminWidth\"\r\n                      key=\"TrailerCode\"\r\n                      field=\"TrailerCode\"\r\n                      header={t(\"ViewReceipt_TrailerCode\")}\r\n                      editable={true}\r\n                      editFieldType=\"text\"\r\n                    ></DataTable.Column>\r\n                    {/* <DataTable.Column\r\n                                      className=\"compColHeight\"\r\n                                      key=\"CompartmentSeqNoInVehicle\"\r\n                                      field=\"CompartmentSeqNoInVehicle\"\r\n                                      header={t(\"Receipt_CompSeqInVehicle\")}\r\n                                      editable={true}\r\n                                      editFieldType=\"text\"\r\n                                      customEditRenderer={(celldata) =>\r\n                                        handleCustomEditDropDown(celldata, listOptions.compSeqOptions)\r\n                                      }\r\n                                    ></DataTable.Column> */}\r\n                    <DataTable.Column\r\n                      className=\"compColHeight colminWidth\"\r\n                      key=\"CompartmentCode\"\r\n                      field=\"CompartmentCode\"\r\n                      header={t(\"Receipt_CompartmentCode\")}\r\n                      editable={\r\n                        modReceipt.ReceiptStatus ===\r\n                        Constants.Receipt_Status.READY\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      editFieldType=\"text\"\r\n                      customEditRenderer={(celldata) =>\r\n                        handleCustomEditDropDown(\r\n                          celldata,\r\n                          listOptions.compSeqOptions\r\n                        )\r\n                      }\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight colminWidth\"\r\n                      key=\"FinishedProductCode\"\r\n                      field=\"FinishedProductCode\"\r\n                      header={t(\"Receipt_Product\")}\r\n                      editable={\r\n                        modReceipt.ReceiptStatus ===\r\n                        Constants.Receipt_Status.READY\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      editFieldType=\"text\"\r\n                    ></DataTable.Column>\r\n\r\n                    <DataTable.Column\r\n                      className=\"compColHeight colminWidth\"\r\n                      key=\"Quantity\"\r\n                      field=\"Quantity\"\r\n                      header={t(\"ViewReceipt_Quantity\")}\r\n                      editable={\r\n                        modReceipt.ReceiptStatus ===\r\n                        Constants.Receipt_Status.READY\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      editFieldType=\"text\"\r\n                      renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                      customEditRenderer={handleCustomEditTextBox}\r\n                    ></DataTable.Column>\r\n\r\n                    <DataTable.Column\r\n                      className=\"compColHeight colminWidth\"\r\n                      key=\"CompartmentStaus\"\r\n                      field=\"CompartmentStaus\"\r\n                      header={t(\"ViewCompartment_Status\")}\r\n                      editable={false}\r\n                      renderer={(celldata) =>\r\n                        handleStatus(celldata.rowData.CompartmentStaus)\r\n                      }\r\n                      customEditRenderer={handleCustomEditTextBox}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight\"\r\n                      initialWidth=\"100px\"\r\n                      //  key=\"ForceCompleted\"\r\n                      //  field=\"ForceCompleted\"\r\n                      header={t(\"ViewShipment_ForceComplete\")}\r\n                      renderer={handleForceComplete}\r\n                    />\r\n                    <DataTable.Column\r\n                      className=\"expandedColumn\"\r\n                      initialWidth=\"50px\"\r\n                      renderer={expanderTemplate}\r\n                    />\r\n                  </DataTable>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col col-lg-4\"></div>\r\n              </div>\r\n            </Tab.Pane>\r\n          ) : (\r\n            []\r\n          )}\r\n\r\n          {customerInventoryTab ? (\r\n            <Tab.Pane title={t(\"CustomerInventory_Plan\")}>\r\n              <div>\r\n                <div className=\"row compartmentRow\">\r\n                  <div className=\"col \">\r\n                    <div className=\"compartmentIconContainer\">\r\n                      <div\r\n                        onClick={handleAddCustomerInventory}\r\n                        className=\"compartmentIcon\"\r\n                      >\r\n                        <div>\r\n                          <Icon root=\"common\" name=\"badge-plus\" size=\"medium\" />\r\n                        </div>\r\n                        <div className=\"margin_l10\">\r\n                          <h5 className=\"font14\">{t(\"TrailerInfo_Add\")}</h5>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div\r\n                        onClick={handleDeleteCustomerInventory}\r\n                        className=\"compartmentIcon margin_l30\"\r\n                      >\r\n                        <div>\r\n                          <Icon root=\"common\" name=\"delete\" size=\"medium\" />\r\n                        </div>\r\n                        <div className=\"margin_l10\">\r\n                          <h5 className=\"font14\">{t(\"TrailerInfo_Delete\")}</h5>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row marginRightZero\">\r\n                  <div className=\"col-12 detailsTable\">\r\n                    <DataTable\r\n                      data={modCustomerInventory}\r\n                      scrollable={true}\r\n                      scrollHeight=\"320px\"\r\n                      selectionMode=\"multiple\"\r\n                      selection={selectedCustomerInventory}\r\n                      onSelectionChange={handleCustomerSelectionChange}\r\n                    >\r\n                      <DataTable.Column\r\n                        className=\"compColHeight colminWidth\"\r\n                        key=\"CustomerCode\"\r\n                        field=\"CustomerCode\"\r\n                        header={t(\"Customer_Code\")}\r\n                        //  editable={modReceipt.ReceiptStatus === Constants.Receipt_Status.READY ? true : false}\r\n                        editable={\r\n                          modReceipt.ReceiptStatus ===\r\n                            Constants.Receipt_Status.READY ||\r\n                          modCustomValues[\"ReceiptUpdateAllow\"] === \"TRUE\"\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        editFieldType=\"text\"\r\n                        renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                        customEditRenderer={(celldata) =>\r\n                          handleCustomerInvetoryEditDropDown(\r\n                            celldata,\r\n                            listOptions.customerOptions\r\n                          )\r\n                        }\r\n                      ></DataTable.Column>\r\n                      {/* {modReceipt.ReceiptCode == \"\" && modReceipt.ReceiptStatus === Constants.Receipt_Status.READY  ? */}\r\n                      <DataTable.Column\r\n                        className=\"compColHeight colminWidth\"\r\n                        key=\"FinishedProductCode\"\r\n                        field=\"FinishedProductCode\"\r\n                        header={t(\"Receipt_Product\")}\r\n                        // editable={modReceipt.ReceiptStatus === Constants.Receipt_Status.READY ? true : false}\r\n                        editable={\r\n                          modReceipt.ReceiptStatus ===\r\n                            Constants.Receipt_Status.READY ||\r\n                          modCustomValues[\"ReceiptUpdateAllow\"] === \"TRUE\"\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        editFieldType=\"text\"\r\n                        renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                        customEditRenderer={(celldata) =>\r\n                          handleCustomerInvetoryEditDropDown(\r\n                            celldata,\r\n                            listOptions.finishedProductOptions\r\n                          )\r\n                        }\r\n                      ></DataTable.Column>\r\n                      <DataTable.Column\r\n                        className=\"compColHeight colminWidth\"\r\n                        key=\"PlannedQuantity\"\r\n                        field=\"PlannedQuantity\"\r\n                        // editable={modReceipt.ReceiptStatus === Constants.Receipt_Status.READY ? true : false}\r\n                        editable={\r\n                          modReceipt.ReceiptStatus ===\r\n                            Constants.Receipt_Status.READY ||\r\n                          modCustomValues[\"ReceiptUpdateAllow\"] === \"TRUE\"\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        editFieldType=\"text\"\r\n                        renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                        customEditRenderer={handleCustomerInvetoryEditTextBox}\r\n                        header={t(\"ViewShipmentCompartment_PlannedQuantity\")}\r\n                      ></DataTable.Column>\r\n                    </DataTable>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Tab.Pane>\r\n          ) : (\r\n            []\r\n          )}\r\n          {recordweightTab ? (\r\n            <Tab.Pane title={t(\"ViewReceiptList_RecordWeight\")}>\r\n              {\" \"}\r\n              <div className=\"row marginRightZero tableScroll\">\r\n                <div className=\"col-12 detailsTable\">\r\n                  <DataTable\r\n                    data={modRecordWeight}\r\n                    scrollable={true}\r\n                    scrollHeight=\"320px\"\r\n                  >\r\n                    <DataTable.Column\r\n                      className=\"compColHeight colminWidth\"\r\n                      key=\"WeighbridgeCode\"\r\n                      field=\"WeighbridgeCode\"\r\n                      header={t(\"ReceiptByCompartmentList_WeightBridgeCode\")}\r\n                      editable={false}\r\n                      editFieldType=\"text\"\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight colminWidth\"\r\n                      key=\"MeasuredWeight\"\r\n                      field=\"MeasuredWeight\"\r\n                      header={t(\"ReceiptByCompartmentList_Weight\")}\r\n                      editable={false}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight colminWidth\"\r\n                      key=\"weight\"\r\n                      field=\"weight\"\r\n                      header={t(\"ReceiptByCompartmentList_WeightType\")}\r\n                      editable={false}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                      className=\"compColHeight colminWidth\"\r\n                      key=\"MeasuredWeightTime\"\r\n                      field=\"MeasuredWeightTime\"\r\n                      header={t(\"ReceiptByCompartmentList_WeightDatetime\")}\r\n                      editable={false}\r\n                    ></DataTable.Column>\r\n                  </DataTable>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col col-lg-4\"></div>\r\n              </div>\r\n            </Tab.Pane>\r\n          ) : (\r\n            []\r\n          )}\r\n        </Tab>\r\n      </div>\r\n      {displayTMModalForceCompleteConfirm()}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TruckReceiptDetails from \"../../UIBase/Details/TruckReceiptDetails\";\r\nimport TransactionSummaryOperations from \"../Common/TransactionSummaryOperations\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { receiptValidationDef } from \"../../../JS/ValidationDef\";\r\nimport { receiptCompartmentValidationDef } from \"../../../JS/DetailsTableValidationDef\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport {\r\n  functionGroups,\r\n  fnTruckReceipt,\r\n  fnKPIInformation,\r\n  fnCloseReceipt,\r\n  fnViewReceiptStatus,\r\n  fnPrintBOD,\r\n  fnPrintRAN,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport { emptyReceipt } from \"../../../JS/DefaultEntities\";\r\nimport axios from \"axios\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { toast } from \"react-toastify\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport TruckReceiptManualEntryDetailsComposite from \"../Details/TruckReceiptManualEntryDetailsComposite\";\r\nimport { TruckReceiptViewAuditTrailDetails } from \"../../UIBase/Details/TruckReceiptViewAuditTrailsDetails\";\r\nimport { TruckReceiptViewUnLoadingDetails } from \"../../UIBase/Details/TruckReceiptViewUnLoadingDetails\";\r\nimport {\r\n  receiptAttributeEntity,\r\n  receiptOriginTerminalCompartment,\r\n} from \"../../../JS/AttributeEntity\";\r\nimport { Modal, Button, Select, Input, Checkbox } from \"@scuf/common\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiTruckReceiptDetail } from \"../../../JS/KPIPageName\";\r\nimport TruckReceiptSealDetailsComposite from \"../Details/TruckReceiptSealDetailsComposite\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\n\r\nclass TruckReceiptDetailsComposite extends Component {\r\n  state = {\r\n    receipt: {},\r\n    modReceipt: {},\r\n    modAssociations: [],\r\n    modCompartments: [],\r\n    modCustomerInventory: [],\r\n    vehicleDetails: { carrierCode: \"\", vehicleCompartments: [] },\r\n    modVehicleDetails: { carrierCode: \"\", vehicleCompartments: [] },\r\n    validationErrors:\r\n      Utilities.getInitialValidationErrors(receiptValidationDef),\r\n    isReadyToRender: false,\r\n    saveEnabled: false,\r\n    selectedAssociations: [],\r\n    selectedCustomerInventory: [],\r\n    vehicleOptions: [],\r\n    driverOptions: [],\r\n    quantityUOMOptions: [],\r\n    finishedProductOptions: [],\r\n    baseProductCodeOptions: [],\r\n    compSeqOptions: [],\r\n    supplierOriginTerminalsList: [],\r\n    vehicleSearchOptions: [],\r\n    driverSearchOptions: [],\r\n    isPlanned: false,\r\n    activeTab: 0,\r\n    shipmentNextOperations: [],\r\n    currentReceiptStatus: [],\r\n    isManualEntry: false,\r\n    expandedRows: [],\r\n    customerInventoryTab: false,\r\n    customerptions: [],\r\n    customerInventory: [],\r\n    customerCode: [],\r\n    baseProductOptions: [],\r\n    customerOptions: [],\r\n    compartmentTab: false,\r\n    auditTrailList: [],\r\n    modAuditTrailList: [],\r\n    ModViewUnloadDetails: [],\r\n    attributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    selectedAttributeList: [],\r\n    supplierOptions: [],\r\n    receiptCompartmentDetails: [],\r\n    forceCompleteIsDisable: false,\r\n    IsPastDisable: false,\r\n    SupplierEnable: false,\r\n    isHSEInspectionEnable: false,\r\n    drawerStatus:\r\n      this.props.userDetails.EntityResult.IsWebPortalUser === true\r\n        ? true\r\n        : false,\r\n    compartmentAttributeMetaDataList: [],\r\n    isRecordWeight: false,\r\n    isSealCompartments: false,\r\n    sealCompartments: [],\r\n    recordWeightList: [],\r\n    weighBridgeCode: \"\",\r\n    scadaValue: \"\",\r\n    allowOutofRangeTW: false,\r\n    isBonded: false,\r\n    bondExpiryDate: null,\r\n    isVehicleBonded: false,\r\n    vehicleBondPopUp: false,\r\n    vehicleBondExpiryPopUp: false,\r\n    stockProducts: false,\r\n    loadingExpandedRows: [],\r\n    recordweightTab: false,\r\n    customerinventoryChange: false,\r\n    compartmentChange: false,\r\n    modRecordWeight: [],\r\n    isCloseReceipt: false,\r\n    reasonForClosure: \"\",\r\n    modCustomValues: {},\r\n    truckReceiptKPIList: [],\r\n    showReceiptAuthenticationLayout: false,\r\n    showAuthorizeToUnLoadAuthenticationLayout: false,\r\n    showAllowToUnLoadAuthenticationLayout: false,\r\n    showCloseReceiptAuthenticationLayout: false,\r\n    showViewBODAuthenticationLayout: false,\r\n    showPrintBODAuthenticationLayout: false,\r\n    showRANAuthenticationLayout: false,\r\n    tempReceipt: {},\r\n    isAllocateBay: false,\r\n    bayData: [],\r\n    selectBay: [],\r\n    isDeAllocateBay: false,\r\n    ReceiptBay: \"\",\r\n  };\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      // this.getReceipt(this.props.selectedRow);\r\n      this.GetUOMList();\r\n      this.getVehicleCodes(this.props.selectedShareholder);\r\n      this.getDriverCodes(this.props.selectedShareholder);\r\n      this.getFinishedProductCodes(this.props.selectedShareholder);\r\n      this.GetSupplierOriginTerminals(this.props.selectedShareholder);\r\n      this.getLookUpData();\r\n      this.getcustomerList(this.props.selectedShareholder);\r\n      this.GetViewAllReceiptCustomData();\r\n      //  this.getReceiptCompartmentDetails(this.props.selectedRow);\r\n      this.getBaseProducts(\"\");\r\n      this.getAttributes(this.props.selectedRow);\r\n      this.getReceiptConfigLookUpTypeName();\r\n      this.getReceiptBYCompartmentLookUpData();\r\n      this.getLookUpHsEInSpectionEnableData();\r\n      this.IsBonded();\r\n    } catch (error) {\r\n      console.log(\r\n        \"TruckReceiptDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      let ReceiptCode = this.state.receipt.receiptCode;\r\n      if (\r\n        ReceiptCode !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.setState({ isPlanned: false, activeTab: 0, isManualEntry: false });\r\n        this.getReceipt(nextProps.selectedRow, 0);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TruckReceiptDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  updateReceipt(modReceipt) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.receiptCode,\r\n        value: modReceipt.ReceiptCode,\r\n      },\r\n    ];\r\n\r\n    let obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.receiptCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modReceipt,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"Receipt_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"Receipt_Code\"],\r\n          keyValues: [modReceipt.ReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.UpdateReceipt,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        this.handleAuthenticationClose();\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnTruckReceipt\r\n              ),\r\n            },\r\n            () => this.getReceipt({ Common_Code: modReceipt.ReceiptCode })\r\n          );\r\n        } else {\r\n          this.handleAuthenticationClose();\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnTruckReceipt\r\n            ),\r\n          });\r\n          console.log(\"Error in UpdateReceipt:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(modReceipt, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.handleAuthenticationClose();\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnTruckReceipt\r\n          ),\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(modReceipt, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  createReceipt(modReceipt) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.receiptCode,\r\n        value: modReceipt.ReceiptCode,\r\n      },\r\n    ];\r\n\r\n    let obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.receiptCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modReceipt,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"Receipt_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"Receipt_Code\"],\r\n          keyValues: [modReceipt.ReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.CreateReceipt,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        this.handleAuthenticationClose();\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              // saveEnabled: Utilities.isInFunction(\r\n              //   this.props.userDetails.EntityResult.FunctionsList,\r\n              //   functionGroups.modify,\r\n              //   fnTruckReceipt\r\n              // ),\r\n            },\r\n            () => this.getReceipt({ Common_Code: modReceipt.ReceiptCode })\r\n          );\r\n        } else {\r\n          this.handleAuthenticationClose();\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: true,\r\n          });\r\n          console.log(\"Error in CreateReceipt:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(modReceipt, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: true,\r\n        });\r\n        this.handleAuthenticationClose();\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(modReceipt, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  validateSave(modReceipt, attributeList) {\r\n    try {\r\n      var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      Object.keys(receiptValidationDef).forEach(function (key) {\r\n        validationErrors[key] = Utilities.validateField(\r\n          receiptValidationDef[key],\r\n          modReceipt[key]\r\n        );\r\n      });\r\n      if (modReceipt.Active !== this.state.receipt.Active) {\r\n        if (modReceipt.Remarks === null || modReceipt.Remarks === \"\") {\r\n          validationErrors[\"Remarks\"] = \"Receipt_RemarksRequired\";\r\n        }\r\n      }\r\n\r\n      // if (validationErrors[\"VehicleCode\"] === \"\") {\r\n      //   let vehicleIdentified = this.state.vehicleOptions.find(\r\n      //     (element) =>\r\n      //       element.title.toLowerCase() === modReceipt.VehicleCode.toLowerCase()\r\n      //   );\r\n      //   if (vehicleIdentified === undefined) {\r\n      //     validationErrors[\"VehicleCode\"] =\r\n      //       \"ShipmentCompDetail_VEHICLECODENULLOREMPTY\";\r\n      //   }\r\n      // }\r\n      // if (\r\n      //   modReceipt.DriverCode !== null &&\r\n      //   modReceipt.DriverCode !== \"\" &&\r\n      //   validationErrors[\"DriverCode\"] === \"\"\r\n      // ) {\r\n      //   let driverIdentified = this.state.driverOptions.find(\r\n      //     (element) =>\r\n      //       element.title.toLowerCase() === modReceipt.DriverCode.toLowerCase()\r\n      //   );\r\n      //   if (driverIdentified === undefined) {\r\n      //     validationErrors[\"DriverCode\"] = \"DriverInfo_DriverNotFound\";\r\n      //   }\r\n      // }\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"Receipt_SavedStatus\",\r\n        messageResultDetails: [],\r\n      };\r\n\r\n      let uniqueRecords = [\r\n        ...new Set(\r\n          modReceipt.ReceiptOriginTerminalCompartmentsInfo.map(\r\n            (a) => a.CompartmentSeqNoInVehicle\r\n          )\r\n        ),\r\n      ];\r\n      if (\r\n        uniqueRecords.length !==\r\n        modReceipt.ReceiptOriginTerminalCompartmentsInfo.length\r\n      ) {\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"Duplicate_Compartment_Details\",\r\n        });\r\n        this.props.onSaved(this.state.modReceipt, \"update\", notification);\r\n        return false;\r\n      }\r\n\r\n      if (\r\n        Array.isArray(modReceipt.ReceiptOriginTerminalCompartmentsInfo) &&\r\n        modReceipt.ReceiptOriginTerminalCompartmentsInfo.length > 0\r\n      ) {\r\n        modReceipt.ReceiptOriginTerminalCompartmentsInfo.forEach(\r\n          (receiptCompartment) => {\r\n            receiptCompartmentValidationDef.forEach((col) => {\r\n              let err = \"\";\r\n\r\n              if (col.validator !== undefined) {\r\n                err = Utilities.validateField(\r\n                  col.validator,\r\n                  receiptCompartment[col.field]\r\n                );\r\n              }\r\n\r\n              if (err !== \"\") {\r\n                notification.messageResultDetails.push({\r\n                  keyFields: [\"Receipt_CompSeqInVehicle\", col.displayName],\r\n                  keyValues: [\r\n                    receiptCompartment.CompartmentSeqNoInVehicle,\r\n                    receiptCompartment[col.field],\r\n                  ],\r\n                  isSuccess: false,\r\n                  errorMessage: err,\r\n                });\r\n              }\r\n            });\r\n          }\r\n        );\r\n      } else {\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"Shipment_Compartment_Association_Require\",\r\n        });\r\n      }\r\n      var attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n      attributeList.forEach((attribute) => {\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n            attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n              attributeValidation.attributeValidationErrors[\r\n                attributeMetaData.Code\r\n              ] = Utilities.valiateAttributeField(\r\n                attributeMetaData,\r\n                attributeMetaData.DefaultValue\r\n              );\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (modReceipt.ReceiptOriginTerminalCompartmentsInfo.length > 0) {\r\n        modReceipt.ReceiptOriginTerminalCompartmentsInfo.forEach((com) => {\r\n          receiptCompartmentValidationDef.forEach((col) => {\r\n            let err = \"\";\r\n\r\n            if (col.validator !== undefined) {\r\n              err = Utilities.validateField(col.validator, com[col.field]);\r\n            }\r\n\r\n            if (err !== \"\") {\r\n              notification.messageResultDetails.push({\r\n                keyFields: [col.displayName],\r\n                keyValues: [com[col.field]],\r\n                isSuccess: false,\r\n                errorMessage: err,\r\n              });\r\n            }\r\n          });\r\n\r\n          if (\r\n            com.AttributesforUI !== null &&\r\n            com.AttributesforUI !== undefined\r\n          ) {\r\n            com.AttributesforUI.forEach((item) => {\r\n              let errMsg = Utilities.valiateAttributeField(\r\n                item,\r\n                item.AttributeValue\r\n              );\r\n              if (errMsg !== \"\") {\r\n                if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                  notification.messageResultDetails.push({\r\n                    keyFields: [\"CompAttributeTerminal\", item.AttributeName],\r\n                    keyValues: [\r\n                      com.CompartmentSeqNoInVehicle,\r\n                      item.TerminalCode,\r\n                      item.AttributeValue,\r\n                    ],\r\n                    isSuccess: false,\r\n                    errorMessage: errMsg,\r\n                  });\r\n                } else {\r\n                  notification.messageResultDetails.push({\r\n                    keyFields: [item.AttributeName],\r\n                    keyValues: [\r\n                      com.CompartmentSeqNoInVehicle,\r\n                      item.AttributeValue,\r\n                    ],\r\n                    isSuccess: false,\r\n                    errorMessage: errMsg,\r\n                  });\r\n                }\r\n              }\r\n            });\r\n          }\r\n          this.attributeToggleExpand(com, true, true);\r\n        });\r\n      }\r\n      this.setState({ validationErrors, attributeValidationErrors });\r\n      let returnValue = true;\r\n      if (returnValue) {\r\n        returnValue = Object.values(validationErrors).every(function (value) {\r\n          return value === \"\";\r\n        });\r\n      }\r\n      // else {\r\n      //   return returnValue;\r\n      // }\r\n\r\n      attributeValidationErrors.forEach((x) => {\r\n        if (returnValue) {\r\n          returnValue = Object.values(x.attributeValidationErrors).every(\r\n            function (value) {\r\n              return value === \"\";\r\n            }\r\n          );\r\n        } else {\r\n          return returnValue;\r\n        }\r\n      });\r\n\r\n      if (notification.messageResultDetails.length > 0) {\r\n        this.props.onSaved(this.state.modReceipt, \"update\", notification);\r\n        return false;\r\n      }\r\n\r\n      return returnValue;\r\n    } catch (error) {\r\n      console.log(\r\n        \"TruckReceiptDetailsComposite:Error occured on ValidateSave\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  convertStringtoDecimal(modReceipt, attributeList) {\r\n    try {\r\n      modReceipt.ReceiptOriginTerminalCompartmentsInfo.forEach((sc) => {\r\n        sc.Quantity = Utilities.convertStringtoDecimal(sc.Quantity);\r\n      });\r\n      modReceipt = this.fillAttributeDetails(modReceipt, attributeList);\r\n      return modReceipt;\r\n    } catch (err) {\r\n      console.log(\"convertStringtoDecimal on trailer details\", err);\r\n    }\r\n  }\r\n\r\n  handleSaveReceipt = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempReceipt = lodash.cloneDeep(this.state.tempReceipt);\r\n\r\n      this.state.receipt.ReceiptCode === \"\"\r\n        ? this.createReceipt(tempReceipt)\r\n        : this.updateReceipt(tempReceipt);\r\n    } catch (error) {\r\n      console.log(\"Receipt Details Composite : Error in handleSaveReceipt\");\r\n    }\r\n  };\r\n\r\n  saveReceipt = () => {\r\n    let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n    modReceipt.ReceiptOriginTerminalCompartmentsInfo = this.fillDetails(\r\n      this.state.modAssociations\r\n    );\r\n    modReceipt.CustomerInventoryPlanList = this.fillCustomerInvetoryDetails(\r\n      this.state.modCustomerInventory\r\n    );\r\n    let attributeList = Utilities.attributesConverttoLocaleString(\r\n      this.state.selectedAttributeList\r\n    );\r\n    // this.setState({ saveEnabled: false });\r\n\r\n    if (this.validateSave(modReceipt, attributeList)) {\r\n      // modReceipt.ReceiptOriginTerminalCompartmentsInfo.forEach((sc) => {\r\n      //   sc.Quantity = Utilities.convertStringtoDecimal(sc.Quantity);\r\n      // });\r\n      modReceipt = this.convertStringtoDecimal(modReceipt, attributeList);\r\n\r\n      let showReceiptAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      let tempReceipt = lodash.cloneDeep(modReceipt);\r\n      this.setState({ showReceiptAuthenticationLayout, tempReceipt }, () => {\r\n        if (showReceiptAuthenticationLayout === false) {\r\n          this.handleSaveReceipt();\r\n        }\r\n      });\r\n    } else {\r\n      this.setState({ saveEnabled: true });\r\n    }\r\n  };\r\n  handleSave = () => {\r\n    try {\r\n      const saveCompartmentDetails = this.handleSaveCompartmentDetailsEnabled();\r\n      let receipt = lodash.cloneDeep(this.state.receipt);\r\n      var viewTab = lodash.cloneDeep(this.state.activeTab);\r\n      if (\r\n        viewTab === 1 &&\r\n        receipt.ReceiptStatus !== Constants.Receipt_Status.READY &&\r\n        receipt.ReceiptCode !== \"\" &&\r\n        saveCompartmentDetails\r\n      ) {\r\n        this.compartmentDetailsSave();\r\n      } else {\r\n        let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n        if (modReceipt.IsBonded) {\r\n          if (!this.state.isVehicleBonded) {\r\n            this.setState({ vehicleBondPopUp: true });\r\n          } else if (\r\n            this.state.bondExpiryDate !== \"\" &&\r\n            this.state.bondExpiryDate !== null &&\r\n            this.state.bondExpiryDate !== undefined\r\n          ) {\r\n            this.setState({ vehicleBondExpiryPopUp: true });\r\n          }\r\n        } else {\r\n          this.saveReceipt();\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TruckReceiptDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  fillDetails(modAssociations) {\r\n    let compartmentDetails = [];\r\n    try {\r\n      if (Array.isArray(modAssociations)) {\r\n        let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n        modAssociations.forEach((comp) => {\r\n          if (\r\n            !(\r\n              comp.CompartmentSeqNoInVehicle === null ||\r\n              comp.CompartmentSeqNoInVehicle === \"\"\r\n            ) ||\r\n            !(comp.CompartmentCode === null || comp.CompartmentCode === \"\") ||\r\n            !(comp.TrailerCode === null || comp.TrailerCode === \"\") ||\r\n            !(\r\n              comp.FinishedProductCode === null ||\r\n              comp.FinishedProductCode === \"\"\r\n            ) ||\r\n            !!(comp.Quantity === null || comp.Quantity === \"\")\r\n          )\r\n            if (\r\n              comp.AttributesforUI !== undefined &&\r\n              comp.AttributesforUI != null\r\n            )\r\n              comp.AttributesforUI =\r\n                Utilities.compartmentAttributesConverttoLocaleString(\r\n                  comp.AttributesforUI\r\n                );\r\n          {\r\n            compartmentDetails.push({\r\n              CompartmentCode: comp.CompartmentCode,\r\n              CompartmentSeqNoInVehicle: comp.CompartmentSeqNoInVehicle,\r\n              TrailerCode: comp.TrailerCode,\r\n              CompartmentSeqNoInTrailer: comp.CompartmentSeqNoInTrailer,\r\n              Quantity: comp.Quantity.toLocaleString(),\r\n              QuantityUOM: this.state.modReceipt.ReceiptQuantityUOM,\r\n              FinishedProductCode: comp.FinishedProductCode,\r\n              OriginTerminalCode: comp.OriginTerminalCode,\r\n              ShareholderCode: this.props.selectedShareholder,\r\n              SupplierCode:\r\n                this.state.SupplierEnable === false\r\n                  ? modReceipt.SupplierCode\r\n                  : comp.SupplierCode,\r\n              ReceiptCode: modReceipt.ReceiptCode,\r\n              AttributesforUI: comp.AttributesforUI,\r\n            });\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error while making receipt body:\", error);\r\n    }\r\n    return compartmentDetails;\r\n  }\r\n  fillCustomerInvetoryDetails(modCustomerInventory) {\r\n    let customerInventory = lodash.cloneDeep(this.state.customerInventory);\r\n    try {\r\n      if (Array.isArray(modCustomerInventory)) {\r\n        modCustomerInventory.forEach((comp) => {\r\n          if (\r\n            !(comp.CustomerCode === null || comp.CustomerCode === \"\") ||\r\n            comp.FinishedProductCode === null ||\r\n            comp.FinishedProductCode === \"\" ||\r\n            !!(comp.PlannedQuantity === null || comp.PlannedQuantity === \"\")\r\n          ) {\r\n            customerInventory.push({\r\n              CustomerCode: comp.CustomerCode,\r\n              FinishedProductCode: comp.FinishedProductCode,\r\n              BaseProductCode: comp.BaseProductCode,\r\n              PlannedQuantity: comp.PlannedQuantity.toLocaleString(),\r\n              ShareholderCode: this.props.selectedShareholder,\r\n              // ReceiptCode: modReceipt.ReceiptCode,\r\n              QuantityUOM: this.state.modReceipt.ReceiptQuantityUOM,\r\n            });\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error while making receipt body:\", error);\r\n    }\r\n    return customerInventory;\r\n  }\r\n  fillCompartmentPlanDetails(modCompartmentsdetails) {\r\n    console.log(\"modLoadingDetails\", modCompartmentsdetails);\r\n    let ViewReceiptCompData = [];\r\n    if (Array.isArray(modCompartmentsdetails.Table)) {\r\n      modCompartmentsdetails.Table.forEach((comp) => {\r\n        comp.adjustedquantity = 0;\r\n        ViewReceiptCompData.push({\r\n          TrailerCode: comp.trailercode,\r\n          CompartmentCode: comp.compartmentcode,\r\n          CompartmentStaus: comp.CompartmentStatus,\r\n          FinishedProductCode: comp.finishedproductcode,\r\n          AdjustedQuantity: \"\",\r\n          Quantity: comp.Quantity !== null ? comp.Quantity.toString() : \"\",\r\n          revisedplannedquantity:\r\n            comp.revisedplannedquantity - comp.adjustedquantity < 0\r\n              ? comp.revisedplannedquantity\r\n              : (\r\n                  comp.revisedplannedquantity - comp.adjustedquantity\r\n                ).toString() +\r\n                \" \" +\r\n                comp.compartmentuom,\r\n          UnLoadedQuantity:\r\n            Math.round(comp.loadedquantity) + \" \" + comp.compartmentuom,\r\n          CompSeqNoInVehicle: comp.compartmentseqnoinvehicle,\r\n          ForceCompleted:\r\n            comp.CompartmentStatus ===\r\n            Constants.ReceiptCompartment_Status.FORCE_COMPLETED\r\n              ? true\r\n              : false,\r\n        });\r\n      });\r\n    }\r\n    ViewReceiptCompData =\r\n      Utilities.addSeqNumberToListObject(ViewReceiptCompData);\r\n\r\n    return ViewReceiptCompData;\r\n  }\r\n  fillRecorWeightDetails(modRecordWeightDetails) {\r\n    let ReceiptTrailerWeighbridgeInfo = [];\r\n    if (Array.isArray(modRecordWeightDetails)) {\r\n      modRecordWeightDetails.forEach((comp) => {\r\n        ReceiptTrailerWeighbridgeInfo.push({\r\n          TrailerCode: comp.trailercode,\r\n          WeighbridgeCode: comp.WeighbridgeCode,\r\n          MeasuredWeight: comp.MeasuredWeight + \" \" + comp.WeightUOM,\r\n          MeasuredWeightTime:\r\n            new Date(comp.MeasuredWeightTime).toLocaleDateString() +\r\n            \" \" +\r\n            new Date(comp.MeasuredWeightTime).toLocaleTimeString(),\r\n          weight: comp.IsTareWeight === true ? \"Tare Weight\" : \"Laden Weight\",\r\n        });\r\n      });\r\n    }\r\n    ReceiptTrailerWeighbridgeInfo = Utilities.addSeqNumberToListObject(\r\n      ReceiptTrailerWeighbridgeInfo\r\n    );\r\n\r\n    return ReceiptTrailerWeighbridgeInfo;\r\n  }\r\n  handleDriverChange = (driverCode) => {\r\n    try {\r\n      // this.getVehicle(vehicleCode, true);\r\n      let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n      modReceipt.DriverCode = driverCode;\r\n      let validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      validationErrors[\"DriverCode\"] = \"\";\r\n      this.setState({ validationErrors, modReceipt });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TruckReceiptDetailsComposite:Error occured on handleDriverChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleSealCompartments(receiptCode, shCode, token, callback) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shareholderCode,\r\n        value: shCode,\r\n      },\r\n      {\r\n        key: KeyCodes.receiptCode,\r\n        value: receiptCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: shCode,\r\n      keyDataCode: KeyCodes.shipmentCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetSealCompartmentsforReceipt,\r\n      Utilities.getAuthenticationObjectforPost(obj, token)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        callback(result);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while handleBSIOutbound:\", error);\r\n      });\r\n  }\r\n\r\n  handleSealClose = () => {\r\n    this.setState({\r\n      isSealCompartments: false,\r\n      sealCompartments: [],\r\n    });\r\n  };\r\n\r\n  handleDriverSearchChange = (driverCode) => {\r\n    let driverOptions = lodash.cloneDeep(this.state.driverOptions);\r\n    try {\r\n      let driverSearchOptions = driverOptions.filter((item) =>\r\n        item.value.toLowerCase().includes(driverCode.toLowerCase())\r\n      );\r\n      if (driverSearchOptions.length > Constants.filteredOptionsCount) {\r\n        driverSearchOptions = driverSearchOptions.slice(\r\n          0,\r\n          Constants.filteredOptionsCount\r\n        );\r\n      }\r\n\r\n      this.setState({\r\n        driverSearchOptions,\r\n      });\r\n    } catch (error) {\r\n      console.log(\":Error occured on handleDriverSearchChange\", error);\r\n    }\r\n  };\r\n  handleVehicleChange = (vehicleCode) => {\r\n    try {\r\n      this.getVehicle(vehicleCode, true);\r\n      let validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      validationErrors[\"VehicleCode\"] = \"\";\r\n      this.setState({ validationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TruckReceiptDetailsComposite::Error occured on handleVehicleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  // handleVehicleSearchChange = (vehicleCode) => {\r\n  //   try {\r\n  //     let validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n  //     let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n  //     modReceipt.VehicleCode = vehicleCode;\r\n  //     let vehicleSearchOptions = this.state.vehicleOptions.filter((item) =>\r\n  //       item.title.toLowerCase().includes(vehicleCode.toLowerCase())\r\n  //     );\r\n  //     if (vehicleSearchOptions.length > 100) {\r\n  //       vehicleSearchOptions = vehicleSearchOptions.slice(0, 100);\r\n  //     }\r\n\r\n  //     // this.setState({\r\n  //     //   vehicleSearchOptions,\r\n  //     //   modReceipt,\r\n  //     // });\r\n\r\n  //     let vehicleIdentified = this.state.vehicleOptions.find(\r\n  //       (element) => element.title.toLowerCase() === vehicleCode.toLowerCase()\r\n  //     );\r\n  //     // if (vehicleIdentified !== undefined) {\r\n  //     //   this.handleVehicleChange(vehicleCode);\r\n  //     // } else {\r\n  //     modReceipt.CarrierCode = \"\";\r\n  //     if (vehicleIdentified === undefined) {\r\n  //       validationErrors[\"VehicleCode\"] =\r\n  //         \"ShipmentCompDetail_VEHICLECODENULLOREMPTY\";\r\n  //     }\r\n  //     this.setState({\r\n  //       vehicleSearchOptions,\r\n  //       validationErrors,\r\n  //       modReceipt,\r\n  //     });\r\n  //   } catch (error) {\r\n  //     console.log(\r\n  //       \"TruckReceiptDetailsComposite:Error occured on handleVehicleSearchChange\",\r\n  //       error\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  handleDriverResultsClear = () => {\r\n    try {\r\n      let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n      let validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      validationErrors[\"DriverCode\"] = \"\";\r\n      modReceipt.DriverCode = \"\";\r\n      this.setState({\r\n        validationErrors,\r\n        modReceipt,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TruckReceiptDetailsComposite:Error occured on handleDriverResultsClear\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleVehicleSearchChange = (vehicleCode) => {\r\n    try {\r\n      let vehicleSearchOptions = this.state.vehicleOptions.filter((item) =>\r\n        item.value.toLowerCase().includes(vehicleCode.toLowerCase())\r\n      );\r\n      if (vehicleSearchOptions.length > Constants.filteredOptionsCount) {\r\n        vehicleSearchOptions = vehicleSearchOptions.slice(\r\n          0,\r\n          Constants.filteredOptionsCount\r\n        );\r\n      }\r\n\r\n      this.setState({\r\n        vehicleSearchOptions,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        this.props.ShipmentType + \":Error occured on handleVehicleSearchChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleVehicleResultsClear = () => {\r\n    try {\r\n      let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n      let validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      let modAssociations = [];\r\n      let compSeqOptions = [];\r\n      let modVehicleDetails = { carrierCode: \"\", vehicleCompartments: [] };\r\n      validationErrors[\"VehicleCode\"] = \"ShipmentCompDetail_MandatoryVehicle\";\r\n      modReceipt.VehicleCode = null;\r\n      modReceipt.CarrierCode = null;\r\n      this.setState({\r\n        validationErrors,\r\n        modReceipt,\r\n        modAssociations,\r\n        compSeqOptions,\r\n        modVehicleDetails,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ShipmentByCompartmentComposite:Error occured on handleVehicleResultsClear\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  getVehicle(vehicleCode, vehicleChanged) {\r\n    let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n    let modVehicleDetails = lodash.cloneDeep(this.state.modVehicleDetails);\r\n    modReceipt.VehicleCode = vehicleCode;\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.vehicleCode,\r\n        value: vehicleCode,\r\n      },\r\n    ];\r\n    let obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.vehicleCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.GetVehicle,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            modReceipt.CarrierCode = result.EntityResult.CarrierCompanyCode;\r\n            modVehicleDetails.carrierCode =\r\n              result.EntityResult.CarrierCompanyCode;\r\n            modVehicleDetails.vehicleCompartments =\r\n              this.getCompartmentDetailsFromVehicle(result.EntityResult);\r\n            let compSeqOptions = [];\r\n            modVehicleDetails.vehicleCompartments.forEach(\r\n              (vehicleCompartment) =>\r\n                compSeqOptions.push({\r\n                  text: vehicleCompartment.vehCompSeq,\r\n                  value: vehicleCompartment.vehCompSeq,\r\n                })\r\n            );\r\n            if (vehicleChanged) {\r\n              let modAssociations =\r\n                this.getReceiptCompartmentFromVehicleCompartment(\r\n                  modVehicleDetails.vehicleCompartments\r\n                );\r\n              modAssociations =\r\n                Utilities.addSeqNumberToListObject(modAssociations);\r\n              this.setState({ modAssociations }, () => {\r\n                if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                  this.terminalSelectionChange(modReceipt.TerminalCodes);\r\n                } else {\r\n                  this.localNodeAttribute();\r\n                }\r\n              });\r\n              if (this.state.receipt.VehicleCode !== vehicleCode) {\r\n                modAssociations =\r\n                  Utilities.addSeqNumberToListObject(modAssociations);\r\n              }\r\n            }\r\n            modReceipt.IsBonded = this.state.isBonded\r\n              ? result.EntityResult.IsBonded\r\n                ? true\r\n                : modReceipt.IsBonded\r\n              : false;\r\n            let bondExpiryDate = result.EntityResult.BondExpiryDate;\r\n            this.setState({\r\n              modReceipt,\r\n              modVehicleDetails,\r\n              compSeqOptions,\r\n              bondExpiryDate: bondExpiryDate,\r\n              isVehicleBonded: result.EntityResult.IsBonded ? true : false,\r\n            });\r\n\r\n            if (this.state.receipt.VehicleCode === modReceipt.VehicleCode) {\r\n              let vehicleDetails = lodash.cloneDeep(modVehicleDetails);\r\n              this.setState({ vehicleDetails });\r\n            }\r\n          }\r\n        } else {\r\n          this.setState({ modReceipt });\r\n\r\n          console.log(\r\n            \"TruckReceiptDetailsComposite:Error in GetVehicle:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ modReceipt });\r\n\r\n        console.log(\r\n          \"TruckReceiptDetailsComposite:Error while getting Vehicle:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  getReceiptCompartmentFromVehicleCompartment(vehicleCompartments) {\r\n    let receiptCompartments = [];\r\n    if (Array.isArray(vehicleCompartments)) {\r\n      for (let i = 0; i < vehicleCompartments.length; i++) {\r\n        let vehicleCompartment = vehicleCompartments[i];\r\n        let receiptCompartment = {\r\n          CompartmentCode: vehicleCompartment.compCode,\r\n          CompartmentSeqNoInVehicle: vehicleCompartment.vehCompSeq,\r\n          TrailerCode: vehicleCompartment.trailerCode,\r\n          CompartmentSeqNoInTrailer: vehicleCompartment.trailerCompSeq,\r\n          Quantity:\r\n            vehicleCompartment.SFL !== null && vehicleCompartment.SFL !== \"\"\r\n              ? vehicleCompartment.SFL.toLocaleString()\r\n              : null,\r\n          QuantityUOM: vehicleCompartment.UOM,\r\n          FinishedProductCode: \"\",\r\n          ShareholderCode: this.props.selectedShareholder,\r\n          SupplierCode: \"\",\r\n          OriginTerminalCode: \"\",\r\n          ReceiptCode: \"\",\r\n        };\r\n        receiptCompartments.push(receiptCompartment);\r\n      }\r\n    }\r\n    return receiptCompartments;\r\n  }\r\n\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n      modReceipt.Active = value;\r\n      if (modReceipt.Active !== this.state.receipt.Active)\r\n        modReceipt.Remarks = \"\";\r\n      this.setState({ modReceipt });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  handleAddAssociation = () => {\r\n    let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n    if (\r\n      !this.props.userDetails.EntityResult.IsArchived &&\r\n      modReceipt.ReceiptStatus === \"READY\"\r\n    ) {\r\n      try {\r\n        if (\r\n          this.state.modAssociations.length <\r\n          this.state.modVehicleDetails.vehicleCompartments.length\r\n        ) {\r\n          let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n          let newComp = {\r\n            CompartmentCode: null,\r\n            CompartmentSeqNoInVehicle: null,\r\n            CompartmentSeqNoInTrailer: null,\r\n            Quantity: null,\r\n            QuantityUOM: \"\",\r\n            FinishedProductCode: \"\",\r\n            ShareholderCode: this.props.selectedShareholder,\r\n            Attributes: [],\r\n            OriginTerminalCode: \"\",\r\n            SupplierCode: \"\",\r\n            TrailerCode: \"\",\r\n          };\r\n          newComp.SeqNumber =\r\n            Utilities.getMaxSeqNumberfromListObject(modAssociations);\r\n          modAssociations.push(newComp);\r\n          this.setState(\r\n            {\r\n              modAssociations,\r\n              selectedAssociations: [],\r\n            },\r\n            () => {\r\n              if (\r\n                this.props.userDetails.EntityResult.IsEnterpriseNode === false\r\n              ) {\r\n                var attributeMetaDataList = lodash.cloneDeep(\r\n                  this.state.compartmentAttributeMetaDataList\r\n                );\r\n                if (attributeMetaDataList.length > 0)\r\n                  this.formCompartmentAttributes([\r\n                    attributeMetaDataList[0].TerminalCode,\r\n                  ]);\r\n              } else this.formCompartmentAttributes(modReceipt.TerminalCodes);\r\n            }\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.log(\r\n          \"TruckReceiptDetailsComposite:Error occured on handleAddCompartment\",\r\n          error\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  handleDeleteAssociation = () => {\r\n    if (!this.props.userDetails.EntityResult.IsArchived) {\r\n      try {\r\n        if (\r\n          this.state.selectedAssociations != null &&\r\n          this.state.selectedAssociations.length > 0\r\n        ) {\r\n          if (this.state.modAssociations.length > 0) {\r\n            let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n            this.state.selectedAssociations.forEach((obj, index) => {\r\n              modAssociations = modAssociations.filter((com, cindex) => {\r\n                return com.SeqNumber !== obj.SeqNumber;\r\n              });\r\n              //  modCustomerInventory = modCustomerInventory.filter(\r\n              //   (customer) => {\r\n              //     return (\r\n              //       customer.FinishedProductCode !==\r\n              //       obj.FinishedProductCode\r\n              //     );\r\n              //   }\r\n              // );\r\n            });\r\n            this.setState({ modAssociations, selectedAssociations: [] });\r\n          }\r\n        }\r\n\r\n        // this.setState({ selectedAssociations: [] });\r\n      } catch (error) {\r\n        console.log(\r\n          \"RigidtruckDetailsComposite:Error occured on handleDeleteCompartment\",\r\n          error\r\n        );\r\n      }\r\n    }\r\n  };\r\n  GetViewAllReceiptCustomData(receiptRow, activeTab) {\r\n    try {\r\n      var keyCode = [];\r\n      if (receiptRow !== undefined)\r\n        keyCode = [\r\n          {\r\n            key: KeyCodes.receiptCode,\r\n            value: receiptRow.ReceiptCode,\r\n          },\r\n          {\r\n            key: KeyCodes.receiptStatus,\r\n            value: receiptRow.ReceiptStatus,\r\n          },\r\n          {\r\n            key: KeyCodes.vehicleCode,\r\n            value: receiptRow.VehicleCode,\r\n          },\r\n          {\r\n            key: KeyCodes.actualTerminalCode,\r\n            value: receiptRow.ActualTerminalCode,\r\n          },\r\n        ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.receiptCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetViewAllReceiptCustomData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          if (response.data.IsSuccess) {\r\n            var result = response.data.EntityResult;\r\n            if (receiptRow !== undefined) {\r\n              this.setState({\r\n                saveEnabled:\r\n                  activeTab === 1\r\n                    ? Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.modify,\r\n                        fnTruckReceipt\r\n                      )\r\n                    : result.ReceiptUpdateAllow === \"TRUE\" &&\r\n                      Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.modify,\r\n                        fnTruckReceipt\r\n                      )\r\n                    ? true\r\n                    : false,\r\n                // },\r\n                // () => {\r\n                //   if (\r\n                //     response.data.EntityResult.CustomerInventory === \"TRUE\" &&\r\n                //     receiptRow !== undefined\r\n                //   )\r\n                //     this.getCustomerInventory(receiptRow);\r\n                modCustomValues: response.data.EntityResult,\r\n              });\r\n            } else\r\n              this.setState({\r\n                modCustomValues: response.data.EntityResult,\r\n                saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnTruckReceipt\r\n                ),\r\n              });\r\n          } else this.setState({ modCustomValues: {}, customerInventory: [] });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"Error while getting shipment custom details:\",\r\n            error,\r\n            receiptRow\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in Custom Data retrieve\", error);\r\n    }\r\n  }\r\n  handleReset = () => {\r\n    try {\r\n      let vehicleDetails = lodash.cloneDeep(this.state.vehicleDetails);\r\n      var modReceipt = lodash.cloneDeep(this.state.receipt);\r\n      let modAssociations = [];\r\n      let compSeqOptions = [];\r\n      let modCustomerInventory = [];\r\n      let modCompartments = [];\r\n      if (this.state.receipt.ReceiptCode === \"\") {\r\n        modAssociations = [];\r\n        compSeqOptions = [];\r\n        modCustomerInventory = [];\r\n        // modCompartments = [];\r\n      } else {\r\n        modAssociations = this.getReceiptCompartmentFromReceipt(\r\n          this.state.receipt\r\n        );\r\n        modCustomerInventory = this.getReceiptCustomerInventory(\r\n          this.state.receipt\r\n        );\r\n        modCompartments = this.getReceiptCompartmentDetails(this.state.receipt);\r\n        vehicleDetails.vehicleCompartments.forEach((vehicleCompartment) =>\r\n          compSeqOptions.push({\r\n            text: vehicleCompartment.vehCompSeq,\r\n            value: vehicleCompartment.vehCompSeq,\r\n          })\r\n        );\r\n      }\r\n      this.setState(\r\n        {\r\n          modReceipt: lodash.cloneDeep(this.state.receipt),\r\n          validationErrors: [],\r\n          modVehicleDetails: lodash.cloneDeep(this.state.vehicleDetails),\r\n          modAssociations,\r\n          compSeqOptions,\r\n          modCompartments,\r\n          modCustomerInventory,\r\n          // compartmentTab: false,\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange(modReceipt.TerminalCodes);\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            this.localNodeAttribute();\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"TruckReceiptDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors:\r\n          Utilities.getAttributeInitialValidationErrors(attributeMetaDataList),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TrailerDetailsComposite:Error occured on handleResetAttributeValidationError\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  handleAllTerminalsChange = (checked) => {\r\n    try {\r\n      var terminalCodes = [...this.props.terminalCodes];\r\n      var modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n\r\n      if (checked) modReceipt.TerminalCodes = [...terminalCodes];\r\n      else modReceipt.TerminalCodes = [];\r\n      this.setState({ modReceipt });\r\n      this.terminalSelectionChange(modReceipt.TerminalCodes);\r\n    } catch (error) {\r\n      console.log(\r\n        \"TruckReceiptDetailsComposite:Error occured on handleAllTerminasChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleAssociationSelectionChange = (associations) => {\r\n    this.setState({ selectedAssociations: associations });\r\n  };\r\n\r\n  handleSupplierChange = (supplierCode) => {\r\n    const modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n    modReceipt.SupplierCode = supplierCode;\r\n    let validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    validationErrors[\"SupplierCode\"] = \"\";\r\n    this.setState({ validationErrors });\r\n\r\n    const modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n    let supplierOriginTerminalsList = this.state.supplierOriginTerminalsList;\r\n    if (\r\n      supplierOriginTerminalsList !== undefined &&\r\n      supplierOriginTerminalsList !== null\r\n    ) {\r\n      if (\r\n        supplierOriginTerminalsList[supplierCode] !== undefined &&\r\n        Array.isArray(supplierOriginTerminalsList[supplierCode]) &&\r\n        supplierOriginTerminalsList[supplierCode].length === 1\r\n      ) {\r\n        modAssociations.forEach((com) => {\r\n          com.OriginTerminalCode = supplierOriginTerminalsList[supplierCode][0];\r\n        });\r\n      } else {\r\n        modAssociations.forEach((com) => {\r\n          com.OriginTerminalCode = \"\";\r\n        });\r\n      }\r\n    }\r\n\r\n    this.setState({ modReceipt, modAssociations });\r\n  };\r\n  UpdateReceiptBondNo = () => {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.receiptCode,\r\n          value: this.state.receipt.ReceiptCode,\r\n        },\r\n        {\r\n          key: KeyCodes.receiptBondNo,\r\n          value: this.state.modReceipt.BondNo,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.receiptCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"ReceiptBondUpdate_Status\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"ReceiptCode\"],\r\n            keyValues: [this.state.modReceipt.ReceiptCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.UpdateReceiptBond,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.getReceipt({\r\n              Common_Code: this.state.modReceipt.ReceiptCode,\r\n            });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            console.log(\"Error in UpdateReceipt:\", result.ErrorList);\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while OverrideShipmentSequence:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while Updating ShipmentSequence:\", error);\r\n    }\r\n  };\r\n\r\n\r\n  UpdateReceiptDriver = () => {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.receiptCode,\r\n          value: this.state.receipt.ReceiptCode,\r\n        },\r\n        {\r\n          key: KeyCodes.driverCode,\r\n          value: this.state.modReceipt.DriverCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.receiptCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"DriverCode_UpdateStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"ReceiptCode\"],\r\n            keyValues: [this.state.receipt.ReceiptCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.UpdateReceiptDriver,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.getReceipt(\r\n              { Common_Code: this.state.receipt.ReceiptCode },\r\n              0,\r\n              notification\r\n            );\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n              toast(\r\n                <ErrorBoundary>\r\n                  <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                </ErrorBoundary>,\r\n                {\r\n                  autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n                }\r\n              );\r\n            console.log(\"Error Receipt Driver Update:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while Receipt Driver Update:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while Receipt Driver Update:\", error);\r\n    }\r\n  };\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n      modReceipt[propertyName] = data;\r\n      this.setState({ modReceipt });\r\n      if (receiptValidationDef[propertyName] !== undefined) {\r\n        var validationErrors = { ...this.state.validationErrors };\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          receiptValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n      if (propertyName === \"IsBonded\") {\r\n        modReceipt[\"BondNo\"] = \"\";\r\n      }\r\n      if (propertyName === \"TerminalCodes\") {\r\n        this.terminalSelectionChange(data);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TruckReceiptDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleDateTextChange = (propertyName, value, error) => {\r\n    try {\r\n      var validationErrors = { ...this.state.validationErrors };\r\n      var modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n      validationErrors[propertyName] = error;\r\n      modReceipt[propertyName] = value;\r\n      this.setState({ validationErrors, modReceipt });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TruckReceiptDetailsComposite:Error occured on handleDateTextChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleCellCheck = (data, cellData) => {\r\n    let modCompartments = lodash.cloneDeep(this.state.modCompartments);\r\n    let expandedRows = lodash.cloneDeep(this.state.expandedRows);\r\n    const index = modCompartments.findIndex((item) => {\r\n      return item.SeqNumber === data.rowData.SeqNumber;\r\n    });\r\n    if (index > -1) {\r\n      modCompartments[index].ForceCompleted = cellData;\r\n    }\r\n    let expandedRowIndex = expandedRows.findIndex(\r\n      (item) => item.SeqNumber === data.rowData.SeqNumber\r\n    );\r\n    if (expandedRowIndex >= 0) {\r\n      expandedRows.splice(expandedRowIndex, 1);\r\n    }\r\n    this.setState({ modCompartments });\r\n    this.toggleExpand(modCompartments[data.rowIndex], false);\r\n  };\r\n  handleCellDataEdit = (newVal, cellData) => {\r\n    let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n    modAssociations[cellData.rowIndex][cellData.field] = newVal;\r\n    if (cellData.field === \"CompartmentSeqNoInVehicle\") {\r\n      let vehicleDetails = this.state.modVehicleDetails;\r\n      let vehicleCompartments = vehicleDetails.vehicleCompartments.filter(\r\n        (vc) => vc.vehCompSeq.toString() === newVal.toString()\r\n      );\r\n      let supplierOriginOptions = lodash.cloneDeep(\r\n        this.state.supplierOriginTerminalsList\r\n      );\r\n      let supplierOptions = lodash.clone(this.state.supplierOptions);\r\n      if (vehicleCompartments.length > 0) {\r\n        modAssociations[cellData.rowIndex][\"Quantity\"] =\r\n          vehicleCompartments[0].SFL !== null &&\r\n          vehicleCompartments[0].SFL !== \"\"\r\n            ? vehicleCompartments[0].SFL.toLocaleString()\r\n            : null;\r\n        modAssociations[cellData.rowIndex][\"TrailerCode\"] =\r\n          vehicleCompartments[0].trailerCode;\r\n        modAssociations[cellData.rowIndex][\"CompartmentCode\"] =\r\n          vehicleCompartments[0].compCode;\r\n        modAssociations[cellData.rowIndex][\"QuantityUOM\"] =\r\n          vehicleCompartments[0].UOM;\r\n        modAssociations[cellData.rowIndex][\"OriginTerminalCode\"] =\r\n          Array.isArray(\r\n            supplierOriginOptions[this.state.modReceipt.SupplierCode]\r\n          ) &&\r\n          supplierOriginOptions[this.state.modReceipt.SupplierCode].length === 1\r\n            ? supplierOriginOptions[this.state.modReceipt.SupplierCode][0]\r\n            : \"\";\r\n        modAssociations[cellData.rowIndex][\"SupplierCode\"] =\r\n          Array.isArray(supplierOptions[this.state.modReceipt.SupplierCode]) &&\r\n          supplierOptions[this.state.modReceipt.SupplierCode].length === 1\r\n            ? supplierOptions[this.state.modReceipt.SupplierCode]\r\n            : \"\";\r\n      }\r\n      this.attributeToggleExpand(\r\n        modAssociations[cellData.rowIndex],\r\n        true,\r\n        true\r\n      );\r\n      // modAssociations[rowIndex][\r\n      //   cellData.field\r\n      // ] = !modAssociations[rowIndex][cellData.field];\r\n    }\r\n    this.setState({ modAssociations });\r\n  };\r\n  handleCellCompartmentDataEdit = (newVal, cellData) => {\r\n    let modCompartments = lodash.cloneDeep(this.state.modCompartments);\r\n    const index = modCompartments.findIndex((item) => {\r\n      return item.SeqNumber === cellData.rowData.SeqNumber;\r\n    });\r\n    if (index > -1) {\r\n      modCompartments[index][cellData.field] = newVal;\r\n      this.setState({ modCompartments });\r\n      let expandedRows = lodash.cloneDeep(this.state.expandedRows);\r\n      let expandedRowIndex = expandedRows.findIndex(\r\n        (item) => item.SeqNumber === cellData.rowData.SeqNumber\r\n      );\r\n\r\n      if (expandedRowIndex >= 0) {\r\n        expandedRows.splice(expandedRowIndex, 1);\r\n        this.setState({ expandedRows });\r\n      }\r\n      this.toggleExpand(modCompartments[index], false);\r\n    }\r\n  };\r\n  getcustomerList(shareholder) {\r\n    axios(\r\n      RestAPIs.GetCustomerDestinations +\r\n        \"?ShareholderCode=\" +\r\n        shareholder +\r\n        \"&TransportationType=\",\r\n\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        // console.log(response);\r\n\r\n        if (result.IsSuccess === true) {\r\n          if (Array.isArray(result.EntityResult)) {\r\n            let shareholderCustomers = result.EntityResult.filter(\r\n              (shareholderCust) =>\r\n                shareholderCust.ShareholderCode === shareholder\r\n            );\r\n            if (shareholderCustomers.length > 0) {\r\n              let customers = Object.keys(\r\n                shareholderCustomers[0].CustomerDestinationsList\r\n              );\r\n              let customerOptions = Utilities.transferListtoOptions(customers);\r\n              this.setState({ customerOptions });\r\n            } else {\r\n              console.log(\"no customers identified for shareholder\");\r\n            }\r\n          } else {\r\n            console.log(\"customerdestinations not identified for shareholder\");\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Customer List:\", error);\r\n      });\r\n  }\r\n  handleCustomerInventory = (newVal, cellData) => {\r\n    let modCustomerInventory = lodash.cloneDeep(\r\n      this.state.modCustomerInventory\r\n    );\r\n    modCustomerInventory[cellData.rowIndex][cellData.field] = newVal;\r\n    this.setState({ modCustomerInventory });\r\n  };\r\n  handleCustomerSelectionChange = (inventory) => {\r\n    this.setState({ selectedCustomerInventory: inventory });\r\n  };\r\n  handleAddCustomerInventory = () => {\r\n    let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n    if (\r\n      !this.props.userDetails.EntityResult.IsArchived &&\r\n      modReceipt.ReceiptStatus === \"READY\"\r\n    ) {\r\n      try {\r\n        if (\r\n          this.state.modCustomerInventory.length <\r\n          this.state.customerOptions.length\r\n        ) {\r\n          let modCustomerInventory = lodash.cloneDeep(\r\n            this.state.modCustomerInventory\r\n          );\r\n          let newComp = {\r\n            ShareholderCode: this.props.selectedShareholder,\r\n            CustomerCode: \"\",\r\n            FinishedProductCode: \"\",\r\n            PlannedQuantity: \"\",\r\n            // GrossActualQuantity:\"\",\r\n            // NetActualQuantity:null,\r\n          };\r\n          newComp.SeqNumber =\r\n            Utilities.getMaxSeqNumberfromListObject(modCustomerInventory);\r\n          if (this.state.customerOptions.length === 1) {\r\n            newComp.CustomerCode = this.state.customerOptions[0].value;\r\n          }\r\n          // if(this.state.baseProductOptions.length ===1){\r\n          //   newComp.BaseProductCode=this.state.baseProductOptions[0].value\r\n          // }\r\n          modCustomerInventory.push(newComp);\r\n          this.setState({\r\n            modCustomerInventory,\r\n            selectedCustomerInventory: [],\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.log(\r\n          \"TruckReceiptDetailsComposite:Error occured on handleAddCustomerinventory\",\r\n          error\r\n        );\r\n      }\r\n    }\r\n  };\r\n  handleDeleteCustomerInventory = () => {\r\n    if (!this.props.userDetails.EntityResult.IsArchived) {\r\n      try {\r\n        if (\r\n          this.state.selectedCustomerInventory != null &&\r\n          this.state.selectedCustomerInventory.length > 0\r\n        ) {\r\n          if (this.state.modCustomerInventory.length > 0) {\r\n            let modCustomerInventory = lodash.cloneDeep(\r\n              this.state.modCustomerInventory\r\n            );\r\n            this.state.selectedCustomerInventory.forEach((obj, index) => {\r\n              modCustomerInventory = modCustomerInventory.filter(\r\n                (com, cindex) => {\r\n                  return com.CustomerCode !== obj.CustomerCode;\r\n                }\r\n              );\r\n            });\r\n            this.setState({\r\n              modCustomerInventory,\r\n              selectedCustomerInventory: [],\r\n            });\r\n          }\r\n        }\r\n\r\n        this.setState({ selectedCustomerInventory: [] });\r\n      } catch (error) {\r\n        console.log(\r\n          \"TruckReceiptDetailsComposite:Error occured on handleDeleteCCustomerinventory\",\r\n          error\r\n        );\r\n      }\r\n    }\r\n  };\r\n  getCompartmentDetailsFromVehicle(vehicleInfo) {\r\n    let vehicleCompartments = [];\r\n    let seqNum = 1;\r\n    vehicleInfo.VehicleTrailers.sort((a, b) => a.TrailerSeq - b.TrailerSeq);\r\n\r\n    vehicleInfo.VehicleTrailers.forEach((vehicleTrailer) => {\r\n      if (Array.isArray(vehicleTrailer.Trailer.Compartments)) {\r\n        vehicleTrailer.Trailer.Compartments.sort(\r\n          (a, b) => a.CompartmentSeqNoInTrailer - b.CompartmentSeqNoInTrailer\r\n        );\r\n        for (let i = 0; i < vehicleTrailer.Trailer.Compartments.length; i++) {\r\n          let trailerCompartment = vehicleTrailer.Trailer.Compartments[i];\r\n          let vehicleCompartment = {\r\n            compCode: trailerCompartment.Code,\r\n            vehCompSeq: seqNum,\r\n            trailerCode: trailerCompartment.TrailerCode,\r\n            trailerCompSeq: trailerCompartment.CompartmentSeqNoInTrailer,\r\n            SFL: trailerCompartment.Capacity,\r\n            UOM: trailerCompartment.UOM,\r\n          };\r\n          vehicleCompartments.push(vehicleCompartment);\r\n          seqNum = seqNum + 1;\r\n        }\r\n      }\r\n    });\r\n\r\n    return vehicleCompartments;\r\n  }\r\n  getDriverCodes(shareholder) {\r\n    axios(\r\n      RestAPIs.GetDriverCodes + \"?ShareholderCode=\" + shareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let driverOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            let driverSearchOptions = lodash.cloneDeep(driverOptions);\r\n            if (driverSearchOptions.length > Constants.filteredOptionsCount) {\r\n              driverSearchOptions = driverSearchOptions.slice(\r\n                0,\r\n                Constants.filteredOptionsCount\r\n              );\r\n            }\r\n            this.setState({ driverOptions, driverSearchOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getDriverCodes:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting getDriverCodes:\", error);\r\n      });\r\n  }\r\n  getFinishedProductCodes(shareholder) {\r\n    axios(\r\n      RestAPIs.GetFinishedProductCodes + \"?ShareholderCode=\" + shareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let finishedProductOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ finishedProductOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getFinishedProductCodes:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting getFinishedProductCodes:\", error);\r\n      });\r\n  }\r\n  getCompartmentFromReceipt(receipt) {\r\n    let CompartmentsDetails = [];\r\n    if (Array.isArray(receipt.ReceiptCompartmentsInfo)) {\r\n      receipt.ReceiptCompartmentsInfo.forEach((comp) =>\r\n        CompartmentsDetails.push({\r\n          ReceiptCode: comp.ReceiptCode,\r\n          CompartmentCode: comp.CompartmentCode,\r\n          CompartmentSeqNoInVehicle: comp.CompartmentSeqNoInVehicle,\r\n          TrailerCode: comp.TrailerCode,\r\n          CompartmentSeqNoInTrailer: comp.trailerCompSeq,\r\n          Quantity:\r\n            comp.Quantity !== null && comp.Quantity !== \"\"\r\n              ? comp.Quantity.toLocaleString()\r\n              : null,\r\n          QuantityUOM: comp.QuantityUOM,\r\n          SupplierCode: comp.SupplierCode,\r\n          DestinationCode: comp.DestinationCode,\r\n          OriginTerminalCode: comp.OriginTerminalCode,\r\n          ShareholderCode: this.props.selectedShareholder,\r\n          FinishedProductCode: comp.FinishedProductCode,\r\n          CompartmentStaus: comp.ReceiptCompartment_Status,\r\n          Adjust_Plan:\r\n            comp.AdjustedQuantity !== null && comp.AdjustedQuantity !== \"\"\r\n              ? comp.AdjustedQuantity\r\n              : null,\r\n          ForceCompleted:\r\n            Constants.ReceiptCompartment_Status[comp.CompartmentStaus] ===\r\n            Constants.ReceiptCompartment_Status.FORCE_COMPLETED\r\n              ? true\r\n              : false,\r\n        })\r\n      );\r\n      // this.setState({ compartmentTab: true });\r\n    }\r\n    CompartmentsDetails =\r\n      Utilities.addSeqNumberToListObject(CompartmentsDetails);\r\n    return CompartmentsDetails.sort((a, b) => {\r\n      if (a.CompartmentSeqNoInVehicle > b.CompartmentSeqNoInVehicle) return 1;\r\n      else if (a.CompartmentSeqNoInVehicle < b.CompartmentSeqNoInVehicle)\r\n        return -1;\r\n      else return 0;\r\n    });\r\n  }\r\n  handleSaveCompartmentDetailsEnabled = () => {\r\n    const { modReceipt } = this.state;\r\n    const saveCompartmentDetailsEnabled =\r\n      modReceipt.ReceiptStatus ===\r\n        Constants.Receipt_Status.PARTIALLY_UNLOADED ||\r\n      modReceipt.ReceiptStatus === Constants.Receipt_Status.INTERRUPTED ||\r\n      modReceipt.ReceiptStatus === Constants.Receipt_Status.AUTO_UNLOADED ||\r\n      modReceipt.ReceiptStatus === Constants.Receipt_Status.QUEUED ||\r\n      modReceipt.ReceiptStatus === Constants.Receipt_Status.CHECKED_IN;\r\n\r\n    return saveCompartmentDetailsEnabled;\r\n  };\r\n  getSaveEnabled() {\r\n    var saveCompartmentDetailsEnabled =\r\n      this.handleSaveCompartmentDetailsEnabled();\r\n    var saveAbled = lodash.cloneDeep(this.state.saveEnabled);\r\n    var viewTab = lodash.cloneDeep(this.state.activeTab);\r\n    var compartmentTab = lodash.cloneDeep(this.state.compartmentTab);\r\n    if (viewTab === 1 && compartmentTab === true) {\r\n      return saveCompartmentDetailsEnabled;\r\n    } else {\r\n      return saveAbled;\r\n    }\r\n  }\r\n  getReceiptCompartmentDetails(selectedRow) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.receiptCode,\r\n        value: selectedRow.ReceiptCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.receiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetReceiptCompartmentDetails,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        response.data.IsSuccess\r\n          ? this.setState({\r\n              modCompartments: this.fillCompartmentPlanDetails(\r\n                response.data.EntityResult\r\n              ),\r\n              // compartmentTab: true,\r\n            })\r\n          : this.setState({ modCompartments: {} });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting receipt compartment details:\", error);\r\n      });\r\n  }\r\n  compartmentDetailsSave = () => {\r\n    let modCompartments = lodash.cloneDeep(this.state.modCompartments);\r\n    let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n    let ViewReceiptCompData = lodash.cloneDeep(this.state.modCompartments);\r\n    let expandedRows = lodash.cloneDeep(this.state.expandedRows);\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"ViewMarineShipmentList_CompartmentDetailsStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ReceiptByCompartmentList_ReceiptCode\"],\r\n          keyValues: [modReceipt.ReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.receiptCode,\r\n        value: modReceipt.ReceiptCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.receiptCode,\r\n      KeyCodes: keyCode,\r\n      Entity: ViewReceiptCompData,\r\n    };\r\n    axios(\r\n      RestAPIs.UpdateReceiptCompartmentDetails,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({ modCompartments }, () => {\r\n            this.getReceipt(\r\n              { Common_Code: modReceipt.ReceiptCode },\r\n              this.state.activeTab\r\n            );\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(\r\n          this.state.modMarineDispatch,\r\n          \"UpdateCompartmentDetails\",\r\n          notification\r\n        );\r\n        console.log(\"Error while compartmentDetailsSave:\", error);\r\n      });\r\n    let expandedRowIndex = expandedRows.findIndex(\r\n      (item) => item.SeqNumber === modCompartments.SeqNumber\r\n    );\r\n    if (expandedRowIndex >= 0) {\r\n      expandedRows.splice(expandedRowIndex, 1);\r\n    }\r\n    this.toggleExpand(modCompartments, false);\r\n\r\n    this.setState({\r\n      modCompartments: this.state.modCompartments,\r\n    });\r\n  };\r\n  getReceiptCompartmentFromReceipt(receipt) {\r\n    let receiptCompartments = [];\r\n    if (Array.isArray(receipt.ReceiptOriginTerminalCompartmentsInfo)) {\r\n      receipt.ReceiptOriginTerminalCompartmentsInfo.forEach((comp) =>\r\n        receiptCompartments.push({\r\n          ReceiptCode: comp.ReceiptCode,\r\n          CompartmentCode: comp.CompartmentCode,\r\n          CompartmentSeqNoInVehicle: comp.CompartmentSeqNoInVehicle,\r\n          TrailerCode: comp.TrailerCode,\r\n          CompartmentSeqNoInTrailer: comp.trailerCompSeq,\r\n          Quantity:\r\n            comp.Quantity !== null && comp.Quantity !== \"\"\r\n              ? comp.Quantity.toLocaleString()\r\n              : null,\r\n          QuantityUOM: comp.QuantityUOM,\r\n          SupplierCode: comp.SupplierCode,\r\n          DestinationCode: comp.DestinationCode,\r\n          OriginTerminalCode: comp.OriginTerminalCode,\r\n          ShareholderCode: this.props.selectedShareholder,\r\n          FinishedProductCode: comp.FinishedProductCode,\r\n          CompartmentStaus: comp.ReceiptCompartment_Status,\r\n          Attributes: comp.Attributes,\r\n          //  AttributesforUI: comp.AttributesforUI,\r\n        })\r\n      );\r\n    }\r\n    receiptCompartments =\r\n      Utilities.addSeqNumberToListObject(receiptCompartments);\r\n    return receiptCompartments.sort((a, b) => {\r\n      if (a.CompartmentSeqNoInVehicle > b.CompartmentSeqNoInVehicle) return 1;\r\n      else if (a.CompartmentSeqNoInVehicle < b.CompartmentSeqNoInVehicle)\r\n        return -1;\r\n      else return 0;\r\n    });\r\n  }\r\n  getReceiptCustomerInventory(receipt) {\r\n    let customerinventory = [];\r\n    if (Array.isArray(receipt.CustomerInventoryPlanList)) {\r\n      receipt.CustomerInventoryPlanList.forEach((comp) =>\r\n        customerinventory.push({\r\n          ShareholderCode: this.props.selectedShareholder,\r\n          CustomerCode: comp.CustomerCode,\r\n          BaseProductCode: comp.BaseProductCode,\r\n          FinishedProductCode: comp.FinishedProductCode,\r\n          PlannedQuantity: comp.PlannedQuantity,\r\n          GrossActualQuantity: comp.GrossActualQuantity,\r\n          NetActualQuantity: comp.NetActualQuantity,\r\n        })\r\n      );\r\n    }\r\n    customerinventory = Utilities.addSeqNumberToListObject(customerinventory);\r\n    return customerinventory.sort((a, b) => {\r\n      if (a.CompartmentSeqNoInVehicle > b.CompartmentSeqNoInVehicle) return 1;\r\n      else if (a.CompartmentSeqNoInVehicle < b.CompartmentSeqNoInVehicle)\r\n        return -1;\r\n      else return 0;\r\n    });\r\n  }\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (\r\n        Array.isArray(attributeMetaDataList) &&\r\n        attributeMetaDataList.length > 0\r\n      )\r\n        this.terminalSelectionChange([attributeMetaDataList[0].TerminalCode]);\r\n      else {\r\n        var compAttributeMetaDataList = lodash.cloneDeep(\r\n          this.state.compartmentAttributeMetaDataList\r\n        );\r\n        if (\r\n          Array.isArray(compAttributeMetaDataList) &&\r\n          compAttributeMetaDataList.length > 0\r\n        )\r\n          this.formCompartmentAttributes([\r\n            compAttributeMetaDataList[0].TerminalCode,\r\n          ]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TrailerDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  formCompartmentAttributes(selectedTerminals) {\r\n    try {\r\n      let attributes = lodash.cloneDeep(\r\n        this.state.compartmentAttributeMetaDataList\r\n      );\r\n\r\n      attributes = attributes.filter(function (attTerminal) {\r\n        return selectedTerminals.some(function (selTerminal) {\r\n          return attTerminal.TerminalCode === selTerminal;\r\n        });\r\n      });\r\n      let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n\r\n      modAssociations.forEach((comp) => {\r\n        let compAttributes = [];\r\n        attributes.forEach((att) => {\r\n          att.attributeMetaDataList.forEach((attribute) => {\r\n            compAttributes.push({\r\n              AttributeCode: attribute.Code,\r\n              AttributeName: attribute.DisplayName,\r\n              AttributeValue: attribute.DefaultValue,\r\n              TerminalCode: attribute.TerminalCode,\r\n              IsMandatory: attribute.IsMandatory,\r\n              DataType: attribute.DataType,\r\n              IsReadonly: attribute.IsReadonly,\r\n              MinValue: attribute.MinValue,\r\n              MaxValue: attribute.MaxValue,\r\n              ValidationFormat: attribute.ValidationFormat,\r\n              compSequenceNo: \"\",\r\n            });\r\n          });\r\n        });\r\n        let attributesforNewComp = lodash.cloneDeep(compAttributes);\r\n\r\n        if (\r\n          (comp.FinishedProductCode === null ||\r\n            comp.FinishedProductCode === undefined ||\r\n            comp.FinishedProductCode === \"\") &&\r\n          (comp.AttributesforUI === null || comp.AttributesforUI === undefined)\r\n        ) {\r\n          comp.AttributesforUI = [];\r\n          attributesforNewComp.forEach((assignedAttributes) => {\r\n            assignedAttributes.compSequenceNo = comp.SeqNumber;\r\n            comp.AttributesforUI.push(assignedAttributes);\r\n          });\r\n        } else {\r\n          if (\r\n            comp.AttributesforUI !== null &&\r\n            comp.AttributesforUI !== undefined\r\n          ) {\r\n            comp.AttributesforUI = comp.AttributesforUI.filter(function (\r\n              attTerminal\r\n            ) {\r\n              return selectedTerminals.some(function (selTerminal) {\r\n                return attTerminal.TerminalCode === selTerminal;\r\n              });\r\n            });\r\n\r\n            compAttributes = compAttributes.filter(function (attTerminal) {\r\n              return !comp.AttributesforUI.some(function (selTerminal) {\r\n                return attTerminal.TerminalCode === selTerminal.TerminalCode;\r\n              });\r\n            });\r\n          } else comp.AttributesforUI = [];\r\n\r\n          let tempCompAttributes = lodash.cloneDeep(compAttributes);\r\n          if (\r\n            Array.isArray(comp.Attributes) &&\r\n            comp.Attributes !== null &&\r\n            comp.Attributes !== undefined &&\r\n            comp.Attributes.length > 0\r\n          ) {\r\n            let selectedTerminalAttributes = comp.Attributes.filter(function (\r\n              attTerminal\r\n            ) {\r\n              return selectedTerminals.some(function (selTerminal) {\r\n                return attTerminal.TerminalCode === selTerminal;\r\n              });\r\n            });\r\n            selectedTerminalAttributes.forEach((att) => {\r\n              att.ListOfAttributeData.forEach((attData) => {\r\n                let tempAttIndex = tempCompAttributes.findIndex(\r\n                  (item) =>\r\n                    item.TerminalCode === att.TerminalCode &&\r\n                    item.AttributeCode === attData.AttributeCode\r\n                );\r\n                if (tempAttIndex >= 0)\r\n                  tempCompAttributes[tempAttIndex].AttributeValue =\r\n                    attData.AttributeValue;\r\n              });\r\n            });\r\n            tempCompAttributes.forEach((assignedAttributes) => {\r\n              assignedAttributes.compSequenceNo = comp.SeqNumber;\r\n              comp.AttributesforUI.push(assignedAttributes);\r\n            });\r\n          } else {\r\n            compAttributes.forEach((assignedAttributes) => {\r\n              assignedAttributes.compSequenceNo = comp.SeqNumber;\r\n              comp.AttributesforUI.push(assignedAttributes);\r\n            });\r\n          }\r\n        }\r\n        this.attributeToggleExpand(comp, true, true);\r\n        if (comp.AttributesforUI !== undefined && comp.AttributesforUI != null)\r\n          comp.AttributesforUI = Utilities.compartmentAttributesConvertoDecimal(\r\n            comp.AttributesforUI\r\n          );\r\n        comp.AttributesforUI = Utilities.addSeqNumberToListObject(\r\n          comp.AttributesforUI\r\n        );\r\n        console.log(\"comp.AttributesforUI\", comp.AttributesforUI);\r\n      });\r\n      this.setState({ modAssociations });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ContractDetailsComposite:Error in forming Compartment Attributes\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  fillAttributeDetails(modReceipt, attributeList) {\r\n    try {\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modReceipt.Attributes = [];\r\n      attributeList.forEach((comp) => {\r\n        let attribute = {\r\n          ListOfAttributeData: [],\r\n        };\r\n        attribute.TerminalCode = comp.TerminalCode;\r\n        comp.attributeMetaDataList.forEach((det) => {\r\n          attribute.ListOfAttributeData.push({\r\n            AttributeCode: det.Code,\r\n            AttributeValue: det.DefaultValue,\r\n          });\r\n        });\r\n        modReceipt.Attributes.push(attribute);\r\n      });\r\n      // For Compartment Attributes\r\n      modReceipt.ReceiptOriginTerminalCompartmentsInfo.forEach((comp) => {\r\n        if (comp.AttributesforUI !== undefined && comp.AttributesforUI != null)\r\n          comp.AttributesforUI =\r\n            Utilities.compartmentAttributesDatatypeConversion(\r\n              comp.AttributesforUI\r\n            );\r\n        let selectedTerminals = [];\r\n        if (this.props.userDetails.EntityResult.IsEnterpriseNode)\r\n          selectedTerminals = lodash.cloneDeep(modReceipt.TerminalCodes);\r\n        else {\r\n          var compAttributeMetaDataList = lodash.cloneDeep(\r\n            this.state.compartmentAttributeMetaDataList\r\n          );\r\n          if (compAttributeMetaDataList.length > 0)\r\n            selectedTerminals = [compAttributeMetaDataList[0].TerminalCode];\r\n        }\r\n        let terminalAttributes = [];\r\n        comp.Attributes = [];\r\n        selectedTerminals.forEach((terminal) => {\r\n          if (\r\n            comp.AttributesforUI !== null &&\r\n            comp.AttributesforUI !== undefined\r\n          )\r\n            terminalAttributes = comp.AttributesforUI.filter(function (\r\n              attTerminal\r\n            ) {\r\n              return attTerminal.TerminalCode === terminal;\r\n            });\r\n\r\n          let attribute = {\r\n            ListOfAttributeData: [],\r\n          };\r\n\r\n          attribute.TerminalCode = terminal;\r\n          terminalAttributes.forEach((termAtt) => {\r\n            if (termAtt.AttributeValue !== \"\" || termAtt.IsMandatory === true)\r\n              attribute.ListOfAttributeData.push({\r\n                AttributeCode: termAtt.AttributeCode,\r\n                AttributeValue: termAtt.AttributeValue,\r\n              });\r\n            //})\r\n            //comp.Attributes.push(attribute);\r\n          });\r\n          if (\r\n            attribute.ListOfAttributeData !== null &&\r\n            attribute.ListOfAttributeData !== undefined &&\r\n            attribute.ListOfAttributeData.length > 0\r\n          )\r\n            comp.Attributes.push(attribute);\r\n        });\r\n      });\r\n      this.setState({ modReceipt });\r\n      return modReceipt;\r\n    } catch (error) {\r\n      console.log(\r\n        \"TrailerDetailsComposite:Error occured on fillAttributeDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  getAttributes(receiptRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [receiptAttributeEntity, receiptOriginTerminalCompartment],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(\r\n                result.EntityResult.RECEIPT\r\n              ),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.RECEIPT\r\n                ),\r\n              compartmentAttributeMetaDataList: lodash.cloneDeep(\r\n                result.EntityResult.RECEIPTORIGINTERMINALCOMPARTMENT\r\n              ),\r\n            },\r\n            () => this.getReceipt(receiptRow)\r\n          );\r\n        } else {\r\n          console.log(\"Failed to get Attributes\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getting Attributes:\", error);\r\n    }\r\n  }\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      let attributesTerminalsList = [];\r\n      var attributeMetaDataList = [];\r\n      var selectedAttributeList = [];\r\n\r\n      attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      selectedAttributeList = lodash.cloneDeep(\r\n        this.state.selectedAttributeList\r\n      );\r\n\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      var modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n\r\n      selectedTerminals.forEach((terminal) => {\r\n        var existitem = selectedAttributeList.find((selectedAttribute) => {\r\n          return selectedAttribute.TerminalCode === terminal;\r\n        });\r\n\r\n        if (existitem === undefined) {\r\n          attributeMetaDataList.forEach(function (attributeMetaData) {\r\n            if (attributeMetaData.TerminalCode === terminal) {\r\n              var Attributevalue = modReceipt.Attributes.find(\r\n                (trailerAttribute) => {\r\n                  return trailerAttribute.TerminalCode === terminal;\r\n                }\r\n              );\r\n              if (Attributevalue !== undefined) {\r\n                attributeMetaData.attributeMetaDataList.forEach(function (\r\n                  attributeMetaData\r\n                ) {\r\n                  var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                    (x) => {\r\n                      return x.AttributeCode === attributeMetaData.Code;\r\n                    }\r\n                  );\r\n                  if (valueAttribute !== undefined)\r\n                    attributeMetaData.DefaultValue =\r\n                      valueAttribute.AttributeValue;\r\n                });\r\n              }\r\n              attributesTerminalsList.push(attributeMetaData);\r\n            }\r\n          });\r\n        } else {\r\n          attributesTerminalsList.push(existitem);\r\n        }\r\n      });\r\n\r\n      selectedAttributeList = [];\r\n      selectedAttributeList = attributesTerminalsList;\r\n      selectedAttributeList = Utilities.attributesConvertoDecimal(\r\n        selectedAttributeList\r\n      );\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n          return attributeValidation.TerminalCode === selectedTerminals;\r\n        });\r\n        if (existTerminal === undefined) {\r\n          Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n            (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n          );\r\n        }\r\n      });\r\n      this.formCompartmentAttributes(selectedTerminals);\r\n      this.setState({ selectedAttributeList, attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TrailerDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  handleAttributeCellDataEdit = (attribute, value) => {\r\n    try {\r\n      attribute.DefaultValue = value;\r\n      this.setState({\r\n        attribute: attribute,\r\n      });\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TrailerDetailsComposite:Error occured on handleAttributeCellDataEdit\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleCompAttributeCellDataEdit = (compAttribute, value) => {\r\n    let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n    let expandedRows = lodash.cloneDeep(this.state.expandedRows);\r\n    let compIndex = modAssociations.findIndex(\r\n      (item) => item.SeqNumber === compAttribute.rowData.compSequenceNo\r\n    );\r\n    if (compIndex >= 0) {\r\n      modAssociations[compIndex].AttributesforUI[\r\n        // compAttribute.rowIndex\r\n        compAttribute.rowData.SeqNumber - 1\r\n      ].AttributeValue = value;\r\n      this.setState({ modAssociations });\r\n      expandedRows.splice(compIndex, 1);\r\n      this.attributeToggleExpand(modAssociations[compIndex], true, true);\r\n    }\r\n  };\r\n  getReceipt(receiptRow, activeTab, notification) {\r\n    let notificationReceipt = null;\r\n    emptyReceipt.ShareholderCode = this.props.selectedShareholder;\r\n    emptyReceipt.ReceiptQuantityUOM =\r\n      this.props.userDetails.EntityResult.PageAttibutes.DefaultQtyUOMForTransactionUI.ROAD;\r\n    emptyReceipt.TerminalCodes =\r\n      this.props.terminalCodes.length === 1\r\n        ? [...this.props.terminalCodes]\r\n        : [];\r\n    this.handleResetAttributeValidationError();\r\n    if (receiptRow.Common_Code === undefined) {\r\n      this.setState(\r\n        {\r\n          receipt: lodash.cloneDeep(emptyReceipt),\r\n          modReceipt: lodash.cloneDeep(emptyReceipt),\r\n          isReadyToRender: true,\r\n          modAssociations: [],\r\n          modCustomerInventory: [],\r\n          selectedAttributeList: [],\r\n          // compartmentTab: false,\r\n          isPlanned: false,\r\n          recordweightTab: false,\r\n          modCompartments: [],\r\n          activeTab: activeTab,\r\n          modRecordWeight: [],\r\n          expandedRows: [],\r\n          truckReceiptKPIList: [],\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnTruckReceipt\r\n          ),\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            if (this.props.terminalCodes.length === 1) {\r\n              this.terminalSelectionChange(this.props.terminalCodes);\r\n            } else {\r\n              this.terminalSelectionChange([]);\r\n            }\r\n          } else {\r\n            this.localNodeAttribute([]);\r\n          }\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.receiptCode,\r\n        value: receiptRow.Common_Code,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.receiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetReceipt,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let modReceipt = result.EntityResult;\r\n          notificationReceipt = result.EntityResult;\r\n          modReceipt.SupplierCode =\r\n            result.EntityResult.ReceiptOriginTerminalCompartmentsInfo[0].SupplierCode;\r\n          let isPlanned = lodash.cloneDeep(this.state.isPlanned);\r\n          isPlanned =\r\n            modReceipt.ReceiptOriginTerminalCompartmentsInfo === null ||\r\n            modReceipt.ReceiptOriginTerminalCompartmentsInfo === undefined ||\r\n            modReceipt.ReceiptOriginTerminalCompartmentsInfo.length === 0\r\n              ? false\r\n              : true;\r\n          modReceipt.HSEInspectionStatus = Utilities.getKeyByValue(\r\n            Constants.HSEInpectionStatus,\r\n            modReceipt.HSEInspectionStatus\r\n          );\r\n          this.setState(\r\n            {\r\n              isReadyToRender: true,\r\n              receipt: result.EntityResult,\r\n              modAssociations: this.getReceiptCompartmentFromReceipt(\r\n                result.EntityResult\r\n              ),\r\n              // modCompartments: this.getReceiptCompartmentDetails(\r\n              // ),\r\n              modCustomerInventory: this.getReceiptCustomerInventory(\r\n                result.EntityResult\r\n              ),\r\n              modReceipt,\r\n              isPlanned: isPlanned,\r\n              // saveEnabled:\r\n              //   activeTab === 1 ?  Utilities.isInFunction(\r\n              //     this.props.userDetails.EntityResult.FunctionsList,\r\n              //     functionGroups.modify,\r\n              //     fnTruckReceipt) :\r\n              //   Utilities.isInFunction(\r\n              //     this.props.userDetails.EntityResult.FunctionsList,\r\n              //     functionGroups.modify,\r\n              //     fnTruckReceipt\r\n              //   ) && this.state.modCustomValues.ReceiptUpdateAllow==\"TRUE\",\r\n              activeTab: activeTab,\r\n              expandedRows: [],\r\n            },\r\n            () => {\r\n              this.getVehicle(result.EntityResult.VehicleCode, false);\r\n              this.getReciptStatuses(receiptRow);\r\n              this.getReceiptCompartmentDetails(result.EntityResult);\r\n              this.GetViewAllReceiptCustomData(result.EntityResult, activeTab);\r\n              // this.getCustomerInventory(result.EntityResult);\r\n              this.getAllRecordWeight(result.EntityResult);\r\n              this.getKPIList(\r\n                this.props.selectedShareholder,\r\n                result.EntityResult.ReceiptCode\r\n              );\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                this.terminalSelectionChange(result.EntityResult.TerminalCodes);\r\n              } else {\r\n                this.localNodeAttribute();\r\n              }\r\n              this.GetBayByTrnsaction(\r\n                result.EntityResult.ReceiptCode,\r\n                \"RECEIPT\",\r\n                result.EntityResult.ShareholderCode,\r\n                () => {\r\n                  this.getReciptsStatusOperations(result.EntityResult);\r\n                }\r\n              );\r\n            }\r\n          );\r\n        } else {\r\n          this.setState({\r\n            modReceipt: lodash.cloneDeep(emptyReceipt),\r\n            receipt: lodash.cloneDeep(emptyReceipt),\r\n            modAssociations: [],\r\n            modCustomerInventory: [],\r\n            isReadyToRender: true,\r\n            isPlanned: false,\r\n            selectedAttributeList: [],\r\n            activeTab:\r\n              this.props.ReceiptType.toLowerCase() === fnTruckReceipt ? 1 : 0,\r\n          });\r\n          console.log(\"Error in GetReceipt:\", result.ErrorList);\r\n        }\r\n        if (\r\n          notification !== undefined &&\r\n          notification !== null &&\r\n          notificationReceipt !== null\r\n        )\r\n          this.props.onSaved(notificationReceipt, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Receipt:\", error, receiptRow);\r\n      });\r\n  }\r\n  GetUOMList() {\r\n    axios(\r\n      RestAPIs.GetUOMList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            let quantityUOMOptions = [];\r\n            if (Array.isArray(result.EntityResult.VOLUME)) {\r\n              quantityUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.VOLUME\r\n              );\r\n            }\r\n            if (Array.isArray(result.EntityResult.MASS)) {\r\n              let massUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.MASS\r\n              );\r\n              massUOMOptions.forEach((massUOM) =>\r\n                quantityUOMOptions.push(massUOM)\r\n              );\r\n            }\r\n\r\n            this.setState({ quantityUOMOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting GetUOMList:\", error);\r\n      });\r\n  }\r\n  getVehicleCodes(shareholder) {\r\n    axios(\r\n      RestAPIs.GetVehicleCodes +\r\n        \"?Transportationtype=\" +\r\n        Constants.TransportationType.ROAD +\r\n        \"&ShareholderCode=\" +\r\n        shareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let vehicleOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            let vehicleSearchOptions = lodash.cloneDeep(vehicleOptions);\r\n            if (vehicleSearchOptions.length > Constants.filteredOptionsCount) {\r\n              vehicleSearchOptions = vehicleSearchOptions.slice(\r\n                0,\r\n                Constants.filteredOptionsCount\r\n              );\r\n            }\r\n            this.setState({ vehicleOptions, vehicleSearchOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getVehicleCodes:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting getVehicleCodes:\", error);\r\n      });\r\n  }\r\n  getVehicleSearchOptions() {\r\n    let vehicleSearchOptions = lodash.cloneDeep(\r\n      this.state.vehicleSearchOptions\r\n    );\r\n    let modVehicleCode = this.state.modReceipt.VehicleCode;\r\n    if (\r\n      modVehicleCode !== null &&\r\n      modVehicleCode !== \"\" &&\r\n      modVehicleCode !== undefined\r\n    ) {\r\n      let selectedVehicleCode = vehicleSearchOptions.find(\r\n        (element) =>\r\n          element.value.toLowerCase() === modVehicleCode.toLowerCase()\r\n      );\r\n      if (selectedVehicleCode === undefined) {\r\n        vehicleSearchOptions.push({\r\n          text: modVehicleCode,\r\n          value: modVehicleCode,\r\n        });\r\n      }\r\n    }\r\n    return vehicleSearchOptions;\r\n  }\r\n  getDriverSearchOptions() {\r\n    let driverSearchOptions = lodash.cloneDeep(this.state.driverSearchOptions);\r\n    let modDriverCode = this.state.modReceipt.DriverCode;\r\n    if (\r\n      modDriverCode !== null &&\r\n      modDriverCode !== \"\" &&\r\n      modDriverCode !== undefined\r\n    ) {\r\n      let selectedDriverCode = driverSearchOptions.find(\r\n        (element) => element.value.toLowerCase() === modDriverCode.toLowerCase()\r\n      );\r\n      if (selectedDriverCode === undefined) {\r\n        driverSearchOptions.push({\r\n          text: modDriverCode,\r\n          value: modDriverCode,\r\n        });\r\n      }\r\n    }\r\n    return driverSearchOptions;\r\n  }\r\n  GetSupplierOriginTerminals(shareholder) {\r\n    axios(\r\n      RestAPIs.GetSupplierOriginTerminals +\r\n        \"?Transportationtype=\" +\r\n        Constants.TransportationType.ROAD +\r\n        \"&ShareholderCode=\" +\r\n        shareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (Array.isArray(result.EntityResult)) {\r\n            let shareholderSuppliers = result.EntityResult.filter(\r\n              (shareholderSup) => shareholderSup.ShareholderCode === shareholder\r\n            );\r\n            if (shareholderSuppliers.length > 0) {\r\n              let supplierOriginTerminalsList =\r\n                shareholderSuppliers[0].SupplierOriginTerminalsList;\r\n              let supplier = Object.keys(supplierOriginTerminalsList);\r\n              if (\r\n                supplierOriginTerminalsList !== null ||\r\n                supplierOriginTerminalsList !== undefined\r\n              ) {\r\n                let supplierOptions = Utilities.transferListtoOptions(supplier);\r\n                this.setState({ supplierOptions });\r\n              }\r\n              this.setState({ supplierOriginTerminalsList });\r\n              if (\r\n                supplierOriginTerminalsList === \"\" ||\r\n                supplierOriginTerminalsList === null\r\n              ) {\r\n                this.setState({ supplierOptions: [] });\r\n              }\r\n            } else {\r\n              console.log(\r\n                \"No supplierOriginTerminalList identified for shareholder\"\r\n              );\r\n            }\r\n          } else {\r\n            console.log(\r\n              \"No supplierOriginTerminalList identified for shareholder\"\r\n            );\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error in GetSupplierOriginTerminals: \", error);\r\n      });\r\n  }\r\n  confirmVehicleBond = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.vehicleBondPopUp} size=\"small\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h5>{t(\"ReceiptBonded_VehicleNonBonded\")}</h5>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  this.setState({\r\n                    vehicleBondPopUp: false,\r\n                    stockProducts: true,\r\n                  });\r\n                }}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => {\r\n                  this.setState({ vehicleBondPopUp: false });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  confirmBondedStockProducts = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.stockProducts} size=\"small\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h5>{t(\"ReceiptBonded_StockProducts\")}</h5>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  this.setState({ stockProducts: false }, () => {\r\n                    this.saveReceipt();\r\n                  });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  confirmVehicleBondExpiryDate = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.vehicleBondExpiryPopUp} size=\"small\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h5>{t(\"ReceiptBonded_VehicleBondExpiryDate\")}</h5>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  this.setState({\r\n                    vehicleBondExpiryPopUp: false,\r\n                    stockProducts: true,\r\n                  });\r\n                }}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => {\r\n                  this.setState({ vehicleBondExpiryPopUp: false });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n  handleRecordWeight = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isRecordWeight} size=\"small\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h3>\r\n                  {t(\"ViewReceipt_RecordWeightReceipt\") +\r\n                    \" : \" +\r\n                    this.state.receipt.ReceiptCode}\r\n                </h3>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                <div className=\"col col-lg-9\">\r\n                  <Select\r\n                    fluid\r\n                    placeholder={t(\"Select_WB\")}\r\n                    label={t(\"ViewShipment_WeighBridgeCode\")}\r\n                    value={this.state.weighBridgeCode}\r\n                    options={Utilities.transferListtoOptions(\r\n                      this.state.recordWeightList\r\n                    )}\r\n                    onChange={(cellData) => {\r\n                      this.setState({ weighBridgeCode: cellData }, () =>\r\n                        this.getScadaValue()\r\n                      );\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"shipmentRecordWeightButtonDiv\">\r\n                  <Button\r\n                    type=\"primary\"\r\n                    size=\"small\"\r\n                    className=\"shipmentRecordWeightButton\"\r\n                    content={t(\"ViewShipment_ReadWeight\")}\r\n                    onClick={() => this.getScadaValue()}\r\n                    disabled={\r\n                      this.state.weighBridgeCode === null ||\r\n                      this.state.weighBridgeCode === \"\" ||\r\n                      this.state.weighBridgeCode === undefined\r\n                        ? true\r\n                        : false\r\n                    }\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                <div className=\"col col-lg-12\">\r\n                  <Input\r\n                    fluid\r\n                    value={this.state.scadaValue}\r\n                    label={t(\"ViewShipment_Weight\")}\r\n                    reserveSpace={false}\r\n                    disabled={true}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                <div className=\"col col-lg-12\">\r\n                  <Checkbox\r\n                    className=\"LabelEnabled\"\r\n                    label={t(\"Allow_Out_of_Tolerance_for_TW\")}\r\n                    checked={this.state.allowOutofRangeTW}\r\n                    onChange={(cellData) => {\r\n                      this.setState({ allowOutofRangeTW: cellData });\r\n                    }}\r\n                    disabled={false}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                className=\"shipmentRecordWeightOtherbuttons\"\r\n                content={t(\"ViewShipment_RecordTareWeight\")}\r\n                onClick={() => this.RecordTareWeight()}\r\n                disabled={\r\n                  this.state.scadaValue === null ||\r\n                  this.state.scadaValue === \"\" ||\r\n                  this.state.scadaValue === undefined\r\n                    ? true\r\n                    : false\r\n                }\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"ViewShipment_RecordLadenWeight\")}\r\n                className=\"shipmentRecordWeightOtherbuttons\"\r\n                onClick={() => this.RecordLadenWeight()}\r\n                disabled={\r\n                  this.state.scadaValue === null ||\r\n                  this.state.scadaValue === \"\" ||\r\n                  this.state.scadaValue === undefined\r\n                    ? true\r\n                    : false\r\n                }\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"Cancel\")}\r\n                className=\"shipmentRecordWeightOtherbuttons\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    isRecordWeight: false,\r\n                    weighBridgeCode: \"\",\r\n                    scadaValue: \"\",\r\n                  });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n  getRecordWeightList() {\r\n    axios(\r\n      RestAPIs.GetWeighBridgeList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n\r\n        this.setState({\r\n          isRecordWeight: true,\r\n          recordWeightList: result.EntityResult,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting RecordWeightList:\", error);\r\n      });\r\n  }\r\n\r\n  RecordLadenWeight = () => {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.weighBridgeCode,\r\n          value: this.state.weighBridgeCode,\r\n        },\r\n        {\r\n          key: KeyCodes.weight,\r\n          value: this.state.scadaValue,\r\n        },\r\n        {\r\n          key: KeyCodes.vehicleCode,\r\n          value: this.state.receipt.VehicleCode,\r\n        },\r\n        {\r\n          key: KeyCodes.receiptCode,\r\n          value: this.state.receipt.ReceiptCode,\r\n        },\r\n        {\r\n          key: KeyCodes.outOfToleranceAllowed,\r\n          value: this.state.allowOutofRangeTW,\r\n        },\r\n      ];\r\n\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"ViewAllShipment_Record_Weight\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"ReceiptCode\"],\r\n            keyValues: [this.state.receipt.ReceiptCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.weighBridgeCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.ReceiptRecordLadenWeight,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          notification.messageType = response.data.IsSuccess\r\n            ? \"success\"\r\n            : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess =\r\n            response.data.IsSuccess;\r\n          if (response.data.IsSuccess) {\r\n            this.setState({ isRecordWeight: false }, () => {\r\n              this.getReceipt(\r\n                {\r\n                  Common_Code: this.state.modReceipt.ReceiptCode,\r\n                },\r\n                0,\r\n                notification\r\n              );\r\n            });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              response.data.ErrorList[0];\r\n            this.props.onSaved(this.state.modReceipt, \"update\", notification);\r\n          }\r\n          // toast(\r\n          //   <ErrorBoundary>\r\n          //     <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          //   </ErrorBoundary>,\r\n          //   {\r\n          //     autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          //   }\r\n          // );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while recording laden weight:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in GetScadaValue\");\r\n    }\r\n  };\r\n\r\n  RecordTareWeight = () => {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.weighBridgeCode,\r\n          value: this.state.weighBridgeCode,\r\n        },\r\n        {\r\n          key: KeyCodes.weight,\r\n          value: this.state.scadaValue,\r\n        },\r\n        {\r\n          key: KeyCodes.vehicleCode,\r\n          value: this.state.receipt.VehicleCode,\r\n        },\r\n        {\r\n          key: KeyCodes.receiptCode,\r\n          value: this.state.receipt.ReceiptCode,\r\n        },\r\n        {\r\n          key: KeyCodes.outOfToleranceAllowed,\r\n          value: this.state.allowOutofRangeTW,\r\n        },\r\n      ];\r\n\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"ViewAllShipment_Record_Weight\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"ReceiptCode\"],\r\n            keyValues: [this.state.receipt.ReceiptCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.weighBridgeCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.ReceiptRecordTareWeight,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          notification.messageType = response.data.IsSuccess\r\n            ? \"success\"\r\n            : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess =\r\n            response.data.IsSuccess;\r\n          if (response.data.IsSuccess) {\r\n            this.setState({ isRecordWeight: false }, () => {\r\n              this.getReceipt(\r\n                {\r\n                  Common_Code: this.state.modReceipt.ReceiptCode,\r\n                },\r\n                0,\r\n                notification\r\n              );\r\n            });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              response.data.ErrorList[0];\r\n            this.props.onSaved(this.state.modReceipt, \"update\", notification);\r\n          }\r\n          // toast(\r\n          //   <ErrorBoundary>\r\n          //     <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          //   </ErrorBoundary>,\r\n          //   {\r\n          //     autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          //   }\r\n          // );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while recording tare weight:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in GetScadaValue\");\r\n    }\r\n  };\r\n  getScadaValue = () => {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.weighBridgeCode,\r\n          value: this.state.weighBridgeCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.weighBridgeCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.ReadWBScadaValue,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let notification = {\r\n            messageType: \"critical\",\r\n            message: \"ViewAllShipment_Record_Weight\",\r\n            messageResultDetails: [\r\n              {\r\n                keyFields: [\"ReceiptCode\"],\r\n                keyValues: [this.state.receipt.ReceiptCode],\r\n                isSuccess: false,\r\n                errorMessage: \"\",\r\n              },\r\n            ],\r\n          };\r\n\r\n          notification.messageType = response.data.IsSuccess\r\n            ? \"success\"\r\n            : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess =\r\n            response.data.IsSuccess;\r\n\r\n          if (response.data.IsSuccess) {\r\n            this.setState({ scadaValue: response.data.EntityResult });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              response.data.ErrorList[0];\r\n\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting weigh brdige Scada value:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in GetScadaValue\");\r\n    }\r\n  };\r\n  getAllRecordWeight = (selectedRow) => {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.receiptCode,\r\n        value: selectedRow.ReceiptCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.receiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetReceiptRecordWeight,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        response.data.IsSuccess\r\n          ? this.setState({\r\n              modRecordWeight: this.fillRecorWeightDetails(\r\n                response.data.EntityResult\r\n              ),\r\n              recordweightTab:\r\n                response.data.EntityResult.length > 0 ? true : false,\r\n            })\r\n          : this.setState({ modRecordWeight: {}, recordweightTab: false });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting receipt compartment details:\", error);\r\n      });\r\n  };\r\n\r\n  authorizeToUnLoad = () => {\r\n    this.handleAuthenticationClose();\r\n\r\n    let receipt = lodash.cloneDeep(this.state.receipt);\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ViewReceipt_AuthorizeUnLoad_status\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ReceiptDetail_ReceiptNumber\"],\r\n          keyValues: [receipt.ReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n\r\n    this.props.handleAuthorizeToUnLoad(\r\n      modReceipt,\r\n      this.props.selectedShareholder,\r\n      this.props.tokenDetails.tokenInfo,\r\n      (result) => {\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getReceipt(\r\n            { Common_Code: modReceipt.ReceiptCode },\r\n            1,\r\n            notification\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.props.onSaved(modReceipt, \"update\", notification);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  allowToUnLoadOnClick = () => {\r\n    let showAllowToUnLoadAuthenticationLayout =\r\n      this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n        ? true\r\n        : false;\r\n\r\n    this.setState({ showAllowToUnLoadAuthenticationLayout }, () => {\r\n      if (showAllowToUnLoadAuthenticationLayout === false) {\r\n        this.allowToUnLoad();\r\n      }\r\n    });\r\n  };\r\n\r\n  allowToUnLoad = () => {\r\n    this.handleAuthenticationClose();\r\n\r\n    let receipt = lodash.cloneDeep(this.state.receipt);\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ViewReceipt_AllowUnLoad_status\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ReceiptDetail_ReceiptNumber\"],\r\n          keyValues: [receipt.ReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n    this.props.handleAllowToLoad(\r\n      modReceipt,\r\n      this.props.selectedShareholder,\r\n      this.props.tokenDetails.tokenInfo,\r\n      (result) => {\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getReceipt(\r\n            { Common_Code: modReceipt.ReceiptCode },\r\n            1,\r\n            notification\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.props.onSaved(modReceipt, \"update\", notification);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  printRANClick = () => {\r\n    let showRANAuthenticationLayout =\r\n      this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n        ? true\r\n        : false;\r\n\r\n    this.setState({ showRANAuthenticationLayout }, () => {\r\n      if (showRANAuthenticationLayout === false) {\r\n        this.printRAN();\r\n      }\r\n    });\r\n  };\r\n\r\n  printRAN = () => {\r\n    this.handleAuthenticationClose();\r\n\r\n    let receipt = lodash.cloneDeep(this.state.receipt);\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ViewReceiptStatus_PrintRAN_status\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ReceiptDetail_ReceiptNumber\"],\r\n          keyValues: [receipt.ReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n    this.props.handlePrintRAN(\r\n      modReceipt,\r\n      this.props.selectedShareholder,\r\n      this.props.tokenDetails.tokenInfo,\r\n      (result) => {\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getReceipt({ Common_Code: modReceipt.ReceiptCode });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  viewBOD = () => {\r\n    this.props.handleViewBOD();\r\n    this.handleAuthenticationClose();\r\n  };\r\n\r\n  printBODClick = () => {\r\n    let showPrintBODAuthenticationLayout =\r\n      this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n        ? true\r\n        : false;\r\n\r\n    this.setState({ showPrintBODAuthenticationLayout }, () => {\r\n      if (showPrintBODAuthenticationLayout === false) {\r\n        this.printBOD();\r\n      }\r\n    });\r\n  };\r\n\r\n  printBOD = () => {\r\n    this.handleAuthenticationClose();\r\n    let receipt = lodash.cloneDeep(this.state.receipt);\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ViewReceiptStatus_PrintBOD_status\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ReceiptDetail_ReceiptNumber\"],\r\n          keyValues: [receipt.ReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n    this.props.handlePrintBOD(\r\n      modReceipt,\r\n      this.props.selectedShareholder,\r\n      this.props.tokenDetails.tokenInfo,\r\n      (result) => {\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getReceipt({ Common_Code: modReceipt.ReceiptCode });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  handleOperationClick = (operation) => {\r\n    let receipt = lodash.cloneDeep(this.state.receipt);\r\n    let modReceipt = lodash.cloneDeep(this.state.modReceipt);\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: operation + \"_status\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ReceiptDetail_ReceiptNumber\"],\r\n          keyValues: [receipt.ReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    switch (operation) {\r\n      case Constants.ViewAllTruckReceiptOperations.ViewReceipt_AuthorizeUnLoad:\r\n        let showAuthorizeToUnLoadAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n\r\n        this.setState({ showAuthorizeToUnLoadAuthenticationLayout }, () => {\r\n          if (showAuthorizeToUnLoadAuthenticationLayout === false) {\r\n            this.authorizeToUnLoad();\r\n          }\r\n        });\r\n        break;\r\n      case Constants.ViewAllTruckReceiptOperations.ViewReceipt_AllowUnLoad:\r\n        this.allowToUnLoadOnClick();\r\n        break;\r\n      case Constants.ViewAllTruckReceiptOperations.ViewReceipt_ManualEntry:\r\n        this.setState({ isManualEntry: true });\r\n        break;\r\n\r\n      case Constants.ViewAllTruckReceiptOperations.ViewReceipt_RecordWeight:\r\n        break;\r\n      case Constants.ViewAllTruckReceiptOperations.ViewReceipt_CloseReceipt:\r\n        this.setState({ isCloseReceipt: true });\r\n\r\n        break;\r\n      case Constants.ViewAllTruckReceiptOperations.ViewReceipt_PrintRAN:\r\n        this.printRANClick();\r\n        break;\r\n      case Constants.ViewAllTruckReceiptOperations.ViewReceipt_ViewUnloading:\r\n        this.props.handleViewUnLoading(\r\n          modReceipt,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            if (result.IsSuccess === true) {\r\n              let ModViewUnloadDetails = result.EntityResult;\r\n              if (\r\n                ModViewUnloadDetails !== null &&\r\n                ModViewUnloadDetails.Table !== null &&\r\n                ModViewUnloadDetails.Table.length > 0\r\n              ) {\r\n                let count = 0;\r\n                ModViewUnloadDetails.Table.forEach((item) => {\r\n                  item.seqNo = count;\r\n                  item.endtime =\r\n                    new Date(item.endtime).toLocaleDateString() +\r\n                    \" \" +\r\n                    new Date(item.endtime).toLocaleTimeString();\r\n                  item.starttime =\r\n                    new Date(item.starttime).toLocaleDateString() +\r\n                    \" \" +\r\n                    new Date(item.starttime).toLocaleTimeString();\r\n                  count++;\r\n                  item.grossquantity = item.grossquantity.split(\".\").join(\".\");\r\n                  item.netquantity = item.netquantity.split(\".\").join(\".\");\r\n                });\r\n              }\r\n              this.setState({\r\n                ModViewUnloadDetails: result.EntityResult.Table,\r\n                isViewUnloading: true,\r\n              });\r\n              this.getReceipt({ Common_Code: modReceipt.ReceiptCode });\r\n            } else {\r\n              notification.messageType = result.IsSuccess\r\n                ? \"success\"\r\n                : \"critical\";\r\n              notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n              toast(\r\n                <ErrorBoundary>\r\n                  <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                </ErrorBoundary>,\r\n                {\r\n                  autoClose:\r\n                    notification.messageType === \"success\" ? 10000 : false,\r\n                }\r\n              );\r\n            }\r\n          }\r\n        );\r\n        break;\r\n\r\n      case Constants.ViewAllTruckReceiptOperations.ViewReceipt_ViewBOD:\r\n        let showViewBODAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n\r\n        this.setState({ showViewBODAuthenticationLayout }, () => {\r\n          if (showViewBODAuthenticationLayout === false) {\r\n            this.viewBOD();\r\n          }\r\n        });\r\n\r\n        break;\r\n      case Constants.ViewAllTruckReceiptOperations.ViewReceipt_ViewAuditTrail:\r\n        this.props.handleViewAuditTrail(\r\n          modReceipt,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            if (result.IsSuccess === true) {\r\n              let modAuditTrailList = result.EntityResult;\r\n              for (let i = 0; i < modAuditTrailList.length; i++) {\r\n                let receiptStatus = modAuditTrailList[i].ReceiptStatus;\r\n                if (receiptStatus === Constants.Receipt_Status.AUTO_UNLOADED) {\r\n                  receiptStatus = Constants.ReceiptStatus.AUTO_UNLOADED;\r\n                } else if (\r\n                  receiptStatus === Constants.Receipt_Status.CHECKED_IN\r\n                ) {\r\n                  receiptStatus = Constants.ReceiptStatus.CHECKED_IN;\r\n                } else if (receiptStatus === Constants.Receipt_Status.CLOSED) {\r\n                  receiptStatus = Constants.ReceiptStatus.CLOSED;\r\n                } else if (\r\n                  receiptStatus === Constants.Receipt_Status.INTERRUPTED\r\n                ) {\r\n                  receiptStatus = Constants.ReceiptStatus.INTERRUPTED;\r\n                } else if (\r\n                  receiptStatus === Constants.Receipt_Status.UNLOADING\r\n                ) {\r\n                  receiptStatus = Constants.ReceiptStatus.UNLOADING;\r\n                } else if (\r\n                  receiptStatus === Constants.Receipt_Status.MANUALLY_UNLOADED\r\n                ) {\r\n                  receiptStatus = Constants.ReceiptStatus.MANUALLY_UNLOADED;\r\n                } else if (\r\n                  receiptStatus === Constants.Receipt_Status.PARTIALLY_UNLOADED\r\n                ) {\r\n                  receiptStatus = Constants.ReceiptStatus.PARTIALLY_UNLOADED;\r\n                } else if (receiptStatus === Constants.Receipt_Status.QUEUED) {\r\n                  receiptStatus = Constants.ReceiptStatus.QUEUED;\r\n                } else if (receiptStatus === Constants.Receipt_Status.READY) {\r\n                  receiptStatus = Constants.ReceiptStatus.READY;\r\n                } else if (\r\n                  receiptStatus === Constants.Receipt_Status.DE_QUEUED\r\n                ) {\r\n                  receiptStatus = Constants.ReceiptStatus.DE_QUEUED;\r\n                } else if (\r\n                  receiptStatus === Constants.Receipt_Status.WEIGHED_IN\r\n                ) {\r\n                  receiptStatus = Constants.ReceiptStatus.WEIGHED_IN;\r\n                } else if (\r\n                  receiptStatus === Constants.Receipt_Status.WEIGHED_OUT\r\n                ) {\r\n                  receiptStatus = Constants.ReceiptStatus.WEIGHED_OUT;\r\n                } else if (\r\n                  receiptStatus === Constants.Receipt_Status.ASSIGNED\r\n                ) {\r\n                  receiptStatus = Constants.ReceiptStatus.ASSIGNED;\r\n                } else if (\r\n                  receiptStatus === Constants.Receipt_Status.CANCELLED\r\n                ) {\r\n                  receiptStatus = Constants.ReceiptStatus.CANCELLED;\r\n                } else if (receiptStatus === Constants.Receipt_Status.EXPIRED) {\r\n                  receiptStatus = Constants.ReceiptStatus.EXPIRED;\r\n                } else if (\r\n                  receiptStatus === Constants.Receipt_Status.REJECTED\r\n                ) {\r\n                  receiptStatus = Constants.ReceiptStatus.REJECTED;\r\n                } else {\r\n                  receiptStatus = Constants.ReceiptStatus.USER_DEFINED;\r\n                }\r\n\r\n                modAuditTrailList[i].Receipt_Status = receiptStatus;\r\n                modAuditTrailList[i].UpdatedTime =\r\n                  new Date(\r\n                    modAuditTrailList[i].UpdatedTime\r\n                  ).toLocaleDateString() +\r\n                  \" \" +\r\n                  new Date(\r\n                    modAuditTrailList[i].UpdatedTime\r\n                  ).toLocaleTimeString();\r\n              }\r\n\r\n              this.setState({\r\n                auditTrailList: result.EntityResult,\r\n                modAuditTrailList: modAuditTrailList,\r\n                isViewAuditTrail: true,\r\n              });\r\n              this.getReceipt({ Common_Code: modReceipt.ReceiptCode });\r\n            } else {\r\n              notification.messageType = result.IsSuccess\r\n                ? \"success\"\r\n                : \"critical\";\r\n              notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n              toast(\r\n                <ErrorBoundary>\r\n                  <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                </ErrorBoundary>,\r\n                {\r\n                  autoClose:\r\n                    notification.messageType === \"success\" ? 10000 : false,\r\n                }\r\n              );\r\n            }\r\n          }\r\n        );\r\n        break;\r\n      case Constants.ViewAllTruckReceiptOperations.ViewReceipt_RecordWeight:\r\n        this.getRecordWeightList();\r\n        break;\r\n      case Constants.ViewAllTruckReceiptOperations.ViewReceipt_PrintBOD:\r\n        this.printBODClick();\r\n        break;\r\n      case Constants.ViewAllTruckReceiptOperations.ViewReceipt_SendBOD:\r\n        this.props.handleSendBOD(\r\n          modReceipt,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n              this.getReceipt({ Common_Code: modReceipt.ReceiptCode });\r\n            } else {\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n            }\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          }\r\n        );\r\n        break;\r\n      case Constants.ViewAllTruckReceiptOperations.viewReceipt_BSIOutbound:\r\n        this.props.handleBSIOutbound(\r\n          modReceipt,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n              this.getReceipt({ Common_Code: modReceipt.ReceiptCode });\r\n            } else {\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n            }\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          }\r\n        );\r\n        break;\r\n      case Constants.ViewAllTruckReceiptOperations.viewReceipt_SealCompartments:\r\n        this.handleSealCompartments(\r\n          this.state.modReceipt.ReceiptCode,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n              this.setState({\r\n                isSealCompartments: true,\r\n                sealCompartments: result.EntityResult,\r\n              });\r\n            } else {\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n              toast(\r\n                <ErrorBoundary>\r\n                  <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                </ErrorBoundary>,\r\n                {\r\n                  autoClose:\r\n                    notification.messageType === \"success\" ? 10000 : false,\r\n                }\r\n              );\r\n            }\r\n          }\r\n        );\r\n        break;\r\n      case \"ViewAllocateBay_AllocateBay\":\r\n        this.getBays();\r\n        break;\r\n      case \"ViewAllocateBay_DeallocateBay\":\r\n        this.setState({\r\n          isDeAllocateBay: true,\r\n        });\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  getBays = () => {\r\n    let receipt = lodash.cloneDeep(this.state.receipt);\r\n    let products = [];\r\n    receipt.ReceiptCompartmentsInfo.forEach((element) => {\r\n      products.push(element.FinishedProductCode);\r\n    });\r\n\r\n    const obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      KeyCodes: [\r\n        {\r\n          key: \"TransactionType\",\r\n          value: \"RECEIPT\",\r\n        },\r\n        {\r\n          key: \"TransportationType\",\r\n          value: \"ROAD\",\r\n        },\r\n        {\r\n          key: \"TerminalCode\",\r\n          value: this.state.receipt.ActualTerminalCode,\r\n        },\r\n        {\r\n          key: \"FinishedProductCode\",\r\n          value: products.toString(),\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.GetAllValidBays,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let bayAllocation = result.EntityResult;\r\n          bayAllocation.forEach((element) => {\r\n            element.SupportedProducts.forEach((ele) => {\r\n              if (\r\n                element.AssociatedProduct === \"\" ||\r\n                element.AssociatedProduct === undefined\r\n              ) {\r\n                element.AssociatedProduct = ele.Code;\r\n              } else {\r\n                element.AssociatedProduct += \",\" + ele.Code;\r\n              }\r\n            });\r\n          });\r\n\r\n          this.setState({\r\n            bayData: bayAllocation,\r\n            isAllocateBay: true,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            bayData: [],\r\n            isAllocateBay: true,\r\n          });\r\n          console.log(\"Error in getBays:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ bayData: [], isReadyToRender: true });\r\n        console.log(\"Error while getBays:\", error);\r\n      });\r\n  };\r\n\r\n  handleTabChange = (activeIndex) => {\r\n    try {\r\n      this.setState({ activeTab: activeIndex, expandedRows: [] });\r\n      if (activeIndex === 1) {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.modify,\r\n            fnTruckReceipt\r\n          ),\r\n        });\r\n      } else {\r\n        this.setState({\r\n          saveEnabled:\r\n            Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnTruckReceipt\r\n            ) && this.state.modCustomValues.ReceiptUpdateAllow === \"TRUE\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailDispatchDetailsComposite: Error occurred on handleTabChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  onBack = () => {\r\n    this.setState({\r\n      isManualEntry: false,\r\n      isPlanned: true,\r\n      saveEnabled: false,\r\n      isViewAuditTrail: false,\r\n      isViewUnloading: false,\r\n      drawerStatus: false,\r\n      expandedRows: [],\r\n      loadingExpandedRows: [],\r\n    });\r\n    this.getReceipt({ Common_Code: this.state.modReceipt.ReceiptCode });\r\n  };\r\n  getReciptStatuses(receiptRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetReceiptAllStatuses +\r\n          \"?shareholderCode=\" +\r\n          this.props.selectedShareholder +\r\n          \"&receiptCode=\" +\r\n          receiptRow.Common_Code,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          console.log(\"result.EntityResult\", result.EntityResult);\r\n          this.setState({\r\n            currentReceiptStatus: result.EntityResult,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting getReceiptStatuses:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  getReciptsStatusOperations(receiptItem) {\r\n    try {\r\n      var receiptStatus = receiptItem.ReceiptStatus;\r\n      var isVolumneBased = receiptItem.IsVolumeBased;\r\n      var selectedShareholder = this.props.selectedShareholder;\r\n      axios(\r\n        RestAPIs.GetReceiptOperations +\r\n          \"?receiptStatus=\" +\r\n          receiptStatus +\r\n          \"&IsVolumneBased=\" +\r\n          isVolumneBased +\r\n          \"&shareholder=\" +\r\n          selectedShareholder,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          console.log(response.data);\r\n          var result = response.data;\r\n          if (\r\n            result.EntityResult.ViewAllocateBay_DeallocateBay === true &&\r\n            this.state.ReceiptBay !== null &&\r\n            this.state.ReceiptBay !== undefined &&\r\n            this.state.ReceiptBay !== \"\"\r\n          ) {\r\n            result.EntityResult.ViewAllocateBay_DeallocateBay = true;\r\n          } else if (\r\n            result.EntityResult.ViewAllocateBay_DeallocateBay === true &&\r\n            (this.state.ReceiptBay === null ||\r\n              this.state.ReceiptBay === undefined ||\r\n              this.state.ReceiptBay === \"\")\r\n          ) {\r\n            result.EntityResult.ViewAllocateBay_DeallocateBay = false;\r\n          }\r\n          let nextOperations = [];\r\n          Object.keys(result.EntityResult).forEach((operation) => {\r\n            console.log(operation);\r\n            if (result.EntityResult[operation]) nextOperations.push(operation);\r\n          });\r\n\r\n          this.setState({ shipmentNextOperations: nextOperations });\r\n          console.log(\"Operations of receipt\", nextOperations);\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting getReceiptStatusOperations:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  getLookUpData() {\r\n    axios(\r\n      RestAPIs.GetLookUpData + \"?LookUpTypeCode=CustomerInventory\",\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        console.log(result);\r\n\r\n        if (result.IsSuccess === true) {\r\n          let isEnable = true;\r\n          if (result.EntityResult.Enabled === \"False\") {\r\n            isEnable = false;\r\n          }\r\n          this.setState({\r\n            lookUpData: result.EntityResult,\r\n            customerInventoryTab: isEnable,\r\n          });\r\n        } else {\r\n          console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"SealMasterDetailsComposite: Error occurred on getLookUpData\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n  getReceiptConfigLookUpTypeName() {\r\n    axios(\r\n      RestAPIs.GetLookUpData + \"?LookUpTypeCode=RECEIPTCONFIGURATION\",\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        console.log(result);\r\n\r\n        if (result.IsSuccess === true) {\r\n          let isEnable = false;\r\n          if (result.EntityResult.NoOfDaysBeforeOldReceiptsCreationIsAllowed) {\r\n            isEnable = true;\r\n          }\r\n          this.setState({\r\n            lookUpData: result.EntityResult,\r\n            IsPastDisable: isEnable,\r\n          });\r\n        } else {\r\n          console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"SealMasterDetailsComposite: Error occurred on getLookUpData\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n  getReceiptBYCompartmentLookUpData() {\r\n    axios(\r\n      RestAPIs.GetLookUpData + \"?LookUpTypeCode=ReceiptByCompartment\",\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        console.log(result);\r\n\r\n        if (result.IsSuccess === true) {\r\n          let isEnable = false;\r\n          if (result.EntityResult.ReceiptWithSingleSupplier === \"0\") {\r\n            isEnable = true;\r\n          }\r\n          this.setState({\r\n            lookUpData: result.EntityResult,\r\n            SupplierEnable: isEnable,\r\n          });\r\n        } else {\r\n          console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"SealMasterDetailsComposite: Error occurred on getLookUpData\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n  getLookUpHsEInSpectionEnableData() {\r\n    axios(\r\n      RestAPIs.GetLookUpData + \"?LookUpTypeCode=HSEInspection\",\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        console.log(result);\r\n\r\n        if (result.IsSuccess === true) {\r\n          let isHSEInspectionEnable = false;\r\n          if (result.EntityResult.EnableRoad === \"True\") {\r\n            isHSEInspectionEnable = true;\r\n          }\r\n          this.setState({\r\n            isHSEInspectionEnable,\r\n          });\r\n        } else {\r\n          console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"SealMasterDetailsComposite: Error occurred on getLookUpData\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n  IsBonded() {\r\n    axios(\r\n      RestAPIs.GetLookUpData + \"?LookUpTypeCode=Bonding\",\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let bonded = result.EntityResult[\"EnableBondingNon-Bonding\"];\r\n          this.setState({\r\n            isBonded: bonded.toUpperCase() === \"TRUE\" ? true : false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            isBonded: false,\r\n          });\r\n          console.log(\"Error in get IsBonded: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          isBonded: false,\r\n        });\r\n        console.log(\r\n          \"SealMasterDetailsComposite: Error occurred on get IsBonded\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n  toggleExpand = (data, open) => {\r\n    let expandedRows = this.state.expandedRows;\r\n    let expandedRowIndex = expandedRows.findIndex(\r\n      (item) => item.SeqNumber === data.SeqNumber\r\n    );\r\n    if (open) {\r\n      expandedRows.splice(expandedRowIndex, 1);\r\n    } else {\r\n      expandedRows.push(data);\r\n    }\r\n    this.setState({ expandedRows });\r\n  };\r\n  loadingToggleExpand = (data, open) => {\r\n    let loadingExpandedRows = this.state.loadingExpandedRows;\r\n    let expandedRowIndex = loadingExpandedRows.findIndex(\r\n      (item) => item.SeqNumber === data.SeqNumber\r\n    );\r\n    if (open) {\r\n      loadingExpandedRows.splice(expandedRowIndex, 1);\r\n    } else {\r\n      loadingExpandedRows.push(data);\r\n    }\r\n    this.setState({ loadingExpandedRows });\r\n  };\r\n  attributeToggleExpand = (data, open, isTerminalAdded = false) => {\r\n    let expandedRows = this.state.expandedRows;\r\n    let expandedRowIndex = expandedRows.findIndex(\r\n      (item) => item.SeqNumber === data.SeqNumber\r\n    );\r\n    if (open) {\r\n      if (isTerminalAdded && expandedRowIndex >= 0) {\r\n        expandedRows.splice(expandedRowIndex, 1);\r\n        expandedRows.push(data);\r\n      } else if (expandedRowIndex >= 0) {\r\n        expandedRows.splice(expandedRowIndex, 1);\r\n      }\r\n    } else {\r\n      if (expandedRowIndex >= 0) {\r\n        expandedRows = expandedRows.filter(\r\n          (x) => x.Code !== data.Code && x.SeqNumber !== data.SeqNumber\r\n        );\r\n      } else expandedRows.push(data);\r\n    }\r\n    this.setState({ expandedRows });\r\n  };\r\n  getBaseProducts(terminalcode) {\r\n    axios(\r\n      RestAPIs.GetAllBaseProduct + \"?TerminalCode=\" + terminalcode,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let baseProductOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ baseProductOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getBaseProducts:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting BaseProducts:\", error);\r\n      });\r\n  }\r\n  getCustomerInventory(receiptRow) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.receiptCode,\r\n        value: receiptRow.ReceiptCode,\r\n      },\r\n      {\r\n        key: KeyCodes.transportaionType,\r\n        value: Constants.TransportationType.ROAD,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.receiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetReceiptCustomerInventoryDetails,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        if (response.data.IsSuccess) {\r\n          let customerInventory = response.data.EntityResult;\r\n          console.log(\"customerr\", customerInventory);\r\n          this.setState({ modCustomerInventory: customerInventory });\r\n        } else this.setState({ modCustomerInventory: [] });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting shipment custom details:\", error);\r\n      });\r\n  }\r\n  handleDrawer = () => {\r\n    var drawerStatus = lodash.cloneDeep(this.state.drawerStatus);\r\n    this.setState({\r\n      drawerStatus: !drawerStatus,\r\n    });\r\n  };\r\n\r\n  closeReceipt = () => {\r\n    let showCloseReceiptAuthenticationLayout =\r\n      this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n        ? true\r\n        : false;\r\n\r\n    this.setState({ showCloseReceiptAuthenticationLayout }, () => {\r\n      if (showCloseReceiptAuthenticationLayout === false) {\r\n        this.handleReceiptClose();\r\n      }\r\n    });\r\n  };\r\n\r\n  handleReceiptClose = () => {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"ViewReceipt_CloseSuccess\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"ReceiptCode\"],\r\n            keyValues: [this.state.receipt.ReceiptCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.shareholderCode,\r\n          value: this.props.selectedShareholder,\r\n        },\r\n        {\r\n          key: KeyCodes.receiptStatus,\r\n          value: this.state.modReceipt.ReceiptStatus,\r\n        },\r\n        {\r\n          key: KeyCodes.receiptCode,\r\n          value: this.state.modReceipt.ReceiptCode,\r\n        },\r\n        {\r\n          key: KeyCodes.driverCode,\r\n          value: this.state.modReceipt.DriverCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.receiptCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.ReceiptClose,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.getReceipt(\r\n              { Common_Code: this.state.receipt.ReceiptCode },\r\n              0,\r\n              notification\r\n            );\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            this.props.onSaved(this.state.modReceipt, \"update\", notification);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while ReceiptClose:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while closing the shipment:\", error);\r\n    }\r\n  };\r\n\r\n  handleCloseReceipttModal = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isCloseReceipt} size=\"mini\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h3>\r\n                  {t(\"Receipt_ForceCloseHeader\") +\r\n                    \" : \" +\r\n                    this.state.receipt.ReceiptCode}\r\n                </h3>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                <div className=\"col col-lg-12\">\r\n                  <Input\r\n                    fluid\r\n                    value={this.state.reasonForClosure}\r\n                    label={t(\"ViewReceipt_Reason\")}\r\n                    reserveSpace={false}\r\n                    onChange={(value) => {\r\n                      this.setState({ reasonForClosure: value });\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  if (this.state.reasonForClosure === \"\") {\r\n                    let notification = {\r\n                      messageType: \"critical\",\r\n                      message: \"ViewReceipt_CloseSuccess\",\r\n                      messageResultDetails: [\r\n                        {\r\n                          keyFields: [\"ReceiptCode\"],\r\n                          keyValues: [this.state.receipt.ReceiptCode],\r\n                          isSuccess: false,\r\n                          errorMessage: \"Enter_Receipt_ReasonForCloseure\",\r\n                        },\r\n                      ],\r\n                    };\r\n\r\n                    toast(\r\n                      <ErrorBoundary>\r\n                        <NotifyEvent\r\n                          notificationMessage={notification}\r\n                        ></NotifyEvent>\r\n                      </ErrorBoundary>,\r\n                      {\r\n                        autoClose:\r\n                          notification.messageType === \"success\"\r\n                            ? 10000\r\n                            : false,\r\n                      }\r\n                    );\r\n                  } else\r\n                    this.setState({ isCloseReceipt: false }, () => {\r\n                      this.closeReceipt();\r\n                    });\r\n                }}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => {\r\n                  this.setState({\r\n                    isCloseReceipt: false,\r\n                    reasonForClosure: \"\",\r\n                  });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  confirmAllocateBay = () => {\r\n    let bayData = lodash.cloneDeep(this.state.bayData);\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isAllocateBay} size=\"small\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h3>\r\n                  {t(\"ViewAllocateBay_AllocateBay\")} -{\" \"}\r\n                  {this.state.receipt.ReceiptCode}\r\n                </h3>\r\n              </div>\r\n              <div className=\"col-12 detailsTable\">\r\n                <DataTable\r\n                  className=\"iconblock\"\r\n                  data={bayData}\r\n                  selection={this.state.selectBay}\r\n                  selectionMode=\"single\"\r\n                  showHeader={true}\r\n                  onSelectionChange={(e) => this.setState({ selectBay: e })}\r\n                  rows={\r\n                    this.props.userDetails.EntityResult.PageAttibutes\r\n                      .WebPortalListPageSize\r\n                  }\r\n                  resizableColumns={true}\r\n                >\r\n                  {/* <DataTable.ActionBar /> */}\r\n                  <DataTable.Column\r\n                    className=\"compColHeight compColmiddle\"\r\n                    field={\"BayCode\"}\r\n                    header={t(\"ViewAllocateBay_BayCode\")}\r\n                    editable={false}\r\n                  />\r\n                  <DataTable.Column\r\n                    className=\"compColHeight compColmiddle\"\r\n                    field={\"AssociatedProduct\"}\r\n                    header={t(\"ViewAllocateBay_FinishProduct\")}\r\n                    editable={false}\r\n                  />\r\n                  <DataTable.Column\r\n                    className=\"compColHeight compColmiddle\"\r\n                    field=\"CurrentQueue\"\r\n                    header={t(\"ViewAllocateBay_CurrentQueue\")}\r\n                    editable={false}\r\n                  />\r\n                  <DataTable.Column\r\n                    className=\"compColHeight compColmiddle\"\r\n                    field=\"MaximumQueue\"\r\n                    header={t(\"ViewAllocateBay_MaximumQueue\")}\r\n                    editable={false}\r\n                  />\r\n                  {Array.isArray(bayData) &&\r\n                  bayData.length >\r\n                    this.props.userDetails.EntityResult.PageAttibutes\r\n                      .WebPortalListPageSize ? (\r\n                    <DataTable.Pagination />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </DataTable>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"MarineEOD_Close\")}\r\n                className=\"cancelButton\"\r\n                onClick={() => this.setState({ isAllocateBay: false })}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"ViewAllocateBay_Allocate\")}\r\n                onClick={() => {\r\n                  if (\r\n                    this.state.selectBay === null ||\r\n                    this.state.selectBay === undefined ||\r\n                    this.state.selectBay.length === 0\r\n                  ) {\r\n                    let notification = {\r\n                      messageType: \"critical\",\r\n                      message: \"ViewAllocateBay_Allocate\",\r\n                      messageResultDetails: [\r\n                        {\r\n                          keyFields: [\"BayCode\"],\r\n                          keyValues: [],\r\n                          isSuccess: false,\r\n                          errorMessage: \"ViewAllocateBay_bayrequired\",\r\n                        },\r\n                      ],\r\n                    };\r\n\r\n                    toast(\r\n                      <ErrorBoundary>\r\n                        <NotifyEvent\r\n                          notificationMessage={notification}\r\n                        ></NotifyEvent>\r\n                      </ErrorBoundary>,\r\n                      {\r\n                        autoClose:\r\n                          notification.messageType === \"success\"\r\n                            ? 10000\r\n                            : false,\r\n                      }\r\n                    );\r\n                  } else {\r\n                    this.AllocateBay(\r\n                      this.state.receipt.ReceiptCode,\r\n                      this.state.selectBay[0].BayCode,\r\n                      \"RECEIPT\"\r\n                    );\r\n                  }\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  confirmDeAllocateBay = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isDeAllocateBay} size=\"small\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h5>\r\n                  {t(\"ViewAllocateBay_ConfirmDeallocateBay\", [\r\n                    this.state.ReceiptBay,\r\n                    \"Receipt\",\r\n                  ])}\r\n                </h5>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                className=\"cancelButton\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => {\r\n                  this.setState({ isDeAllocateBay: false });\r\n                }}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"ViewAllocateBay_Deallocate\")}\r\n                onClick={() => {\r\n                  this.setState({ isDeAllocateBay: false }, () => {\r\n                    this.DeAllocateBay(\r\n                      this.state.receipt.ReceiptCode,\r\n                      \"RECEIPT\",\r\n                      this.state.ReceiptBay\r\n                    );\r\n                  });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  GetBayByTrnsaction(TrnsactionCode, TrnsactionType, shareholder, CallBack) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shipmentCode,\r\n        value: TrnsactionCode,\r\n      },\r\n      {\r\n        key: KeyCodes.TransactionType,\r\n        value: TrnsactionType,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: shareholder,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetBayAllocatedInfoByTransaction,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      ),\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess) {\r\n          this.setState(\r\n            {\r\n              ReceiptBay: result.EntityResult.BayCode,\r\n            },\r\n            CallBack\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while GetBayByTrnsaction:\", error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {*} shipmentCode\r\n   * @param {*} bayCode\r\n   * @param {*} entityType ：shipment or receipt\r\n   */\r\n  AllocateBay(shipmentCode, bayCode, entityType) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shipmentCode,\r\n        value: shipmentCode,\r\n      },\r\n      {\r\n        key: KeyCodes.bayCode,\r\n        value: bayCode,\r\n      },\r\n      {\r\n        key: KeyCodes.entityType,\r\n        value: entityType,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.receiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"BayAllocation_SaveStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"BayCode\"],\r\n          keyValues: [bayCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.AllocateBay,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getReceipt(\r\n            {\r\n              Common_Code: this.state.modReceipt.ReceiptCode,\r\n            },\r\n            0,\r\n            notification\r\n          );\r\n          this.setState({ isAllocateBay: false });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ResultDataList[0].ErrorList[0];\r\n          this.props.onSaved(this.state.modReceipt, \"update\", notification);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while AllocateBay:\", error);\r\n      });\r\n  }\r\n\r\n  DeAllocateBay(shipmentCode, entityType, bayCode) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shipmentCode,\r\n        value: shipmentCode,\r\n      },\r\n      {\r\n        key: KeyCodes.entityType,\r\n        value: entityType,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      KeyCodes: keyCode,\r\n    };\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"BayDeAllocation_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"BayCode\"],\r\n          keyValues: [bayCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.DeallocateShipment,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getReceipt(\r\n            {\r\n              Common_Code: this.state.modReceipt.ReceiptCode,\r\n            },\r\n            0,\r\n            notification\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.props.onSaved(this.state.modReceipt, \"update\", notification);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while DeAllocateBay:\", error);\r\n      });\r\n  }\r\n\r\n  //Get KPI for Truck Receipt\r\n  getKPIList(shareholder, receiptCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      let objKPIRequestData = {\r\n        PageName: kpiTruckReceiptDetail,\r\n        TransportationType: Constants.TransportationType.ROAD,\r\n        InputParameters: [\r\n          { key: \"ShareholderCode\", value: shareholder },\r\n          { key: \"ReceiptCode\", value: receiptCode },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              truckReceiptKPIList: result.EntityResult.ListKPIDetails,\r\n            });\r\n          } else {\r\n            this.setState({ truckReceiptKPIList: [] });\r\n            console.log(\"Error in truck Receipt KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting truck Receipt KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showReceiptAuthenticationLayout: false,\r\n      showAuthorizeToUnLoadAuthenticationLayout: false,\r\n      showAllowToUnLoadAuthenticationLayout: false,\r\n      showCloseReceiptAuthenticationLayout: false,\r\n      showViewBODAuthenticationLayout: false,\r\n      showPrintBODAuthenticationLayout: false,\r\n      showRANAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  getFunctionGroupName() {\r\n    if (this.state.showReceiptAuthenticationLayout) return fnTruckReceipt;\r\n    else if (this.state.showCloseReceiptAuthenticationLayout)\r\n      return fnCloseReceipt;\r\n    else if (\r\n      this.state.showAllowToUnLoadAuthenticationLayout ||\r\n      this.state.showAuthorizeToUnLoadAuthenticationLayout\r\n    )\r\n      return fnViewReceiptStatus;\r\n    else if (\r\n      this.state.showViewBODAuthenticationLayout ||\r\n      this.state.showPrintBODAuthenticationLayout\r\n    )\r\n      return fnPrintBOD;\r\n    else if (this.state.showRANAuthenticationLayout) return fnPrintRAN;\r\n  }\r\n\r\n\r\n  getDeleteorEditMode() {\r\n    if (this.state.showReceiptAuthenticationLayout)\r\n      return this.state.receipt.ReceiptCode  === \"\"? functionGroups.add: functionGroups.modify;\r\n    else \r\n      return functionGroups.modify; \r\n   };\r\n\r\n  handleOperation() {\r\n    if (this.state.showReceiptAuthenticationLayout)\r\n      return this.handleSaveReceipt;\r\n    else if (this.state.showAuthorizeToUnLoadAuthenticationLayout)\r\n      return this.authorizeToUnLoad;\r\n    else if (this.state.showAllowToUnLoadAuthenticationLayout)\r\n      return this.allowToUnLoad;\r\n    else if (this.state.showCloseReceiptAuthenticationLayout)\r\n      return this.handleReceiptClose;\r\n    else if (this.state.showRANAuthenticationLayout) return this.printRAN;\r\n    else if (this.state.showViewBODAuthenticationLayout) return this.viewBOD;\r\n    else if (this.state.showPrintBODAuthenticationLayout) return this.printBOD;\r\n  }\r\n\r\n  render() {\r\n    // const saveEnabled = this.getSaveEnabled();\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"Receipt_LastUpdated\",\r\n        fieldValue:\r\n          new Date(this.state.modReceipt.LastUpdatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modReceipt.LastUpdatedTime).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"Receipt_LastActiveTime\",\r\n        fieldValue:\r\n          this.state.modReceipt.LastActiveTime !== undefined &&\r\n          this.state.modReceipt.LastActiveTime !== null\r\n            ? new Date(\r\n                this.state.modReceipt.LastActiveTime\r\n              ).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(\r\n                this.state.modReceipt.LastActiveTime\r\n              ).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"Receipt_CreatedTime\",\r\n        fieldValue:\r\n          new Date(this.state.modReceipt.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modReceipt.CreatedTime).toLocaleTimeString(),\r\n      },\r\n    ];\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <ErrorBoundary>\r\n              <TMDetailsHeader\r\n                entityCode={\r\n                  this.state.isManualEntry\r\n                    ? this.state.receipt.ReceiptCode +\r\n                      \" - \" +\r\n                      t(\"LoadingDetailsEntry_Title\")\r\n                    : this.state.receipt.ReceiptCode\r\n                }\r\n                newEntityName=\"Receipt_NewReceiptByCompartment\"\r\n                popUpContents={popUpContents}\r\n              ></TMDetailsHeader>\r\n            </ErrorBoundary>\r\n          )}\r\n        </TranslationConsumer>\r\n        {this.state.isViewUnloading ? (\r\n          <ErrorBoundary>\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <TMDetailsHeader\r\n                  newEntityName=\"ViewReceiptList_ViewTransactions\"\r\n                  popUpContents={popUpContents}\r\n                ></TMDetailsHeader>\r\n              )}\r\n            </TranslationConsumer>\r\n            <TruckReceiptViewUnLoadingDetails\r\n              ModViewUnloadDetails={this.state.ModViewUnloadDetails}\r\n              handleBack={this.onBack}\r\n              expandedRows={this.state.loadingExpandedRows}\r\n              toggleExpand={this.loadingToggleExpand}\r\n            ></TruckReceiptViewUnLoadingDetails>\r\n          </ErrorBoundary>\r\n        ) : this.state.isViewAuditTrail ? (\r\n          <ErrorBoundary>\r\n            <TruckReceiptViewAuditTrailDetails\r\n              ReceiptCode={this.state.modReceipt.ReceiptCode}\r\n              selectedRow={this.state.selectedRow}\r\n              auditTrailList={this.state.auditTrailList}\r\n              modAuditTrailList={this.state.modAuditTrailList}\r\n              handleBack={this.onBack}\r\n            ></TruckReceiptViewAuditTrailDetails>\r\n          </ErrorBoundary>\r\n        ) : this.state.isManualEntry ? (\r\n          <div>\r\n            <ErrorBoundary>\r\n              <TruckReceiptManualEntryDetailsComposite\r\n                receipt={this.state.modReceipt}\r\n                handleBack={this.onBack}\r\n                selectedShareholder={this.props.selectedShareholder}\r\n              ></TruckReceiptManualEntryDetailsComposite>\r\n            </ErrorBoundary>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <TMDetailsKPILayout KPIList={this.state.truckReceiptKPIList}>\r\n              {\" \"}\r\n            </TMDetailsKPILayout>\r\n            <div\r\n              className={\r\n                this.state.isPlanned\r\n                  ? !this.state.drawerStatus\r\n                    ? \"showShipmentStatusRightPane\"\r\n                    : \"drawerClose\"\r\n                  : \"\"\r\n              }\r\n            >\r\n              <ErrorBoundary>\r\n                <TruckReceiptDetails\r\n                  receipt={this.state.receipt}\r\n                  modReceipt={this.state.modReceipt}\r\n                  modAssociations={this.state.modAssociations}\r\n                  validationErrors={this.state.validationErrors}\r\n                  modCompartments={this.state.modCompartments}\r\n                  modCustomerInventory={this.state.modCustomerInventory}\r\n                  IsPastDisable={this.state.IsPastDisable}\r\n                  SupplierEnable={this.state.SupplierEnable}\r\n                  isBonded={this.state.isBonded}\r\n                  listOptions={{\r\n                    terminalCodes: this.props.terminalCodes,\r\n                    quantityUOMOptions: this.state.quantityUOMOptions,\r\n                    vehicleOptions: this.getVehicleSearchOptions(),\r\n                    driverOptions: this.getDriverSearchOptions(),\r\n                    // driverOptions: this.state.driverOptions,\r\n                    supplierOriginOptions:\r\n                      this.state.supplierOriginTerminalsList,\r\n                    compSeqOptions: this.state.compSeqOptions,\r\n                    finishedProductOptions: this.state.finishedProductOptions,\r\n                    baseProductOptions: this.state.baseProductOptions,\r\n                    customerCode: this.state.customerCode,\r\n                    customerptions: this.state.customerptions,\r\n                    customerOptions: this.state.customerOptions,\r\n                    supplierOptions: this.state.supplierOptions,\r\n                  }}\r\n                  selectedAssociations={this.state.selectedAssociations}\r\n                  searchResults={{\r\n                    vehicleOptions: this.state.vehicleSearchOptions,\r\n                    driverOptions: this.state.driverSearchOptions,\r\n                  }}\r\n                  handleRowSelectionChange={\r\n                    this.handleAssociationSelectionChange\r\n                  }\r\n                  onFieldChange={this.handleChange}\r\n                  onAllTerminalsChange={this.handleAllTerminalsChange}\r\n                  handleAddAssociation={this.handleAddAssociation}\r\n                  handleDeleteAssociation={this.handleDeleteAssociation}\r\n                  handleCellDataEdit={this.handleCellDataEdit}\r\n                  handleCellCompartmentDataEdit={\r\n                    this.handleCellCompartmentDataEdit\r\n                  }\r\n                  isHSEInspectionEnable={this.state.isHSEInspectionEnable}\r\n                  handleCustomerInventory={this.handleCustomerInventory}\r\n                  selectedCustomerInventory={\r\n                    this.state.selectedCustomerInventory\r\n                  }\r\n                  selectedAttributeList={this.state.selectedAttributeList}\r\n                  attributeValidationErrors={\r\n                    this.state.attributeValidationErrors\r\n                  }\r\n                  handleAttributeCellDataEdit={this.handleAttributeCellDataEdit}\r\n                  handleCompAttributeCellDataEdit={\r\n                    this.handleCompAttributeCellDataEdit\r\n                  }\r\n                  handleAddCustomerInventory={this.handleAddCustomerInventory}\r\n                  handleDeleteCustomerInventory={\r\n                    this.handleDeleteCustomerInventory\r\n                  }\r\n                  handleCustomerSelectionChange={\r\n                    this.handleCustomerSelectionChange\r\n                  }\r\n                  onDateTextChange={this.handleDateTextChange}\r\n                  onActiveStatusChange={this.handleActiveStatusChange}\r\n                  onVehicleChange={this.handleVehicleChange}\r\n                  onSupplierChange={this.handleSupplierChange}\r\n                  onVehicleSearchChange={this.handleVehicleSearchChange}\r\n                  onDriverChange={this.handleDriverChange}\r\n                  onDriverSearchChange={this.handleDriverSearchChange}\r\n                  onDriverResultsClear={this.handleDriverResultsClear}\r\n                  onVehicleResultsClear={this.handleVehicleResultsClear}\r\n                  isEnterpriseNode={\r\n                    this.props.userDetails.EntityResult.IsEnterpriseNode\r\n                  }\r\n                  IsWebPortalUser={\r\n                    this.props.userDetails.EntityResult.IsWebPortalUser\r\n                  }\r\n                  isSlotbookinginUI={\r\n                    this.props.userDetails.EntityResult.ShowSlotBookedInUI\r\n                  }\r\n                  compartmentDetailsPageSize={\r\n                    this.props.userDetails.EntityResult.PageAttibutes\r\n                      .WebPortalListPageSize\r\n                  }\r\n                  customerInventoryTab={this.state.customerInventoryTab}\r\n                  compartmentTab={this.state.isPlanned === false ? false : true}\r\n                  recordweightTab={this.state.recordweightTab}\r\n                  expandedRows={this.state.expandedRows}\r\n                  toggleExpand={this.toggleExpand}\r\n                  attributeToggleExpand={this.attributeToggleExpand}\r\n                  compartmentDetailsSave={this.compartmentDetailsSave}\r\n                  handleCellCheck={this.handleCellCheck}\r\n                  activeTab={this.state.activeTab}\r\n                  onTabChange={this.handleTabChange}\r\n                  UpdateReceiptBondNo={this.UpdateReceiptBondNo}\r\n                  modRecordWeight={this.state.modRecordWeight}\r\n                  modCustomValues={this.state.modCustomValues}\r\n                  ReceiptBay={this.state.ReceiptBay}\r\n                  UpdateReceiptDriver={this.UpdateReceiptDriver}\r\n                  isWebportalCarrierRoleUser={this.props.userDetails.EntityResult.RoleName.toLowerCase() === \"carriercompany\" && this.props.userDetails.EntityResult.IsWebPortalUser}\r\n                ></TruckReceiptDetails>\r\n              </ErrorBoundary>\r\n              <ErrorBoundary>\r\n                <TMDetailsUserActions\r\n                  handleBack={this.props.onBack}\r\n                  handleSave={this.handleSave}\r\n                  handleReset={this.handleReset}\r\n                  saveEnabled={this.state.saveEnabled}\r\n                ></TMDetailsUserActions>\r\n              </ErrorBoundary>\r\n            </div>\r\n\r\n            <div>\r\n              {this.state.isPlanned ? (\r\n                <div\r\n                  className={\r\n                    this.state.drawerStatus ? \"marineStatusLeftPane\" : \"\"\r\n                  }\r\n                >\r\n                  <TranslationConsumer>\r\n                    {(t) => (\r\n                      <TransactionSummaryOperations\r\n                        selectedItem={[\r\n                          { Common_Code: this.state.modReceipt.ReceiptCode },\r\n                        ]}\r\n                        shipmentNextOperations={\r\n                          this.state.shipmentNextOperations\r\n                        }\r\n                        handleDetailsPageClick={this.handleRowClick}\r\n                        handleOperationButtonClick={this.handleOperationClick}\r\n                        currentStatuses={this.state.currentReceiptStatus}\r\n                        isDetails={true}\r\n                        isWebPortalUser={\r\n                          this.props.userDetails.EntityResult.IsWebPortalUser\r\n                        }\r\n                        webPortalAllowedOperations={[\r\n                          \"ViewReceipt_ViewUnloading\",\r\n                          \"ViewReceipt_ViewBOD\",\r\n                          \"ViewReceipt_ViewAuditTrail\",\r\n                        ]}\r\n                        handleDrawer={this.handleDrawer}\r\n                        isEnterpriseNode={\r\n                          this.props.userDetails.EntityResult.IsEnterpriseNode\r\n                        }\r\n                        unAllowedOperations={[\r\n                          \"ViewReceipt_ManualEntry\",\r\n                          \"ViewReceipt_AuthorizeUnLoad\",\r\n                          \"ViewReceipt_AllowUnLoad\",\r\n                          \"ViewAllocateBay_AllocateBay\",\r\n                          \"ViewAllocateBay_DeallocateBay\",\r\n                          \"ViewReceipt_PrintRAN\",\r\n                          \"ViewReceipt_RecordWeight\",\r\n                          \"ViewReceipt_PrintBOD\",\r\n                          \"ViewReceipt_SendBOD\",\r\n                        ]}\r\n                      />\r\n                    )}\r\n                  </TranslationConsumer>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              {this.state.showReceiptAuthenticationLayout ||\r\n              this.state.showAllowToUnLoadAuthenticationLayout ||\r\n              this.state.showAuthorizeToUnLoadAuthenticationLayout ||\r\n              this.state.showCloseReceiptAuthenticationLayout ||\r\n              this.state.showViewBODAuthenticationLayout ||\r\n              this.state.showPrintBODAuthenticationLayout ||\r\n              this.state.showRANAuthenticationLayout ? (\r\n                <UserAuthenticationLayout\r\n                  Username={this.props.userDetails.EntityResult.UserName}\r\n                  functionName={this.getDeleteorEditMode()}\r\n                  functionGroup={this.getFunctionGroupName()}\r\n                  handleClose={this.handleAuthenticationClose}\r\n                  handleOperation={this.handleOperation()}\r\n                ></UserAuthenticationLayout>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        )}\r\n        {this.state.isRecordWeight ? this.handleRecordWeight() : null}\r\n        {this.state.vehicleBondPopUp ? this.confirmVehicleBond() : null}\r\n        {this.state.vehicleBondExpiryPopUp\r\n          ? this.confirmVehicleBondExpiryDate()\r\n          : null}\r\n        {this.state.isSealCompartments ? (\r\n          <ErrorBoundary>\r\n            <TruckReceiptSealDetailsComposite\r\n              transactionCode={this.state.receipt.ReceiptCode}\r\n              selectedShareholder={this.props.selectedShareholder}\r\n              sealCompartments={this.state.sealCompartments}\r\n              handleSealClose={this.handleSealClose}\r\n            ></TruckReceiptSealDetailsComposite>\r\n          </ErrorBoundary>\r\n        ) : null}\r\n        {this.state.stockProducts ? this.confirmBondedStockProducts() : null}\r\n        {this.state.isCloseReceipt ? this.handleCloseReceipttModal() : null}\r\n        {this.state.isAllocateBay ? this.confirmAllocateBay() : null}\r\n        {this.state.isDeAllocateBay ? this.confirmDeAllocateBay() : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TruckReceiptDetailsComposite);\r\n\r\nTruckReceiptDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { sealCompValidationDef } from \"../../../JS/DetailsTableValidationDef\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport lodash from \"lodash\";\r\nimport axios from \"axios\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { toast } from \"react-toastify\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Modal, Button,  Input,  } from \"@scuf/common\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\n\r\nclass TruckReceiptSealDetailsComposite extends Component {\r\n  state = {\r\n    sealCompartments: this.props.sealCompartments,\r\n  };\r\n   \r\n\r\n  getCustomtableData(sealCompartments)\r\n  {\r\n    const   custSealInfo=[];\r\n    sealCompartments.forEach((item) => {\r\n      custSealInfo.push({\r\n        SealNo: item.SealNo===null?\"\":item.SealNo,\r\n        CompartmentSeqNoInVehicle: item.CompartmentSeqNoInVehicle,\r\n        FinishedProductCode:item.FinishedProductCode===null?\"\":item.FinishedProductCode,\r\n        ReceiptCompartmentStatus:item.ReceiptCompartmentStatus===null?\"\":item.ReceiptCompartmentStatus,\r\n        UnLoadedQty:item.UnLoadedQuantity===null?\"\":item.UnLoadedQuantity + \" \" + item.UnLoadedQuantityUOM ,\r\n      });\r\n    });\r\n    return custSealInfo;\r\n  };\r\n\r\n  updateSealCompartments=()=>{\r\n  \r\n    let sealCompartments = lodash.cloneDeep(this.state.sealCompartments);\r\n  \r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ViewAllReceipt_SealCompUpdate\",\r\n      messageResultDetails: [],\r\n    };\r\n  \r\n    sealCompartments.forEach((item) => {\r\n  \r\n      sealCompValidationDef.forEach((col) => {\r\n        let err = \"\";\r\n  \r\n        if (col.validator !== undefined) {\r\n          err = Utilities.validateField(\r\n            col.validator,\r\n            item[col.field]\r\n          );\r\n        }\r\n  \r\n        if (err !== \"\") {\r\n          notification.messageResultDetails.push({\r\n            keyFields: [\r\n              \"ShipmentCompDetail_CompSeqInVehicle\",\r\n              col.displayName,\r\n            ],\r\n            keyValues: [\r\n              item.CompartmentSeqNoInVehicle,\r\n              item[col.field],\r\n            ],\r\n            isSuccess: false,\r\n            errorMessage: err,\r\n          });\r\n        }\r\n      });\r\n  \r\n    });\r\n  \r\n   \r\n  if (notification.messageResultDetails.length > 0 ) {\r\n    toast(\r\n      <ErrorBoundary>\r\n        <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n      </ErrorBoundary>,\r\n      {\r\n        autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n      }\r\n    );\r\n     return;\r\n  }\r\n  \r\n  \r\n     notification.messageResultDetails.push(\r\n        {\r\n          keyFields: [\"Receipt_Code\"],\r\n          keyValues: [this.props.transactionCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        });\r\n      \r\n  \r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shareholderCode,\r\n        value: this.props.selectedShareholder,\r\n      },\r\n      {\r\n        key: KeyCodes.receiptCode,\r\n        value: this.props.transactionCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.receiptCode,\r\n      KeyCodes: keyCode,\r\n      Entity: this.state.sealCompartments,\r\n    };\r\n    axios(\r\n      RestAPIs.UpdateReceiptSealCompartments,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        notification.messageResultDetails[0].errorMessage = result.ErrorList[0];\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while update Receipt Seal Info:\", error);\r\n      });\r\n  }\r\n  \r\n  isNodeEnterpriseOrWebortal()\r\n  {\r\n    if (this.props.userDetails.EntityResult.IsEnterpriseNode || this.props.userDetails.EntityResult.IsWebPortalUser) {\r\n     return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  handleSealNoInput=(data)=> {\r\n    let cellInfo = data.rowData;\r\n    return (\r\n      <Input\r\n        fluid\r\n        value={cellInfo.SealNo}\r\n        disabled={false}\r\n        onChange={(celldata) => {\r\n          let sealCompartments = lodash.cloneDeep(this.state.sealCompartments);\r\n        \r\n          let index = sealCompartments.findIndex((comp) => {\r\n            return comp.CompartmentSeqNoInVehicle === cellInfo.CompartmentSeqNoInVehicle;\r\n          });\r\n\r\n          if (index >= 0)\r\n          {\r\n            sealCompartments[index].SealNo = celldata;\r\n            \r\n          } \r\n\r\n          this.setState({ sealCompartments });\r\n        }}\r\n        reserveSpace={false}\r\n      />\r\n    );\r\n  };\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <TranslationConsumer>\r\n      {(t) => (\r\n          <Modal\r\n          open={true}\r\n          size=\"large\"\r\n          className=\"sealCompartmentsPopUp\"\r\n        >\r\n          <Modal.Content>\r\n            <div className=\"col col-lg-12\">\r\n              <h3>\r\n                {t(\"ViewAllReceipt_SealCompartment\") +\r\n                  \" : \" +\r\n                  this.props.transactionCode}\r\n              </h3>\r\n            </div>\r\n            <div className=\"col-12 detailsTable\">\r\n              <DataTable data={this.getCustomtableData(this.state.sealCompartments)}>\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  field={\"CompartmentSeqNoInVehicle\"}\r\n                  header={t(\"ViewShipment_CompartmentSeq\")}\r\n                  editable={false}\r\n                />\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  field=\"FinishedProductCode\"\r\n                  header={t(\"ViewShipment_FinishedProductCode\")}\r\n                  editable={false}\r\n                />\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  field=\"ReceiptCompartmentStatus\"\r\n                  header={t(\"ViewShipment_Status\")}\r\n                  editable={false}\r\n                  \r\n                />\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  field=\"UnLoadedQty\"\r\n                  header={t(\"ViewReceiptList_LoadedQuantity\")}\r\n                  editable={false}\r\n                />\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  field=\"SealNo\"\r\n                  header={t(\"SealMaster_SealNo\")}\r\n                  renderer={(cellData) => this.handleSealNoInput(cellData)}\r\n                />\r\n              </DataTable>\r\n            </div>\r\n          </Modal.Content>\r\n          <Modal.Footer>\r\n            <Button\r\n              content={t(\"MarineEOD_Close\")}\r\n              className=\"cancelButton\"\r\n              onClick={this.props.handleSealClose}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              content={t(\"SealMaster_Save\")}\r\n              disabled={this.isNodeEnterpriseOrWebortal()}\r\n              onClick={this.updateSealCompartments}\r\n            />\r\n          </Modal.Footer>\r\n        </Modal>\r\n      )}\r\n    </TranslationConsumer>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TruckReceiptSealDetailsComposite);\r\n\r\nTruckReceiptSealDetailsComposite.propTypes = {\r\n  transactionCode: PropTypes.string.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  sealCompartments: PropTypes.object.isRequired,\r\n  handleSealClose: PropTypes.func.isRequired,\r\n};\r\n \r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Select, Checkbox } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nAssociatedTerminals.propTypes = {\r\n  terminalList: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  selectedTerminal: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  validationError: PropTypes.string,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onCheckChange: PropTypes.func.isRequired,\r\n};\r\nAssociatedTerminals.defaultProps = {\r\n  terminalList: [],\r\n  selectedTerminal: [],\r\n  validationError: \"\",\r\n};\r\nexport function AssociatedTerminals({\r\n  terminalList,\r\n  selectedTerminal,\r\n  validationError,\r\n  onFieldChange,\r\n  onCheckChange,\r\n}) {\r\n  //console.log(\"component terminalList\", terminalList);\r\n  if (selectedTerminal === null) selectedTerminal = [];\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <div style={{ width: \"80%\" }}>\r\n            <Select\r\n              fluid\r\n              placeholder={t(\"Common_Select\")}\r\n              label={t(\"TerminalCodes\")}\r\n              value={selectedTerminal}\r\n              multiple={true}\r\n              options={Utilities.transferListtoOptions(terminalList)}\r\n              onChange={(data) => onFieldChange(\"TerminalCodes\", data)}\r\n              error={t(validationError)}\r\n              disabled={terminalList.length === 0}\r\n              reserveSpace={false}\r\n            />\r\n          </div>\r\n          <div className=\"ddlSelectAll\">\r\n            <Checkbox\r\n              label={t(\"Common_All\")}\r\n              checked={\r\n                Array.isArray(selectedTerminal) &&\r\n                selectedTerminal.length === terminalList.length\r\n              }\r\n              onChange={(checked) => onCheckChange(checked)}\r\n            ></Checkbox>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Button, Modal, Icon } from \"@scuf/common\";\r\nimport {\r\n    ReceiptCompartment_Status,\r\n    ReceiptStatus,\r\n    Receipt_Status,\r\n} from \"../../../JS/Constants\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport * as wjChart from \"@grapecity/wijmo.react.chart\";\r\nimport * as wjcCore from \"@grapecity/wijmo\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nwjcCore.setLicenseKey(Constants.wizmoKey);\r\n\r\nTruckReceiptViewAuditTrailDetails.propTypes = {\r\n    auditTrailList: PropTypes.array.isRequired,\r\n    handleBack: PropTypes.func.isRequired,\r\n    ReceiptCode: PropTypes.string,\r\n    modAuditTrailList: PropTypes.array.isRequired,\r\n};\r\n\r\nTruckReceiptViewAuditTrailDetails.defaultProps = {};\r\n\r\nexport function TruckReceiptViewAuditTrailDetails({\r\n    ReceiptCode,\r\n    auditTrailList,\r\n    handleBack,\r\n    modAuditTrailList,\r\n}) {\r\n    const driverName =\r\n        auditTrailList !== null &&\r\n            auditTrailList !== undefined &&\r\n            auditTrailList.length > 0 &&\r\n            auditTrailList[0].DRIVERNAME !== null &&\r\n            auditTrailList[0].DRIVERNAME !== undefined &&\r\n            auditTrailList[0].DRIVERNAME !== \"\"\r\n            ? auditTrailList[0].DRIVERNAME\r\n            : \"\";\r\n    const driverCode =\r\n        auditTrailList !== null &&\r\n            auditTrailList !== undefined &&\r\n            auditTrailList.length > 0 &&\r\n            auditTrailList[0].DRIVERCODE !== null &&\r\n            auditTrailList[0].DRIVERCODE !== undefined &&\r\n            auditTrailList[0].DRIVERCODE !== \"\"\r\n            ? auditTrailList[0].DRIVERCODE\r\n            : \"\";\r\n    const handleStatus = (e) => {\r\n        if (e === ReceiptCompartment_Status.EMPTY) {\r\n            return \"EMPTY\";\r\n        } else if (e === ReceiptCompartment_Status.UNLOADING) {\r\n            return \"UNLOADING\";\r\n        } else if (e === ReceiptCompartment_Status.PART_UNLOADED) {\r\n            return \"PART_UNLOADED\";\r\n        } else if (e === ReceiptCompartment_Status.OVER_UNLOADED) {\r\n            return \"OVER_UNLOADED\";\r\n        } else if (e === ReceiptCompartment_Status.FORCE_COMPLETED) {\r\n            return \"FORCE_COMPLETED\";\r\n        } else if (e === ReceiptCompartment_Status.COMPLETED) {\r\n            return \"COMPLETED\";\r\n        } else if (e === ReceiptCompartment_Status.INTERRUPTED) {\r\n            return \"INTERRUPTED\";\r\n        } else if (e === ReceiptCompartment_Status.UNLOAD_NOTSTARTED) {\r\n            return \"UNLOAD_NOTSTARTED\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    };\r\n    const [modelOpen, setModelOpen] = useState(false);\r\n    const formatter = (engine, label) => {\r\n        try {\r\n            label.cls = null;\r\n            engine.fontSize = \"7px\";\r\n            if (label.val === ReceiptStatus.AUTO_LOADED) {\r\n                label.text = Receipt_Status.AUTO_UNLOADED;\r\n            } else if (label.val === ReceiptStatus.CHECKED_IN) {\r\n                label.text = Receipt_Status.CHECKED_IN;\r\n            } else if (label.val === ReceiptStatus.CLOSED) {\r\n                label.text = Receipt_Status.CLOSED;\r\n            } else if (label.val === ReceiptStatus.INTERRUPTED) {\r\n                label.text = Receipt_Status.INTERRUPTED;\r\n            } else if (label.val === ReceiptStatus.UNLOADING) {\r\n                label.text = Receipt_Status.UNLOADING;\r\n            } else if (label.val === ReceiptStatus.MANUALLY_UNLOADED) {\r\n                label.text = Receipt_Status.MANUALLY_UNLOADED;\r\n            } else if (label.val === ReceiptStatus.PARTIALLY_UNLOADED) {\r\n                label.text = Receipt_Status.PARTIALLY_UNLOADED;\r\n            } else if (label.val === ReceiptStatus.QUEUED) {\r\n                label.text = Receipt_Status.QUEUED;\r\n            } else if (label.val === ReceiptStatus.READY) {\r\n                label.text = Receipt_Status.READY;\r\n            } else if (label.val === ReceiptStatus.DE_QUEUED) {\r\n                label.text = Receipt_Status.DE_QUEUED;\r\n            } else if (label.val === ReceiptStatus.WEIGHED_IN) {\r\n                label.text = Receipt_Status.WEIGHED_IN;\r\n            } else if (label.val === ReceiptStatus.WEIGHED_OUT) {\r\n                label.text = Receipt_Status.WEIGHED_OUT;\r\n            } else if (label.val === ReceiptStatus.USER_DEFINED) {\r\n                let x = modAuditTrailList.findIndex(\r\n                    (x) => x.Receipt_Status === label.val\r\n                );\r\n                label.text =\r\n                    x !== -1\r\n                        ? modAuditTrailList[x].ReceiptStatus\r\n                        : Receipt_Status.USER_DEFINED;\r\n            } else if (label.val === ReceiptStatus.ASSIGNED) {\r\n                label.text = Receipt_Status.ASSIGNED;\r\n            } else if (label.val === ReceiptStatus.CANCELLED) {\r\n                label.text = Receipt_Status.CANCELLED;\r\n            } else if (label.val === ReceiptStatus.EXPIRED) {\r\n                label.text = Receipt_Status.EXPIRED;\r\n            } else if (label.val === ReceiptStatus.REJECTED) {\r\n                label.text = Receipt_Status.REJECTED;\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in formatter\", error)\r\n        }\r\n        return label;\r\n    };\r\n\r\n\r\n    function displayTMModalforPrintConfirm() {\r\n        return (\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <Modal open={modelOpen} className=\"marineModalPrint\">\r\n                        <Modal.Content>\r\n                            {/* <div className=\"col col-md-8 col-lg-9 col col-xl-9\">\r\n                                <h3>\r\n                                    {t(\"ViewAuditTrail_ViewAuditTrailForReceipt\") +\r\n                                        \" : \" +\r\n                                        ReceiptCode}\r\n                                </h3>\r\n                            </div> */}\r\n                            <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                                <div className=\"col col-lg-8\">\r\n                                    <h3>\r\n                                        {t(\"Transaction_AuditTrail_Heading\") +\r\n                                            \" : \" +\r\n                                            ReceiptCode}\r\n                                    </h3>\r\n                                </div>\r\n                                <div className=\"col col-lg-4\" style={{ textAlign: \"right\" }}>\r\n                                    <div\r\n                                        onClick={() => {\r\n                                            setModelOpen(false);\r\n                                        }}\r\n                                    >\r\n                                        <Icon root=\"common\" name=\"close\" />\r\n                                    </div>\r\n                                    {/* <Button\r\n                                        type=\"primary\"\r\n                                        size=\"small\"\r\n                                        content={t(\"MarineEOD_Close\")}\r\n                                        onClick={() => {\r\n                                            setModelOpen(false);\r\n                                        }}\r\n                                    /> */}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-10 container-fluid\">\r\n                                <wjChart.FlexChart\r\n                                    itemsSource={modAuditTrailList}\r\n                                    chartType=\"Line\"\r\n                                    bindingX=\"UpdatedTime\"\r\n                                    palette={[\"red\"]}\r\n                                    style={{ width: \"100%\", height: \"450px\" }}\r\n                                >\r\n                                    <wjChart.FlexChartLegend position=\"Bottom\"></wjChart.FlexChartLegend>\r\n                                    <wjChart.FlexChartAxis\r\n                                        wjProperty=\"axisY\"\r\n                                        majorUnit={1}\r\n                                        max={16}\r\n                                        min={0}\r\n                                        itemFormatter={formatter}\r\n                                        axisLine={true}\r\n                                    ></wjChart.FlexChartAxis>\r\n                                    <wjChart.FlexChartSeries\r\n                                        binding=\"Receipt_Status\"\r\n                                        name=\"Receipt_Status\"\r\n                                    ></wjChart.FlexChartSeries>\r\n                                </wjChart.FlexChart>\r\n                            </div>\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <label>\r\n                                    {t(\"ViewAuditTrail_DriverCode\") + \" : \" + driverCode}\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <label>{t(\"DriverInfo_DriverName\") + \" : \" + driverName}</label>\r\n                            </div>\r\n                            <div className=\"col-12 detailsTable\">\r\n                                <DataTable data={auditTrailList}>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"ReceiptStatus\"\r\n                                        field=\"ReceiptStatus\"\r\n                                        header={t(\"ViewReceiptAuditTrail_ReceiptStatus\")}\r\n                                        editable={false}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"UpdatedTime\"\r\n                                        field=\"UpdatedTime\"\r\n                                        header={t(\"ViewAuditTrail_UpdatedTime\")}\r\n                                        editable={false}\r\n                                        editFieldType=\"text\"\r\n                                    // renderer={(cellData) => disPlayValue(cellData)}\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        header={t(\"ViewAuditTrail_ShipmentCompartmentSeq\")}\r\n                                        field={\"CompartmentSeqNoInVehicle\"}\r\n                                        editable={false}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"ReceiptCompartmentStatus\"\r\n                                        field=\"ReceiptCompartmentStatus\"\r\n                                        header={t(\"ViewAuditTrail_ShipmentCompartmentStatus\")}\r\n                                        editable={false}\r\n                                        renderer={(cellData) =>\r\n                                            handleStatus(cellData.rowData.ReceiptCompartmentStatus)\r\n                                        }\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    {/* <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        header={t(\"ViewAuditTrail_DriverCode\")}\r\n                                        editable={false}\r\n                                        field={\"DRIVERCODE\"}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        header={t(\"ViewAuditTrail_DriverName\")}\r\n                                        editable={false}\r\n                                        field={\"DRIVERNAME\"}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column> */}\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        header={t(\"ViewAuditTrail_DriverPIN\")}\r\n                                        editable={false}\r\n                                        field={\"DriverPin\"}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                </DataTable>\r\n                            </div>\r\n                            <Modal.Footer>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    size=\"small\"\r\n                                    content={t(\"ViewAuditTrail_Print\")}\r\n                                    onClick={() => {\r\n                                        let el =\r\n                                            window.document.getElementById(\"printTable\").innerHTML;\r\n                                        const iframe = window.document.createElement(\"IFRAME\");\r\n                                        let doc = null;\r\n                                        window.document.body.appendChild(iframe);\r\n                                        doc = iframe.contentWindow.document;\r\n                                        const str1 = el.substring(0, el.indexOf(\"<table\") + 6);\r\n                                        const str2 = el.substring(\r\n                                            el.indexOf(\"<table\") + 6,\r\n                                            el.length\r\n                                        );\r\n                                        // const str3 =\r\n                                        //     t(\"ViewAuditTrail_ViewAuditTrailForReceipt\") +\r\n                                        //     \" : \" +\r\n                                        //     ReceiptCode;\r\n                                        // el = str3 + str1 + ' border=\"1\" cellspacing=\"0\"' + str2;\r\n                                        el = str1 + ' border=\"1\" cellspacing=\"1\"' + str2;\r\n\r\n                                        // el = el.replace('<tfoot class=\"p-datatable-tfoot\">', \"\");\r\n                                        // el = el.replace(\r\n                                        //     '<tr><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td></tr>',\r\n                                        //     \"\"\r\n                                        // );\r\n                                        doc.write(el);\r\n                                        // console.info(el);\r\n                                        doc.close();\r\n                                        iframe.contentWindow.focus();\r\n                                        iframe.contentWindow.print();\r\n                                        setTimeout(() => {\r\n                                            window.document.body.removeChild(iframe);\r\n                                        }, 2000);\r\n                                    }}\r\n                                />\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    size=\"small\"\r\n                                    content={t(\"MarineEOD_Close\")}\r\n                                    onClick={() => {\r\n                                        setModelOpen(false);\r\n                                    }}\r\n                                />\r\n                            </Modal.Footer>\r\n                        </Modal.Content>\r\n                    </Modal>\r\n                )}\r\n            </TranslationConsumer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <div>\r\n                        <div className=\"detailsContainer\">\r\n                            <div id=\"printTable\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        <h3>\r\n                                            {t(\"ViewAuditTrail_ViewAuditTrailForReceipt\") +\r\n                                                \" : \" +\r\n                                                ReceiptCode}\r\n                                        </h3>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row marginRightZero tableScroll\">\r\n                                    <div className=\"col-12 container-fluid\">\r\n                                        <wjChart.FlexChart\r\n                                            itemsSource={modAuditTrailList}\r\n                                            chartType=\"Line\"\r\n                                            bindingX=\"UpdatedTime\"\r\n                                            palette={[\"red\"]}\r\n                                            style={{\r\n                                                width: \"100%\",\r\n                                                minWidth: \"800px\",\r\n                                                height: \"450px\",\r\n                                            }}\r\n                                        >\r\n                                            <wjChart.FlexChartLegend position=\"Bottom\"></wjChart.FlexChartLegend>\r\n                                            <wjChart.FlexChartAxis\r\n                                                wjProperty=\"axisY\"\r\n                                                majorUnit={1}\r\n                                                max={16}\r\n                                                min={0}\r\n                                                itemFormatter={formatter}\r\n                                                axisLine={true}\r\n                                            ></wjChart.FlexChartAxis>\r\n                                            <wjChart.FlexChartSeries\r\n                                                binding=\"Receipt_Status\"\r\n                                                name=\"Receipt_Status\"\r\n                                            ></wjChart.FlexChartSeries>\r\n                                        </wjChart.FlexChart>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row marginRightZero\">\r\n                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                        <label>\r\n                                            {t(\"ViewAuditTrail_DriverCode\") + \" : \" + driverCode}\r\n                                        </label>\r\n                                    </div>\r\n                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                        <label>\r\n                                            {t(\"DriverInfo_DriverName\") + \" : \" + driverName}\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row marginRightZero tableScroll\">\r\n                                    <div className=\"col-12 detailsTable\">\r\n                                        <DataTable data={auditTrailList} scrollable={true}>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                key=\"ReceiptStatus\"\r\n                                                field=\"ReceiptStatus\"\r\n                                                header={t(\"ViewReceiptAuditTrail_ReceiptStatus\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                key=\"UpdatedTime\"\r\n                                                field=\"UpdatedTime\"\r\n                                                header={t(\"ViewAuditTrail_UpdatedTime\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            // renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                header={t(\"ViewAuditTrail_ShipmentCompartmentSeq\")}\r\n                                                field={\"CompartmentSeqNoInVehicle\"}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                key=\"ReceiptCompartmentStatus\"\r\n                                                field=\"ReceiptCompartmentStatus\"\r\n                                                header={t(\"ViewAuditTrail_ShipmentCompartmentStatus\")}\r\n                                                editable={false}\r\n                                                renderer={(cellData) =>\r\n                                                    handleStatus(\r\n                                                        cellData.rowData.ReceiptCompartmentStatus\r\n                                                    )\r\n                                                }\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            {/* <DataTable.Column\r\n                                            className=\"compColHeight\"\r\n                                            header={t(\"ViewAuditTrail_DriverCode\")}\r\n                                            editable={false}\r\n                                            field={\"DRIVERCODE\"}\r\n                                            editFieldType=\"text\"\r\n                                        ></DataTable.Column>\r\n                                        <DataTable.Column\r\n                                            className=\"compColHeight\"\r\n                                            header={t(\"ViewAuditTrail_DriverName\")}\r\n                                            editable={false}\r\n                                            field={\"DRIVERNAME\"}\r\n                                            editFieldType=\"text\"\r\n                                        ></DataTable.Column> */}\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                header={t(\"ViewAuditTrail_DriverPIN\")}\r\n                                                editable={false}\r\n                                                field={\"DriverPin\"}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                        </DataTable>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 col-sm-6 col-lg-8\">\r\n                                    <Button\r\n                                        className=\"backButton\"\r\n                                        onClick={handleBack}\r\n                                        content={t(\"Back\")}\r\n                                    ></Button>\r\n                                </div>\r\n                                <div\r\n                                    className=\"col-12 col-sm-6 col-lg-4\"\r\n                                    style={{ textAlign: \"right\" }}\r\n                                >\r\n                                    <Button\r\n                                        className=\"printButton\"\r\n                                        onClick={() => {\r\n                                            setModelOpen(true);\r\n                                        }}\r\n                                        content={t(\"ViewAuditTrail_PrintAuditTrail\")}\r\n                                    ></Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </TranslationConsumer>\r\n            {displayTMModalforPrintConfirm()}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport { Button, Icon } from \"@scuf/common\";\r\n\r\nTruckReceiptViewUnLoadingDetails.propTypes = {\r\n  ModViewUnloadDetails: PropTypes.array.isRequired,\r\n  handleBack: PropTypes.func.isRequired,\r\n  toggleExpand: PropTypes.func.isRequired,\r\n  expandedRows: PropTypes.array.isRequired,\r\n};\r\n\r\nTruckReceiptViewUnLoadingDetails.defaultProps = {};\r\n\r\nexport function TruckReceiptViewUnLoadingDetails({\r\n  ModViewUnloadDetails,\r\n  handleBack,\r\n  toggleExpand,\r\n  expandedRows,\r\n}) {\r\n  const [t] = useTranslation();\r\n  const expanderTemplate = (data) => {\r\n    const open =\r\n      expandedRows.findIndex((x) => x.seqNo === data.rowData.seqNo) >= 0\r\n        ? true\r\n        : false;\r\n    return (\r\n      <div\r\n        onClick={() => toggleExpand(data.rowData, open)}\r\n        className=\"compartmentIcon gridButtonFontColor\"\r\n      >\r\n        <Icon\r\n          root=\"common\"\r\n          name={open ? \"slidercontrols-minus\" : \"ellipsis-horizontal\"}\r\n          className=\"margin_l10\"\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  function rowExpansionTemplate(data) {\r\n    let secondRow = [data];\r\n    let thirdRow = [data];\r\n    return Array.isArray(secondRow) && secondRow.length > 0 ? (\r\n      <div className=\"childTable ChildGridViewAllShipmentLoadingDetails\">\r\n        <DataTable data={secondRow}>\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"baycode\"\r\n            field=\"baycode\"\r\n            header={t(\"LoadingDetails_BayCode\")}\r\n            initialWidth=\"107px\"\r\n            editable={false}\r\n          ></DataTable.Column>\r\n\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"bcucode\"\r\n            field=\"bcucode\"\r\n            header={t(\"BCU_Code\")}\r\n            initialWidth=\"107px\"\r\n            editable={false}\r\n          />\r\n\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"grossquantity\"\r\n            field=\"grossquantity\"\r\n            header={t(\"LoadingDetails_GrossQuantity\")}\r\n            initialWidth=\"107px\"\r\n            editable={false}\r\n          />\r\n\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"netquantity\"\r\n            field=\"netquantity\"\r\n            header={t(\"LoadingDetails_NetQuantity\")}\r\n            initialWidth=\"107px\"\r\n            editable={false}\r\n          />\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"starttime\"\r\n            field=\"starttime\"\r\n            header={t(\"LoadingDetails_StartTime\")}\r\n            editable={false}\r\n            // initialWidth=\"72px\"\r\n          ></DataTable.Column>\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"endtime\"\r\n            field=\"endtime\"\r\n            header={t(\"LoadingDetails_EndTime\")}\r\n            editable={false}\r\n            // initialWidth=\"72px\"\r\n          />\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"productdensity\"\r\n            field=\"productdensity\"\r\n            header={t(\"LoadingDetails_ProductDensity\")}\r\n            editable={false}\r\n            initialWidth=\"95px\"\r\n          ></DataTable.Column>\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"metercode\"\r\n            field=\"metercode\"\r\n            header={t(\"LoadingDetails_MeterCode\")}\r\n            editable={false}\r\n            initialWidth=\"77px\"\r\n          />\r\n        </DataTable>\r\n        <DataTable data={thirdRow}>\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"starttotalizer\"\r\n            field=\"starttotalizer\"\r\n            header={t(\"StartTotalizer\")}\r\n            editable={false}\r\n            initialWidth=\"90px\"\r\n          ></DataTable.Column>\r\n\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"endtotalizer\"\r\n            field=\"endtotalizer\"\r\n            header={t(\"EndTotalizer\")}\r\n            editable={false}\r\n            initialWidth=\"90px\"\r\n          />\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"weightinvacuum\"\r\n            field=\"weightinvacuum\"\r\n            header={t(\"UnloadingDetails_WeightInVacuum\")}\r\n            editable={false}\r\n            initialWidth=\"98px\"\r\n          ></DataTable.Column>\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"weightinair\"\r\n            field=\"weightinair\"\r\n            header={t(\"UnloadingDetails_WeightInAir\")}\r\n            editable={false}\r\n            initialWidth=\"84px\"\r\n          />\r\n\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"temperature\"\r\n            field=\"temperature\"\r\n            header={t(\"LoadingDetails_Temperature\")}\r\n            editable={false}\r\n            initialWidth=\"116px\"\r\n          ></DataTable.Column>\r\n\r\n          <DataTable.Column\r\n            className=\"compColHeight\"\r\n            key=\"pressure\"\r\n            field=\"pressure\"\r\n            header={t(\"LoadingDetails_Pressure\")}\r\n            editable={false}\r\n            initialWidth=\"93px\"\r\n          />\r\n        </DataTable>\r\n      </div>\r\n    ) : (\r\n      <div className=\"compartmentIcon\">\r\n        <div className=\"gridButtonAlignLeft\">\r\n          {t(\"CustomerInventory_NoRecordsFound\")}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"detailsContainer\">\r\n      <div className=\"row marginRightZero tableScroll\">\r\n        <div className=\"detailsTable loadingTable\">\r\n          <DataTable\r\n            data={ModViewUnloadDetails}\r\n            scrollable={true}\r\n            bAutoWidth={true}\r\n            scrollHeight=\"450px\"\r\n            resizableColumns={true}\r\n            rowExpansionTemplate={rowExpansionTemplate}\r\n            expandedRows={expandedRows}\r\n          >\r\n            <DataTable.Column\r\n              className=\"compColHeight\"\r\n              key=\"trailercode \"\r\n              field=\"trailercode\"\r\n              initialWidth=\"125px\"\r\n              header={t(\"ViewReceipt_TrailerCode\")}\r\n            ></DataTable.Column>\r\n            <DataTable.Column\r\n              className=\"compColHeight\"\r\n              key=\"CompartmentSeqNoInVehicle\"\r\n              field=\"CompartmentSeqNoInVehicle\"\r\n              initialWidth=\"146px\"\r\n              header={t(\"Receipt_CompSeqInVehicle\")}\r\n            ></DataTable.Column>\r\n            <DataTable.Column\r\n              className=\"compColHeight\"\r\n              key=\"compartmentcode\"\r\n              field=\"compartmentcode\"\r\n              initialWidth=\"165px\"\r\n              header={t(\"Receipt_CompartmentCode\")}\r\n            ></DataTable.Column>\r\n            <DataTable.Column\r\n              className=\"compColHeight\"\r\n              key=\"FinishedProductcode\"\r\n              field=\"FinishedProductcode\"\r\n              initialWidth=\"130px\"\r\n              header={t(\"Report_ProductCode\")}\r\n            ></DataTable.Column>\r\n            <DataTable.Column\r\n              className=\"compColHeight\"\r\n              key=\"baseProductcode\"\r\n              field=\"baseProductcode\"\r\n              initialWidth=\"155px\"\r\n              header={t(\"BaseProductCode\")}\r\n            ></DataTable.Column>\r\n            <DataTable.Column\r\n              className=\"compColHeight\"\r\n              key=\"Unloadingdetailstype\"\r\n              field=\"Unloadingdetailstype\"\r\n              initialWidth=\"190px\"\r\n              header={t(\"UnloadingDetails_UnloadingDetailsType\")}\r\n            ></DataTable.Column>\r\n            <DataTable.Column\r\n              className=\"compColHeight\"\r\n              key=\"TankCode\"\r\n              field=\"TankCode\"\r\n              initialWidth=\"105px\"\r\n              header={t(\"TankList_Code\")}\r\n            ></DataTable.Column>\r\n            <DataTable.Column\r\n              className=\"expandedColumn\"\r\n              initialWidth=\"22px\"\r\n              renderer={expanderTemplate}\r\n            />\r\n          </DataTable>\r\n        </div>\r\n      </div>\r\n      <div className=\"col col-lg-8\">\r\n        <Button\r\n          className=\"backButton\"\r\n          onClick={handleBack}\r\n          content={t(\"Back\")}\r\n        ></Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["TruckReceiptDetails","_ref","receipt","modReceipt","modAssociations","validationErrors","listOptions","searchResults","onFieldChange","onDateTextChange","onAllTerminalsChange","selectedAssociations","handleRowSelectionChange","handleCustomerSelectionChange","selectedCustomerInventory","handleCellDataEdit","handleCellCompartmentDataEdit","handleCustomerInventory","handleAddCustomerInventory","handleAddAssociation","handleDeleteAssociation","handleDeleteCustomerInventory","onActiveStatusChange","onVehicleChange","onSupplierChange","onVehicleSearchChange","onDriverChange","onDriverSearchChange","onVehicleResultsClear","onDriverResultsClear","isEnterpriseNode","IsWebPortalUser","onTabChange","activeTab","expandedRows","toggleExpand","attributeToggleExpand","modCompartments","customerInventoryTab","modCustomerInventory","compartmentTab","recordweightTab","selectedAttributeList","attributeValidationErrors","handleAttributeCellDataEdit","handleCompAttributeCellDataEdit","handleCellCheck","compartmentDetailsSave","saveEnabled","IsPastDisable","SupplierEnable","isHSEInspectionEnable","isSlotbookinginUI","compartmentDetailsPageSize","isBonded","UpdateReceiptBondNo","modRecordWeight","modCustomValues","ReceiptBay","UpdateReceiptDriver","isWebportalCarrierRoleUser","t","useTranslation","modelOpen","setModelOpen","useState","modCellData","setModCellData","handleCustomEditDropDown","cellData","dropDownoptions","_jsx","Select","className","value","rowIndex","field","fluid","options","onChange","indicator","reserveSpace","search","noResultsMessage","handleCustomEditTextBox","Input","handleCustomerInvetoryEditDropDown","decimalDisplayValues","toLocaleString","handleInputTextBox","data","disabled","ReceiptStatus","Constants","CLOSED","READY","MANUALLY_UNLOADED","rowData","handleAttributeType","attribute","handleAttributeDateValue","dateval","chars","split","Date","convertAttributeDatetoString","Dateval","getFullYear","getMonth","slice","getDate","DataType","toLowerCase","STRING","INT","AttributeValue","IsReadonly","FLOAT","LONG","DOUBLE","undefined","BOOL","Checkbox","checked","toString","DATETIME","DatePicker","showYearSelector","onTextChange","minuteStep","error","console","log","handleIsRequiredCompAttributes","IsMandatory","_jsxs","children","AttributeName","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","ReceiptCode","label","ScheduledDate","initialWidth","displayFormat","getCurrentDateFormat","type","disablePast","HSEInspectionStatus","placeholder","VehicleCode","vehicleOptions","onSearch","CarrierCode","style","display","justifyContent","DriverCode","getOptionsWithSelect","driverOptions","Tooltip","content","element","Button","onClick","Icon","root","name","size","position","event","hoverable","SupplierCode","supplierOptions","ReceiptQuantityUOM","quantityUOMOptions","ActualTerminalCode","Utilities","multiple","Description","Active","text","Remarks","fontWeight","SlotBooked","width","float","class","IsBonded","BondNo","AssociatedTerminals","terminalList","terminalCodes","selectedTerminal","TerminalCodes","onCheckChange","length","map","attire","ErrorBoundary","Accordion","Content","title","AttributeDetails","attributeMetaDataList","Tab","activeIndex","Pane","DataTable","selectionMode","selection","onSelectionChange","scrollable","scrollHeight","rowExpansionTemplate","push","Array","isArray","AttributesforUI","rows","Column","header","editable","renderer","Pagination","editFieldType","customEditRenderer","celldata","compSeqOptions","finishedProductOptions","originalterminalOptions","supplierOriginOptions","forEach","origins","handleEnableOriginTerminalEditDropDown","handleOriginTerminalEditDropDown","open","findIndex","x","CompartmentSeqNoInTrailer","compData","handleStatus","e","CompartmentStaus","EMPTY","UNLOADING","PART_UNLOADED","OVER_UNLOADED","FORCE_COMPLETED","COMPLETED","UNLOAD_NOTSTARTED","chkForceCompleted","textAlign","ForceCompleted","SeqNumber","customerOptions","Modal","Footer","defaultProps","baseProductCode","customerCode","baseProductOptions","TruckReceiptDetailsComposite","Component","constructor","_this","arguments","this","state","vehicleDetails","carrierCode","vehicleCompartments","modVehicleDetails","receiptValidationDef","isReadyToRender","baseProductCodeOptions","supplierOriginTerminalsList","vehicleSearchOptions","driverSearchOptions","isPlanned","shipmentNextOperations","currentReceiptStatus","isManualEntry","customerptions","customerInventory","auditTrailList","modAuditTrailList","ModViewUnloadDetails","receiptCompartmentDetails","forceCompleteIsDisable","drawerStatus","props","userDetails","EntityResult","compartmentAttributeMetaDataList","isRecordWeight","isSealCompartments","sealCompartments","recordWeightList","weighBridgeCode","scadaValue","allowOutofRangeTW","bondExpiryDate","isVehicleBonded","vehicleBondPopUp","vehicleBondExpiryPopUp","stockProducts","loadingExpandedRows","customerinventoryChange","compartmentChange","isCloseReceipt","reasonForClosure","truckReceiptKPIList","showReceiptAuthenticationLayout","showAuthorizeToUnLoadAuthenticationLayout","showAllowToUnLoadAuthenticationLayout","showCloseReceiptAuthenticationLayout","showViewBODAuthenticationLayout","showPrintBODAuthenticationLayout","showRANAuthenticationLayout","tempReceipt","isAllocateBay","bayData","selectBay","isDeAllocateBay","handleSaveReceipt","setState","lodash","createReceipt","updateReceipt","saveReceipt","ReceiptOriginTerminalCompartmentsInfo","fillDetails","CustomerInventoryPlanList","fillCustomerInvetoryDetails","attributeList","validateSave","convertStringtoDecimal","handleSave","saveCompartmentDetails","handleSaveCompartmentDetailsEnabled","handleDriverChange","driverCode","handleSealClose","handleDriverSearchChange","filter","item","includes","handleVehicleChange","vehicleCode","getVehicle","handleDriverResultsClear","handleVehicleSearchChange","ShipmentType","handleVehicleResultsClear","handleActiveStatusChange","IsArchived","newComp","CompartmentCode","CompartmentSeqNoInVehicle","Quantity","QuantityUOM","FinishedProductCode","ShareholderCode","selectedShareholder","Attributes","OriginTerminalCode","TrailerCode","IsEnterpriseNode","formCompartmentAttributes","obj","index","com","cindex","handleReset","getReceiptCompartmentFromReceipt","getReceiptCustomerInventory","getReceiptCompartmentDetails","vehicleCompartment","vehCompSeq","terminalSelectionChange","handleResetAttributeValidationError","localNodeAttribute","handleAllTerminalsChange","handleAssociationSelectionChange","associations","handleSupplierChange","supplierCode","keyCode","key","KeyCodes","ShareHolderCode","keyDataCode","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","IsSuccess","getReceipt","Common_Code","ErrorList","toast","NotifyEvent","notificationMessage","autoClose","catch","handleChange","propertyName","handleDateTextChange","expandedRowIndex","splice","newVal","vc","SFL","trailerCode","compCode","UOM","inventory","CustomerCode","PlannedQuantity","PARTIALLY_UNLOADED","INTERRUPTED","AUTO_UNLOADED","QUEUED","CHECKED_IN","ViewReceiptCompData","Entity","onSaved","modMarineDispatch","DefaultValue","Code","compAttribute","compIndex","compSequenceNo","confirmVehicleBond","TranslationConsumer","confirmBondedStockProducts","confirmVehicleBondExpiryDate","handleRecordWeight","flexWrap","getScadaValue","RecordTareWeight","RecordLadenWeight","getAllRecordWeight","selectedRow","fillRecorWeightDetails","authorizeToUnLoad","handleAuthenticationClose","handleAuthorizeToUnLoad","allowToUnLoadOnClick","allowToUnLoad","handleAllowToLoad","printRANClick","printRAN","handlePrintRAN","viewBOD","handleViewBOD","printBODClick","printBOD","handlePrintBOD","handleOperationClick","operation","ViewReceipt_AuthorizeUnLoad","ViewReceipt_AllowUnLoad","ViewReceipt_ManualEntry","ViewReceipt_RecordWeight","ViewReceipt_CloseReceipt","ViewReceipt_PrintRAN","ViewReceipt_ViewUnloading","handleViewUnLoading","Table","count","seqNo","endtime","toLocaleDateString","toLocaleTimeString","starttime","grossquantity","join","netquantity","isViewUnloading","ViewReceipt_ViewBOD","ViewReceipt_ViewAuditTrail","handleViewAuditTrail","i","receiptStatus","DE_QUEUED","WEIGHED_IN","WEIGHED_OUT","ASSIGNED","CANCELLED","EXPIRED","REJECTED","USER_DEFINED","Receipt_Status","UpdatedTime","isViewAuditTrail","getRecordWeightList","ViewReceipt_PrintBOD","ViewReceipt_SendBOD","handleSendBOD","viewReceipt_BSIOutbound","handleBSIOutbound","viewReceipt_SealCompartments","handleSealCompartments","getBays","products","ReceiptCompartmentsInfo","bayAllocation","SupportedProducts","ele","AssociatedProduct","handleTabChange","FunctionsList","functionGroups","modify","fnTruckReceipt","ReceiptUpdateAllow","onBack","loadingToggleExpand","isTerminalAdded","handleDrawer","closeReceipt","handleReceiptClose","handleCloseReceipttModal","confirmAllocateBay","showHeader","PageAttibutes","WebPortalListPageSize","resizableColumns","AllocateBay","BayCode","confirmDeAllocateBay","DeAllocateBay","componentDidMount","GetUOMList","getVehicleCodes","getDriverCodes","getFinishedProductCodes","GetSupplierOriginTerminals","getLookUpData","getcustomerList","GetViewAllReceiptCustomData","getBaseProducts","getAttributes","getReceiptConfigLookUpTypeName","getReceiptBYCompartmentLookUpData","getLookUpHsEInSpectionEnableData","componentWillReceiveProps","nextProps","receiptCode","add","Object","keys","Set","a","receiptCompartment","receiptCompartmentValidationDef","col","err","validator","displayName","attributeMetaData","errMsg","returnValue","values","every","sc","fillAttributeDetails","compartmentDetails","comp","BaseProductCode","fillCompartmentPlanDetails","modCompartmentsdetails","adjustedquantity","trailercode","compartmentcode","CompartmentStatus","finishedproductcode","AdjustedQuantity","revisedplannedquantity","compartmentuom","UnLoadedQuantity","Math","round","loadedquantity","CompSeqNoInVehicle","compartmentseqnoinvehicle","modRecordWeightDetails","ReceiptTrailerWeighbridgeInfo","WeighbridgeCode","MeasuredWeight","WeightUOM","MeasuredWeightTime","weight","IsTareWeight","shCode","token","callback","vehicleChanged","CarrierCompanyCode","getCompartmentDetailsFromVehicle","getReceiptCompartmentFromVehicleCompartment","BondExpiryDate","receiptCompartments","trailerCompSeq","receiptRow","shareholder","shareholderCustomers","shareholderCust","customers","CustomerDestinationsList","vehicleInfo","seqNum","VehicleTrailers","sort","b","TrailerSeq","vehicleTrailer","Trailer","Compartments","trailerCompartment","Capacity","getCompartmentFromReceipt","CompartmentsDetails","DestinationCode","ReceiptCompartment_Status","Adjust_Plan","getSaveEnabled","saveCompartmentDetailsEnabled","saveAbled","viewTab","customerinventory","GrossActualQuantity","NetActualQuantity","compAttributeMetaDataList","selectedTerminals","attributes","attTerminal","some","selTerminal","compAttributes","att","AttributeCode","DisplayName","MinValue","MaxValue","ValidationFormat","attributesforNewComp","tempCompAttributes","ListOfAttributeData","attData","tempAttIndex","assignedAttributes","det","terminalAttributes","termAtt","receiptAttributeEntity","receiptOriginTerminalCompartment","RECEIPT","RECEIPTORIGINTERMINALCOMPARTMENT","attributesTerminalsList","existitem","Attributevalue","trailerAttribute","valueAttribute","notificationReceipt","emptyReceipt","DefaultQtyUOMForTransactionUI","ROAD","getReciptStatuses","getKPIList","GetBayByTrnsaction","getReciptsStatusOperations","ReceiptType","VOLUME","MASS","massUOM","getVehicleSearchOptions","modVehicleCode","getDriverSearchOptions","modDriverCode","shareholderSuppliers","shareholderSup","SupplierOriginTerminalsList","supplier","receiptItem","isVolumneBased","IsVolumeBased","ViewAllocateBay_DeallocateBay","nextOperations","isEnable","Enabled","lookUpData","NoOfDaysBeforeOldReceiptsCreationIsAllowed","ReceiptWithSingleSupplier","EnableRoad","bonded","toUpperCase","terminalcode","getCustomerInventory","TrnsactionCode","TrnsactionType","CallBack","shipmentCode","bayCode","entityType","ResultDataList","view","fnKPIInformation","objKPIRequestData","PageName","kpiTruckReceiptDetail","TransportationType","InputParameters","ListKPIDetails","getFunctionGroupName","fnCloseReceipt","fnViewReceiptStatus","fnPrintBOD","fnPrintRAN","getDeleteorEditMode","handleOperation","render","popUpContents","fieldName","fieldValue","LastUpdatedTime","LastActiveTime","CreatedTime","TMDetailsHeader","entityCode","newEntityName","TruckReceiptViewUnLoadingDetails","handleBack","TruckReceiptViewAuditTrailDetails","TruckReceiptManualEntryDetailsComposite","TMDetailsKPILayout","KPIList","ShowSlotBookedInUI","RoleName","TMDetailsUserActions","TransactionSummaryOperations","selectedItem","handleDetailsPageClick","handleRowClick","handleOperationButtonClick","currentStatuses","isDetails","isWebPortalUser","webPortalAllowedOperations","unAllowedOperations","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleClose","TruckReceiptSealDetailsComposite","transactionCode","LoadingPage","connect","getUserDetails","TokenAuth","updateSealCompartments","sealCompValidationDef","handleSealNoInput","cellInfo","SealNo","getCustomtableData","custSealInfo","ReceiptCompartmentStatus","UnLoadedQty","UnLoadedQuantityUOM","isNodeEnterpriseOrWebortal","validationError","driverName","DRIVERNAME","DRIVERCODE","formatter","engine","cls","fontSize","val","AUTO_LOADED","id","wjChart","itemsSource","chartType","bindingX","palette","minWidth","height","wjProperty","majorUnit","max","min","itemFormatter","axisLine","binding","el","window","document","getElementById","innerHTML","iframe","createElement","doc","body","appendChild","contentWindow","str1","substring","indexOf","str2","write","close","focus","print","setTimeout","removeChild","wjcCore","bAutoWidth","secondRow","thirdRow"],"sourceRoot":""}