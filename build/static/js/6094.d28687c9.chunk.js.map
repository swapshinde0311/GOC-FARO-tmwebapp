{"version":3,"file":"static/js/6094.d28687c9.chunk.js","mappings":"mLAKA,MA2CA,EA3CmBA,IAGjB,MAAM,KAAEC,EAAI,SAAEC,EAAQ,YAAEC,EAAW,gBAAEC,GAAoBJ,EAEnDK,EAASJ,EAAO,EAChBK,EAASL,EAAO,EAAIE,EAAc,EAUxC,OACEI,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAMC,MAAOX,EAAMY,OAAQZ,EAAKQ,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,UACEI,UAAU,gBACVG,OAAQV,EACRW,GAAIV,EACJW,GAAIX,EACJY,EAAGX,EACHH,YAAaA,KAGfI,EAAAA,EAAAA,KAAA,QAAMW,EAAC,GAAAC,OAAKd,GAAUe,EAAC,GAAAD,OAAKd,EAAS,IAAMM,UAAU,kBAAiBF,SACnEP,QAGJ,E,+ICrBP,MAAMmB,EAAaC,OAAkB,UAAED,WAEvC,MAAME,UAAoCC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KAClDC,MAAQ,CACNC,YAAa,GACbC,aAAc,GACdC,QAAS,IACT,KAeFC,kBAAoB,KAClB,IAAIC,EAAkB,OAEUC,IAA9BZ,EAAWa,gBACXb,EAAWa,eAAiB,IAE5BF,EAAkBX,EAAWa,gBAE/BC,KAAKC,aAAeC,aAAY,KAC9BC,QAAQC,IAAI,8BAAgCP,EAAkB,IAAIQ,MAClEL,KAAKM,YAAY,GACE,GAAlBT,EAAuB,IAAK,EAC/B,KACFU,iBAAmB,KACS,OAAtBP,KAAKC,eACPO,cAAcR,KAAKC,cACnBE,QAAQC,IAAI,8BAAgC,IAAIC,MAClD,EACA,KA0RFI,eAAkBC,IAChBV,KAAKW,SAAS,CAAElB,YAAaiB,IAAQV,KAAKR,MAAMC,YAAc,GAAKiB,GAAM,CACzE,CA5TFE,iBAAAA,GACE,IACEZ,KAAKM,aACLN,KAAKJ,mBACP,CAAE,MAAOiB,GACPV,QAAQC,IACN,gEACAS,EAEJ,CACF,CACAC,oBAAAA,GACEd,KAAKO,kBACP,CAoBAD,UAAAA,GACE,IAAIS,EAAe,CACjBC,QAAS,GACTC,YAAa,WACbC,qBAAsB,IAKxB,IAAIC,EAAoB,CACtBC,SAAUC,EAAAA,GACVC,gBAAiB,CACf,CACEC,IAAK,eACLC,MAAOxB,KAAKnC,MAAM4D,iBAAiBC,gBAIzCC,IACEC,EAAAA,IACAC,EAAAA,GAAyCV,EAAmB,OAE3DW,MAAMC,IACL,IAAIC,EAASD,EAASE,MAEG,IAArBD,EAAOE,UACTlC,KAAKW,SAAS,CAAEhB,QAASqC,EAAOG,aAAaC,kBAE7CpC,KAAKW,SAAS,CAAEhB,QAAS,KACzBQ,QAAQC,IAAI,8BAA+B4B,EAAOK,WAClDtB,EAAaG,qBAAqBoB,KAAK,CACrCC,UAAW,GACXC,UAAW,GACXC,WAAW,EACXC,aAAcV,EAAOK,UAAU,MAG/BtB,EAAaG,qBAAqByB,OAAS,IAC7CC,EAAAA,EAAAA,QACExE,EAAAA,EAAAA,KAACyE,EAAAA,EAAa,CAAAvE,UACZF,EAAAA,EAAAA,KAAC0E,EAAAA,EAAW,CAACC,oBAAqBhC,MAEpC,CACEiC,UAAwC,YAA7BjC,EAAaE,aAA4B,KAG1D,IAEDgC,OAAOpC,IACNV,QAAQC,IAAI,yCAA0CS,EAAM,GAElE,CAEAqC,UAAAA,GAEE,IAAIzD,EAAcO,KAAKR,MAAMC,YAEzB0D,EAAWnD,KAAKnC,MAAM4D,iBACtB2B,EAAgB,GAEhBC,EAAerD,KAAKnC,MAAMyF,QAAQC,QACnCC,GAAgBA,EAAYC,MAAQN,EAASzB,eAGhD,IACE,GAAI2B,EAAaV,OAAS,GACpBe,MAAMC,QAAQN,EAAa,GAAGO,MAAMC,eAAgB,CACtD,IAAIC,EAAU,GACM,KAAhBrE,EACFqE,EAAUT,EAAa,GAAGO,MAAMC,cAAcN,QAC3CQ,GAAWA,EAAON,MAAQhE,KAG7BqE,EAAU,CAAC,CAAEL,IAAK,WAAYG,MAAO,KACrCP,EAAa,GAAGO,MAAMC,cAAcG,SAAStD,IAC3CoD,EAAQ,GAAGF,MAAQE,EAAQ,GAAGF,MAAM5E,OAAO0B,EAAIkD,MAAM,KAGrDE,EAAQnB,OAAS,GAEjBe,MAAMC,QAAQG,EAAQ,GAAGF,QACzBE,EAAQ,GAAGF,MAAMjB,OAAS,GAE1BmB,EAAQ,GAAGF,MAAMI,SAASC,IACxB,GAAuC,gBAAnCA,EAAIC,iBAAiBC,UAA6B,CACpD,IAAIC,EAAaC,IAAAA,UAAiBJ,EAAIC,kBAEtCE,EAAsB,UAAIC,IAAAA,UACxBJ,EAAIK,iBAENlB,EAAcd,KAAK8B,EACrB,IAIR,CAEJ,CAAE,MAAOvD,GACPV,QAAQC,IAAI,sDAAuDS,EACrE,CAEA,OACEzC,EAAAA,EAAAA,KAACyE,EAAAA,EAAa,CAAAvE,UACZF,EAAAA,EAAAA,KAACmG,EAAAA,oBAAmB,CAAAjG,SAChBkG,IACAjG,EAAAA,EAAAA,MAACkG,EAAAA,GAAS,CACRxC,KAAMmB,EACNsB,oBAAoB,EACpBC,kBAAkB,EAElBjF,aAAcM,KAAKR,MAAME,aACzBkF,qBAAsB5E,KAAK4E,qBAE7BtG,SAAA,EAEEF,EAAAA,EAAAA,KAACqG,EAAAA,GAAUI,OAAM,CACfC,aAAa,MAEbC,MAAM,cACNC,OAAQR,EAAE,gBACVS,UAAU,EACVC,SAAWC,GACFX,EAAE,OAASW,EAASC,QAAqB,cAL9C,gBAQNhH,EAAAA,EAAAA,KAACqG,EAAAA,GAAUI,OAAM,CACfC,aAAa,MAGbE,OAAQR,EAAE,YAEVU,SAAWC,IACT,IAAIE,EAAgBC,KAAKC,MACvBJ,EAASC,QAAoB,YAE/B,OAAOZ,EAAE,OAASa,EAAcG,aAAe,QAAQ,GARrD,YAYNpH,EAAAA,EAAAA,KAACqG,EAAAA,GAAUI,OAAM,CAIfG,OAAQR,EAAE,eAEVU,SAAWC,IAET,IAGIM,EAHgBH,KAAKC,MACvBJ,EAASC,QAAoB,YAEGM,KAAKC,WACnCC,EAAWT,EAASC,QAAiB,QAAE,GAC3C,OAAgC,OAA5BQ,EAASH,GACJ,OAEArH,EAAAA,EAAAA,KAAA,QAAAE,SAAOsH,EAASH,IACzB,GAfE,YAkBNrH,EAAAA,EAAAA,KAACqG,EAAAA,GAAUI,OAAM,CACfC,aAAa,MAGbE,OAAQR,EAAE,aAEVU,SAAWC,IAET,IAAIE,EAAgBC,KAAKC,MACvBJ,EAASC,QAAoB,YAE3BS,EAAcR,EAAcK,KAAKI,YACjCC,EAAOV,EAAcK,KAAKK,KAC1BH,EAAWT,EAASC,QAAiB,QAAE,GAC3C,OAA8B,OAA1BQ,EAASC,GACJ,OAGLtH,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CACGsH,EAASC,GAAa,IAAEE,IAG/B,GApBE,aAuBN3H,EAAAA,EAAAA,KAACqG,EAAAA,GAAUI,OAAM,CACfC,aAAa,MAEbC,MAAM,WACNC,OAAQR,EAAE,aACVS,UAAU,EACVC,SAAWC,IACT,IAAIE,EAAgBC,KAAKC,MACvBJ,EAASC,QAAoB,YAE3BS,EAAcR,EAAcK,KAAKI,YACjCF,EAAWT,EAASC,QAAiB,QAAE,GACvCY,EAAaX,EAAcK,KAAKM,WAChCC,EAAQjG,KAAKkG,gBACfF,EACA,WACAJ,EAASC,IAEX,OACEzH,EAAAA,EAAAA,KAAA,QAAM+H,MAAO,CAAEF,MAAOA,GAAQ3H,SAC3B6G,EAASC,QAAkB,UACvB,GAnBP,aAuBNhH,EAAAA,EAAAA,KAACqG,EAAAA,GAAUI,OAAM,CACfC,aAAa,MACbI,SAAWjD,IACT,GAAIA,EAAKmD,QAAmB,UAAEzC,OAAS,EAAG,CAExC,MAAMyD,EACJpG,KAAKR,MAAME,aAAa2G,WACrBtH,GACCA,EAAEuH,qBACFrE,EAAKmD,QAAQkB,oBACbvH,EAAEwH,UAAYtE,EAAKmD,QAAQmB,WAC1B,EAGP,OACEnI,EAAAA,EAAAA,KAAA,OACEoI,QAASA,IAAMxG,KAAKyG,aAAaxE,EAAKmD,QAASgB,GAAM9H,UAErDF,EAAAA,EAAAA,KAACsI,EAAAA,KAAI,CACHC,KAAK,SACLC,KAAMR,EAAO,aAAe,iBAIpC,CAAO,MAAO,EAAE,UAWhC,CACAF,eAAAA,CAAgBF,EAAYa,EAAaC,GACvC,IAAIC,EAAY,GAChB,IACE,IAAIC,EAA6B,OAAbF,EAAoB,EAAIA,EAC5C,GAAIpD,MAAMC,QAAQqC,GAChB,IAAK,MAAMiB,KAAYjB,EACrB,GAAIgB,GAAiBC,EAASJ,GAAc,CAC1CE,EAAYE,EAAShB,MACrB,KACF,CAGN,CAAE,MAAOpF,GACPV,QAAQC,IAAI,mCAAoCS,EAClD,CACA,OAAOkG,CACT,CACAnC,oBAAAA,CAAqB3C,GACnB,OAAO1D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,cAAY2D,EAAgB,UAAEU,SAC5C,CAEA8D,YAAAA,CAAaxE,EAAMmE,GACjB,IAAIc,EAAWlH,KAAKR,MAAME,aAC1B,GAAI0G,EAAM,CACR,IAAIe,EAAQD,EAASb,WAClBX,GACCA,EAAKY,qBAAuBrE,EAAKqE,oBACjCZ,EAAKa,UAAYtE,EAAKsE,UAE1BW,EAASE,OAAOD,EAAO,EACzB,MACED,EAAS5E,KAAKL,GAEhBjC,KAAKW,SAAS,CAAEjB,aAAcwH,GAChC,CAMAG,2BAAAA,GAEE,IAAIlE,EAAWnD,KAAKnC,MAAM4D,iBAEtB6F,EAAU,GACd,IACE,IAAIjE,EAAerD,KAAKnC,MAAMyF,QAAQC,QACnCC,GAAgBA,EAAYC,MAAQN,EAASzB,eAG5C2B,EAAaV,OAAS,GACpBe,MAAMC,QAAQN,EAAa,GAAGO,MAAM2D,cACtClE,EAAa,GAAGO,MAAM2D,YAAYvD,SAASwD,IACzC,IACIxB,EADiBV,KAAKC,MAAMpC,EAASsE,gBACTC,UAAUF,EAAO/D,KAC7CkE,EAAeH,EAAO/D,IAAImE,cAC9BD,EACE,QACAA,EAAaE,OAAO,GAAGC,cACvBH,EAAaI,MAAM,GACrB,IAAIC,EAAgB,aAChBC,EAAmB,aACnBT,EAAO/D,MAAQzD,KAAKR,MAAMC,cAC5BuI,EAAgB,qBAChBC,EAAmB,sBAErBX,EAAQhF,MACNlE,EAAAA,EAAAA,KAAA,OAAKI,UAAU,oCAAmCF,UAChDF,EAAAA,EAAAA,KAACyE,EAAAA,EAAa,CAAAvE,UACZF,EAAAA,EAAAA,KAACmG,EAAAA,oBAAmB,CAAAjG,SAChBkG,IACAjG,EAAAA,EAAAA,MAAA,OAAKC,UAAWwJ,EAAc1J,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,OACE4H,MAAO,CACL+B,QAAS,OACTC,QAAS,MACTC,cAAe,MACfC,aAAc,uBACd/J,SAAA,EAEFF,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,QACEI,UACEmJ,EACA,IACAM,EACA,eAKN7J,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAMI,UAAWyJ,EAAiB3J,SAC/BkG,EAAEgD,EAAO/D,aAIhBrF,EAAAA,EAAAA,KAAA,OACE+H,MAAO,CAAEzH,OAAQ,QAAS4J,OAAQ,WAClC9B,QAASA,IAAMxG,KAAKS,eAAe+G,EAAO/D,KAAKnF,UAE/CF,EAAAA,EAAAA,KAACmK,EAAS,CACRxK,SAAUyJ,EAAO5D,MACjB9F,KAAM,GACNE,YAAa,EACbC,gBAAiB+B,KAAKkG,gBACpBF,EACA,WACAwB,EAAO5D,oBASxB,GAMT,CAAE,MAAO/C,GACPV,QAAQC,IACN,yDACAS,EAEJ,CACA,OAAOyG,CACT,CAEAkB,MAAAA,GACE,OACEpK,EAAAA,EAAAA,KAACyE,EAAAA,EAAa,CAAAvE,UACZF,EAAAA,EAAAA,KAACmG,EAAAA,oBAAmB,CAAAjG,SAChBkG,IACAjG,EAAAA,EAAAA,MAAA,OAAK4H,MAAO,CAAEsC,UAAW,QAASnK,SAAA,EAChCC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBF,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,OACEI,UAAU,UACV2H,MAAO,CAAEmC,OAAQ,WACjB9B,QAASA,IAAMxG,KAAKnC,MAAM6K,YAAY,GAAGpK,UAEzCF,EAAAA,EAAAA,KAACsI,EAAAA,KAAI,CACHC,KAAK,SACLC,KAAK,aACLpI,UAAU,iBAGdJ,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcF,UAC3BF,EAAAA,EAAAA,KAAA,QAAAE,SACGkG,EAAE,oBACD,MACAxE,KAAKnC,MAAM4D,iBAAiBC,qBAUpCtD,EAAAA,EAAAA,KAACyE,EAAAA,EAAa,CAAAvE,UACZF,EAAAA,EAAAA,KAACuK,EAAAA,EAAkB,CACjBhJ,QAASK,KAAKR,MAAMG,aAIxBvB,EAAAA,EAAAA,KAAA,OAAKI,UAAU,MAAKF,SAAE0B,KAAKqH,iCAE3BjJ,EAAAA,EAAAA,KAAA,OAAAE,SAAM0B,KAAKkD,qBAMvB,EAGF,S","sources":["Components/UIBase/Common/svgCircle.jsx","Components/Composite/Details/ENDashboardDetailsComposite.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport \"./../../../CSS/styles.css\";\r\n\r\nconst SvgCircle = (props) => {\r\n  //const [offset, setOffset] = useState(0);\r\n  //const circleRef = useRef(null);\r\n  const { size, progress, strokeWidth, circleOneStroke } = props;\r\n\r\n  const center = size / 2;\r\n  const radius = size / 2 - strokeWidth / 2;\r\n  //const circumference = 2 * Math.PI * radius;\r\n  //const offset = ((100 - progress) / 100) * circumference;\r\n  // useEffect(() => {\r\n  //   const progressOffset = ((100 - progress) / 100) * circumference;\r\n  //   setOffset(progressOffset);\r\n  //   circleRef.current.style =\r\n  //     \"transition: stroke-dashoffset 850ms ease-in-out;\";\r\n  // }, [setOffset, circumference, progress, offset]);\r\n\r\n  return (\r\n    <>\r\n      <svg className=\"svg\" width={size} height={size}>\r\n        <circle\r\n          className=\"svg-circle-bg\"\r\n          stroke={circleOneStroke}\r\n          cx={center}\r\n          cy={center}\r\n          r={radius}\r\n          strokeWidth={strokeWidth}\r\n        />\r\n\r\n        <text x={`${center}`} y={`${center + 10}`} className=\"svg-circle-text\">\r\n          {progress}\r\n        </text>\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nSvgCircle.propTypes = {\r\n  size: PropTypes.number.isRequired,\r\n  progress: PropTypes.number.isRequired,\r\n  strokeWidth: PropTypes.number.isRequired,\r\n  circleOneStroke: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default SvgCircle;\r\n","//import { Button } from \"@scuf/common\";\r\nimport { Icon } from \"@scuf/common\";\r\nimport React, { Component } from \"react\";\r\nimport SvgCircle from \"../../UIBase/Common/svgCircle\";\r\nimport lodash from \"lodash\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { kpiTerminalDashboardDetails } from \"../../../JS/KPIPageName\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport PropTypes from \"prop-types\";\r\nconst mapOptions = window[\"runConfig\"].mapOptions;\r\n\r\nclass ENDashboardDetailsComposite extends Component {\r\n  state = {\r\n    selectedMOT: \"\",\r\n    expandedRows: [],\r\n    kpiList: [],\r\n  };\r\n  componentDidMount() {\r\n    try {\r\n      this.getKPIList();\r\n      this.startRefreshTimer();\r\n    } catch (error) {\r\n      console.log(\r\n        \"EnDashboarDetailsComposite:Error occured on ComponentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.stopRefreshTimer();\r\n  }\r\n  startRefreshTimer = () => {\r\n    let refreshInterval = 5;\r\n    if (\r\n      mapOptions.refreshMinutes !== undefined &&\r\n      mapOptions.refreshMinutes > 0\r\n    ) {\r\n      refreshInterval = mapOptions.refreshMinutes;\r\n    }\r\n    this.refreshTimer = setInterval(() => {\r\n      console.log(\"Details Refreshing started \" + refreshInterval + new Date()); //TODO:Remove after testing\r\n      this.getKPIList();\r\n    }, refreshInterval * 60 * 1000);\r\n  };\r\n  stopRefreshTimer = () => {\r\n    if (this.refreshTimer !== null) {\r\n      clearInterval(this.refreshTimer);\r\n      console.log(\"Details Refreshing stopped \" + new Date()); //TODO:Remove after testing\r\n    }\r\n  };\r\n  getKPIList() {\r\n    var notification = {\r\n      message: \"\",\r\n      messageType: \"critical\",\r\n      messageResultDetails: [], //{keyFields: [\"DriverInfo_Code\"],\r\n      //keyValues: [this.state.modDriver.Code],\r\n      //isSuccess: false,\r\n      //errorMessage: \"\",}\r\n    };\r\n    let objKPIRequestData = {\r\n      PageName: kpiTerminalDashboardDetails,\r\n      InputParameters: [\r\n        {\r\n          key: \"TerminalCode\",\r\n          value: this.props.selectedTerminal.TerminalCode,\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.GetKPI,\r\n      Utilities.getAuthenticationObjectforPost(objKPIRequestData, null)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        //console.log(result);\r\n        if (result.IsSuccess === true) {\r\n          this.setState({ kpiList: result.EntityResult.ListKPIDetails });\r\n        } else {\r\n          this.setState({ kpiList: [] });\r\n          console.log(\"Error in Dashboard KPIList:\", result.ErrorList);\r\n          notification.messageResultDetails.push({\r\n            keyFields: [],\r\n            keyValues: [],\r\n            isSuccess: false,\r\n            errorMessage: result.ErrorList[0],\r\n          });\r\n        }\r\n        if (notification.messageResultDetails.length > 0) {\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Dashboard KPIList:\", error);\r\n      });\r\n  }\r\n\r\n  getTPIList() {\r\n    //debugger;\r\n    let selectedMOT = this.state.selectedMOT;\r\n    //if (selectedMOT !== \"\") {\r\n    let terminal = this.props.selectedTerminal;\r\n    let motTPIDetails = [];\r\n\r\n    let terminalTPis = this.props.tpiList.filter(\r\n      (terminalTPI) => terminalTPI.Key === terminal.TerminalCode\r\n    );\r\n\r\n    try {\r\n      if (terminalTPis.length > 0) {\r\n        if (Array.isArray(terminalTPis[0].Value.MoTTPIDetails)) {\r\n          let motList = [];\r\n          if (selectedMOT !== \"\") {\r\n            motList = terminalTPis[0].Value.MoTTPIDetails.filter(\r\n              (mottpi) => mottpi.Key === selectedMOT\r\n            );\r\n          } else {\r\n            motList = [{ Key: \"Terminal\", Value: [] }];\r\n            terminalTPis[0].Value.MoTTPIDetails.forEach((mot) => {\r\n              motList[0].Value = motList[0].Value.concat(mot.Value);\r\n            });\r\n          }\r\n          if (motList.length > 0) {\r\n            if (\r\n              Array.isArray(motList[0].Value) &&\r\n              motList[0].Value.length > 0\r\n            ) {\r\n              motList[0].Value.forEach((tpi) => {\r\n                if (tpi.ParentTPIDetails.ChartType === \"SingleValue\") {\r\n                  let tpiDetails = lodash.cloneDeep(tpi.ParentTPIDetails);\r\n\r\n                  tpiDetails[\"childTPIs\"] = lodash.cloneDeep(\r\n                    tpi.ChildTPIDetails\r\n                  );\r\n                  motTPIDetails.push(tpiDetails);\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error in format TPIs at DashboardDetails.getTPIList\", error);\r\n    }\r\n    //console.log(\"selectedMOT\", motTPIDetails);\r\n    return (\r\n      <ErrorBoundary>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <DataTable\r\n              data={motTPIDetails}\r\n              reorderableColumns={true}\r\n              resizableColumns={true}\r\n              //search={true}\r\n              expandedRows={this.state.expandedRows}\r\n              rowExpansionTemplate={this.rowExpansionTemplate}\r\n            //searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n            // rows={pageSize}\r\n            >\r\n              <DataTable.Column\r\n                initialWidth=\"20%\"\r\n                key=\"TPICategory\"\r\n                field=\"TPICategory\"\r\n                header={t(\"tpi_Category\")}\r\n                sortable={true}\r\n                renderer={(cellData) => {\r\n                  return t(\"tpi_\" + cellData.rowData[\"TPICategory\"]);\r\n                }}\r\n              />\r\n              <DataTable.Column\r\n                initialWidth=\"20%\"\r\n                key=\"TPIName\"\r\n                //field=\"TPIName\"\r\n                header={t(\"tpi_Name\")}\r\n                // sortable={true}\r\n                renderer={(cellData) => {\r\n                  let configuration = JSON.parse(\r\n                    cellData.rowData[\"JSONFormat\"]\r\n                  );\r\n                  return t(\"tpi_\" + configuration.reflocalekey + \"_name\");\r\n                }}\r\n              />\r\n\r\n              <DataTable.Column\r\n                //initialWidth={columnDetail.Width}\r\n                key=\"Formula\"\r\n                // field=\"TPIName\"\r\n                header={t(\"tpi_Formula\")}\r\n                // sortable={true}\r\n                renderer={(cellData) => {\r\n                  //debugger;\r\n                  let configuration = JSON.parse(\r\n                    cellData.rowData[\"JSONFormat\"]\r\n                  );\r\n                  let formulaColumn = configuration.item.formulaCol;\r\n                  let itemData = cellData.rowData[\"TPIData\"][0];\r\n                  if (itemData[formulaColumn] === null) {\r\n                    return \"---\";\r\n                  } else {\r\n                    return <span>{itemData[formulaColumn]}</span>;\r\n                  }\r\n                }}\r\n              />\r\n              <DataTable.Column\r\n                initialWidth=\"12%\"\r\n                key=\"TPIValue\"\r\n                //field=\"TPIName\"\r\n                header={t(\"tpi_Value\")}\r\n                // sortable={true}\r\n                renderer={(cellData) => {\r\n                  //debugger;\r\n                  let configuration = JSON.parse(\r\n                    cellData.rowData[\"JSONFormat\"]\r\n                  );\r\n                  let valueColumn = configuration.item.tpiValueCol;\r\n                  let unit = configuration.item.unit;\r\n                  let itemData = cellData.rowData[\"TPIData\"][0];\r\n                  if (itemData[valueColumn] === null) {\r\n                    return \"---\";\r\n                  } else {\r\n                    return (\r\n                      <span>\r\n                        {itemData[valueColumn]} {unit}\r\n                      </span>\r\n                    );\r\n                  }\r\n                }}\r\n              />\r\n              <DataTable.Column\r\n                initialWidth=\"10%\"\r\n                key=\"TPIIndex\"\r\n                field=\"TPIValue\"\r\n                header={t(\"tpi_Index\")}\r\n                sortable={true}\r\n                renderer={(cellData) => {\r\n                  let configuration = JSON.parse(\r\n                    cellData.rowData[\"JSONFormat\"]\r\n                  );\r\n                  let valueColumn = configuration.item.tpiValueCol;\r\n                  let itemData = cellData.rowData[\"TPIData\"][0];\r\n                  let categories = configuration.item.categories;\r\n                  let color = this.getTPIColorCode(\r\n                    categories,\r\n                    \"tpiValue\",\r\n                    itemData[valueColumn]\r\n                  );\r\n                  return (\r\n                    <span style={{ color: color }}>\r\n                      {cellData.rowData[\"TPIValue\"]}\r\n                    </span>\r\n                  );\r\n                }}\r\n              />\r\n              <DataTable.Column\r\n                initialWidth=\"5px\"\r\n                renderer={(data) => {\r\n                  if (data.rowData[\"childTPIs\"].length > 0) {\r\n                    // const open = this.state.expandedRows.includes(data.rowData);\r\n                    const open =\r\n                      this.state.expandedRows.findIndex(\r\n                        (x) =>\r\n                          x.TransportationType ===\r\n                          data.rowData.TransportationType &&\r\n                          x.TPIName === data.rowData.TPIName\r\n                      ) >= 0\r\n                        ? true\r\n                        : false;\r\n                    return (\r\n                      <div\r\n                        onClick={() => this.toggleExpand(data.rowData, open)}\r\n                      >\r\n                        <Icon\r\n                          root=\"common\"\r\n                          name={open ? \"caret-down\" : \"caret-right\"}\r\n                        />\r\n                      </div>\r\n                    );\r\n                  } else return \"\";\r\n                }}\r\n              />\r\n            </DataTable>\r\n          )}\r\n        </TranslationConsumer>\r\n      </ErrorBoundary>\r\n    );\r\n    // } else {\r\n    //   return \"\";\r\n    // }\r\n  }\r\n  getTPIColorCode(categories, indexColumn, tpiIndex) {\r\n    let colorCode = \"\";\r\n    try {\r\n      let modifiedIndex = tpiIndex === null ? 0 : tpiIndex;\r\n      if (Array.isArray(categories)) {\r\n        for (const category of categories) {\r\n          if (modifiedIndex >= category[indexColumn]) {\r\n            colorCode = category.color;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"DashboardDetails-GetColor-Error:\", error);\r\n    }\r\n    return colorCode;\r\n  }\r\n  rowExpansionTemplate(data) {\r\n    return <div>childTPIS: {data[\"childTPIs\"].length}</div>;\r\n  }\r\n\r\n  toggleExpand(data, open) {\r\n    let expanded = this.state.expandedRows;\r\n    if (open) {\r\n      let index = expanded.findIndex(\r\n        (item) =>\r\n          item.TransportationType === data.TransportationType &&\r\n          item.TPIName === data.TPIName //JSON.stringify(item) === JSON.stringify(data)\r\n      );\r\n      expanded.splice(index, 1);\r\n    } else {\r\n      expanded.push(data);\r\n    }\r\n    this.setState({ expandedRows: expanded });\r\n  }\r\n\r\n  handleMOTClick = (mot) => {\r\n    this.setState({ selectedMOT: mot === this.state.selectedMOT ? \"\" : mot });\r\n  };\r\n\r\n  getTransportationTPIIndexes() {\r\n    //debugger;\r\n    let terminal = this.props.selectedTerminal;\r\n    // let motTPIs = [];\r\n    let motDivs = [];\r\n    try {\r\n      let terminalTPis = this.props.tpiList.filter(\r\n        (terminalTPI) => terminalTPI.Key === terminal.TerminalCode\r\n      );\r\n\r\n      if (terminalTPis.length > 0) {\r\n        if (Array.isArray(terminalTPis[0].Value.MoTTPIIndex)) {\r\n          terminalTPis[0].Value.MoTTPIIndex.forEach((motTPI) => {\r\n            let terminalConfig = JSON.parse(terminal.TerminalConfig);\r\n            let categories = terminalConfig.TPIConfig[motTPI.Key];\r\n            let motIconClass = motTPI.Key.toLowerCase();\r\n            motIconClass =\r\n              \"icon-\" +\r\n              motIconClass.charAt(0).toUpperCase() +\r\n              motIconClass.slice(1);\r\n            let paneClassName = \"tpiMotPane\";\r\n            let motSpanclassName = \"tpiMOTType\";\r\n            if (motTPI.Key === this.state.selectedMOT) {\r\n              paneClassName = \"tpiSelectedMotPane\";\r\n              motSpanclassName = \"selectedtpiMOTType\";\r\n            }\r\n            motDivs.push(\r\n              <div className=\"col-12 col-md-6 col-lg-4 col-xl-3\">\r\n                <ErrorBoundary>\r\n                  <TranslationConsumer>\r\n                    {(t) => (\r\n                      <div className={paneClassName}>\r\n                        <div\r\n                          style={{\r\n                            display: \"flex\",\r\n                            padding: \"8px\",\r\n                            paddingBottom: \"0px\",\r\n                            borderBottom: \"1.5px solid #f0f0f0\",\r\n                          }}\r\n                        >\r\n                          <div>\r\n                            <span\r\n                              className={\r\n                                motIconClass +\r\n                                \" \" +\r\n                                motSpanclassName +\r\n                                \" font24\"\r\n                              }\r\n                            ></span>\r\n                          </div>\r\n\r\n                          <div>\r\n                            <span className={motSpanclassName}>\r\n                              {t(motTPI.Key)}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div\r\n                          style={{ height: \"100px\", cursor: \"pointer\" }}\r\n                          onClick={() => this.handleMOTClick(motTPI.Key)}\r\n                        >\r\n                          <SvgCircle\r\n                            progress={motTPI.Value}\r\n                            size={95}\r\n                            strokeWidth={5}\r\n                            circleOneStroke={this.getTPIColorCode(\r\n                              categories,\r\n                              \"tpiIndex\",\r\n                              motTPI.Value\r\n                            )} //\"#7ea9e1\"\r\n                          ></SvgCircle>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </TranslationConsumer>\r\n                </ErrorBoundary>\r\n              </div>\r\n            );\r\n          });\r\n        }\r\n\r\n        // motTPIs = terminalTPis[0].Value.MoTTPIIndex;\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"error in DashboardDetails- getTransportationTPIIndexes\",\r\n        error\r\n      );\r\n    }\r\n    return motDivs;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ErrorBoundary>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <div className=\" ui breadcrumb\">\r\n                <div\r\n                  className=\"section\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => this.props.onBackClick(1)}\r\n                >\r\n                  <Icon\r\n                    root=\"common\"\r\n                    name=\"caret-left\"\r\n                    className=\"caretLeft\"\r\n                  ></Icon>\r\n                </div>\r\n                <div className=\"section pl-1\">\r\n                  <span>\r\n                    {t(\"tpi_Benchmarking\") +\r\n                      \" - \" +\r\n                      this.props.selectedTerminal.TerminalCode}\r\n                  </span>\r\n                </div>\r\n                {/* <div>\r\n            <span\r\n              className=\"icon-Home section\"\r\n              onClick={() => this.props.onBackClick()}\r\n            ></span>\r\n          </div> */}\r\n              </div>\r\n              <ErrorBoundary>\r\n                <KPIDashboardLayout\r\n                  kpiList={this.state.kpiList}\r\n                ></KPIDashboardLayout>\r\n              </ErrorBoundary>\r\n\r\n              <div className=\"row\">{this.getTransportationTPIIndexes()}</div>\r\n\r\n              <div>{this.getTPIList()}</div>\r\n            </div>\r\n          )}\r\n        </TranslationConsumer>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ENDashboardDetailsComposite;\r\nENDashboardDetailsComposite.propTypes = {\r\n  tpiList: PropTypes.array.isRequired,\r\n  selectedTerminal: PropTypes.object.isRequired,\r\n  onBackClick: PropTypes.func.isRequired,\r\n};\r\n"],"names":["props","size","progress","strokeWidth","circleOneStroke","center","radius","_jsx","_Fragment","children","_jsxs","className","width","height","stroke","cx","cy","r","x","concat","y","mapOptions","window","ENDashboardDetailsComposite","Component","constructor","arguments","state","selectedMOT","expandedRows","kpiList","startRefreshTimer","refreshInterval","undefined","refreshMinutes","this","refreshTimer","setInterval","console","log","Date","getKPIList","stopRefreshTimer","clearInterval","handleMOTClick","mot","setState","componentDidMount","error","componentWillUnmount","notification","message","messageType","messageResultDetails","objKPIRequestData","PageName","kpiTerminalDashboardDetails","InputParameters","key","value","selectedTerminal","TerminalCode","axios","RestAPIs","Utilities","then","response","result","data","IsSuccess","EntityResult","ListKPIDetails","ErrorList","push","keyFields","keyValues","isSuccess","errorMessage","length","toast","ErrorBoundary","NotifyEvent","notificationMessage","autoClose","catch","getTPIList","terminal","motTPIDetails","terminalTPis","tpiList","filter","terminalTPI","Key","Array","isArray","Value","MoTTPIDetails","motList","mottpi","forEach","tpi","ParentTPIDetails","ChartType","tpiDetails","lodash","ChildTPIDetails","TranslationConsumer","t","DataTable","reorderableColumns","resizableColumns","rowExpansionTemplate","Column","initialWidth","field","header","sortable","renderer","cellData","rowData","configuration","JSON","parse","reflocalekey","formulaColumn","item","formulaCol","itemData","valueColumn","tpiValueCol","unit","categories","color","getTPIColorCode","style","open","findIndex","TransportationType","TPIName","onClick","toggleExpand","Icon","root","name","indexColumn","tpiIndex","colorCode","modifiedIndex","category","expanded","index","splice","getTransportationTPIIndexes","motDivs","MoTTPIIndex","motTPI","TerminalConfig","TPIConfig","motIconClass","toLowerCase","charAt","toUpperCase","slice","paneClassName","motSpanclassName","display","padding","paddingBottom","borderBottom","cursor","SvgCircle","render","marginTop","onBackClick","KPIDashboardLayout"],"sourceRoot":""}