{"version":3,"file":"static/js/8278.d4d34112.chunk.js","mappings":"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","sources":["Components/UIBase/Details/ShareholderAllocationDetails.jsx","Components/UIBase/Details/ShareholderAllocationItemDetails.jsx","Components/UIBase/Details/ShareholderAllocationShipmentDetails.jsx","Components/Composite/Details/ShareholderAllocationDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","JS/AttributeEntity.js","JS/functionalUtilities.js"],"sourcesContent":["import React from \"react\";\r\nimport { Select, Input, Checkbox, Icon, DatePicker } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n// import ErrorBoundary from \"../../ErrorBoundary\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport {\r\n    getCurrentDateFormat,\r\n    handleIsRequiredCompartmentCell,\r\n} from \"../../../JS/functionalUtilities\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\n\r\nShareholderAllocationDetails.propTypes = {\r\n    allocation: PropTypes.object.isRequired,\r\n    modAllocation: PropTypes.object.isRequired,\r\n    modAllocationItems: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        ShareholderList: PropTypes.array,\r\n        finishedProductOptions: PropTypes.array,\r\n        allocationTypeandFrequencies: PropTypes.object,\r\n        UOMOptions: PropTypes.array,\r\n        customerOptions: PropTypes.array,\r\n        CarrierCompanyOptions: PropTypes.array\r\n    }).isRequired,\r\n    isEnterpriseNode: PropTypes.bool.isRequired,\r\n    handleCellDataEdit: PropTypes.func.isRequired,\r\n    handleAddAssociation: PropTypes.func.isRequired,\r\n    handleDeleteAssociation: PropTypes.func.isRequired,\r\n    handleViewItems: PropTypes.func.isRequired,\r\n    handleViewShipments: PropTypes.func.isRequired,\r\n    selectedAssociations: PropTypes.array.isRequired,\r\n    handleRowSelectionChange: PropTypes.func.isRequired,\r\n    onDateTextChange: PropTypes.func.isRequired,\r\n    handleCompAttributeCellDataEdit: PropTypes.func.isRequired,\r\n    compartmentDetailsPageSize: PropTypes.number.isRequired,\r\n    expandedRows: PropTypes.array.isRequired,\r\n    toggleExpand: PropTypes.func.isRequired,\r\n    allocationType: PropTypes.string.isRequired\r\n}\r\n\r\nShareholderAllocationDetails.defaultProps = {\r\n    listOptions: {\r\n        ShareholderList: [],\r\n        finishedProductOptions: [],\r\n        allocationTypeandFrequencies: {},\r\n        UOMOptions: []\r\n    }\r\n}\r\n\r\nexport function ShareholderAllocationDetails({\r\n    allocation,\r\n    modAllocation,\r\n    modAllocationItems,\r\n    validationErrors,\r\n    onFieldChange,\r\n    listOptions,\r\n    handleCellDataEdit,\r\n    handleAddAssociation,\r\n    handleDeleteAssociation,\r\n    handleViewItems,\r\n    handleViewShipments,\r\n    selectedAssociations,\r\n    handleRowSelectionChange,\r\n    onDateTextChange,\r\n    expandedRows,\r\n    toggleExpand,\r\n    compartmentDetailsPageSize,\r\n    handleCompAttributeCellDataEdit,\r\n    allocationType\r\n}) {\r\n    const [t] = useTranslation();\r\n\r\n    const dateDisplayValues = (cellData) => {\r\n        const { value } = cellData;\r\n        return value !== null ? new Date(value).toLocaleDateString() : \"\";\r\n    };\r\n\r\n    const expanderTemplate = (data) => {\r\n        const open =\r\n            expandedRows.findIndex((x) => x.SeqNumber === data.rowData.SeqNumber) >= 0\r\n                ? true\r\n                : false;\r\n        return (\r\n            <div\r\n                onClick={() => toggleExpand(data.rowData, open)}\r\n                className=\"compartmentIcon gridButtonFontColor\"\r\n            >\r\n                <span>{open ? t(\"Hide_Attributes\") : t(\"View_Attributes\")}</span>\r\n                <Icon\r\n                    root=\"common\"\r\n                    name={open ? \"caret-up\" : \"caret-down\"}\r\n                    className=\"margin_l10\"\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const handleAttributeType = (data) => {\r\n        //;\r\n        const attribute = data.rowData;\r\n        const handleAttributeDateValue = (dateval) => {\r\n            var chars = dateval.split(\"-\");\r\n            return new Date(chars[0], chars[1] - 1, chars[2]);\r\n        };\r\n        const convertAttributeDatetoString = (attribute, value) => {\r\n            var Dateval = new Date(value);\r\n            value =\r\n                Dateval.getFullYear() +\r\n                \"-\" +\r\n                (\"0\" + (Dateval.getMonth() + 1)).slice(-2) +\r\n                \"-\" +\r\n                (\"0\" + Dateval.getDate()).slice(-2);\r\n            handleCompAttributeCellDataEdit(attribute, value);\r\n        };\r\n        try {\r\n            return attribute.DataType.toLowerCase() ===\r\n                Constants.DataType.STRING.toLowerCase() ? (\r\n                <Input\r\n                    fluid\r\n                    value={attribute.AttributeValue}\r\n                    disabled={attribute.IsReadonly}\r\n                    onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n                    reserveSpace={false}\r\n                />\r\n            ) : attribute.DataType.toLowerCase() ===\r\n                Constants.DataType.INT.toLowerCase() ? (\r\n                <Input\r\n                    fluid\r\n                    value={attribute.AttributeValue}\r\n                    disabled={attribute.IsReadonly}\r\n                    onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n                    reserveSpace={false}\r\n                />\r\n            ) : attribute.DataType.toLowerCase() ===\r\n                Constants.DataType.FLOAT.toLowerCase() ||\r\n                attribute.DataType.toLowerCase() ===\r\n                Constants.DataType.LONG.toLowerCase() ||\r\n                attribute.DataType.toLowerCase() ===\r\n                Constants.DataType.DOUBLE.toLowerCase() ? (\r\n                <Input\r\n                    fluid\r\n                    value={\r\n                        attribute.AttributeValue === null ||\r\n                            attribute.AttributeValue === undefined ||\r\n                            attribute.AttributeValue === \"\"\r\n                            ? \"\"\r\n                            : attribute.AttributeValue.toLocaleString()\r\n                    }\r\n                    disabled={attribute.IsReadonly}\r\n                    onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n                    reserveSpace={false}\r\n                />\r\n            ) : attribute.DataType.toLowerCase() ===\r\n                Constants.DataType.BOOL.toLowerCase() ? (\r\n                <Checkbox\r\n                    checked={\r\n                        attribute.AttributeValue.toString().toLowerCase() === \"true\"\r\n                            ? true\r\n                            : false\r\n                    }\r\n                    disabled={attribute.IsReadonly}\r\n                    onChange={(value) => handleCompAttributeCellDataEdit(data, value)}\r\n                ></Checkbox>\r\n            ) : attribute.DataType.toLowerCase() ===\r\n                Constants.DataType.DATETIME.toLowerCase() ? (\r\n                <DatePicker\r\n                    fluid\r\n                    value={\r\n                        attribute.AttributeValue === null ||\r\n                            attribute.AttributeValue === undefined ||\r\n                            attribute.AttributeValue === \"\"\r\n                            ? \"\"\r\n                            : handleAttributeDateValue(attribute.AttributeValue)\r\n                    }\r\n                    disabled={attribute.IsReadonly}\r\n                    showYearSelector=\"true\"\r\n                    onChange={(value) => convertAttributeDatetoString(data, value)}\r\n                    onTextChange={(value) => {\r\n                        convertAttributeDatetoString(data, value);\r\n                    }}\r\n                    reserveSpace={false}\r\n                />\r\n            ) : null;\r\n        } catch (error) {\r\n            console.log(\"ShareholderAllocationDetails:Error occured on handleAttributeType\", error);\r\n        }\r\n    };\r\n\r\n    const handleIsRequiredCompAttributes = (data) => {\r\n        return data.rowData.IsMandatory ? (\r\n            <div>\r\n                <span>{data.rowData.AttributeName}</span>\r\n                <div class=\"ui red circular empty label badge  circle-padding\" />\r\n            </div>\r\n        ) : (\r\n            <div>\r\n                <span>{data.rowData.AttributeName}</span>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    function rowExpansionTemplate(data) {\r\n        return Array.isArray(data.AttributesforUI) &&\r\n            data.AttributesforUI.length > 0 ? (\r\n            <div className=\"childTable ChildGridViewAllShipmentLoadingDetails\">\r\n                <DataTable\r\n                    data={data.AttributesforUI}\r\n                    rows={compartmentDetailsPageSize}\r\n                >\r\n                    <DataTable.Column\r\n                        className=\"compColHeight\"\r\n                        key=\"AttributeName\"\r\n                        header={t(\"CompartmentAttributeName\")}\r\n                        renderer={handleIsRequiredCompAttributes}\r\n                        editable={false}\r\n                    ></DataTable.Column>\r\n                    <DataTable.Column\r\n                        className=\"compColHeight\"\r\n                        header={t(\"CompartmentAttributeValue\")}\r\n                        renderer={handleAttributeType}\r\n                    />\r\n                    {Array.isArray(data.AttributesforUI) &&\r\n                        data.AttributesforUI.length > compartmentDetailsPageSize ? (\r\n                        <DataTable.Pagination />\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </DataTable>\r\n            </div>\r\n        ) : (\r\n            <div className=\"compartmentIcon\">\r\n                <div className=\"gridButtonAlignLeft\">\r\n                    {t(\"CustomerInventory_NoRecordsFound\")}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleCustomEditDateSelect = (cellData) => {\r\n        return (\r\n            <DatePicker\r\n                fluid\r\n                value={\r\n                    modAllocationItems[cellData.rowIndex][\r\n                        cellData.field\r\n                    ] === null\r\n                        ? \"\"\r\n                        : new Date(\r\n                            modAllocationItems[cellData.rowIndex][\r\n                            cellData.field\r\n                            ]\r\n                        )\r\n                }\r\n                type=\"date\"\r\n                displayFormat={getCurrentDateFormat()}\r\n                indicator=\"required\"\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                onTextChange={(value, error) => {\r\n                    onDateTextChange(cellData, value, error);\r\n                }}\r\n                reserveSpace={false}\r\n            ></DatePicker>\r\n        );\r\n    };\r\n\r\n    const decimalDisplayValues = (cellData) => {\r\n        const { value } = cellData;\r\n        if (typeof value === \"number\") {\r\n            return value.toLocaleString();\r\n        } else {\r\n            return value;\r\n        }\r\n    };\r\n\r\n    const handleAllocationTypesEditDropDown = (cellData) => {\r\n\r\n        let allocationTypeOptions = [];\r\n        if (\r\n            listOptions.allocationTypeandFrequencies !== undefined &&\r\n            listOptions.allocationTypeandFrequencies !== null\r\n        ) {\r\n            Object.keys(listOptions.allocationTypeandFrequencies).forEach((allocationType) =>\r\n                allocationTypeOptions.push({ text: allocationType, value: allocationType })\r\n            );\r\n        }\r\n        return handleCustomEditDropDown(cellData, allocationTypeOptions);\r\n    };\r\n    const handleAllocationFreqEditDropDown = (cellData) => {\r\n        let allocationFreqOptions = [];\r\n        if (\r\n            listOptions.allocationTypeandFrequencies !== undefined &&\r\n            listOptions.allocationTypeandFrequencies !== null\r\n        ) {\r\n            if (\r\n                listOptions.allocationTypeandFrequencies[\r\n                cellData.rowData.AllocationType\r\n                ] !== undefined &&\r\n                Array.isArray(\r\n                    listOptions.allocationTypeandFrequencies[cellData.rowData.AllocationType]\r\n                )\r\n            ) {\r\n                listOptions.allocationTypeandFrequencies[\r\n                    cellData.rowData.AllocationType\r\n                ].forEach((frequency) =>\r\n                    allocationFreqOptions.push({\r\n                        text: frequency.Code,\r\n                        value: frequency.Code\r\n                    })\r\n                );\r\n            }\r\n        }\r\n        return handleCustomEditDropDown(cellData, allocationFreqOptions);\r\n    };\r\n\r\n    const handleCustomEditDropDown = (cellData, dropDownoptions) => {\r\n        return (\r\n            cellData.field === \"Active\" && cellData.rowData.NewlyAdded ?\r\n                null :\r\n                <Select\r\n                    className=\"selectDropwdown\"\r\n                    value={modAllocationItems[cellData.rowIndex][cellData.field]}\r\n                    fluid\r\n                    options={dropDownoptions}\r\n                    onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                    indicator=\"required\"\r\n                    reserveSpace={false}\r\n                    search={true}\r\n                    noResultsMessage={t(\"noResultsMessage\")}\r\n                />\r\n        );\r\n    };\r\n\r\n    const handleCustomEditTextBox = (cellData) => {\r\n        return (\r\n            <Input\r\n                fluid\r\n                value={modAllocationItems[cellData.rowIndex][cellData.field] !== null\r\n                    && modAllocationItems[cellData.rowIndex][cellData.field] !== undefined\r\n                    ? modAllocationItems[cellData.rowIndex][cellData.field].toLocaleString()\r\n                    : modAllocationItems[cellData.rowIndex][cellData.field]}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n                disabled={cellData.field === \"BlockedQuantity\" || cellData.field === \"LoadedQuantity\"}\r\n            />\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n                {\r\n                    allocationType === Constants.AllocationEntityType.CUSTOMER ?\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"ShipmentCompDetail_CustomerCode\")}\r\n                                value={modAllocation.EntityCode}\r\n                                options={listOptions.customerOptions}\r\n                                indicator=\"required\"\r\n                                disabled={allocation.EntityCode !== \"\"}\r\n                                onChange={(data) => onFieldChange(\"EntityCode\", data)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                                error={t(validationErrors.EntityCode)}\r\n                            />\r\n                        </div>\r\n                        : allocationType === Constants.AllocationEntityType.CARRIERCOMPANY ?\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Select\r\n                                    fluid\r\n                                    placeholder={t(\"Common_Select\")}\r\n                                    label={t(\"ShipmentContractList_CarrierCompany\")}\r\n                                    value={modAllocation.EntityCode}\r\n                                    options={Utilities.transferListtoOptions(\r\n                                        listOptions.CarrierCompanyOptions\r\n                                    )}\r\n                                    indicator=\"required\"\r\n                                    disabled={allocation.EntityCode !== \"\"}\r\n                                    onChange={(data) => onFieldChange(\"EntityCode\", data)}\r\n                                    reserveSpace={false}\r\n                                    search={true}\r\n                                    noResultsMessage={t(\"noResultsMessage\")}\r\n                                    error={t(validationErrors.EntityCode)}\r\n                                />\r\n                            </div> :\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Select\r\n                                    fluid\r\n                                    placeholder={t(\"Common_Select\")}\r\n                                    label={t(\"ShipmentContractList_ShareHolder\")}\r\n                                    value={modAllocation.ShareholderCode}\r\n                                    options={Utilities.transferListtoOptions(\r\n                                        listOptions.ShareholderList\r\n                                    )}\r\n                                    indicator=\"required\"\r\n                                    disabled={allocation.ShareholderCode !== \"\"}\r\n                                    onChange={(data) => onFieldChange(\"ShareholderCode\", data)}\r\n                                    reserveSpace={false}\r\n                                    search={true}\r\n                                    noResultsMessage={t(\"noResultsMessage\")}\r\n                                    error={t(validationErrors.ShareholderCode)}\r\n                                />\r\n                            </div>\r\n                }\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={\r\n                            modAllocation.Description === null ? \"\" : modAllocation.Description\r\n                        }\r\n                        onChange={(data) => onFieldChange(\"Description\", data)}\r\n                        label={t(\"Supplier_Description\")}\r\n                        error={t(validationErrors.Description)}\r\n                        reserveSpace={false}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <div className=\"PAIconContainer\">\r\n                        <div onClick={handleViewItems} className=\"PAIcon\">\r\n                            {/* <div style={{ marginLeft: \"32%\" }}>\r\n                                <Icon root=\"common\" name=\"adjustments\" size=\"medium\" />\r\n                            </div> */}\r\n                            <div>\r\n                                <h5 className=\"font14\">{t(\"PA_ButViewDetail\")}</h5>\r\n                            </div>\r\n                        </div>\r\n                        <div onClick={handleViewShipments} className=\"PAIcon margin_l30\">\r\n                            {/* <div style={{ marginLeft: \"32%\" }}>\r\n                                <Icon root=\"common\" name=\"adjustments\" size=\"medium\" />\r\n                            </div> */}\r\n                            <div>\r\n                                <h5 className=\"font14\">{t(\"PA_ButShipmentViewDetail\")}</h5>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row compartmentRow\">\r\n                <div className=\"col col-md-8 col-lg-9 col col-xl-9\">\r\n                    {allocationType === Constants.AllocationEntityType.SHAREHOLDER\r\n                        ?\r\n                        <h4>{t(\"ShareholderAllocationInfo_Details\")}</h4>\r\n                        : <h4>{(t(\"ProductAllocationInfo_Details\"))}</h4>\r\n                    }\r\n                </div>\r\n                <div className=\"col col-md-4 col-lg-3 col-xl-3\">\r\n                    <div className=\"compartmentIconContainer\">\r\n                        <div onClick={handleAddAssociation} className=\"compartmentIcon\">\r\n                            <div>\r\n                                <Icon root=\"common\" name=\"badge-plus\" size=\"medium\" />\r\n                            </div>\r\n                            <div className=\"margin_l10\">\r\n                                <h5 className=\"font14\">{t(\"TrailerInfo_Add\")}</h5>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div\r\n                            onClick={handleDeleteAssociation}\r\n                            className=\"compartmentIcon margin_l30\"\r\n                        >\r\n                            <div>\r\n                                <Icon root=\"common\" name=\"delete\" size=\"medium\" />\r\n                            </div>\r\n                            <div className=\"margin_l10\">\r\n                                <h5 className=\"font14\">{t(\"TrailerInfo_Delete\")}</h5>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row marginRightZero tableScroll\">\r\n                <div className=\"col-12 detailsTable PAItems\">\r\n                    <DataTable\r\n                        data={modAllocationItems}\r\n                        scrollable={true}\r\n                        scrollHeight=\"320px\"\r\n                        selectionMode=\"multiple\"\r\n                        selection={selectedAssociations}\r\n                        onSelectionChange={handleRowSelectionChange}\r\n                        rowExpansionTemplate={rowExpansionTemplate}\r\n                        expandedRows={expandedRows}\r\n                    >\r\n                        <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"FinishedProductCode\"\r\n                            field=\"FinishedProductCode\"\r\n                            header={handleIsRequiredCompartmentCell(\r\n                                t(\"ContractInfo_Product\"))}\r\n                            editable={true}\r\n                            // rowHeader={true}\r\n                            editFieldType=\"text\"\r\n                            // renderer={handleCustomEditTextBox}\r\n                            customEditRenderer={(celldata) =>\r\n                                handleCustomEditDropDown(\r\n                                    celldata,\r\n                                    listOptions.finishedProductOptions\r\n                                )\r\n                            }\r\n                        ></DataTable.Column>\r\n\r\n                        <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"AllocationType\"\r\n                            field=\"AllocationType\"\r\n                            header={handleIsRequiredCompartmentCell(\r\n                                t(\"ProductAllocationItemInfo_AllocationType\"))}\r\n                            editable={true}\r\n                            // rowHeader={true}\r\n                            editFieldType=\"text\"\r\n                            // renderer={handleCustomEditTextBox}\r\n                            customEditRenderer={(celldata) =>\r\n                                handleAllocationTypesEditDropDown(\r\n                                    celldata\r\n                                )\r\n                            }\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"AllocationPeriod\"\r\n                            field=\"AllocationPeriod\"\r\n                            header={handleIsRequiredCompartmentCell(\r\n                                t(\"ProductAllocationItemInfo_AllocationFrequency\")\r\n                            )} //{t(\"Trailer_CompCapacity\")}\r\n                            editable={true}\r\n                            // rowHeader={true}\r\n                            editFieldType=\"text\"\r\n                            // renderer={handleCustomEditTextBox}\r\n                            customEditRenderer={(celldata) =>\r\n                                handleAllocationFreqEditDropDown(\r\n                                    celldata\r\n                                )\r\n                            }\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"StartDate\"\r\n                            field=\"StartDate\"\r\n                            header={handleIsRequiredCompartmentCell(t(\"ContractInfo_StartDate\"))}\r\n                            editable={true}\r\n                            // rowHeader={true}\r\n                            renderer={(cellData) => dateDisplayValues(cellData)}\r\n                            customEditRenderer={(cellData) =>\r\n                                handleCustomEditDateSelect(cellData)\r\n                            }\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"EndDate\"\r\n                            field=\"EndDate\"\r\n                            header={handleIsRequiredCompartmentCell(t(\"ContractInfo_EndDate\"))}\r\n                            editable={true}\r\n                            // rowHeader={true}\r\n                            renderer={(cellData) => dateDisplayValues(cellData)}\r\n                            customEditRenderer={(cellData) =>\r\n                                handleCustomEditDateSelect(cellData)\r\n                            }\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"Quantity\"\r\n                            field=\"Quantity\"\r\n                            header={handleIsRequiredCompartmentCell(t(\"ProductAllocationItemInfo_AllocatedQty\"))}\r\n                            editable={true}\r\n                            // rowHeader={true}\r\n                            editFieldType=\"text\"\r\n                            renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                            customEditRenderer={handleCustomEditTextBox}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight colminWidth disabledCell\"\r\n                            key=\"BlockedQuantity\"\r\n                            field=\"BlockedQuantity\"\r\n                            header={t(\"ProductAllocationItemInfo_BlockedQty\")}\r\n                            editable={false}\r\n                            // rowHeader={true}\r\n                            editFieldType=\"text\"\r\n                            renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight colminWidth disabledCell\"\r\n                            key=\"LoadedQuantity\"\r\n                            field=\"LoadedQuantity\"\r\n                            header={t(\"ProductAllocationItemInfo_LoadedQty\")}\r\n                            editable={false}\r\n                            // rowHeader={true}\r\n                            editFieldType=\"text\"\r\n                            renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight colminPAWidth\"\r\n                            key=\"QuantityUOM\"\r\n                            field=\"QuantityUOM\"\r\n                            header={handleIsRequiredCompartmentCell(t(\"ViewShipment_UOM\"))}\r\n                            editable={true}\r\n                            // rowHeader={true}\r\n                            editFieldType=\"text\"\r\n                            // renderer={handleCustomEditTextBox}\r\n                            customEditRenderer={(celldata) =>\r\n                                handleCustomEditDropDown(\r\n                                    celldata,\r\n                                    listOptions.UOMOptions\r\n                                )\r\n                            }\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight colminPAWidth\"\r\n                            key=\"Active\"\r\n                            field=\"Active\"\r\n                            header={t(\"ProductAllocationItemInfo_Active\")}\r\n                            editable={true}\r\n                            // rowHeader={true}\r\n                            editFieldType=\"text\"\r\n                            // renderer={handleCustomEditTextBox}\r\n                            customEditRenderer={(celldata) =>\r\n                                handleCustomEditDropDown(\r\n                                    celldata,\r\n                                    Constants.PAActiveStatuses\r\n                                )\r\n                            }\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"DeviationPercentOfQty\"\r\n                            field=\"DeviationPercentOfQty\"\r\n                            header={t(\"ProductAllocationItemInfo_Deviation\")}\r\n                            editable={true}\r\n                            // rowHeader={true}\r\n                            editFieldType=\"text\"\r\n                            renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                            customEditRenderer={handleCustomEditTextBox}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight colminWidth\"\r\n                            key=\"MinimumQuantity\"\r\n                            field=\"MinimumQuantity\"\r\n                            header={t(\"ProductAllocationItemInfo_MinimumQuantity\")}\r\n                            editable={true}\r\n                            // rowHeader={true}\r\n                            editFieldType=\"text\"\r\n                            renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                            customEditRenderer={handleCustomEditTextBox}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"expandedColumn\"\r\n                            initialWidth=\"150px\"\r\n                            renderer={expanderTemplate}\r\n                        />\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\n\r\nShareholderAllocationItemDetails.propTypes = {\r\n    allocationItemList: PropTypes.array.isRequired,\r\n    handleBack: PropTypes.func.isRequired,\r\n    pageSize: PropTypes.number,\r\n    allocationType: PropTypes.string.isRequired\r\n};\r\n\r\nShareholderAllocationItemDetails.defaultProps = {};\r\n\r\nexport function ShareholderAllocationItemDetails({\r\n    allocationItemList,\r\n    handleBack,\r\n    pageSize,\r\n    allocationType\r\n}) {\r\n\r\n    return (\r\n        <div>\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <div>\r\n                        <div className=\"detailsContainer\">\r\n                            <div id=\"printTable\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        <h3>\r\n                                            {allocationType\r\n                                                === Constants.AllocationEntityType.SHAREHOLDER ? t(\"ProductAllocationItemDetails_Shareholder_Header\")\r\n                                                : allocationType === Constants.AllocationEntityType.CUSTOMER ?\r\n                                                    t(\"ProductAllocationItemDetails_Customer_Header\") :\r\n                                                    t(\"ProductAllocationItemDetails_CarrierCompany_Header\")}\r\n                                        </h3>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row marginRightZero tableScroll\">\r\n                                    <div className=\"col-12 detailsTable \">\r\n                                        <DataTable\r\n                                            data={allocationItemList}\r\n                                            reorderableColumns={true}\r\n                                            resizableColumns={true}\r\n                                            search={true}\r\n                                            searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                                            rows={pageSize}\r\n                                        >\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"productcode\"\r\n                                                field=\"productcode\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_ProductCode\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"allocationtype\"\r\n                                                field=\"allocationtype\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_AllocationType\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"allocationperiod\"\r\n                                                field=\"allocationperiod\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_AllocationFrequency\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"startdate\"\r\n                                                field=\"startdate\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_StartDate\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"enddate\"\r\n                                                field=\"enddate\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_EndDate\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"allocatedqty\"\r\n                                                field=\"allocatedqty\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_AllocatedQuantity\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"blockedqty\"\r\n                                                field=\"blockedqty\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_BlockedQuantity\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"loadedqty\"\r\n                                                field=\"loadedqty\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_LoadedQuantity\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                        </DataTable>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 col-sm-6 col-lg-8\">\r\n                                    <Button\r\n                                        className=\"backButton\"\r\n                                        onClick={handleBack}\r\n                                        content={t(\"Back\")}\r\n                                    ></Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </TranslationConsumer>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\n\r\nShareholderAllocationShipmentDetails.propTypes = {\r\n    allocationShipmentList: PropTypes.array.isRequired,\r\n    handleBack: PropTypes.func.isRequired,\r\n    pageSize: PropTypes.number,\r\n    allocationType: PropTypes.string.isRequired\r\n};\r\n\r\nShareholderAllocationShipmentDetails.defaultProps = {};\r\n\r\nexport function ShareholderAllocationShipmentDetails({\r\n    allocationShipmentList,\r\n    handleBack,\r\n    pageSize,\r\n    allocationType\r\n}) {\r\n    return (\r\n        <div>\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <div>\r\n                        <div className=\"detailsContainer\">\r\n                            <div id=\"printTable\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        <h3>\r\n                                            {allocationType\r\n                                                === Constants.AllocationEntityType.SHAREHOLDER ? t(\"ProductAllocationShipmentItemDetails_Shareholder\")\r\n                                                : allocationType === Constants.AllocationEntityType.CUSTOMER ?\r\n                                                    t(\"ProductAllocationShipmentItemDetails_Customer\") :\r\n                                                    t(\"ProductAllocationShipmentItemDetails_Carrier\")}\r\n                                        </h3>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row marginRightZero tableScroll\">\r\n                                    <div className=\"col-12 detailsTable \">\r\n                                        <DataTable\r\n                                            data={allocationShipmentList}\r\n                                            reorderableColumns={true}\r\n                                            resizableColumns={true}\r\n                                            search={true}\r\n                                            searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                                            rows={pageSize}\r\n                                        >\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"shipmentcode\"\r\n                                                field=\"shipmentcode\"\r\n                                                header={t(\"ProductAllocationItemInfo_ShipmentCode\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"transportationType\"\r\n                                                field=\"transportationType\"\r\n                                                header={t(\"ProductAllocation_TransportationType\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"customercode\"\r\n                                                field=\"customercode\"\r\n                                                header={t(\"ProductAllocation_Customer_Code\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"productcode\"\r\n                                                field=\"productcode\"\r\n                                                header={t(\"ProductAllocation_Product_Code\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"allocationtype\"\r\n                                                field=\"allocationtype\"\r\n                                                header={t(\"ProductAllocation_Allocation_Type\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"allocationperiod\"\r\n                                                field=\"allocationperiod\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_AllocationFrequency\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"startdate\"\r\n                                                field=\"startdate\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_StartDate\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"enddate\"\r\n                                                field=\"enddate\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_EndDate\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"allocatedqty\"\r\n                                                field=\"allocatedqty\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_AllocatedQuantity\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"blockedqty\"\r\n                                                field=\"blockedqty\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_BlockedQuantity\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"loadedqty\"\r\n                                                field=\"loadedqty\"\r\n                                                header={t(\"MarineShipmentProductAllocationDetails_LoadedQuantity\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            //renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                        </DataTable>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 col-sm-6 col-lg-8\">\r\n                                    <Button\r\n                                        className=\"backButton\"\r\n                                        onClick={handleBack}\r\n                                        content={t(\"Back\")}\r\n                                    ></Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </TranslationConsumer>\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { ShareholderAllocationDetails } from \"../../UIBase/Details/ShareholderAllocationDetails\";\r\nimport { ShareholderAllocationItemDetails } from \"../../UIBase/Details/ShareholderAllocationItemDetails\";\r\nimport { ShareholderAllocationShipmentDetails } from \"../../UIBase/Details/ShareholderAllocationShipmentDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { emptyProductAllocation } from \"../../../JS/DefaultEntities\";\r\nimport { productAllocationEntityDef } from \"../../../JS/ValidationDef\";\r\nimport { productAllocationEntityItemsDef } from \"../../../JS/DetailsTableValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport { functionGroups, fnShareholderAllocation, fnProductAllocation } from \"../../../JS/FunctionGroups\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport {\r\n    productAllocationItemAttributeEntity\r\n} from \"../../../JS/AttributeEntity\";\r\nimport dayjs from \"dayjs\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass ShareholderAllocationDetailsComposite extends Component {\r\n    state = {\r\n        allocation: lodash.cloneDeep(emptyProductAllocation),\r\n        modAllocation: {},\r\n        validationErrors: Utilities.getInitialValidationErrors(\r\n            productAllocationEntityDef\r\n        ),\r\n        allocationItemsvalidationErrors: Utilities.getInitialValidationErrors(\r\n            productAllocationEntityItemsDef\r\n        ),\r\n        isReadyToRender: false,\r\n        saveEnabled: false,\r\n        allocationItemsList: [],\r\n        allocationShipmentItemsList: [],\r\n        selectedAssociations: [],\r\n        modAllocationItems: [],\r\n        finishedProductOptions: [],\r\n        UOMOptions: [],\r\n        allocationTypeandFrequencies: {},\r\n        showAllocationItems: false,\r\n        showAllocationShipments: false,\r\n        noOfSignificantDigits: \"3\",\r\n        expandedRows: [],\r\n        customerOptions: [],\r\n        CarrierCompanyOptions: [],\r\n        showAuthenticationLayout: false,\r\n        tempAllocation: {},\r\n    };\r\n\r\n    componentDidMount() {\r\n        try {\r\n            Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n            this.GetUOMList();\r\n            this.getProductAllocationTypesandFrequencies();\r\n            this.getAttributes(this.props.selectedRow);\r\n            if (this.props.allocationType === Constants.AllocationEntityType.CUSTOMER)\r\n                this.getCustomerList()\r\n\r\n            if (this.props.allocationType === Constants.AllocationEntityType.CARRIERCOMPANY)\r\n                this.getCarrierCompanies()\r\n\r\n            if (this.props.allocationType !== Constants.AllocationEntityType.SHAREHOLDER)\r\n                this.getFinishedProductCodes(this.props.selectedShareholder)\r\n\r\n        } catch (error) {\r\n            console.log(\r\n                \"ShareholderDetailsComposite:Error occured on componentDidMount\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    getCustomerList() {\r\n        axios(\r\n            RestAPIs.GetCustomerDestinations +\r\n            \"?TransportationType=\" +\r\n            \" \" +\r\n            \"&ShareholderCode=\" +\r\n            this.props.selectedShareholder,\r\n            Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n        ).then((response) => {\r\n            var result = response.data;\r\n            if (result.IsSuccess === true) {\r\n                if (Array.isArray(result.EntityResult)) {\r\n                    let shareholderCustomers = result.EntityResult.filter(\r\n                        (shareholderCust) =>\r\n                            shareholderCust.ShareholderCode === this.props.selectedShareholder\r\n                    );\r\n                    if (shareholderCustomers.length > 0) {\r\n                        let customerDestinationOptions =\r\n                            shareholderCustomers[0].CustomerDestinationsList;\r\n                        let customerOptions = [];\r\n                        if (customerDestinationOptions !== null) {\r\n                            customerOptions = Object.keys(customerDestinationOptions);\r\n                            customerOptions =\r\n                                Utilities.transferListtoOptions(customerOptions);\r\n                        }\r\n                        this.setState({ customerOptions });\r\n                    } else {\r\n                        console.log(\r\n                            \"ShareholderAllocationDetailsComposite:no customers identified for shareholder\"\r\n                        );\r\n                    }\r\n                } else {\r\n                    console.log(\r\n                        \"ShareholderAllocationDetailsComposite:customerdestinations not identified for shareholder\"\r\n                    );\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getCarrierCompanies() {\r\n        axios(\r\n            RestAPIs.GetAllCarrierListForRole +\r\n            \"?ShareholderCode=\" +\r\n            this.props.selectedShareholder,\r\n            Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    var list = result.EntityResult.Table2;\r\n                    var CarrierCompanies = [];\r\n                    list.forEach((item) => {\r\n                        CarrierCompanies.push(item.Code);\r\n                    });\r\n                    this.setState({\r\n                        CarrierCompanyOptions: CarrierCompanies,\r\n                    });\r\n                } else {\r\n                    console.log(\"Error in GetCarrierListForRole:\", result.ErrorList);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error while getting Carrier List:\", error);\r\n            });\r\n    }\r\n\r\n    getAttributes(shareholderRow) {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetAttributesMetaData,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    [productAllocationItemAttributeEntity],\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState(\r\n                        {\r\n                            compartmentAttributeMetaDataList: lodash.cloneDeep(\r\n                                result.EntityResult.PRODUCTALLOCATIONITEM\r\n                            ),\r\n                        },\r\n                        () => this.getShareholderAllocation(shareholderRow)\r\n                    );\r\n                } else {\r\n                    console.log(\"Failed to get Attributes\");\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(\"Error while getting Attributes:\", error);\r\n        }\r\n    }\r\n\r\n    formCompartmentAttributes(selectedTerminals) {\r\n        try {\r\n            let attributes = lodash.cloneDeep(\r\n                this.state.compartmentAttributeMetaDataList\r\n            );\r\n\r\n            attributes = attributes.filter(function (attTerminal) {\r\n                return selectedTerminals.some(function (selTerminal) {\r\n                    return attTerminal.TerminalCode === selTerminal;\r\n                });\r\n            });\r\n            let modAllocationItems = lodash.cloneDeep(this.state.modAllocationItems);\r\n\r\n            modAllocationItems.forEach((comp) => {\r\n                let compAttributes = [];\r\n                attributes.forEach((att) => {\r\n                    att.attributeMetaDataList.forEach((attribute) => {\r\n                        compAttributes.push({\r\n                            AttributeCode: attribute.Code,\r\n                            AttributeName: attribute.DisplayName,\r\n                            AttributeValue: attribute.DefaultValue,\r\n                            TerminalCode: attribute.TerminalCode,\r\n                            IsMandatory: attribute.IsMandatory,\r\n                            DataType: attribute.DataType,\r\n                            IsReadonly: attribute.IsReadonly,\r\n                            MinValue: attribute.MinValue,\r\n                            MaxValue: attribute.MaxValue,\r\n                            ValidationFormat: attribute.ValidationFormat,\r\n                            compSequenceNo: \"\",\r\n                        });\r\n                    });\r\n                });\r\n                let attributesforNewComp = lodash.cloneDeep(compAttributes);\r\n\r\n                if (\r\n                    comp.Code === null &&\r\n                    (comp.AttributesforUI === null || comp.AttributesforUI === undefined)\r\n                ) {\r\n                    comp.AttributesforUI = [];\r\n                    attributesforNewComp.forEach((assignedAttributes) => {\r\n                        assignedAttributes.compSequenceNo = comp.CompartmentSeqNoInTrailer;\r\n                        comp.AttributesforUI.push(assignedAttributes);\r\n                    });\r\n                } else {\r\n                    if (\r\n                        comp.AttributesforUI !== null &&\r\n                        comp.AttributesforUI !== undefined\r\n                    ) {\r\n                        comp.AttributesforUI = comp.AttributesforUI.filter(function (\r\n                            attTerminal\r\n                        ) {\r\n                            return selectedTerminals.some(function (selTerminal) {\r\n                                return attTerminal.TerminalCode === selTerminal;\r\n                            });\r\n                        });\r\n\r\n                        compAttributes = compAttributes.filter(function (attTerminal) {\r\n                            return !comp.AttributesforUI.some(function (selTerminal) {\r\n                                return attTerminal.TerminalCode === selTerminal.TerminalCode;\r\n                            });\r\n                        });\r\n                    } else comp.AttributesforUI = [];\r\n\r\n                    let tempCompAttributes = lodash.cloneDeep(compAttributes);\r\n                    if (\r\n                        Array.isArray(comp.Attributes) &&\r\n                        comp.Attributes !== null &&\r\n                        comp.Attributes !== undefined &&\r\n                        comp.Attributes.length > 0\r\n                    ) {\r\n                        let selectedTerminalAttributes = comp.Attributes.filter(function (\r\n                            attTerminal\r\n                        ) {\r\n                            return selectedTerminals.some(function (selTerminal) {\r\n                                return attTerminal.TerminalCode === selTerminal;\r\n                            });\r\n                        });\r\n                        selectedTerminalAttributes.forEach((att) => {\r\n                            att.ListOfAttributeData.forEach((attData) => {\r\n                                let tempAttIndex = tempCompAttributes.findIndex(\r\n                                    (item) =>\r\n                                        item.TerminalCode === att.TerminalCode &&\r\n                                        item.AttributeCode === attData.AttributeCode\r\n                                );\r\n                                if (tempAttIndex >= 0)\r\n                                    tempCompAttributes[tempAttIndex].AttributeValue =\r\n                                        attData.AttributeValue;\r\n                            });\r\n                        });\r\n                        tempCompAttributes.forEach((assignedAttributes) => {\r\n                            assignedAttributes.compSequenceNo =\r\n                                comp.SeqNumber;\r\n                            comp.AttributesforUI.push(assignedAttributes);\r\n                        });\r\n                    } else {\r\n                        compAttributes.forEach((assignedAttributes) => {\r\n                            assignedAttributes.compSequenceNo =\r\n                                comp.SeqNumber;\r\n                            comp.AttributesforUI.push(assignedAttributes);\r\n                        });\r\n                    }\r\n                }\r\n                this.toggleExpand(comp, true, true);\r\n                if (comp.AttributesforUI !== undefined && comp.AttributesforUI != null)\r\n                    comp.AttributesforUI = Utilities.compartmentAttributesConvertoDecimal(\r\n                        comp.AttributesforUI\r\n                    );\r\n                comp.AttributesforUI = Utilities.addSeqNumberToListObject(comp.AttributesforUI);\r\n            });\r\n            this.setState({ modAllocationItems });\r\n        } catch (error) {\r\n            console.log(\r\n                \"ShareholderAllocationDetailsComposite:Error in forming Compartment Attributes\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    fillAttributeDetails(modAllocation) {\r\n        try {\r\n            // For Compartment Attributes\r\n            modAllocation.ProductAllocationEntityItems.forEach((comp) => {\r\n                if (comp.AttributesforUI !== undefined && comp.AttributesforUI != null)\r\n                    comp.AttributesforUI =\r\n                        Utilities.compartmentAttributesDatatypeConversion(\r\n                            comp.AttributesforUI\r\n                        );\r\n                let selectedTerminals = [];\r\n\r\n                var compAttributeMetaDataList = lodash.cloneDeep(\r\n                    this.state.compartmentAttributeMetaDataList\r\n                );\r\n                if (compAttributeMetaDataList.length > 0)\r\n                    selectedTerminals = [compAttributeMetaDataList[0].TerminalCode];\r\n\r\n                let terminalAttributes = [];\r\n                comp.Attributes = [];\r\n                selectedTerminals.forEach((terminal) => {\r\n                    if (\r\n                        comp.AttributesforUI !== null &&\r\n                        comp.AttributesforUI !== undefined\r\n                    )\r\n                        terminalAttributes = comp.AttributesforUI.filter(function (\r\n                            attTerminal\r\n                        ) {\r\n                            return attTerminal.TerminalCode === terminal;\r\n                        });\r\n\r\n                    let attribute = {\r\n                        ListOfAttributeData: [],\r\n                    };\r\n\r\n                    attribute.TerminalCode = terminal;\r\n                    terminalAttributes.forEach((termAtt) => {\r\n                        if (termAtt.AttributeValue !== \"\" || termAtt.IsMandatory === true)\r\n                            attribute.ListOfAttributeData.push({\r\n                                AttributeCode: termAtt.AttributeCode,\r\n                                AttributeValue: termAtt.AttributeValue,\r\n                            });\r\n                        //})\r\n                        //comp.Attributes.push(attribute);\r\n                    });\r\n                    if (\r\n                        attribute.ListOfAttributeData !== null &&\r\n                        attribute.ListOfAttributeData !== undefined &&\r\n                        attribute.ListOfAttributeData.length > 0\r\n                    )\r\n                        comp.Attributes.push(attribute);\r\n                });\r\n            });\r\n            return modAllocation;\r\n        } catch (error) {\r\n            console.log(\r\n                \"ShareholderAllocationDetailsComposite:Error occured on fillAttributeDetails\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        try {\r\n            if (\r\n                this.state.allocation.ShareholderCode !== \"\" &&\r\n                nextProps.selectedRow.Common_Code === undefined\r\n            ) {\r\n                this.getShareholderAllocation(nextProps.selectedRow);\r\n                let validationErrors = { ...this.state.validationErrors };\r\n                Object.keys(validationErrors).forEach((key) => {\r\n                    validationErrors[key] = \"\";\r\n                });\r\n                let allocationItemsvalidationErrors = { ...this.state.allocationItemsvalidationErrors }\r\n                Object.keys(allocationItemsvalidationErrors).forEach((key) => {\r\n                    allocationItemsvalidationErrors[key] = \"\";\r\n                });\r\n                this.setState({\r\n                    validationErrors,\r\n                    allocationItemsvalidationErrors\r\n                });\r\n                // this.getPipelineDispatch(nextProps.selectedRow);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(\r\n                \"PipelineDispatchDetailsComposite:Error occured on componentWillReceiveProps\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    getProductAllocationTypesandFrequencies() {\r\n        axios(\r\n            RestAPIs.GetAllocationTypes,\r\n            Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n\r\n                if (result.IsSuccess === true) {\r\n                    if (result.EntityResult !== null) {\r\n                        let allocationTypeandFrequencies = {}\r\n                        if (Array.isArray(result.EntityResult.Table) &&\r\n                            Array.isArray(result.EntityResult.Table1)) {\r\n                            result.EntityResult.Table.forEach((key) => {\r\n                                allocationTypeandFrequencies[key.Code] =\r\n                                    result.EntityResult.Table1.filter((item) => {\r\n                                        return item.AllocationType === key.Code\r\n                                    })\r\n                            })\r\n                        }\r\n\r\n                        this.setState({ allocationTypeandFrequencies })\r\n                    }\r\n                } else {\r\n                    console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error while getting GetUOMList:\", error);\r\n            });\r\n    }\r\n\r\n    GetUOMList() {\r\n        axios(\r\n            RestAPIs.GetUOMList,\r\n            Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n\r\n                if (result.IsSuccess === true) {\r\n                    if (result.EntityResult !== null) {\r\n                        let UOMOptions = [];\r\n                        if (Array.isArray(result.EntityResult.VOLUME)) {\r\n                            UOMOptions = Utilities.transferListtoOptions(\r\n                                result.EntityResult.VOLUME\r\n                            );\r\n                        }\r\n                        if (Array.isArray(result.EntityResult.MASS)) {\r\n                            let massUOMOptions = Utilities.transferListtoOptions(\r\n                                result.EntityResult.MASS\r\n                            );\r\n                            massUOMOptions.forEach((massUOM) =>\r\n                                UOMOptions.push(massUOM)\r\n                            );\r\n                        }\r\n\r\n                        this.setState({ UOMOptions });\r\n                    }\r\n                } else {\r\n                    console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error while getting GetUOMList:\", error);\r\n            });\r\n    }\r\n\r\n    handleChange = (propertyName, data) => {\r\n        try {\r\n\r\n            const modAllocation = lodash.cloneDeep(this.state.modAllocation);\r\n            modAllocation[propertyName] = data;\r\n            this.setState({ modAllocation });\r\n            if (productAllocationEntityDef[propertyName] !== undefined) {\r\n                var validationErrors = { ...this.state.validationErrors };\r\n                validationErrors[propertyName] = Utilities.validateField(\r\n                    productAllocationEntityDef[propertyName],\r\n                    data\r\n                );\r\n                this.setState({ validationErrors });\r\n            }\r\n            if (propertyName === \"ShareholderCode\") {\r\n                this.getFinishedProductCodes(data)\r\n                this.getShareholderAllocation({ Common_Code: data })\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(\r\n                \"ShareholderAllocationDetailsComposite:Error occured on handleChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    handleReset = () => {\r\n        try {\r\n            let modAllocationItems = []\r\n            if (Array.isArray(\r\n                this.state.allocation.ProductAllocationEntityItems\r\n            )) {\r\n                modAllocationItems = Utilities.addSeqNumberToListObject(\r\n                    lodash.cloneDeep(this.state.allocation.ProductAllocationEntityItems)\r\n                )\r\n                modAllocationItems.forEach((item) => {\r\n                    item.Active = item.Active === true ? \"Active\" : \"Inactive\"\r\n                })\r\n            }\r\n\r\n            this.setState(\r\n                {\r\n                    modAllocation: lodash.cloneDeep(this.state.allocation),\r\n                    modAllocationItems: modAllocationItems,\r\n                    validationErrors: Utilities.getInitialValidationErrors(\r\n                        productAllocationEntityDef\r\n                    ),\r\n                    allocationItemsvalidationErrors: Utilities.getInitialValidationErrors(\r\n                        productAllocationEntityItemsDef\r\n                    ),\r\n                }\r\n            );\r\n        } catch (error) {\r\n            console.log(\r\n                \"ShareholderAllocationDetailsComposite:Error occured on handleReset\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    validateSave(modAllocation) {\r\n        const validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(productAllocationEntityDef).forEach(function (key) {\r\n            if (modAllocation[key] !== undefined)\r\n                validationErrors[key] = Utilities.validateField(\r\n                    productAllocationEntityDef[key],\r\n                    modAllocation[key]\r\n                );\r\n        });\r\n\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"ShareholderAllocation_SavedStatus\",\r\n            messageResultDetails: [],\r\n        };\r\n\r\n        var returnValue = true;\r\n        if (returnValue)\r\n            returnValue = Object.values(validationErrors).every(function (value) {\r\n                return value === \"\";\r\n            });\r\n\r\n        this.setState({\r\n            validationErrors\r\n        })\r\n\r\n        if (\r\n            Array.isArray(modAllocation.ProductAllocationEntityItems) &&\r\n            modAllocation.ProductAllocationEntityItems.length > 0\r\n        ) {\r\n            let isUnique = true;\r\n\r\n            modAllocation.ProductAllocationEntityItems.forEach((association) => {\r\n                if (isUnique) {\r\n                    let year = new Date(association.StartDate).getFullYear()\r\n                    if (year.toString().length !== 4) {\r\n                        isUnique = false;\r\n                        notification.messageResultDetails.push({\r\n                            keyFields: [\"ContractInfo_Product\", \"ExchangeAgreementDetails_StartDate\"],\r\n                            keyValues: [association.FinishedProductCode, association.StartDate],\r\n                            isSuccess: false,\r\n                            errorMessage: \"Common_InvalidDate\",\r\n                        });\r\n                    }\r\n\r\n                    year = new Date(association.EndDate).getFullYear()\r\n                    if (year.toString().length !== 4) {\r\n                        isUnique = false;\r\n                        notification.messageResultDetails.push({\r\n                            keyFields: [\"ContractInfo_Product\", \"ContractInfo_EndDate\"],\r\n                            keyValues: [association.FinishedProductCode, association.EndDate],\r\n                            isSuccess: false,\r\n                            errorMessage: \"Common_InvalidDate\",\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (isUnique) {\r\n\r\n                    let itemList = modAllocation.ProductAllocationEntityItems.filter((item) => {\r\n                        return item.SeqNumber !== association.SeqNumber &&\r\n                            item.FinishedProductCode === association.FinishedProductCode\r\n                    })\r\n\r\n                    if (itemList.length > 0) {\r\n                        itemList.forEach((item) => {\r\n                            if ((association.StartDate >= item.StartDate && association.StartDate <= item.EndDate) ||\r\n                                (association.EndDate >= item.StartDate && association.EndDate <= item.EndDate)) {\r\n                                isUnique = false;\r\n                                notification.messageResultDetails.push({\r\n                                    keyFields: [],\r\n                                    keyValues: [],\r\n                                    isSuccess: false,\r\n                                    errorMessage: \"ErrMsg_PAItem_SameItem_DateOverLap\",\r\n                                });\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    if (isUnique) {\r\n\r\n\r\n\r\n                        productAllocationEntityItemsDef.forEach((col) => {\r\n                            let err = \"\";\r\n\r\n                            if (col.validator !== undefined) {\r\n                                err = Utilities.validateField(\r\n                                    col.validator,\r\n                                    association[col.field]\r\n                                );\r\n                            }\r\n                            if (err !== \"\") {\r\n                                notification.messageResultDetails.push({\r\n                                    keyFields: [\"ContractInfo_Product\", col.displayName],\r\n                                    keyValues: [\r\n                                        association.FinishedProductCode,\r\n                                        association[col.field],\r\n                                    ],\r\n                                    isSuccess: false,\r\n                                    errorMessage: err,\r\n                                });\r\n                            }\r\n                        });\r\n\r\n                        if (association.AttributesforUI !== null\r\n                            && association.AttributesforUI !== undefined) {\r\n                            association.AttributesforUI.forEach((item) => {\r\n                                let errMsg = Utilities.valiateAttributeField(\r\n                                    item,\r\n                                    item.AttributeValue\r\n                                );\r\n                                if (errMsg !== \"\") {\r\n                                    notification.messageResultDetails.push({\r\n                                        keyFields: [item.AttributeName],\r\n                                        keyValues: [item.AttributeValue],\r\n                                        isSuccess: false,\r\n                                        errorMessage: errMsg,\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                this.toggleExpand(association, true, true);\r\n            });\r\n        } else {\r\n            notification.messageResultDetails.push({\r\n                keyFields: [\"Report_Shareholder\"],\r\n                keyValues: [modAllocation.ShareholderCode],\r\n                isSuccess: false,\r\n                errorMessage: \"ERRMSG_PA_NOITEMS\",\r\n            });\r\n        }\r\n        if (notification.messageResultDetails.length > 0) {\r\n            this.props.onSaved(this.state.modAllocation, \"update\", notification);\r\n            return false;\r\n        }\r\n        return returnValue;\r\n    }\r\n\r\n    fillDetails(modAllocation, modAllocationItems) {\r\n        try {\r\n            modAllocation.EntityCode =\r\n                this.props.allocationType !== Constants.AllocationEntityType.SHAREHOLDER\r\n                    ? modAllocation.EntityCode : modAllocation.ShareholderCode;\r\n            modAllocation.ShareholderCode =\r\n                this.props.allocationType !== Constants.AllocationEntityType.SHAREHOLDER\r\n                    ? this.props.selectedShareholder\r\n                    : modAllocation.ShareholderCode;\r\n            modAllocation.EntityType = this.props.allocationType\r\n            modAllocation.Source = \"TM_UI\"\r\n\r\n            let allocationItems = []\r\n            if (Array.isArray(modAllocationItems) && modAllocationItems.length > 0) {\r\n                modAllocationItems.forEach((paItem) => {\r\n                    let selectedAssociations = lodash.cloneDeep(this.state.selectedAssociations)\r\n                    let index = selectedAssociations.findIndex((item) => {\r\n                        return item.SeqNumber === paItem.SeqNumber\r\n                    })\r\n                    if ((paItem.FinishedProductCode !== null\r\n                        && paItem.FinishedProductCode !== undefined\r\n                        && paItem.FinishedProductCode !== \"\") || index >= 0) {\r\n                        paItem.ShareholderCode = modAllocation.ShareholderCode\r\n\r\n                        //Get start date and end date\r\n                        paItem.StartDate = dayjs(paItem.StartDate).format(\"YYYY-MM-DD\");\r\n                        paItem.EndDate = dayjs(paItem.EndDate).format(\"YYYY-MM-DD\");\r\n\r\n                        paItem.Quantity = paItem.Quantity !== null &&\r\n                            paItem.Quantity !== \"\"\r\n                            ? Utilities.convertStringtoDecimal(paItem.Quantity)\r\n                            : null\r\n\r\n                        //Get the Deviation\r\n                        paItem.DeviationPercentOfQty = paItem.DeviationPercentOfQty !== null &&\r\n                            paItem.DeviationPercentOfQty !== \"\"\r\n                            ? Utilities.convertStringtoDecimal(paItem.DeviationPercentOfQty)\r\n                            : null\r\n\r\n                        //Get the Minimum quantity\r\n                        paItem.MinimumQuantity = paItem.MinimumQuantity !== null &&\r\n                            paItem.MinimumQuantity !== \"\"\r\n                            ? Utilities.convertStringtoDecimal(paItem.MinimumQuantity)\r\n                            : null\r\n\r\n                        paItem.Active = paItem.Active === null || paItem.Active === \"Active\" ? true : false\r\n\r\n                        if (\r\n                            paItem.AttributesforUI !== undefined &&\r\n                            paItem.AttributesforUI != null\r\n                        )\r\n                            paItem.AttributesforUI =\r\n                                Utilities.compartmentAttributesConverttoLocaleString(\r\n                                    paItem.AttributesforUI\r\n                                );\r\n\r\n                        allocationItems.push(paItem);\r\n\r\n                    }\r\n                })\r\n            }\r\n\r\n            modAllocation.ProductAllocationEntityItems = allocationItems\r\n\r\n            return modAllocation;\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in fillDetails\", error)\r\n            return modAllocation;\r\n        }\r\n    }\r\n\r\n    createAllocation(modAllocation) {\r\n        this.handleAuthenticationClose();\r\n        let keyCode = [\r\n            {\r\n                key: KeyCodes.entityCode,\r\n                value: this.props.allocationType\r\n                    === Constants.AllocationEntityType.SHAREHOLDER ?\r\n                    modAllocation.ShareholderCode\r\n                    : modAllocation.EntityCode,\r\n            },\r\n        ];\r\n\r\n        let obj = {\r\n            keyDataCode: KeyCodes.entityCode,\r\n            KeyCodes: keyCode,\r\n            Entity: modAllocation,\r\n        };\r\n\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: this.props.allocationType === Constants.AllocationEntityType.SHAREHOLDER ?\r\n                \"ShareholderAllocation_SavedStatus\" : \"ProductAllocation_SavedStatus\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [this.props.allocationType\r\n                        === Constants.AllocationEntityType.SHAREHOLDER ?\r\n                        \"Report_Shareholder\" :\r\n                        this.props.allocationType\r\n                            === Constants.AllocationEntityType.CUSTOMER ?\r\n                            \"ContractInfo_Customer\" : \"productAllocation_Carrier\"],\r\n                    keyValues: [modAllocation.EntityCode],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n        axios(\r\n            RestAPIs.CreateShareholderAllocation,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                let result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState(\r\n                        {\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnShareholderAllocation\r\n                            ),\r\n                        },\r\n                        () => this.getShareholderAllocation({\r\n                            Common_Code: modAllocation.EntityCode\r\n                        })\r\n                    );\r\n                } else {\r\n                    notification.messageResultDetails[0].errorMessage =\r\n                        result.ErrorList[0];\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnShareholderAllocation\r\n                        ),\r\n                    });\r\n                    console.log(\"Error in CreateShareholderAllocation:\", result.ErrorList);\r\n                }\r\n                // console.log(notification);\r\n                this.props.onSaved(modAllocation, \"add\", notification);\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnShareholderAllocation\r\n                    ),\r\n                });\r\n                notification.messageResultDetails[0].errorMessage = error;\r\n                this.props.onSaved(modAllocation, \"add\", notification);\r\n            });\r\n    }\r\n\r\n    updateAllocation(modAllocation) {\r\n        this.handleAuthenticationClose();\r\n        let keyCode = [\r\n            {\r\n                key: KeyCodes.entityCode,\r\n                value: modAllocation.EntityCode,\r\n            },\r\n        ];\r\n\r\n        let obj = {\r\n            keyDataCode: KeyCodes.entityCode,\r\n            KeyCodes: keyCode,\r\n            Entity: modAllocation,\r\n        };\r\n\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: this.props.allocationType === Constants.AllocationEntityType.SHAREHOLDER ?\r\n                \"ShareholderAllocation_SavedStatus\" : \"ProductAllocation_SavedStatus\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [this.props.allocationType\r\n                        === Constants.AllocationEntityType.SHAREHOLDER ?\r\n                        \"Report_Shareholder\" :\r\n                        this.props.allocationType\r\n                            === Constants.AllocationEntityType.CUSTOMER ?\r\n                            \"ContractInfo_Customer\" : \"productAllocation_Carrier\"],\r\n                    keyValues: [modAllocation.EntityCode],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n        axios(\r\n            RestAPIs.UpdateShareholderAllocation,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                let result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState(\r\n                        {\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnShareholderAllocation\r\n                            ),\r\n                        },\r\n                        () => this.getShareholderAllocation({ Common_Code: modAllocation.EntityCode })\r\n                    );\r\n                } else {\r\n                    notification.messageResultDetails[0].errorMessage =\r\n                        result.ErrorList[0];\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnShareholderAllocation\r\n                        ),\r\n                    });\r\n                    console.log(\"Error in UpdateShareholderAllocation:\", result.ErrorList);\r\n                }\r\n                // console.log(notification);\r\n                this.props.onSaved(modAllocation, \"add\", notification);\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnShareholderAllocation\r\n                    ),\r\n                });\r\n                notification.messageResultDetails[0].errorMessage = error;\r\n                this.props.onSaved(modAllocation, \"update\", notification);\r\n            });\r\n    }\r\n\r\n    saveAllocation = () => {\r\n        try {\r\n          this.setState({ saveEnabled: false });\r\n          let tempAllocation = lodash.cloneDeep(this.state.tempAllocation);\r\n    \r\n          this.state.allocation.ShareholderCode === \"\"\r\n                    ? this.createAllocation(tempAllocation)\r\n                    : this.updateAllocation(tempAllocation);\r\n    \r\n        } catch (error) {\r\n          console.log(\"Save Allocation  Composite : Error in save Allocation\");\r\n        }\r\n      };\r\n\r\n    handleSave = () => {\r\n        try {\r\n            let modAllocation = lodash.cloneDeep(this.state.modAllocation);\r\n            let modAllocationItems = lodash.cloneDeep(this.state.modAllocationItems);\r\n\r\n            modAllocation = this.fillDetails(modAllocation, modAllocationItems)\r\n\r\n          //  this.setState({ saveEnabled: false });\r\n\r\n            if (this.validateSave(modAllocation)) {\r\n                modAllocation = this.fillAttributeDetails(modAllocation);\r\n                \r\n                let showAuthenticationLayout =\r\n                this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n                  ? true\r\n                  : false;\r\n              let tempAllocation = lodash.cloneDeep(modAllocation);\r\n              this.setState({ showAuthenticationLayout, tempAllocation }, () => {\r\n                if (showAuthenticationLayout === false) {\r\n                  this.saveAllocation();\r\n                }\r\n            });\r\n\r\n\r\n            } else {\r\n                this.setState({ saveEnabled: true });\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"ShareholderAllocationDetailsComposite:Error occured on handleSave\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    getShareholderAllocation(shareholderRow) {\r\n\r\n        if (shareholderRow.Common_Code === undefined) {\r\n            this.setState(\r\n                {\r\n                    allocation: lodash.cloneDeep(emptyProductAllocation),\r\n                    modAllocation: lodash.cloneDeep(emptyProductAllocation),\r\n                    modAllocationItems: [],\r\n                    isReadyToRender: true,\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnShareholderAllocation\r\n                    )\r\n                }, () => {\r\n                    var compAttributeMetaDataList = lodash.cloneDeep(\r\n                        this.state.compartmentAttributeMetaDataList\r\n                    );\r\n                    if (Array.isArray(compAttributeMetaDataList) && compAttributeMetaDataList.length > 0)\r\n                        this.formCompartmentAttributes([\r\n                            compAttributeMetaDataList[0].TerminalCode,\r\n                        ]);\r\n                }\r\n            );\r\n            return;\r\n        }\r\n\r\n        var keyCode = [\r\n            {\r\n                key: KeyCodes.entityCode,\r\n                value: shareholderRow.Common_Code,\r\n            },\r\n            {\r\n                key: KeyCodes.entityType,\r\n                value: this.props.allocationType,\r\n            },\r\n        ];\r\n        var obj = {\r\n            ShareHolderCode: this.props.allocationType\r\n                === Constants.AllocationEntityType.SHAREHOLDER ?\r\n                shareholderRow.Common_Code : this.props.selectedShareholder,\r\n            keyDataCode: KeyCodes.shareholderCode,\r\n            KeyCodes: keyCode,\r\n        };\r\n        axios(\r\n            RestAPIs.GetShareholderAllocation,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    let modAllocationItems = lodash.cloneDeep(result.EntityResult.ProductAllocationEntityItems)\r\n\r\n                    modAllocationItems = Utilities.addSeqNumberToListObject(modAllocationItems);\r\n\r\n                    modAllocationItems.forEach((item) => {\r\n                        item.Active = item.Active === true ? \"Active\" : \"Inactive\"\r\n                    })\r\n\r\n                    this.setState(\r\n                        {\r\n                            isReadyToRender: true,\r\n                            allocation: lodash.cloneDeep(result.EntityResult),\r\n                            modAllocation: lodash.cloneDeep(result.EntityResult),\r\n                            modAllocationItems: modAllocationItems,\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnShareholderAllocation\r\n                            ),\r\n                        }, () => {\r\n                            var compAttributeMetaDataList = lodash.cloneDeep(\r\n                                this.state.compartmentAttributeMetaDataList\r\n                            );\r\n                            if (Array.isArray(compAttributeMetaDataList) && compAttributeMetaDataList.length > 0)\r\n                                this.formCompartmentAttributes([\r\n                                    compAttributeMetaDataList[0].TerminalCode,\r\n                                ]);\r\n                            this.getFinishedProductCodes(result.EntityResult.ShareholderCode)\r\n                        }\r\n                    );\r\n                    this.props.onSaved(result.EntityResult, \"add\", null);\r\n                } else {\r\n                    this.setState({\r\n                        isReadyToRender: true,\r\n                        allocation: lodash.cloneDeep(emptyProductAllocation),\r\n                        modAllocationItems: [],\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnShareholderAllocation\r\n                        )\r\n                    }, () => {\r\n                        var compAttributeMetaDataList = lodash.cloneDeep(\r\n                            this.state.compartmentAttributeMetaDataList\r\n                        );\r\n                        if (Array.isArray(compAttributeMetaDataList) && compAttributeMetaDataList.length > 0)\r\n                            this.formCompartmentAttributes([\r\n                                compAttributeMetaDataList[0].TerminalCode,\r\n                            ]);\r\n                    });\r\n                    console.log(\"Error in getShareholder:\", result.ErrorList);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error while getShareholder:\", error, shareholderRow);\r\n            });\r\n    }\r\n\r\n    handleAddAssociation = () => {\r\n        if (\r\n            !this.props.userDetails.EntityResult.IsArchived\r\n        ) {\r\n            try {\r\n\r\n                let modAllocationItems = lodash.cloneDeep(this.state.modAllocationItems);\r\n                let newComp = {\r\n                    CreatedTime: null,\r\n                    LastActiveTime: null,\r\n                    Remarks: \"\",\r\n                    Active: null,\r\n                    DeviationPercentOfQty: null,\r\n                    QuantityUOM: null,\r\n                    LoadedQuantity: null,\r\n                    MinimumQuantity: null,\r\n                    BlockedQuantity: null,\r\n                    Quantity: null,\r\n                    EndDate: new Date(),\r\n                    StartDate: new Date(),\r\n                    AllocationPeriod: \"\",\r\n                    AllocationType: null,\r\n                    FinishedProductCode: null,\r\n                    ShareholderCode: \"\",\r\n                    LastUpdatedTime: new Date(),\r\n                    Attributes: [],\r\n                    NewlyAdded: true\r\n                };\r\n                newComp.SeqNumber =\r\n                    Utilities.getMaxSeqNumberfromListObject(modAllocationItems);\r\n                modAllocationItems.push(newComp);\r\n                this.setState(\r\n                    {\r\n                        modAllocationItems,\r\n                        selectedAssociations: [],\r\n                    }, () => {\r\n                        var attributeMetaDataList = lodash.cloneDeep(\r\n                            this.state.compartmentAttributeMetaDataList\r\n                        );\r\n                        if (attributeMetaDataList.length > 0)\r\n                            this.formCompartmentAttributes([\r\n                                attributeMetaDataList[0].TerminalCode,\r\n                            ]);\r\n                    }\r\n                );\r\n            } catch (error) {\r\n                console.log(\r\n                    \"TruckReceiptDetailsComposite:Error occured on handleAddCompartment\",\r\n                    error\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    toggleExpand = (data, open, isTerminalAdded = false) => {\r\n        //console.log(\"Data in Toggle\", data)\r\n        let expandedRows = this.state.expandedRows;\r\n        let expandedRowIndex = expandedRows.findIndex(\r\n            (item) => item.SeqNumber === data.SeqNumber\r\n        );\r\n        if (open) {\r\n            if (isTerminalAdded && expandedRowIndex >= 0) {\r\n                expandedRows.splice(expandedRowIndex, 1);\r\n                expandedRows.push(data);\r\n            } else if (expandedRowIndex >= 0) {\r\n                expandedRows.splice(expandedRowIndex, 1);\r\n            }\r\n        } else {\r\n            if (expandedRowIndex >= 0) {\r\n                expandedRows = expandedRows.filter(\r\n                    (x) => x.Code !== data.Code && x.SeqNumber !== data.SeqNumber\r\n                );\r\n            } else expandedRows.push(data);\r\n        }\r\n        this.setState({ expandedRows });\r\n    };\r\n\r\n    handleDeleteAssociation = () => {\r\n        if (!this.props.userDetails.EntityResult.IsArchived) {\r\n            try {\r\n                if (\r\n                    this.state.selectedAssociations != null &&\r\n                    this.state.selectedAssociations.length > 0\r\n                ) {\r\n                    if (this.state.modAllocationItems.length > 0) {\r\n                        let modAllocationItems = lodash.cloneDeep(this.state.modAllocationItems);\r\n                        this.state.selectedAssociations.forEach((obj, index) => {\r\n                            modAllocationItems = modAllocationItems.filter((com, cindex) => {\r\n                                return com.SeqNumber !== obj.SeqNumber;\r\n                            });\r\n                        });\r\n                        this.setState({ modAllocationItems, selectedAssociations: [] });\r\n                    }\r\n                }\r\n\r\n                // this.setState({ selectedAssociations: [] });\r\n            } catch (error) {\r\n                console.log(\r\n                    \"RigidtruckDetailsComposite:Error occured on handleDeleteCompartment\",\r\n                    error\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    getSignificantDigits() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetLookUpData + \"?LookUpTypeCode=Common\",\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    const result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (result.EntityResult.NumberOfSignificantDigits !== undefined &&\r\n                            result.EntityResult.NumberOfSignificantDigits !== null) {\r\n                            this.setState({\r\n                                noOfSignificantDigits: result.EntityResult.NumberOfSignificantDigits,\r\n                            });\r\n                        }\r\n\r\n                    } else {\r\n                        console.log(\"Error in getSignificantDigits: \", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\r\n                        \"PipelineDispatchDetailsComposite: Error occurred on getSignificantDigits\",\r\n                        error\r\n                    );\r\n                });\r\n        }\r\n        catch (error) {\r\n            console.log(\r\n                \"PipelineDispatchDetailsComposite:Error occured on geting RefrenceSourceLookUp Value\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    getAllocationItems = () => {\r\n        try {\r\n\r\n            if ((this.state.allocation.ShareholderCode !== null\r\n                && this.state.allocation.ShareholderCode !== \"\"\r\n                && this.state.allocation.ShareholderCode !== undefined)\r\n                || (this.state.allocation.EntityCode !== null\r\n                    && this.state.allocation.EntityCode !== \"\"\r\n                    && this.state.allocation.EntityCode !== undefined)) {\r\n                var keyCode = [\r\n                    {\r\n                        key: KeyCodes.entityCode,\r\n                        value: this.props.allocationType\r\n                            === Constants.AllocationEntityType.SHAREHOLDER ?\r\n                            this.state.modAllocation.ShareholderCode : this.state.modAllocation.EntityCode,\r\n                    },\r\n                    {\r\n                        key: KeyCodes.entityType,\r\n                        // value: Constants.AllocationEntityType.SHAREHOLDER,\r\n                        value: this.props.allocationType\r\n                    },\r\n                ];\r\n                var obj = {\r\n                    ShareHolderCode: this.props.allocationType\r\n                        === Constants.AllocationEntityType.SHAREHOLDER ?\r\n                        this.state.modAllocation.ShareholderCode : this.props.selectedShareholder,\r\n                    keyDataCode: KeyCodes.shareholderCode,\r\n                    KeyCodes: keyCode,\r\n                };\r\n                axios(\r\n                    RestAPIs.GetAllocationItemDetails,\r\n                    Utilities.getAuthenticationObjectforPost(\r\n                        obj,\r\n                        this.props.tokenDetails.tokenInfo\r\n                    )\r\n                )\r\n                    .then((response) => {\r\n\r\n                        var result = response.data;\r\n                        if (result.IsSuccess === true) {\r\n                            let list = result.EntityResult;\r\n                            let allocationItemsList = lodash.cloneDeep(list.Table)\r\n                            let noOfSignificantDigits = lodash.clone(this.state.noOfSignificantDigits)\r\n\r\n                            allocationItemsList.forEach((item) => {\r\n                                item.allocatedqty = item.allocatedqty !== null ?\r\n                                    Math.round(\r\n                                        item.allocatedqty,\r\n                                        noOfSignificantDigits\r\n                                    ).toString() + \" \" + item.uom : \"0 \" + item.uom\r\n                                item.blockedqty = item.blockedqty !== null ?\r\n                                    Math.round(\r\n                                        item.blockedqty,\r\n                                        noOfSignificantDigits\r\n                                    ).toString() + \" \" + item.uom : \"0 \" + item.uom\r\n                                item.loadedqty = item.loadedqty !== null ?\r\n                                    Math.round(\r\n                                        item.loadedqty,\r\n                                        noOfSignificantDigits\r\n                                    ).toString() + \" \" + item.uom : \"0 \" + item.uom\r\n                                item.startdate = new Date(\r\n                                    item.startdate\r\n                                ).toLocaleDateString();\r\n                                item.enddate = new Date(\r\n                                    item.enddate\r\n                                ).toLocaleDateString();\r\n                            })\r\n\r\n                            this.setState(\r\n                                {\r\n                                    allocationItemsList: allocationItemsList,\r\n                                    showAllocationItems: true\r\n                                }\r\n                            );\r\n                        } else {\r\n                            this.setState({\r\n                                allocationItemsList: [],\r\n                                showAllocationItems: false\r\n                            });\r\n                            console.log(\"Error in getShareholder:\", result.ErrorList);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"Error while getShareholder:\", error);\r\n                    });\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in getting allocation items\", error)\r\n        }\r\n    }\r\n    getAllocationShipments = () => {\r\n        try {\r\n            if ((this.state.allocation.ShareholderCode !== null\r\n                && this.state.allocation.ShareholderCode !== \"\"\r\n                && this.state.allocation.ShareholderCode !== undefined)\r\n                || (this.state.allocation.EntityCode !== null\r\n                    && this.state.allocation.EntityCode !== \"\"\r\n                    && this.state.allocation.EntityCode !== undefined)) {\r\n                var keyCode = [\r\n                    {\r\n                        key: KeyCodes.entityCode,\r\n                        value: this.props.allocationType\r\n                            === Constants.AllocationEntityType.SHAREHOLDER ?\r\n                            this.state.modAllocation.ShareholderCode : this.state.modAllocation.EntityCode,\r\n                    },\r\n                    {\r\n                        key: KeyCodes.entityType,\r\n                        // value: Constants.AllocationEntityType.SHAREHOLDER,\r\n                        value: this.props.allocationType\r\n                    },\r\n                ];\r\n                var obj = {\r\n                    ShareHolderCode: this.props.allocationType\r\n                        === Constants.AllocationEntityType.SHAREHOLDER ?\r\n                        this.state.modAllocation.ShareholderCode : this.props.selectedShareholder,\r\n                    keyDataCode: KeyCodes.shareholderCode,\r\n                    KeyCodes: keyCode,\r\n                };\r\n                axios(\r\n                    RestAPIs.GetShipmentAllocationDetails,\r\n                    Utilities.getAuthenticationObjectforPost(\r\n                        obj,\r\n                        this.props.tokenDetails.tokenInfo\r\n                    )\r\n                )\r\n                    .then((response) => {\r\n                        var result = response.data;\r\n                        if (result.IsSuccess === true) {\r\n                            let list = result.EntityResult;\r\n                            let allocationShipmentItemsList = lodash.cloneDeep(list.Table)\r\n\r\n                            let noOfSignificantDigits = lodash.cloneDeep(this.state.noOfSignificantDigits)\r\n                            allocationShipmentItemsList.forEach((item) => {\r\n                                item.allocatedqty = item.allocatedqty !== null ?\r\n                                    Math.round(\r\n                                        item.allocatedqty,\r\n                                        noOfSignificantDigits\r\n                                    ).toString() + \" \" + item.uom : \"0 \" + item.uom\r\n                                item.blockedqty = item.blockedqty !== null ?\r\n                                    Math.round(\r\n                                        item.blockedqty,\r\n                                        noOfSignificantDigits\r\n                                    ).toString() + \" \" + item.uom : \"0 \" + item.uom\r\n                                item.loadedqty = item.loadedqty !== null ?\r\n                                    Math.round(\r\n                                        item.loadedqty,\r\n                                        noOfSignificantDigits\r\n                                    ).toString() + \" \" + item.uom : \"0 \" + item.uom\r\n                                item.startdate = new Date(\r\n                                    item.startdate\r\n                                ).toLocaleDateString();\r\n                                item.enddate = new Date(\r\n                                    item.enddate\r\n                                ).toLocaleDateString();\r\n                            })\r\n                            this.setState(\r\n                                {\r\n                                    allocationShipmentItemsList: allocationShipmentItemsList,\r\n                                    showAllocationShipments: true\r\n                                });\r\n                        } else {\r\n                            this.setState(\r\n                                {\r\n                                    allocationShipmentItemsList: [],\r\n                                    showAllocationShipments: false\r\n                                });\r\n                            console.log(\"Error in getShareholder:\", result.ErrorList);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"Error while getShareholder:\", error);\r\n                    });\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in getting allocation shipment items\", error)\r\n        }\r\n    }\r\n\r\n    getFinishedProductCodes(shareholder) {\r\n        axios(\r\n            RestAPIs.GetFinishedProductCodes + \"?ShareholderCode=\" + shareholder,\r\n            Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    if (\r\n                        result.EntityResult !== null &&\r\n                        Array.isArray(result.EntityResult)\r\n                    ) {\r\n\r\n                        let finishedProductOptions = Utilities.transferListtoOptions(\r\n                            result.EntityResult\r\n                        );\r\n                        this.setState({ finishedProductOptions });\r\n                    }\r\n                } else {\r\n                    console.log(\"Error in getFinishedProductCodes:\", result.ErrorList);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error while getting getFinishedProductCodes:\", error);\r\n            });\r\n    }\r\n\r\n    handleAssociationSelectionChange = (associations) => {\r\n        this.setState({ selectedAssociations: associations });\r\n    };\r\n\r\n    handleCellDataEdit = (newVal, cellData) => {\r\n        let modAllocationItems = lodash.cloneDeep(this.state.modAllocationItems);\r\n\r\n        modAllocationItems[cellData.rowIndex][cellData.field] = newVal;\r\n        if (cellData.field === \"AllocationType\")\r\n            modAllocationItems[cellData.rowIndex].AllocationPeriod = null;\r\n        this.setState({ modAllocationItems });\r\n    };\r\n\r\n    handleDateTextChange = (cellData, value, error) => {\r\n        try {\r\n            // var validationErrors = { ...this.state.validationErrors };\r\n            var modAllocationItems = lodash.cloneDeep(this.state.modAllocationItems);\r\n            // validationErrors[propertyName] = error;\r\n            let index = modAllocationItems.findIndex((item) => {\r\n                return item.SeqNumber === cellData.rowData.SeqNumber\r\n            }\r\n            )\r\n            if (index >= 0) {\r\n                if (value === \"\")\r\n                    modAllocationItems[index][cellData.field] = null;\r\n                else\r\n                    modAllocationItems[index][cellData.field] = value;\r\n                this.setState({ modAllocationItems });\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"Error in DateTextChange : Error occured on handleDateTextChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    BackEvent = () => {\r\n        try {\r\n            this.setState({\r\n                showAllocationShipments: false,\r\n                showAllocationItems: false\r\n            }, () => {\r\n                this.props.allocationType\r\n                    === Constants.AllocationEntityType.SHAREHOLDER ?\r\n                    this.getShareholderAllocation({ Common_Code: this.state.allocation.ShareholderCode }) :\r\n                    this.getShareholderAllocation({ Common_Code: this.state.allocation.EntityCode });\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in BackEvent\", error)\r\n        }\r\n    }\r\n\r\n    handleCompAttributeCellDataEdit = (compAttribute, value) => {\r\n        let modAllocationItems = lodash.cloneDeep(this.state.modAllocationItems);\r\n        let compIndex = modAllocationItems.findIndex(\r\n            (item) => item.SeqNumber === compAttribute.rowData.compSequenceNo\r\n        );\r\n        if (compIndex >= 0)\r\n            modAllocationItems[compIndex].AttributesforUI[\r\n                //compAttribute.rowIndex\r\n                compAttribute.rowData.SeqNumber - 1\r\n            ].AttributeValue = value;\r\n        this.setState({ modAllocationItems });\r\n        if (compIndex >= 0) this.toggleExpand(modAllocationItems[compIndex], true, true);\r\n    };\r\n\r\n    handleAuthenticationClose = () => {\r\n        this.setState({\r\n          showAuthenticationLayout: false,\r\n        });\r\n      };\r\n\r\n      getFunctionGroupName() {\r\n        return this.props.allocationType === Constants.AllocationEntityType.SHAREHOLDER? fnShareholderAllocation: fnProductAllocation;\r\n       };\r\n\r\n       \r\n      \r\n\r\n    render() {\r\n        const listOptions = {\r\n            ShareholderList: this.props.userDetails.EntityResult.ShareholderList,\r\n            finishedProductOptions: this.state.finishedProductOptions,\r\n            allocationTypeandFrequencies: this.state.allocationTypeandFrequencies,\r\n            UOMOptions: this.state.UOMOptions,\r\n            customerOptions: this.state.customerOptions,\r\n            CarrierCompanyOptions: this.state.CarrierCompanyOptions\r\n\r\n        };\r\n\r\n        const popUpContents = [\r\n            {\r\n                fieldName: \"ShareholderDetails_LastUpdated\",\r\n                fieldValue:\r\n                    new Date(\r\n                        this.state.modAllocation.LastUpdatedTime\r\n                    ).toLocaleDateString() +\r\n                    \" \" +\r\n                    new Date(\r\n                        this.state.modAllocation.LastUpdatedTime\r\n                    ).toLocaleTimeString(),\r\n            },\r\n            {\r\n                fieldName: \"ShareholderDetails_CreatedDate\",\r\n                fieldValue:\r\n                    new Date(this.state.modAllocation.CreatedTime).toLocaleDateString() +\r\n                    \" \" +\r\n                    new Date(this.state.modAllocation.CreatedTime).toLocaleTimeString(),\r\n            },\r\n        ];\r\n\r\n        return this.state.isReadyToRender ? (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <TMDetailsHeader\r\n                        entityCode={this.state.allocation.EntityCode}\r\n                        newEntityName={this.props.allocationType\r\n                            === Constants.AllocationEntityType.SHAREHOLDER ? \"ProductAllocationItemInfo_AddShareholder\"\r\n                            : this.props.allocationType === Constants.AllocationEntityType.CUSTOMER ?\r\n                                \"ProductAllocationItemInfo_AddCustomer\" :\r\n                                \"ProductAllocationItemInfo_AddCarrier\"\r\n                        }\r\n\r\n                        popUpContents={popUpContents}\r\n                    ></TMDetailsHeader>\r\n                </ErrorBoundary>\r\n                {\r\n                    this.state.showAllocationItems ? (\r\n                        <ErrorBoundary>\r\n                            <ShareholderAllocationItemDetails\r\n                                allocationItemList={this.state.allocationItemsList}\r\n                                handleBack={this.BackEvent}\r\n                                pageSize={this.props.userDetails.EntityResult.PageAttibutes\r\n                                    .WebPortalListPageSize}\r\n                                allocationType={this.props.allocationType}\r\n                            >\r\n                            </ShareholderAllocationItemDetails>\r\n                        </ErrorBoundary>\r\n                    ) :\r\n                        this.state.showAllocationShipments ? (\r\n                            <ErrorBoundary>\r\n                                <ShareholderAllocationShipmentDetails\r\n                                    allocationShipmentList={this.state.allocationShipmentItemsList}\r\n                                    handleBack={this.BackEvent}\r\n                                    pageSize={this.props.userDetails.EntityResult.PageAttibutes\r\n                                        .WebPortalListPageSize}\r\n                                    allocationType={this.props.allocationType}\r\n                                >\r\n                                </ShareholderAllocationShipmentDetails>\r\n                            </ErrorBoundary>\r\n                        ) : (\r\n                            <div>\r\n                                <ErrorBoundary>\r\n                                    <ShareholderAllocationDetails\r\n                                        allocation={this.state.allocation}\r\n                                        modAllocation={this.state.modAllocation}\r\n                                        modAllocationItems={this.state.modAllocationItems}\r\n                                        validationErrors={this.state.validationErrors}\r\n                                        onFieldChange={this.handleChange}\r\n                                        listOptions={listOptions}\r\n                                        isEnterpriseNode={\r\n                                            this.props.userDetails.EntityResult.IsEnterpriseNode\r\n                                        }\r\n                                        handleViewItems={this.getAllocationItems}\r\n                                        handleViewShipments={this.getAllocationShipments}\r\n                                        selectedAssociations={this.state.selectedAssociations}\r\n                                        handleRowSelectionChange={\r\n                                            this.handleAssociationSelectionChange\r\n                                        }\r\n                                        handleCellDataEdit={this.handleCellDataEdit}\r\n                                        onDateTextChange={this.handleDateTextChange}\r\n                                        handleAddAssociation={this.handleAddAssociation}\r\n                                        handleDeleteAssociation={this.handleDeleteAssociation}\r\n                                        toggleExpand={this.toggleExpand}\r\n                                        expandedRows={this.state.expandedRows}\r\n                                        compartmentDetailsPageSize={\r\n                                            this.props.userDetails.EntityResult.PageAttibutes\r\n                                                .WebPortalListPageSize\r\n                                        }\r\n                                        handleCompAttributeCellDataEdit={\r\n                                            this.handleCompAttributeCellDataEdit\r\n                                        }\r\n                                        allocationType={this.props.allocationType}\r\n                                    ></ShareholderAllocationDetails>\r\n                                </ErrorBoundary >\r\n                                <ErrorBoundary>\r\n                                    <TMDetailsUserActions\r\n                                        handleBack={this.props.onBack}\r\n                                        handleSave={this.handleSave}\r\n                                        handleReset={this.handleReset}\r\n                                        saveEnabled={this.state.saveEnabled}\r\n                                    ></TMDetailsUserActions>\r\n                                </ErrorBoundary>\r\n\r\n                                {this.state.showAuthenticationLayout ? (\r\n                                    <UserAuthenticationLayout\r\n                                        Username={this.props.userDetails.EntityResult.UserName}\r\n                                        functionName={\r\n                                            this.state.allocation.ShareholderCode === \"\"\r\n                                            ? functionGroups.add\r\n                                            : functionGroups.modify\r\n                                        }\r\n                                        functionGroup={this.getFunctionGroupName()}\r\n                                        handleOperation={this.saveAllocation}\r\n                                        handleClose={this.handleAuthenticationClose}\r\n                                    ></UserAuthenticationLayout>\r\n                                    ) : null}\r\n\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n        ) : (\r\n            <LoadingPage message=\"Loading\"></LoadingPage>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ShareholderAllocationDetailsComposite);\r\n\r\nShareholderAllocationDetailsComposite.propTypes = {\r\n    selectedRow: PropTypes.object.isRequired,\r\n    onBack: PropTypes.func.isRequired,\r\n    onSaved: PropTypes.func.isRequired,\r\n};","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["ShareholderAllocationDetails","_ref","allocation","modAllocation","modAllocationItems","validationErrors","onFieldChange","listOptions","handleCellDataEdit","handleAddAssociation","handleDeleteAssociation","handleViewItems","handleViewShipments","selectedAssociations","handleRowSelectionChange","onDateTextChange","expandedRows","toggleExpand","compartmentDetailsPageSize","handleCompAttributeCellDataEdit","allocationType","t","useTranslation","dateDisplayValues","cellData","value","Date","toLocaleDateString","handleAttributeType","data","attribute","rowData","handleAttributeDateValue","dateval","chars","split","convertAttributeDatetoString","Dateval","getFullYear","getMonth","slice","getDate","DataType","toLowerCase","Constants","STRING","INT","_jsx","Input","fluid","AttributeValue","disabled","IsReadonly","onChange","reserveSpace","FLOAT","LONG","DOUBLE","undefined","toLocaleString","BOOL","Checkbox","checked","toString","DATETIME","DatePicker","showYearSelector","onTextChange","error","console","log","handleIsRequiredCompAttributes","IsMandatory","_jsxs","children","AttributeName","class","handleCustomEditDateSelect","rowIndex","field","type","displayFormat","getCurrentDateFormat","indicator","decimalDisplayValues","handleCustomEditDropDown","dropDownoptions","NewlyAdded","Select","className","options","search","noResultsMessage","handleCustomEditTextBox","CUSTOMER","placeholder","label","EntityCode","customerOptions","CARRIERCOMPANY","Utilities","CarrierCompanyOptions","ShareholderCode","ShareholderList","Description","onClick","SHAREHOLDER","Icon","root","name","size","DataTable","scrollable","scrollHeight","selectionMode","selection","onSelectionChange","rowExpansionTemplate","Array","isArray","AttributesforUI","length","rows","Column","header","renderer","editable","Pagination","handleIsRequiredCompartmentCell","editFieldType","customEditRenderer","celldata","finishedProductOptions","allocationTypeOptions","allocationTypeandFrequencies","Object","keys","forEach","push","text","handleAllocationTypesEditDropDown","allocationFreqOptions","AllocationType","frequency","Code","handleAllocationFreqEditDropDown","UOMOptions","initialWidth","open","findIndex","x","SeqNumber","ShareholderAllocationItemDetails","allocationItemList","handleBack","pageSize","TranslationConsumer","id","reorderableColumns","resizableColumns","searchPlaceholder","Button","content","ShareholderAllocationShipmentDetails","allocationShipmentList","defaultProps","ShareholderAllocationDetailsComposite","Component","constructor","_this","arguments","this","state","lodash","emptyProductAllocation","productAllocationEntityDef","allocationItemsvalidationErrors","productAllocationEntityItemsDef","isReadyToRender","saveEnabled","allocationItemsList","allocationShipmentItemsList","showAllocationItems","showAllocationShipments","noOfSignificantDigits","showAuthenticationLayout","tempAllocation","handleChange","propertyName","setState","getFinishedProductCodes","getShareholderAllocation","Common_Code","handleReset","ProductAllocationEntityItems","item","Active","saveAllocation","createAllocation","updateAllocation","handleSave","fillDetails","validateSave","fillAttributeDetails","props","userDetails","EntityResult","IsWebPortalUser","IsArchived","newComp","CreatedTime","LastActiveTime","Remarks","DeviationPercentOfQty","QuantityUOM","LoadedQuantity","MinimumQuantity","BlockedQuantity","Quantity","EndDate","StartDate","AllocationPeriod","FinishedProductCode","LastUpdatedTime","Attributes","attributeMetaDataList","compartmentAttributeMetaDataList","formCompartmentAttributes","TerminalCode","isTerminalAdded","expandedRowIndex","splice","filter","obj","index","com","cindex","getAllocationItems","keyCode","key","KeyCodes","ShareHolderCode","selectedShareholder","keyDataCode","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","IsSuccess","list","Table","allocatedqty","Math","round","uom","blockedqty","loadedqty","startdate","enddate","ErrorList","catch","getAllocationShipments","handleAssociationSelectionChange","associations","newVal","handleDateTextChange","BackEvent","compAttribute","compIndex","compSequenceNo","handleAuthenticationClose","componentDidMount","GetUOMList","getProductAllocationTypesandFrequencies","getAttributes","selectedRow","getCustomerList","getCarrierCompanies","shareholderCustomers","shareholderCust","customerDestinationOptions","CustomerDestinationsList","Table2","CarrierCompanies","shareholderRow","productAllocationItemAttributeEntity","PRODUCTALLOCATIONITEM","selectedTerminals","attributes","attTerminal","some","selTerminal","comp","compAttributes","att","AttributeCode","DisplayName","DefaultValue","MinValue","MaxValue","ValidationFormat","attributesforNewComp","tempCompAttributes","ListOfAttributeData","attData","tempAttIndex","assignedAttributes","CompartmentSeqNoInTrailer","compAttributeMetaDataList","terminalAttributes","terminal","termAtt","componentWillReceiveProps","nextProps","Table1","VOLUME","MASS","massUOM","notification","messageType","message","messageResultDetails","returnValue","values","every","isUnique","association","year","keyFields","keyValues","isSuccess","errorMessage","itemList","col","err","validator","displayName","errMsg","onSaved","EntityType","Source","allocationItems","paItem","dayjs","format","Entity","FunctionsList","functionGroups","modify","fnShareholderAllocation","add","getSignificantDigits","NumberOfSignificantDigits","shareholder","getFunctionGroupName","fnProductAllocation","render","popUpContents","fieldName","fieldValue","toLocaleTimeString","ErrorBoundary","TMDetailsHeader","entityCode","newEntityName","PageAttibutes","WebPortalListPageSize","isEnterpriseNode","IsEnterpriseNode","TMDetailsUserActions","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","style","margin","Popup","element","marginLeft","position","List","map","Content","float","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","getOptionsWithSelect","ddlOptions","selectOptionText","option","unshift","language","window","navigator","userLanguage","moment","longDateFormat"],"sourceRoot":""}