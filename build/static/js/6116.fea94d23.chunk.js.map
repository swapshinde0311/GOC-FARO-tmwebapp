{"version":3,"file":"static/js/6116.fea94d23.chunk.js","mappings":"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","sources":["Components/UIBase/Details/BayAllocationSCADAConfigurationDetails.jsx","Components/Composite/Details/BayAllocationSCADAConfigurationDetailsComposite.jsx","JS/functionalUtilities.js"],"sourcesContent":["import React from \"react\";\r\nimport { Input, Icon, Checkbox, Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport {\r\n    handleIsRequiredCompartmentCell,\r\n} from \"../../../JS/functionalUtilities\";\r\nBayAllocationSCADAConfigurationDetails.propTypes = {\r\n    bayAllocationQueueData: PropTypes.object.isRequired,\r\n    bayAllocationPointName: PropTypes.object.isRequired,\r\n    bayAllocationMonitoringData: PropTypes.object.isRequired,\r\n    handleCellParameterDataEdit: PropTypes.func.isRequired,\r\n    handleCellPointDataEdit: PropTypes.func.isRequired,\r\n    createGenerateConfig: PropTypes.func.isRequired,\r\n    handleBaySelectionChange: PropTypes.func.isRequired,\r\n    selectedbays: PropTypes.array.isRequired,\r\n    handleCellCheck: PropTypes.func.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    bayAllocationValidationErrors: PropTypes.object.isRequired,\r\nsaveEnabled:PropTypes.bool.isRequired\r\n}\r\nBayAllocationSCADAConfigurationDetails.defaultProps = {\r\n    isEnterpriseNode: false,\r\n}\r\nexport default function BayAllocationSCADAConfigurationDetails({\r\n    bayAllocationQueueData,\r\n    bayAllocationPointName,\r\n    bayAllocationMonitoringData,\r\n    handleCellParameterDataEdit,\r\n    createGenerateConfig,\r\n    handleCellPointDataEdit,\r\n    handleBaySelectionChange,\r\n    selectedbays,\r\n    onFieldChange,\r\n    bayAllocationValidationErrors,\r\n    saveEnabled\r\n}) {\r\n    const handleEditTextBox = (cellData) => {\r\n        return (\r\n            <Input\r\n                fluid\r\n                value={bayAllocationQueueData[cellData.rowIndex][cellData.field]}\r\n                onChange={(value) => handleCellParameterDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n            />\r\n        );\r\n    };\r\n    const handleCellEditTextBox = (cellData) => {\r\n        // var data = selectedbays.map((value) => { return value.BayCode }).indexOf(cellData.rowData.BayCode)\r\n        return (\r\n            <Input\r\n                fluid\r\n                value={bayAllocationPointName[cellData.rowIndex][cellData.field]}\r\n                onChange={(value) => handleCellPointDataEdit(value, cellData)}\r\n                // disabled={data < 0 ? true : false}\r\n                reserveSpace={false}\r\n                indicator=\"required\"\r\n            />\r\n        );\r\n    };\r\n    const decimalDisplayValues = (cellData) => {\r\n        const value = cellData;\r\n        if (typeof value === \"number\") {\r\n            return value.toLocaleString();\r\n        } else {\r\n            return value;\r\n        }\r\n    };\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t, index) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4 \">\r\n                            <Input\r\n                                fluid\r\n                                value={bayAllocationMonitoringData[0].MonitoringRate}\r\n                                indicator=\"required\"\r\n                                label={t(\"BaySCADA_MonitoringRate\")}\r\n                                reserveSpace={false}\r\n                                onChange={(data) => onFieldChange(\"MonitoringRate\", data)}\r\n                                error={t(bayAllocationValidationErrors.MonitoringRate)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <div class=\"ui input-label\"\r\n                                style={{ marginLeft: \"14.6rem\" }}>\r\n                                <span className=\"input-label-message\">\r\n                                    {t(\"BaySCADA_Enabled\")}\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"input-wrap \" style={{\r\n                                marginLeft: \"14.8rem\",\r\n                                marginTop: \"0.7rem\"\r\n                            }}>\r\n                                <Checkbox\r\n                                    key=\"IsEnabled\"\r\n                                    field=\"IsEnabled\"\r\n                                    onChange={(data) => onFieldChange(\"IsEnabled\", data)}\r\n                                    checked={bayAllocationMonitoringData[0].IsEnabled === null ? \"\" : bayAllocationMonitoringData[0].IsEnabled}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-6 col-md-6 col-lg-6 pb-0 detailsTable\">\r\n                            <span style={{ \"fontWeight\": \"bold\" }}>{t(\"BaySCADA_Data_Parameter\")}</span>\r\n                            <div style={{ marginBottom: \"10px\" }}></div>\r\n                            <DataTable\r\n                                data={bayAllocationQueueData}\r\n                                scrollable={true}\r\n                                scrollHeight=\"350px\"\r\n                            >\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"AttributeName\"\r\n                                    field=\"AttributeName\"\r\n                                    header={t(\"CompartmentAttributeName\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"ParameterName\"\r\n                                    field=\"ParameterName\"\r\n                                    renderer={(cellData) => decimalDisplayValues(cellData.rowData.ParameterName)}\r\n                                    // editable={true}\r\n                                    renderer={handleEditTextBox}\r\n                                    header={t(\"AtgConfigure_ParameterName\")}\r\n                                ></DataTable.Column>\r\n                            </DataTable>\r\n                        </div>\r\n                        <div className=\"col-6 col-md-6 col-lg-6 pb-0\">\r\n                            <span style={{ \"fontWeight\": \"bold\" }}>{t(\"BaySCADA_Bay_Point\")}</span>\r\n                            <div style={{ marginBottom: \"10px\" }}></div>\r\n                            <DataTable\r\n                                data={bayAllocationPointName}\r\n                                selectionMode=\"multiple\"\r\n                                scrollable={true}\r\n                                scrollHeight=\"320px\"\r\n                                selection={selectedbays}\r\n                                onSelectionChange={handleBaySelectionChange}\r\n                            >\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"BayCode\"\r\n                                    field=\"BayCode\"\r\n                                    header={t(\"BaySCADA_BayGV_BayCode\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"BayName\"\r\n                                    field=\"BayName\"\r\n                                    header={t(\"BaySCADA_BayGV_BayName\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"PointName\"\r\n                                    field=\"PointName\"\r\n                                    renderer={(cellData) => decimalDisplayValues(cellData.rowData.PointName)}\r\n                                    renderer={handleCellEditTextBox}\r\n                                    header={handleIsRequiredCompartmentCell(t(\"AtgConfigure_PointName\"))}\r\n                                ></DataTable.Column>\r\n                            </DataTable>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div\r\n                            className=\"col col-md-8 col-lg-9 col col-xl-12\"\r\n                            style={{ textAlign: \"right\" }}\r\n                        >\r\n                            <Button\r\n                                type=\"primary\"\r\n                                onClick={createGenerateConfig}\r\n                                disabled={!saveEnabled}\r\n                                content={t(\"BaySCADA_Generate\")}\r\n                            ></Button>\r\n                        </div></div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport lodash from \"lodash\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { emptyMasterConfigurationInfo, emptyScadaBayList} from \"../../../JS/DefaultEntities\";\r\nimport {\r\n    BayAllocationScadaValidationDef,\r\n} from \"../../../JS/ValidationDef\";\r\nimport { fnbaySCADAConfiguration, functionGroups } from \"../../../JS/FunctionGroups\";\r\nimport { BayAllocationScadaPointTableValidation, BayAllocationScadaParameterValidation} from \"../../../JS/DetailsTableValidationDef\";\r\nimport BayAllocationSCADAConfigurationDetails from \"../../UIBase/Details/BayAllocationSCADAConfigurationDetails\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\nclass BayAllocationSCADAConfigurationDetailsComposite extends Component {\r\n    state = {\r\n        bayAllocationQueueData: [],\r\n        bayAllocationMonitoringData: [],\r\n        bayAllocationPointName: [],\r\n        isReadyToRender: false,\r\n        saveEnabled: true,\r\n        IsEnabled: \"\",\r\n        selectedbays: [],\r\n        bayAllocationValidationErrors: Utilities.getInitialValidationErrors(\r\n            BayAllocationScadaValidationDef\r\n        ),\r\n        showAuthenticationLayout: false,\r\n        tempScadaBayMasterConfig:{}\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {\r\n            Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n                this.setState({\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnbaySCADAConfiguration\r\n                    )\r\n})\r\n            this.getBayAllocationQueueDataConfigurations();\r\n            this.getBayAllocationPointNameConfigurations();\r\n        } catch (error) {\r\n            console.log(\"SlotConfigurationDetail:Error occurred on \", error);\r\n        }\r\n    }\r\n    getBayAllocationQueueDataConfigurations() {\r\n        \r\n        try {\r\n            axios(\r\n                RestAPIs.GetSCADAParameterMapping,\r\n                Utilities.getAuthenticationObjectforGet(\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                \r\n                var result = response.data;\r\n                if (result.IsSuccess) {\r\n                    if (\r\n                        result.EntityResult !== null\r\n                    ) {\r\n                        let bayAllocationQueueData = lodash.cloneDeep(emptyMasterConfigurationInfo)\r\n                         bayAllocationQueueData =\r\n                             result.EntityResult.AtgParameterConfiguration\r\n                        let bayAllocationMonitoringData = result.EntityResult.Table1\r\n                        if (bayAllocationMonitoringData !== null) {\r\n                            bayAllocationMonitoringData.forEach((Monitoring) => {\r\n                                Monitoring.MonitoringRate = Monitoring.MonitoringRate === 0 ? \"\" : Number.isInteger(Monitoring.MonitoringRate) ? Math.round(Monitoring.MonitoringRate) : Monitoring.MonitoringRate\r\n                            })\r\n                        }\r\n                        console.log(\"bayAllocationQueueData\", bayAllocationQueueData)\r\n                        this.setState({\r\n                            isReadyToRender: true, bayAllocationQueueData,\r\n                            bayAllocationMonitoringData,\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.add,\r\n                                fnbaySCADAConfiguration\r\n                            )\r\n                        });\r\n                    }\r\n                } else {\r\n                    console.log(\"Error in getBayAllocationQueueDataConfigurations:\", result.ErrorList);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"getBayAllocationQueueDataConfigurations:Error occured on getBayAllocationQueueDataConfigurationsList\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    getBayAllocationPointNameConfigurations() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetPointConfig,    \r\n                Utilities.getAuthenticationObjectforGet(\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                \r\n                var result = response.data;\r\n                if (result.IsSuccess) {\r\n                    if (\r\n                        result.EntityResult !== null && result.IsSuccess === true) {\r\n                        let bayAllocationPointName = lodash.cloneDeep(emptyScadaBayList)\r\n                        bayAllocationPointName = lodash.cloneDeep(result.EntityResult.Table);\r\n                        let  test = lodash.cloneDeep(result.EntityResult.Table);\r\n                        let selectedbays = lodash.cloneDeep(this.state.selectedbays)\r\n                        let checkedList = [];\r\n                            var selectBay = test.filter(\r\n                                (allBay) => {\r\n                                    return allBay.PointName !== \"\"\r\n                                });\r\n                                checkedList.push(selectBay)\r\n                        this.setState({\r\n                            isReadyToRender: true,\r\n                            bayAllocationPointName,\r\n                            selectedbays: checkedList[0],\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.add,\r\n                                fnbaySCADAConfiguration\r\n                            )\r\n                        });\r\n                    }\r\n                } else {\r\n                    this.setState({\r\n                        bayAllocationPointName: lodash.cloneDeep(emptyScadaBayList),\r\n                        selectedbays:lodash.cloneDeep(this.state.selectedbays)\r\n                    })\r\n                    console.log(\"Error in bayAllocationPointNameConfigurations:\", result.ErrorList);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"bayAllocationPointNameConfigurations:Error occured on getBayAllocationQueueDataConfigurationsList\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    handleCellParameterDataEdit = (newVal, cellData) => {\r\n        \r\n        try {\r\n            let bayAllocationQueueData = lodash.cloneDeep(\r\n                this.state.bayAllocationQueueData\r\n            );\r\n            bayAllocationQueueData[cellData.rowIndex][cellData.field] = newVal;\r\n            this.setState({ bayAllocationQueueData });\r\n        } catch (error) {\r\n            console.log(\r\n                \"BayDetailsComposite:Error occured on handleCellDataEdit\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    handleCellPointDataEdit = (newVal, cellData) => {\r\n        try {\r\n            let bayAllocationPointName = lodash.cloneDeep(this.state.bayAllocationPointName)\r\n            let selectedbays = this.state.selectedbays;\r\n            let Bays = selectedbays.find(value => { return value.BayCode === cellData.rowData.BayCode })\r\n            if (selectedbays.length > 0 && Bays !==undefined) {\r\n                Bays.PointName = newVal;\r\n            }\r\n                bayAllocationPointName[cellData.rowIndex][cellData.field] = newVal;\r\n                this.setState({ bayAllocationPointName });\r\n\r\n        } catch (error) {\r\n            console.log(\r\n                \"BayDetailsComposite:Error occured on handleCellDataEdit\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    handleBaySelectionChange = (bays) => {\r\n                this.setState({ selectedbays: bays });\r\n    };\r\n    handleChange = (propertyName, data) => {\r\n        try {\r\n            const bayAllocationMonitoringData = lodash.cloneDeep(this.state.bayAllocationMonitoringData);\r\n            bayAllocationMonitoringData[0][propertyName] = data;\r\n            this.setState({ bayAllocationMonitoringData });\r\n        } catch (error) {\r\n            console.log(\r\n                \"TruckReceiptDetailsComposite:Error occured on handleChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    fillDetails() {\r\n        \r\n        let ScadaBayMasterConfig = {\r\n            IsEnabled:\"\",\r\n            MasterConfigurationInfo: [],\r\n            ScadaBayList: [],\r\n            ScanPeriod:\"\"\r\n        }\r\n        try {\r\n            \r\n            let MasterConfiguration = [];\r\n            let bayAllocationQueueData = lodash.cloneDeep(this.state.bayAllocationQueueData);\r\n            let bayAllocationMonitoringData = lodash.cloneDeep(this.state.bayAllocationMonitoringData);\r\n            let bayAllocationPointName = lodash.cloneDeep(this.state.bayAllocationPointName)\r\n            ScadaBayMasterConfig.IsEnabled = bayAllocationMonitoringData[0].IsEnabled;\r\n            ScadaBayMasterConfig.ScanPeriod = bayAllocationMonitoringData[0].MonitoringRate ;\r\n            let BayList = [];\r\n            if (bayAllocationQueueData.length > 0\r\n                && Array.isArray(bayAllocationQueueData)\r\n            ) {\r\n                bayAllocationQueueData.forEach((attribute) => {\r\n                    MasterConfiguration.push(\r\n                        {\r\n                            AttributeName: attribute.AttributeName,\r\n                            ParameterName: attribute.ParameterName\r\n                        }\r\n                    )\r\n                })\r\n            }\r\n            if (bayAllocationPointName.length > 0\r\n                && Array.isArray(bayAllocationPointName) \r\n            ) {\r\n                bayAllocationPointName.forEach((bays) => {\r\n                    let selectedbays = lodash.cloneDeep(this.state.selectedbays)\r\n                    let Bays = selectedbays.find(value => { return value.BayCode === bays.BayCode })\r\n                    if (bays.PointName !== \"\" && Bays !== undefined) {\r\n\r\n                        BayList.push(\r\n                            {\r\n                                Code: bays.BayCode,\r\n                                PointName: bays.PointName\r\n                            }\r\n                        )\r\n                    }\r\n                    else {\r\n                        BayList.push(\r\n                            {\r\n                                Code: bays.BayCode,\r\n                                PointName: \"\"\r\n                            }\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n            \r\n            ScadaBayMasterConfig.ScadaBayList = BayList;\r\n            ScadaBayMasterConfig.MasterConfigurationInfo = MasterConfiguration;\r\n\r\n        } catch (error) {\r\n            console.log(\"ATGInterfaceDetailsComposite:Error occured on fillAttributeDetails\", error);\r\n        }\r\n        return ScadaBayMasterConfig;\r\n    }\r\n    validateSave() {\r\n        try {\r\n            var bayAllocationValidationErrors = lodash.cloneDeep(this.state.bayAllocationValidationErrors);\r\n            let bayAllocationMonitoringData = lodash.cloneDeep(this.state.bayAllocationMonitoringData)\r\n            let bayAllocationPointName = lodash.cloneDeep(this.state.bayAllocationPointName)\r\n            let bayAllocationQueueData = lodash.cloneDeep(this.state.bayAllocationQueueData)\r\n            let selectedbays = lodash.cloneDeep(this.state.selectedbays)\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"BayAllocation_FailurStatus\",\r\n                messageResultDetails: [],\r\n            };\r\n            Object.keys(BayAllocationScadaValidationDef).forEach(function (key) {\r\n                bayAllocationValidationErrors[key] = Utilities.validateField(\r\n                    BayAllocationScadaValidationDef[key],\r\n                    bayAllocationMonitoringData[0][key]\r\n                );\r\n            });\r\n            // Object.keys(BayAllocationScadaValidationDef).forEach(function (key) {\r\n            //     bayAllocationValidationErrors[key] = Utilities.validateField(\r\n            //         BayAllocationScadaValidationDef[key],\r\n            //         bayAllocationPointName[key]\r\n            //     );\r\n            // });\r\n            if ((bayAllocationMonitoringData[0].MonitoringRate === \"\" ||\r\n                bayAllocationMonitoringData[0].MonitoringRate === null ||\r\n                bayAllocationMonitoringData[0].MonitoringRate=== undefined))\r\n                bayAllocationValidationErrors[\"MonitoringRate\"] = \"Bay_SCADA_InvalidMonitoringRate\";\r\n            if (bayAllocationQueueData.length > 0 ) {\r\n                bayAllocationQueueData.forEach((com) => {\r\n                    BayAllocationScadaParameterValidation.forEach((col) => {\r\n                        let err = \"\";\r\n\r\n                        if (col.validator !== undefined) {\r\n                            err = Utilities.validateField(col.validator, com[col.field]);\r\n                        }\r\n\r\n                        if (err !== \"\") {\r\n                            notification.messageResultDetails.push({\r\n                                keyFields: [col.displayName],\r\n                                keyValues: [com[col.field]],\r\n                                isSuccess: false,\r\n                                errorMessage: err,\r\n                            });\r\n                        }\r\n                    });\r\n                })\r\n            }\r\n            \r\n            if (bayAllocationPointName.length > 0  ) {\r\n                bayAllocationPointName.forEach((com) => {\r\n                    BayAllocationScadaPointTableValidation.forEach((col) => {\r\n                        let err = \"\";\r\n\r\n                        if (col.validator !== undefined) {\r\n                            err = Utilities.validateField(col.validator, com[col.field]);\r\n                        }\r\n\r\n                        if (err !== \"\" ) {\r\n                            notification.messageResultDetails.push({\r\n                                keyFields: [col.displayName],\r\n                                keyValues: [com[col.field]],\r\n                                isSuccess: false,\r\n                                errorMessage: err,\r\n                            });\r\n                        }\r\n                    });\r\n                })\r\n            }\r\n            selectedbays.map((value) =>  {\r\n                if (value.PointName === \"\") {\r\n                            notification.messageResultDetails.push({\r\n                                keyFields: [\"selectedbays\"],\r\n                                keyValues: [value.BayCode],\r\n                                isSuccess: false,\r\n                                errorMessage:\r\n                                    \"DeviceInfo_PointNameRequired\",\r\n                            });\r\n                    }\r\n                })\r\n            this.setState({ bayAllocationValidationErrors });\r\n            var returnValue = true;\r\n            if (returnValue)\r\n                returnValue = Object.values(bayAllocationValidationErrors).every(function (value) {\r\n                    return value === \"\";\r\n                });\r\n            if (notification.messageResultDetails.length > 0) {\r\n                toast(\r\n                    <ErrorBoundary>\r\n                        <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                    </ErrorBoundary>,\r\n                    {\r\n                        autoClose:\r\n                            notification.messageType === \"success\" ? 10000 : false,\r\n                    }\r\n                );\r\n                return false;\r\n            }\r\n            return returnValue;\r\n        } catch (error) {\r\n            console.log(\"Error while Validate Save\", error)\r\n        }\r\n    }\r\n    \r\n    saveScadaConfig = () => {\r\n        try {\r\n          this.setState({ saveEnabled: false });\r\n         \r\n          let tempScadaBayMasterConfig = lodash.cloneDeep(this.state.tempScadaBayMasterConfig);\r\n          this.createGenerateConfig(tempScadaBayMasterConfig);\r\n\r\n        } catch (error) {\r\n          console.log(\"Save Scada Config Composite : Error in saveScadaConfig\");\r\n        }\r\n      };\r\n\r\n    handleSave = () => {\r\n        this.handleAuthenticationClose();\r\n        try {\r\n            let tempScadaBayMasterConfig = this.fillDetails()\r\n            if (this.validateSave()) {\r\n              let showAuthenticationLayout =this.props.userDetails.EntityResult.IsWebPortalUser !== true? true: false;\r\n                this.setState({ showAuthenticationLayout,tempScadaBayMasterConfig }, () => {\r\n                    if (showAuthenticationLayout === false) {\r\n                      this.saveScadaConfig();\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({ saveEnabled: true });\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"BayallocationscadaDetailsComposite:Error occured on handleSave\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    \r\n    createGenerateConfig = (ScadaBayMasterConfig) => {\r\n        this.handleAuthenticationClose();\r\n        let bayAllocationQueueData = lodash.cloneDeep(this.state.bayAllocationQueueData);\r\n        let bayAllocationMonitoringData = lodash.cloneDeep(this.state.bayAllocationMonitoringData)\r\n        let bayAllocationPointName = lodash.cloneDeep(this.state.bayAllocationPointName)\r\n        \r\n        var notification = {\r\n            messageType: \"critical\",\r\n            message: \"BayAllocation_SavedStatus\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [],\r\n                    keyValues: [],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n        var obj = {\r\n            Entity: ScadaBayMasterConfig,\r\n        };\r\n        axios(\r\n            RestAPIs.CreateConfig,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState({ bayAllocationQueueData, bayAllocationMonitoringData, bayAllocationPointName, }, () => {\r\n                        this.getBayAllocationPointNameConfigurations();\r\n                        this.getBayAllocationQueueDataConfigurations();\r\n                    });\r\n                } else {\r\n                    notification.messageResultDetails[0].errorMessage =\r\n                        result.ErrorList[0];\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnbaySCADAConfiguration\r\n                        )\r\n                    });\r\n                    console.log(\"Error in updatePipelineReceipt:\", result.ErrorList);\r\n                }\r\n                toast(\r\n                    <ErrorBoundary>\r\n                        <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                    </ErrorBoundary>,\r\n                    {\r\n                        autoClose:\r\n                            notification.messageType === \"success\" ? 10000 : false,\r\n                    }\r\n                );\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    saveEnabled: true\r\n                });\r\n                notification.messageResultDetails[0].errorMessage = error;\r\n                toast(\r\n                    <ErrorBoundary>\r\n                        <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                    </ErrorBoundary>,\r\n                    {\r\n                        autoClose:\r\n                            notification.messageType === \"success\" ? 10000 : false,\r\n                    }\r\n                );\r\n            });\r\n\r\n\r\n        this.setState({\r\n            bayAllocationQueueData: this.state.bayAllocationQueueData,\r\n        });\r\n    }\r\n\r\n    handleAuthenticationClose = () => {\r\n        this.setState({\r\n          showAuthenticationLayout: false,\r\n        });\r\n      };\r\n\r\n    render() {\r\n        return this.state.isReadyToRender ? (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <BayAllocationSCADAConfigurationDetails\r\n                        bayAllocationQueueData={this.state.bayAllocationQueueData}\r\n                        bayAllocationPointName={this.state.bayAllocationPointName}\r\n                        bayAllocationMonitoringData={this.state.bayAllocationMonitoringData}\r\n                        handleCellParameterDataEdit={this.handleCellParameterDataEdit}\r\n                        handleCellPointDataEdit={this.handleCellPointDataEdit}\r\n                        createGenerateConfig={this.handleSave}\r\n                        handleBaySelectionChange={this.handleBaySelectionChange}\r\n                        selectedbays={this.state.selectedbays}\r\n                        onFieldChange={this.handleChange}\r\n                        bayAllocationValidationErrors={this.state.bayAllocationValidationErrors}\r\n                        saveEnabled={this.state.saveEnabled}\r\n                    >\r\n                    </BayAllocationSCADAConfigurationDetails>\r\n                </ErrorBoundary>\r\n                {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={functionGroups.add}\r\n            functionGroup={fnbaySCADAConfiguration}\r\n            handleOperation={this.saveScadaConfig}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n            </div>\r\n        ) : (\r\n            <LoadingPage message=\"Loading\"></LoadingPage>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n};\r\nBayAllocationSCADAConfigurationDetailsComposite.propTypes = {\r\n    onBack: PropTypes.func.isRequired,\r\n    onSaved: PropTypes.func.isRequired,\r\n    refreshScheduleUIRequired: PropTypes.func.isRequired,\r\n    addSchedule: PropTypes.func.isRequired,\r\n};\r\nexport default connect(mapStateToProps)(BayAllocationSCADAConfigurationDetailsComposite);","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["BayAllocationSCADAConfigurationDetails","_ref","bayAllocationQueueData","bayAllocationPointName","bayAllocationMonitoringData","handleCellParameterDataEdit","createGenerateConfig","handleCellPointDataEdit","handleBaySelectionChange","selectedbays","onFieldChange","bayAllocationValidationErrors","saveEnabled","handleEditTextBox","cellData","_jsx","Input","fluid","value","rowIndex","field","onChange","reserveSpace","handleCellEditTextBox","indicator","decimalDisplayValues","toLocaleString","TranslationConsumer","children","t","index","_jsxs","className","MonitoringRate","label","data","error","class","style","marginLeft","marginTop","Checkbox","checked","IsEnabled","marginBottom","DataTable","scrollable","scrollHeight","Column","header","renderer","rowData","ParameterName","selectionMode","selection","onSelectionChange","PointName","handleIsRequiredCompartmentCell","textAlign","Button","type","onClick","disabled","content","defaultProps","isEnterpriseNode","BayAllocationSCADAConfigurationDetailsComposite","Component","constructor","arguments","state","isReadyToRender","Utilities","BayAllocationScadaValidationDef","showAuthenticationLayout","tempScadaBayMasterConfig","newVal","lodash","this","setState","console","log","Bays","find","BayCode","length","undefined","bays","handleChange","propertyName","saveScadaConfig","handleSave","handleAuthenticationClose","fillDetails","validateSave","props","userDetails","EntityResult","IsWebPortalUser","ScadaBayMasterConfig","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","obj","Entity","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","IsSuccess","getBayAllocationPointNameConfigurations","getBayAllocationQueueDataConfigurations","ErrorList","FunctionsList","functionGroups","add","fnbaySCADAConfiguration","toast","ErrorBoundary","NotifyEvent","notificationMessage","autoClose","catch","componentDidMount","IsArchived","emptyMasterConfigurationInfo","AtgParameterConfiguration","Table1","forEach","Monitoring","Number","isInteger","Math","round","emptyScadaBayList","Table","test","checkedList","selectBay","filter","allBay","push","MasterConfigurationInfo","ScadaBayList","ScanPeriod","MasterConfiguration","BayList","Array","isArray","attribute","AttributeName","Code","Object","keys","key","com","BayAllocationScadaParameterValidation","col","err","validator","displayName","BayAllocationScadaPointTableValidation","map","returnValue","values","every","render","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","getOptionsWithSelect","ddlOptions","selectOptionText","option","text","unshift","getCurrentDateFormat","language","window","navigator","userLanguage","moment","longDateFormat"],"sourceRoot":""}