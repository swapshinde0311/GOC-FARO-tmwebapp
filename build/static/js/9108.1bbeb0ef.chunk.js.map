{"version":3,"file":"static/js/9108.1bbeb0ef.chunk.js","mappings":"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","sources":["Components/UIBase/Details/ProcessConfigDetails.jsx","Components/Composite/Details/ProcessConfigDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/functionalUtilities.js"],"sourcesContent":["import React from 'react';\r\nimport { Select, Input, Button, Icon, Accordion } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\n\r\nProcessConfigDetails.propTypes = {\r\n    processConfig: PropTypes.object.isRequired,\r\n    modProcessConfig: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    onActiveStatusChange: PropTypes.func.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        workFlowTypeOptions: PropTypes.array,\r\n        deviceTypeOptions: PropTypes.array,\r\n        deviceCodeOptions: PropTypes.array,\r\n        availableDevices: PropTypes.array,\r\n        associatedDevices: PropTypes.array,\r\n        selectedAvailableDevices: PropTypes.array,\r\n        selectedAssociatedDevices: PropTypes.array,\r\n    }),\r\n    pageSize: PropTypes.number,\r\n    onAvailableDeviceSelection: PropTypes.func.isRequired,\r\n    onAssociatedDeviceSelection: PropTypes.func.isRequired,\r\n    onDeviceAssociation: PropTypes.func.isRequired,\r\n    onDeviceDisassociation: PropTypes.func.isRequired,\r\n    modAttributeMetaDataList: PropTypes.array.isRequired,\r\n    attributeValidationErrors: PropTypes.array.isRequired,\r\n    onAttributeDataChange: PropTypes.func.isRequired,\r\n    isMultidrop: PropTypes.bool\r\n}\r\n\r\nProcessConfigDetails.defaultProps = {\r\n    listOptions: {\r\n        workFlowTypeOptions: [],\r\n        deviceTypeOptions: [],\r\n        deviceCodeOptions: [],\r\n        availableDevices: [],\r\n        associatedDevices: [],\r\n        selectedAvailableDevices: [],\r\n        selectedAssociatedDevices: []\r\n    }\r\n}\r\n\r\nexport function ProcessConfigDetails({\r\n    processConfig,\r\n    modProcessConfig,\r\n    validationErrors,\r\n    onFieldChange,\r\n    onActiveStatusChange,\r\n    listOptions,\r\n    pageSize,\r\n    onAvailableDeviceSelection,\r\n    onAssociatedDeviceSelection,\r\n    onDeviceAssociation,\r\n    onDeviceDisassociation,\r\n    modAttributeMetaDataList,\r\n    attributeValidationErrors,\r\n    onAttributeDataChange,\r\n    isMultidrop\r\n}) {\r\n    const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n        let attributeValidation = [];\r\n        attributeValidation = attributeValidationErrors.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n        })\r\n        return attributeValidation.attributeValidationErrors;\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modProcessConfig.ProcessName}\r\n                                indicator=\"required\"\r\n                                disabled={processConfig.ProcessName !== \"\"}\r\n                                onChange={(data) => onFieldChange(\"ProcessName\", data)}\r\n                                label={t(\"ProcessConfig_ProcessName\")}\r\n                                error={t(validationErrors.ProcessName)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                value={modProcessConfig.WorkFlowType}\r\n                                label={t(\"ExeConfiguration_WorkFlow\")}\r\n                                indicator=\"required\"\r\n                                options={listOptions.workFlowTypeOptions}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"WorkFlowType\", data);\r\n                                }}\r\n                                error={t(validationErrors.WorkFlowType)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                value={modProcessConfig.PrimaryDeviceType}\r\n                                label={t(\"ProcessConfig_DeviceType\")}\r\n                                indicator=\"required\"\r\n                                options={listOptions.deviceTypeOptions}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"PrimaryDeviceType\", data);\r\n                                }}\r\n                                error={t(validationErrors.PrimaryDeviceType)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                value={modProcessConfig.PrimaryDeviceCode}\r\n                                label={t(\"ProcessConfig_PrimaryDeviceCode\")}\r\n                                indicator=\"required\"\r\n                                options={listOptions.deviceCodeOptions}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"PrimaryDeviceCode\", data);\r\n                                }}\r\n                                error={t(validationErrors.PrimaryDeviceCode)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"ProcessConfig_Status\")}\r\n                                value={modProcessConfig.Active}\r\n                                options={[\r\n                                    { text: t(\"PipeLineHeaderInfo_Active\"), value: true },\r\n                                    { text: t(\"PipeLineHeaderInfo_Inactive\"), value: false },\r\n                                ]}\r\n                                onChange={(data) => onActiveStatusChange(data)}\r\n                                error={t(validationErrors.Active)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modProcessConfig.Remarks}\r\n                                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                                label={t(\"ProcessConfig_Remarks\")}\r\n                                error={t(validationErrors.Remarks)}\r\n                                indicator={modProcessConfig.Active !== processConfig.Active ? \"required\" : \"\"}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-5 col-lg-5\">\r\n                            <h4>{t(\"ProcessConfig_AvlDevices\")}</h4>\r\n                            <div className=\"detailsTable\">\r\n                                <DataTable\r\n                                    data={listOptions.availableDevices}\r\n                                    search={true}\r\n                                    selectionMode=\"multiple\"\r\n                                    selection={listOptions.selectedAvailableDevices}\r\n                                    onSelectionChange={onAvailableDeviceSelection}\r\n                                    rows={pageSize}\r\n                                    searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"DeviceCode\"\r\n                                        field=\"DeviceCode\"\r\n                                        header={t(\"ProcessConfig_BCU\")}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"ChannelCode\"\r\n                                        field=\"ChannelCode\"\r\n                                        header={t(\"ProcessConfig_Channel\")}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    {Array.isArray(listOptions.availableDevices) &&\r\n                                        listOptions.availableDevices.length > pageSize ? (\r\n                                        <DataTable.Pagination />) : (\"\")}\r\n                                </DataTable>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-12 col-md-2 col-lg-2\">\r\n                            <br></br><br></br>\r\n                            <div style={{ textAlign: \"center\" }}>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    icon={<Icon name=\"caret-right\" root=\"common\" />}\r\n                                    content=\"\"\r\n                                    iconPosition=\"right\"\r\n                                    onClick={onDeviceAssociation}\r\n                                    disabled={listOptions.availableDevices.length > 0 ? false : true}\r\n                                /><br></br><br></br>\r\n\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    icon={<Icon name=\"caret-left\" root=\"common\" />}\r\n                                    content=\"\"\r\n                                    iconPosition=\"right\"\r\n                                    onClick={onDeviceDisassociation}\r\n                                    disabled={listOptions.associatedDevices.length > 0 ? false : true}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-12 col-md-5 col-lg-5\">\r\n                            <h4>{t(\"ProcessConfig_AssociatedDevices\")}</h4>\r\n                            <div className=\"detailsTable\">\r\n                                <DataTable\r\n                                    data={listOptions.associatedDevices}\r\n                                    search={true}\r\n                                    selectionMode=\"multiple\"\r\n                                    selection={listOptions.selectedAssociatedDevices}\r\n                                    onSelectionChange={onAssociatedDeviceSelection}\r\n                                    rows={pageSize}\r\n                                    searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"DeviceCode\"\r\n                                        field=\"DeviceCode\"\r\n                                        header={t(\"ProcessConfig_BCU\")}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"ChannelCode\"\r\n                                        field=\"ChannelCode\"\r\n                                        header={t(\"ProcessConfig_Channel\")}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    {Array.isArray(listOptions.associatedDevices) &&\r\n                                        listOptions.associatedDevices.length > pageSize ? (\r\n                                        <DataTable.Pagination />) : (\"\")}\r\n                                </DataTable>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    {\r\n                        modAttributeMetaDataList.length > 0 ?\r\n                            modAttributeMetaDataList.map((attribute) =>\r\n                                <ErrorBoundary>\r\n                                    <Accordion >\r\n                                        <Accordion.Content\r\n                                            className=\"attributeAccordian\"\r\n                                            title={(t(\"Attributes_Header\"))}\r\n                                        >\r\n                                            <AttributeDetails\r\n                                                selectedAttributeList={attribute.attributeMetaDataList}\r\n                                                handleCellDataEdit={onAttributeDataChange}\r\n                                                attributeValidationErrors={handleValidationErrorFilter(attributeValidationErrors, attribute.TerminalCode)}\r\n                                            ></AttributeDetails>\r\n                                        </Accordion.Content>\r\n                                    </Accordion>\r\n                                </ErrorBoundary>\r\n                            ) : null\r\n                    }\r\n\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { ProcessConfigDetails } from \"../../UIBase/Details/ProcessConfigDetails\";\r\nimport { emptyProcessConfigInfo } from \"../../../JS/DefaultEntities\";\r\nimport { processConfigValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport PropTypes from \"prop-types\";\r\nimport lodash from \"lodash\";\r\nimport { functionGroups, fnProcessConfiguration } from \"../../../JS/FunctionGroups\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { processConfigAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass ProcessConfigDetailsComposite extends Component {\r\n  state = {\r\n    processConfig: lodash.cloneDeep(emptyProcessConfigInfo),\r\n    modProcessConfig: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      processConfigValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    saveEnabled: false,\r\n    workFlowTypeOptions: [],\r\n    deviceTypeOptions: [],\r\n    deviceCodeOptions: [],\r\n    availableDevices: [],\r\n    associatedDevices: [],\r\n    selectedAvailableDevices: [],\r\n    selectedAssociatedDevices: [],\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    isMultidrop: false,\r\n    tempProcessConfig: {},\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getAttributes(this.props.selectedRow);\r\n      this.getWorkFlowType();\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.processConfig.ProcessName !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getAttributes(nextProps.selectedRow);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getProcessConfig(processConfigRow) {\r\n    if (processConfigRow.ProcessConfig_ProcessName === undefined) {\r\n      this.setState({\r\n        processConfig: lodash.cloneDeep(emptyProcessConfigInfo),\r\n        modProcessConfig: lodash.cloneDeep(emptyProcessConfigInfo),\r\n        isReadyToRender: true,\r\n        saveEnabled: Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          fnProcessConfiguration\r\n        ),\r\n        availableDevices: [],\r\n        associatedDevices: [],\r\n        selectedAvailableDevices: [],\r\n        selectedAssociatedDevices: [],\r\n        modAttributeMetaDataList: [],\r\n      }, () => {\r\n        this.localNodeAttribute();\r\n      })\r\n      return;\r\n    }\r\n\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.ProcessName,\r\n        value: processConfigRow.ProcessConfig_ProcessName,\r\n      }];\r\n    var obj = {\r\n      keyDataCode: KeyCodes.ProcessName,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetProcessConfiguration,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          result.EntityResult.PrimaryDeviceType = Object.keys(Constants.deviceTypeCode).find(\r\n            (key) => Constants.deviceTypeCode[key] === result.EntityResult.PrimaryDeviceType\r\n          );\r\n          this.setState(\r\n            {\r\n              isReadyToRender: true,\r\n              processConfig: lodash.cloneDeep(result.EntityResult),\r\n              modProcessConfig: lodash.cloneDeep(result.EntityResult),\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnProcessConfiguration\r\n              )\r\n            }, () => {\r\n              this.getProcessConfigDeviceType(result.EntityResult.WorkFlowType);\r\n              this.getProcessConfigDeviceCodes(result.EntityResult.WorkFlowType, result.EntityResult.PrimaryDeviceType);\r\n              this.getMultiDropDevices(result.EntityResult.PrimaryDeviceType, result.EntityResult.PrimaryDeviceCode);\r\n              this.localNodeAttribute();\r\n            });\r\n        } else {\r\n          this.setState({\r\n            processConfig: lodash.cloneDeep(emptyProcessConfigInfo),\r\n            modProcessConfig: lodash.cloneDeep(emptyProcessConfigInfo),\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in getProcessConfig:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getProcessConfig:\", error, processConfigRow);\r\n      });\r\n  }\r\n\r\n  getAttributes(processConfigRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [processConfigAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(\r\n                result.EntityResult.PROCESSCONFIG\r\n              ),\r\n            },\r\n            () => this.getProcessConfig(processConfigRow)\r\n          );\r\n        } else {\r\n          console.log(\"Error in getAttributes:\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (Array.isArray(attributeMetaDataList.PROCESSCONFIG) && attributeMetaDataList.PROCESSCONFIG.length > 0) {\r\n        this.terminalSelectionChange([\r\n          attributeMetaDataList.PROCESSCONFIG[0].TerminalCode,\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on localNodeAttribute\", error);\r\n    }\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var modAttributeMetaDataList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.attributeMetaDataList\r\n        );\r\n        modAttributeMetaDataList = lodash.cloneDeep(\r\n          this.state.modAttributeMetaDataList\r\n        );\r\n        const attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        var modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.PROCESSCONFIG.forEach(function (\r\n              attributeMetaData\r\n            ) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                if (modProcessConfig.Attributes !== null) {\r\n                  var Attributevalue = modProcessConfig.Attributes.find(\r\n                    (baseproductAttribute) => {\r\n                      return baseproductAttribute.TerminalCode === terminal;\r\n                    }\r\n                  );\r\n                }\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                      (x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      }\r\n                    );\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        modAttributeMetaDataList = [];\r\n        modAttributeMetaDataList = attributesTerminalsList;\r\n        modAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n          modAttributeMetaDataList\r\n        );\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getWorkFlowType() {\r\n    axios(\r\n      RestAPIs.GetWorkflowTypes,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let workFlowTypeOptions = [];\r\n          if (result.EntityResult !== null && result.EntityResult.Table !== null && Array.isArray(result.EntityResult.Table)) {\r\n            result.EntityResult.Table.forEach((element) => {\r\n              workFlowTypeOptions.push({\r\n                text: element.WorkflowCode,\r\n                value: element.WorkflowCode,\r\n              });\r\n            });\r\n            this.setState({ workFlowTypeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getWorkFlowType:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getWorkFlowType:\", error);\r\n      });\r\n  }\r\n\r\n  getProcessConfigDeviceType(workFlowType) {\r\n    axios(\r\n      RestAPIs.GetProcessConfigDeviceType +\r\n      \"?workflowTypeCode=\" + workFlowType,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let deviceTypeOptions = [];\r\n          if (result.EntityResult !== null && result.EntityResult.Table !== null && Array.isArray(result.EntityResult.Table)) {\r\n            result.EntityResult.Table.forEach((element) => {\r\n              deviceTypeOptions.push({\r\n                text: element.Code,\r\n                value: element.Code,\r\n              });\r\n            });\r\n            this.setState({ deviceTypeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getProcessConfigDeviceType:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getProcessConfigDeviceType:\", error);\r\n      });\r\n  }\r\n\r\n  getProcessConfigDeviceCodes(workFlowType, deviceType) {\r\n    axios(\r\n      RestAPIs.GetProcessConfigDeviceCodes +\r\n      \"?workflowType=\" + workFlowType + \"&deviceType=\" + deviceType,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null && Array.isArray(result.EntityResult)) {\r\n            let deviceCodeOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ deviceCodeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getProcessConfigDeviceCodes:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getProcessConfigDeviceCodes:\", error);\r\n      });\r\n  }\r\n\r\n  getMultiDropDevices(deviceType, deviceCode) {\r\n    const modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n    const processConfig = lodash.cloneDeep(this.state.processConfig);\r\n    axios(\r\n      RestAPIs.GetMultiDropDevices +\r\n      \"?deviceType=\" + deviceType + \"&deviceCode=\" + deviceCode,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let availableDevices = [];\r\n          let associatedDevices = [];\r\n          var isMultidrop = false;\r\n          if (result.EntityResult !== null) {\r\n            if((this.state.modProcessConfig.WorkFlowType === \"EntryGate\"\r\n              || this.state.modProcessConfig.WorkFlowType === \"ExitGate\")\r\n              && deviceType === \"CARD_READER\") {\r\n               availableDevices = result.EntityResult.Table1;\r\n              associatedDevices = [];\r\n              }\r\n            else if (processConfig.ProcessName !== \"\" && result.EntityResult.Table2[0].IsMultiDrop === \"1\"){\r\n              let AllDevices = result.EntityResult.Table;\r\n              AllDevices.forEach((obj) => {\r\n                let matchedDevices = modProcessConfig.AssociatedDevices.filter((modDevice) => { return (modDevice.DeviceCode === obj.DeviceCode); });\r\n                if (matchedDevices.length > 0) {\r\n                  associatedDevices.push(obj);\r\n                }\r\n                else {\r\n                  availableDevices.push(obj);\r\n                }\r\n              })\r\n            }\r\n            else {\r\n               availableDevices = result.EntityResult.Table1;\r\n                associatedDevices = result.EntityResult.Table;\r\n            }\r\n             isMultidrop = result.EntityResult.Table2[0].IsMultiDrop === \"1\" ? true : false;\r\n            this.setState({ availableDevices, associatedDevices, isMultidrop });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getMultiDropDevices:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getMultiDropDevices:\", error);\r\n      });\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n      modProcessConfig[propertyName] = data;\r\n      this.setState({ modProcessConfig }, () => {\r\n        if (propertyName === \"WorkFlowType\") {\r\n          this.handleWorkFlowTypeChange(data);\r\n        }\r\n        else if (propertyName === \"PrimaryDeviceType\") {\r\n          this.handePrimaryDeviceTypeChanges(modProcessConfig.WorkFlowType, data);\r\n        }\r\n        else if (propertyName === \"PrimaryDeviceCode\") {\r\n          this.getMultiDropDevices(modProcessConfig.PrimaryDeviceType, data);\r\n        }\r\n      });\r\n\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (processConfigValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          processConfigValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleWorkFlowTypeChange(workFlowType) {\r\n    try {\r\n      const modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n      modProcessConfig[\"PrimaryDeviceType\"] = \"\";\r\n      modProcessConfig[\"PrimaryDeviceCode\"] = \"\";\r\n      this.setState({ modProcessConfig, deviceCodeOptions: [], availableDevices: [], associatedDevices: [] });\r\n      this.getProcessConfigDeviceType(workFlowType);\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handleWorkFlowTypeChange\", error);\r\n    }\r\n  }\r\n\r\n  handePrimaryDeviceTypeChanges(workFlowType, deviceType) {\r\n    try {\r\n      const modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n      modProcessConfig[\"PrimaryDeviceCode\"] = \"\";\r\n      this.setState({ modProcessConfig, availableDevices: [], associatedDevices: [] });\r\n      this.getProcessConfigDeviceCodes(workFlowType, deviceType,);\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handePrimaryDeviceTypeChanges\", error);\r\n    }\r\n  }\r\n\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n      modProcessConfig.Active = value;\r\n      if (modProcessConfig.Active !== this.state.processConfig.Active)\r\n        modProcessConfig.Remarks = \"\";\r\n      this.setState({ modProcessConfig });\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handleActiveStatusChange\", error);\r\n    }\r\n  };\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n      const processConfig = lodash.cloneDeep(this.state.processConfig);\r\n\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modProcessConfig: { ...processConfig },\r\n          selectedCompRow: [],\r\n          validationErrors,\r\n          availableDevices: [],\r\n          associatedDevices: [],\r\n          selectedAvailableDevices: [],\r\n          selectedAssociatedDevices: [],\r\n          modAttributeMetaDataList: [],\r\n        }, () => {\r\n          this.localNodeAttribute();\r\n          this.handleResetAttributeValidationError();\r\n        });\r\n      if (processConfig.ProcessName === \"\") {\r\n        this.setState({ deviceCodeOptions: [], deviceTypeOptions: [] })\r\n      }\r\n      else {\r\n        this.getProcessConfigDeviceType(processConfig.WorkFlowType);\r\n        this.getProcessConfigDeviceCodes(processConfig.WorkFlowType, processConfig.PrimaryDeviceType,);\r\n        this.getMultiDropDevices(processConfig.PrimaryDeviceType, processConfig.PrimaryDeviceCode);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handleReset\", error);\r\n    }\r\n  };\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors: Utilities.getAttributeInitialValidationErrors(\r\n          attributeMetaDataList.PROCESSCONFIG\r\n        ),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigDetailsComposite:Error occured on handleResetAttributeValidationError\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  saveProcessConfig = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempProcessConfig = lodash.cloneDeep(this.state.tempProcessConfig);\r\n\r\n      this.state.processConfig.ProcessName === \"\"\r\n          ? this.createProcessConfig(tempProcessConfig)\r\n          : this.updateProcessConfig(tempProcessConfig);\r\n\r\n    } catch (error) {\r\n      console.log(\"SaveProcessConfig Composite : Error in saveProcessConfig\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n      \r\n      let modProcessConfig = this.fillDetails();\r\n      let attributeList = Utilities.attributesConverttoLocaleString(this.state.modAttributeMetaDataList);\r\n      if (this.validateSave(modProcessConfig, attributeList)) {\r\n        attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n        modProcessConfig.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n     \r\n\r\n        let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      let tempProcessConfig = lodash.cloneDeep(modProcessConfig);\r\n      this.setState({ showAuthenticationLayout, tempProcessConfig }, () => {\r\n        if (showAuthenticationLayout === false) {\r\n          this.saveProcessConfig();\r\n        }\r\n    });\r\n\r\n\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handleSave\", error);\r\n    }\r\n  }\r\n\r\n  fillDetails() {\r\n    try {\r\n      let modProcessConfig = lodash.cloneDeep(this.state.modProcessConfig);\r\n      let associatedDevices = lodash.cloneDeep(this.state.associatedDevices);\r\n      modProcessConfig.AssociatedDevices = [];\r\n      associatedDevices.forEach((obj) => {\r\n        var devices = {\r\n          DeviceCode: obj.DeviceCode,\r\n          DeviceType: modProcessConfig.PrimaryDeviceType\r\n        }\r\n        modProcessConfig.AssociatedDevices.push(devices);\r\n      })\r\n      return modProcessConfig;\r\n    }\r\n    catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on fillDetails\", error);\r\n    }\r\n  }\r\n\r\n  validateSave(modProcessConfig, attributeList) {\r\n    try {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      Object.keys(processConfigValidationDef).forEach(function (key) {\r\n        if (modProcessConfig[key] !== undefined)\r\n          validationErrors[key] = Utilities.validateField(\r\n            processConfigValidationDef[key],\r\n            modProcessConfig[key]\r\n          );\r\n      });\r\n\r\n      if (modProcessConfig.Active !== this.state.processConfig.Active) {\r\n        if (modProcessConfig.Remarks === null || modProcessConfig.Remarks === \"\") {\r\n          validationErrors[\"Remarks\"] = \"BaseProductInfo_EnterRemarks\";\r\n        }\r\n      }\r\n\r\n      var attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n      attributeList.forEach((attribute) => {\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n            attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n              attributeValidation.attributeValidationErrors[\r\n                attributeMetaData.Code\r\n              ] = Utilities.valiateAttributeField(\r\n                attributeMetaData,\r\n                attributeMetaData.DefaultValue\r\n              );\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      this.setState({ validationErrors, attributeValidationErrors });\r\n\r\n      var returnValue = true;\r\n      attributeValidationErrors.forEach((x) => {\r\n        if (returnValue) {\r\n          returnValue = Object.values(x.attributeValidationErrors).every(\r\n            function (value) {\r\n              return value === \"\";\r\n            }\r\n          );\r\n        } else {\r\n          return returnValue;\r\n        }\r\n      });\r\n\r\n      if (returnValue)\r\n        returnValue = Object.values(validationErrors).every(function (value) {\r\n          return value === \"\";\r\n        });\r\n\r\n      return returnValue;\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on validateSave\", error);\r\n    }\r\n  }\r\n\r\n  createProcessConfig(modProcessConfig) {\r\n    this.handleAuthenticationClose();\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.ProcessName,\r\n        value: modProcessConfig.ProcessName,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.ProcessName,\r\n      KeyCodes: keyCode,\r\n      Entity: modProcessConfig,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ExeConfiguration_AddUpdateStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ExeConfiguration_ExeName\"],\r\n          keyValues: [modProcessConfig.ProcessName],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.CreateProcessConfiguration,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnProcessConfiguration\r\n              ),\r\n            },\r\n            () => this.getProcessConfig({ ProcessConfig_ProcessName: modProcessConfig.ProcessName })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnProcessConfiguration\r\n            ),\r\n          });\r\n          console.log(\"Error in create ProcessConfig:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modProcessConfig, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnProcessConfiguration\r\n          ),\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modProcessConfig, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  updateProcessConfig(modProcessConfig) {\r\n    this.handleAuthenticationClose();\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.ProcessName,\r\n        value: modProcessConfig.ProcessName,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.ProcessName,\r\n      KeyCodes: keyCode,\r\n      Entity: modProcessConfig,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ExeConfiguration_AddUpdateStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ExeConfiguration_ExeName\"],\r\n          keyValues: [modProcessConfig.ProcessName],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateProcessConfiguration,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnProcessConfiguration\r\n              ),\r\n            },\r\n            () => this.getProcessConfig({ ProcessConfig_ProcessName: modProcessConfig.ProcessName })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnProcessConfiguration\r\n            ),\r\n          });\r\n          console.log(\"Error in update ProcessConfig:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modProcessConfig, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.modify,\r\n            fnProcessConfiguration\r\n          ),\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modProcessConfig, \"modify\", notification);\r\n      });\r\n  }\r\n\r\n  handleAvailableDeviceSelection = (e) => {\r\n    this.setState({ selectedAvailableDevices: e });\r\n  }\r\n\r\n  handleAssociatedDeviceSelection = (e) => {\r\n    this.setState({ selectedAssociatedDevices: e });\r\n  }\r\n\r\n  handleDeviceAssociation = () => {\r\n    try {\r\n      this.setState({ isReadyToRender: false }, () => {\r\n        const selectedAvailableDevices = lodash.cloneDeep(this.state.selectedAvailableDevices);\r\n        let availableDevices = lodash.cloneDeep(this.state.availableDevices);\r\n        let associatedDevices = lodash.cloneDeep(this.state.associatedDevices);\r\n        selectedAvailableDevices.forEach((obj) => {\r\n          associatedDevices.push(obj);\r\n          availableDevices = availableDevices.filter(\r\n            (com) => {\r\n              return (com.DeviceCode !== obj.DeviceCode);\r\n            });\r\n        })\r\n        this.setState({ associatedDevices, selectedAvailableDevices: [], availableDevices, isReadyToRender: true })\r\n      })\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handleDeviceAssociation\", error);\r\n    }\r\n  }\r\n\r\n  handleDeviceDisassociation = () => {\r\n    try {\r\n      this.setState({ isReadyToRender: false }, () => {\r\n        const selectedAssociatedDevices = lodash.cloneDeep(this.state.selectedAssociatedDevices);\r\n        let availableDevices = lodash.cloneDeep(this.state.availableDevices);\r\n        let associatedDevices = lodash.cloneDeep(this.state.associatedDevices);\r\n        selectedAssociatedDevices.forEach((obj) => {\r\n          availableDevices.push(obj);\r\n          associatedDevices = associatedDevices.filter(\r\n            (com) => {\r\n              return (com.DeviceCode !== obj.DeviceCode);\r\n            });\r\n        })\r\n        this.setState({ associatedDevices, selectedAssociatedDevices: [], availableDevices, isReadyToRender: true })\r\n      })\r\n    } catch (error) {\r\n      console.log(\"ProcessConfigDetailsComposite:Error occured on handleDeviceAssociation\", error);\r\n    }\r\n  }\r\n\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] = Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProcessConfigDetailsComposite:Error occured on handleAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  \r\n\r\n  render() {\r\n    const listOptions = {\r\n      workFlowTypeOptions: this.state.workFlowTypeOptions,\r\n      deviceTypeOptions: this.state.deviceTypeOptions,\r\n      deviceCodeOptions: this.state.deviceCodeOptions,\r\n      availableDevices: this.state.availableDevices,\r\n      associatedDevices: this.state.associatedDevices,\r\n      selectedAvailableDevices: this.state.selectedAvailableDevices,\r\n      selectedAssociatedDevices: this.state.selectedAssociatedDevices\r\n    }\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"ProcessConfig_LastUpdatedTime\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modProcessConfig.LastUpdatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modProcessConfig.LastUpdatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"ProcessConfig_CreatedTime\",\r\n        fieldValue:\r\n          new Date(this.state.modProcessConfig.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modProcessConfig.CreatedTime).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"ProcessConfig_LastActiveTime\",\r\n        fieldValue: this.state.modProcessConfig.LastActiveTime !== undefined &&\r\n          this.state.modProcessConfig.LastActiveTime !== null\r\n          ?\r\n          new Date(this.state.modProcessConfig.LastActiveTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modProcessConfig.LastActiveTime).toLocaleTimeString() : \"\",\r\n      }\r\n    ];\r\n\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.processConfig.ProcessName}\r\n            newEntityName={\"ExeConfiguration_Title\"}\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n\r\n        <ErrorBoundary>\r\n          <ProcessConfigDetails\r\n            processConfig={this.state.processConfig}\r\n            modProcessConfig={this.state.modProcessConfig}\r\n            listOptions={listOptions}\r\n            validationErrors={this.state.validationErrors}\r\n            onFieldChange={this.handleChange}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            pageSize={this.props.userDetails.EntityResult.PageAttibutes.WebPortalListPageSize}\r\n            onAvailableDeviceSelection={this.handleAvailableDeviceSelection}\r\n            onAssociatedDeviceSelection={this.handleAssociatedDeviceSelection}\r\n            onDeviceAssociation={this.handleDeviceAssociation}\r\n            onDeviceDisassociation={this.handleDeviceDisassociation}\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            onAttributeDataChange={this.handleAttributeDataChange}\r\n            isMultidrop={this.state.isMultidrop}\r\n          >\r\n          </ProcessConfigDetails>\r\n        </ErrorBoundary>\r\n\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.processConfig.ProcessName === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnProcessConfiguration}\r\n            handleOperation={this.saveProcessConfig}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProcessConfigDetailsComposite);\r\n\r\nProcessConfigDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["ProcessConfigDetails","_ref","processConfig","modProcessConfig","validationErrors","onFieldChange","onActiveStatusChange","listOptions","pageSize","onAvailableDeviceSelection","onAssociatedDeviceSelection","onDeviceAssociation","onDeviceDisassociation","modAttributeMetaDataList","attributeValidationErrors","onAttributeDataChange","isMultidrop","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","_jsx","TranslationConsumer","children","t","_jsxs","className","Input","fluid","value","ProcessName","indicator","disabled","onChange","data","label","error","reserveSpace","Select","placeholder","WorkFlowType","options","workFlowTypeOptions","search","noResultsMessage","PrimaryDeviceType","deviceTypeOptions","PrimaryDeviceCode","deviceCodeOptions","Active","text","Remarks","DataTable","availableDevices","selectionMode","selection","selectedAvailableDevices","onSelectionChange","rows","searchPlaceholder","Column","field","header","editFieldType","Array","isArray","length","Pagination","style","textAlign","Button","type","icon","Icon","name","root","content","iconPosition","onClick","associatedDevices","selectedAssociatedDevices","map","attribute","ErrorBoundary","Accordion","Content","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","handleCellDataEdit","defaultProps","ProcessConfigDetailsComposite","Component","constructor","arguments","state","lodash","emptyProcessConfigInfo","Utilities","processConfigValidationDef","isReadyToRender","saveEnabled","tempProcessConfig","handleChange","propertyName","this","setState","handleWorkFlowTypeChange","handePrimaryDeviceTypeChanges","getMultiDropDevices","undefined","console","log","handleActiveStatusChange","handleReset","Object","keys","forEach","key","selectedCompRow","localNodeAttribute","handleResetAttributeValidationError","getProcessConfigDeviceType","getProcessConfigDeviceCodes","saveProcessConfig","createProcessConfig","updateProcessConfig","handleSave","fillDetails","attributeList","validateSave","Attributes","showAuthenticationLayout","props","userDetails","EntityResult","IsWebPortalUser","handleAvailableDeviceSelection","e","handleAssociatedDeviceSelection","handleDeviceAssociation","obj","push","filter","com","DeviceCode","handleDeviceDisassociation","handleAttributeDataChange","matchedAttributes","matchedAttributesList","modattribute","Code","DefaultValue","handleAuthenticationClose","componentDidMount","IsArchived","getAttributes","selectedRow","getWorkFlowType","componentWillReceiveProps","nextProps","Common_Code","tokenDetails","tokenInfo","getProcessConfig","processConfigRow","ProcessConfig_ProcessName","keyCode","KeyCodes","keyDataCode","axios","RestAPIs","then","response","result","IsSuccess","Constants","FunctionsList","functionGroups","modify","fnProcessConfiguration","ErrorList","catch","add","processConfigAttributeEntity","PROCESSCONFIG","terminalSelectionChange","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","baseproductAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","Table","element","WorkflowCode","workFlowType","deviceType","deviceCode","Table2","IsMultiDrop","AssociatedDevices","modDevice","Table1","devices","DeviceType","returnValue","values","every","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","onSaved","render","popUpContents","fieldName","fieldValue","Date","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","CreatedTime","LastActiveTime","TMDetailsHeader","entityCode","newEntityName","PageAttibutes","WebPortalListPageSize","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","margin","Popup","marginLeft","size","position","List","float","handleAttributeDateValue","convertAttributeDatetoString","chars","split","Dateval","getFullYear","getMonth","slice","getDate","DataType","toLowerCase","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","INT","LONG","FLOAT","DOUBLE","BOOL","Checkbox","checked","toString","DATETIME","DatePicker","displayFormat","getCurrentDateFormat","showYearSelector","onTextChange","toLocaleString","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","getOptionsWithSelect","ddlOptions","selectOptionText","option","unshift","language","window","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}