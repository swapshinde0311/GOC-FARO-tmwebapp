{"version":3,"file":"static/js/763.00059ec1.chunk.js","mappings":"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","sources":["Components/UIBase/Details/ATGInterfaceConfigurationDetails.jsx","Components/Composite/Details/ATGInterfaceConfigurationDetailsComposite.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Select, Input, Checkbox } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\n\r\nATGInterfaceConfigurationDetails.propTypes = {\r\n    AtgAttributeConfigurationData: PropTypes.object.isRequired,\r\n    modATGTankInfo: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    isEnterpriseNode: PropTypes.bool.isRequired,\r\n    handleCellCheck: PropTypes.func.isRequired,\r\n    tankObj: PropTypes.array,\r\n    handleCellDataEdit: PropTypes.func.isRequired,\r\n    handleCellParameterDataEdit:PropTypes.func.isRequired\r\n}\r\n\r\nATGInterfaceConfigurationDetails.defaultProps = {\r\n    isEnterpriseNode: false,\r\n}\r\nexport function ATGInterfaceConfigurationDetails({\r\n    AtgAttributeConfigurationData,\r\n    modATGTankInfo,\r\n    onFieldChange,\r\n    tankObj,\r\n    handleCellCheck,\r\n    handleCellDataEdit,\r\n    handleCellParameterDataEdit\r\n}) {\r\n    console.log(AtgAttributeConfigurationData)\r\n    const handleCustomEditTextBox = (cellData) => {\r\n        console.log(cellData.rowData)\r\n        \r\n        return (\r\n            <Input\r\n                fluid\r\n                value={AtgAttributeConfigurationData[cellData.rowIndex][cellData.field].Point}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n            />\r\n        );\r\n    };\r\n    const handleEditTextBox = (cellData) => {\r\n        return (\r\n            <Input\r\n                fluid\r\n                value={AtgAttributeConfigurationData[cellData.rowIndex][cellData.field].Parameter}\r\n                onChange={(value) => handleCellParameterDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n            />\r\n        );\r\n    };\r\n    const decimalDisplayValues = (cellData) => {\r\n        const  value  = cellData;\r\n        if (typeof value === \"number\") {\r\n            return value.toLocaleString();\r\n        } else {\r\n            return value;\r\n        }\r\n    };\r\n    const handleCheckBox = (data) => {\r\n        return (\r\n            <Checkbox\r\n                className=\"forceCompleteChkBox\"\r\n                checked={data.value}\r\n                onChange={(cellData) => {\r\n                    handleCellCheck(data, cellData);\r\n                }}\r\n            />\r\n        );\r\n    };\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h3>\r\n                                {tankObj.Code +\" - \"+  t(\"AtgConfiguration_Title\")\r\n                                }\r\n                            </h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row marginRightZero tableScroll\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modATGTankInfo.TankCode}\r\n                                indicator=\"required\"\r\n                                disabled={modATGTankInfo.TankCode!== \"\"}\r\n                                label={t(\"TankTransaction_TankCode\")}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={tankObj.Name}\r\n                                label={t(\"TankInfo_Name\")}\r\n                                disabled={true}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={tankObj.TankGroupCode}\r\n                                label={t(\"AtgConfigure_TankGroup\")}\r\n                                disabled={true}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={tankObj.Description}\r\n                                label={t(\"TankInfo_Description\")}\r\n                               disabled={true}\r\n                               reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={tankObj.BaseProductCode}\r\n                                label={t(\"AtgConfigure_BaseProduct\")}\r\n                                disabled={true}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        \r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"AtgConfigure_TankStatus\")}\r\n                                value={tankObj.Active}\r\n                                options={[\r\n                                    { text: t(\"ViewShipment_Ok\"), value: true },\r\n                                    { text: t(\"ViewShipmentStatus_Inactive\"), value: false },\r\n                                ]}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                disabled={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <div class=\"ui input-label\">\r\n                                <span className=\"input-label-message\">\r\n                                    {t(\"AtgConfigure_EnableTankScan\")}\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"input-wrap \" style={{marginLeft: \"8rem\",\r\n                            marginTop: \"-1.3rem\"}}>\r\n                                <Checkbox\r\n                                    key=\"EnableTankScan\"\r\n                                    field=\"EnableTankScan\"\r\n                                    onChange={(data) => onFieldChange(\"EnableTankScan\", data)}\r\n                                    checked={modATGTankInfo.EnableTankScan === null ? \"\" : modATGTankInfo.EnableTankScan}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <DataTable\r\n                                data={AtgAttributeConfigurationData}\r\n                                scrollable={true}\r\n                                scrollHeight=\"320px\"\r\n                            >\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"TankAttributeDescription\"\r\n                                    field=\"TankAttributeDescription\"\r\n                                    header={t(\"AtgConfigure_Atg_Data_Description\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"TankAttributeUOM\"\r\n                                    field=\"TankAttributeUOM\"\r\n                                    header={t(\"AtgConfigure_UOM\")}\r\n                                ></DataTable.Column>\r\n                                \r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"Parameter\"\r\n                                    field=\"Parameter\"\r\n                                    renderer={(cellData)=>decimalDisplayValues(cellData.rowData.Parameter.Point)}\r\n                                    editable={true}\r\n                                    customEditRenderer={handleCustomEditTextBox}\r\n                                    header={t(\"AtgConfigure_PointName\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"Parameter\"\r\n                                    field=\"Parameter\"\r\n                                    renderer={(cellData) => decimalDisplayValues(cellData.rowData.Parameter.Parameter)}\r\n                                    editable={true}\r\n                                    customEditRenderer={handleEditTextBox}\r\n                                    header={t(\"AtgConfigure_ParameterName\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight colminWidth\"\r\n                                    key=\"EnableScan\"\r\n                                    field=\"EnableScan\"\r\n                                    header={t(\"AtgConfigure_EnableScan\")}\r\n                                    renderer={handleCheckBox}\r\n                                ></DataTable.Column>\r\n                            </DataTable>\r\n                            </div> \r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport lodash from \"lodash\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { emptyATGTank } from \"../../../JS/DefaultEntities\"\r\nimport { ATGInterfaceConfigurationDetails } from \"../../UIBase/Details/ATGInterfaceConfigurationDetails\";\r\nclass ATGInterfaceConfigurationDetailsComposite extends Component {\r\n    state = {\r\n        TankInfo:lodash.cloneDeep(emptyATGTank),\r\n        modATGTankInfo: {},\r\n        AtgAttributeConfigurationData: {},\r\n        saveEnabled: true\r\n    }\r\n    componentDidMount() {\r\n        try {\r\n            Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n            console.log(this.props.tankObj)\r\n            this.GetTankATGConfiguration(this.props.tankObj.Code)\r\n        } catch (error) {\r\n            console.log(\r\n                \"ATGInterfaceConfigurationDetailsComposite:Error occured on componentDidMount\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    handleChange = (propertyName, data) => {\r\n        try {\r\n            const modATGTankInfo = lodash.cloneDeep(this.state.modATGTankInfo);\r\n            modATGTankInfo[propertyName] = data;\r\n            this.setState({ modATGTankInfo });\r\n        } catch (error) {\r\n            console.log(\r\n                \"TruckReceiptDetailsComposite:Error occured on handleChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    GetTankATGConfiguration(TankCode) {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetTankATGConfiguration + \"?TankCode=\" + TankCode,\r\n                Utilities.getAuthenticationObjectforGet(\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        let AtgAttributeConfigurationData = result.EntityResult.AtgAttributeConfigurationData;\r\n                        for (let i = 0; i < AtgAttributeConfigurationData.length; i++) {\r\n                            AtgAttributeConfigurationData[i].Parameter.Parameter = AtgAttributeConfigurationData[i].Parameter.Parameter\r\n                            AtgAttributeConfigurationData[i].Parameter.Point = AtgAttributeConfigurationData[i].Parameter.Point\r\n                        }\r\n                        this.setState({\r\n                            modATGTankInfo: result.EntityResult,\r\n                            TankInfo: result.EntityResult,\r\n                            AtgAttributeConfigurationData\r\n                        });\r\n                    } else {\r\n                        console.log(\"Error in GetTankATGConfiguration:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Error while getting GetTankATGConfiguration:\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"Error while getting GetTankATGConfiguration:\", error);\r\n        }\r\n    }\r\n    handleCellCheck = (data, cellData) => {\r\n        \r\n        try {\r\n            let AtgAttributeConfigurationData = lodash.cloneDeep(this.state.AtgAttributeConfigurationData);\r\n            AtgAttributeConfigurationData[data.rowIndex].EnableScan = cellData;\r\n            this.setState({ AtgAttributeConfigurationData });\r\n        } catch (error) {\r\n            console.log(\"Error in handleCellcheck\", error)\r\n        }\r\n    };\r\n    fillDetails() {\r\n        try {\r\n            let modATGTankInfo = lodash.cloneDeep(this.state.modATGTankInfo);\r\n            let AtgAttributeConfigurationData = lodash.cloneDeep(this.state.AtgAttributeConfigurationData)\r\n            let tankComps = [];\r\n            if (Array.isArray(AtgAttributeConfigurationData)) {\r\n                AtgAttributeConfigurationData.forEach((item) => {\r\n                   \r\n                        tankComps.push(item);\r\n                    }\r\n                )\r\n            }\r\n            modATGTankInfo.AtgAttributeConfigurationData = tankComps;\r\n            // this.setState({ modATGTankInfo });\r\n            return modATGTankInfo;\r\n\r\n        } catch (error) {\r\n            console.log(\"ATGInterfaceDetailsComposite:Error occured on fillAttributeDetails\", error);\r\n        }\r\n    }\r\n    handleSave = () => {\r\n        try {\r\n            this.setState({ saveEnabled: true });\r\n            let AtgConfigurationInfo = this.fillDetails()\r\n            this.UpdateATGConfiguration(AtgConfigurationInfo);\r\n            \r\n        } catch (error) {\r\n            console.log(\r\n                \"PipelineReceiptDetailsComposite:Error occured on handleSave\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    handleReset = () => {\r\n        try {\r\n            let TankInfo = lodash.cloneDeep(this.state.TankInfo)\r\n            this.setState({\r\n                modATGTankInfo: TankInfo,\r\n                AtgAttributeConfigurationData: TankInfo.AtgAttributeConfigurationData\r\n            });\r\n        } catch (error) {\r\n            console.log(\"ATGInterfaceDetailsComposite:Error occured on handleReset\", error);\r\n        }\r\n    }\r\n    handleCellDataEdit = (newVal, cellData) => {\r\n        try {\r\n            let AtgAttributeConfigurationData = lodash.cloneDeep(\r\n                this.state.AtgAttributeConfigurationData\r\n            );\r\n                AtgAttributeConfigurationData[cellData.rowIndex][cellData.field].Point = newVal;\r\n            this.setState({ AtgAttributeConfigurationData });\r\n        } catch (error) {\r\n            console.log(\r\n                \"BayDetailsComposite:Error occured on handleCellDataEdit\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    handleCellParameterDataEdit = (newVal, cellData) => {\r\n        try {\r\n            let AtgAttributeConfigurationData = lodash.cloneDeep(\r\n                this.state.AtgAttributeConfigurationData\r\n            );\r\n            \r\n            AtgAttributeConfigurationData[cellData.rowIndex][cellData.field].Parameter = newVal;\r\n            this.setState({ AtgAttributeConfigurationData });\r\n        } catch (error) {\r\n            console.log(\r\n                \"BayDetailsComposite:Error occured on handleCellDataEdit\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    UpdateATGConfiguration = (AtgConfigurationInfo) => {\r\n        \r\n        let modATGTankInfo = lodash.cloneDeep(this.state.modATGTankInfo);\r\n        var notification = {\r\n            messageType: \"critical\",\r\n            message: \"ATG_Details_Saved_Success\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [\"AtgConfigure_TankCode\"],\r\n                    keyValues: [modATGTankInfo.TankCode],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n        var obj = {\r\n            Entity: AtgConfigurationInfo,\r\n        };\r\n        axios(\r\n            RestAPIs.UpdateATGConfiguration,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                \r\n                var result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState({ modATGTankInfo }, () => {\r\n                        this.GetTankATGConfiguration(\r\n                            { TankCode: modATGTankInfo.TankCode },\r\n                            \r\n                        );\r\n                    });\r\n                } else {\r\n                    notification.messageResultDetails[0].errorMessage =\r\n                        result.ErrorList[0];\r\n                    this.setState({\r\n                        saveEnabled:true\r\n                    });\r\n                    console.log(\"Error in updatePipelineReceipt:\", result.ErrorList);\r\n                }\r\n                toast(\r\n                    <ErrorBoundary>\r\n                        <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                    </ErrorBoundary>,\r\n                    {\r\n                        autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n                    }\r\n                );\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    saveEnabled: true\r\n                });\r\n                notification.messageResultDetails[0].errorMessage = error;\r\n                toast(\r\n                    <ErrorBoundary>\r\n                        <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                    </ErrorBoundary>,\r\n                    {\r\n                        autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n                    }\r\n                );\r\n            });\r\n        \r\n\r\n        this.setState({\r\n            modATGTankInfo: this.state.modATGTankInfo,\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ATGInterfaceConfigurationDetails\r\n                modATGTankInfo={this.state.modATGTankInfo}\r\n                AtgAttributeConfigurationData={this.state.AtgAttributeConfigurationData}\r\n                tankObj={this.props.tankObj}\r\n                handleCellCheck={this.handleCellCheck}\r\n                handleCellDataEdit={this.handleCellDataEdit}\r\n                handleCellParameterDataEdit={this.handleCellParameterDataEdit}\r\n                onFieldChange={this.handleChange}\r\n            >\r\n            </ATGInterfaceConfigurationDetails>\r\n                <ErrorBoundary>\r\n                    <TMDetailsUserActions\r\n                        handleBack={this.props.onBack}\r\n                        handleSave={this.handleSave}\r\n                        handleReset={this.handleReset}\r\n                        saveEnabled={this.state.saveEnabled}\r\n                    ></TMDetailsUserActions>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <ToastContainer\r\n                        hideProgressBar={true}\r\n                        closeOnClick={false}\r\n                        closeButton={true}\r\n                        newestOnTop={true}\r\n                        position=\"bottom-right\"\r\n                        toastClassName=\"toast-notification-wrap\"\r\n                    />\r\n                </ErrorBoundary>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n    const mapStateToProps = (state) => {\r\n        return {\r\n            userDetails: state.getUserDetails.userDetails,\r\n            tokenDetails: state.getUserDetails.TokenAuth,\r\n        };\r\n    };\r\n\r\nexport default connect(mapStateToProps)(ATGInterfaceConfigurationDetailsComposite);\r\n\r\nATGInterfaceConfigurationDetailsComposite.propTypes = {\r\n    tankObj: PropTypes.object.isRequired,\r\n    onBack: PropTypes.func.isRequired,\r\n    onSaved: PropTypes.func.isRequired,\r\n    terminalCodes: PropTypes.array.isRequired,\r\n    handleATGConfiguration: PropTypes.func.isRequired,\r\n    activeItem: PropTypes.object,\r\n};","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n"],"names":["ATGInterfaceConfigurationDetails","_ref","AtgAttributeConfigurationData","modATGTankInfo","onFieldChange","tankObj","handleCellCheck","handleCellDataEdit","handleCellParameterDataEdit","console","log","handleCustomEditTextBox","cellData","rowData","_jsx","Input","fluid","value","rowIndex","field","Point","onChange","reserveSpace","handleEditTextBox","Parameter","decimalDisplayValues","toLocaleString","handleCheckBox","data","Checkbox","className","checked","TranslationConsumer","children","t","_jsxs","Code","TankCode","indicator","disabled","label","Name","TankGroupCode","Description","BaseProductCode","Select","placeholder","Active","options","text","search","noResultsMessage","class","style","marginLeft","marginTop","EnableTankScan","DataTable","scrollable","scrollHeight","Column","header","renderer","editable","customEditRenderer","defaultProps","isEnterpriseNode","ATGInterfaceConfigurationDetailsComposite","Component","constructor","arguments","state","TankInfo","lodash","emptyATGTank","saveEnabled","handleChange","propertyName","this","setState","error","EnableScan","handleSave","AtgConfigurationInfo","fillDetails","UpdateATGConfiguration","handleReset","newVal","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","obj","Entity","axios","RestAPIs","Utilities","props","tokenDetails","tokenInfo","then","response","result","IsSuccess","GetTankATGConfiguration","ErrorList","toast","ErrorBoundary","NotifyEvent","notificationMessage","autoClose","catch","componentDidMount","userDetails","EntityResult","IsArchived","i","length","tankComps","Array","isArray","forEach","item","push","render","TMDetailsUserActions","handleBack","onBack","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","position","toastClassName","connect","getUserDetails","TokenAuth","Button","onClick","content","float"],"sourceRoot":""}