{"version":3,"file":"static/js/5683.a7018c85.chunk.js","mappings":"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","sources":["Components/UIBase/Details/AutoAccessIDAssociationDetails.jsx","Components/UIBase/Details/AutoACLocationDetails.jsx","Components/UIBase/Details/AutoACDetailsSectionDetails.jsx","Components/Composite/Details/AutoAccessIDAssociationDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/DateFieldsInEntities.js","JS/functionalUtilities.js"],"sourcesContent":["import React from \"react\";\r\nimport { Input, DatePicker, Checkbox, Accordion } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\n\r\nAutoAccessIDAssociationDetails.propTypes = {\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  temporaryCard: PropTypes.object.isRequired,\r\n  modTemporaryCard: PropTypes.object.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool.isRequired,\r\n  onDateTextChange: PropTypes.func.isRequired,\r\n  handleShowCard: PropTypes.func.isRequired,\r\n  location: PropTypes.array.isRequired,\r\n  TWICEnabled: PropTypes.string.isRequired,\r\n  isValidateFASCN: PropTypes.func.isRequired,\r\n  isEnterpriseNode: PropTypes.bool.isRequired,\r\n  modAttributeMetaDataList: PropTypes.array.isRequired,\r\n  attributeValidationErrors: PropTypes.array.isRequired,\r\n  onAttributeDataChange: PropTypes.func.isRequired,\r\n};\r\n\r\nAutoAccessIDAssociationDetails.defaultProps = {};\r\n\r\nexport function AutoAccessIDAssociationDetails({\r\n  handleSave,\r\n  handleReset,\r\n  temporaryCard,\r\n  modTemporaryCard,\r\n  validationErrors,\r\n  onFieldChange,\r\n  saveEnabled,\r\n  onDateTextChange,\r\n  handleShowCard,\r\n  location,\r\n  TWICEnabled,\r\n  isValidateFASCN,\r\n  isEnterpriseNode,\r\n  modAttributeMetaDataList,\r\n  attributeValidationErrors,\r\n  onAttributeDataChange,\r\n}) {\r\n  const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n    let attributeValidation = [];\r\n    attributeValidation = attributeValidationErrors.find(\r\n      (selectedAttribute) => {\r\n        return selectedAttribute.TerminalCode === terminal;\r\n      }\r\n    );\r\n    return attributeValidation.attributeValidationErrors;\r\n  };\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"autoDetailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modTemporaryCard.PIN === \"\" ? \"\" : modTemporaryCard.PIN}\r\n                label={t(\"AccessCardInfo_x_IDCode\")}\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"PIN\", data)}\r\n                error={t(validationErrors.PIN)}\r\n                disabled={true}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-8\" style={{ marginTop: 24 }}>\r\n              {location.length === 0 ? (\r\n                \"\"\r\n              ) : (\r\n                <Button\r\n                  content={t(\"TempororyCard_ShowTempCard\")}\r\n                  className=\"backButton\"\r\n                  onClick={handleShowCard}\r\n                ></Button>\r\n              )}\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  modTemporaryCard.Description === null\r\n                    ? \"\"\r\n                    : modTemporaryCard.Description\r\n                }\r\n                label={t(\"AccessCardInfo_Description\")}\r\n                onChange={(data) => onFieldChange(\"Description\", data)}\r\n                error={t(validationErrors.Description)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modTemporaryCard.CardType}\r\n                label={t(\"AccessCardList_x_ID_Category\")}\r\n                onChange={(data) => onFieldChange(\"CardType\", data)}\r\n                error={t(validationErrors.CardType)}\r\n                disabled={true}\r\n                indicator=\"required\"\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            {modTemporaryCard.CardType === \"ELECTRONIC\" &&\r\n            TWICEnabled === \"1\" ? (\r\n              <div\r\n                className=\"col-12 col-md-6 col-lg-4\"\r\n                style={{ marginTop: 21 }}\r\n              >\r\n                <Checkbox\r\n                  label={t(\"AccessCardInfo_IsTWICCard\")}\r\n                  checked={modTemporaryCard.ISTWICCARD}\r\n                  onChange={(checked) => onFieldChange(\"ISTWICCARD\", checked)}\r\n                  disabled={temporaryCard.PIN !== \"\"}\r\n                ></Checkbox>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {modTemporaryCard.ISTWICCARD === true ? (\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={\r\n                    modTemporaryCard.FASCN === null\r\n                      ? \"\"\r\n                      : modTemporaryCard.FASCN\r\n                  }\r\n                  label={t(\"AccessCardInfo_FASCN\")}\r\n                  onChange={(data) => onFieldChange(\"FASCN\", data)}\r\n                  onBlur={isValidateFASCN}\r\n                  error={t(validationErrors.FASCN)}\r\n                  disabled={temporaryCard.PIN !== \"\"}\r\n                  indicator=\"required\"\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <DatePicker\r\n                fluid\r\n                value={\r\n                  modTemporaryCard.ExpiryDate === null\r\n                    ? \"\"\r\n                    : new Date(modTemporaryCard.ExpiryDate)\r\n                }\r\n                label={t(\"AccessCardInfo_x_CardExpiry\")}\r\n                disablePast={true}\r\n                indicator=\"required\"\r\n                // onChange={(data) => onFieldChange(\"ExpiryDate\", data)}\r\n                error={t(validationErrors.ExpiryDate)}\r\n                onTextChange={(value, error) => {\r\n                  onDateTextChange(\"ExpiryDate\", value, error);\r\n                }}\r\n                displayFormat={getCurrentDateFormat()}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\" style={{ marginTop: 21 }}>\r\n              <Checkbox\r\n                label={t(\"AccessCardInfo_x_Locked\")}\r\n                checked={modTemporaryCard.Locked}\r\n                onChange={(checked) => onFieldChange(\"Locked\", checked)}\r\n                disabled={\r\n                  temporaryCard.PIN === \"\" ||\r\n                  modTemporaryCard.CardStatus === Constants.CardStatus.EXPIRED\r\n                }\r\n              ></Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  modTemporaryCard.CardStatus === null\r\n                    ? \"\"\r\n                    : modTemporaryCard.CardStatus\r\n                }\r\n                label={t(\"AccessCardInfo_x_CardUsageStatus\")}\r\n                disabled={true}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4 \">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  temporaryCard.PIN === \"\" ||\r\n                  modTemporaryCard.LastLockingTime === undefined ||\r\n                  modTemporaryCard.LastLockingTime === null\r\n                    ? \"\"\r\n                    : new Date(\r\n                        modTemporaryCard.LastLockingTime\r\n                      ).toLocaleString()\r\n                }\r\n                label={t(\"DriverInfo_LastLocking\")}\r\n                disabled={true}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  modTemporaryCard.Remarks === null\r\n                    ? \"\"\r\n                    : modTemporaryCard.Remarks\r\n                }\r\n                label={t(\"AccessCardInfo_Remarks\")}\r\n                disabled={temporaryCard.PIN === \"\"}\r\n                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                indicator={modTemporaryCard.Locked ? \"required\" : \"\"}\r\n                error={t(validationErrors.Remarks)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n          </div>\r\n          {modAttributeMetaDataList.length > 0 && !isEnterpriseNode\r\n            ? modAttributeMetaDataList.map((attire) => (\r\n                <ErrorBoundary>\r\n                  <Accordion>\r\n                    <Accordion.Content\r\n                      className=\"attributeAccordian\"\r\n                      title={\r\n                        isEnterpriseNode\r\n                          ? attire.TerminalCode + \" - \" + t(\"Attributes_Header\")\r\n                          : t(\"Attributes_Header\")\r\n                      }\r\n                    >\r\n                      <AttributeDetails\r\n                        selectedAttributeList={attire.attributeMetaDataList}\r\n                        handleCellDataEdit={onAttributeDataChange}\r\n                        attributeValidationErrors={handleValidationErrorFilter(\r\n                          attributeValidationErrors,\r\n                          attire.TerminalCode\r\n                        )}\r\n                      ></AttributeDetails>\r\n                    </Accordion.Content>\r\n                  </Accordion>\r\n                </ErrorBoundary>\r\n              ))\r\n            : null}\r\n          <div className=\"detailsButton\">\r\n            <Button\r\n              content={t(\"Channel_Reset\")}\r\n              className=\"cancelButton\"\r\n              onClick={handleReset}\r\n            ></Button>\r\n            <Button\r\n              content={t(\"AccessCardInfo_Save\")}\r\n              disabled={!saveEnabled}\r\n              onClick={handleSave}\r\n            ></Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Input } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"@scuf/common\";\r\n\r\nAutoACLocationDetails.propTypes = {\r\n  handleSetLocation: PropTypes.func.isRequired,\r\n  location: PropTypes.array.isRequired,\r\n};\r\n\r\nAutoACLocationDetails.defaultProps = {};\r\n\r\nexport function AutoACLocationDetails({ handleSetLocation, location }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"autoDetailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={location === undefined ? \"\" : location[1]}\r\n                label={t(\"Location_Code\")}\r\n                disabled=\"true\"\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={location === undefined ? \"\" : location[2]}\r\n                label={t(\"LocationInfo_LocationType\")}\r\n                disabled=\"true\"\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={location === undefined ? \"\" : location[0]}\r\n                label={t(\"CardReader_Title\")}\r\n                disabled=\"true\"\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"detailsButton\">\r\n            <Button\r\n              content={t(\"TemporaryCard_SetLocation\")}\r\n              onClick={handleSetLocation}\r\n            ></Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Select } from \"@scuf/common\";\r\nimport { Input } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"@scuf/common\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\n\r\nAutoACDetailsSectionDetails.propTypes = {\r\n  temporaryCard: PropTypes.object.isRequired,\r\n  modTemporaryCard: PropTypes.object.isRequired,\r\n  handleIssueID: PropTypes.func.isRequired,\r\n  handleActivateID: PropTypes.func.isRequired,\r\n  handleRevoleID: PropTypes.func.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    carrierCompanies: PropTypes.array,\r\n    entityTypes: PropTypes.array,\r\n    entityValues: PropTypes.array,\r\n  }).isRequired,\r\n  issueEnabled: PropTypes.bool,\r\n  activateEnable: PropTypes.bool,\r\n  revokeEnable: PropTypes.bool,\r\n};\r\n\r\nAutoACDetailsSectionDetails.defaultProps = {};\r\n\r\nexport function AutoACDetailsSectionDetails({\r\n  temporaryCard,\r\n  modTemporaryCard,\r\n  handleIssueID,\r\n  handleRevoleID,\r\n  handleActivateID,\r\n  validationErrors,\r\n  listOptions,\r\n  onFieldChange,\r\n  issueEnabled,\r\n  activateEnable,\r\n  revokeEnable,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"autoDetailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                indicator={\r\n                  modTemporaryCard.EntityName ===\r\n                    Constants.CommonEntityType.Visitor ||\r\n                  modTemporaryCard.EntityName ===\r\n                    Constants.CommonEntityType.TMUser ||\r\n                  modTemporaryCard.EntityName ===\r\n                    Constants.CommonEntityType.Staff\r\n                    ? \"\"\r\n                    : \"required\"\r\n                }\r\n                value={\r\n                  modTemporaryCard.EntityName ===\r\n                    Constants.CommonEntityType.Visitor ||\r\n                  modTemporaryCard.EntityName ===\r\n                    Constants.CommonEntityType.TMUser ||\r\n                  modTemporaryCard.EntityName ===\r\n                    Constants.CommonEntityType.Staff\r\n                    ? \"\"\r\n                    : modTemporaryCard.CarrierCode\r\n                }\r\n                label={t(\"AccessCardInfo_x_Carrier\")}\r\n                options={Utilities.transferListtoOptions(\r\n                  listOptions.carrierCompanies\r\n                )}\r\n                onChange={(data) => onFieldChange(\"CarrierCode\", data)}\r\n                error={t(validationErrors.CarrierCode)}\r\n                disabled={\r\n                  modTemporaryCard.CardStatus !==\r\n                    Constants.CardStatus.AVAILABLE ||\r\n                  modTemporaryCard.EntityName ===\r\n                    Constants.CommonEntityType.Visitor ||\r\n                  modTemporaryCard.EntityName ===\r\n                    Constants.CommonEntityType.TMUser ||\r\n                  modTemporaryCard.EntityName ===\r\n                    Constants.CommonEntityType.Staff\r\n                }\r\n                reserveSpace={false}\r\n                multiple={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                indicator=\"required\"\r\n                value={modTemporaryCard.EntityName}\r\n                label={t(\"AccessCardInfo_x_IssuedTo\")}\r\n                options={Utilities.transferListtoOptions(\r\n                  listOptions.entityTypes\r\n                )}\r\n                onChange={(data) => onFieldChange(\"EntityName\", data)}\r\n                error={t(validationErrors.EntityName)}\r\n                disabled={\r\n                  modTemporaryCard.CardStatus !== Constants.CardStatus.AVAILABLE\r\n                }\r\n                multiple={false}\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                indicator=\"required\"\r\n                value={modTemporaryCard.EntityValue}\r\n                label={t(\"AccessCardInfo_x_Details\")}\r\n                options={Utilities.transferListtoOptions(\r\n                  listOptions.entityValues\r\n                )}\r\n                onChange={(data) => onFieldChange(\"EntityValue\", data)}\r\n                error={t(validationErrors.EntityValue)}\r\n                disabled={\r\n                  modTemporaryCard.CardStatus !== Constants.CardStatus.AVAILABLE\r\n                }\r\n                multiple={false}\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  temporaryCard.PIN === \"\" ||\r\n                  modTemporaryCard.IssueDate === null\r\n                    ? \"\"\r\n                    : new Date(modTemporaryCard.IssueDate).toLocaleString()\r\n                }\r\n                label={t(\"AccessCardInfo_x_IssueDate\")}\r\n                disabled={temporaryCard.IssueDate !== \"\"}\r\n                onChange={(data) => onFieldChange(\"IssueDate\", data)}\r\n                error={t(validationErrors.IssueDate)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={\r\n                  temporaryCard.PIN === \"\" ||\r\n                  modTemporaryCard.ActivationTime === null\r\n                    ? \"\"\r\n                    : new Date(modTemporaryCard.ActivationTime).toLocaleString()\r\n                }\r\n                label={t(\"AccessCardList_ActivationTime\")}\r\n                disabled={temporaryCard.ActivationTime !== \"\"}\r\n                onChange={(data) => onFieldChange(\"ActivationTime\", data)}\r\n                error={t(validationErrors.ActivationTime)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"detailsButton\">\r\n            <Button\r\n              disabled={!issueEnabled ? true : modTemporaryCard.CardStatus !== Constants.CardStatus.AVAILABLE ? true : false}\r\n              content={t(\"AccessCardInfo_x_IssueCard\")}\r\n              onClick={handleIssueID}\r\n            ></Button>\r\n            <Button\r\n              disabled={!activateEnable ? true : modTemporaryCard.CardStatus !== Constants.CardStatus.ISSUED ? true : false}\r\n              content={t(\"AccessCardInfo_x_ActivateCard\")}\r\n              onClick={handleActivateID}\r\n            ></Button>\r\n            <Button\r\n              disabled={!revokeEnable ? true : (modTemporaryCard.CardStatus !== Constants.CardStatus.ISSUED && modTemporaryCard.CardStatus !== Constants.CardStatus.ACTIVATED) ? true : false}\r\n              content={t(\"AccessCardInfo_x_RevokeID\")}\r\n              onClick={handleRevoleID}\r\n            ></Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { AutoAccessIDAssociationDetails } from \"../../UIBase/Details/AutoAccessIDAssociationDetails\";\r\nimport { AutoACLocationDetails } from \"../../UIBase/Details/AutoACLocationDetails\";\r\nimport { AutoACDetailsSectionDetails } from \"../../UIBase/Details/AutoACDetailsSectionDetails\";\r\nimport {\r\n  accessIDValidationDef,\r\n  accessIDSectionValidationDef,\r\n} from \"../../../JS/ValidationDef\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { emptyAccessCard } from \"../../../JS/DefaultEntities\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { toast } from \"react-toastify\";\r\nimport axios from \"axios\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as RestApis from \"../../../JS/RestApis\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport {\r\n  functionGroups,\r\n  fnAutoIDAssociation,\r\n  fnIssueCard,\r\n  fnActivateCard,\r\n  fnRevokeCard,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport lodash from \"lodash\";\r\nimport { accessCardAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\nimport * as DateFieldsInEntities from \"../../../JS/DateFieldsInEntities\";\r\n\r\nclass AutoAccessIDAssociationDetailsComposite extends Component {\r\n  state = {\r\n    location: [],\r\n    temporaryCard: lodash.cloneDeep(emptyAccessCard),\r\n    modTemporaryCard: lodash.cloneDeep(emptyAccessCard),\r\n    validationSectionErrors: Utilities.getInitialValidationErrors(\r\n      accessIDSectionValidationDef\r\n    ),\r\n    validationIDErrors: Utilities.getInitialValidationErrors(\r\n      accessIDValidationDef\r\n    ),\r\n    saveEnabled: true,\r\n    issueEnabled: false,\r\n    activateEnable: false,\r\n    revokeEnable: false,\r\n    carrierCompanies: [],\r\n    entityValues: [],\r\n    entityTypes: [],\r\n    cardReadTime: null,\r\n    TWICEnabled: null,\r\n    PIN: null,\r\n    attribute: [],\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    PointName: null,\r\n    ReadStartTime: null,\r\n    CardNumber: \"\",\r\n    isShow: false,\r\n    defaultShow: true,\r\n\r\n    tempTemporaryCard : {},\r\n\r\n    showAccessCardAuthenticationLayout: false,\r\n    showIssueAuthenticationLayout: false,\r\n    showRevokeAuthenticationLayout: false,\r\n    showActivateAuthenticationLayout: false,\r\n     \r\n  };\r\n\r\n  initializeTheButtonEnable() {\r\n    Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n    var { issueEnabled } = { ...this.state };\r\n    var { activateEnable } = { ...this.state };\r\n    var { revokeEnable } = { ...this.state };\r\n    var { saveEnabled } = { ...this.state };\r\n    issueEnabled = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.modify,\r\n      fnIssueCard\r\n    );\r\n    activateEnable = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.modify,\r\n      fnActivateCard\r\n    );\r\n    revokeEnable = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.modify,\r\n      fnRevokeCard\r\n    );\r\n    saveEnabled = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.modify,\r\n      fnAutoIDAssociation\r\n    );\r\n    this.setState({\r\n      issueEnabled,\r\n      activateEnable,\r\n      revokeEnable,\r\n      saveEnabled,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      this.initializeTheButtonEnable();\r\n      this.getCarrierCompanies(this.props.selectedShareholder);\r\n      this.getEntityTypeList(this.props.selectedShareholder);\r\n      this.getAttributes();\r\n    } catch (error) {\r\n      console.log(\r\n        \"AutoAccessIDAssociationDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      // if (\r\n      //   // this.state.temporaryCard.PIN !== \"\" &&\r\n      //   nextProps.CardNumber !== \"\" &&\r\n      //   this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      // ) {\r\n      //   this.getAccessCard(nextProps.CardNumber);\r\n      // }\r\n      if (nextProps.location.length !== 0) {\r\n        const { modTemporaryCard } = this.state;\r\n        let PointName = null;\r\n        modTemporaryCard.PointName = nextProps.location[0][3];\r\n        PointName = nextProps.location[0][3];\r\n        this.setState({\r\n          location: nextProps.location[0],\r\n          modTemporaryCard,\r\n          PointName,\r\n        });\r\n        this.getEntityTypeList(this.props.selectedShareholder);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"AutoAccessIDAssociationDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getAttributes() {\r\n    try {\r\n      axios(\r\n        RestApis.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [accessCardAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult.accessCard === null ||\r\n            result.EntityResult.accessCard === undefined\r\n          ) {\r\n            result.EntityResult.accessCard = [];\r\n          }\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(\r\n                result.EntityResult.accessCard\r\n              ),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.accessCard\r\n                ),\r\n            },\r\n            () => {\r\n              if (\r\n                this.props.userDetails.EntityResult.IsEnterpriseNode === false\r\n              )\r\n                this.localNodeAttribute();\r\n            }\r\n            // () => this.getAccessCard(this.CardNumber)\r\n          );\r\n        } else {\r\n          console.log(\"Failed to get Attributes\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getting Attributes:\", error);\r\n    }\r\n  }\r\n\r\n  getAccessCard(CardNumber) {\r\n    emptyAccessCard.ShareholderCode = this.props.selectedShareholder;\r\n    var CardCode = CardNumber;\r\n    if (CardCode === undefined) {\r\n      this.setState(\r\n        {\r\n          temporaryCard: lodash.cloneDeep(emptyAccessCard),\r\n          modTemporaryCard: lodash.cloneDeep(emptyAccessCard),\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnAutoIDAssociation\r\n          ),\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode === false)\r\n            this.localNodeAttribute();\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.accessCardCode,\r\n        value: CardCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareholderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.accessCardCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n\r\n    axios(\r\n      RestApis.GetAccessCard,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let accessCard = lodash.cloneDeep(result.EntityResult);\r\n          if (result.EntityResult.Password !== null) {\r\n            accessCard.Password = null;\r\n          }\r\n          this.setState(\r\n            {\r\n              temporaryCard: accessCard,\r\n              modTemporaryCard: accessCard,\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnAutoIDAssociation\r\n              ),\r\n            },\r\n            () => {\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                this.terminalSelectionChange(result.EntityResult.TerminalCodes);\r\n              } else {\r\n                this.localNodeAttribute();\r\n              }\r\n            }\r\n          );\r\n          if (\r\n            result.EntityResult.FASCN !== null &&\r\n            result.EntityResult.FASCN !== \"\"\r\n          ) {\r\n            let modTemporaryCard = lodash.cloneDeep(\r\n              this.state.modTemporaryCard\r\n            );\r\n            modTemporaryCard.ISTWICCARD = true;\r\n            this.setState(modTemporaryCard);\r\n          }\r\n        } else {\r\n          let modTemporaryCard = lodash.cloneDeep(emptyAccessCard);\r\n          modTemporaryCard.PIN = CardCode;\r\n          modTemporaryCard.CardType = \"ELECTRONIC\";\r\n          this.setState(\r\n            {\r\n              temporaryCard: lodash.cloneDeep(emptyAccessCard),\r\n              modTemporaryCard,\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnAutoIDAssociation\r\n              ),\r\n            },\r\n            () => {\r\n              if (\r\n                this.props.userDetails.EntityResult.IsEnterpriseNode === false\r\n              )\r\n                this.localNodeAttribute();\r\n            }\r\n          );\r\n          console.log(\"Error in GetAccessCard:\", result.ErrorList);\r\n        }\r\n        this.getTWICEnabled();\r\n        this.getEntityCodesByCarrierAndEntityType(\r\n          this.props.selectedShareholder\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting AccessCard:\", error);\r\n      });\r\n  }\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (Array.isArray(attributeMetaDataList) && attributeMetaDataList.length > 0) {\r\n        this.terminalSelectionChange([attributeMetaDataList[0].TerminalCode]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"AutoAccessIDAssociationDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      let attributesTerminalsList = [];\r\n      var attributeMetaDataList = [];\r\n      var modAttributeMetaDataList = [];\r\n\r\n      attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      // modAttributeMetaDataList = lodash.cloneDeep(\r\n      //   this.state.modAttributeMetaDataList\r\n      // );\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      var modTemporaryCard = lodash.cloneDeep(this.state.modTemporaryCard);\r\n      selectedTerminals.forEach((terminal) => {\r\n        var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n          return selectedAttribute.TerminalCode === terminal;\r\n        });\r\n        if (existitem === undefined) {\r\n          attributeMetaDataList.forEach(function (attributeMetaData) {\r\n            if (attributeMetaData.TerminalCode === terminal) {\r\n              var Attributevalue = modTemporaryCard.Attributes.find(\r\n                (modTemporaryCardAttribute) => {\r\n                  return modTemporaryCardAttribute.TerminalCode === terminal;\r\n                }\r\n              );\r\n              if (Attributevalue !== undefined) {\r\n                attributeMetaData.attributeMetaDataList.forEach(function (\r\n                  attributeMetaData\r\n                ) {\r\n                  var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                    (x) => {\r\n                      return x.AttributeCode === attributeMetaData.Code;\r\n                    }\r\n                  );\r\n                  if (valueAttribute !== undefined)\r\n                    attributeMetaData.DefaultValue =\r\n                      valueAttribute.AttributeValue;\r\n                });\r\n              }\r\n              attributesTerminalsList.push(attributeMetaData);\r\n            }\r\n          });\r\n        } else {\r\n          attributesTerminalsList.push(existitem);\r\n        }\r\n      });\r\n\r\n      modAttributeMetaDataList = [];\r\n      modAttributeMetaDataList = attributesTerminalsList;\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n          return attributeValidation.TerminalCode === selectedTerminals;\r\n        });\r\n        if (existTerminal === undefined) {\r\n          Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n            (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n          );\r\n        }\r\n      });\r\n\r\n      this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"AutoAccessIDAssociationDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTWICEnabled() {\r\n    axios(\r\n      RestApis.GetTWICEnabled,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            TWICEnabled: result.EntityResult,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting TWIC Enabled:\", error);\r\n      });\r\n  }\r\n\r\n  getCarrierCompanies(shareholder) {\r\n    axios(\r\n      RestApis.GetAllCarrierListForRole + \"?ShareholderCode=\" + shareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let carrierCompanies = [];\r\n          if (result.EntityResult !== null) {\r\n            Object.keys(result.EntityResult.Table2).forEach((key) =>\r\n              carrierCompanies.push(result.EntityResult.Table2[key].Code)\r\n            );\r\n            this.setState({ carrierCompanies });\r\n          } else {\r\n            console.log(\"No carrierCompanies identified.\");\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetAllCarrierListForRole:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Carrier List:\", error);\r\n      });\r\n  }\r\n\r\n  getEntityTypeList(shareholder) {\r\n    axios(\r\n      RestApis.GetEntityTypeList + \"?ShareholderCode=\" + shareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            var entityTypes = [];\r\n            var tempEntityTypes = result.EntityResult;\r\n            if (\r\n              this.state.location[0] !== undefined &&\r\n              this.state.location[0].toLowerCase().indexOf(\"twic\") !== -1\r\n            ) {\r\n              if (\r\n                tempEntityTypes.indexOf(\r\n                  Constants.AccessCardEntityType.PrimeMover\r\n                ) !== -1\r\n              )\r\n                tempEntityTypes.remove(\r\n                  Constants.AccessCardEntityType.PrimeMover\r\n                );\r\n              if (\r\n                tempEntityTypes.indexOf(\r\n                  Constants.AccessCardEntityType.RailWagon\r\n                ) !== -1\r\n              )\r\n                tempEntityTypes.remove(\r\n                  Constants.AccessCardEntityType.RailWagon\r\n                );\r\n              if (\r\n                tempEntityTypes.indexOf(\r\n                  Constants.AccessCardEntityType.Trailer\r\n                ) !== -1\r\n              )\r\n                tempEntityTypes.remove(Constants.AccessCardEntityType.Trailer);\r\n              if (\r\n                tempEntityTypes.indexOf(\r\n                  Constants.AccessCardEntityType.Vehicle\r\n                ) !== -1\r\n              )\r\n                tempEntityTypes.remove(Constants.AccessCardEntityType.Vehicle);\r\n            }\r\n\r\n            entityTypes = tempEntityTypes;\r\n            this.setState({ entityTypes });\r\n          } else {\r\n            console.log(\"No entityTypes identified.\");\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetAllCarrierListForRole:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Carrier List:\", error);\r\n      });\r\n  }\r\n\r\n  getEntityCodesByCarrierAndEntityType(shareholder) {\r\n    const { modTemporaryCard } = this.state;\r\n    if (this.props.selectedShareholder === null) {\r\n      return;\r\n    }\r\n    if (\r\n      modTemporaryCard.CarrierCode === undefined ||\r\n      modTemporaryCard.EntityName === undefined\r\n    ) {\r\n      return;\r\n    }\r\n    axios(\r\n      RestApis.GetEntityCodesByCarrierAndEntityType +\r\n        \"?ShareholderCode=\" +\r\n        shareholder +\r\n        \"&CarrierCode=\" +\r\n        modTemporaryCard.CarrierCode +\r\n        \"&EntityType=\" +\r\n        modTemporaryCard.EntityName,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            this.setState({\r\n              entityValues: result.EntityResult,\r\n            });\r\n          } else {\r\n            console.log(\"No entityValues identified.\");\r\n          }\r\n        } else {\r\n          console.log(\"Error in entityValues:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting entity code:\", error);\r\n      });\r\n  }\r\n\r\n  onEntitySelectFocus = () => {\r\n    const { modTemporaryCard } = this.state;\r\n    var validationSectionErrors = lodash.cloneDeep(\r\n      this.state.validationSectionErrors\r\n    );\r\n    validationSectionErrors[\"EntityValue\"] = \"\";\r\n    Object.keys(accessIDSectionValidationDef).forEach(function (key) {\r\n      if (key === \"EntityName\")\r\n        validationSectionErrors[key] = Utilities.validateField(\r\n          accessIDSectionValidationDef[key],\r\n          modTemporaryCard[key]\r\n        );\r\n    });\r\n    this.setState({ validationSectionErrors });\r\n    var returnValue = Object.values(validationSectionErrors).every(function (\r\n      value\r\n    ) {\r\n      return value === \"\";\r\n    });\r\n    if (returnValue) {\r\n      axios(\r\n        RestApis.GetEntityCodesByCarrierAndEntityType +\r\n          \"?ShareholderCode=\" +\r\n          this.props.selectedShareholder +\r\n          \"&CarrierCode=\" +\r\n          modTemporaryCard.CarrierCode +\r\n          \"&EntityType=\" +\r\n          modTemporaryCard.EntityName,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              entityValues: result.EntityResult,\r\n            });\r\n          } else {\r\n            console.log(\"Error in onEntitySelectFocus:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Entity Code:\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  handleSectionChange = (propertyName, data) => {\r\n    try {\r\n      const modTemporaryCard = lodash.cloneDeep(this.state.modTemporaryCard);\r\n      const validationSectionErrors = lodash.cloneDeep(\r\n        this.state.validationSectionErrors\r\n      );\r\n      modTemporaryCard[propertyName] = data;\r\n      if (propertyName === \"EntityName\" && data !== null) {\r\n        modTemporaryCard[\"EntityValue\"] = \"\";\r\n        this.setState({ modTemporaryCard }, () => this.onEntitySelectFocus());\r\n      } else {\r\n        this.setState({ modTemporaryCard });\r\n      }\r\n      if (propertyName === \"CarrierCode\" && data !== null) {\r\n        if (modTemporaryCard.EntityName !== null) {\r\n          this.setState({ modTemporaryCard }, () => this.onEntitySelectFocus());\r\n        }\r\n      }\r\n      if (accessIDSectionValidationDef[propertyName] !== undefined) {\r\n        validationSectionErrors[propertyName] = Utilities.validateField(\r\n          accessIDSectionValidationDef[propertyName],\r\n          data\r\n        );\r\n        if (propertyName === \"EntityName\") {\r\n          if (\r\n            data === Constants.CommonEntityType.TMUser ||\r\n            data === Constants.CommonEntityType.Staff ||\r\n            data === Constants.CommonEntityType.Visitor\r\n          ) {\r\n            modTemporaryCard.CarrierCode = null;\r\n            this.setState({ modTemporaryCard });\r\n            validationSectionErrors[\"CarrierCode\"] = \"\";\r\n          }\r\n        } else {\r\n          if (\r\n            propertyName === \"EntityValue\" &&\r\n            (modTemporaryCard.EntityName ===\r\n              Constants.CommonEntityType.TMUser ||\r\n              modTemporaryCard.EntityName ===\r\n                Constants.CommonEntityType.Staff ||\r\n              modTemporaryCard.EntityName ===\r\n                Constants.CommonEntityType.Visitor)\r\n          ) {\r\n            validationSectionErrors[\"CarrierCode\"] = \"\";\r\n          }\r\n        }\r\n        this.setState({ validationSectionErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"AutoAccessIDAssociationDetailsComposite:Error occured on handleSectionChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  modifyReadByWorkflow = () => {\r\n    const PointName = lodash.cloneDeep(this.state.PointName);\r\n    const modTemporaryCard = lodash.cloneDeep(this.state.modTemporaryCard);\r\n    modTemporaryCard.PointName = this.state.PointName;\r\n    if (PointName !== undefined && PointName !== null) {\r\n      axios(\r\n        RestApis.ModifyReadByWorkflow + \"?accessIDPointName=\" + PointName,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        this.setState({ ReadStartTime: result.EntityResult });\r\n        if (result.IsSuccess !== true) {\r\n          console.log(\"Error in ModifyReadByWorkflow:\", result.ErrorList);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.timerStop();\r\n  }\r\n\r\n  timerStart = () => {\r\n    timer = setInterval(() => {\r\n      this.readCardData(this.props.userDetails.EntityResult.PrimaryShareholder);\r\n    }, 3000);\r\n  };\r\n\r\n  timerStop = () => {\r\n    clearInterval(timer);\r\n  };\r\n\r\n  handleShowCard = () => {\r\n    try {\r\n      const validationIDErrors = { ...this.state.validationIDErrors };\r\n      const temporaryCard = lodash.cloneDeep(this.state.temporaryCard);\r\n      Object.keys(validationIDErrors).forEach(function (key) {\r\n        validationIDErrors[key] = \"\";\r\n      });\r\n      this.timerStop();\r\n      this.modifyReadByWorkflow();\r\n      this.setState({\r\n        modTemporaryCard: { ...temporaryCard },\r\n        validationIDErrors,\r\n        isShow: true,\r\n        defaultShow: false,\r\n      });\r\n      this.timerStart();\r\n    } catch (error) {\r\n      console.log(\r\n        \"temporaryCardDetailsComposite:Error occured on handleShowCard\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  readCardData(shareholder) {\r\n    try {\r\n      if (\r\n        shareholder !== undefined &&\r\n        shareholder !== \"\" &&\r\n        this.state.location.length > 0 &&\r\n        this.state.ReadStartTime !== null\r\n      ) {\r\n        var keyCode = [\r\n          {\r\n            key: KeyCodes.cardReaderCode,\r\n            value: this.state.location[0],\r\n          },\r\n          {\r\n            key: \"ReadStartTime\",\r\n            value: this.state.ReadStartTime,\r\n          },\r\n        ];\r\n        var obj = {\r\n          ShareholderCode: shareholder,\r\n          keyDataCode: KeyCodes.accessCardCode,\r\n          KeyCodes: keyCode,\r\n        };\r\n\r\n        axios(\r\n          RestApis.ReadCardData,\r\n          Utilities.getAuthenticationObjectforPost(\r\n            obj,\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        )\r\n          .then((response) => {\r\n            var result = response.data;\r\n            if (result.IsSuccess === true) {\r\n              if (result.EntityResult !== null) {\r\n                this.setState({\r\n                  cardReadTime: result.EntityResult.CardDetectionTime,\r\n                  CardNumber: result.EntityResult.CardNumber,\r\n                  isReadyToRender: true,\r\n                  isShow: false,\r\n                });\r\n                this.getAccessCard(this.state.CardNumber);\r\n              }\r\n              this.timerStop();\r\n            } else {\r\n              this.setState({\r\n                CardNumber: \"\",\r\n                isReadyToRender: true,\r\n              });\r\n              console.log(\"Error in ReadCardData:\", result.ErrorList);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            this.setState({\r\n              CardNumber: \"\",\r\n              isReadyToRender: true,\r\n            });\r\n            console.log(\"Error while read card data:\", error);\r\n          });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"AutoAccessIDAssociationComposite:Error occured on readCardData\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleIDChange = (propertyName, data) => {\r\n    try {\r\n      const modTemporaryCard = lodash.cloneDeep(this.state.modTemporaryCard);\r\n      const validationIDErrors = lodash.cloneDeep(\r\n        this.state.validationIDErrors\r\n      );\r\n      modTemporaryCard[propertyName] = data;\r\n      if (propertyName === \"ISTWICCARD\" && data === false) {\r\n        validationIDErrors[\"FASCN\"] = \"\";\r\n        modTemporaryCard.FASCN = \"\";\r\n        this.setState({\r\n          validationIDErrors,\r\n          modTemporaryCard,\r\n          PIN: null,\r\n        });\r\n      } else {\r\n        this.setState({ modTemporaryCard });\r\n      }\r\n      if (accessIDValidationDef[propertyName] !== undefined) {\r\n        validationIDErrors[propertyName] = Utilities.validateField(\r\n          accessIDValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationIDErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"AutoAccessIDAssociationDetailsComposite:Error occured on handleIDChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleDateTextChange = (propertyName, value, error) => {\r\n    try {\r\n      var validationIDErrors = { ...this.state.validationIDErrors };\r\n      var modTemporaryCard = lodash.cloneDeep(this.state.modTemporaryCard);\r\n      validationIDErrors[propertyName] = error;\r\n      modTemporaryCard[propertyName] = value;\r\n      this.setState({ validationIDErrors, modTemporaryCard });\r\n    } catch (error) {\r\n      console.log(\r\n        \"AutoAccessIDAssociationDetailsComposite:Error occured on handleDateTextChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors,modAttributeMetaDataList });\r\n      if (\r\n        attribute.DataType === Constants.AttributeTypes.INT ||\r\n        attribute.DataType === Constants.AttributeTypes.LONG ||\r\n        attribute.DataType === Constants.AttributeTypes.FLOAT ||\r\n        attribute.DataType === Constants.AttributeTypes.DOUBLE\r\n      ) {\r\n        value = Utilities.convertStringtoDecimal(value);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"AutoAccessIDAssociationDetailsComposite:Error occured on handleAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  saveAccessCard = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempTemporaryCard = lodash.cloneDeep(this.state.tempTemporaryCard);\r\n\r\n      tempTemporaryCard.CardStatus === null\r\n      ? this.createTemporaryCard(tempTemporaryCard)\r\n      : this.updateTemporaryCard(tempTemporaryCard);\r\n\r\n    } catch (error) {\r\n      console.log(\"AutoAccessCardComposite : Error in saveAutoAccessCard\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n      let modTemporaryCard = lodash.cloneDeep(this.state.modTemporaryCard);\r\n     \r\n      let attributeList = lodash.cloneDeep(this.state.modAttributeMetaDataList);\r\n      modTemporaryCard.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n      if (this.validateSave(modTemporaryCard)) {\r\n        modTemporaryCard = Utilities.convertDatesToString(\r\n          DateFieldsInEntities.DatesInEntity.AccessCard,\r\n          modTemporaryCard\r\n        );\r\n\r\n        let showAccessCardAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      let tempTemporaryCard = lodash.cloneDeep(modTemporaryCard);\r\n      this.setState({ showAccessCardAuthenticationLayout, tempTemporaryCard }, () => {\r\n        if (showAccessCardAuthenticationLayout === false) {\r\n          this.saveAccessCard();\r\n        }\r\n    });\r\n\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"AutoAccessIDAssociationDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  validateSave(modTemporaryCards) {\r\n    var validationIDErrors = lodash.cloneDeep(this.state.validationIDErrors);\r\n    Object.keys(accessIDValidationDef).forEach(function (key) {\r\n      if (key !== \"FASCN\")\r\n        validationIDErrors[key] = Utilities.validateField(\r\n          accessIDValidationDef[key],\r\n          modTemporaryCards[key]\r\n        );\r\n    });\r\n    if (\r\n      modTemporaryCards.ShareholderCode === null ||\r\n      modTemporaryCards.ShareholderCode.trim() === \"\"\r\n    )\r\n      validationIDErrors[\"ShareholderCode\"] =\r\n        \"MarineReceipt_MandatoryShareholder\";\r\n\r\n    if (modTemporaryCards.Locked === true) {\r\n      if (\r\n        modTemporaryCards.Remarks === null ||\r\n        modTemporaryCards.Remarks === \"\"\r\n      ) {\r\n        validationIDErrors[\"Remarks\"] = \"AdditiveInjectorInfo_RemarkRequired\";\r\n      }\r\n    }\r\n\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n    let attributeList = lodash.cloneDeep(this.state.modAttributeMetaDataList);\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n    this.setState({ validationIDErrors, attributeValidationErrors });\r\n    let returnValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n\r\n    if (returnValue)\r\n      returnValue = Object.values(validationIDErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n    else return returnValue;\r\n    return returnValue;\r\n  }\r\n\r\n  createTemporaryCard(modTemporaryCard) {\r\n    modTemporaryCard.ShareholderCode = this.props.selectedShareholder;\r\n    modTemporaryCard.CardStatus = Constants.CardStatus.AVAILABLE;\r\n    if (this.state.PIN !== null) {\r\n      modTemporaryCard.PIN = this.state.PIN;\r\n      modTemporaryCard.LogicalPIN = this.state.PIN;\r\n    }\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.accessCardCode,\r\n        value: modTemporaryCard.PIN,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareholderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.accessCardCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modTemporaryCard,\r\n    };\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"AutoIDAssociation_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"AccessCardInfo_x_Title\"],\r\n          keyValues: [modTemporaryCard.PIN],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestApis.CreateAccessCard,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.modifyReadByWorkflow();\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnAutoIDAssociation\r\n              ),\r\n              showAccessCardAuthenticationLayout: false,\r\n            },\r\n            () => this.getAccessCard(modTemporaryCard.PIN)\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnAutoIDAssociation\r\n            ),\r\n            showAccessCardAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in CreateTemporaryCard:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(modTemporaryCard, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnAutoIDAssociation\r\n          ),\r\n          showAccessCardAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(modTemporaryCard, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  updateTemporaryCard(modTemporaryCard) {\r\n    modTemporaryCard.ShareholderCode = this.props.selectedShareholder;\r\n\r\n    modTemporaryCard = Utilities.convertDatesToString(\r\n      DateFieldsInEntities.DatesInEntity.AccessCard,\r\n      modTemporaryCard\r\n    );\r\n\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.accessCardCode,\r\n        value: modTemporaryCard.PIN,\r\n      },\r\n    ];\r\n\r\n    let obj = {\r\n      ShareholderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.accessCardCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modTemporaryCard,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"AutoIDAssociation_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"AccessCardInfo_x_Title\"],\r\n          keyValues: [modTemporaryCard.PIN],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestApis.UpdateAccessCard,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.modifyReadByWorkflow();\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnAutoIDAssociation\r\n              ),\r\n              showAccessCardAuthenticationLayout: false,\r\n            },\r\n            () => this.getAccessCard(modTemporaryCard.PIN)\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnAutoIDAssociation\r\n            ),\r\n            showAccessCardAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in UpdatetemporaryCard:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(modTemporaryCard, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(modTemporaryCard, \"modify\", notification);\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.modify,\r\n            fnAutoIDAssociation\r\n          ),\r\n          showAccessCardAuthenticationLayout: false,\r\n        });\r\n      });\r\n  }\r\n\r\n  validateFASCN() {\r\n    const modTemporaryCard = lodash.cloneDeep(this.state.modTemporaryCard);\r\n    const validationIDErrors = lodash.cloneDeep(this.state.validationIDErrors);\r\n    if (modTemporaryCard.ISTWICCARD === false) {\r\n      validationIDErrors[\"FASCN\"] = \"\";\r\n      this.setState({ validationIDErrors });\r\n      return;\r\n    }\r\n    var FASCN = modTemporaryCard.FASCN;\r\n    if (FASCN !== undefined) {\r\n      var keyCode = [\r\n        {\r\n          key: \"FASCN\",\r\n          value: FASCN,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareholderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.accessCardCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"AutoIDAssociation_SavedStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"AccessCardInfo_FASCN\"],\r\n            keyValues: [FASCN],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      this.setState({\r\n        saveEnabled: false,\r\n      });\r\n      axios(\r\n        RestApis.ValidateFASCN,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({ PIN: result.EntityResult, saveEnabled: true });\r\n            return true;\r\n          } else {\r\n            // notification.messageResultDetails[0].errorMessage =\r\n            //   result.ErrorList[0];\r\n            // toast(\r\n            //   <ErrorBoundary>\r\n            //     <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            //   </ErrorBoundary>,\r\n            //   {\r\n            //     autoClose:\r\n            //       notification.messageType === \"critical\" ? 10000 : false,\r\n            //   }\r\n            // );\r\n            validationIDErrors[\"FASCN\"] = \"AccessCardInfo_InvalidFASCN\";\r\n            this.setState({ validationIDErrors, saveEnabled: true });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while validateFASCN:\", error);\r\n        });\r\n    }\r\n  }\r\n\r\n  onFASCNBlur = () => {\r\n    this.validateFASCN();\r\n  };\r\n\r\n  handleReset = () => {\r\n    try {\r\n      this.modifyReadByWorkflow();\r\n      const validationIDErrors = { ...this.state.validationIDErrors };\r\n      const temporaryCard = lodash.cloneDeep(this.state.temporaryCard);\r\n      Object.keys(validationIDErrors).forEach(function (key) {\r\n        validationIDErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modTemporaryCard: { ...temporaryCard },\r\n          validationIDErrors,\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange(\r\n              this.state.modTemporaryCard.TerminalCodes\r\n            );\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            this.localNodeAttribute();\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"temporaryCardDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors:\r\n          Utilities.getAttributeInitialValidationErrors(attributeMetaDataList),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on handleResetAttributeValidationError\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  IssueAccessCard= () => {\r\n    \r\n    this.setState({ issueEnabled: false });\r\n    \r\n    if (this.validateIssue()) {\r\n      \r\n      let showIssueAuthenticationLayout =\r\n      this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n        ? true\r\n        : false;\r\n\r\n      this.setState({ showIssueAuthenticationLayout, }, () => {\r\n        if (showIssueAuthenticationLayout === false) {\r\n          this.handleIssueID();\r\n        }\r\n    });\r\n    }\r\n    else \r\n    {\r\n      this.setState({ issueEnabled: true });\r\n    }\r\n  }\r\n  \r\n\r\n  handleIssueID = () => {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      this.initializeTheButtonEnable();\r\n      let modTemporaryCard = lodash.cloneDeep(this.state.modTemporaryCard);\r\n     \r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.accessCardCode,\r\n          value: modTemporaryCard.PIN,\r\n        },\r\n        {\r\n          key: KeyCodes.entityCode,\r\n          value: modTemporaryCard.EntityValue,\r\n        },\r\n        {\r\n          key: KeyCodes.entityType,\r\n          value: modTemporaryCard.EntityName,\r\n        },\r\n        {\r\n          key: KeyCodes.carrierCode,\r\n          value: modTemporaryCard.CarrierCode\r\n        }\r\n      ];\r\n      var obj = {\r\n        ShareholderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.accessCardCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"AutoIDAssociation_SavedStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"AccessCardInfo_x_Title\"],\r\n            keyValues: [modTemporaryCard.PIN],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      \r\n        axios(\r\n          RestApis.IssueAccessCardAutoID,\r\n          Utilities.getAuthenticationObjectforPost(\r\n            obj,\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        )\r\n          .then((response) => {\r\n            var result = response.data;\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n              this.modifyReadByWorkflow();\r\n              this.getAccessCard(modTemporaryCard.PIN);\r\n            } else {\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n              console.log(\"Error in UpdatetemporaryCard:\", result.ErrorList);\r\n            }\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          })\r\n          .catch((error) => {\r\n            notification.messageResultDetails[0].errorMessage = error;\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          });\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on issueAccessCard\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  validateIssue() {\r\n    const { modTemporaryCard } = this.state;\r\n    var validationSectionErrors = lodash.cloneDeep(\r\n      this.state.validationSectionErrors\r\n    );\r\n    Object.keys(accessIDSectionValidationDef).forEach(function (key) {\r\n      if (key !== \"CarrierCode\") {\r\n        validationSectionErrors[key] = Utilities.validateField(\r\n          accessIDSectionValidationDef[key],\r\n          modTemporaryCard[key]\r\n        );\r\n      }\r\n    });\r\n    this.setState({ validationSectionErrors });\r\n    var returnValue = Object.values(validationSectionErrors).every(function (\r\n      value\r\n    ) {\r\n      return value === \"\";\r\n    });\r\n    return returnValue;\r\n  }\r\n\r\n  activateAccessCard= () => {\r\n    \r\n    this.setState({ activateEnable: false });\r\n      let showActivateAuthenticationLayout =\r\n      this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n        ? true\r\n        : false;\r\n\r\n      this.setState({ showActivateAuthenticationLayout, }, () => {\r\n        if (showActivateAuthenticationLayout === false) {\r\n          this.handleActivateID();\r\n        }\r\n    });\r\n     \r\n  }\r\n\r\n  handleActivateID = () => {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      this.initializeTheButtonEnable();\r\n      let modTemporaryCard = lodash.cloneDeep(this.state.modTemporaryCard);\r\n      \r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.accessCardCode,\r\n          value: modTemporaryCard.PIN,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareholderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.accessCardCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"AutoIDAssociation_SavedStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"AccessCardInfo_x_Title\"],\r\n            keyValues: [modTemporaryCard.PIN],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestApis.ActivateAccessCardAutoID,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.modifyReadByWorkflow();\r\n            this.getAccessCard(modTemporaryCard.PIN);\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            console.log(\"Error in ActivatetemporaryCard:\", result.ErrorList);\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on activateAccessCard\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  RevokeAccessCard= () => {\r\n      \r\n      let showRevokeAuthenticationLayout =\r\n      this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n        ? true\r\n        : false;\r\n\r\n      this.setState({ showRevokeAuthenticationLayout, }, () => {\r\n        if (showRevokeAuthenticationLayout === false) {\r\n          this.handleRevoleID();\r\n        }\r\n    });\r\n    \r\n    \r\n  }\r\n\r\n  handleRevoleID = () => {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      this.initializeTheButtonEnable();\r\n      let modTemporaryCard = lodash.cloneDeep(this.state.modTemporaryCard);\r\n      // this.setState({ revokeEnable: false });\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.accessCardCode,\r\n          value: modTemporaryCard.PIN,\r\n        },\r\n        {\r\n          key: KeyCodes.entityCode,\r\n          value: modTemporaryCard.EntityValue,\r\n        },\r\n        {\r\n          key: KeyCodes.entityType,\r\n          value: modTemporaryCard.EntityName,\r\n        },\r\n        {\r\n          key: KeyCodes.carrierCode,\r\n          value: modTemporaryCard.CarrierCode\r\n        }\r\n      ];\r\n      var obj = {\r\n        ShareholderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.accessCardCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"AutoIDAssociation_SavedStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"AccessCardInfo_x_Title\"],\r\n            keyValues: [modTemporaryCard.PIN],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestApis.RevokeAccessCardAutoID,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.modifyReadByWorkflow();\r\n            this.getAccessCard(modTemporaryCard.PIN);\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            console.log(\"Error in RevokeTemporaryCard:\", result.ErrorList);\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"AccessIDManagementDetailsComposite:Error occured on activateAccessCard\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAccessCardAuthenticationLayout: false,\r\n      showIssueAuthenticationLayout: false,\r\n      showRevokeAuthenticationLayout : false,\r\n      showActivateAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  getFunctionGroupName() {\r\n    if(this.state.showAccessCardAuthenticationLayout)\r\n      return fnAutoIDAssociation\r\n    else if(this.state.showIssueAuthenticationLayout)\r\n      return fnIssueCard\r\n    else if(this.state.showRevokeAuthenticationLayout)\r\n      return fnRevokeCard\r\n    else if(this.state.showActivateAuthenticationLayout)\r\n      return fnActivateCard\r\n\r\n   };\r\n\r\n  getAddorEditMode() {\r\n    if (this.state.showAccessCardAuthenticationLayout)\r\n      return this.state.temporaryCard.PIN === \"\" ? functionGroups.add : functionGroups.modify;\r\n    else\r\n      return functionGroups.modify;\r\n   };\r\n\r\n\r\n   handleOperation()  {\r\n  \r\n    if(this.state.showAccessCardAuthenticationLayout)\r\n      return this.saveAccessCard\r\n    else if(this.state.showIssueAuthenticationLayout)\r\n      return this.handleIssueID\r\n    else if(this.state.showRevokeAuthenticationLayout)\r\n      return this.handleRevoleID\r\n    else if(this.state.showActivateAuthenticationLayout)\r\n      return this.handleActivateID\r\n   \r\n      \r\n };\r\n\r\n\r\n  render() {\r\n    const listOptions = {\r\n      carrierCompanies: this.state.carrierCompanies,\r\n      entityTypes: this.state.entityTypes,\r\n      entityValues: this.state.entityValues,\r\n    };\r\n    let popUpContents = null;\r\n    try {\r\n      popUpContents = [\r\n        {\r\n          fieldName: \"AccessCardList_LastUpdated\",\r\n          fieldValue:\r\n            new Date(\r\n              this.state.modTemporaryCard.LastUpdatedTime\r\n            ).toLocaleDateString() +\r\n            \" \" +\r\n            new Date(\r\n              this.state.modTemporaryCard.LastUpdatedTime\r\n            ).toLocaleTimeString(),\r\n        },\r\n        {\r\n          fieldName: \"AccessCardInfo_CreatedTime\",\r\n          fieldValue:\r\n            new Date(\r\n              this.state.modTemporaryCard.CreatedTime\r\n            ).toLocaleDateString() +\r\n            \" \" +\r\n            new Date(\r\n              this.state.modTemporaryCard.CreatedTime\r\n            ).toLocaleTimeString(),\r\n        },\r\n        {\r\n          fieldName: \"TemporaryCard_CardSwipeTime\",\r\n          fieldValue:\r\n            this.state.cardReadTime !== undefined &&\r\n            this.state.cardReadTime !== null\r\n              ? new Date(this.state.cardReadTime).toLocaleDateString() +\r\n                \" \" +\r\n                new Date(this.state.cardReadTime).toLocaleTimeString()\r\n              : \"\",\r\n        },\r\n      ];\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    let ShowCard =\r\n      \"TemporaryCard_ShowCard\" + Constants.delimiter + this.state.location[0];\r\n\r\n    function getLocalizedMessage(message) {\r\n      try {\r\n        let messageOptions = message.split(Constants.delimiter);\r\n        return messageOptions[0];\r\n      } catch (error) {\r\n        console.log(error);\r\n        return \"\";\r\n      }\r\n    }\r\n    function getLocalizedMessageParameters(message) {\r\n      try {\r\n        let messageOptions = message.split(Constants.delimiter);\r\n        messageOptions.splice(0, 1);\r\n        return messageOptions;\r\n      } catch (error) {\r\n        console.log(error);\r\n        return [];\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TranslationConsumer>\r\n            {/* {(t) => (\r\n              <div className=\"autoHeaderContainer\">\r\n                {this.state.isShow ? (\r\n                  <h3>\r\n                    {t(\r\n                      getLocalizedMessage(ShowCard),\r\n                      getLocalizedMessageParameters(ShowCard)\r\n                    )}\r\n                  </h3>\r\n                ) : (\r\n                  <h3>{t(\"TemporaryCard_SelectLocationForCard\")}</h3>\r\n                )}\r\n              </div>\r\n            )} */}\r\n            {(t) => (\r\n              <div className=\"autoHeaderContainer\">\r\n                {this.state.defaultShow ? (\r\n                  <h3>{t(\"TemporaryCard_SelectLocationForCard\")}</h3>\r\n                ) : this.state.isShow ? (\r\n                  <h3>\r\n                    {t(\r\n                      getLocalizedMessage(ShowCard),\r\n                      getLocalizedMessageParameters(ShowCard)\r\n                    )}\r\n                  </h3>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader newEntityName=\"TemporaryCard_LocationDetails\"></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <AutoACLocationDetails\r\n            handleSetLocation={this.props.onSetLocation}\r\n            location={this.state.location}\r\n          ></AutoACLocationDetails>\r\n        </ErrorBoundary>\r\n\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.temporaryCard.PIN}\r\n            newEntityName=\"AccessCardList_x_AccessCardDetails\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <AutoAccessIDAssociationDetails\r\n            temporaryCard={this.state.temporaryCard}\r\n            modTemporaryCard={this.state.modTemporaryCard}\r\n            validationErrors={this.state.validationIDErrors}\r\n            saveEnabled={this.state.saveEnabled}\r\n            onFieldChange={this.handleIDChange}\r\n            onDateTextChange={this.handleDateTextChange}\r\n            handleShowCard={this.handleShowCard}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            location={this.state.location}\r\n            TWICEnabled={this.state.TWICEnabled}\r\n            isValidateFASCN={this.onFASCNBlur}\r\n            isFASCNShow={this.state.isFASCNShow}\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            onAttributeDataChange={this.handleAttributeDataChange} \r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n          ></AutoAccessIDAssociationDetails>\r\n        </ErrorBoundary>\r\n\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader newEntityName=\"AccessCardInfo_DetailsSection\"></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <AutoACDetailsSectionDetails\r\n            temporaryCard={this.state.temporaryCard}\r\n            modTemporaryCard={this.state.modTemporaryCard}\r\n            validationErrors={this.state.validationSectionErrors}\r\n            listOptions={listOptions}\r\n            onFieldChange={this.handleSectionChange}\r\n            handleIssueID={this.IssueAccessCard}\r\n            handleRevoleID={this.RevokeAccessCard}\r\n            handleActivateID={this.activateAccessCard}\r\n            issueEnabled={this.state.issueEnabled}\r\n            activateEnable={this.state.activateEnable}\r\n            revokeEnable={this.state.revokeEnable}\r\n          ></AutoACDetailsSectionDetails>\r\n        </ErrorBoundary>\r\n        {this.state.showAccessCardAuthenticationLayout||\r\n          this.state.showIssueAuthenticationLayout ||\r\n          this.state.showRevokeAuthenticationLayout ||\r\n          this.state.showActivateAuthenticationLayout \r\n         ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={this.getAddorEditMode()}\r\n            functionGroup={this.getFunctionGroupName()}\r\n            handleOperation={this.handleOperation()}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet timer = undefined;\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(\r\n  AutoAccessIDAssociationDetailsComposite\r\n);\r\n\r\nAutoAccessIDAssociationDetailsComposite.propTypes = {\r\n  CardNumber: PropTypes.string.isRequired,\r\n  location: PropTypes.array.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onSetLocation: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n  // notShowTitle: PropTypes.func.isRequired,\r\n  // timerStop: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","export const DatesInEntity={\r\n    Driver : [\r\n    \"License1ExpiryDate\",\r\n    \"License1IssueDate\",\r\n    \"License2IssueDate\",\r\n    \"License2ExpiryDate\",\r\n    \"License3IssueDate\",\r\n    \"License3ExpiryDate\",\r\n    \"HazardousLicenseExpiry\"\r\n  ],\r\n  CarrierCompany:[\"PermitExpiryDate\"],\r\n  PrimeMover:[\"RoadTaxNoIssueDate\",\"RoadTaxNoExpiryDate\",\"licenseExpiryDate\"],\r\n  Wagon:[\"LicenseExpiryDate\"],\r\n  Vehicle:[\"LicenseNoIssueDate\",\"LicenseNoExpiryDate\",\r\n  \"RoadTaxNoIssueDate\",\"RoadTaxNoExpiryDate\",\"Bondexpirydate\",\"HazardousLicenseExpiry\"],\r\n  Contract:[\"StartDate\",\"EndDate\"],\r\n  ContractItem:[\"StartDate\",\"EndDate\"],\r\n  Order:[\"OrderStartDate\",\"OrderEndDate\",\"OrderDate\",\"DeliveryDate\"],\r\n  AccessCard:[\"ExpiryDate\",\"IssueDate\",\"PasswordExpiryDate\"],\r\n  Trailer:[\"HazardousLicenseExpiry\"],\r\n  };","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["AutoAccessIDAssociationDetails","_ref","handleSave","handleReset","temporaryCard","modTemporaryCard","validationErrors","onFieldChange","saveEnabled","onDateTextChange","handleShowCard","location","TWICEnabled","isValidateFASCN","isEnterpriseNode","modAttributeMetaDataList","attributeValidationErrors","onAttributeDataChange","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","_jsx","TranslationConsumer","children","t","_jsxs","className","Input","fluid","value","PIN","label","indicator","onChange","data","error","disabled","reserveSpace","style","marginTop","length","Button","content","onClick","Description","CardType","Checkbox","checked","ISTWICCARD","FASCN","onBlur","DatePicker","ExpiryDate","Date","disablePast","onTextChange","displayFormat","getCurrentDateFormat","Locked","CardStatus","Constants","EXPIRED","undefined","LastLockingTime","toLocaleString","Remarks","map","attire","ErrorBoundary","Accordion","Content","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","handleCellDataEdit","AutoACLocationDetails","handleSetLocation","defaultProps","AutoACDetailsSectionDetails","handleIssueID","handleRevoleID","handleActivateID","listOptions","issueEnabled","activateEnable","revokeEnable","Select","placeholder","EntityName","Visitor","TMUser","Staff","CarrierCode","options","Utilities","carrierCompanies","AVAILABLE","multiple","search","noResultsMessage","entityTypes","EntityValue","entityValues","IssueDate","ActivationTime","ISSUED","ACTIVATED","AutoAccessIDAssociationDetailsComposite","Component","constructor","arguments","state","lodash","emptyAccessCard","validationSectionErrors","accessIDSectionValidationDef","validationIDErrors","accessIDValidationDef","cardReadTime","attribute","PointName","ReadStartTime","CardNumber","isShow","defaultShow","tempTemporaryCard","showAccessCardAuthenticationLayout","showIssueAuthenticationLayout","showRevokeAuthenticationLayout","showActivateAuthenticationLayout","onEntitySelectFocus","this","Object","keys","forEach","key","setState","values","every","axios","RestApis","props","selectedShareholder","tokenDetails","tokenInfo","then","response","result","IsSuccess","EntityResult","console","log","ErrorList","catch","handleSectionChange","propertyName","modifyReadByWorkflow","timerStart","timer","setInterval","readCardData","userDetails","PrimaryShareholder","timerStop","clearInterval","handleIDChange","handleDateTextChange","handleAttributeDataChange","matchedAttributes","matchedAttributesList","filter","modattribute","Array","isArray","Code","DefaultValue","DataType","INT","LONG","FLOAT","DOUBLE","saveAccessCard","createTemporaryCard","updateTemporaryCard","attributeList","Attributes","validateSave","DateFieldsInEntities","AccessCard","IsWebPortalUser","onFASCNBlur","validateFASCN","IsEnterpriseNode","terminalSelectionChange","TerminalCodes","handleResetAttributeValidationError","localNodeAttribute","IssueAccessCard","validateIssue","handleAuthenticationClose","initializeTheButtonEnable","keyCode","KeyCodes","obj","ShareholderCode","keyDataCode","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","getAccessCard","toast","NotifyEvent","notificationMessage","autoClose","activateAccessCard","RevokeAccessCard","IsArchived","FunctionsList","functionGroups","modify","fnIssueCard","fnActivateCard","fnRevokeCard","fnAutoIDAssociation","componentDidMount","getCarrierCompanies","getEntityTypeList","getAttributes","componentWillReceiveProps","nextProps","accessCardAttributeEntity","accessCard","CardCode","Password","getTWICEnabled","getEntityCodesByCarrierAndEntityType","add","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","modTemporaryCardAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","push","shareholder","Table2","tempEntityTypes","toLowerCase","indexOf","PrimeMover","remove","RailWagon","Trailer","Vehicle","componentWillUnmount","CardDetectionTime","isReadyToRender","modTemporaryCards","trim","returnValue","LogicalPIN","Entity","onSaved","getFunctionGroupName","getAddorEditMode","handleOperation","render","popUpContents","fieldName","fieldValue","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","CreatedTime","ShowCard","getLocalizedMessage","split","getLocalizedMessageParameters","messageOptions","splice","TMDetailsHeader","newEntityName","onSetLocation","entityCode","isFASCNShow","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleClose","connect","getUserDetails","TokenAuth","margin","Popup","element","Icon","marginLeft","root","name","size","position","List","handleAttributeDateValue","convertAttributeDatetoString","chars","Dateval","getFullYear","getMonth","slice","getDate","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","BOOL","toString","DATETIME","showYearSelector","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","DatesInEntity","Driver","CarrierCompany","Wagon","Contract","ContractItem","Order","getOptionsWithSelect","ddlOptions","selectOptionText","option","text","unshift","language","window","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}