{"version":3,"file":"static/js/2459.0dca1145.chunk.js","mappings":"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","sources":["Components/UIBase/Details/PrinterConfigurationDetails.jsx","Components/Composite/Details/PrinterConfigurationDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Select, Input, Icon, Checkbox, Tab } from \"@scuf/common\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\n\r\nPrinterConfigurationDetails.propTypes = {\r\n    onTabChange: PropTypes.func.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        locationOptions: PropTypes.array,\r\n        printerOptions: PropTypes.array,\r\n        allPrinterOptions: PropTypes.array,\r\n        allAvailableReports: PropTypes.array\r\n    }).isRequired,\r\n    activeTab: PropTypes.number.isRequired,\r\n    modLocationPrinterConfig: PropTypes.array.isRequired,\r\n    modBackUpPrinterConfig: PropTypes.array.isRequired,\r\n    handleAddBackUpConfigComp: PropTypes.func.isRequired,\r\n    handleDeleteBackUpConfigComp: PropTypes.func.isRequired,\r\n    selectedBackupPrinters: PropTypes.array.isRequired,\r\n    handleBackUpPrinterSelectionChange: PropTypes.func.isRequired,\r\n    onRowClick: PropTypes.func.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    handleCellDataEdit: PropTypes.func.isRequired,\r\n    modReportPrinterConfig: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    selectedReports: PropTypes.array.isRequired,\r\n    handleReportsSelectionChangeChange: PropTypes.func.isRequired,\r\n    tab1_LocationCode: PropTypes.string.isRequired\r\n}\r\n\r\nexport function PrinterConfigurationDetails({\r\n    listOptions,\r\n    onTabChange,\r\n    activeTab,\r\n    handleAddBackUpConfigComp,\r\n    handleDeleteBackUpConfigComp,\r\n    selectedBackupPrinters,\r\n    handleBackUpPrinterSelectionChange,\r\n    onRowClick,\r\n    onFieldChange,\r\n    handleCellDataEdit,\r\n    modReportPrinterConfig,\r\n    validationErrors,\r\n    selectedReports,\r\n    handleReportsSelectionChange,\r\n    modLocationPrinterConfig,\r\n    modBackUpPrinterConfig,\r\n    tab1_LocationCode\r\n}) {\r\n    const [t] = useTranslation();\r\n\r\n    const handleDropdownEdit = (cellData) => {\r\n        return (\r\n            <Select\r\n                className=\"selectDropwdown\"\r\n                placeholder={t(\"Common_Select\")}\r\n                value={modBackUpPrinterConfig[cellData.rowIndex][cellData.field]}\r\n                fluid\r\n                options={Utilities.transferListtoOptions(listOptions.allPrinterOptions)}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                indicator=\"required\"\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n            />\r\n        );\r\n    };\r\n    return (\r\n        <div className=\"detailsContainer\">\r\n            <Tab\r\n                activeIndex={activeTab}\r\n                onTabChange={(activeIndex) => {\r\n                    onTabChange(activeIndex);\r\n                }}\r\n            >\r\n                <Tab.Pane\r\n                    title={t(\"PrinterConfig_ReportPrinterConfiguration\")}\r\n                >\r\n                    <div className=\"row marginRightZero tableScroll\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"LocationCode\")}\r\n                                value={modReportPrinterConfig.locationCode}\r\n                                options={Utilities.transferListtoOptions(\r\n                                    listOptions.locationOptions)}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"report_locationCode\", data);\r\n                                }}\r\n                                indicator=\"required\"\r\n                                error={t(validationErrors.LocationCode)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"PrinterConfig_PrinterName\")}\r\n                                value={modReportPrinterConfig.printerName}\r\n                                options={Utilities.transferListtoOptions(\r\n                                    listOptions.printerOptions)}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"report_printerName\", data);\r\n                                }}\r\n                                indicator=\"required\"\r\n                                error={t(validationErrors.PrinterName)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row marginRightZero tableScroll\">\r\n                        <div className=\"\">\r\n                            <DataTable\r\n                                data={listOptions.allAvailableReports}\r\n                                scrollable={true}\r\n                                scrollHeight=\"320px\"\r\n                                selectionMode=\"multiple\"\r\n                                selection={selectedReports}\r\n                                onSelectionChange={handleReportsSelectionChange}\r\n                            >\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight colminWidth\"\r\n                                    key=\"ReportName\"\r\n                                    field=\"ReportName\"\r\n                                    header={t(\"PrinterList_ReportName\")}\r\n                                ></DataTable.Column>\r\n                            </DataTable>\r\n                        </div>\r\n                    </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane\r\n                    title={t(\"PrinterConfig_LocationPrinterConfiguration\")}\r\n                >\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-7\">\r\n                            <DataTable\r\n                                data={modLocationPrinterConfig}\r\n                                // rows={compartmentDetailsPageSize}\r\n                                onCellClick={(data) =>\r\n                                    onRowClick !== undefined ? onRowClick(data) : {}\r\n                                }\r\n                            >\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"Location\"\r\n                                    field=\"Location\"\r\n                                    header={t(\"LocationCode\")}\r\n                                    editable={false}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"Printer\"\r\n                                    field=\"Printer\"\r\n                                    header={t(\"PrinterConfig_Printers\")}\r\n                                    editable={false}\r\n                                ></DataTable.Column>\r\n                            </DataTable>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <div style={{ marginBottom: \"1rem\" }}>\r\n                                <Input\r\n                                    fluid\r\n                                    value={tab1_LocationCode}\r\n                                    label={t(\"LocationCode\")}\r\n                                    indicator=\"required\"\r\n                                    error={t(validationErrors.Location)}\r\n                                    reserveSpace={false}\r\n                                    disabled={true}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <div class=\"ui input-label\">\r\n                                    <span className=\"input-label-message\">\r\n                                        {t(\"PrinterConfig_Printers\")}\r\n                                    </span>\r\n                                </div>\r\n                                {listOptions.allPrinterOptions.map((index) => {\r\n                                    return (<div>\r\n                                        <Checkbox\r\n                                            label={index}\r\n                                            checked={listOptions.printerOptions.some(printer => printer === index)}\r\n                                            disabled={false}\r\n                                            onChange={(check) => onFieldChange(\"locationPrinter\", check, index)}\r\n                                        />\r\n                                    </div>)\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane\r\n                    title={t(\"PrinterConfig_BackupConfigHeader\")}\r\n                >\r\n                    <div className=\"row compartmentRow\">\r\n                        <div className=\"col col-md-4 col-lg-3 col-xl-12\">\r\n                            <div className=\"compartmentIconContainer\">\r\n                                <div onClick={handleAddBackUpConfigComp} className=\"compartmentIcon\">\r\n                                    <div>\r\n                                        <Icon root=\"common\" name=\"badge-plus\" size=\"medium\" />\r\n                                    </div>\r\n                                    <div className=\"margin_l10\">\r\n                                        <h5 className=\"font14\">{t(\"TrailerInfo_Add\")}</h5>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div\r\n                                    onClick={handleDeleteBackUpConfigComp}\r\n                                    className=\"compartmentIcon margin_l30\"\r\n                                >\r\n                                    <div>\r\n                                        <Icon root=\"common\" name=\"delete\" size=\"medium\" />\r\n                                    </div>\r\n                                    <div className=\"margin_l10\">\r\n                                        <h5 className=\"font14\">{t(\"TrailerInfo_Delete\")}</h5>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row marginRightZero tableScroll\">\r\n                        <DataTable\r\n                            data={modBackUpPrinterConfig}\r\n                            scrollable={true}\r\n                            scrollHeight=\"320px\"\r\n                            selectionMode=\"multiple\"\r\n                            selection={selectedBackupPrinters}\r\n                            onSelectionChange={handleBackUpPrinterSelectionChange}\r\n                        >\r\n                            <DataTable.Column\r\n                                className=\"compColHeight colminWidth\"\r\n                                key=\"PrimaryPrinter\"\r\n                                field=\"PrimaryPrinter\"\r\n                                header={t(\"PrinterConfig_PrinterName\")}\r\n                                editable={true}\r\n                                // rowHeader={true}\r\n                                editFieldType=\"text\"\r\n                                customEditRenderer={handleDropdownEdit}\r\n                            ></DataTable.Column>\r\n\r\n                            <DataTable.Column\r\n                                className=\"compColHeight colminWidth\"\r\n                                key=\"BackupPrinter\"\r\n                                field=\"BackupPrinter\"\r\n                                header={t(\"PrinterConfig_BackupPrinter\")}\r\n                                editable={true}\r\n                                // rowHeader={true}\r\n                                editFieldType=\"text\"\r\n                                customEditRenderer={handleDropdownEdit}\r\n                            ></DataTable.Column>\r\n                        </DataTable>\r\n                    </div>\r\n                </Tab.Pane>\r\n            </Tab>\r\n        </div>\r\n    )\r\n}","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { PrinterConfigurationDetails } from \"../../UIBase/Details/PrinterConfigurationDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport {\r\n    functionGroups,\r\n    fnPrinterConfiguration\r\n} from \"../../../JS/FunctionGroups\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport {\r\n    PrinterConfigurationValidationDef,\r\n} from \"../../../JS/ValidationDef\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass PrinterConfigurationDetailsComposite extends Component {\r\n    state = {\r\n        locationOptions: [],\r\n        modlocationOptions: [],\r\n        printerOptions: [],\r\n        allPrinterOptions: [],\r\n        allAvailableReports: [],\r\n        locationPrinterConfig: [],\r\n        backUpPrinterConfig: [],\r\n        modLocationPrinterConfig: [],\r\n        modBackUpPrinterConfig: [],\r\n        isReadyToRender: false,\r\n        activeTab: 0,\r\n        reportPrinterConfig: { locationCode: null, printerName: null, selectedReports: [] },\r\n        modReportPrinterConfig: { locationCode: null, printerName: null, selectedReports: [] },\r\n        modLocationCode: null,\r\n        modPrinterName: null,\r\n        saveEnabled: false,\r\n        validationErrors: Utilities.getInitialValidationErrors(\r\n            PrinterConfigurationValidationDef\r\n        ),\r\n        selectedReports: [],\r\n        selectedBackupPrinters: [],\r\n        tab1_LocationCode: null,\r\n        showAuthenticationLayout: false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {\r\n            Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n            this.setState({\r\n                saveEnabled: Utilities.isInFunction(\r\n                    this.props.userDetails.EntityResult.FunctionsList,\r\n                    functionGroups.add,\r\n                    fnPrinterConfiguration\r\n                )\r\n            })\r\n            this.GetAllLocationsForPrinterConfig();\r\n            this.GetAllAvailableReports();\r\n        } catch (error) {\r\n            console.log(\r\n                \"PrinterConfigurationDetailsComposite:Error occured on componentDidMount\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        try {\r\n            if (this.state.activeTab == 0) {\r\n                if (\r\n                    this.state.reportPrinterConfig.locationCode !== null &&\r\n                    nextProps.selectedRow.LocationCode === undefined &&\r\n                    this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n                ) {\r\n                    let reportPrinterConfig = { locationCode: null, printerName: null, selectedReports: [] }\r\n                    this.setState({\r\n                        reportPrinterConfig,\r\n                        modReportPrinterConfig: reportPrinterConfig,\r\n                        printerOptions: [],\r\n                        tab1_LocationCode: null,\r\n                        activeTab: 0\r\n                    }, () => {\r\n\r\n                        this.GetAllLocationsForPrinterConfig();\r\n                    })\r\n                }\r\n            }\r\n            else {\r\n                if (\r\n                    nextProps.selectedRow.LocationCode === undefined &&\r\n                    this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n                ) {\r\n                    let reportPrinterConfig = { locationCode: null, printerName: null, selectedReports: [] }\r\n                    this.setState({\r\n                        reportPrinterConfig,\r\n                        modReportPrinterConfig: reportPrinterConfig,\r\n                        printerOptions: [],\r\n                        tab1_LocationCode: null,\r\n                        activeTab: 0\r\n                    }, () => {\r\n                        this.GetAllLocationsForPrinterConfig()\r\n                    })\r\n\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"PrinterConfigurationDetailsComposite:Error occured on componentWillReceiveProps\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    GetAllLocationsForPrinterConfig() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetAllLocationsForPrinterConfig,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (this.props.selectedRow.LocationCode !== undefined &&\r\n                            this.props.selectedRow.LocationCode !== null &&\r\n                            this.props.selectedRow.LocationCode !== \"\") {\r\n                            let reportPrinterConfig = lodash.cloneDeep(this.state.reportPrinterConfig)\r\n                            reportPrinterConfig.locationCode = this.props.selectedRow.LocationCode;\r\n                            this.setState({\r\n                                locationOptions: result.EntityResult,\r\n                                modlocationOptions: result.EntityResult,\r\n                                isReadyToRender: true,\r\n                                reportPrinterConfig,\r\n                                modReportPrinterConfig: reportPrinterConfig\r\n                            }, () => {\r\n                                this.GetLocationPrinterConfig();\r\n                                this.GetPrintersForLocation(this.props.selectedRow.LocationCode, this.props.selectedRow.PrinterName)\r\n                            });\r\n                        }\r\n\r\n                        else\r\n                            this.setState({\r\n                                locationOptions: result.EntityResult,\r\n                                modlocationOptions: result.EntityResult,\r\n                                isReadyToRender: true\r\n                            }, () => {\r\n                                this.GetLocationPrinterConfig();\r\n                            })\r\n                    } else {\r\n                        this.setState({\r\n                            locationOptions: [],\r\n                            modlocationOptions: [],\r\n                            isReadyToRender: true\r\n                        });\r\n                        console.log(\"Error in getLocations List:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        locationOptions: [],\r\n                        modlocationOptions: [],\r\n                        isReadyToRender: true\r\n                    });\r\n                    console.log(\"Error while getting locations List:\", error);\r\n                });\r\n        }\r\n        catch (error) {\r\n            console.log(\"PrinterConfigurationDetailsComposite : Error while getting Locations List:\", error);\r\n        }\r\n    }\r\n\r\n    GetAllPrinters() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetAllPrinters,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        this.setState({ allPrinterOptions: result.EntityResult, isReadyToRender: true });\r\n                    } else {\r\n                        this.setState({ allPrinterOptions: [], isReadyToRender: true });\r\n                        console.log(\"Error in getallPrinter List:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({ allPrinterOptions: [], isReadyToRender: true });\r\n                    console.log(\"Error while getting all Printers List:\", error);\r\n                });\r\n        }\r\n        catch (error) {\r\n            console.log(\"PrinterConfigurationDetailsComposite : Error while getting all Printer List:\", error);\r\n        }\r\n    }\r\n\r\n    GetAllAvailableReports() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetAllAvailableReports,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        let allAvailableReports = [];\r\n                        if (Array.isArray(result.EntityResult))\r\n                            result.EntityResult.forEach((item) => {\r\n                                allAvailableReports.push(\r\n                                    {\r\n                                        ReportName: item\r\n                                    }\r\n                                )\r\n                            })\r\n\r\n                        this.setState({ allAvailableReports, isReadyToRender: true });\r\n                    } else {\r\n                        this.setState({ allAvailableReports: [], isReadyToRender: true });\r\n                        console.log(\"Error in getallAvailableReports List:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({ allAvailableReports: [], isReadyToRender: true });\r\n                    console.log(\"Error while getting all reports List:\", error);\r\n                });\r\n        }\r\n        catch (error) {\r\n            console.log(\"PrinterConfigurationDetailsComposite : Error while getting all reports List:\", error);\r\n        }\r\n    }\r\n\r\n    GetAssociatedReports(locationCode, printerName) {\r\n        try {\r\n            let modReportPrinterConfig = lodash.cloneDeep(this.state.modReportPrinterConfig)\r\n            axios(\r\n                RestAPIs.GetAssociatedReports + \"?locationCode=\" + locationCode\r\n                + \"&printerName=\" + printerName,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        let selectedReports = [];\r\n                        if (Array.isArray(result.EntityResult))\r\n                            result.EntityResult.forEach((item) => {\r\n                                selectedReports.push(\r\n                                    {\r\n                                        ReportName: item\r\n                                    }\r\n                                )\r\n                            })\r\n                        modReportPrinterConfig.selectedReports = selectedReports\r\n                        let reportPrinterConfig = lodash.cloneDeep(this.state.reportPrinterConfig)\r\n                        if (reportPrinterConfig.locationCode !== null &&\r\n                            reportPrinterConfig.locationCode !== undefined &&\r\n                            reportPrinterConfig.locationCode !== \"\")\r\n                            this.setState({\r\n                                reportPrinterConfig: modReportPrinterConfig,\r\n                                modReportPrinterConfig,\r\n                                isReadyToRender: true\r\n                            });\r\n                        else {\r\n                            this.setState({\r\n                                modReportPrinterConfig,\r\n                                isReadyToRender: true\r\n                            });\r\n                        }\r\n                    } else {\r\n                        modReportPrinterConfig.selectedReports = []\r\n                        this.setState({\r\n                            modReportPrinterConfig,\r\n                            isReadyToRender: true\r\n                        });\r\n                        console.log(\"Error in getAssociatedReports for location and printer Name:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    modReportPrinterConfig.selectedReports = []\r\n                    this.setState({\r\n                        modReportPrinterConfig,\r\n                        isReadyToRender: true\r\n                    });\r\n                    console.log(\"Error while getting associated reports for location List:\", error);\r\n                });\r\n        }\r\n        catch (error) {\r\n            console.log(\"PrinterConfigurationDetailsComposite : Error while getting Printers for location List:\", error);\r\n        }\r\n    }\r\n\r\n    GetPrintersForLocation(locationCode, printerName) {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetPrintersForLocation + \"?locationCode=\" + locationCode,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (printerName !== null &&\r\n                            printerName !== undefined &&\r\n                            printerName !== \"\") {\r\n                            let reportPrinterConfig = lodash.cloneDeep(this.state.reportPrinterConfig)\r\n                            reportPrinterConfig.printerName = printerName\r\n                            this.setState({\r\n                                printerOptions: result.EntityResult,\r\n                                isReadyToRender: true,\r\n                                reportPrinterConfig,\r\n                                modReportPrinterConfig: reportPrinterConfig\r\n                            }, () => {\r\n                                this.GetAssociatedReports(locationCode, printerName)\r\n                            });\r\n                        }\r\n\r\n                        else\r\n                            this.setState({\r\n                                printerOptions: result.EntityResult,\r\n                                isReadyToRender: true\r\n                            });\r\n                    } else {\r\n                        this.setState({\r\n                            printerOptions: [],\r\n                            isReadyToRender: true\r\n                        });\r\n                        console.log(\"Error in getPrinters for location List:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        printerOptions: [],\r\n                        isReadyToRender: true\r\n                    });\r\n                    console.log(\"Error while getting Printers for location List:\", error);\r\n                });\r\n        }\r\n        catch (error) {\r\n            console.log(\"PrinterConfigurationDetailsComposite : Error while getting Printers for location List:\", error);\r\n        }\r\n    }\r\n\r\n    GetLocationPrinterConfig() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetLocationPrinterConfig,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        let locationPrinterConfig = result.EntityResult.LocationPrinterConfigList;\r\n                        let backUpPrinterConfig = result.EntityResult.BackupPrinterInfoList;\r\n\r\n                        let modlocationOptions = lodash.cloneDeep(this.state.locationOptions);\r\n\r\n                        modlocationOptions = modlocationOptions.filter(item => {\r\n                            let index = locationPrinterConfig.findIndex((x) => x.Location === item)\r\n                            return index !== -1 && locationPrinterConfig[index].Printer !== \"\"\r\n                        })\r\n\r\n                        backUpPrinterConfig =\r\n                            Utilities.addSeqNumberToListObject(backUpPrinterConfig);\r\n\r\n                        this.setState({\r\n                            locationPrinterConfig,\r\n                            backUpPrinterConfig,\r\n                            modLocationPrinterConfig: locationPrinterConfig,\r\n                            modBackUpPrinterConfig: backUpPrinterConfig,\r\n                            isReadyToRender: true,\r\n                            modlocationOptions\r\n                        });\r\n                    } else {\r\n                        this.setState({\r\n                            locationPrinterConfig: [],\r\n                            backUpPrinterConfig: [],\r\n                            modLocationPrinterConfig: [],\r\n                            modBackUpPrinterConfig: [],\r\n                            isReadyToRender: true\r\n                        });\r\n                        console.log(\"Error in getLocationPrinterConfig List:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        locationPrinterConfig: [],\r\n                        backUpPrinterConfig: [],\r\n                        modLocationPrinterConfig: [],\r\n                        modBackUpPrinterConfig: [],\r\n                        isReadyToRender: true\r\n                    });\r\n                    console.log(\"Error while getting LocationPrinterConfig List:\", error);\r\n                });\r\n        }\r\n        catch (error) {\r\n            console.log(\"PrinterConfigurationDetailsComposite : Error while getting Printer List:\", error);\r\n        }\r\n    }\r\n\r\n    handleReportsSelectionChange = (items) => {\r\n        try {\r\n            let modReportPrinterConfig = lodash.cloneDeep(this.state.modReportPrinterConfig)\r\n            modReportPrinterConfig.selectedReports = items\r\n            this.setState({ modReportPrinterConfig });\r\n        } catch (error) {\r\n            console.log(\r\n                \"PrinterConfigurationDetailsComposite:Error occured on handleReportsSelectionChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    handleBackUpPrinterSelectionChange = (items) => {\r\n        try {\r\n            this.setState({ selectedBackupPrinters: items });\r\n        } catch (error) {\r\n            console.log(\r\n                \"PrinterConfigurationDetailsComposite:Error occured on handleBackUpPrinterSelectionChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    UpdateReportPrinterConfig = () => {\r\n        this.handleAuthenticationClose();\r\n        let selectedReportsList = lodash.cloneDeep(this.state.modReportPrinterConfig.selectedReports)\r\n        let reportsList = [];\r\n        if (Array.isArray(selectedReportsList)) {\r\n            selectedReportsList.forEach(element => {\r\n                reportsList.push(element.ReportName)\r\n        });\r\n        }\r\n\r\n        let locationCode=this.state.modReportPrinterConfig.locationCode;\r\n        let printerName= this.state.modReportPrinterConfig.printerName;\r\n\r\n        var keyCode = [\r\n            {\r\n                key: KeyCodes.locationCode,\r\n                value: locationCode,\r\n            },\r\n            {\r\n                key: KeyCodes.printerName,\r\n                value: printerName,\r\n            }\r\n        ];\r\n        var obj = {\r\n            ShareHolderCode: \"\",\r\n            keyDataCode: KeyCodes.locationCode,\r\n            KeyCodes: keyCode,\r\n            Entity: reportsList\r\n        };\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"ReportPrinterConfig_SavedStatus\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [\"PrinterConfig_LocationCode\"],\r\n                    keyValues: [locationCode],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n        axios(\r\n            RestAPIs.UpdateReportPrinterConfig,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    let reportPrinterConfig = lodash.cloneDeep(this.state.reportPrinterConfig);\r\n                    reportPrinterConfig.locationCode = locationCode;\r\n                    reportPrinterConfig.printerName = printerName;\r\n                    this.setState({\r\n                        reportPrinterConfig,\r\n                        modReportPrinterConfig: reportPrinterConfig,\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnPrinterConfiguration\r\n                        )\r\n                    }, () => {\r\n                        this.GetPrintersForLocation(locationCode, printerName)\r\n                    })\r\n                } else {\r\n                    this.setState({ isReadyToRender: true });\r\n                    notification.messageResultDetails[0].errorMessage = result.ResultDataList[0].ErrorList[0];\r\n                }\r\n                this.props.onSaved(this.state.modReportPrinterConfig, \"add\", notification);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error while UpdateReportPrinterConfig:\", error);\r\n            });\r\n\r\n    }\r\n\r\n    UpdateLocationPrinterConfig() {\r\n        this.handleAuthenticationClose();\r\n        let printersList = lodash.cloneDeep(this.state.printerOptions)\r\n        let locationCode=this.state.tab1_LocationCode;\r\n\r\n        var keyCode = [\r\n            {\r\n                key: KeyCodes.locationCode,\r\n                value: locationCode,\r\n            }\r\n        ];\r\n        var obj = {\r\n            ShareHolderCode: \"\",\r\n            keyDataCode: KeyCodes.locationCode,\r\n            KeyCodes: keyCode,\r\n            Entity: printersList\r\n        };\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"LocationPrinterConfig_SavedStatus\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [\"PrinterConfig_LocationCode\"],\r\n                    keyValues: [locationCode],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n        axios(\r\n            RestAPIs.UpdateLocationPrinterConfig,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState({\r\n                        tab1_LocationCode: locationCode,\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnPrinterConfiguration\r\n                        )\r\n                    }, () => {\r\n                        this.GetLocationPrinterConfig()\r\n                        this.GetPrintersForLocation(locationCode, null)\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        isReadyToRender: true,\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnPrinterConfiguration\r\n                        )\r\n                    });\r\n                    notification.messageResultDetails[0].errorMessage = result.ErrorList[0];\r\n                }\r\n                this.props.onSaved(\"\", \"\", notification);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error while UpdateLocationPrinterConfig:\", error);\r\n                this.setState({\r\n                    isReadyToRender: true,\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnPrinterConfiguration\r\n                    )\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    UpdateBackUpPrinterConfig() {\r\n        this.handleAuthenticationClose();\r\n        let backUpPrinterConfig = lodash.cloneDeep(this.state.modBackUpPrinterConfig)\r\n        var obj = {\r\n            ShareHolderCode: \"\",\r\n            keyDataCode: KeyCodes.locationCode,\r\n            KeyCodes: [],\r\n            Entity: backUpPrinterConfig\r\n        };\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"BackUPPrinterConfig_SavedStatus\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [],\r\n                    keyValues: [],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n        axios(\r\n            RestAPIs.UpdateBackUpPrinterConfig,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnPrinterConfiguration\r\n                        )\r\n                    }, () => {\r\n                        this.GetLocationPrinterConfig()\r\n                    })\r\n                } else {\r\n\r\n                    this.setState({\r\n                        isReadyToRender: true,\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnPrinterConfiguration\r\n                        )\r\n                    });\r\n\r\n                    notification.messageResultDetails[0].errorMessage = result.ErrorList[0];\r\n                }\r\n                this.props.onSaved(\"\", \"\", notification);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error while UpdateBackUpPrinterConfig:\", error);\r\n                this.setState({\r\n                    isReadyToRender: true,\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnPrinterConfiguration\r\n                    )\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n        \r\n    handleUpdateReportPrinterConfig = () => {\r\n        try {\r\n          this.setState({ saveEnabled: false });\r\n         \r\n          this.UpdateReportPrinterConfig();\r\n\r\n        } catch (error) {\r\n          console.log(\"Save Scada Config Composite : Error in saveScadaConfig\");\r\n        }\r\n      };\r\n\r\n      handleUpdateLocationPrinterConfig = () => {\r\n        try {\r\n          this.setState({ saveEnabled: false });\r\n         \r\n          this.UpdateLocationPrinterConfig();\r\n\r\n        } catch (error) {\r\n          console.log(\"Save Scada Config Composite : Error in saveScadaConfig\");\r\n        }\r\n      };\r\n\r\n\r\n      handleUpdateBackupPrinterConfig = () => {\r\n        try {\r\n          this.setState({ saveEnabled: false });\r\n         \r\n          this.UpdateBackUpPrinterConfig();\r\n\r\n        } catch (error) {\r\n          console.log(\"Save Scada Config Composite : Error in saveScadaConfig\");\r\n        }\r\n      };\r\n\r\n\r\n\r\n    handleSave = () => {\r\n        try {\r\n           // this.setState({ saveEnabled: false });\r\n            if (this.state.activeTab === 0) {\r\n\r\n                if (this.validateSave()) {\r\n \r\n                    let showAuthenticationLayout =this.props.userDetails.EntityResult.IsWebPortalUser !== true? true: false;\r\n                    this.setState({ showAuthenticationLayout }, () => {\r\n                        if (showAuthenticationLayout === false) {\r\n                            this.handleUpdateReportPrinterConfig()\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    this.setState({ saveEnabled: true });\r\n                }\r\n            }\r\n            else if (this.state.activeTab === 1) {\r\n                if (this.validateSave()) {\r\n                    let showAuthenticationLayout =this.props.userDetails.EntityResult.IsWebPortalUser !== true? true: false;\r\n                    this.setState({ showAuthenticationLayout }, () => {\r\n                        if (showAuthenticationLayout === false) {\r\n                            this.handleUpdateLocationPrinterConfig()\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    this.setState({ saveEnabled: true });\r\n                }\r\n            }\r\n            else if (this.state.activeTab === 2) {\r\n                if (this.validateSave()) {\r\n                    \r\n                  \r\n                    let showAuthenticationLayout =this.props.userDetails.EntityResult.IsWebPortalUser !== true? true: false;\r\n                    this.setState({ showAuthenticationLayout }, () => {\r\n                        if (showAuthenticationLayout === false) {\r\n                            this.handleUpdateBackupPrinterConfig()\r\n                        }\r\n                    });\r\n\r\n                     \r\n                }\r\n                else {\r\n                    this.setState({ saveEnabled: true });\r\n                }\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(\r\n                \"PrinterConfigurationDetailsComposite:Error occured on handleSave\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    validateSave() {\r\n        var returnValue = true;\r\n        if (this.state.activeTab === 0) {\r\n            let validationErrors = { ...this.state.validationErrors };\r\n\r\n            validationErrors.LocationCode = Utilities.validateField(\r\n                PrinterConfigurationValidationDef.LocationCode,\r\n                this.state.modReportPrinterConfig.locationCode\r\n            );\r\n\r\n            validationErrors.PrinterName = Utilities.validateField(\r\n                PrinterConfigurationValidationDef.PrinterName,\r\n                this.state.modReportPrinterConfig.printerName\r\n            );\r\n\r\n            this.setState({ validationErrors })\r\n\r\n            if (returnValue)\r\n                returnValue = Object.values(validationErrors).every(function (value) {\r\n                    return value === \"\";\r\n                });\r\n        }\r\n\r\n        if (this.state.activeTab === 1) {\r\n            let validationErrors = { ...this.state.validationErrors };\r\n\r\n            validationErrors.Location = Utilities.validateField(\r\n                PrinterConfigurationValidationDef.Location,\r\n                this.state.tab1_LocationCode\r\n            );\r\n\r\n            validationErrors.LocationCode = \"\";\r\n\r\n            validationErrors.PrinterName = \"\";\r\n\r\n            this.setState({ validationErrors })\r\n            if (returnValue)\r\n                returnValue = Object.values(validationErrors).every(function (value) {\r\n                    return value === \"\";\r\n                });\r\n        }\r\n        if (this.state.activeTab == 2) {\r\n            let backUpPrinterConfig = lodash.cloneDeep(this.state.backUpPrinterConfig);\r\n            let modBackUpPrinterConfig = lodash.cloneDeep(this.state.modBackUpPrinterConfig);\r\n\r\n            let uniqueRecords = [\r\n                ...new Set(\r\n                    modBackUpPrinterConfig.map(\r\n                        (a) => a.PrimaryPrinter\r\n                    )\r\n                ),\r\n            ];\r\n\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"ShipmentCompDetail_SavedStatus\",\r\n                messageResultDetails: [],\r\n            };\r\n\r\n            if (\r\n                uniqueRecords.length !==\r\n                modBackUpPrinterConfig.length\r\n            ) {\r\n                notification.messageResultDetails.push({\r\n                    keyFields: [],\r\n                    keyValues: [],\r\n                    isSuccess: false,\r\n                    errorMessage: \"PrinterConfig_CannotConfigureMultipleBackup\",\r\n                });\r\n                returnValue = false;\r\n            }\r\n            if (returnValue) {\r\n                modBackUpPrinterConfig.forEach(item => {\r\n                    if (item.PrimaryPrinter === \"\"\r\n                        || item.PrimaryPrinter === undefined\r\n                        || item.PrimaryPrinter === null) {\r\n                        notification.messageResultDetails.push({\r\n                            keyFields: [],\r\n                            keyValues: [],\r\n                            isSuccess: false,\r\n                            errorMessage: \"PrinterConfig_PrinterNameRequired\",\r\n                        });\r\n                        returnValue = false;\r\n                    }\r\n                    else if (item.BackupPrinter === \"\"\r\n                        || item.BackupPrinter === undefined\r\n                        || item.BackupPrinter === null) {\r\n                        notification.messageResultDetails.push({\r\n                            keyFields: [],\r\n                            keyValues: [],\r\n                            isSuccess: false,\r\n                            errorMessage: \"PrinterConfig_BackupPrinterNameRequired\",\r\n                        });\r\n                        returnValue = false;\r\n                    }\r\n                })\r\n            }\r\n\r\n            if (!returnValue && notification.messageResultDetails[0].errorMessage !== \"\")\r\n                this.props.onSaved(\"\", \"\", notification);\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n    handleReset = () => {\r\n        try {\r\n            if (this.state.activeTab == 0) {\r\n                let modReportPrinterConfig = lodash.cloneDeep(this.state.reportPrinterConfig);\r\n                this.setState({\r\n                    modReportPrinterConfig,\r\n                    validationErrors: Utilities.getInitialValidationErrors(\r\n                        PrinterConfigurationValidationDef\r\n                    ),\r\n                })\r\n            }\r\n            else if (this.state.activeTab == 1) {\r\n                this.setState({\r\n                    validationErrors: Utilities.getInitialValidationErrors(\r\n                        PrinterConfigurationValidationDef\r\n                    ),\r\n                })\r\n                if (this.state.tab1_LocationCode !== null &&\r\n                    this.state.tab1_LocationCode !== undefined &&\r\n                    this.state.tab1_LocationCode !== \"\"\r\n                )\r\n                    this.GetPrintersForLocation(this.state.tab1_LocationCode, null)\r\n            }\r\n            else {\r\n                this.setState({\r\n                    modBackUpPrinterConfig: this.state.backUpPrinterConfig,\r\n                    selectedBackupPrinters: []\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.log(\"PrinterConfigurationDetailsComposite : Error in handleReset\")\r\n        }\r\n    }\r\n\r\n    handleTabChange = (activeIndex) => {\r\n        try {\r\n            if (activeIndex !== 0)\r\n                this.setState({\r\n                    activeTab: activeIndex,\r\n                    validationErrors: Utilities.getInitialValidationErrors(\r\n                        PrinterConfigurationValidationDef\r\n                    ),\r\n                    reportPrinterConfig: { locationCode: null, printerName: null, selectedReports: [] },\r\n                    modReportPrinterConfig: { locationCode: null, printerName: null, selectedReports: [] },\r\n                    printerOptions: [],\r\n                    tab1_LocationCode: null,\r\n                }, () => {\r\n                    this.GetLocationPrinterConfig();\r\n                    this.GetAllPrinters();\r\n                });\r\n            else {\r\n                this.setState({\r\n                    activeTab: activeIndex,\r\n                    validationErrors: Utilities.getInitialValidationErrors(\r\n                        PrinterConfigurationValidationDef\r\n                    )\r\n                })\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(\r\n                \"PrinterConfigurationDetailsComposite: Error occurred on handleTabChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    handleChange = (propertyName, value, cellData) => {\r\n        try {\r\n            if (propertyName === \"report_locationCode\") {\r\n                let validationErrors = { ...this.state.validationErrors };\r\n                let modReportPrinterConfig = lodash.cloneDeep(this.state.modReportPrinterConfig)\r\n\r\n                modReportPrinterConfig.locationCode = value\r\n                modReportPrinterConfig.printerName = null\r\n\r\n                validationErrors.LocationCode = Utilities.validateField(\r\n                    PrinterConfigurationValidationDef.LocationCode,\r\n                    modReportPrinterConfig.locationCode\r\n                );\r\n\r\n                this.setState({\r\n                    validationErrors,\r\n                    modReportPrinterConfig\r\n                }, () => {\r\n                    this.GetPrintersForLocation(value, null)\r\n                });\r\n\r\n            }\r\n\r\n            else if (propertyName === \"report_printerName\") {\r\n                let validationErrors = { ...this.state.validationErrors };\r\n\r\n                let modReportPrinterConfig = lodash.cloneDeep(this.state.modReportPrinterConfig)\r\n\r\n                modReportPrinterConfig.printerName = value\r\n\r\n                validationErrors.PrinterName = Utilities.validateField(\r\n                    PrinterConfigurationValidationDef.PrinterName,\r\n                    modReportPrinterConfig.printerName\r\n                );\r\n\r\n                this.setState({\r\n                    validationErrors,\r\n                    modReportPrinterConfig\r\n                }, () => {\r\n                    this.GetAssociatedReports(modReportPrinterConfig.locationCode, value);\r\n                });\r\n            }\r\n            else if (propertyName === \"locationPrinter\") {\r\n                let printerOptions = lodash.cloneDeep(this.state.printerOptions)\r\n                if (value)\r\n                    printerOptions.push(cellData)\r\n                else\r\n                    printerOptions = printerOptions.filter((item) => { return item !== cellData })\r\n                this.setState({\r\n                    printerOptions\r\n                })\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(\r\n                \"PrinterConfigurationDetailsComposite: Error occurred on handleTabChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    handleRowClick = (e) => {\r\n        try {\r\n            this.setState({\r\n                tab1_LocationCode: e.rowData.Location,\r\n            },\r\n                () => {\r\n                    this.GetPrintersForLocation(this.state.tab1_LocationCode, null)\r\n                });\r\n        } catch (error) {\r\n            console.log(\"PrinterConfigurationDetailsComposite:Error occured on Row click\", error);\r\n        }\r\n    };\r\n\r\n    handleAddBackUpConfigComp = () => {\r\n        try {\r\n            let newBackUpConfig = {\r\n                PrimaryPrinter: null,\r\n                BackupPrinter: null\r\n            }\r\n            let modBackUpPrinterConfig = lodash.cloneDeep(this.state.modBackUpPrinterConfig)\r\n\r\n            newBackUpConfig.SeqNumber = Utilities.getMaxSeqNumberfromListObject(modBackUpPrinterConfig);\r\n            modBackUpPrinterConfig.push(newBackUpConfig);\r\n\r\n            this.setState({\r\n                modBackUpPrinterConfig\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(\"PrinterConfigurationDetailsComposite : Error in handleAddBackupConfigComp\")\r\n        }\r\n    }\r\n\r\n    handleCellDataEdit = (newVal, cellData) => {\r\n        try {\r\n            let modBackUpPrinterConfig = lodash.cloneDeep(\r\n                this.state.modBackUpPrinterConfig\r\n            );\r\n            modBackUpPrinterConfig[cellData.rowIndex][cellData.field] = newVal;\r\n\r\n            this.setState({ modBackUpPrinterConfig });\r\n        } catch (error) {\r\n            console.log(\r\n\r\n                \"PrinterConfigurationDetailsComposite:Error occured on handleCellDataEdit\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    handleBackUpPrinterSelectionChange = (associations) => {\r\n        this.setState({ selectedBackupPrinters: associations });\r\n    };\r\n\r\n    handleDeleteBackUpConfigComp = () => {\r\n        try {\r\n            if (\r\n                this.state.selectedBackupPrinters != null &&\r\n                this.state.selectedBackupPrinters.length > 0\r\n            ) {\r\n                if (this.state.modBackUpPrinterConfig.length > 0) {\r\n                    let modBackUpPrinterConfig = lodash.cloneDeep(\r\n                        this.state.modBackUpPrinterConfig\r\n                    );\r\n\r\n                    this.state.selectedBackupPrinters.forEach((obj, index) => {\r\n                        modBackUpPrinterConfig = modBackUpPrinterConfig.filter(\r\n                            (association, cindex) => {\r\n                                return association.SeqNumber !== obj.SeqNumber;\r\n                            }\r\n                        );\r\n                    });\r\n\r\n                    this.setState({\r\n                        modBackUpPrinterConfig,\r\n                        selectedBackupPrinters: [],\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(\"PrinterConfigurationDetailsComposite : Error in handleDeleteBackUpConfigComp\")\r\n        }\r\n    }\r\n\r\n    handleAuthenticationClose = () => {\r\n        this.setState({\r\n          showAuthenticationLayout: false,\r\n        });\r\n      };\r\n\r\n\r\n    \r\n  handleOperation= () =>  {\r\n    \r\n    if (this.state.activeTab === 0)\r\n      return this.handleUpdateReportPrinterConfig;\r\n    else if (this.state.activeTab === 1)\r\n    return this.handleUpdateLocationPrinterConfig;\r\n    else if (this.state.activeTab === 2)\r\n    return this.handleUpdateBackupPrinterConfig;\r\n  };\r\n\r\n\r\n    render() {\r\n        const listOptions = {\r\n            locationOptions: this.state.modlocationOptions,\r\n            printerOptions: this.state.printerOptions,\r\n            allPrinterOptions: this.state.allPrinterOptions,\r\n            allAvailableReports: this.state.allAvailableReports\r\n        };\r\n\r\n        return this.state.isReadyToRender ? (\r\n            <div>\r\n                <TranslationConsumer>\r\n                    {(t) => (\r\n                        <ErrorBoundary>\r\n                            <TMDetailsHeader\r\n                                entityCode={t(\"PrinterConfig_Title\")}\r\n                                newEntityName=\"PrinterConfig_Title\"\r\n                            ></TMDetailsHeader>\r\n                        </ErrorBoundary>\r\n                    )}\r\n                </TranslationConsumer>\r\n                <ErrorBoundary>\r\n                    <PrinterConfigurationDetails\r\n                        listOptions={listOptions}\r\n                        onTabChange={this.handleTabChange}\r\n                        activeTab={this.state.activeTab}\r\n                        modReportPrinterConfig={this.state.modReportPrinterConfig}\r\n                        onFieldChange={this.handleChange}\r\n                        validationErrors={this.state.validationErrors}\r\n                        selectedReports={this.state.modReportPrinterConfig.selectedReports}\r\n                        handleReportsSelectionChange={this.handleReportsSelectionChange}\r\n                        selectedBackupPrinters={this.state.selectedBackupPrinters}\r\n                        handleBackUpPrinterSelectionChange={this.handleBackUpPrinterSelectionChange}\r\n                        modLocationPrinterConfig={this.state.modLocationPrinterConfig}\r\n                        modBackUpPrinterConfig={this.state.modBackUpPrinterConfig}\r\n                        onRowClick={this.handleRowClick}\r\n                        tab1_LocationCode={this.state.tab1_LocationCode}\r\n                        handleAddBackUpConfigComp={this.handleAddBackUpConfigComp}\r\n                        handleDeleteBackUpConfigComp={this.handleDeleteBackUpConfigComp}\r\n                        handleCellDataEdit={this.handleCellDataEdit}\r\n                    ></PrinterConfigurationDetails>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <TMDetailsUserActions\r\n                        handleBack={this.props.onBack}\r\n                        handleSave={this.handleSave}\r\n                        handleReset={this.handleReset}\r\n                        saveEnabled={this.state.saveEnabled}\r\n                    ></TMDetailsUserActions>\r\n                </ErrorBoundary>\r\n                {this.state.showAuthenticationLayout ? (\r\n                <UserAuthenticationLayout\r\n                    Username={this.props.userDetails.EntityResult.UserName}\r\n                    functionName={functionGroups.modify}\r\n                    functionGroup={fnPrinterConfiguration}\r\n                    handleOperation={this.handleOperation()}\r\n                    handleClose={this.handleAuthenticationClose}\r\n                ></UserAuthenticationLayout>\r\n                ) : null}             \r\n            </div>\r\n        ) : (\r\n            <LoadingPage message=\"Loading\"></LoadingPage>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(PrinterConfigurationDetailsComposite);\r\n\r\nPrinterConfigurationDetailsComposite.propTypes = {\r\n    selectedRow: PropTypes.object.isRequired,\r\n    onBack: PropTypes.func.isRequired,\r\n    onSaved: PropTypes.func.isRequired\r\n};","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n"],"names":["PrinterConfigurationDetails","_ref","listOptions","onTabChange","activeTab","handleAddBackUpConfigComp","handleDeleteBackUpConfigComp","selectedBackupPrinters","handleBackUpPrinterSelectionChange","onRowClick","onFieldChange","handleCellDataEdit","modReportPrinterConfig","validationErrors","selectedReports","handleReportsSelectionChange","modLocationPrinterConfig","modBackUpPrinterConfig","tab1_LocationCode","t","useTranslation","handleDropdownEdit","cellData","_jsx","Select","className","placeholder","value","rowIndex","field","fluid","options","Utilities","allPrinterOptions","onChange","indicator","reserveSpace","search","noResultsMessage","children","_jsxs","Tab","activeIndex","Pane","title","label","locationCode","locationOptions","data","error","LocationCode","printerName","printerOptions","PrinterName","DataTable","allAvailableReports","scrollable","scrollHeight","selectionMode","selection","onSelectionChange","Column","header","onCellClick","undefined","editable","style","marginBottom","Input","Location","disabled","class","map","index","Checkbox","checked","some","printer","check","onClick","Icon","root","name","size","editFieldType","customEditRenderer","PrinterConfigurationDetailsComposite","Component","constructor","arguments","state","modlocationOptions","locationPrinterConfig","backUpPrinterConfig","isReadyToRender","reportPrinterConfig","modLocationCode","modPrinterName","saveEnabled","PrinterConfigurationValidationDef","showAuthenticationLayout","items","lodash","this","setState","console","log","UpdateReportPrinterConfig","handleAuthenticationClose","selectedReportsList","reportsList","Array","isArray","forEach","element","push","ReportName","keyCode","key","KeyCodes","obj","ShareHolderCode","keyDataCode","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","axios","RestAPIs","props","tokenDetails","tokenInfo","then","response","result","IsSuccess","userDetails","EntityResult","FunctionsList","functionGroups","add","fnPrinterConfiguration","GetPrintersForLocation","ResultDataList","ErrorList","onSaved","catch","handleUpdateReportPrinterConfig","handleUpdateLocationPrinterConfig","UpdateLocationPrinterConfig","handleUpdateBackupPrinterConfig","UpdateBackUpPrinterConfig","handleSave","validateSave","IsWebPortalUser","handleReset","handleTabChange","GetLocationPrinterConfig","GetAllPrinters","handleChange","propertyName","GetAssociatedReports","filter","item","handleRowClick","e","rowData","newBackUpConfig","PrimaryPrinter","BackupPrinter","SeqNumber","newVal","associations","length","association","cindex","handleOperation","componentDidMount","IsArchived","GetAllLocationsForPrinterConfig","GetAllAvailableReports","componentWillReceiveProps","nextProps","selectedRow","LocationPrinterConfigList","BackupPrinterInfoList","findIndex","x","Printer","printersList","returnValue","Object","values","every","uniqueRecords","Set","a","render","TranslationConsumer","ErrorBoundary","TMDetailsHeader","entityCode","newEntityName","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","modify","functionGroup","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","popUpContents","margin","Popup","fieldName","fieldValue","marginLeft","position","List","content","Content","defaultProps","Button","float"],"sourceRoot":""}