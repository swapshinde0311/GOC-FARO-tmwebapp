{"version":3,"file":"static/js/3253.919790ee.chunk.js","mappings":"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","sources":["Components/Composite/Entity/ShareholderAllocationComposite.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../../../CSS/styles.css\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport {\r\n  functionGroups,\r\n  fnShareholderAllocation,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport { ShareholderAllocationsSummaryPageComposite } from \"../Summary/ShareholderAllocationsSummaryPageComposite\";\r\nimport ShareholderAllocationDetailsComposite from \"../Details/ShareholderAllocationDetailsComposite\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport Error from \"../../Error\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass ShareholderAllocationComposite extends Component {\r\n\r\n  state = {\r\n    isDetails: \"false\",\r\n    isReadyToRender: false,\r\n    isDetailsModified: \"false\",\r\n    operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n    selectedRow: {},\r\n    selectedItems: [],\r\n    data: {},\r\n    isEnable: true,\r\n    allocationType: \"\",\r\n    showAuthenticationLayout: false,\r\n  };\r\n\r\n  componentName = \"ShareholderAllocationComponent\";\r\n\r\n  componentDidMount() {\r\n    try {\r\n\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getLookUpData();\r\n\r\n    } catch (error) {\r\n      console.log(\"ShareholderAllocationComposite:Error occured on ComponentDidMount\", error);\r\n    }\r\n    // clear session storage on window refresh event\r\n    window.addEventListener(\"beforeunload\", () => Utilities.clearSessionStorage(this.componentName + \"GridState\"));\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    Utilities.clearSessionStorage(this.componentName + \"GridState\");\r\n    window.removeEventListener(\"beforeunload\", () => Utilities.clearSessionStorage(this.componentName + \"GridState\"));\r\n  }\r\n\r\n\r\n\r\n  getLookUpData() {\r\n    axios(\r\n      RestAPIs.GetLookUpData + \"?LookUpTypeCode=ProductAllocation\",\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let isEnable = true;\r\n\r\n          let allocationType = result.EntityResult.AllocationEntity.toUpperCase();\r\n\r\n          if (result.EntityResult.AllocationEntity.toUpperCase() === Constants.AllocationEntityType.CUSTOMER_AND_SHAREHOLDER)\r\n            allocationType = Constants.AllocationEntityType.SHAREHOLDER\r\n\r\n          if (result.EntityResult.AllocationEntity.toUpperCase() !== Constants.AllocationEntityType.SHAREHOLDER &&\r\n            result.EntityResult.AllocationEntity.toUpperCase() !== Constants.AllocationEntityType.CUSTOMER_AND_SHAREHOLDER) {\r\n            isEnable = false;\r\n          }\r\n          if (isEnable && result.EntityResult.EnableProductAllocation.toUpperCase() === \"FALSE\") {\r\n            isEnable = false;\r\n          }\r\n\r\n          this.setState({ lookUpData: result.EntityResult, isEnable });\r\n\r\n          if (isEnable) {\r\n            var { operationsVisibilty } = { ...this.state };\r\n            operationsVisibilty.add = Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnShareholderAllocation\r\n            );\r\n            this.setState({\r\n              operationsVisibilty,\r\n              allocationType\r\n            }, () => {\r\n              this.getShareholderAllocationList(\r\n                this.props.userDetails.EntityResult.PrimaryShareholder\r\n              )\r\n            }\r\n            );\r\n          }\r\n        } else {\r\n          console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"ShareholderAllocationComposite: Error occurred on getLookUpData\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  getShareholderAllocationList(shareholder) {\r\n    try {\r\n\r\n      axios(\r\n        RestAPIs.GetShareholderAllocationList + \"?ShareholderCode=\"\r\n        + shareholder + \"&allocationType=\" + fnShareholderAllocation,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({ data: result.EntityResult, isReadyToRender: true });\r\n          } else {\r\n            this.setState({ data: [], isReadyToRender: true });\r\n            console.log(\"Error in getShareholderAllocationList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          this.setState({ data: [], isReadyToRender: true });\r\n          console.log(\"Error while getting Shareholder allocation List:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while getting Shareholder allocation List:\", error);\r\n    }\r\n  }\r\n\r\n  handleAdd = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete = false;\r\n      operationsVisibilty.add = false;\r\n      operationsVisibilty.shareholder = false;\r\n\r\n      this.setState({\r\n        isDetails: \"true\",\r\n        selectedRow: {},\r\n        operationsVisibilty,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"ShareholderAllocationComposite:Error occured on handleAdd\", error);\r\n    }\r\n  };\r\n\r\n  handleDelete = () => {\r\n    try {\r\n      this.handleAuthenticationClose();\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete = false;\r\n      this.setState({ operationsVisibilty });\r\n\r\n      var deleteShareholderAllocationKeys = [];\r\n      for (var i = 0; i < this.state.selectedItems.length; i++) {\r\n        var shCode = this.props.userDetails.EntityResult.PrimaryShareholder;\r\n        var entityCode = this.state.selectedItems[i][\"Common_Code\"];\r\n        var keyData = {\r\n          keyDataCode: 0,\r\n          ShareHolderCode: shCode,\r\n          KeyCodes: [{\r\n            Key: KeyCodes.entityType,\r\n            Value: Constants.AllocationEntityType.SHAREHOLDER\r\n          },\r\n          {\r\n            Key: KeyCodes.entityCode,\r\n            Value: entityCode\r\n          }],\r\n        };\r\n        deleteShareholderAllocationKeys.push(keyData);\r\n      }\r\n\r\n      axios(\r\n        RestAPIs.DeleteShareholderAllocation,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          deleteShareholderAllocationKeys,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          console.log(response.data);\r\n          var result = response.data;\r\n          var isRefreshDataRequire = result.isSuccess;\r\n\r\n          if (\r\n            result.ResultDataList !== null &&\r\n            result.ResultDataList !== undefined\r\n          ) {\r\n            var failedResultsCount = result.ResultDataList.filter(function (\r\n              res\r\n            ) {\r\n              return !res.IsSuccess;\r\n            }).length;\r\n\r\n            if (failedResultsCount === result.ResultDataList.length) {\r\n              isRefreshDataRequire = false;\r\n            } else isRefreshDataRequire = true;\r\n          }\r\n\r\n          var notification = Utilities.convertResultsDatatoNotification(\r\n            result,\r\n            \"ShareholderAllocation_DeletionStatus\",\r\n            [\"EntityCode\"]\r\n          );\r\n\r\n          if (isRefreshDataRequire) {\r\n            this.setState({ isReadyToRender: false });\r\n            this.getShareholderAllocationList(this.props.userDetails.EntityResult.PrimaryShareholder);\r\n            // this.getKPIList(this.state.selectedShareholder);\r\n            operationsVisibilty.delete = false;\r\n            this.setState({\r\n              selectedItems: [],\r\n              operationsVisibilty,\r\n              selectedRow: {},\r\n            });\r\n          } else {\r\n            operationsVisibilty.delete = true;\r\n            this.setState({ operationsVisibilty });\r\n          }\r\n\r\n          notification.messageResultDetails.forEach((messageResult) => {\r\n            if (messageResult.keyFields.length > 0)\r\n              messageResult.keyFields[0] = \"ShareholderDetails_Code\";\r\n          });\r\n\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          throw error;\r\n        });\r\n    } catch (error) {\r\n      console.log(\"ShareholderAllocationComposite:Error occured on handleDelete\", error);\r\n    }\r\n  };\r\n\r\n  handleRowClick = (item) => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnShareholderAllocation\r\n      );\r\n      operationsVisibilty.delete = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.remove,\r\n        fnShareholderAllocation\r\n      );\r\n      operationsVisibilty.shareholder = false;\r\n      this.setState({\r\n        isDetails: \"true\",\r\n        selectedRow: item,\r\n        selectedItems: [item],\r\n        operationsVisibilty,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"ShareholderAllocationComposite:Error occured on handleRowClick\", error);\r\n    }\r\n  };\r\n\r\n  handleSelection = (items) => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n\r\n      operationsVisibilty.delete =\r\n        items.length > 0 &&\r\n        Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.remove,\r\n          fnShareholderAllocation\r\n        );\r\n\r\n      this.setState({ selectedItems: items, operationsVisibilty });\r\n    } catch (error) {\r\n      console.log(\"ShareholderAllocationComposite:Error occured on handleSelection\", error);\r\n    }\r\n  };\r\n\r\n  savedEvent = (data, saveType, notification) => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      if (notification === null) {\r\n         operationsVisibilty.add = Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          fnShareholderAllocation\r\n        );\r\n\t      operationsVisibilty.delete = Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.remove,\r\n          fnShareholderAllocation\r\n        );\r\n        this.setState({ isDetailsModified: \"true\", operationsVisibilty });\r\n      }\r\n      else {\r\n\r\n        if (notification.messageType === \"success\") {\r\n          operationsVisibilty.add = true;\r\n          operationsVisibilty.delete = true;\r\n          this.setState({ isDetailsModified: \"true\", operationsVisibilty });\r\n        }\r\n        if (notification.messageType === \"success\" && saveType === \"add\") {\r\n          var selectedItems = [\r\n            {\r\n              Common_Code: data.EntityCode,\r\n            },\r\n          ];\r\n          this.setState({ selectedItems });\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ShareholderAllocationComposite:Error occured on savedEvent\", error);\r\n    }\r\n  };\r\n\r\n  handleBack = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnShareholderAllocation\r\n      );\r\n      operationsVisibilty.delete = false;\r\n      this.setState({\r\n        isDetails: false,\r\n        selectedRow: {},\r\n        selectedItems: [],\r\n        isReadyToRender: false,\r\n      });\r\n      this.getShareholderAllocationList(this.props.userDetails.EntityResult.PrimaryShareholder);\r\n      this.getKPIList();\r\n    } catch (error) {\r\n      console.log(\"ShareholderComposite:Error occured on Back click\", error);\r\n    }\r\n  };\r\n\r\n  authenticateDelete = () => {\r\n    try {\r\n      let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      this.setState({ showAuthenticationLayout });\r\n      if (showAuthenticationLayout === false) {\r\n        this.handleDelete();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ShareholderAllocation Composite : Error in authenticateDelete\");\r\n    }\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMUserActionsComposite\r\n            operationsVisibilty={this.state.operationsVisibilty}\r\n            breadcrumbItem={this.props.activeItem}\r\n            onDelete={this.authenticateDelete}\r\n            onAdd={this.handleAdd}\r\n            shrVisible={false}\r\n            handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n          ></TMUserActionsComposite>\r\n        </ErrorBoundary>\r\n        {this.state.isDetails === \"true\" ? (\r\n          <ErrorBoundary>\r\n            <ShareholderAllocationDetailsComposite\r\n              key=\"ShareholderAllocationDetails\"\r\n              selectedRow={this.state.selectedRow}\r\n              onBack={this.handleBack}\r\n              onSaved={this.savedEvent}\r\n              allocationType={this.state.allocationType}\r\n            ></ShareholderAllocationDetailsComposite>\r\n          </ErrorBoundary>\r\n        ) : this.state.isReadyToRender ? (\r\n          <div>\r\n            {/* <ErrorBoundary>\r\n              <KPIDashboardLayout\r\n                kpiList={this.state.driverKPIList}\r\n              ></KPIDashboardLayout>\r\n            </ErrorBoundary> */}\r\n            <ErrorBoundary>\r\n              <ShareholderAllocationsSummaryPageComposite\r\n                tableData={this.state.data.Table}\r\n                columnDetails={this.state.data.Column}\r\n                pageSize={\r\n                  this.props.userDetails.EntityResult.PageAttibutes\r\n                    .WebPortalListPageSize\r\n                }\r\n                exportRequired={true}\r\n                exportFileName=\"ShareholderAllocationList\"\r\n                columnPickerRequired={true}\r\n                terminalsToShow={\r\n                  this.props.userDetails.EntityResult.PageAttibutes\r\n                    .NoOfTerminalsToShow\r\n                }\r\n                selectionRequired={true}\r\n                columnGroupingRequired={true}\r\n                onSelectionChange={this.handleSelection}\r\n                onRowClick={this.handleRowClick}\r\n                parentComponent={this.componentName}\r\n              ></ShareholderAllocationsSummaryPageComposite>\r\n            </ErrorBoundary>\r\n          </div>\r\n        ) :\r\n          (\r\n            <>\r\n              {this.state.isEnable ? (\r\n                <LoadingPage message=\"Loading\"></LoadingPage>\r\n              ) : (\r\n                <Error errorMessage=\"ProductAllocation_Enable\"></Error>\r\n              )}\r\n            </>\r\n          )}\r\n        <ErrorBoundary>\r\n          <ToastContainer\r\n            hideProgressBar={true}\r\n            closeOnClick={false}\r\n            closeButton={true}\r\n            newestOnTop={true}\r\n            position=\"bottom-right\"\r\n            toastClassName=\"toast-notification-wrap\"\r\n          />\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={functionGroups.remove}\r\n            functionGroup={fnShareholderAllocation}\r\n            handleClose={this.handleAuthenticationClose}\r\n            handleOperation={this.handleDelete}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ShareholderAllocationComposite);\r\n\r\nShareholderAllocationComposite.propTypes = {\r\n  activeItem: PropTypes.object,\r\n};\r\n"],"names":["ShareholderAllocationComposite","Component","constructor","arguments","state","isDetails","isReadyToRender","isDetailsModified","operationsVisibilty","add","delete","shareholder","selectedRow","selectedItems","data","isEnable","allocationType","showAuthenticationLayout","componentName","componentWillUnmount","Utilities","this","window","removeEventListener","handleAdd","setState","error","console","log","handleDelete","handleAuthenticationClose","deleteShareholderAllocationKeys","i","length","shCode","props","userDetails","EntityResult","PrimaryShareholder","entityCode","keyData","keyDataCode","ShareHolderCode","KeyCodes","Key","Value","Constants","SHAREHOLDER","push","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","isRefreshDataRequire","isSuccess","ResultDataList","undefined","filter","res","IsSuccess","notification","getShareholderAllocationList","messageResultDetails","forEach","messageResult","keyFields","toast","_jsx","ErrorBoundary","children","NotifyEvent","notificationMessage","autoClose","messageType","catch","handleRowClick","item","FunctionsList","functionGroups","fnShareholderAllocation","remove","handleSelection","items","savedEvent","saveType","Common_Code","EntityCode","handleBack","getKPIList","authenticateDelete","IsWebPortalUser","componentDidMount","IsArchived","getLookUpData","addEventListener","AllocationEntity","toUpperCase","CUSTOMER_AND_SHAREHOLDER","EnableProductAllocation","lookUpData","ErrorList","render","_jsxs","TMUserActionsComposite","breadcrumbItem","activeItem","onDelete","onAdd","shrVisible","handleBreadCrumbClick","ShareholderAllocationDetailsComposite","onBack","onSaved","ShareholderAllocationsSummaryPageComposite","tableData","Table","columnDetails","Column","pageSize","PageAttibutes","WebPortalListPageSize","exportRequired","exportFileName","columnPickerRequired","terminalsToShow","NoOfTerminalsToShow","selectionRequired","columnGroupingRequired","onSelectionChange","onRowClick","parentComponent","_Fragment","LoadingPage","message","Error","errorMessage","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","position","toastClassName","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleClose","handleOperation","connect","getUserDetails","TokenAuth"],"sourceRoot":""}