{"version":3,"file":"static/js/4199.7662fcdc.chunk.js","mappings":"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","sources":["Components/UIBase/Details/RailReceiptRecordWeightDetails.jsx","Components/Composite/Details/RailReceiptRecordWeightDetailsComposite.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport { DatePicker, Input, Select, Checkbox } from \"@scuf/common\";\r\nimport { TranslationConsumer, useTranslation } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\n\r\nRailReceiptRecordWeightDetails.propTypes = {\r\n  modRailReceipt: PropTypes.object.isRequired,\r\n  modWeighBridgeData: PropTypes.array.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    WeighBridges: PropTypes.array,\r\n  }).isRequired,\r\n  handleCellDataEdit: PropTypes.func.isRequired,\r\n  onDateTextChange: PropTypes.func.isRequired,\r\n};\r\n\r\nRailReceiptRecordWeightDetails.defaultProps = {};\r\nexport function RailReceiptRecordWeightDetails({\r\n  modRailReceipt,\r\n  modWeighBridgeData,\r\n  listOptions,\r\n  handleCellDataEdit,\r\n  onDateTextChange\r\n}) {\r\n  const [t] = useTranslation();\r\n\r\n  const handleCustomEditDropDown = (cellData, dropDownoptions) => {\r\n    return (\r\n      <Select\r\n        className=\"selectDropwdown\"\r\n        value={modWeighBridgeData[cellData.rowIndex][cellData.field]}\r\n        fluid\r\n        options={dropDownoptions}\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        indicator=\"required\"\r\n        reserveSpace={false}\r\n        search={true}\r\n        noResultsMessage={t(\"noResultsMessage\")}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleCustomEditTextBox = (cellData) => {\r\n    return (\r\n      <Input\r\n        fluid\r\n        value={modWeighBridgeData[cellData.rowIndex][cellData.field]}\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        reserveSpace={false}\r\n      />\r\n    );\r\n  };\r\n  const handleReceiptEdiCheckbox = (cellData) => {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <Checkbox\r\n          style={{ textAlign: \"center\" }}\r\n          fluid\r\n          checked={modWeighBridgeData[cellData.rowIndex][cellData.field]}\r\n          onChange={(value) => handleCellDataEdit(value, cellData)}\r\n          reserveSpace={false}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  const decimalDisplayValues = (cellData) => {\r\n    const { value } = cellData;\r\n    if (typeof value === \"number\") {\r\n      return value.toLocaleString();\r\n    } else {\r\n      return value;\r\n    }\r\n  };\r\n\r\n  const handleCustomEditDateSelect = (cellData) => {\r\n    return (\r\n      <DatePicker\r\n        fluid\r\n        value={\r\n          modWeighBridgeData[cellData.rowIndex][\r\n            cellData.field\r\n          ] === null\r\n            ? \"\"\r\n            : new Date(\r\n              modWeighBridgeData[cellData.rowIndex][\r\n              cellData.field\r\n              ]\r\n            )\r\n        }\r\n        type=\"datetime\"\r\n        minuteStep={5}\r\n        displayFormat={getCurrentDateFormat()}\r\n        indicator=\"required\"\r\n        disableFuture={true}\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        onTextChange={(value, error) => {\r\n          onDateTextChange(cellData, value, error);\r\n        }}\r\n        reserveSpace={false}\r\n      ></DatePicker>\r\n    );\r\n  };\r\n\r\n \r\n\r\n  const dateDisplayValues = (cellData) => {\r\n    const { value } = cellData;\r\n    return value !== null ? new Date(value).toLocaleDateString() + \" \" + new Date(value).toLocaleTimeString() : \"\";\r\n  };\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRailReceipt.ReceiptCode}\r\n                disabled={true}\r\n                label={t(\"Rail_Receipt_Code\")}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRailReceipt.Description}\r\n                label={t(\"Rail_Receipt_Desc\")}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <DatePicker\r\n                fluid\r\n                value={\r\n                  modRailReceipt.ScheduledDate === null\r\n                    ? \"\"\r\n                    : new Date(modRailReceipt.ScheduledDate)\r\n                }\r\n                label={t(\"ViewShipment_ScheduleDate\")}\r\n                type=\"datetime\"\r\n                disablePast={true}\r\n                disabled={true}\r\n                minuteStep=\"5\"\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRailReceipt.ReceiptStatus}\r\n                label={t(\"Rail_Receipt_ReceiptStatus\")}\r\n                reserveSpace={false}\r\n                disabled={true}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRailReceipt.Remark}\r\n                label={t(\"Reconciliation_Remarks\")}\r\n                reserveSpace={false}\r\n                disabled={true}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12 detailsTable\">\r\n              <DataTable data={modWeighBridgeData} editable={true}>\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  key=\"WagonCode\"\r\n                  field=\"WagonCode\"\r\n                  header={t(\"Rail_Wagon_Code\")}\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  key=\"FinishedProductCode\"\r\n                  field=\"FinishedProductCode\"\r\n                  header={t(\"Receipt_Product\")}\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  key=\"TareWeight\"\r\n                  field=\"TareWeight\"\r\n                  header={t(\"RailWagonConfigurationDetails_TareWeight\")}\r\n                  editable={true}\r\n                  editFieldType=\"number\"\r\n                  renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                  customEditRenderer={handleCustomEditTextBox}\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  key=\"TareWeightUOM\"\r\n                  field=\"TareWeightUOM\"\r\n                  header={t(\"ViewReceiptStatus_QuantityUOM\")}\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  key=\"TareWeightWeightBridgeCode\"\r\n                  field=\"TareWeightWeightBridgeCode\"\r\n                  header={t(\"weighBridge_tare\")}\r\n                  editable={true}\r\n                  editFieldType=\"text\"\r\n                  customEditRenderer={(celldata) =>\r\n                    handleCustomEditDropDown(celldata, listOptions.WeighBridges)\r\n                  }\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  key=\"TareWeightOperatorOverWritten\"\r\n                  field=\"TareWeightOperatorOverWritten\"\r\n                  header={t(\"Operator_OverWrite_Tare\")}\r\n                  renderer={(celldata) => handleReceiptEdiCheckbox(celldata)}\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  key=\"LadenWeight\"\r\n                  field=\"LadenWeight\"\r\n                  header={t(\"PCDET_Planning_gvLadenWeight\")}\r\n                  editable={true}\r\n                  editFieldType=\"number\"\r\n                  renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                  customEditRenderer={handleCustomEditTextBox}\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  key=\"LadenWeightUOM\"\r\n                  field=\"LadenWeightUOM\"\r\n                  header={t(\"AtgConfigure_UOM\")}\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  key=\"LadenWeightWeightBridgeCode\"\r\n                  field=\"LadenWeightWeightBridgeCode\"\r\n                  header={t(\"weighBridge_Laden\")}\r\n                  editable={true}\r\n                  customEditRenderer={(celldata) =>\r\n                    handleCustomEditDropDown(celldata, listOptions.WeighBridges)\r\n                  }\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                        className=\"compColHeight\"\r\n                        key=\"StartTime\"\r\n                        field=\"StartTime\"\r\n                        header={t(\"LoadingDetails_StartTime\")}\r\n                        displayFormat={getCurrentDateFormat()}\r\n                        editable={true}\r\n                        renderer={(cellData) => dateDisplayValues(cellData)}\r\n                        customEditRenderer={(cellData) =>\r\n                          handleCustomEditDateSelect(cellData)\r\n                        }\r\n                      ></DataTable.Column>\r\n                      <DataTable.Column\r\n                        className=\"compColHeight\"\r\n                        key=\"EndTime\"\r\n                        field=\"EndTime\"\r\n                        header={t(\"LoadingDetails_EndTime\")}\r\n                        displayFormat={getCurrentDateFormat()}\r\n                        editable={true}\r\n                        renderer={(cellData) => dateDisplayValues(cellData)}\r\n                        customEditRenderer={(cellData) =>\r\n                          handleCustomEditDateSelect(cellData)\r\n                        }\r\n                      ></DataTable.Column>\r\n\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  key=\"LadenWeightOperatorOverWritten\"\r\n                  field=\"LadenWeightOperatorOverWritten\"\r\n                  header={t(\"Operator_OverWrite_Laden\")}\r\n                  renderer={(celldata) => handleReceiptEdiCheckbox(celldata)}\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                  className=\"compColHeight\"\r\n                  key=\"LoadingType\"\r\n                  field=\"LoadingType\"\r\n                  header={t(\"Bay_LoadType\")}\r\n                  editable={false}\r\n                  editFieldType=\"text\"\r\n                ></DataTable.Column>\r\n              </DataTable>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { RailReceiptRecordWeightDetails } from \"../../UIBase/Details/RailReceiptRecordWeightDetails\";\r\nimport { emptyRailReceipt } from \"../../../JS/DefaultEntities\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as getUserDetails from \"../../../Redux/Actions/GetUserDetails\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport lodash from \"lodash\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { railRecordWeightDef } from \"../../../JS/DetailsTableValidationDef\";\r\nclass RailReceiptRecordWeightDetailsComposite extends Component {\r\n  state = {\r\n    modRailWagon: {},\r\n    isReadyToRender: true,\r\n    selectedWagonRow: [],\r\n    modWeighBridgeData: [],\r\n    modRailReceipt: {},\r\n    WeighBridges: [],\r\n    WeighBridgesWithUOM: [],\r\n  };\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      // this.setState({modRailReceipt:lodash.cloneDeep(this.props.RailReceipt)});\r\n      //this.getRailReceipt(nextProps.selectedRow);\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptRecordWeightComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  getShareholder() {\r\n    return this.props.shareholderCode;\r\n  }\r\n  getRailReceipt(selectedRow) {\r\n    var transportationType = this.getTransportationType();\r\n    emptyRailReceipt.TransportationType = transportationType;\r\n\r\n    if (selectedRow.Common_Code === undefined) {\r\n      this.setState({\r\n        modRailReceipt: { ...emptyRailReceipt },\r\n        modWeighBridgeData: [],\r\n        isReadyToRender: true,\r\n      });\r\n      return;\r\n    }\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.railReceiptCode,\r\n        value: selectedRow.Common_Code,\r\n      },\r\n      {\r\n        key: KeyCodes.transportationType,\r\n        value: transportationType,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.shareholderCode,\r\n      keyDataCode: KeyCodes.railReceiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetRailReceipt,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            isReadyToRender: true,\r\n            modRailReceipt: lodash.cloneDeep(result.EntityResult),\r\n\r\n            saveEnabled: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            modRailReceipt: lodash.cloneDeep(emptyRailReceipt),\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in GetRailReceipt:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting railReceipt:\", error);\r\n      });\r\n  }\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getRailReceipt(this.props.selectedRow);\r\n      this.GetWeightBridgeCodes();\r\n      this.GetRailMarineDispatchReceiptWeighBridgeData();\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptRecordWeightComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  GetWeightBridgeCodes() {\r\n    axios(\r\n      RestAPIs.GetWeightBridgeData +\r\n        \"?Transportationtype=\" +\r\n        Constants.TransportationType.RAIL,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            var WeighBridges = [];\r\n\r\n            result.EntityResult.Table.forEach((element) => {\r\n              WeighBridges.push({ text: element.Code, value: element.Code });\r\n            });\r\n            this.setState({\r\n              WeighBridges: WeighBridges,\r\n              WeighBridgesWithUOM: result.EntityResult.Table,\r\n            });\r\n          }\r\n        } else {\r\n          this.setState({ WeighBridges: [], WeighBridgesWithUOM: [] });\r\n          console.log(\"Error in GetWeightBridgeData:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while GetWeightBridgeData List:\", error);\r\n      });\r\n  }\r\n\r\n  GetRailMarineDispatchReceiptWeighBridgeData() {\r\n    var transportationType = this.getTransportationType();\r\n    var keyCode = [\r\n      {\r\n        key: \"TransactionType\",\r\n        value: \"Receipt\",\r\n      },\r\n      {\r\n        key: KeyCodes.transportationType,\r\n        value: transportationType,\r\n      },\r\n      {\r\n        key: \"DispatchReceiptCode\",\r\n        value: this.props.selectedRow.Common_Code,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.getShareholder(),\r\n      keyDataCode: KeyCodes.railReceiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetRailMarineDispatchReceiptWeighBridgeData,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            isReadyToRender: true,\r\n            modWeighBridgeData: result.EntityResult.Table,\r\n            saveEnabled: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            isReadyToRender: true,\r\n            modWeighBridgeData: [],\r\n            saveEnabled: false,\r\n          });\r\n          console.log(\r\n            \"Error in GetRailMarineDispatchReceiptWeighBridgeData:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"Error while getting GetRailMarineDispatchReceiptWeighBridgeData:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  getTransportationType() {\r\n    var transportationType = Constants.TransportationType.RAIL;\r\n    return transportationType;\r\n  }\r\n\r\n  handleDateTextChange = (propertyName, value, error) => {\r\n    try {\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      const modWeighBridgeData = lodash.cloneDeep(this.state.modWeighBridgeData);\r\n      validationErrors[propertyName] = error;\r\n      modWeighBridgeData[propertyName] = value;\r\n      this.setState({ validationErrors, modWeighBridgeData });\r\n    } catch (error) {\r\n      console.log(\r\n        \"Error in RailReceiptRecordDetailsComposite: Error occurred on handleDateTextChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleCellDataEdit = (newVal, cellData) => {\r\n    let modWeighBridgeData = lodash.cloneDeep(this.state.modWeighBridgeData);\r\n\r\n    if (cellData.field === \"TareWeightWeightBridgeCode\") {\r\n      let WeighBridgesWithUOM = this.state.WeighBridgesWithUOM;\r\n      WeighBridgesWithUOM.forEach((element) => {\r\n        if (element.Code === newVal) {\r\n          modWeighBridgeData[cellData.rowIndex][\"TareWeightUOM\"] =\r\n            element.WeightUOM;\r\n          return;\r\n        }\r\n      });\r\n    }\r\n    if (cellData.field === \"LadenWeightWeightBridgeCode\") {\r\n      let WeighBridgesWithUOM = this.state.WeighBridgesWithUOM;\r\n      WeighBridgesWithUOM.forEach((element) => {\r\n        if (element.Code === newVal) {\r\n          modWeighBridgeData[cellData.rowIndex][\"LadenWeightUOM\"] =\r\n            element.WeightUOM;\r\n          return;\r\n        }\r\n      });\r\n    }\r\n\r\n    modWeighBridgeData[cellData.rowIndex][cellData.field] = newVal;\r\n    this.setState({ modWeighBridgeData });\r\n  };\r\n\r\n  validateSave() {\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ViewRailReceipt_RecordWeight_status\",\r\n      messageResultDetails: [],\r\n    };\r\n    if (\r\n      Array.isArray(this.state.modWeighBridgeData) &&\r\n      this.state.modWeighBridgeData.length > 0\r\n    ) {\r\n      this.state.modWeighBridgeData.forEach((compart) => {\r\n        railRecordWeightDef.forEach((col) => {\r\n          let err = \"\";\r\n\r\n          if (col.validator !== undefined) {\r\n            err = Utilities.validateField(col.validator, compart[col.field]);\r\n          }\r\n          if (err !== \"\") {\r\n            notification.messageResultDetails.push({\r\n              keyFields: [],\r\n              keyValues: [],\r\n              isSuccess: false,\r\n              errorMessage: err,\r\n            });\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      notification.messageResultDetails.push({\r\n        keyFields: [],\r\n        keyValues: [],\r\n        isSuccess: false,\r\n        errorMessage: \"ERRMSG_RAIL_RECEIPT_WAGON_WEIGHBRIDGE_INFO_EMPTY\",\r\n      });\r\n    }\r\n    if (notification.messageResultDetails.length > 0) {\r\n      this.props.onSaved(this.state.modRailReceipt, \"update\", notification);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  fillDetails() {\r\n    try {\r\n      let modWeighBridgeData = lodash.cloneDeep(this.state.modWeighBridgeData);\r\n      let i = 0;\r\n      modWeighBridgeData.forEach((e) => {\r\n        if (e.LadenWeight !== null && e.LadenWeight !== \"\")\r\n          modWeighBridgeData[i].LadenWeight = e.LadenWeight.toLocaleString();\r\n        if (e.TareWeight !== null && e.TareWeight !== \"\")\r\n          modWeighBridgeData[i].TareWeight = e.TareWeight.toLocaleString();\r\n        if (e.maxTolLadenWeight !== null && e.maxTolLadenWeight !== \"\")\r\n          modWeighBridgeData[\r\n            i\r\n          ].maxTolLadenWeight = e.maxTolLadenWeight.toLocaleString();\r\n        if (e.maxTolTareWeight !== null && e.maxTolTareWeight !== \"\")\r\n          modWeighBridgeData[\r\n            i\r\n          ].maxTolTareWeight = e.maxTolTareWeight.toLocaleString();\r\n        if (e.minTolLadenWeight !== null && e.minTolLadenWeight !== \"\")\r\n          modWeighBridgeData[\r\n            i\r\n          ].minTolLadenWeight = e.minTolLadenWeight.toLocaleString();\r\n        if (e.minTolTareWeight !== null && e.minTolTareWeight !== \"\")\r\n          modWeighBridgeData[\r\n            i\r\n          ].minTolTareWeight = e.minTolTareWeight.toLocaleString();\r\n      });\r\n      //attributeList = Utilities.attributesConverttoLocaleString(attributeList);\r\n      this.setState({ modWeighBridgeData });\r\n      return modWeighBridgeData;\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptRecordWeightDetailsComposite:Error occured on fillDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  handleRecordWeight = () => {\r\n    let modWeighBridgeData = this.fillDetails();\r\n    if (!this.validateSave()) {\r\n      return;\r\n    }\r\n    let lstReceiptTrailerWeighBridgeInfo = [];\r\n    let wagonCode = \"\";\r\n    let tareweightBridgeCode = \"\";\r\n    let ladenweightBridgeCode = \"\";\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ViewRailReceipt_RecordWeight_status\",\r\n      messageResultDetails: [],\r\n    };\r\n    modWeighBridgeData.forEach((weighbridgeinfo) => {\r\n      tareweightBridgeCode = \"\";\r\n      ladenweightBridgeCode = \"\";\r\n\r\n      let dblTareWeight = 0.0;\r\n      let dblLadenWeight = 0.0;\r\n      wagonCode = weighbridgeinfo.WagonCode;\r\n\r\n      if (\r\n        weighbridgeinfo.TareWeight !== null &&\r\n        weighbridgeinfo.TareWeight !== undefined &&\r\n        weighbridgeinfo.TareWeight !== \"\"\r\n      ) {\r\n        dblTareWeight = Utilities.convertStringtoDecimal(\r\n          weighbridgeinfo.TareWeight\r\n        );\r\n        if (dblTareWeight < 0.0) {\r\n          notification.messageResultDetails.push({\r\n            keyFields: [],\r\n            keyValues: [],\r\n            isSuccess: false,\r\n            errorMessage: \"Tareweight_Cannot_Be_less_than_Zero\",\r\n          });\r\n        }\r\n      }\r\n\r\n     \r\n    \r\n      \r\n      if (\r\n        weighbridgeinfo.LadenWeight !== null &&\r\n        weighbridgeinfo.LadenWeight !== undefined &&\r\n        weighbridgeinfo.LadenWeight !== \"\"\r\n      ) {\r\n        dblLadenWeight = Utilities.convertStringtoDecimal(\r\n          weighbridgeinfo.LadenWeight\r\n        );\r\n        if (dblLadenWeight < 0.0) {\r\n          notification.messageResultDetails.push({\r\n            keyFields: [],\r\n            keyValues: [],\r\n            isSuccess: false,\r\n            errorMessage: \"ladenweight_Cannot_Be_less_than_Zero\",\r\n          });\r\n        }\r\n      }\r\n\r\n      if (\r\n        weighbridgeinfo.TareWeightWeightBridgeCode !== null &&\r\n        weighbridgeinfo.TareWeightWeightBridgeCode !== undefined &&\r\n        weighbridgeinfo.TareWeightWeightBridgeCode !== \"\"\r\n      ) {\r\n        tareweightBridgeCode = weighbridgeinfo.TareWeightWeightBridgeCode;\r\n      }\r\n      if (\r\n        weighbridgeinfo.LadenWeightWeightBridgeCode !== null &&\r\n        weighbridgeinfo.LadenWeightWeightBridgeCode !== undefined &&\r\n        weighbridgeinfo.LadenWeightWeightBridgeCode !== \"\"\r\n      ) {\r\n        ladenweightBridgeCode = weighbridgeinfo.LadenWeightWeightBridgeCode;\r\n      }\r\n\r\n      if (dblTareWeight > 0.0 && tareweightBridgeCode === \"\") {\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"ViewReceipt_WBMandatory\",\r\n        });\r\n      }\r\n      if (dblLadenWeight > 0.0 && ladenweightBridgeCode === \"\") {\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage: \"ViewReceipt_WBMandatory\",\r\n        });\r\n      }\r\n\r\n      if (\r\n        weighbridgeinfo.StartTime >= weighbridgeinfo.EndTime\r\n      ) {\r\n          notification.messageResultDetails.push({\r\n            keyFields: [],\r\n            keyValues: [],\r\n            isSuccess: false,\r\n            errorMessage: \"MarineReceiptManualEntry_ErrorUnloadTime\",\r\n          });\r\n      }\r\n      \r\n\r\n      if (notification.messageResultDetails.length > 0) {\r\n        this.props.onSaved(this.state.modRailReceipt, \"update\", notification);\r\n        return false;\r\n      }\r\n\r\n      if (dblTareWeight > 0.0) {\r\n        let receiptTrailerWeighBridgeInfo = {};\r\n        receiptTrailerWeighBridgeInfo.ReceiptCode = this.state.modRailReceipt.ReceiptCode;\r\n        receiptTrailerWeighBridgeInfo.TrailerCode = wagonCode;\r\n        receiptTrailerWeighBridgeInfo.MeasuredWeight = dblTareWeight;\r\n        receiptTrailerWeighBridgeInfo.MeasuredWeightTime = new Date();\r\n        receiptTrailerWeighBridgeInfo.IsTareWeight = true;\r\n        receiptTrailerWeighBridgeInfo.IsOperatorOverWritable =\r\n          weighbridgeinfo.TareWeightOperatorOverWritten;\r\n        receiptTrailerWeighBridgeInfo.WeighbridgeCode = tareweightBridgeCode;\r\n        receiptTrailerWeighBridgeInfo.WeightUOM = weighbridgeinfo.TareWeightUOM;\r\n        receiptTrailerWeighBridgeInfo.ShareholderCode = this.getShareholder();\r\n        receiptTrailerWeighBridgeInfo.StartTime= weighbridgeinfo.StartTime;\r\n        receiptTrailerWeighBridgeInfo.EndTime= weighbridgeinfo.EndTime;\r\n        lstReceiptTrailerWeighBridgeInfo.push(receiptTrailerWeighBridgeInfo);\r\n      }\r\n      if (dblLadenWeight > 0.0) {\r\n        let receiptTrailerWeighBridgeLadenInfo = {};\r\n        receiptTrailerWeighBridgeLadenInfo.ReceiptCode = this.state.modRailReceipt.ReceiptCode;\r\n        receiptTrailerWeighBridgeLadenInfo.TrailerCode = wagonCode;\r\n        receiptTrailerWeighBridgeLadenInfo.MeasuredWeight = dblLadenWeight;\r\n        receiptTrailerWeighBridgeLadenInfo.MeasuredWeightTime = new Date();\r\n        receiptTrailerWeighBridgeLadenInfo.IsTareWeight = false;\r\n        receiptTrailerWeighBridgeLadenInfo.IsOperatorOverWritable =\r\n          weighbridgeinfo.LadenWeightOperatorOverWritten;\r\n        receiptTrailerWeighBridgeLadenInfo.WeighbridgeCode = ladenweightBridgeCode;\r\n        receiptTrailerWeighBridgeLadenInfo.WeightUOM =\r\n          weighbridgeinfo.LadenWeightUOM;\r\n          receiptTrailerWeighBridgeLadenInfo.StartTime= weighbridgeinfo.StartTime\r\n          receiptTrailerWeighBridgeLadenInfo.EndTime= weighbridgeinfo.EndTime\r\n        receiptTrailerWeighBridgeLadenInfo.ShareholderCode = this.getShareholder();\r\n        lstReceiptTrailerWeighBridgeInfo.push(\r\n          receiptTrailerWeighBridgeLadenInfo\r\n        );\r\n      }\r\n    });\r\n    if (lstReceiptTrailerWeighBridgeInfo.length === 0) {\r\n      notification.messageResultDetails.push({\r\n        keyFields: [],\r\n        keyValues: [],\r\n        isSuccess: false,\r\n        errorMessage: \"ERRMSG_RAIL_RECEIPT_WAGON_WEIGHBRIDGE_INFO_EMPTY\",\r\n      });\r\n      this.props.onSaved(this.state.modRailReceipt, \"update\", notification);\r\n      return false;\r\n    }\r\n    var obj = {\r\n      ShareHolderCode: this.props.shareholderCode,\r\n      Entity: lstReceiptTrailerWeighBridgeInfo,\r\n    };\r\n    notification = {\r\n      messageType: \"critical\",\r\n      message: \"ViewRailReceipt_RecordWeight_status\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"RailReceiptManualEntry_ReceiptCode\"],\r\n          keyValues: [this.state.modRailReceipt.ReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.RailReceiptRecordWeight,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === false) {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          console.log(\"Error in RailReceiptRecordWeight:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modRailReceipt, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting RailReceiptRecordWeight:\", error);\r\n      });\r\n  };\r\n\r\n  handleBack = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      this.setState({\r\n        isWagonDetail: \"false\",\r\n        isRDetails: \"true\",\r\n        selectedRow: {},\r\n        selectedItems: [],\r\n        operationsVisibilty,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailReceiptViewAllComposite:Error occured on Back click\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"RailWagonConfigurationDetails_LastUpdatedTime\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modRailWagon.LastUpdateTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modRailWagon.LastUpdateTime).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"RailWagonConfigurationDetails_LastActiveTime\",\r\n        fieldValue:\r\n          this.state.modRailWagon.LastActiveTime !== undefined &&\r\n          this.state.modRailWagon.LastActiveTime !== null\r\n            ? new Date(\r\n                this.state.modRailWagon.LastActiveTime\r\n              ).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(\r\n                this.state.modRailWagon.LastActiveTime\r\n              ).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"RailWagonConfigurationDetails_CreatedTime\",\r\n        fieldValue:\r\n          new Date(this.state.modRailWagon.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modRailWagon.CreatedTime).toLocaleTimeString(),\r\n      },\r\n    ];\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        {\r\n          <div>\r\n            <ErrorBoundary>\r\n              <TMDetailsHeader\r\n                newEntityName=\"ViewRailReceiptsDetails_PageTitle\"\r\n                popUpContents={popUpContents}\r\n              ></TMDetailsHeader>\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n              <RailReceiptRecordWeightDetails\r\n                modRailReceipt={this.state.modRailReceipt}\r\n                modWeighBridgeData={this.state.modWeighBridgeData}\r\n                listOptions={{ WeighBridges: this.state.WeighBridges }}\r\n                handleRecordWeight={this.handleRecordWeight}\r\n                handleCellDataEdit={this.handleCellDataEdit}\r\n                onDateTextChange={this.handleDateTextChange}\r\n              ></RailReceiptRecordWeightDetails>\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n              <TranslationConsumer>\r\n                {(t) => (\r\n                  <div className=\"row\">\r\n                    <div className=\"col col-lg-8\">\r\n                      <Button\r\n                        className=\"backButton\"\r\n                        onClick={this.props.handleBack}\r\n                        content={t(\"Back\")}\r\n                      ></Button>\r\n                    </div>\r\n                    <div\r\n                      className=\"col col-lg-4\"\r\n                      style={{ textAlign: \"right\" }}\r\n                    >\r\n                      <Button\r\n                        content={t(\"btnRecordWeight\")}\r\n                        className=\"saveButton\"\r\n                        onClick={this.handleRecordWeight}\r\n                      ></Button>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </TranslationConsumer>\r\n            </ErrorBoundary>\r\n          </div>\r\n        }\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nconst mapWagonToProps = (dispatch) => {\r\n  return {\r\n    userActions: bindActionCreators(getUserDetails, dispatch),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapWagonToProps\r\n)(RailReceiptRecordWeightDetailsComposite);\r\n\r\nRailReceiptRecordWeightDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  shareholderCode: PropTypes.string.isRequired,\r\n};\r\n"],"names":["RailReceiptRecordWeightDetails","_ref","modRailReceipt","modWeighBridgeData","listOptions","handleCellDataEdit","onDateTextChange","t","useTranslation","handleCustomEditDropDown","cellData","dropDownoptions","_jsx","Select","className","value","rowIndex","field","fluid","options","onChange","indicator","reserveSpace","search","noResultsMessage","handleCustomEditTextBox","Input","handleReceiptEdiCheckbox","style","textAlign","children","Checkbox","checked","decimalDisplayValues","toLocaleString","handleCustomEditDateSelect","DatePicker","Date","type","minuteStep","displayFormat","getCurrentDateFormat","disableFuture","onTextChange","error","dateDisplayValues","toLocaleDateString","toLocaleTimeString","TranslationConsumer","_jsxs","ReceiptCode","disabled","label","Description","ScheduledDate","disablePast","ReceiptStatus","Remark","DataTable","data","editable","Column","header","editFieldType","renderer","customEditRenderer","celldata","WeighBridges","defaultProps","RailReceiptRecordWeightDetailsComposite","Component","constructor","arguments","state","modRailWagon","isReadyToRender","selectedWagonRow","WeighBridgesWithUOM","handleDateTextChange","propertyName","validationErrors","lodash","this","setState","console","log","newVal","forEach","element","Code","WeightUOM","handleRecordWeight","fillDetails","validateSave","lstReceiptTrailerWeighBridgeInfo","wagonCode","tareweightBridgeCode","ladenweightBridgeCode","notification","messageType","message","messageResultDetails","weighbridgeinfo","dblTareWeight","dblLadenWeight","WagonCode","TareWeight","undefined","Utilities","push","keyFields","keyValues","isSuccess","errorMessage","LadenWeight","TareWeightWeightBridgeCode","LadenWeightWeightBridgeCode","StartTime","EndTime","length","props","onSaved","receiptTrailerWeighBridgeInfo","TrailerCode","MeasuredWeight","MeasuredWeightTime","IsTareWeight","IsOperatorOverWritable","TareWeightOperatorOverWritten","WeighbridgeCode","TareWeightUOM","ShareholderCode","getShareholder","receiptTrailerWeighBridgeLadenInfo","LadenWeightOperatorOverWritten","LadenWeightUOM","obj","ShareHolderCode","shareholderCode","Entity","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","IsSuccess","ErrorList","catch","handleBack","operationsVisibilty","isWagonDetail","isRDetails","selectedRow","selectedItems","componentWillReceiveProps","nextProps","getRailReceipt","transportationType","getTransportationType","emptyRailReceipt","TransportationType","Common_Code","keyCode","key","KeyCodes","keyDataCode","EntityResult","saveEnabled","componentDidMount","userDetails","IsArchived","GetWeightBridgeCodes","GetRailMarineDispatchReceiptWeighBridgeData","Constants","RAIL","Table","text","Array","isArray","compart","railRecordWeightDef","col","err","validator","i","e","maxTolLadenWeight","maxTolTareWeight","minTolLadenWeight","minTolTareWeight","render","popUpContents","fieldName","fieldValue","LastUpdateTime","LastActiveTime","CreatedTime","ErrorBoundary","TMDetailsHeader","newEntityName","Button","onClick","content","LoadingPage","connect","getUserDetails","TokenAuth","dispatch","userActions","bindActionCreators"],"sourceRoot":""}