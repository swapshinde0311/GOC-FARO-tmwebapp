{"version":3,"file":"static/js/3362.a4ef9d10.chunk.js","mappings":"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","sources":["Components/UIBase/Common/TMUserActions.jsx","Components/Composite/Common/TMUserActionsComposite.jsx","Components/Composite/Summary/CustomerInventoryConfigSummaryComposite.jsx","Components/Composite/Entity/CustomerInventoryConfigComposite.jsx","JS/KeyCodes.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Icon,\r\n  Breadcrumb,\r\n  Select,\r\n  Modal,\r\n  Button,\r\n  Popup,\r\n  VerticalMenu,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nTMUserActions.propTypes = {\r\n  operationsVisibilty: PropTypes.shape({\r\n    add: PropTypes.bool,\r\n    delete: PropTypes.bool,\r\n    shareholder: PropTypes.bool,\r\n  }).isRequired,\r\n  breadcrumbItem: PropTypes.shape({\r\n    itemName: PropTypes.string,\r\n    itemCode: PropTypes.string,\r\n    itemProps: PropTypes.any,\r\n    localizedKey: PropTypes.string,\r\n    parents: PropTypes.array,\r\n    isComponent: PropTypes.bool,\r\n  }).isRequired,\r\n  shareholders: PropTypes.array.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onShareholderChange: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onAdd: PropTypes.func.isRequired,\r\n  popUpContent: PropTypes.array,\r\n};\r\nTMUserActions.defaultProps = {\r\n  operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n  breadcrumbItem: {\r\n    itemName: \"\",\r\n    itemCode: \"\",\r\n    localizedKey: \"\",\r\n    itemProps: {},\r\n    parents: [],\r\n    isComponent: false,\r\n  },\r\n  shareholders: [],\r\n  selectedShareholder: \"\",\r\n  popUpContent: [],\r\n  shrVisible: true,\r\n  addVisible: true,\r\n  deleteVisible: true\r\n};\r\nexport function TMUserActions({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [popUpOpen, setPopUpOpen] = useState(false);\r\n  function getShareholderDropdownOptions() {\r\n    return Utilities.transferListtoOptions(shareholders);\r\n    // var List = [];\r\n    // shareholders.forEach((element) => {\r\n    //   List.push({ text: element, value: element });\r\n    // });\r\n    // return List;\r\n  }\r\n\r\n  function buildBreadcrumb() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {breadcrumbItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item\r\n                  onClick={() => {\r\n                    if (\r\n                      handleBreadCrumbClick !== undefined &&\r\n                      handleBreadCrumbClick !== null\r\n                    ) {\r\n                      handleBreadCrumbClick(\r\n                        parentitem.itemCode,\r\n                        breadcrumbItem.parents\r\n                      );\r\n                    }\r\n                  }}\r\n                  key={parentitem.itemCode}\r\n                >\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={breadcrumbItem.itemCode}>\r\n              {t(breadcrumbItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  function handlePopUpClick() {\r\n    if (operationsVisibilty.add) {\r\n      if (popUpContent.length > 0) {\r\n        if (popUpOpen === false) setPopUpOpen(true);\r\n        else setPopUpOpen(false);\r\n      } else {\r\n        onAdd();\r\n      }\r\n    }\r\n  }\r\n\r\n  function popUpMenuClick(menuItem) {\r\n    setPopUpOpen(false);\r\n    onAdd(menuItem);\r\n  }\r\n  function displayIcons() {\r\n    return (\r\n      <div\r\n        style={{ float: \"right\", display: \"inline-block\", marginTop: \"10px\" }}\r\n      >\r\n        {addVisible ? <Popup\r\n          position=\"bottom right\"\r\n          className=\"popup-theme-wrap\"\r\n          element={\r\n            <div\r\n              className={\r\n                (operationsVisibilty.add\r\n                  ? \"iconCircle \"\r\n                  : \"iconCircleDisable \") + \"iconblock\"\r\n              }\r\n              onClick={handlePopUpClick}\r\n            >\r\n              <Icon\r\n                root=\"common\"\r\n                name=\"badge-plus\"\r\n                size=\"small\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          }\r\n          on=\"click\"\r\n          open={popUpOpen}\r\n        >\r\n          <div onMouseLeave={() => setPopUpOpen(false)}>\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <VerticalMenu>\r\n                  <VerticalMenu>\r\n                    <VerticalMenu.Header>\r\n                      {t(\"Common_Create\")}\r\n                    </VerticalMenu.Header>\r\n                    {popUpContent.map((item) => {\r\n                      return (\r\n                        <VerticalMenu.Item\r\n                          onClick={() => popUpMenuClick(item.fieldName)}\r\n                        >\r\n                          {t(item.fieldValue)}\r\n                        </VerticalMenu.Item>\r\n                      );\r\n                    })}\r\n                  </VerticalMenu>\r\n                </VerticalMenu>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        </Popup> : \"\"}\r\n        {deleteVisible ? <div\r\n          style={{ marginLeft: \"10px\" }}\r\n          onClick={() => {\r\n            if (operationsVisibilty.delete) {\r\n              setModelOpen(true);\r\n              //displayTMModalforDelete();\r\n              //onDelete();\r\n            }\r\n          }}\r\n          className={\r\n            (operationsVisibilty.delete\r\n              ? \"iconCircle \"\r\n              : \"iconCircleDisable \") + \"iconblock\"\r\n          }\r\n        >\r\n          <Icon root=\"common\" name=\"delete\" size=\"small\" color=\"white\" />\r\n        </div> : \"\"}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayTMModalforDelete() {\r\n    //console.log(\"entered to display modal actions\");\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  onDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n    //return <TMModal open={true}></TMModal>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\" style={{ alignItems: \"flex-start\", padding: \"0px\" }}>\r\n      <div\r\n        className=\"col-9 col-sm-9 col-md-9 col-lg-10 col-xl-10\"\r\n        style={{ padding: \"0px\" }}\r\n      >\r\n        <div className=\"row\" style={{ marginTop: \"10px\", alignItems: \"\" }}>\r\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n            <ErrorBoundary> {buildBreadcrumb()}</ErrorBoundary>\r\n          </div>\r\n          <div\r\n            className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-4\"\r\n          //style={{ verticalAlign: \"middle\" }}\r\n          >\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <div\r\n                  className=\"compartmentIcon\"\r\n                  style={{ justifyContent: \"flex-start\" }}\r\n                >\r\n                  {shrVisible === false ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <div>\r\n                        <h4 className=\"shrText\">{t(\"Common_Shareholder\")}:</h4>\r\n                      </div>\r\n                      <div className=\"opSelect\">\r\n                        <Select\r\n                          //className=\"opSelect\"\r\n                          placeholder={t(\"Common_Shareholder\")}\r\n                          value={selectedShareholder}\r\n                          disabled={!operationsVisibilty.shareholder}\r\n                          options={getShareholderDropdownOptions()}\r\n                          onChange={(value) => onShareholderChange(value)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n\r\n          {displayTMModalforDelete()}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-3 col-sm-3 col-md-3 col-lg-2 col-xl-2\">\r\n        {displayIcons()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TMUserActions } from \"../../UIBase/Common/TMUserActions\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nexport function TMUserActionsComposite({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n\r\n}) {\r\n  return (\r\n    <TMUserActions\r\n      operationsVisibilty={operationsVisibilty}\r\n      breadcrumbItem={breadcrumbItem}\r\n      shareholders={shareholders}\r\n      selectedShareholder={selectedShareholder}\r\n      onShareholderChange={onShareholderChange}\r\n      onDelete={onDelete}\r\n      onAdd={onAdd}\r\n      popUpContent={popUpContent}\r\n      shrVisible={shrVisible}\r\n      handleBreadCrumbClick={handleBreadCrumbClick}\r\n      addVisible={addVisible}\r\n      deleteVisible={deleteVisible}\r\n    ></TMUserActions>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n    Icon, Input,Radio, Select,Button\r\n} from \"@scuf/common\";\r\nCustomerInventoryConfigSummaryComposite.propTypes = {\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    customerCode: PropTypes.bool.isRequired,\r\n    baseproductCode: PropTypes.bool.isRequired,\r\n    modCustomerconfig:PropTypes.object.isRequired,\r\n    handleSearchChange: PropTypes.func.isRequired,\r\n    listOptions:PropTypes.shape({\r\n        baseProduct: PropTypes.array,\r\n        customerCode: PropTypes.array,\r\n        densityUOMOptions: PropTypes.array,\r\n\r\n    }).isRequired, \r\n    handleCellDataEdit: PropTypes.func.isRequired,\r\n    CreateInitialInventory: PropTypes.func.isRequired,\r\n    handleReset: PropTypes.func.isRequired,\r\n    saveEnabled: PropTypes.bool.isRequired\r\n}\r\nexport default function CustomerInventoryConfigSummaryComposite({ \r\n    onFieldChange,\r\n    customerCode,\r\n    baseproductCode,\r\n    modCustomerconfig,\r\n    listOptions,\r\n    handleCellDataEdit,\r\n    CreateInitialInventory,\r\n    handleReset,\r\n    saveEnabled\r\n\r\n}) {\r\n    const handleDropdownEdit = (cellData) => {\r\n        let dropDownOptions = [\r\n            ...listOptions.densityUOMOptions,\r\n        ];\r\n        return (\r\n            <Select\r\n                className=\"selectDropwdown\"\r\n                placeholder={t(\"Common_Select\")}\r\n                value={modCustomerconfig[cellData.rowIndex][cellData.field]}\r\n                fluid\r\n                options={dropDownOptions}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                indicator=\"required\"\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n            />\r\n        );\r\n    };\r\n    const handleTextEdit = (cellData) => {\r\n        let val = modCustomerconfig[cellData.rowIndex][cellData.field];\r\n        if (cellData.field === \"GrossAvailableQuantity\" && val !== null && val !== \"\")\r\n            val = val.toLocaleString();\r\n        return (\r\n            <Input\r\n                fluid\r\n                value={val}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n            />\r\n        );\r\n    };\r\n    const [t] = useTranslation();\r\n    return (\r\n        <div className=\" detailsContainer\">\r\n            <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <p>{t(\"SetCustInv_ConfigureBy\")}</p>\r\n                <Radio\r\n                    label={t(\"CustomerDestFilterType_CustomerCode\")}\r\n                    checked={!customerCode ? false : true}\r\n                    onChange={(data) => onFieldChange(\"CustomerCode\", true) }\r\n                />\r\n                <Radio\r\n                    label={t(\"BaseProductCode\")}\r\n                    checked={!baseproductCode ? false : true}\r\n                    onChange={(data) => onFieldChange(\"BaseProductCode\", true)}\r\n\r\n                />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select type=\"text\" \r\n                    placeholder=\"Select\"\r\n                        search={true}\r\n                        indicator=\"required\"\r\n                        value={customerCode === true ? modCustomerconfig.CustomerCode : modCustomerconfig.BaseProductCode}\r\n                    label={customerCode === true ? t(\"CustomerDestFilterType_CustomerCode\") : t(\"BaseProductCode\")}\r\n                    options={customerCode === true ? listOptions.customerCode:listOptions.baseProduct}\r\n                    onChange={customerCode === true ? (data) => onFieldChange(\"CustomerCode\", data) : (data) => onFieldChange(\"BaseProductCode\", data) }\r\n                />\r\n                </div>\r\n            </div>\r\n            <div className=\"row marginRightZero tableScroll\">\r\n                <div className=\"col-12 detailsTable\">\r\n            <DataTable\r\n                data={modCustomerconfig}\r\n            selectionMode={false}\r\n            scrollHeight=\"320px\"\r\n                >\r\n            <DataTable.ActionBar />\r\n                {customerCode === true ? <DataTable.Column\r\n                    className=\"compColHeight Lookupdatacode\"\r\n                    key=\"BaseProductCode\"\r\n                    field=\"BaseProductCode\"\r\n                    sortable={true}\r\n                    header={t(\"baseproduct\")}\r\n                ></DataTable.Column> : <DataTable.Column\r\n                    className=\"compColHeight Lookupdatacode\"\r\n                        key=\"CustomerCode\"\r\n                        field=\"CustomerCode\"\r\n                    sortable={true}\r\n                        header={t(\"CustomerDestFilterType_CustomerCode\")}\r\n                ></DataTable.Column>}\r\n            <DataTable.Column\r\n                className=\"compColHeight colminWidth\"\r\n                    key=\"GrossAvailableQuantity\"\r\n                    field=\"GrossAvailableQuantity\"\r\n                            header={t(\"ExchangeAgreementDetailsItem_Qty\")}\r\n                    editable={true}\r\n                    editFieldType=\"text\"\r\n                    renderer={(cellData) =>\r\n                        cellData.value === null ? \"\" : cellData.value.toLocaleString()\r\n                    }\r\n                    customEditRenderer={handleTextEdit}\r\n            ></DataTable.Column>\r\n            <DataTable.Column\r\n                className=\"compColHeight colminWidth\"\r\n                    key=\"QuantityUOM\"\r\n                    field=\"QuantityUOM\"\r\n                    header={t(\"ExchangeAgreementDetailsItem_UOM\")}\r\n                    editable={true}\r\n                    editFieldType=\"text\"\r\n                     customEditRenderer={handleDropdownEdit}\r\n                ></DataTable.Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n            <div className=\"row userActionPosition\">\r\n                <div className=\"col-12 col-md-12 col-lg-12\">\r\n                    <div style={{ float: \"right\" }}>\r\n                        <Button\r\n                            content={t(\"LookUpData_btnReset\")}\r\n                            onClick={handleReset}\r\n                            className={saveEnabled ? \"cancelButton\" : \"disablereset\"}\r\n\r\n                        ></Button>\r\n                        <Button\r\n                            content={t(\"Save\")}\r\n                            disabled={!saveEnabled ? true : false}\r\n                            onClick={CreateInitialInventory}\r\n                        ></Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n       </div>\r\n   ) \r\n}","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport lodash from \"lodash\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport axios from \"axios\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { emptyInitialConfig } from \"../../../JS/DefaultEntities\";\r\nimport CustomerInventoryConfigSummaryComposite from \"../Summary/CustomerInventoryConfigSummaryComposite\";\r\nimport { CustmerInittialTableValidation } from \"../../../JS/DetailsTableValidationDef\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport Error from \"../../Error\";\r\n\r\nclass CustomerInventoryConfigComposite extends Component {\r\n  state = {\r\n    modCustomerconfig: {},\r\n    customerConfig: lodash.cloneDeep(emptyInitialConfig),\r\n    selectedShareholder: \"\",\r\n    customerCode: true,\r\n    baseproductCode: false,\r\n    isReadyToRender: false,\r\n    operationsVisibilty: { shareholder: true },\r\n    searchResult: \"\",\r\n    customerOptions: [],\r\n    baseProductOptions: [],\r\n    isEnable: true,\r\n    densityUOMOptions: [],\r\n    saveEnabled:false,\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      this.getLookUpData();\r\n      this.setState({ operationsVisibilty, selectedShareholder: this.props.userDetails.EntityResult.PrimaryShareholder });\r\n      this.getcustomerList(this.props.userDetails.EntityResult.PrimaryShareholder);\r\n      this.getBaseProducts();\r\n      this.getUOMList();\r\n   } catch (error) {\r\n      console.log(\"CustomerInventoryComposite:Error occured on ComponentDidMount\", error);\r\n    }\r\n\r\n  }\r\n  handleShareholderSelectionChange = (shareholder) => {\r\n    try {\r\n      let { operationsVisibilty } = { ...this.state };\r\n      this.setState(\r\n        {\r\n          selectedShareholder: shareholder,\r\n          isReadyToRender: false,\r\n          operationsVisibilty,\r\n          saveEnabled: false,\r\n        },\r\n        () => {\r\n          this.getcustomerList(shareholder);\r\n          this.getInitialCustomerInventoryList(this.state.selectedShareholder,\"\")\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"customerinventoryconfigcomposite:Error occured on handleShareholderSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleChange = (propertyName, data) => {\r\n\r\n    try {\r\n      const modCustomerconfig = lodash.cloneDeep(this.state.modCustomerconfig);\r\n      if (propertyName === \"CustomerCode\" ) {\r\n        this.setState({\r\n          customerCode: true, baseproductCode: false, \r\n        })\r\n        // modCustomerconfig[propertyName] = data;\r\n      }\r\n     else if (propertyName === \"BaseProductCode\" ) {\r\n        this.setState({ baseproductCode: true, customerCode\r\n          : false\r\n        })\r\n        // modCustomerconfig[propertyName] = data;\r\n      }\r\n      modCustomerconfig[propertyName] = data;\r\n      this.setState({ modCustomerconfig,saveEnabled:true });\r\n      this.getInitialCustomerInventoryList(this.state.selectedShareholder, data);\r\n    } catch (error) {\r\n      console.log(\r\n        \"CustomerInventoryDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleCellDataEdit = (newVal, cellData) => {\r\n    try {\r\n      let modCustomerconfig = lodash.cloneDeep(\r\n        this.state.modCustomerconfig\r\n      );\r\n      modCustomerconfig[cellData.rowIndex][cellData.field] = newVal;\r\n      this.setState({ modCustomerconfig });\r\n    } catch (error) {\r\n      console.log(\r\n        \"CustomerinventoryconfigComposite:Error occured on handleCellDataEdit\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  \r\n  getUOMList() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetUOMList,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            let densityUOMOptions = [];\r\n            let uomOptions = [];\r\n            if ((Array.isArray(result.EntityResult.VOLUME)) && (Array.isArray(result.EntityResult.MASS))) {\r\n              uomOptions = result.EntityResult.VOLUME.concat(result.EntityResult.MASS);\r\n            }\r\n\r\n            densityUOMOptions = Utilities.transferListtoOptions(\r\n              uomOptions\r\n            );\r\n            this.setState({ densityUOMOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"customerinvetoryconfigComposite:Error while getting GetUOMList\");\r\n    }\r\n  }\r\n\r\n  getInitialCustomerInventoryList(shareholder,data) {\r\n    try {\r\n      if (data === undefined || data === null || data === \"\") {\r\n        this.setState({\r\n          isReadyToRender: true,\r\n          modCustomerconfig: {},\r\n        })\r\n        return;\r\n\r\n      }\r\n      if (this.state.customerCode === true) {\r\n        var keyCode = [\r\n          {\r\n            key: KeyCodes.customerCode,\r\n            value: data,\r\n          },\r\n        ];\r\n      } else {\r\n        var keyCode = [\r\n          {\r\n            key: KeyCodes.baseProductCode,\r\n            value: data,\r\n          },\r\n        ];\r\n      }\r\n      \r\n      var obj = {\r\n        ShareHolderCode: shareholder,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetInitialCustomerInventory,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          \r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            let modCustomerconfig = result.EntityResult;\r\n            this.setState({ modCustomerconfig, customerConfig: result.EntityResult, isReadyToRender: true });\r\n\r\n          } else {\r\n            this.setState({ modCustomerconfig: [], isReadyToRender: true });\r\n            console.log(\"Error in GetInitialCustomerInventory:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          this.setState({ modCustomerconfig: [], isReadyToRender: true });\r\n          console.log(\"Error while getting GetInitialCustomerInventory:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while getting GetInitialCustomerInventory:\", error);\r\n    }\r\n  }\r\n  \r\n  getLookUpData() {\r\n    try {\r\n      \r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=CustomerInventory\",\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            let isEnable = true;\r\n            if (result.EntityResult.Enabled === \"False\") {\r\n              isEnable = false;\r\n            }\r\n            this.setState({ isEnable });\r\n            if (isEnable) {\r\n              this.getInitialCustomerInventoryList(this.state.selectedShareholder, \"\");\r\n            }\r\n          } else {\r\n            console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"CustomerInventoryComposite: Error occurred on getLookUpData\", error);\r\n        });\r\n    } catch (err) {\r\n      console.log(\"CustomerInventoryComposite: Error occurred on getLookUpData\", err);\r\n\r\n    }\r\n  }\r\n  getBaseProducts(){\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAllBaseProduct + \"?TerminalCode\",\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (\r\n              result.EntityResult !== null &&\r\n              Array.isArray(result.EntityResult)\r\n            ) {\r\n              let baseProductOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult\r\n              );\r\n              this.setState({ baseProductOptions });\r\n            }\r\n          } else {\r\n            console.log(\"Error in getBaseProducts:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting BaseProducts:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while getting BaseProducts:\", error);\r\n\r\n    }\r\n  }\r\n  getcustomerList(shareholder) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetCustomerDestinations +\r\n        \"?ShareholderCode=\" +\r\n        shareholder +\r\n        \"&TransportationType=\",\r\n\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (Array.isArray(result.EntityResult)) {\r\n              let shareholderCustomers = result.EntityResult.filter(\r\n                (shareholderCust) =>\r\n                  shareholderCust.ShareholderCode === shareholder\r\n              );\r\n              if (shareholderCustomers.length > 0) {\r\n                let customers = Object.keys(\r\n                  shareholderCustomers[0].CustomerDestinationsList\r\n                );\r\n                let customerOptions = Utilities.transferListtoOptions(customers);\r\n                this.setState({ customerOptions });\r\n              } else {\r\n                console.log(\"no customers identified for shareholder\");\r\n              }\r\n            } else {\r\n              console.log(\"customerdestinations not identified for shareholder\");\r\n            }\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Customer List:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while getting Customer List:\", error);\r\n\r\n    }\r\n  }\r\n  validateSave() {\r\n\r\n    try {\r\n      let modCustomerconfig = lodash.cloneDeep(this.state.modCustomerconfig);\r\n      \r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"CustInitial_SavedStatus\",\r\n        messageResultDetails: [],\r\n      };\r\n\r\n      if (modCustomerconfig.length > 0) {\r\n        modCustomerconfig.forEach((com) => {\r\n          CustmerInittialTableValidation.forEach((col) => {\r\n            let err = \"\";\r\n\r\n            if (col.validator !== undefined) {\r\n              err = Utilities.validateField(col.validator, com[col.field]);\r\n            }\r\n\r\n            if (err !== \"\") {\r\n              notification.messageResultDetails.push({\r\n                keyFields: [col.displayName],\r\n                keyValues: [com[col.field]],\r\n                isSuccess: false,\r\n                errorMessage: err,\r\n              });\r\n            }\r\n          });\r\n        })\r\n      }\r\n     \r\n      var returnValue = true;\r\n      \r\n      if (notification.messageResultDetails.length > 0) {\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose:\r\n              notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n        return false;\r\n      }\r\n      return returnValue;\r\n    } catch (error) {\r\n      console.log(\"Error while Validate Save\", error)\r\n    }\r\n  }\r\n  handleSave = () => {\r\n\r\n    try {\r\n      this.setState({ saveEnabled: true });\r\n      let customerintioalconfig = lodash.cloneDeep(this.state.modCustomerconfig)\r\n      if (this.validateSave()) {\r\n        this.CreateInitialInventory(customerintioalconfig);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CustomerinventoryConfigComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  CreateInitialInventory = (customerintioalconfig) => {\r\n    try {\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"CustInitial_SavedStatus\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [],\r\n            keyValues: [],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      var obj = {\r\n        Entity: customerintioalconfig,\r\n      };\r\n      axios(\r\n        RestAPIs.CreateInitialInventory,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            if (this.state.customerCode === true) {\r\n              this.getInitialCustomerInventoryList(this.state.selectedShareholder, customerintioalconfig[0].CustomerCode);\r\n            } else if (this.state.baseproductCode === true) {\r\n              this.getInitialCustomerInventoryList(this.state.selectedShareholder, customerintioalconfig[0].BaseProductCode);\r\n            }\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            this.setState({\r\n              saveEnabled: true\r\n            });\r\n            console.log(\"Error in CreateInitialInventory:\", result.ErrorList);\r\n          }\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose:\r\n                notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          this.setState({\r\n            saveEnabled: true\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose:\r\n                notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in createcustomerinventory\",error)\r\n    }\r\n  }\r\n  handleReset = () => {\r\n\r\n    try {\r\n      let customerConfig = lodash.cloneDeep(this.state.customerConfig)\r\n      this.setState({\r\n        modCustomerconfig: customerConfig ,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"customerinventoryComposite:Error occured on handleReset\", error);\r\n    }\r\n  }\r\n  render() {\r\n    const listOptions = {\r\n      baseProduct: this.state.baseProductOptions,\r\n      customerCode: this.state.customerOptions,\r\n      densityUOMOptions: this.state.densityUOMOptions,\r\n\r\n    };\r\n    return (\r\n            <div>\r\n              {this.state.isEnable ? (\r\n              <ErrorBoundary>\r\n                <TMUserActionsComposite\r\n                    breadcrumbItem={this.props.activeItem}\r\n                    operationsVisibilty={this.state.operationsVisibilty}\r\n                  handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n                  addVisible={false}\r\n                  deleteVisible={false}\r\n                  shareholders={this.props.userDetails.EntityResult.ShareholderList}\r\n                  selectedShareholder={this.state.selectedShareholder}\r\n                  onShareholderChange={this.handleShareholderSelectionChange}\r\n\r\n                />\r\n                </ErrorBoundary>): \"\"\r\n              }\r\n              <ErrorBoundary>\r\n                {this.state.isReadyToRender ? (\r\n                  <CustomerInventoryConfigSummaryComposite\r\n                    customerCode={this.state.customerCode}\r\n                    baseproductCode={this.state.baseproductCode}\r\n                    onFieldChange={this.handleChange}\r\n                    modCustomerconfig={this.state.modCustomerconfig}\r\n                    listOptions={listOptions}\r\n                    handleCellDataEdit={this.handleCellDataEdit}\r\n                    CreateInitialInventory={this.handleSave}\r\n                    saveEnabled={this.state.saveEnabled}\r\n                    handleReset={this.handleReset}\r\n                  >\r\n                  </CustomerInventoryConfigSummaryComposite>\r\n                ) : (<>\r\n                  {this.state.isEnable ? (\r\n                    <LoadingPage message=\"Loading\"></LoadingPage>\r\n                  ) : (\r\n                    <Error errorMessage=\"CustomerInventoryFeatureNotEnabled\"></Error>\r\n                  )}\r\n                </>)}\r\n              </ErrorBoundary>\r\n              <ErrorBoundary>\r\n                <ToastContainer\r\n                  hideProgressBar={true}\r\n                  closeOnClick={false}\r\n                  closeButton={true}\r\n                  newestOnTop={true}\r\n                  position=\"bottom-right\"\r\n                  toastClassName=\"toast-notification-wrap\"\r\n                />\r\n              </ErrorBoundary>\r\n            </div>\r\n         \r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CustomerInventoryConfigComposite);\r\n\r\nCustomerInventoryConfigComposite.propTypes = {\r\n  activeItem: PropTypes.object,\r\n};\r\n","export const carrierCode = \"CarrierCode\";\r\nexport const transportationType = \"TransportationType\";\r\nexport const shareholderCode = \"ShareHolderCode\";\r\nexport const driverCode = \"DriverCode\";\r\nexport const customerCode = \"CustomerCode\";\r\nexport const trailerCode = \"TrailerCode\";\r\nexport const originTerminalCode = \"OriginTerminalCode\";\r\nexport const primeMoverCode = \"PrimeMoverCode\";\r\nexport const vehicleCode = \"VehicleCode\";\r\nexport const destinationCode = \"DestinationCode\";\r\nexport const finishedProductCode = \"FinishedProductCode\";\r\nexport const shipmentCode = \"ShipmentCode\";\r\nexport const orderCode = \"OrderCode\";\r\nexport const receiptCode = \"ReceiptCode\";\r\nexport const suppliercode = \"SupplierCode\";\r\nexport const marineDispatchCode = \"MarineDispatchCode\";\r\nexport const marineReceiptCode = \"MarineReceiptCode\";\r\nexport const supplierCode = \"SupplierCode\";\r\nexport const contractCode = \"ContractCode\";\r\n\r\nexport const railDispatchCode = \"RailDispatchCode\";\r\nexport const railReceiptCode = \"RailReceiptCode\";\r\nexport const railRouteCode = \"RailRouteCode\";\r\nexport const wagonCode = \"WagonCode\";\r\n\r\nexport const compartmentCode = \"CompartmentCode\";\r\n\r\nexport const smsConfigurationCode = \"SMSConfigurationCode\";\r\nexport const pipelineDispatchCode = \"PipelineDispatchCode\";\r\nexport const pipelineReceiptCode = \"PipelineReceiptCode\";\r\nexport const EmailConfigurationCode = \"EmailConfigurationCode\";\r\n\r\nexport const baseProductCode = \"BaseProductCode\";\r\nexport const locationCode = \"LocationCode\";\r\nexport const gantryCode = \"GantryCode\";\r\n\r\nexport const siteViewType = \"SiteViewType\";\r\n\r\nexport const entityCode = \"EntityCode\";\r\n\r\nexport const entityType = \"EntityType\";\r\nexport const cardReaderCode = \"CardReaderCode\";\r\nexport const accessCardCode = \"AccessCardCode\";\r\nexport const bcuCode = \"BcuCode\";\r\nexport const deuCode = \"DeuCode\";\r\nexport const weighBridgeCode = \"WeighBridgeCode\";\r\nexport const weight = \"Weight\";\r\nexport const outOfToleranceAllowed = \"OutOfToleranceAllowed\";\r\n\r\nexport const loadingArmCode = \"LoadingArmCode\";\r\nexport const transportaionType = \"TransportationType\";\r\nexport const bayCode = \"BayCode\";\r\nexport const TransactionNumber = \"TransactionNumber\";\r\nexport const BatchNumber = \"BatchNumber\";\r\nexport const terminalCode = \"TerminalCode\";\r\nexport const tankGroupCode = \"TankGroupCode\";\r\nexport const tankCode = \"TankCode\";\r\nexport const meterCode = \"MeterCode\";\r\n\r\nexport const shipmentType = \"ShipmentType\";\r\nexport const shipmentStatus = \"ShipmentStatus\";\r\nexport const meterLineType = \"MeterLineType\";\r\nexport const dispatchCode = \"DispatchCode\";\r\nexport const railReceiptStatus = \"RailReceiptStatus\";\r\nexport const receiptStatus = \"ReceiptStatus\";\r\nexport const fptTansactionID = \"FPTransactionID\";\r\nexport const productCategoryType = \"ProductCategoryType\";\r\nexport const marineReason = \"Reason\";\r\n\r\nexport const sealMasterCode = \"SealMasterCode\";\r\nexport const marineDispatchReason = \"Reason\";\r\nexport const OperationName = \"OperationName\";\r\nexport const FPTransactionID = \"FPTransactionID\";\r\nexport const ProductCategoryType = \"ProductCategoryType\";\r\nexport const compartmentSeqNoInVehicle = \"CompartmentSeqNoInVehicle\";\r\nexport const adjustedPlanQuantity = \"AdjustedPlanQuantity\";\r\nexport const forceComplete = \"ForceComplete\";\r\nexport const dispatchStatus = \"DispatchStatus\";\r\nexport const HolidayDate = \"HolidayDate\";\r\nexport const ActionID = \"ActionID\";\r\nexport const EODTimePrev = \"EODTimePrev\";\r\nexport const TerminalAction = \"TerminalAction\";\r\nexport const EODTime = \"EODTime\";\r\nexport const MonthStartDay = \"MonthStartDay\";\r\nexport const captainCode = \"CaptainCode\";\r\nexport const userType = \"GeneralTMUserType\";\r\nexport const generalTMUserCode = \"GeneralTMUserCode\";\r\nexport const isPriority = \"IsPriority\";\r\nexport const actualTerminalCode = \"ActualTerminalCode\";\r\nexport const shipmentBondNo = \"ShipmentBondNo\"\r\nexport const receiptBondNo = \"ReceiptBondNo\"\r\nexport const marineReceiptStatus = \"MarineReceiptStatus\";\r\nexport const deviceType = \"DeviceType\";\r\nexport const deviceCode = \"DeviceCode\";\r\nexport const bayGroup = \"BayGroup\";\r\nexport const pipelineHeaderCode = \"PipelineHeaderCode\";\r\nexport const exchangePartnerName = \"ExchangePartner\";\r\nexport const personID = \"PersonID\";\r\nexport const userName = \"UserName\";\r\nexport const pipelinePlanCode = \"PipelinePlanCode\";\r\nexport const pipelinePlanType = \"PipelinePlanType\";\r\nexport const channelCode = \"ChannelCode\";\r\nexport const ProcessName = \"ProcessName\";\r\nexport const reconciliationCode = \"ReconciliationCode\";\r\nexport const NotificationGroupCode = \"NotificationGroupCode\";\r\nexport const NotificationGroupStatus = \"NotificationGroupStatus\";\r\nexport const NotificationGroupDesc = \"NotificationGroupDesc\";\r\nexport const NotificationResSource = \"NotificationResSource\";\r\nexport const NotificationResMsgCode = \"NotificationResMsgCode\";\r\nexport const NotificationOrigResSource = \"NotificationOrigResSource\";\r\nexport const NotificationOrigResMsgCode = \"NotificationOrigResMsgCode\";\r\nexport const NotificationMessageCode = \"NotificationMessageCode\"\r\nexport const positionType = \"PositionType\";\r\nexport const roleName = \"RoleName\";\r\nexport const exchangeAgreementCode = \"ExchangeAgreementCode\";\r\nexport const ProductTransferAgreementCode = \"ProductTransferAgreementCode\";\r\nexport const ShareholderAgreementStatus = \"ShareholderAgreementStatus\";\r\nexport const RequestorShareholder = \"RequestorShareholder\";\r\nexport const LenderShareholder = \"LenderShareholder\";\r\nexport const requestCode = \"RequestCode\";\r\nexport const TransferReferenceCode = \"TransferReferenceCode\";\r\nexport const ShiftID = \"ShiftID\";\r\nexport const ShiftName = \"ShiftName\";\r\nexport const printerName = \"PrinterName\";\r\nexport const locationtype = \"LocationType\";\r\nexport const forceClosureReason = \"ForceClosureReason\";\r\nexport const TransactionType = \"TransactionType\";\r\nexport const CustomerRecipeCode = \"CustomerRecipeCode\";\r\n\r\nexport const coaTemplateCode = \"COATemplateCode\";\r\nexport const coaManagementCode = \"COAManagementCode\";\r\nexport const coaParameterCode = \"COAParameterCode\";\r\nexport const coaManagementFinishedProductCode = \"COAManagementFinishedProductCode\";\r\nexport const coaCustomerCode = \"COACustomerCode\";\r\nexport const coaFinishedProductCode = \"COAFinishedProductCode\";\r\nexport const coaAssignmentCode = \"COAAssignmentCode\";\r\nexport const coaTransportationType = \"COATransportationType\";\r\nexport const coaTransactionType = \"COATransactionType\";\r\nexport const coaSeqNumber = \"COASeqNumber\";\r\nexport const forecastDate = \"ForecastDate\";\r\nexport const forecastTanks = \"ForecastTanks\";"],"names":["TMUserActions","_ref","operationsVisibilty","breadcrumbItem","shareholders","selectedShareholder","onShareholderChange","onDelete","onAdd","popUpContent","shrVisible","handleBreadCrumbClick","addVisible","deleteVisible","modelOpen","setModelOpen","useState","popUpOpen","setPopUpOpen","handlePopUpClick","add","length","_jsxs","className","style","alignItems","padding","children","_jsx","marginTop","ErrorBoundary","TranslationConsumer","t","Breadcrumb","parents","map","parentitem","Item","onClick","undefined","itemCode","localizedKey","justifyContent","_Fragment","Select","placeholder","value","disabled","shareholder","options","Utilities","onChange","Modal","open","size","Content","Footer","Button","type","content","float","display","Popup","position","element","Icon","root","name","color","on","onMouseLeave","VerticalMenu","Header","item","popUpMenuClick","menuItem","fieldName","fieldValue","marginLeft","delete","defaultProps","itemName","itemProps","isComponent","TMUserActionsComposite","CustomerInventoryConfigSummaryComposite","onFieldChange","customerCode","baseproductCode","modCustomerconfig","listOptions","handleCellDataEdit","CreateInitialInventory","handleReset","saveEnabled","useTranslation","Radio","label","checked","data","search","indicator","CustomerCode","BaseProductCode","baseProduct","DataTable","selectionMode","scrollHeight","ActionBar","Column","field","sortable","header","editable","editFieldType","renderer","cellData","toLocaleString","customEditRenderer","val","rowIndex","Input","fluid","reserveSpace","dropDownOptions","densityUOMOptions","noResultsMessage","CustomerInventoryConfigComposite","Component","constructor","arguments","state","customerConfig","lodash","emptyInitialConfig","isReadyToRender","searchResult","customerOptions","baseProductOptions","isEnable","handleShareholderSelectionChange","this","setState","getcustomerList","getInitialCustomerInventoryList","error","console","log","handleChange","propertyName","newVal","handleSave","customerintioalconfig","validateSave","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","obj","Entity","axios","RestAPIs","props","tokenDetails","tokenInfo","then","response","result","IsSuccess","ErrorList","toast","NotifyEvent","notificationMessage","autoClose","catch","componentDidMount","getLookUpData","userDetails","EntityResult","PrimaryShareholder","getBaseProducts","getUOMList","uomOptions","Array","isArray","VOLUME","MASS","concat","keyCode","key","KeyCodes","ShareHolderCode","Enabled","err","shareholderCustomers","filter","shareholderCust","ShareholderCode","customers","Object","keys","CustomerDestinationsList","forEach","com","CustmerInittialTableValidation","col","validator","push","displayName","render","activeItem","ShareholderList","LoadingPage","Error","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","toastClassName","connect","getUserDetails","TokenAuth","carrierCode","transportationType","shareholderCode","driverCode","trailerCode","originTerminalCode","primeMoverCode","vehicleCode","destinationCode","finishedProductCode","shipmentCode","orderCode","receiptCode","marineDispatchCode","marineReceiptCode","supplierCode","contractCode","railDispatchCode","railReceiptCode","railRouteCode","wagonCode","compartmentCode","smsConfigurationCode","pipelineDispatchCode","pipelineReceiptCode","EmailConfigurationCode","baseProductCode","locationCode","siteViewType","entityCode","entityType","cardReaderCode","accessCardCode","bcuCode","deuCode","weighBridgeCode","weight","outOfToleranceAllowed","loadingArmCode","transportaionType","bayCode","TransactionNumber","BatchNumber","terminalCode","tankGroupCode","tankCode","meterCode","shipmentType","shipmentStatus","meterLineType","dispatchCode","receiptStatus","fptTansactionID","productCategoryType","marineReason","sealMasterCode","marineDispatchReason","OperationName","FPTransactionID","ProductCategoryType","compartmentSeqNoInVehicle","adjustedPlanQuantity","forceComplete","dispatchStatus","HolidayDate","ActionID","EODTimePrev","TerminalAction","EODTime","MonthStartDay","captainCode","userType","generalTMUserCode","isPriority","actualTerminalCode","shipmentBondNo","receiptBondNo","deviceType","deviceCode","bayGroup","pipelineHeaderCode","exchangePartnerName","personID","userName","pipelinePlanCode","pipelinePlanType","channelCode","ProcessName","reconciliationCode","NotificationGroupCode","NotificationGroupStatus","NotificationGroupDesc","NotificationResSource","NotificationResMsgCode","NotificationOrigResSource","NotificationOrigResMsgCode","NotificationMessageCode","positionType","exchangeAgreementCode","ProductTransferAgreementCode","ShareholderAgreementStatus","RequestorShareholder","LenderShareholder","requestCode","TransferReferenceCode","ShiftID","ShiftName","printerName","locationtype","forceClosureReason","TransactionType","CustomerRecipeCode","coaTemplateCode","coaManagementCode","coaParameterCode","coaManagementFinishedProductCode","coaSeqNumber","forecastDate","forecastTanks"],"sourceRoot":""}