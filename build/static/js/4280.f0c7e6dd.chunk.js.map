{"version":3,"file":"static/js/4280.f0c7e6dd.chunk.js","mappings":"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","sources":["Components/UIBase/Details/PipelineReceiptDetails.jsx","Components/Composite/Details/PipelineReceiptDetailsComposite.jsx","Components/UIBase/Details/PipelineReceiptViewAuditTrailsDetail.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { DataTable } from '@scuf/datatable';\r\nimport { DatePicker, Input, Select, Icon, Accordion, Tab, Checkbox } from \"@scuf/common\";\r\nimport { TranslationConsumer, useTranslation } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { getCurrentDateFormat, handleIsRequiredCompartmentCell } from \"../../../JS/functionalUtilities\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport PropTypes from \"prop-types\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nPipelineReceiptDetails.propTypes = {\r\n    dropdownOptions: PropTypes.shape({\r\n        pipelineHeaderOptions: PropTypes.array,\r\n        pipelineHeaderMeterOptions: PropTypes.array,\r\n        tankCodeOptions: PropTypes.array,\r\n        terminalCodes: PropTypes.array\r\n    }).isRequired,\r\n    handlePipelineHeaderChange: PropTypes.func.isRequired,\r\n    isEnterpriseNode: PropTypes.bool.isRequired,\r\n    handleTerminalChange: PropTypes.func.isRequired,\r\n    modAttributeMetaDataList: PropTypes.array.isRequired,\r\n    attributeValidationErrors: PropTypes.object.isRequired,\r\n    onAttributeDataChange: PropTypes.func.isRequired,\r\n    onTabChange: PropTypes.func.isRequired,\r\n    activeTab: PropTypes.number.isRequired,\r\n    loadingDetails: PropTypes.object.isRequired,\r\n    loadingDetailsTab: PropTypes.array.isRequired,\r\n    pipelineSnapShotInfo: PropTypes.array.isRequired,\r\n    handleCellCheck: PropTypes.func.isRequired,\r\n    isMeterRequired: PropTypes.bool.isRequired,\r\n    isTankRequired: PropTypes.bool.isRequired,\r\n    onDateTextChange: PropTypes.func.isRequired,\r\n}\r\nPipelineReceiptDetails.defaultProps = {\r\n    dropdownOptions: {\r\n        pipelineHeaderOptions: [],\r\n        pipelineHeaderMeterOptions: [],\r\n        tankCodeOptions: [],\r\n        terminalCodes: []\r\n    },\r\n    isEnterpriseNode: false,\r\n}\r\n\r\nexport function PipelineReceiptDetails({\r\n    pipelineReceipt,\r\n    modPipelineReceipt,\r\n    validationErrors,\r\n    listOptions,\r\n    onFieldChange,\r\n    selectedAssociations,\r\n    handleAssociationSelectionChange,\r\n    handleCellDataEdit,\r\n    handleAddAssociation,\r\n    handleDeleteAssociation,\r\n    dropdownOptions,\r\n    handlePipelineHeaderChange,\r\n    isEnterpriseNode,\r\n    handleTerminalChange,\r\n    onAttributeDataChange,\r\n    modAttributeMetaDataList,\r\n    attributeValidationErrors,\r\n    onTabChange,\r\n    activeTab,\r\n    loadingDetails,\r\n    loadingDetailsTab,\r\n    pipelineSnapShotInfo,\r\n    handleCellCheck,\r\n    isMeterRequired,\r\n    isTankRequired,\r\n    onDateTextChange,\r\n}) {\r\n    const [t] = useTranslation();\r\n\r\n    const handleCustomEditDropDown = (cellData, dropDownoptions) => {\r\n        return (\r\n            <Select\r\n                className=\"selectDropwdown\"\r\n                value={modPipelineReceipt.PipelineReceiptTanks[cellData.rowIndex][cellData.field]}\r\n                fluid\r\n                options={dropDownoptions}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                indicator=\"required\"\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n            />\r\n        );\r\n    };\r\n\r\n    const handleCustomEditTextBox = (cellData) => {\r\n        return (\r\n            <Input\r\n                fluid\r\n                value={modPipelineReceipt.PipelineReceiptTanks[cellData.rowIndex][cellData.field]}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n            />\r\n        );\r\n    };\r\n\r\n    const handleCustomEditDateSelect = (cellData) => {\r\n        return (\r\n            <DatePicker\r\n                fluid\r\n                value={modPipelineReceipt.PipelineReceiptTanks[cellData.rowIndex][cellData.field] === null ?\r\n                    \"\" : new Date(modPipelineReceipt.PipelineReceiptTanks[cellData.rowIndex][cellData.field])}\r\n                type=\"datetime\"\r\n                displayFormat={getCurrentDateFormat()}\r\n                indicator=\"required\"\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                onTextChange={(value, error) => {\r\n                    onDateTextChange(cellData, value, error);\r\n                }}\r\n                reserveSpace={false}\r\n            ></DatePicker>\r\n        );\r\n    }\r\n\r\n    const decimalDisplayValues = (cellData) => {\r\n        const { value } = cellData;\r\n        if (typeof value === \"number\") {\r\n            return value.toLocaleString();\r\n        } else {\r\n            return value;\r\n        }\r\n    };\r\n\r\n    const dateDisplayValues = (cellData) => {\r\n        const { value } = cellData;\r\n        return value !== null ? new Date(value).toLocaleDateString() + \" \" + new Date(value).toLocaleTimeString() : \"\"\r\n    }\r\n    const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n        let attributeValidation = [];\r\n        attributeValidation = attributeValidationErrors.find(\r\n            (selectedAttribute) => {\r\n                return selectedAttribute.TerminalCode === terminal;\r\n            }\r\n        );\r\n        return attributeValidation.attributeValidationErrors;\r\n    };\r\n    const handleCheckBox = (data) => {\r\n        return (\r\n            <Checkbox\r\n                className=\"forceCompleteChkBox\"\r\n                checked={data.value}\r\n                onChange={(cellData) => {\r\n                    handleCellCheck(data, cellData);\r\n                }}\r\n            />\r\n        );\r\n    };\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modPipelineReceipt.PipelineReceiptCode}\r\n                                indicator=\"required\"\r\n                                disabled={pipelineReceipt.PipelineReceiptCode !== \"\"}\r\n                                onChange={(data) => onFieldChange(\"PipelineReceiptCode\", data)}\r\n                                label={t(\"PipelineReceiptDetails_ReceiptCode\")}\r\n                                error={t(validationErrors.PipelineReceiptCode)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        {isEnterpriseNode ? (\r\n                            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <Select\r\n                                    fluid\r\n                                    placeholder={t(\"Common_Select\")}\r\n                                    label={t(\"TerminalCode\")}\r\n                                    value={\r\n                                        modPipelineReceipt.TerminalCodes === null\r\n                                            ? \"\"\r\n                                            : modPipelineReceipt.TerminalCodes.length === 0\r\n                                                ? \"\"\r\n                                                : modPipelineReceipt.TerminalCodes[0]\r\n                                    }\r\n                                    disabled={pipelineReceipt.PipelineReceiptCode !== \"\"}\r\n                                    onChange={(data) => handleTerminalChange(data)}\r\n                                    indicator=\"required\"\r\n                                    error={t(validationErrors.TerminalCodes)}\r\n                                    options={Utilities.transferListtoOptions(dropdownOptions.terminalCodes)}\r\n                                    reserveSpace={false}\r\n                                    noResultsMessage={t(\"noResultsMessage\")}\r\n                                />\r\n                            </div>\r\n                        ) : (\r\n                            \"\"\r\n                        )}\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                indicator=\"required\"\r\n                                label={t(\"PipelineReceiptDetails_CustomerCode\")}\r\n                                value={modPipelineReceipt.SupplierCode}\r\n                                onChange={(data) => onFieldChange(\"SupplierCode\", data)}\r\n                                error={t(validationErrors.SupplierCode)}\r\n                                options={listOptions.suppliers}\r\n                                reserveSpace={false}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                indicator=\"required\"\r\n                                label={t(\"PipelineReceiptDetails_Destination\")}\r\n                                value={modPipelineReceipt.OriginTerminalCode}\r\n                                onChange={(data) => onFieldChange(\"OriginTerminalCode\", data)}\r\n                                error={t(validationErrors.OriginTerminalCode)}\r\n                                options={listOptions.originTerminals}\r\n                                reserveSpace={false}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modPipelineReceipt.PipelineReceiptStatus === null ? \"\" : modPipelineReceipt.PipelineReceiptStatus}\r\n                                label={t(\"PipelineReceiptDetails_ReceiptStatus\")}\r\n                                reserveSpace={false}\r\n                                disabled={true}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                indicator=\"required\"\r\n                                label={t(\"PipelineReceiptDetails_HeaderLineCode\")}\r\n                                value={modPipelineReceipt.PipelineHeaderCode}\r\n                                onChange={(data) => handlePipelineHeaderChange(data)}\r\n                                error={t(validationErrors.PipelineHeaderCode)}\r\n                                options={dropdownOptions.pipelineHeaderOptions}\r\n                                reserveSpace={false}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                label={t(\"PipelineReceiptDetails_BulkTransactionMeter\")}\r\n                                value={modPipelineReceipt.PipelineHeaderMeterCode === null ? \"\" : modPipelineReceipt.PipelineHeaderMeterCode}\r\n                                onChange={(data) => onFieldChange(\"PipelineHeaderMeterCode\", data)}\r\n                                options={dropdownOptions.pipelineHeaderMeterOptions}\r\n                                // error={t(validationErrors.PipelineHeaderMeterCode)}\r\n                                reserveSpace={false}\r\n                                indicator={isMeterRequired ? \"required\" : \"\"}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modPipelineReceipt.Quantity === null ? \"\" : modPipelineReceipt.Quantity}\r\n                                indicator=\"required\"\r\n                                onChange={(data) => onFieldChange(\"Quantity\", data)}\r\n                                label={t(\"PipelineReceiptDetails_Quantity\")}\r\n                                error={t(validationErrors.Quantity)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <ErrorBoundary>\r\n                                <Select\r\n                                    fluid\r\n                                    placeholder={t(\"Common_Select\")}\r\n                                    label={t(\"PipelineReceiptDetails_UOM\")}\r\n                                    value={modPipelineReceipt.QuantityUOM === null\r\n                                        ? \"\"\r\n                                        : modPipelineReceipt.QuantityUOM}\r\n                                    multiple={false}\r\n                                    indicator=\"required\"\r\n                                    options={listOptions.quantityUOM}\r\n                                    onChange={(data) => onFieldChange(\"QuantityUOM\", data)}\r\n                                    error={t(validationErrors.QuantityUOM)}\r\n                                    disabled={listOptions.quantityUOM.length === 0}\r\n                                    reserveSpace={false}\r\n                                    noResultsMessage={t(\"noResultsMessage\")}\r\n                                />\r\n                            </ErrorBoundary>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                indicator=\"required\"\r\n                                label={t(\"PipelineReceiptDetails_FinishedProductCode\")}\r\n                                value={modPipelineReceipt.FinishedProductCode}\r\n                                onChange={(data) => onFieldChange(\"FinishedProductCode\", data)}\r\n                                error={t(validationErrors.FinishedProductCode)}\r\n                                options={listOptions.finishedProducts}\r\n                                reserveSpace={false}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4 starttime\">\r\n                            <DatePicker\r\n                                fluid\r\n                                value={modPipelineReceipt.ScheduledStartTime === null ?\r\n                                    \"\" : new Date(modPipelineReceipt.ScheduledStartTime)}\r\n                                label={t(\"PipelineReceiptDetails_ExpectedStartTime\")}\r\n                                type=\"datetime\"\r\n                                displayFormat={getCurrentDateFormat()}\r\n                                disablePast={false}\r\n                                indicator=\"required\"\r\n                                onChange={(data) => onFieldChange(\"ScheduledStartTime\", data)}\r\n                                error={t(validationErrors.ScheduledStartTime)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4 \">\r\n                            <DatePicker\r\n                                fluid\r\n                                value={modPipelineReceipt.ScheduledEndTime === null ?\r\n                                    \"\" : new Date(modPipelineReceipt.ScheduledEndTime)}\r\n                                label={t(\"PipelineReceiptDetails_ExpectedEndTime\")}\r\n                                type=\"datetime\"\r\n                                displayFormat={getCurrentDateFormat()}\r\n                                disablePast={false}\r\n                                indicator=\"required\"\r\n                                onChange={(data) => onFieldChange(\"ScheduledEndTime\", data)}\r\n                                error={t(validationErrors.ScheduledEndTime)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modPipelineReceipt.Remarks}\r\n                                label={t(\"Cust_Remarks\")}\r\n                                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                                error={t(validationErrors.Remarks)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {modAttributeMetaDataList.length > 0\r\n                        ? modAttributeMetaDataList.map((attire) => (\r\n                            <ErrorBoundary>\r\n                                <Accordion>\r\n                                    <Accordion.Content\r\n                                        className=\"attributeAccordian\"\r\n                                        title={\r\n                                            isEnterpriseNode\r\n                                                ? attire.TerminalCode + \" - \" + t(\"Attributes_Header\")\r\n                                                : t(\"Attributes_Header\")\r\n                                        }\r\n                                    >\r\n                                        <AttributeDetails\r\n                                            selectedAttributeList={attire.attributeMetaDataList}\r\n                                            handleCellDataEdit={onAttributeDataChange}\r\n                                            attributeValidationErrors={handleValidationErrorFilter(\r\n                                                attributeValidationErrors,\r\n                                                attire.TerminalCode\r\n                                            )}\r\n                                        ></AttributeDetails>\r\n                                    </Accordion.Content>\r\n                                </Accordion>\r\n                            </ErrorBoundary>\r\n                        ))\r\n                        : null}\r\n                    <div className=\"shipmentTabAlignment\">\r\n                        <Tab\r\n                            activeIndex={activeTab}\r\n                            onTabChange={(activeIndex) => {\r\n                                onTabChange(activeIndex);\r\n                            }}\r\n                        >\r\n                            <Tab.Pane title={t(\"PipelineReceiptDetails_ReceiptTankPlanning\")}>\r\n                                <div className=\"row compartmentRow\">\r\n                                    <div className=\"col\">\r\n                                        <div className=\"compartmentIconContainer\">\r\n                                            <div onClick={handleAddAssociation} className=\"compartmentIcon\">\r\n                                                <div>\r\n                                                    <Icon root=\"common\" name=\"badge-plus\" size=\"medium\" />\r\n                                                </div>\r\n                                                <div className=\"margin_l10\">\r\n                                                    <h5 className=\"font14\">{t(\"FinishedProductInfo_Add\")}</h5>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div\r\n                                                onClick={handleDeleteAssociation}\r\n                                                className=\"compartmentIcon margin_l30\"\r\n                                            >\r\n                                                <div>\r\n                                                    <Icon root=\"common\" name=\"delete\" size=\"medium\" />\r\n                                                </div>\r\n                                                <div className=\"margin_l10\">\r\n                                                    <h5 className=\"font14\">{t(\"DestAdd_Delete\")}</h5>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row marginRightZero tableScroll\">\r\n                                    <div className=\"col-12 detailsTable\">\r\n                                        <DataTable\r\n                                            data={modPipelineReceipt.PipelineReceiptTanks}\r\n                                            selectionMode=\"multiple\"\r\n                                            selection={selectedAssociations}\r\n                                            onSelectionChange={handleAssociationSelectionChange}\r\n                                        >\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                key=\"TankCode\"\r\n                                                field=\"TankCode\"\r\n                                                header={isTankRequired ? handleIsRequiredCompartmentCell(\r\n                                                    t(\"PipelineReceipt_TankCode\")) : t(\"PipelineReceipt_TankCode\")}\r\n                                                editable={true}\r\n                                                editFieldType=\"text\"\r\n                                                customEditRenderer={(celldata) =>\r\n                                                    handleCustomEditDropDown(\r\n                                                        celldata,\r\n                                                        dropdownOptions.tankCodeOptions\r\n                                                    )\r\n                                                }\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                key=\"Quantity\"\r\n                                                field=\"Quantity\"\r\n                                                header={t(\"PipelineReceiptDetails_Quantity\")}\r\n                                                editable={true}\r\n                                                editFieldType=\"text\"\r\n                                                renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                                                customEditRenderer={handleCustomEditTextBox}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                key=\"PlannedStartTime\"\r\n                                                field=\"PlannedStartTime\"\r\n                                                header={t(\"PipelineReceiptDetails_ExpectedStartTime\")}\r\n                                                editable={true}\r\n                                                editFieldType=\"text\"\r\n                                                renderer={(cellData) => dateDisplayValues(cellData)}\r\n                                                customEditRenderer={(cellData) => handleCustomEditDateSelect(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                key=\"PlannedEndTime\"\r\n                                                field=\"PlannedEndTime\"\r\n                                                header={t(\"PipelineReceiptDetails_ExpectedEndTime\")}\r\n                                                editable={true}\r\n                                                editFieldType=\"text\"\r\n                                                renderer={(cellData) => dateDisplayValues(cellData)}\r\n                                                customEditRenderer={(cellData) => handleCustomEditDateSelect(cellData)}\r\n                                            ></DataTable.Column>\r\n                                        </DataTable>\r\n                                    </div>\r\n                                </div>\r\n                            </Tab.Pane>\r\n                            {loadingDetailsTab.map((index) => {\r\n                                return (\r\n                                    <Tab.Pane title={t(\"ViewReceipt_LoadingDetails\")}>\r\n                                        <Accordion>\r\n                                            <Accordion.Content title={t(\"PipelineDispatchDetails_TransactionSummary\")}>\r\n                                                {\" \"}\r\n                                                <div className=\"row marginRightZero tableScroll\">\r\n                                                    <div className=\"col-12 detailsTable\">\r\n                                                        <DataTable\r\n                                                            data={pipelineSnapShotInfo}\r\n                                                            scrollable={true}\r\n                                                            scrollHeight=\"320px\"\r\n                                                        >\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight\"\r\n                                                                key=\"ReceivedGrossQuantity\"\r\n                                                                field=\"ReceivedGrossQuantity\"\r\n                                                                header={t(\"PipelineDispatchTransaction_ActualGrossQuantity\")}\r\n                                                                editable={false}\r\n                                                                editFieldType=\"text\"\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight\"\r\n                                                                key=\"ReceivedNetQuantity\"\r\n                                                                field=\"ReceivedNetQuantity\"\r\n                                                                header={t(\"PipelineDispatchTransaction_ActualNetQuantity\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight\"\r\n                                                                key=\"RationPending\"\r\n                                                                field=\"RationPending\"\r\n                                                                header={t(\"PipelineDispatchTransaction_RationPending\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight\"\r\n                                                                key=\"ReceivedQuantityUOM\"\r\n                                                                field=\"ReceivedQuantityUOM\"\r\n                                                                header={t(\"PipelineDispatchTransaction_ActualQuantityUOM\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight\"\r\n                                                                key=\"PlannedStartTime\"\r\n                                                                field=\"PlannedStartTime\"\r\n                                                                header={t(\"PipelineDispatchTransaction_ExpectedStartDateTime\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight\"\r\n                                                                key=\"PlannedEndTime\"\r\n                                                                field=\"PlannedEndTime\"\r\n                                                                header={t(\"PipelineDispatchTransaction_ExpectedEndDateTime\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight\"\r\n                                                                key=\"ActualStartTime\"\r\n                                                                field=\"ActualStartTime\"\r\n                                                                header={t(\"PipelineDispatchTransaction_ActualStartDateTime\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight\"\r\n                                                                key=\"ActualEndTime\"\r\n                                                                field=\"ActualEndTime\"\r\n                                                                header={t(\"PipelineDispatchTransaction_ActualEndDateTime\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"IsInvalid\"\r\n                                                                field=\"IsInvalid\"\r\n                                                                header={t(\"PipelineDispatchTransaction_Ignore\")}\r\n                                                                renderer={handleCheckBox}\r\n                                                            ></DataTable.Column>\r\n                                                        </DataTable>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col col-lg-4\"></div>\r\n                                                </div>\r\n                                            </Accordion.Content>\r\n                                        </Accordion>\r\n                                        <Accordion>\r\n                                            <Accordion.Content title={t(\"PipelineDispatchDetails_TankTransactionSummary\")}>\r\n                                                {\" \"}\r\n                                                <div className=\"row marginRightZero tableScroll\">\r\n                                                    <div className=\"col-12 detailsTable\">\r\n                                                        <DataTable\r\n                                                            data={loadingDetails.Table2}\r\n                                                            scrollable={true}\r\n                                                            scrollHeight=\"320px\"\r\n                                                        >\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"TankCode\"\r\n                                                                field=\"TankCode\"\r\n                                                                header={t(\"PipelineReceipt_TankCode\")}\r\n                                                                editable={false}\r\n                                                                editFieldType=\"text\"\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"StartGrossVolume\"\r\n                                                                field=\"StartGrossVolume\"\r\n                                                                header={t(\"TankTransaction_StartGrossVolume\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"EndGrossVolume\"\r\n                                                                field=\"EndGrossVolume\"\r\n                                                                header={t(\"TankVolume_EndGrossVolume\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"StartNetVolume\"\r\n                                                                field=\"StartNetVolume\"\r\n                                                                header={t(\"TankTransaction_StartNetVolume\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"EndNetVolume\"\r\n                                                                field=\"EndNetVolume\"\r\n                                                                header={t(\"TankVolume_EndNetVolume\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"Density\"\r\n                                                                field=\"Density\"\r\n                                                                header={t(\"PipelineEntry_Density\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"Temperature\"\r\n                                                                field=\"Temperature\"\r\n                                                                header={t(\"PipelineEntry_Temparature\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                        </DataTable>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col col-lg-4\"></div>\r\n                                                </div>\r\n                                            </Accordion.Content >\r\n                                        </Accordion>\r\n                                        <Accordion>\r\n                                            <Accordion.Content title={t(\"PipelineDispatchDetails_MeterTransactionSummary\")}>\r\n                                                {\" \"}\r\n                                                <div className=\"row marginRightZero tableScroll\">\r\n                                                    <div className=\"col-12 detailsTable\">\r\n                                                        <DataTable\r\n                                                            data={loadingDetails.Table1}\r\n                                                            scrollable={true}\r\n                                                            scrollHeight=\"320px\"\r\n                                                        >\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"MeterCode\"\r\n                                                                field=\"MeterCode\"\r\n                                                                header={t(\"LoadingDetails_MeterCode\")}\r\n                                                                editable={false}\r\n                                                                editFieldType=\"text\"\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"StartGrossTotalizer\"\r\n                                                                field=\"StartGrossTotalizer\"\r\n                                                                header={t(\"Reconciliation_StartGrossTotalizer\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"EndGrossTotalizer\"\r\n                                                                field=\"EndGrossTotalizer\"\r\n                                                                header={t(\"End Gross Totalizer\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"StartNetTotalizer\"\r\n                                                                field=\"StartNetTotalizer\"\r\n                                                                header={t(\"Start Net Totalizer\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"EndNetTotalizer\"\r\n                                                                field=\"EndNetTotalizer\"\r\n                                                                header={t(\"End Net Totalizer\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"Density\"\r\n                                                                field=\"Density\"\r\n                                                                header={t(\"PipelineEntry_Density\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                            <DataTable.Column\r\n                                                                className=\"compColHeight colminWidth\"\r\n                                                                key=\"Temperature\"\r\n                                                                field=\"Temperature\"\r\n                                                                header={t(\"PipelineEntry_Temparature\")}\r\n                                                                editable={false}\r\n                                                            ></DataTable.Column>\r\n                                                        </DataTable>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                            </Accordion.Content>\r\n                                        </Accordion>\r\n                                    </Tab.Pane>\r\n                                )\r\n                            })}\r\n\r\n                        </Tab>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}","import React, { Component } from \"react\";\r\nimport { PipelineReceiptDetails } from \"../../UIBase/Details/PipelineReceiptDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { pipelineReceiptValidationDef } from \"../../../JS/ValidationDef\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { emptyPipelineReceipt, emptyPipelineSnapshotInfo } from \"../../../JS/DefaultEntities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Constants from \"./../../../JS/Constants\";\r\nimport * as getUserDetails from \"../../../Redux/Actions/GetUserDetails\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"./../../../Components/ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"./../../../JS/KeyCodes\";\r\nimport { functionGroups, fnPipelineReceipt, fnKPIInformation } from \"../../../JS/FunctionGroups\";\r\nimport lodash from \"lodash\";\r\nimport { pipelineReceiptTankInfoDef } from \"../../../JS/DetailsTableValidationDef\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport {\r\n  pipelineReceiptEntity, pipelineReceiptStatusTimeAttributeEntity\r\n} from \"../../../JS/AttributeEntity\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { toast } from \"react-toastify\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PipelineReceiptManualEntryDetailsComposite from \"../Details/PipelineReceiptManualEntryDetailsComposite\";\r\nimport TransactionSummaryOperations from \"../Common/TransactionSummaryOperations\";\r\nimport { PipelineReceiptViewAuditTrailDetails } from \"../../UIBase/Details/PipelineReceiptViewAuditTrailsDetail\";\r\nimport { Modal, Button, Input } from \"@scuf/common\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { KpiPipelineReceiptDetail } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass PipelineReceiptDetailsComposite extends Component {\r\n  state = {\r\n    pipelineReceipt: { ...emptyPipelineReceipt },\r\n    modPipelineReceipt: {},\r\n    modAssociations: [],\r\n    loadingDetails: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      pipelineReceiptValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    listOptions: {\r\n      quantityUOM: [],\r\n      suppliers: [],\r\n      originTerminals: [],\r\n      finishedProducts: [],\r\n      terminalCodes: this.props.terminalCodes\r\n    },\r\n    quantityUOMOptions: [],\r\n    supplierOptions: [],\r\n    originTerminalOptions: [],\r\n    pipelineHeaderOptions: [],\r\n    pipelineHeaderMeterOptions: [],\r\n    finishedProductOptions: [],\r\n    tankOptions: [],\r\n    saveEnabled: false,\r\n    selectedAssociations: [],\r\n    attributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    modAttributeMetaDataList: [],\r\n    activeTab: 0,\r\n    isManualEntry: false,\r\n    currentReceiptStatus: [],\r\n    drawerStatus:\r\n      this.props.userDetails.EntityResult.IsWebPortalUser === true\r\n        ? true\r\n        : false,\r\n    isViewAuditTrail: false,\r\n    modAuditTrailList: [],\r\n    auditTrailList: [],\r\n    Remarks: \"\",\r\n    RemarksPopUp: false,\r\n    UOMS: {},\r\n    isMeterRequired: false,\r\n    isTankRequired: true,\r\n    pipelineSnapShotInfo: [],\r\n    isSubmit: false,\r\n    viewAuditTrailAttributeMetaDataList: [],\r\n    shipmentNextOperations: [],\r\n    pipelineReceiptKPIList: [],\r\n    tempPipelineReceipt: {},\r\n  };\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.pipelineReceipt.PipelineReceiptCode !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined\r\n      )\r\n        this.setState({ isPlanned: false, activeTab: 0, isManualEntry: false });\r\n      this.getPipelineReceipt(nextProps.selectedRow, 0,);\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getUoms();\r\n      this.getRefrenceSource();\r\n      this.getAttributes(this.props.selectedRow);\r\n      if (!this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n        this.getTank(\"\");\r\n        this.getHeaderLineCode(\"\");\r\n        this.getSupplierOriginTerminals(\r\n          this.props.selectedShareholder,\r\n          null, \"\"\r\n        );\r\n        this.getFinishedProductCodes(this.props.selectedShareholder, \"\");\r\n        this.getPipelineMeter(this.props.selectedShareholder, \"\")\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getUoms() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetUOMList,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (\r\n              result.EntityResult !== null &&\r\n              Array.isArray(result.EntityResult.VOLUME)\r\n            ) {\r\n              var listOptions = lodash.cloneDeep(this.state.listOptions);\r\n              // result.EntityResult.VOLUME.forEach((UOM) => {\r\n              //   listOptions.quantityUOM.push({\r\n              //     text: UOM,\r\n              //     value: UOM,\r\n              //   });\r\n              // });\r\n              // result.EntityResult.MASS.forEach((UOM) => {\r\n              //   listOptions.quantityUOM.push({\r\n              //     text: UOM,\r\n              //     value: UOM,\r\n              //   });\r\n              // });\r\n              if (result.EntityResult !== null && Array.isArray(result.EntityResult.VOLUME)) {\r\n                listOptions.quantityUOM = Utilities.transferListtoOptions(\r\n                  result.EntityResult.VOLUME\r\n                );\r\n              }\r\n              if (Array.isArray(result.EntityResult.MASS)) {\r\n                let massUOMOptions = Utilities.transferListtoOptions(\r\n                  result.EntityResult.MASS\r\n                );\r\n                massUOMOptions.forEach((massUOM) =>\r\n                  listOptions.quantityUOM.push(massUOM)\r\n                );\r\n              }\r\n              this.setState({ listOptions, UOMS: result.EntityResult });\r\n            }\r\n\r\n          } else {\r\n            console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error in GetUOMList:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in GetUOMList\", error)\r\n    }\r\n  }\r\n\r\n  getFinishedProductCodes(shareholder, terminal) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetFinishedProductCodes +\r\n        \"?ShareholderCode=\" +\r\n        shareholder +\r\n        \"&TerminalCode=\" +\r\n        terminal,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (\r\n              result.EntityResult !== null &&\r\n              Array.isArray(result.EntityResult)\r\n            ) {\r\n              var listOptions = lodash.cloneDeep(this.state.listOptions);\r\n              listOptions.finishedProducts = [];\r\n              result.EntityResult.forEach((product) => {\r\n                listOptions.finishedProducts.push({\r\n                  text: product,\r\n                  value: product,\r\n                });\r\n              });\r\n              this.setState({ listOptions });\r\n            }\r\n          } else {\r\n            console.log(\"Error in GetFinishedProductCodes:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while GetFinishedProductCodes List:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log('error in GetFinishProduct', error)\r\n    }\r\n  }\r\n  getSupplierOriginTerminals(shareholder, supplierCode, terminalCode) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetSupplierOriginTerminals +\r\n        \"?ShareholderCode=\" +\r\n        shareholder +\r\n        \"&Transportationtype=\" +\r\n        Constants.TransportationType.PIPELINE + \"&TerminalCode=\" +\r\n        terminalCode,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (Array.isArray(result.EntityResult)) {\r\n              let shareholderSuppliers = result.EntityResult.filter(\r\n                (shareholderCust) =>\r\n                  shareholderCust.ShareholderCode === shareholder\r\n              );\r\n              if (shareholderSuppliers.length > 0) {\r\n                var listOptions = lodash.cloneDeep(this.state.listOptions);\r\n                listOptions.supplierOriginTerminalOptions =\r\n                  shareholderSuppliers[0].SupplierOriginTerminalsList;\r\n                listOptions.suppliers = [];\r\n                listOptions.originTerminals = [];\r\n                for (let key in listOptions.supplierOriginTerminalOptions) {\r\n                  listOptions.suppliers.push({\r\n                    text: key,\r\n                    value: key,\r\n                  });\r\n                }\r\n                if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                  listOptions.supplierOriginTerminalOptions =\r\n                    shareholderSuppliers[0].SupplierOriginTerminalsList\r\n                }\r\n                this.setState({ listOptions });\r\n                if (supplierCode) {\r\n                  this.setOriginTerminals(supplierCode);\r\n                }\r\n              } else {\r\n                console.log(\"no customers identified for shareholder\");\r\n              }\r\n            } else {\r\n              console.log(\"customerdestinations not identified for shareholder\");\r\n            }\r\n          } else {\r\n            console.log(\"Error in getOriginTerminals:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getOriginTerminals List:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in getOriginTermials\", error)\r\n    }\r\n  }\r\n\r\n  getHeaderLineCode(terminalCode) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAllPipelineHeadersList + '?Terminal=' + terminalCode,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult !== null && Array.isArray(result.EntityResult)) {\r\n              let pipelineHeaderOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult\r\n              );\r\n              this.setState({ pipelineHeaderOptions });\r\n            }\r\n          } else {\r\n            console.log(\"Error in getHeaderLineCode:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error in getHeaderLineCode:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in getHeaderLineCode\", error)\r\n    }\r\n  }\r\n  getAttributes(receiptRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [pipelineReceiptEntity, pipelineReceiptStatusTimeAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(\r\n                result.EntityResult.PIPELINERECEIPT\r\n              ),\r\n              viewAuditTrailAttributeMetaDataList: lodash.cloneDeep(result.EntityResult.PIPELINERECEIPTCHSTATUSTIME),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.PIPELINERECEIPT\r\n                ),\r\n            },\r\n            () => this.getPipelineReceipt(receiptRow)\r\n          );\r\n        } else {\r\n          console.log(\"Failed to get Attributes\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getting Attributes:\", error);\r\n    }\r\n  }\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (attributeMetaDataList.length > 0)\r\n        this.terminalSelectionChange([attributeMetaDataList[0].TerminalCode]);\r\n    } catch (error) {\r\n      console.log(\r\n        \"TrailerDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      let attributesTerminalsList = [];\r\n      var attributeMetaDataList = [];\r\n      var modAttributeMetaDataList = [];\r\n\r\n      attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      var modPipelineReceipt = lodash.cloneDeep(this.state.pipelineReceipt);\r\n\r\n      selectedTerminals.forEach((terminal) => {\r\n        var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n          return selectedAttribute.TerminalCode === terminal;\r\n        });\r\n\r\n        if (existitem === undefined) {\r\n          attributeMetaDataList.forEach(function (attributeMetaData) {\r\n            if (attributeMetaData.TerminalCode === terminal) {\r\n              var Attributevalue = modPipelineReceipt.Attributes.find(\r\n                (trailerAttribute) => {\r\n                  return trailerAttribute.TerminalCode === terminal;\r\n                }\r\n              );\r\n              if (Attributevalue !== undefined) {\r\n                attributeMetaData.attributeMetaDataList.forEach(function (\r\n                  attributeMetaData\r\n                ) {\r\n                  var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                    (x) => {\r\n                      return x.AttributeCode === attributeMetaData.Code;\r\n                    }\r\n                  );\r\n                  if (valueAttribute !== undefined)\r\n                    attributeMetaData.DefaultValue =\r\n                      valueAttribute.AttributeValue;\r\n                });\r\n              }\r\n              attributesTerminalsList.push(attributeMetaData);\r\n            }\r\n          });\r\n        } else {\r\n          attributesTerminalsList.push(existitem);\r\n        }\r\n      });\r\n\r\n      modAttributeMetaDataList = [];\r\n      modAttributeMetaDataList = attributesTerminalsList;\r\n      modAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n        modAttributeMetaDataList\r\n      );\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n          return attributeValidation.TerminalCode === selectedTerminals;\r\n        });\r\n        if (existTerminal === undefined) {\r\n          Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n            (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n          );\r\n        }\r\n      });\r\n      this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TrailerDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      this.setState({\r\n        modAttributeMetaDataList\r\n      })\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptDetailsComposite:Error occured on handleAttributeCellDataEdit\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  fillAttributeDetails(modPipelineReceipt, attributeList) {\r\n    try {\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modPipelineReceipt.Attributes = Utilities.fillAttributeDetails(attributeList);;\r\n      // attributeList.forEach((comp) => {\r\n      //   let attribute = {\r\n      //     ListOfAttributeData: [],\r\n      //   };\r\n      //   attribute.TerminalCode = comp.TerminalCode;\r\n      //   comp.attributeMetaDataList.forEach((det) => {\r\n      //     attribute.ListOfAttributeData.push({\r\n      //       AttributeCode: det.Code,\r\n      //       AttributeValue: det.DefaultValue,\r\n      //     });\r\n      //   });\r\n      //   modPipelineReceipt.Attributes.push(attribute);\r\n      // });\r\n\r\n      this.setState({ modPipelineReceipt });\r\n      return modPipelineReceipt;\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptDetailsComposite:Error occured on fillAttributeDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  convertStringtoDecimal(modPipelineReceipt, attributeList) {\r\n    try {\r\n      modPipelineReceipt = this.fillAttributeDetails(modPipelineReceipt, attributeList);\r\n      return modPipelineReceipt;\r\n    } catch (err) {\r\n      console.log(\"convertStringtoDecimal error PipelineDetails Details\", err);\r\n    }\r\n  }\r\n  getPipelineReceipt(selectedRow) {\r\n    try {\r\n      let transportationType = Constants.TransportationType.PIPELINE;\r\n      var { listOptions } = { ...this.state };\r\n      // emptyPipelineReceipt.TerminalCodes =\r\n      //   this.props.terminalCodes.length === 1\r\n      //     ? [...this.props.terminalCodes]\r\n      //     : [];\r\n      if (selectedRow.Common_Code === undefined) {\r\n        emptyPipelineReceipt.QuantityUOM = this.props.userDetails.EntityResult.PageAttibutes.DefaultQtyUOMForTransactionUI.PIPELINE;\r\n        emptyPipelineReceipt.TransactionMode =\r\n          Constants.TransportationType.PIPELINE;\r\n        emptyPipelineReceipt.Quantity = \"\";\r\n        emptyPipelineReceipt.ScheduledEndTime = new Date();\r\n        emptyPipelineReceipt.ScheduledStartTime = new Date();\r\n        this.setState({\r\n          pipelineReceipt: { ...emptyPipelineReceipt },\r\n          modPipelineReceipt: { ...emptyPipelineReceipt },\r\n          listOptions,\r\n          isReadyToRender: true,\r\n          activeTab: 0,\r\n          isPlanned: false,\r\n          pipelineReceiptKPIList: [],\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnPipelineReceipt\r\n          ),\r\n        },\r\n          () => {\r\n            if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n              if (this.props.terminalCodes.length === 1) {\r\n                this.terminalSelectionChange(this.props.terminalCodes);\r\n              } else {\r\n                this.terminalSelectionChange([]);\r\n              }\r\n            } else {\r\n              this.localNodeAttribute([]);\r\n            }\r\n          });\r\n        return;\r\n      }\r\n\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineReceiptCode,\r\n          value: selectedRow.Common_Code,\r\n        },\r\n        {\r\n          key: KeyCodes.transportationType,\r\n          value: transportationType,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.pipelineReceiptCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetPipelineReceipt,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          console.log(result);\r\n          if (result.IsSuccess === true) {\r\n            // this.getSupplierOriginTerminals(\r\n            //   this.props.selectedShareholder,\r\n            //   result.EntityResult.SupplierCode,\r\n            // );\r\n            result.EntityResult.code = selectedRow.Common_Code;\r\n            if (result.EntityResult.PipelineReceiptTanks === null)\r\n              result.EntityResult.PipelineReceiptTanks = []\r\n            else\r\n              result.EntityResult.PipelineReceiptTanks = Utilities.addSeqNumberToListObject(\r\n                result.EntityResult.PipelineReceiptTanks\r\n              );\r\n            if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n              this.getTank(result.EntityResult.TerminalCodes[0]);\r\n              this.getHeaderLineCode(result.EntityResult.TerminalCodes[0]);\r\n              this.getPipelineMeter(result.EntityResult.PipelineHeaderCode, result.EntityResult.TerminalCodes[0]);\r\n              this.getSupplierOriginTerminals(\r\n                this.props.selectedShareholder,\r\n                result.EntityResult.SupplierCode, result.EntityResult.TerminalCodes[0]\r\n              );\r\n              this.terminalSelectionChange(result.EntityResult.TerminalCodes);\r\n              this.getFinishedProductCodes(this.props.selectedShareholder, result.EntityResult.TerminalCodes[0]);\r\n            }\r\n            else {\r\n              this.localNodeAttribute();\r\n              this.getPipelineMeter(result.EntityResult.PipelineHeaderCode, \"\");\r\n            }\r\n            // if (result.EntityResult.PipelineReceiptStatus === \"READY\") {\r\n            let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n            this.setState({\r\n              isReadyToRender: true,\r\n              pipelineReceipt: result.EntityResult,\r\n              modPipelineReceipt: { ...result.EntityResult },\r\n              isPlanned: true,\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnPipelineReceipt\r\n              ),\r\n            }, () => {\r\n              this.GetSnapShotsForPlan(result.EntityResult);\r\n              this.getSupplierOriginTerminals(\r\n                this.props.selectedShareholder,\r\n                result.EntityResult.SupplierCode, \"\"\r\n              );\r\n\r\n              this.getReciptStatuses(selectedRow);\r\n              this.getReceiptOperations();\r\n              this.getKPIList(this.props.selectedShareholder, result.EntityResult.PipelineReceiptCode)\r\n            })\r\n            // } else {\r\n            //   this.setState({\r\n            //     isReadyToRender: true,\r\n            //     pipelineReceipt: result.EntityResult,\r\n            //     modPipelineReceipt: { ...result.EntityResult },\r\n            //     saveEnabled: false,\r\n            //   });\r\n            // }\r\n          } else {\r\n            this.setState({\r\n              pipelineReceipt: { ...emptyPipelineReceipt },\r\n              modPipelineReceipt: { ...emptyPipelineReceipt },\r\n              isReadyToRender: true,\r\n              // isPlanned:false\r\n            });\r\n            console.log(\"Error in getPipelineReceipt:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting pipelineReceipt:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while getting pipelineReceipt\", error)\r\n    }\r\n  }\r\n  fillDetails() {\r\n    let { modPipelineReceipt } = { ...this.state };\r\n    try {\r\n      if (modPipelineReceipt.Quantity !== null && modPipelineReceipt.Quantity !== \"\")\r\n        modPipelineReceipt.Quantity = Utilities.convertStringtoDecimal(\r\n          modPipelineReceipt.Quantity\r\n        );\r\n      modPipelineReceipt.ShareholderCode = this.props.selectedShareholder;\r\n\r\n      modPipelineReceipt.ScheduledStartTime.setSeconds(parseInt('00'), parseInt('000'))\r\n\r\n      let tankComps = [];\r\n      if (Array.isArray(modPipelineReceipt.PipelineReceiptTanks)) {\r\n        modPipelineReceipt.PipelineReceiptTanks.forEach((item) => {\r\n          if (!(item.TankCode === null || item.TankCode === \"\")\r\n            || !(item.Quantity === null || item.Quantity === \"\")) {\r\n            item.PipelineReceiptCode =\r\n              modPipelineReceipt.PipelineReceiptCode;\r\n            item.QuantityUOM =\r\n              modPipelineReceipt.QuantityUOM;\r\n            item.Quantity =\r\n              Utilities.convertStringtoDecimal(\r\n                item.Quantity\r\n              );\r\n            item.PlannedStartTime = item.PlannedStartTime === null ?\r\n              modPipelineReceipt.ScheduledStartTime : item.PlannedStartTime\r\n            item.PlannedEndTime = item.PlannedEndTime === null ?\r\n              modPipelineReceipt.ScheduledEndTime : item.PlannedEndTime\r\n            tankComps.push(item);\r\n          }\r\n        })\r\n      }\r\n      modPipelineReceipt.PipelineReceiptTanks = tankComps;\r\n    } catch (error) {\r\n      console.log(\"Error in fillDetails\", error)\r\n    }\r\n    return modPipelineReceipt;\r\n  }\r\n\r\n  addUpdatePipelineReceipt = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempPipelineReceipt = lodash.cloneDeep(this.state.tempPipelineReceipt);\r\n\r\n      this.state.pipelineReceipt.PipelineReceiptCode === \"\"\r\n      ? this.createPipelineReceipt(tempPipelineReceipt)\r\n      : this.updatePipelineReceipt(tempPipelineReceipt);\r\n    } catch (error) {\r\n      console.log(\"pipeline Receipt Composite : Error in addUpdatePipelineReceipt\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n     // this.setState({ saveEnabled: false });\r\n      let modPipelineReceipt = this.fillDetails();\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      if (this.validateSave(modPipelineReceipt, attributeList)) {\r\n        modPipelineReceipt = this.convertStringtoDecimal(modPipelineReceipt, attributeList);\r\n       \r\n        let showAuthenticationLayout = this.props.userDetails.EntityResult.IsWebPortalUser !== true? true: false;\r\n      let tempPipelineReceipt = lodash.cloneDeep(modPipelineReceipt);\r\n      this.setState({ showAuthenticationLayout, tempPipelineReceipt }, () => {\r\n        if (showAuthenticationLayout === false) {\r\n          this.addUpdatePipelineReceipt();\r\n        }\r\n    });\r\n        \r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  validateSave(modPipelineReceipt, attributeList) {\r\n    try {\r\n      var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n\r\n      Object.keys(pipelineReceiptValidationDef).forEach(function (key) {\r\n        if (modPipelineReceipt[key] !== undefined) {\r\n          validationErrors[key] = Utilities.validateField(\r\n            pipelineReceiptValidationDef[key],\r\n            modPipelineReceipt[key]\r\n          );\r\n        }\r\n      });\r\n\r\n      if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n        if (modPipelineReceipt.TerminalCodes !== null && modPipelineReceipt.TerminalCodes.length === 0) {\r\n          validationErrors[\"TerminalCodes\"] = \"Terminal_reqTerCode\";\r\n        }\r\n      }\r\n      if (this.state.isMeterRequired && (modPipelineReceipt.PipelineHeaderMeterCode === \"\" ||\r\n        modPipelineReceipt.PipelineHeaderMeterCode === null ||\r\n        modPipelineReceipt.PipelineHeaderMeterCode === undefined)) {\r\n        validationErrors[\"PipelineHeaderMeterCode\"] = \"PipelineReceiptDetails_MandatoryHeaderMeterCode\";\r\n      }\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"PipelineReceipt_SavedSuccess_msg\",\r\n        messageResultDetails: [],\r\n      };\r\n\r\n      if (\r\n        Array.isArray(modPipelineReceipt.PipelineReceiptTanks) &&\r\n        modPipelineReceipt.PipelineReceiptTanks.length > 0\r\n      ) {\r\n        let tankCodeList = [];\r\n        let tankQuantity = 0;\r\n        modPipelineReceipt.PipelineReceiptTanks.forEach((compart) => {\r\n          if (tankCodeList.includes(compart.TankCode)) {\r\n            notification.messageResultDetails.push({\r\n              keyFields: [\r\n                \"PipelineReceiptDetails_ReceiptCode\",\r\n                \"PipelineReceipt_TankCode\",\r\n              ],\r\n              keyValues: [modPipelineReceipt.PipelineReceiptCode, compart.TankCode],\r\n              isSuccess: false,\r\n              errorMessage: \"PIPELINEDISPATCH_TANKINFO_DUPLICATE\",\r\n            });\r\n          } else if (compart.Quantity !== \"\" && compart.Quantity !== 0 && (compart.TankCode === \"\" || compart.TankCode === null ||\r\n            compart.TankCode === undefined)) {\r\n            notification.messageResultDetails.push({\r\n              keyFields: [],\r\n              keyValues: [],\r\n              isSuccess: false,\r\n              errorMessage:\r\n                \"TankCode_EMPTY\",\r\n            });\r\n          }\r\n          else {\r\n            tankCodeList.push(compart.TankCode);\r\n          }\r\n          pipelineReceiptTankInfoDef.forEach((col) => {\r\n            let err = \"\";\r\n            if (col.validator !== undefined) {\r\n              err = Utilities.validateField(col.validator, compart[col.field]);\r\n            }\r\n            if (err !== \"\" && this.state.isTankRequired) {\r\n              notification.messageResultDetails.push({\r\n                keyFields: [\r\n                  \"PipelineReceiptDetails_ReceiptCode\",\r\n                  col.displayName,\r\n                ],\r\n                keyValues: [modPipelineReceipt.PipelineReceiptCode, compart[col.field]],\r\n                isSuccess: false,\r\n                errorMessage: err,\r\n              });\r\n            }\r\n          });\r\n          tankQuantity += compart.Quantity;\r\n        });\r\n        if (tankQuantity !== modPipelineReceipt.Quantity && this.state.isTankRequired) {\r\n          notification.messageResultDetails.push({\r\n            keyFields: [\r\n              \"PipelineReceiptDetails_ReceiptCode\",\r\n              \"PipelineReceiptDetails_Quantity\",\r\n            ],\r\n            keyValues: [modPipelineReceipt.PipelineReceiptCode, modPipelineReceipt.Quantity],\r\n            isSuccess: false,\r\n            errorMessage: \"PIPELINE_TANKPLAN_QUANTITY_INVALID_X\",\r\n          });\r\n        }\r\n\r\n      } else if (this.state.isTankRequired) {\r\n        notification.messageResultDetails.push({\r\n          keyFields: [],\r\n          keyValues: [],\r\n          isSuccess: false,\r\n          errorMessage:\r\n            \"ERRMSG_PIPELINE_CUSTODYREFERENCE_TANKINFO_EMPTY\",\r\n        });\r\n      }\r\n      var attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n      attributeList.forEach((attribute) => {\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n            attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n              attributeValidation.attributeValidationErrors[\r\n                attributeMetaData.Code\r\n              ] = Utilities.valiateAttributeField(\r\n                attributeMetaData,\r\n                attributeMetaData.DefaultValue\r\n              );\r\n            });\r\n          }\r\n        });\r\n      });\r\n      this.setState({ validationErrors });\r\n      var returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n      if (notification.messageResultDetails.length > 0) {\r\n        this.props.onSaved(modPipelineReceipt, \"update\", notification);\r\n        return false;\r\n      }\r\n      return returnValue;\r\n    } catch (error) {\r\n      console.log(\"error in validate save\", error)\r\n    }\r\n  }\r\n  createPipelineReceipt(modPipelineReceipt) {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineReceiptCode,\r\n          value: modPipelineReceipt.PipelineReceiptCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n        keyDataCode: KeyCodes.pipelineReceiptCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modPipelineReceipt,\r\n      };\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"PipelineReceipt_SavedSuccess_msg\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"PipelineReceipt_ReceiptCode\"],\r\n            keyValues: [modPipelineReceipt.PipelineReceiptCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.CreatePipelineReceipt,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            // this.setState({\r\n            //   pipelineReceipt: lodash.cloneDeep(modPipelineReceipt),\r\n            //   modPipelineReceipt: lodash.cloneDeep(modPipelineReceipt),\r\n            //   saveEnabled: Utilities.isInFunction(\r\n            //     this.props.userDetails.EntityResult.FunctionsList,\r\n            //     functionGroups.modify,\r\n            //     fnPipelineReceipt\r\n            //   ),\r\n            // }, () =>\r\n            this.getPipelineReceipt({ Common_Code: modPipelineReceipt.PipelineReceiptCode });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n            this.setState({\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.add,\r\n                fnPipelineReceipt\r\n              ),\r\n            });\r\n            console.log(\"Error in CreatePipelineReceipt:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(modPipelineReceipt, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnPipelineReceipt\r\n            ),\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(modPipelineReceipt, \"add\", notification);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"error in create receipt\", error)\r\n    }\r\n  }\r\n\r\n  updatePipelineReceipt(modPipelineReceipt) {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineReceiptCode,\r\n          value: modPipelineReceipt.code,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n        keyDataCode: KeyCodes.pipelineReceiptCode,\r\n        KeyCodes: keyCode,\r\n        Entity: modPipelineReceipt,\r\n      };\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"PipelineReceipt_SavedSuccess_msg\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"PipelineReceipt_ReceiptCode\"],\r\n            keyValues: [modPipelineReceipt.code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.UpdatePipelineReceipt,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            // this.setState({\r\n            //   pipelineReceipt: lodash.cloneDeep(modPipelineReceipt),\r\n            //   modPipelineReceipt: lodash.cloneDeep(modPipelineReceipt),\r\n            //   saveEnabled: Utilities.isInFunction(\r\n            //     this.props.userDetails.EntityResult.FunctionsList,\r\n            //     functionGroups.modify,\r\n            //     fnPipelineReceipt\r\n            //   ),\r\n            // });\r\n            this.getPipelineReceipt({ Common_Code: modPipelineReceipt.PipelineReceiptCode });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n            this.setState({\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.add,\r\n                fnPipelineReceipt\r\n              ),\r\n            });\r\n            console.log(\"Error in updatePipelineReceipt:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(modPipelineReceipt, \"update\", notification);\r\n        })\r\n        .catch((error) => {\r\n          let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnPipelineReceipt\r\n            ),\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(modPipelineReceipt, \"modify\", notification);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"error in update Receipt\", error)\r\n    }\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n      const pipelineReceipt = lodash.cloneDeep(this.state.pipelineReceipt);\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modPipelineReceipt: { ...pipelineReceipt },\r\n          modAssociations: [],\r\n          validationErrors,\r\n        })\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelineReceiptDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modPipelineReceipt = lodash.cloneDeep(\r\n        this.state.modPipelineReceipt\r\n      );\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n\r\n      modPipelineReceipt[propertyName] = data;\r\n\r\n      if (propertyName === \"SupplierCode\") {\r\n        this.setOriginTerminals(data);\r\n        if (\r\n          this.state.listOptions.supplierOriginTerminalOptions[data].length ===\r\n          1\r\n        ) {\r\n          modPipelineReceipt.OriginTerminalCode =\r\n            this.state.listOptions.supplierOriginTerminalOptions[data][0];\r\n        } else {\r\n          modPipelineReceipt.OriginTerminalCode = \"\";\r\n        }\r\n      }\r\n\r\n      this.setState({ modPipelineReceipt });\r\n\r\n\r\n      if (pipelineReceiptValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          pipelineReceiptValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"PipelinReceiptDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  setOriginTerminals(supplierCode) {\r\n    try {\r\n      var listOptions = lodash.cloneDeep(this.state.listOptions);\r\n      let originTermailList = [];\r\n      this.state.listOptions.supplierOriginTerminalOptions[supplierCode].forEach(\r\n        (originTerminal) => {\r\n          originTermailList.push({ text: originTerminal, value: originTerminal });\r\n        }\r\n      );\r\n      listOptions.originTerminals = originTermailList;\r\n      this.setState({ listOptions });\r\n    } catch (error) {\r\n      console.log(\"Error in setOriginterminal\", error)\r\n    }\r\n  }\r\n\r\n  handleAssociationSelectionChange = (e) => {\r\n    try {\r\n      this.setState({ selectedAssociations: e });\r\n    } catch (error) {\r\n      console.log(\"error in handlAssociationselectionchange\", error)\r\n    }\r\n  };\r\n  handleCellDataEdit = (newVal, cellData) => {\r\n    try {\r\n      let modPipelineReceipt = lodash.cloneDeep(this.state.modPipelineReceipt);\r\n      modPipelineReceipt.PipelineReceiptTanks[cellData.rowIndex][\r\n        cellData.field\r\n      ] = newVal;\r\n      this.setState({ modPipelineReceipt });\r\n    } catch (error) {\r\n      console.log(\"Error in handleCellDataEdit\", error)\r\n    }\r\n  };\r\n\r\n  handleDateTextChange = (cellData, value, error) => {\r\n    try {\r\n      // var validationErrors = { ...this.state.validationErrors };\r\n      var modPipelineReceipt = lodash.cloneDeep(this.state.modPipelineReceipt);\r\n      // validationErrors[propertyName] = error;\r\n      let index = modPipelineReceipt.PipelineReceiptTanks.findIndex((item) => {\r\n        return item.sequenceNo === cellData.rowData.sequenceNo\r\n      }\r\n      )\r\n      if (index >= 0) {\r\n        if (value === \"\")\r\n          modPipelineReceipt.PipelineReceiptTanks[index][cellData.field] = null;\r\n        else\r\n          modPipelineReceipt.PipelineReceiptTanks[index][cellData.field] = value;\r\n        this.setState({ modPipelineReceipt });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"Error in DateTextChange : Error occured on handleDateTextChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleAddAssociation = () => {\r\n    try {\r\n      if (!this.props.userDetails.EntityResult.IsArchived) {\r\n        try {\r\n          let modPipelineReceipt = lodash.cloneDeep(\r\n            this.state.modPipelineReceipt\r\n          );\r\n          let newComp = {\r\n            PipelineReceiptCode: \"\",\r\n            TankCode: null,\r\n            PipelineTankMeterCode: null,\r\n            Quantity: 0,\r\n            QuantityUOM: \"\",\r\n            PlannedStartTime: null,\r\n            PlannedEndTime: null,\r\n            // PlannedStartTime: modPipelineReceipt.ScheduledStartTime,\r\n            // PlannedEndTime: modPipelineReceipt.ScheduledEndTime,\r\n            sequenceNo: Utilities.getMaxSeqNumberfromListObject(modPipelineReceipt.PipelineReceiptTanks)\r\n          };\r\n          modPipelineReceipt.PipelineReceiptTanks.push(newComp);\r\n\r\n          this.setState({\r\n            modPipelineReceipt,\r\n            selectedAssociations: [],\r\n          });\r\n        } catch (error) {\r\n          console.log(\r\n            \"PipelineReceiptDetailsComposite:Error occured on handleAddAssociation\",\r\n            error\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"PipelineReceiptDetailsComposite: Error occured on handleAddAssociation\",\r\n        error)\r\n    }\r\n  };\r\n\r\n  handleDeleteAssociation = () => {\r\n    try {\r\n      if (!this.props.userDetails.EntityResult.IsArchived) {\r\n        try {\r\n          if (\r\n            this.state.selectedAssociations != null &&\r\n            this.state.selectedAssociations.length > 0\r\n          ) {\r\n            if (\r\n              this.state.modPipelineReceipt.PipelineReceiptTanks.length > 0\r\n            ) {\r\n              let modPipelineReceipt = lodash.cloneDeep(\r\n                this.state.modPipelineReceipt\r\n              );\r\n\r\n              this.state.selectedAssociations.forEach((obj, index) => {\r\n                modPipelineReceipt.PipelineReceiptTanks =\r\n                  modPipelineReceipt.PipelineReceiptTanks.filter(\r\n                    (com, cindex) => {\r\n                      return com.sequenceNo !== obj.sequenceNo;\r\n                    }\r\n                  );\r\n              });\r\n\r\n              this.setState({ modPipelineReceipt });\r\n            }\r\n          }\r\n\r\n          this.setState({ selectedAssociations: [] });\r\n        } catch (error) {\r\n          console.log(\r\n            \"PipelineReceiptDetailsComposite:Error occured on handleDeleteAssociation\",\r\n            error\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error in handle Delete Association\", error)\r\n    }\r\n  };\r\n  handlePipelineHeaderChange = (data) => {\r\n    try {\r\n      const modPipelineReceipt = lodash.cloneDeep(\r\n        this.state.modPipelineReceipt\r\n      );\r\n      modPipelineReceipt[\"PipelineHeaderCode\"] = data;\r\n      this.setState({ modPipelineReceipt });\r\n      this.getPipelineMeter(data, modPipelineReceipt.TerminalCodes[0]);\r\n    } catch (error) {\r\n      console.log(\"PipelineReceiptDetailsComposite:Error occured on handlePipelineHeaderChange\", error);\r\n    }\r\n  }\r\n  handleTerminalChange = (data) => {\r\n    try {\r\n      const modPipelineReceipt = lodash.cloneDeep(\r\n        this.state.modPipelineReceipt\r\n      );\r\n      if (data === null) {\r\n        modPipelineReceipt[\"TerminalCodes\"] = [];\r\n      } else {\r\n        modPipelineReceipt[\"TerminalCodes\"][0] = data;\r\n        modPipelineReceipt[\"PipelineHeaderCode\"] = \"\";\r\n        modPipelineReceipt[\"PipelineHeaderMeterCode\"] = null;\r\n        modPipelineReceipt[\"FinishedProductCode\"] = \"\";\r\n      }\r\n      this.setState({ modPipelineReceipt, pipelineHeaderMeterOptions: [] }, () => {\r\n        this.getTank(data);\r\n        this.getHeaderLineCode(data);\r\n        this.getSupplierOriginTerminals(this.props.selectedShareholder, modPipelineReceipt.SupplierCode, data);\r\n        this.getFinishedProductCodes(this.props.selectedShareholder, data);\r\n      });\r\n    } catch (error) {\r\n      console.log(\"PipelineReceiptDetailsComposite:Error occured on handleTerminalChange\", error);\r\n    }\r\n  }\r\n  getPipelineMeter(headerCode, terminalCode) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineHeaderCode,\r\n          value: headerCode,\r\n        },\r\n        {\r\n          key: KeyCodes.terminalCode,\r\n          value: this.props.userDetails.EntityResult.IsEnterpriseNode ? terminalCode : null,\r\n        }\r\n      ];\r\n      var obj = {\r\n        keyDataCode: KeyCodes.pipelineHeaderCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.GetPipelineHeader,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          let pipelineHeaderMeterOptions = [];\r\n          let modPipelineReceipt = lodash.cloneDeep(this.state.modPipelineReceipt)\r\n          let validationErrors = lodash.cloneDeep(this.state.validationErrors)\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult !== null && result.EntityResult.AssociatedMeterCodes !== null && Array.isArray(result.EntityResult.AssociatedMeterCodes)) {\r\n              pipelineHeaderMeterOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.AssociatedMeterCodes\r\n              );\r\n\r\n              if (this.state.isMeterRequired &&\r\n                result.EntityResult.AssociatedMeterCodes.length === 1 &&\r\n                (modPipelineReceipt.PipelineHeaderCode !== \"\" &&\r\n                  modPipelineReceipt.PipelineHeaderCode !== null &&\r\n                  modPipelineReceipt.PipelineHeaderCode !== undefined)) {\r\n                modPipelineReceipt.PipelineHeaderMeterCode\r\n                  = result.EntityResult.AssociatedMeterCodes[0]\r\n                validationErrors.PipelineHeaderMeterCode = \"\";\r\n              }\r\n            }\r\n          }\r\n          this.setState({ pipelineHeaderMeterOptions, validationErrors, modPipelineReceipt });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getPipelineMeter:\", error);\r\n        });\r\n\r\n    } catch (error) {\r\n      console.log(\"Error while getPipelineMeter:\", error);\r\n    }\r\n  }\r\n  getTank(terminal) {\r\n    try {\r\n      var Shareholder = this.props.userDetails.EntityResult.PrimaryShareholder;\r\n      axios(\r\n        RestAPIs.GetTankListForRole + \"?ShareholderCode=\" + Shareholder,\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            var tankCodeOptions = [];\r\n            var tanks = result.EntityResult.Table;\r\n            if (tanks !== null && Array.isArray(tanks)) {\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                tanks = tanks.filter((tank) => {\r\n                  return tank.TerminalCode === terminal;\r\n                });\r\n                for (let i = 0; i < tanks.length; i++) {\r\n                  tankCodeOptions.push(tanks[i].Common_Code);\r\n                }\r\n              }\r\n              else {\r\n                for (let i = 0; i < tanks.length; i++) {\r\n                  tankCodeOptions.push(tanks[i].Common_Code);\r\n                }\r\n              }\r\n            }\r\n\r\n            if (tankCodeOptions !== null && Array.isArray(tankCodeOptions)) {\r\n              let tankOptions = Utilities.transferListtoOptions(\r\n                tankCodeOptions\r\n              );\r\n              this.setState({ tankOptions });\r\n            }\r\n          } else {\r\n            console.log(\"Error in getTankList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error in getTankList:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in getTankList:\", error);\r\n    }\r\n  }\r\n  handleTabChange = (activeIndex) => {\r\n    try {\r\n      this.setState({ activeTab: activeIndex, expandedRows: [] });\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailreceiptDetailsComposite: Error occurred on handleTabChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  GetSnapShotsForPlan(selectedRow) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelinePlanCode,\r\n          value: selectedRow.PipelineReceiptCode,\r\n        },\r\n        {\r\n          key: KeyCodes.pipelinePlanType,\r\n          value: Constants.PipeLineType.RECEIPT\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.GetSnapShotsForPlan,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let loadingDetails = response.data.EntityResult\r\n          let pipelineSnapShotInfo = [];\r\n          let remarks = lodash.cloneDeep(this.state.Remarks)\r\n          if (loadingDetails !== undefined && loadingDetails !== null) {\r\n            if (loadingDetails.Table !== null && loadingDetails.Table.length > 0) {\r\n              loadingDetails.Table.forEach((item) => {\r\n                item.RationPending = item.RationPending !== null ? item.RationPending.toString().toUpperCase() === \"FALSE\" ? \"False\" : \"True\" : item.RationPending;\r\n                item.ActualEndTime = item.ActualEndTime !== null ?\r\n                  new Date(item.ActualEndTime).toLocaleDateString() + \" \" + new Date(item.ActualEndTime).toLocaleTimeString() : item.ActualEndTime;\r\n                item.ActualStartTime = item.ActualStartTime !== null ?\r\n                  new Date(item.ActualStartTime).toLocaleDateString() + \" \" + new Date(item.ActualStartTime).toLocaleTimeString() : item.ActualStartTime;\r\n                item.PlannedEndTime = new Date(item.PlannedEndTime).toLocaleDateString() + \" \" + new Date(item.PlannedEndTime).toLocaleTimeString();\r\n                item.PlannedStartTime = new Date(item.PlannedStartTime).toLocaleDateString() + \" \" + new Date(item.PlannedStartTime).toLocaleTimeString();\r\n                pipelineSnapShotInfo.push(item)\r\n                remarks = item.Remarks\r\n              })\r\n            }\r\n            if (loadingDetails.Table2 !== null && loadingDetails.Table2.length > 0) {\r\n              loadingDetails.Table2.forEach((item) => {\r\n                item.EndGrossVolume = item.EndGrossVolume === null ? \"\" : item.EndGrossVolume.toString() + \" \" + item.VolumeUOM\r\n                item.EndNetVolume = item.EndNetVolume === null ? \"\" : item.EndNetVolume.toString() + \" \" + item.VolumeUOM\r\n                item.StartGrossVolume = item.StartGrossVolume === null ? \"\" : item.StartGrossVolume.toString() + \" \" + item.VolumeUOM\r\n                item.StartNetVolume = item.StartNetVolume === null ? \"\" : item.StartNetVolume.toString() + \" \" + item.VolumeUOM\r\n                item.Density = item.Density === null || item.Density === 0 ? \"0\" : item.Density.toString() + \" \" + item.DensityUOM\r\n                item.Temperature = item.Temperature === null || item.Temperature === 0 ? \"0\" : item.Temperature.toString() + \" \" + item.TemperatureUOM\r\n              })\r\n            }\r\n            if (loadingDetails.Table1 !== null && loadingDetails.Table1.length > 0) {\r\n              loadingDetails.Table1.forEach((item) => {\r\n                item.Density = item.Density === null || item.Density === 0 ? \"0\" : item.Density.toString() + \" \" + item.DensityUOM\r\n                item.Temperature = item.Temperature === null || item.Temperature === 0 ? \"0\" : item.Temperature.toString() + \" \" + item.TemperatureUOM\r\n              })\r\n            }\r\n          }\r\n          if (pipelineSnapShotInfo !== null && pipelineSnapShotInfo !== undefined && pipelineSnapShotInfo.length > 0)\r\n            pipelineSnapShotInfo = Utilities.addSeqNumberToListObject(pipelineSnapShotInfo);\r\n          this.setState({ loadingDetails, pipelineSnapShotInfo });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting receipt compartment details:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while getting receipt getsnapshot:\", error);\r\n    }\r\n  }\r\n  fillTransactionPlanDetails(modTransactiondetails) {\r\n    try {\r\n      console.log(\"modLoadingDetails\", modTransactiondetails);\r\n      let ViewTransactiondetails = [];\r\n      if (Array.isArray(modTransactiondetails)) {\r\n        modTransactiondetails.forEach((comp) => {\r\n          comp.adjustedquantity = 0;\r\n          ViewTransactiondetails.push({\r\n            ReceivedGrossQuantity: comp.ReceivedGrossQuantity,\r\n            ReceivedNetQuantity: comp.ReceivedNetQuantity,\r\n            RationPending: comp.RationPending,\r\n            PlannedQuantityUOM: comp.PlannedQuantityUOM,\r\n            PlannedStartTime: new Date(comp.PlannedStartTime).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(comp.PlannedStartTime).toLocaleTimeString(),\r\n            PlannedEndTime: new Date(comp.PlannedEndTime).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(comp.PlannedEndTime).toLocaleTimeString(),\r\n            ActualStartTime: new Date(comp.ActualStartTime).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(comp.ActualStartTime).toLocaleTimeString(),\r\n          });\r\n        })\r\n      }\r\n      ViewTransactiondetails =\r\n        Utilities.addSeqNumberToListObject(ViewTransactiondetails);\r\n\r\n      return ViewTransactiondetails;\r\n    } catch (error) {\r\n      console.log(\"Error in FillTransactionPlan Details\", error)\r\n    }\r\n  }\r\n  fillTankDetails(modViewTankdetails) {\r\n    try {\r\n      let ViewTankdetails = [];\r\n      if (Array.isArray(modViewTankdetails)) {\r\n        modViewTankdetails.forEach((comp) => {\r\n          comp.adjustedquantity = 0;\r\n          ViewTankdetails.push({\r\n            TankCode: comp.TankCode,\r\n            StartGrossVolume: comp.StartGrossVolume,\r\n            EndGrossVolume: comp.EndGrossVolume,\r\n            StartNetVolume: comp.StartNetVolume,\r\n            EndNetVolume: comp.EndNetVolume,\r\n            Density: comp.Density,\r\n            Temperature: comp.Temperature\r\n          });\r\n        })\r\n      }\r\n      ViewTankdetails =\r\n        Utilities.addSeqNumberToListObject(ViewTankdetails);\r\n\r\n      return ViewTankdetails;\r\n    } catch (error) {\r\n      console.log(\"error in fillTankDetails\", error)\r\n    }\r\n  }\r\n  handleDrawer = () => {\r\n    var drawerStatus = lodash.cloneDeep(this.state.drawerStatus);\r\n    this.setState({\r\n      drawerStatus: !drawerStatus,\r\n    });\r\n  };\r\n  fillMeterDetails(modMeterDetails) {\r\n    try {\r\n      let ViewMeterdetails = [];\r\n      if (Array.isArray(modMeterDetails)) {\r\n        modMeterDetails.forEach((comp) => {\r\n          comp.adjustedquantity = 0;\r\n          ViewMeterdetails.push({\r\n            MeterCode: comp.TankCode,\r\n            StartGrossTotalizer: comp.StartGrossTotalizer,\r\n            EndGrossTotalizer: comp.EndGrossTotalizer,\r\n            StartNetTotalizer: comp.StartNetTotalizer,\r\n            EndNetTotalizer: comp.EndNetTotalizer,\r\n            Density: comp.Density,\r\n            Temperature: comp.Temperature\r\n          });\r\n        })\r\n      }\r\n      ViewMeterdetails =\r\n        Utilities.addSeqNumberToListObject(ViewMeterdetails);\r\n\r\n      return ViewMeterdetails;\r\n    } catch (error) {\r\n      console.log(\"eror in fill Tank Details\")\r\n    }\r\n  }\r\n  onBack = () => {\r\n    let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n    this.setState({\r\n      isManualEntry: false,\r\n      // isPlanned: true,\r\n      saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineReceipt.PipelineReceiptStatus)\r\n        && Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.modify,\r\n          fnPipelineReceipt\r\n        ),\r\n      isViewAuditTrail: false,\r\n      // isViewUnloading: false,\r\n      drawerStatus: false,\r\n\r\n    });\r\n    this.getPipelineReceipt({ Common_Code: this.state.pipelineReceipt.PipelineReceiptCode });\r\n  };\r\n  getReciptStatuses(receiptRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetPipelineReceiptAllStatuses +\r\n        \"?shareholderCode=\" +\r\n        this.props.selectedShareholder +\r\n        \"&pipelineReceiptCode=\" +\r\n        receiptRow.Common_Code,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          this.setState({\r\n            currentReceiptStatus: result.EntityResult,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting getReceiptStatuses:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  handleCloseReceipttModal = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.RemarksPopUp} size=\"mini\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h3>\r\n                  {t(\"ViewPipelineDispatch_CloseHeader\") +\r\n                    \" : \" +\r\n                    this.state.modPipelineReceipt.PipelineReceiptCode}\r\n                </h3>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                <div className=\"col col-lg-12\">\r\n                  <Input\r\n                    fluid\r\n                    value={this.state.Remarks}\r\n                    // label={t(\"ViewReceipt_Reason\")}\r\n                    reserveSpace={false}\r\n                    onChange={(value) => {\r\n                      this.setState({ Remarks: value });\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  if (this.state.Remarks === \"\") {\r\n                    let notification = {\r\n                      messageType: \"critical\",\r\n                      message: \"ViewPipelineReceipt_ShipmentClose\",\r\n                      messageResultDetails: [\r\n                        {\r\n                          keyFields: [\"ReceiptCode\"],\r\n                          keyValues: [this.state.modPipelineReceipt.PipelineReceiptCode],\r\n                          isSuccess: false,\r\n                          errorMessage: \"Enter_Receipt_ReasonForCloseure\",\r\n                        },\r\n                      ],\r\n                    };\r\n\r\n                    toast(\r\n                      <ErrorBoundary>\r\n                        <NotifyEvent\r\n                          notificationMessage={notification}\r\n                        ></NotifyEvent>\r\n                      </ErrorBoundary>,\r\n                      {\r\n                        autoClose:\r\n                          notification.messageType === \"success\"\r\n                            ? 10000\r\n                            : false,\r\n                      }\r\n                    );\r\n                  } else\r\n                    this.setState({ RemarksPopUp: false }, () => {\r\n                      if (this.state.isSubmit)\r\n                        this.handleSubmit();\r\n                      else\r\n                        this.handleReceiptClose();\r\n                    });\r\n                }}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => {\r\n                  this.setState({\r\n                    RemarksPopUp: false,\r\n                    Remarks: \"\",\r\n                  });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n  handleReceiptClose() {\r\n    try {\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"ViewPipelineReceipt_ShipmentClose\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"ReceiptCode\"],\r\n            keyValues: [this.state.modPipelineReceipt.PipelineReceiptCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineReceiptCode,\r\n          value: this.state.modPipelineReceipt.PipelineReceiptCode,\r\n        },\r\n        {\r\n          key: \"Remarks\",\r\n          value: this.state.Remarks,\r\n        },\r\n\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.pipelineReceiptCode,\r\n        KeyCodes: keyCode,\r\n      };\r\n      axios(\r\n        RestAPIs.ClosePipelineReceipt,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n          if (result.IsSuccess === true) {\r\n            this.getPipelineReceipt({ Common_Code: this.state.modPipelineReceipt.PipelineReceiptCode }, 0);\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n            this.setState({\r\n              saveEnabled: dispatchUpdateStates.indexOf(result.EntityResult.PipelineReceiptStatus)\r\n                && Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnPipelineReceipt\r\n                )\r\n            });\r\n            console.log(\"Error in closing the dispatch:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(this.state.pipelineReceipt, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n          this.setState({\r\n            saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineReceipt.PipelineReceiptStatus)\r\n              && Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnPipelineReceipt\r\n              )\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(this.state.pipelineReceipt, \"add\", notification)\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while closing the receipt:\", error);\r\n    }\r\n  }\r\n  getDispatchUpdateStates() {\r\n    var dispatchUpdateStates = [];\r\n    try {\r\n      let dispatchUpdateInfo = this.props.activityInfo.filter((item) => {\r\n        return (\r\n          item.ActivityCode ===\r\n          Constants.ShipmentActivityInfo.PIPELINE_RECEIPT_ENABLE_UPDATE &&\r\n          item.ActionTypeCode === Constants.ActionTypeCode.CHECK\r\n        );\r\n      });\r\n      if (dispatchUpdateInfo !== undefined &&\r\n        dispatchUpdateInfo.length > 0)\r\n        dispatchUpdateStates = dispatchUpdateInfo[0].ShipmentStates;\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in gettingDispatchUpdateStates\", error)\r\n    }\r\n    return dispatchUpdateStates\r\n  }\r\n  getReceiptOperations() {\r\n    try {\r\n      // const activityInfo = lodash.cloneDeep(this.state.activityInfo)\r\n      const receipt = lodash.cloneDeep(this.state.pipelineReceipt);\r\n      let shipmentNextOperations = [];\r\n      if (receipt.PipelineReceiptStatus.toUpperCase() === Constants.PipelineDispatchStatuses.READY ||\r\n        receipt.PipelineReceiptStatus.toUpperCase() === Constants.PipelineDispatchStatuses.PARTIALLY_COMPLETED) {\r\n        shipmentNextOperations.push(\"Authorize_ManualEntry_Update\")\r\n        shipmentNextOperations.push(\"Authorize_Scada_Update\")\r\n      }\r\n      if (receipt.PipelineReceiptStatus.toUpperCase() === Constants.PipelineDispatchStatuses.CLOSED) {\r\n        shipmentNextOperations.push(\"PipelineDispatchList_btnTransactionReport\")\r\n        shipmentNextOperations.push(\"PipelineDispatchList_btnViewTransactionReport\")\r\n      }\r\n      shipmentNextOperations.push(\"PipelineDispatch_BtnAuditTrail\");\r\n      if (receipt.PipelineReceiptStatus.toUpperCase() !== Constants.PipelineDispatchStatuses.CLOSED &&\r\n        receipt.PipelineReceiptStatus.toUpperCase() !== Constants.PipelineDispatchStatuses.READY) {\r\n        shipmentNextOperations.push(\"PipelineDispatch_BtnManualEntry\");\r\n        shipmentNextOperations.push(\"PipelineDispatch_BtnClosed\");\r\n        shipmentNextOperations.push(\"PipelineDispatch_BtnSubmit\");\r\n      }\r\n\r\n      this.setState({ shipmentNextOperations })\r\n    } catch (error) {\r\n      console.log(\"Error in getting receipt Current Operations\")\r\n    }\r\n  }\r\n  UpdatePipelineReceiptRationedQuantities(pipelineSnapShotInfoList) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineReceiptCode,\r\n          value: this.state.pipelineReceipt.PipelineReceiptCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.pipelineReceiptCode,\r\n        KeyCodes: keyCode,\r\n        Entity: pipelineSnapShotInfoList,\r\n      };\r\n\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"PipelineReceiptTransaction_SavedMessage\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"PipelineReceiptDetails_ReceiptCode\"],\r\n            keyValues: [this.state.pipelineReceipt.PipelineReceiptCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.UpdatePipelineReceiptRationedQuantities,\r\n        Utilities.getAuthenticationObjectforPost(obj, this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n\r\n          if (result.IsSuccess === true) {\r\n            this.getPipelineReceipt({ Common_Code: this.state.pipelineReceipt.PipelineReceiptCode });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n            this.setState({\r\n              saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineReceipt.PipelineReceiptStatus)\r\n                && Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.add,\r\n                  fnPipelineReceipt\r\n                ),\r\n            });\r\n            console.log(\"Error in  Update rationed quantities:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(this.state.pipelineReceipt, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n          this.setState({\r\n            saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineReceipt.PipelineReceiptStatus)\r\n              && Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.add,\r\n                fnPipelineReceipt\r\n              ),\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(this.state.pipelineReceipt, \"add\", notification);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"eror in UpdatePipelineReceiptRationedQuantities\", error)\r\n    }\r\n  }\r\n  MarkInvalidPipelineReceiptRecords(pipelineSnapShotInfoList) {\r\n    try {\r\n      var keyCode = [\r\n        {\r\n          key: KeyCodes.pipelineReceiptCode,\r\n          value: this.state.pipelineReceipt.PipelineReceiptCode,\r\n        },\r\n      ];\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.pipelineReceiptCode,\r\n        KeyCodes: keyCode,\r\n        Entity: pipelineSnapShotInfoList,\r\n      };\r\n\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"PipelineReceiptTransaction_SavedMessage\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"PipelineReceiptDetails_ReceiptCode\"],\r\n            keyValues: [this.state.pipelineReceipt.PipelineReceiptCode],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.MarkInvalidPipelineReceiptRecords,\r\n        Utilities.getAuthenticationObjectforPost(obj, this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n\r\n          var result = response.data;\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n\r\n          if (result.IsSuccess === true) {\r\n            this.getPipelineReceipt({ Common_Code: this.state.pipelineReceipt.PipelineReceiptCode });\r\n          } else {\r\n            notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n            let dispatchUpdateStates = this.getDispatchUpdateStates();\r\n            this.setState({\r\n              saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineReceipt.PipelineReceiptStatus)\r\n                && Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.add,\r\n                  fnPipelineReceipt\r\n                ),\r\n            });\r\n            console.log(\"Error in  Update rationed quantities:\", result.ErrorList);\r\n          }\r\n          this.props.onSaved(this.state.pipelineReceipt, \"add\", notification);\r\n        })\r\n        .catch((error) => {\r\n          let dispatchUpdateStates = this.getDispatchUpdateStates()\r\n          this.setState({\r\n            saveEnabled: dispatchUpdateStates.indexOf(this.state.pipelineReceipt.PipelineReceiptStatus)\r\n              && Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.add,\r\n                fnPipelineReceipt\r\n              ),\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(this.state.pipelineReceipt, \"add\", notification);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in MarkInvalidPipelineReceiptRecords\", error)\r\n    }\r\n\r\n  }\r\n  handleCellCheck = (data, cellData) => {\r\n    try {\r\n      let pipelineSnapShotInfo = lodash.cloneDeep(this.state.pipelineSnapShotInfo);\r\n\r\n      const index = pipelineSnapShotInfo.findIndex((item) => {\r\n        return item.SeqNumber === data.rowData.SeqNumber;\r\n      });\r\n      if (index > -1) {\r\n        pipelineSnapShotInfo[index].IsInvalid = cellData;\r\n      }\r\n\r\n      this.setState({ pipelineSnapShotInfo });\r\n    } catch (error) {\r\n      console.log(\"Error in handleCellcheck\", error)\r\n    }\r\n  };\r\n  handleSubmit() {\r\n    try {\r\n      let pipelineSnapShotInfoList = []\r\n      let rationPending = false;\r\n      let pipelineSnapShotInfo = lodash.cloneDeep(this.state.pipelineSnapShotInfo)\r\n\r\n      pipelineSnapShotInfo.forEach((item) => {\r\n        let modPipelineSnapShotInfo = lodash.cloneDeep(emptyPipelineSnapshotInfo);\r\n\r\n        modPipelineSnapShotInfo.Remarks = this.state.Remarks;\r\n\r\n        if (this.state.pipelineReceipt.PipelineReceiptCode !== null &&\r\n          this.state.pipelineReceipt.PipelineReceiptCode !== \"\")\r\n          modPipelineSnapShotInfo.PlanCode = this.state.pipelineReceipt.PipelineReceiptCode\r\n        else\r\n          modPipelineSnapShotInfo.PlanCode = \"\"\r\n\r\n        modPipelineSnapShotInfo.TransactionType = Constants.PipeLineType.RECEIPT;\r\n        modPipelineSnapShotInfo.ShareholderCode = this.props.selectedShareholder;\r\n\r\n\r\n        if (item.PipelineTransactionID !== null && item.PipelineTransactionID !== \"\")\r\n          modPipelineSnapShotInfo.PipelineTransactionID = Utilities.convertStringtoDecimal(item.PipelineTransactionID)\r\n\r\n        if (item.ReceivedGrossQuantity !== null && item.ReceivedGrossQuantity !== \"\")\r\n          modPipelineSnapShotInfo.GrossQuantity = Utilities.convertStringtoDecimal(item.ReceivedGrossQuantity)\r\n\r\n        if (item.ReceivedNetQuantity !== null && item.ReceivedNetQuantity !== \"\")\r\n          modPipelineSnapShotInfo.NetQuantity = Utilities.convertStringtoDecimal(item.ReceivedNetQuantity)\r\n\r\n        if (item.RationPending !== null &&\r\n          item.RationPending.toString().toUpperCase() === \"TRUE\") {\r\n          rationPending = true;\r\n          modPipelineSnapShotInfo.RationPending = true;\r\n        }\r\n\r\n        modPipelineSnapShotInfo.IsInvalid = item.IsInvalid\r\n\r\n        pipelineSnapShotInfoList.push(modPipelineSnapShotInfo);\r\n      })\r\n\r\n      if (pipelineSnapShotInfoList !== null && pipelineSnapShotInfoList.length > 0) {\r\n        if (rationPending)\r\n          this.UpdatePipelineReceiptRationedQuantities(pipelineSnapShotInfoList);\r\n        else\r\n          this.MarkInvalidPipelineReceiptRecords(pipelineSnapShotInfoList);\r\n      }\r\n\r\n    }\r\n    catch (error) {\r\n      console.log(\"PipelineDispatchDetailsComposite : Error in forming Submit request\", error)\r\n    }\r\n  }\r\n  getRefrenceSource() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=PipelineReceipt\",\r\n        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n      )\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult.CustodyTransferReferenceSource === \"0\") {\r\n              this.setState({\r\n                isMeterRequired: true,\r\n                isTankRequired: false\r\n              });\r\n            }\r\n            else {\r\n              this.setState({\r\n                isMeterRequired: false,\r\n                isTankRequired: true\r\n              });\r\n            }\r\n          } else {\r\n            console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            \"PipelineDispatchComposite: Error occurred on getLookUpData\",\r\n            error\r\n          );\r\n        });\r\n    }\r\n    catch (error) {\r\n      console.log(\r\n        \"PipelineDispatchComposite:Error occured on geting RefrenceSourceLookUp Value\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  // getUoms() {\r\n  //   try {\r\n  //     axios(\r\n  //       RestAPIs.GetUOMList,\r\n  //       Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n  //     )\r\n  //       .then((response) => {\r\n  //         var result = response.data;\r\n  //         if (result.IsSuccess === true) {\r\n  //           if (\r\n  //             result.EntityResult !== null &&\r\n  //             Array.isArray(result.EntityResult.VOLUME)\r\n  //           ) {\r\n  //             this.setState({ UOMS: result.EntityResult });\r\n  //           }\r\n  //         } else {\r\n  //           console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n  //         }\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.log(\"Error in GetUOMList:\", error);\r\n  //       });\r\n  //   }\r\n  //   catch (error) {\r\n  //     console.log(\"Error in GetUOMList\", error)\r\n  //   }\r\n  // }\r\n  formReadonlyCompAttributes(attributes, attributeMetaDataList) {\r\n    let compAttributes = [];\r\n    if (\r\n      attributeMetaDataList !== null &&\r\n      attributeMetaDataList !== undefined &&\r\n      attributeMetaDataList.length > 0\r\n    ) {\r\n      attributeMetaDataList.forEach((att) => {\r\n        att.attributeMetaDataList.forEach((attribute) => {\r\n          //if (attribute.TerminalCode)\r\n          compAttributes.push({\r\n            AttributeCode: attribute.Code,\r\n            AttributeName: attribute.DisplayName\r\n              ? attribute.DisplayName\r\n              : attribute.Code,\r\n            AttributeValue: attribute.DefaultValue,\r\n            TerminalCode: attribute.TerminalCode,\r\n            IsMandatory: attribute.IsMandatory,\r\n            DataType: attribute.DataType,\r\n            IsReadonly: attribute.IsReadonly,\r\n            MinValue: attribute.MinValue,\r\n            MaxValue: attribute.MaxValue,\r\n            ValidationFormat: attribute.ValidationFormat,\r\n            compSequenceNo: \"\",\r\n          });\r\n        });\r\n      });\r\n    }\r\n\r\n    if (\r\n      attributes !== null &&\r\n      attributes !== undefined &&\r\n      attributes.length > 0\r\n    ) {\r\n      attributes.forEach((att) => {\r\n        compAttributes.forEach((compAtt) => {\r\n          if (compAtt.TerminalCode === att.TerminalCode) {\r\n            att.ListOfAttributeData.forEach((selAtt) => {\r\n              if (compAtt.AttributeCode === selAtt.AttributeCode)\r\n                compAtt.AttributeValue = selAtt.AttributeValue;\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return compAttributes;\r\n  }\r\n  handleOperationClick = (operation) => {\r\n    let modPipelineReceipt = lodash.cloneDeep(this.state.pipelineReceipt);\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: operation + \"_status\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ReceiptDetail_ReceiptNumber\"],\r\n          keyValues: [modPipelineReceipt.PipelineReceiptCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    switch (operation) {\r\n      case Constants.ViewAllPipelineDispatchOperations.Authorize_ManualEntry_Update:\r\n        this.props.handleAuthorizeToManualEntry(\r\n          modPipelineReceipt,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n              this.getPipelineReceipt({ Common_Code: modPipelineReceipt.PipelineReceiptCode },\r\n                1);\r\n            } else {\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n            }\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          }\r\n        );\r\n        break;\r\n      case Constants.ViewAllPipelineDispatchOperations.Authorize_Scada_Update:\r\n        this.props.handleAuthorizeToUpdateScada(\r\n          modPipelineReceipt,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n              this.getPipelineReceipt({ Common_Code: modPipelineReceipt.PipelineReceiptCode },\r\n                1);\r\n            } else {\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n            }\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          }\r\n        );\r\n        break;\r\n\r\n      case Constants.ViewAllPipelineDispatchOperations.PipelineDispatch_BtnManualEntry:\r\n        this.setState({ isManualEntry: true })\r\n        break;\r\n      case Constants.ViewAllPipelineDispatchOperations.PipelineDispatch_BtnSubmit:\r\n        this.setState({ RemarksPopUp: true, isSubmit: true })\r\n        // this.handleSubmit();\r\n        break;\r\n      case Constants.ViewAllPipelineDispatchOperations.PipelineDispatch_BtnClosed:\r\n        this.setState({ RemarksPopUp: true, isSubmit: false })\r\n        break;\r\n      case Constants.ViewAllPipelineDispatchOperations.PipelineDispatchList_btnViewTransactionReport:\r\n        this.props.handleViewTransaction();\r\n        break;\r\n      case Constants.ViewAllPipelineDispatchOperations.PipelineDispatchList_btnTransactionReport:\r\n        this.props.handlePrintTransaction(\r\n          modPipelineReceipt,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            notification.messageType = result.IsSuccess\r\n              ? \"success\"\r\n              : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (result.IsSuccess === true) {\r\n              this.getPipelineReceipt({ Common_Code: modPipelineReceipt.PipelineReceiptCode },\r\n                1);\r\n            } else {\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n            }\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          }\r\n        );\r\n        break;\r\n\r\n      case Constants.ViewAllPipelineDispatchOperations.PipelineDispatch_BtnAuditTrail:\r\n        this.props.handleViewAuditTrail(\r\n          modPipelineReceipt,\r\n          this.props.selectedShareholder,\r\n          this.props.tokenDetails.tokenInfo,\r\n          (result) => {\r\n            ;\r\n            if (result.IsSuccess === true) {\r\n              let modAuditTrailList = result.EntityResult;\r\n              let attributeMetaDataList = lodash.cloneDeep(\r\n                this.state.viewAuditTrailAttributeMetaDataList\r\n              );\r\n              for (let i = 0; i < modAuditTrailList.length; i++) {\r\n\r\n                let receiptStatus = modAuditTrailList[i].PipelineReceiptStatus.toUpperCase();\r\n                if (receiptStatus === Constants.PipelineReceiptstatus.CLOSED) {\r\n                  receiptStatus = Constants.PipelineReceiptStatus.CLOSED;\r\n                } else if (\r\n                  receiptStatus === Constants.PipelineReceiptstatus.AUTHORIZED\r\n                ) {\r\n                  receiptStatus = Constants.PipelineReceiptStatus.AUTHORIZED;\r\n                } else if (receiptStatus === Constants.PipelineReceiptstatus.READY) {\r\n                  receiptStatus = Constants.PipelineReceiptStatus.READY;\r\n                } else if (\r\n                  receiptStatus === Constants.PipelineReceiptstatus.INPROGRESS\r\n                ) {\r\n                  receiptStatus = Constants.PipelineReceiptStatus.INPROGRESS;\r\n                } else if (\r\n                  receiptStatus === Constants.PipelineReceiptstatus.MANUALLY_COMPLETED\r\n                ) {\r\n                  receiptStatus = Constants.PipelineReceiptStatus.MANUALLY_COMPLETED;\r\n                }\r\n                modAuditTrailList[i].PipelineReceiptstatus = receiptStatus;\r\n                modAuditTrailList[i].UpdatedTime =\r\n                  new Date(\r\n                    modAuditTrailList[i].UpdatedTime\r\n                  ).toLocaleDateString() +\r\n                  \" \" +\r\n                  new Date(\r\n                    modAuditTrailList[i].UpdatedTime\r\n                  ).toLocaleTimeString();\r\n              }\r\n              let auditTrailList = result.EntityResult;\r\n              for (let i = 0; i < auditTrailList.length; i++) {\r\n                auditTrailList[i].AttributesforUI =\r\n                  this.formReadonlyCompAttributes(\r\n                    auditTrailList[i].Attributes,\r\n                    attributeMetaDataList\r\n                  );\r\n              }\r\n              this.setState({\r\n                auditTrailList: result.EntityResult,\r\n                modAuditTrailList: modAuditTrailList,\r\n                isViewAuditTrail: true,\r\n              });\r\n              this.getPipelineReceipt({ Common_Code: modPipelineReceipt.PipelineReceiptCode });\r\n            } else {\r\n              notification.messageType = result.IsSuccess\r\n                ? \"success\"\r\n                : \"critical\";\r\n              notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n              notification.messageResultDetails[0].errorMessage =\r\n                result.ErrorList[0];\r\n              toast(\r\n                <ErrorBoundary>\r\n                  <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                </ErrorBoundary>,\r\n                {\r\n                  autoClose:\r\n                    notification.messageType === \"success\" ? 10000 : false,\r\n                }\r\n              );\r\n            }\r\n          }\r\n        );\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  //Get KPI for Pipeline Receipt\r\n  getKPIList(shareholder, receiptCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      let objKPIRequestData = {\r\n        PageName: KpiPipelineReceiptDetail,\r\n        TransportationType: Constants.TransportationType.PIPELINE,\r\n        InputParameters: [{ key: \"ShareholderCode\", value: shareholder }, { key: \"ReceiptCode\", value: receiptCode }],\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              pipelineReceiptKPIList: result.EntityResult.ListKPIDetails,\r\n            });\r\n          } else {\r\n            this.setState({ pipelineReceiptKPIList: [] });\r\n            console.log(\"Error in truck Receipt KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting truck Receipt KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const dropdownOptions = {\r\n      pipelineHeaderOptions: this.state.pipelineHeaderOptions,\r\n      pipelineHeaderMeterOptions: this.state.pipelineHeaderMeterOptions,\r\n      tankCodeOptions: this.state.tankOptions,\r\n      terminalCodes: this.props.terminalCodes\r\n    };\r\n\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"Receipt_LastUpdated\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modPipelineReceipt.LastUpdatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modPipelineReceipt.LastUpdatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"Receipt_CreatedTime\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modPipelineReceipt.CreatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modPipelineReceipt.CreatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n    ];\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <ErrorBoundary>\r\n              <TMDetailsHeader\r\n                entityCode={\r\n                  this.state.isManualEntry\r\n                    ? this.state.pipelineReceipt.PipelineReceiptCode +\r\n                    \" - \" +\r\n                    t(\"LoadingDetailsEntry_Title\")\r\n                    : this.state.pipelineReceipt.PipelineReceiptCode\r\n                }\r\n                newEntityName=\"Receipt_NewReceiptByCompartment\"\r\n                popUpContents={popUpContents}\r\n              ></TMDetailsHeader>\r\n            </ErrorBoundary>\r\n          )}\r\n        </TranslationConsumer>\r\n        {this.state.isViewAuditTrail ? (\r\n          <ErrorBoundary>\r\n            <PipelineReceiptViewAuditTrailDetails\r\n              ReceiptCode={this.state.modPipelineReceipt.PipelineReceiptCode}\r\n              // selectedRow={this.state.selectedRow}\r\n              auditTrailList={this.state.auditTrailList}\r\n              modAuditTrailList={this.state.modAuditTrailList}\r\n              handleBack={this.onBack}\r\n              Attributes={\r\n                this.state.auditTrailList !== undefined &&\r\n                  this.state.auditTrailList.length > 0\r\n                  ? this.state.auditTrailList[0].AttributesforUI\r\n                  : []\r\n              }\r\n            ></PipelineReceiptViewAuditTrailDetails>\r\n          </ErrorBoundary>\r\n        ) : this.state.isManualEntry ? (\r\n          <div>\r\n            <ErrorBoundary>\r\n              <PipelineReceiptManualEntryDetailsComposite\r\n                receipt={this.state.modPipelineReceipt}\r\n                handleBack={this.onBack}\r\n                selectedShareholder={this.props.selectedShareholder}\r\n                UOMS={this.state.UOMS}\r\n                listOptions={this.state.listOptions}\r\n                isMeterRequired={this.state.isMeterRequired}\r\n                isTankRequired={this.state.isTankRequired}\r\n              ></PipelineReceiptManualEntryDetailsComposite>\r\n            </ErrorBoundary>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <TMDetailsKPILayout KPIList={this.state.pipelineReceiptKPIList}> </TMDetailsKPILayout>\r\n            <div\r\n              className={\r\n                this.state.pipelineReceipt.PipelineReceiptCode !== \"\"\r\n                  ? !this.state.drawerStatus\r\n                    ? \"showShipmentStatusRightPane\"\r\n                    : \"drawerClose\"\r\n                  : \"\"\r\n              }\r\n            >\r\n              <ErrorBoundary>\r\n                <PipelineReceiptDetails\r\n                  pipelineReceipt={this.state.pipelineReceipt}\r\n                  modPipelineReceipt={this.state.modPipelineReceipt}\r\n                  validationErrors={this.state.validationErrors}\r\n                  selectedAssociations={this.state.selectedAssociations}\r\n                  listOptions={this.state.listOptions}\r\n                  dropdownOptions={dropdownOptions}\r\n                  onFieldChange={this.handleChange}\r\n                  handleAssociationSelectionChange={\r\n                    this.handleAssociationSelectionChange\r\n                  }\r\n                  handleCellDataEdit={this.handleCellDataEdit}\r\n                  handleAddAssociation={this.handleAddAssociation}\r\n                  handleDeleteAssociation={this.handleDeleteAssociation}\r\n                  handlePipelineHeaderChange={this.handlePipelineHeaderChange}\r\n                  isEnterpriseNode={\r\n                    this.props.userDetails.EntityResult.IsEnterpriseNode\r\n                  }\r\n                  handleTerminalChange={this.handleTerminalChange}\r\n                  modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n                  attributeValidationErrors={\r\n                    this.state.attributeValidationErrors\r\n                  }\r\n                  onAttributeDataChange={this.handleAttributeDataChange}\r\n                  activeTab={this.state.activeTab}\r\n                  onTabChange={this.handleTabChange}\r\n                  loadingDetails={this.state.loadingDetails}\r\n                  handleCellCheck={this.handleCellCheck}\r\n                  pipelineSnapShotInfo={this.state.pipelineSnapShotInfo}\r\n                  isMeterRequired={this.state.isMeterRequired}\r\n                  isTankRequired={this.state.isTankRequired}\r\n                  loadingDetailsTab={this.state.pipelineReceipt.PipelineReceiptCode !== \"\" ? [\"\"] : []}\r\n                  onDateTextChange={this.handleDateTextChange}\r\n                ></PipelineReceiptDetails>\r\n              </ErrorBoundary>\r\n              <ErrorBoundary>\r\n                <TMDetailsUserActions\r\n                  handleBack={this.props.onBack}\r\n                  handleSave={this.handleSave}\r\n                  handleReset={this.handleReset}\r\n                  saveEnabled={this.state.saveEnabled}\r\n                ></TMDetailsUserActions>\r\n              </ErrorBoundary>\r\n\r\n              {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.pipelineReceipt.PipelineReceiptCode  === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnPipelineReceipt}\r\n            handleOperation={this.addUpdatePipelineReceipt}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n            </div>\r\n\r\n            <div>\r\n              {this.state.pipelineReceipt.PipelineReceiptCode !== \"\" ? (\r\n                <div\r\n                  className={\r\n                    this.state.drawerStatus ? \"marineStatusLeftPane\" : \"\"\r\n                  }\r\n                >\r\n                  <TranslationConsumer>\r\n                    {(t) => (\r\n                      <TransactionSummaryOperations\r\n                        selectedItem={[\r\n                          { Common_Code: this.state.modPipelineReceipt.PipelineReceiptCode },\r\n                        ]}\r\n                        shipmentNextOperations={this.state.shipmentNextOperations}\r\n                        handleOperationButtonClick={this.handleOperationClick}\r\n                        currentStatuses={this.state.currentReceiptStatus}\r\n                        handleDrawer={this.handleDrawer}\r\n                        isDetails={true}\r\n                        isEnterpriseNode={\r\n                          this.props.userDetails.EntityResult.IsEnterpriseNode\r\n                        }\r\n                        webPortalAllowedOperations={[\r\n                          \"PipelineDispatchList_btnViewTransactionReport\",\r\n                          \"PipelineDispatch_BtnAuditTrail\"\r\n                        ]}\r\n                        isWebPortalUser={\r\n                          this.props.userDetails.EntityResult.IsWebPortalUser\r\n                        }\r\n                        unAllowedOperations={[\r\n                          \"Authorize_ManualEntry_Update\",\r\n                          \"Authorize_Scada_Update\",\r\n                          \"PipelineDispatch_BtnManualEntry\",\r\n                          \"PipelineDispatch_BtnClosed\",\r\n                          \"PipelineDispatch_BtnSubmit\"\r\n                        ]}\r\n                      />\r\n                    )}\r\n                  </TranslationConsumer>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n        {this.state.RemarksPopUp ? this.handleCloseReceipttModal() : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nconst mapReceiptToProps = (receipt) => {\r\n  return {\r\n    userActions: bindActionCreators(getUserDetails, receipt),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapReceiptToProps\r\n)(PipelineReceiptDetailsComposite);\r\n\r\nPipelineReceiptDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Button, Modal, Icon, Checkbox } from \"@scuf/common\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport * as wjChart from \"@grapecity/wijmo.react.chart\";\r\nimport * as wjcCore from \"@grapecity/wijmo\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getKeyByValue } from \"../../../JS/Utilities\";\r\nwjcCore.setLicenseKey(Constants.wizmoKey);\r\n\r\nPipelineReceiptViewAuditTrailDetails.propTypes = {\r\n    auditTrailList: PropTypes.array.isRequired,\r\n    handleBack: PropTypes.func.isRequired,\r\n    ReceiptCode: PropTypes.string,\r\n    modAuditTrailList: PropTypes.array.isRequired,\r\n    Attributes: PropTypes.array.isRequired,\r\n};\r\n\r\nPipelineReceiptViewAuditTrailDetails.defaultProps = {};\r\n\r\nexport function PipelineReceiptViewAuditTrailDetails({\r\n    ReceiptCode,\r\n    auditTrailList,\r\n    handleBack,\r\n    modAuditTrailList,\r\n    Attributes\r\n}) {\r\n\r\n    const [modelOpen, setModelOpen] = useState(false);\r\n    const handleAttributeType = (data) => {\r\n        const attribute = data.rowData.AttributesforUI.filter(\r\n            (att) => att.AttributeName === data.name\r\n        )[0];\r\n\r\n        return attribute.DataType.toLowerCase() ===\r\n            Constants.DataType.STRING.toLowerCase() ||\r\n            attribute.DataType.toLowerCase() ===\r\n            Constants.DataType.INT.toLowerCase() ||\r\n            attribute.DataType.toLowerCase() ===\r\n            Constants.DataType.LONG.toLowerCase() ||\r\n            attribute.DataType.toLowerCase() ===\r\n            Constants.DataType.FLOAT.toLowerCase() ? (\r\n            <label>{attribute.AttributeValue}</label>\r\n        ) : attribute.DataType.toLowerCase() ===\r\n            Constants.DataType.BOOL.toLowerCase() ? (\r\n            <Checkbox\r\n                checked={\r\n                    attribute.AttributeValue.toString().toLowerCase() === \"true\"\r\n                        ? true\r\n                        : false\r\n                }\r\n                disabled={true}\r\n            ></Checkbox>\r\n        ) : (\r\n            <label>{new Date(attribute.AttributeValue).toLocaleDateString()}</label>\r\n        );\r\n    };\r\n    const formatter = (engine, label) => {\r\n        try {\r\n            label.cls = null;\r\n            engine.fontSize = \"10px\";\r\n            label.text = getKeyByValue(\r\n                Constants.PipelineReceiptStatus,\r\n                label.val\r\n            );\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in formatter\", error)\r\n        }\r\n        return label;\r\n    };\r\n\r\n\r\n    function displayTMModalforPrintConfirm() {\r\n        return (\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <Modal open={modelOpen} className=\"marineModalPrint\">\r\n                        <Modal.Content>\r\n                            <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                                <div className=\"col col-lg-8\">\r\n                                    <h3>\r\n                                        {t(\"Transaction_AuditTrail_Heading\") +\r\n                                            \" : \" +\r\n                                            ReceiptCode}\r\n                                    </h3>\r\n                                </div>\r\n                                <div className=\"col col-lg-4\" style={{ textAlign: \"right\" }}>\r\n                                    <div\r\n                                        onClick={() => {\r\n                                            setModelOpen(false);\r\n                                        }}\r\n                                    >\r\n                                        <Icon root=\"common\" name=\"close\" />\r\n                                    </div>\r\n                                    {/* <Button\r\n                                        type=\"primary\"\r\n                                        size=\"small\"\r\n                                        content={t(\"MarineEOD_Close\")}\r\n                                        onClick={() => {\r\n                                            setModelOpen(false);\r\n                                        }}\r\n                                    /> */}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-10 container-fluid\">\r\n                                <wjChart.FlexChart\r\n                                    itemsSource={modAuditTrailList}\r\n                                    chartType=\"Line\"\r\n                                    bindingX=\"UpdatedTime\"\r\n                                    palette={[\"blue\"]}\r\n                                    style={{\r\n                                        width: \"100%\",\r\n                                        minWidth: \"1000px\",\r\n                                        height: \"550px\",\r\n                                    }}\r\n                                    plotMargin=\"50 10 155 150 \"\r\n                                >\r\n                                    <wjChart.FlexChartLegend position=\"Bottom\"></wjChart.FlexChartLegend>\r\n                                    <wjChart.FlexChartAxis\r\n                                        wjProperty=\"axisY\"\r\n                                        majorUnit={1}\r\n                                        max={9}\r\n                                        min={0}\r\n                                        itemFormatter={formatter}\r\n                                        axisLine={true}\r\n                                    ></wjChart.FlexChartAxis>\r\n                                    <wjChart.FlexChartSeries\r\n                                        binding=\"PipelineReceiptstatus\"\r\n                                        name={t(\"Receipt_ReceiptStatus\")}\r\n                                    ></wjChart.FlexChartSeries>\r\n                                </wjChart.FlexChart>\r\n                            </div>\r\n                            <div className=\"col-12 detailsTable\">\r\n                                <DataTable data={auditTrailList}>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"PipelineReceiptStatus\"\r\n                                        field=\"PipelineReceiptStatus\"\r\n                                        header={t(\"ViewReceiptAuditTrail_ReceiptStatus\")}\r\n                                        editable={false}\r\n                                        editFieldType=\"text\"\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"UpdatedTime\"\r\n                                        field=\"UpdatedTime\"\r\n                                        header={t(\"ViewAuditTrail_UpdatedTime\")}\r\n                                        editable={false}\r\n                                        editFieldType=\"text\"\r\n                                    // renderer={(cellData) => disPlayValue(cellData)}\r\n                                    ></DataTable.Column>\r\n                                    {Attributes.map((att) => {\r\n                                        return (\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                header={t(att.AttributeName)}\r\n                                                editable={false}\r\n                                                renderer={handleAttributeType}\r\n                                            ></DataTable.Column>\r\n                                        );\r\n                                    })}\r\n                                </DataTable>\r\n                            </div>\r\n                            <Modal.Footer>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    size=\"small\"\r\n                                    content={t(\"ViewAuditTrail_Print\")}\r\n                                    onClick={() => {\r\n                                        let el =\r\n                                            window.document.getElementById(\"printTable\").innerHTML;\r\n                                        const iframe = window.document.createElement(\"IFRAME\");\r\n                                        let doc = null;\r\n                                        window.document.body.appendChild(iframe);\r\n                                        doc = iframe.contentWindow.document;\r\n                                        const str1 = el.substring(0, el.indexOf(\"<table\") + 6);\r\n                                        const str2 = el.substring(\r\n                                            el.indexOf(\"<table\") + 6,\r\n                                            el.length\r\n                                        );\r\n                                        // const str3 =\r\n                                        //     t(\"ViewAuditTrail_ViewAuditTrailForReceipt\") +\r\n                                        //     \" : \" +\r\n                                        //     ReceiptCode;\r\n                                        // el = str3 + str1 + ' border=\"1\" cellspacing=\"0\"' + str2;\r\n                                        el = str1 + ' border=\"1\" cellspacing=\"1\"' + str2;\r\n\r\n                                        // el = el.replace('<tfoot class=\"p-datatable-tfoot\">', \"\");\r\n                                        // el = el.replace(\r\n                                        //     '<tr><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td></tr>',\r\n                                        //     \"\"\r\n                                        // );\r\n                                        doc.write(el);\r\n                                        // console.info(el);\r\n                                        doc.close();\r\n                                        iframe.contentWindow.focus();\r\n                                        iframe.contentWindow.print();\r\n                                        setTimeout(() => {\r\n                                            window.document.body.removeChild(iframe);\r\n                                        }, 2000);\r\n                                    }}\r\n                                />\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    size=\"small\"\r\n                                    content={t(\"MarineEOD_Close\")}\r\n                                    onClick={() => {\r\n                                        setModelOpen(false);\r\n                                    }}\r\n                                />\r\n                            </Modal.Footer>\r\n                        </Modal.Content>\r\n                    </Modal>\r\n                )}\r\n            </TranslationConsumer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <div>\r\n                        <div className=\"detailsContainer\">\r\n                            <div id=\"printTable\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        <h3>\r\n                                            {t(\"Transaction_AuditTrail_Heading\")\r\n                                            }\r\n                                        </h3>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row marginRightZero tableScroll\">\r\n                                    <div className=\"col-12 container-fluid\">\r\n                                        <wjChart.FlexChart\r\n                                            itemsSource={modAuditTrailList}\r\n                                            chartType=\"Line\"\r\n                                            bindingX=\"UpdatedTime\"\r\n                                            palette={[\"blue\"]}\r\n                                            style={{\r\n                                                width: \"100%\",\r\n                                                minWidth: \"1000px\",\r\n                                                height: \"550px\",\r\n                                            }}\r\n                                            plotMargin=\"50 10 155 150 \"\r\n                                        // style={{ width: \"100%\", height: \"450px\" }}\r\n                                        >\r\n                                            <wjChart.FlexChartLegend position=\"Bottom\"></wjChart.FlexChartLegend>\r\n                                            <wjChart.FlexChartAxis\r\n                                                wjProperty=\"axisY\"\r\n                                                majorUnit={1}\r\n                                                max={9}\r\n                                                min={0}\r\n                                                itemFormatter={formatter}\r\n                                                axisLine={true}\r\n                                            ></wjChart.FlexChartAxis>\r\n                                            <wjChart.FlexChartSeries\r\n                                                binding=\"PipelineReceiptstatus\"\r\n                                                name={t(\"Receipt_ReceiptStatus\")}\r\n                                            ></wjChart.FlexChartSeries>\r\n                                        </wjChart.FlexChart>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row marginRightZero tableScroll\">\r\n                                    <div className=\"col-12 detailsTable\">\r\n                                        <DataTable data={auditTrailList} scrollable={true}>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                key=\"PipelineReceiptStatus\"\r\n                                                field=\"PipelineReceiptStatus\"\r\n                                                header={t(\"ViewReceiptAuditTrail_ReceiptStatus\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight colminWidth\"\r\n                                                key=\"UpdatedTime\"\r\n                                                field=\"UpdatedTime\"\r\n                                                header={t(\"ViewAuditTrail_UpdatedTime\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            // renderer={(cellData) => disPlayValue(cellData)}\r\n                                            ></DataTable.Column>\r\n                                            {Attributes.map((att) => {\r\n                                                return (\r\n                                                    <DataTable.Column\r\n                                                        className=\"compColHeight\"\r\n                                                        header={t(att.AttributeName)}\r\n                                                        editable={false}\r\n                                                        renderer={handleAttributeType}\r\n                                                    ></DataTable.Column>\r\n                                                );\r\n                                            })}\r\n                                        </DataTable>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 col-sm-6 col-lg-8\">\r\n                                    <Button\r\n                                        className=\"backButton\"\r\n                                        onClick={handleBack}\r\n                                        content={t(\"Back\")}\r\n                                    ></Button>\r\n                                </div>\r\n                                <div\r\n                                    className=\"col-12 col-sm-6 col-lg-4\"\r\n                                    style={{ textAlign: \"right\" }}\r\n                                >\r\n                                    <Button\r\n                                        className=\"printButton\"\r\n                                        onClick={() => {\r\n                                            setModelOpen(true);\r\n                                        }}\r\n                                        content={t(\"ViewAuditTrail_PrintAuditTrail\")}\r\n                                    ></Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </TranslationConsumer>\r\n            {displayTMModalforPrintConfirm()}\r\n        </div>\r\n    );\r\n}\r\n"],"names":["PipelineReceiptDetails","_ref","pipelineReceipt","modPipelineReceipt","validationErrors","listOptions","onFieldChange","selectedAssociations","handleAssociationSelectionChange","handleCellDataEdit","handleAddAssociation","handleDeleteAssociation","dropdownOptions","handlePipelineHeaderChange","isEnterpriseNode","handleTerminalChange","onAttributeDataChange","modAttributeMetaDataList","attributeValidationErrors","onTabChange","activeTab","loadingDetails","loadingDetailsTab","pipelineSnapShotInfo","handleCellCheck","isMeterRequired","isTankRequired","onDateTextChange","t","useTranslation","handleCustomEditDropDown","cellData","dropDownoptions","_jsx","Select","className","value","PipelineReceiptTanks","rowIndex","field","fluid","options","onChange","indicator","reserveSpace","search","noResultsMessage","handleCustomEditTextBox","Input","handleCustomEditDateSelect","DatePicker","Date","type","displayFormat","getCurrentDateFormat","onTextChange","error","dateDisplayValues","toLocaleDateString","toLocaleTimeString","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","handleCheckBox","data","Checkbox","checked","TranslationConsumer","children","_jsxs","PipelineReceiptCode","disabled","label","placeholder","TerminalCodes","length","Utilities","terminalCodes","SupplierCode","suppliers","OriginTerminalCode","originTerminals","PipelineReceiptStatus","PipelineHeaderCode","pipelineHeaderOptions","PipelineHeaderMeterCode","pipelineHeaderMeterOptions","Quantity","ErrorBoundary","QuantityUOM","multiple","quantityUOM","FinishedProductCode","finishedProducts","ScheduledStartTime","disablePast","ScheduledEndTime","Remarks","map","attire","Accordion","Content","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","Tab","activeIndex","Pane","onClick","Icon","root","name","size","DataTable","selectionMode","selection","onSelectionChange","Column","header","handleIsRequiredCompartmentCell","editable","editFieldType","customEditRenderer","celldata","tankCodeOptions","renderer","toLocaleString","decimalDisplayValues","index","scrollable","scrollHeight","Table2","Table1","defaultProps","PipelineReceiptDetailsComposite","Component","constructor","arguments","state","emptyPipelineReceipt","modAssociations","pipelineReceiptValidationDef","isReadyToRender","this","props","quantityUOMOptions","supplierOptions","originTerminalOptions","finishedProductOptions","tankOptions","saveEnabled","isManualEntry","currentReceiptStatus","drawerStatus","userDetails","EntityResult","IsWebPortalUser","isViewAuditTrail","modAuditTrailList","auditTrailList","RemarksPopUp","UOMS","isSubmit","viewAuditTrailAttributeMetaDataList","shipmentNextOperations","pipelineReceiptKPIList","tempPipelineReceipt","handleAttributeDataChange","attribute","matchedAttributes","lodash","matchedAttributesList","filter","modattribute","Array","isArray","Code","DefaultValue","setState","forEach","console","log","addUpdatePipelineReceipt","createPipelineReceipt","updatePipelineReceipt","handleSave","fillDetails","attributeList","validateSave","convertStringtoDecimal","showAuthenticationLayout","handleReset","Object","keys","key","handleChange","propertyName","setOriginTerminals","supplierOriginTerminalOptions","undefined","e","newVal","handleDateTextChange","findIndex","item","sequenceNo","rowData","IsArchived","newComp","TankCode","PipelineTankMeterCode","PlannedStartTime","PlannedEndTime","push","obj","com","cindex","getPipelineMeter","getTank","getHeaderLineCode","getSupplierOriginTerminals","selectedShareholder","getFinishedProductCodes","handleTabChange","expandedRows","handleDrawer","onBack","dispatchUpdateStates","getDispatchUpdateStates","indexOf","FunctionsList","functionGroups","modify","fnPipelineReceipt","getPipelineReceipt","Common_Code","handleCloseReceipttModal","Modal","open","style","display","flexWrap","Footer","Button","content","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","toast","NotifyEvent","notificationMessage","autoClose","handleSubmit","handleReceiptClose","SeqNumber","IsInvalid","handleOperationClick","operation","Constants","Authorize_ManualEntry_Update","handleAuthorizeToManualEntry","tokenDetails","tokenInfo","result","IsSuccess","ErrorList","Authorize_Scada_Update","handleAuthorizeToUpdateScada","PipelineDispatch_BtnManualEntry","PipelineDispatch_BtnSubmit","PipelineDispatch_BtnClosed","PipelineDispatchList_btnViewTransactionReport","handleViewTransaction","PipelineDispatchList_btnTransactionReport","handlePrintTransaction","PipelineDispatch_BtnAuditTrail","handleViewAuditTrail","i","receiptStatus","toUpperCase","CLOSED","AUTHORIZED","READY","INPROGRESS","MANUALLY_COMPLETED","PipelineReceiptstatus","UpdatedTime","AttributesforUI","formReadonlyCompAttributes","Attributes","handleAuthenticationClose","componentWillReceiveProps","nextProps","selectedRow","isPlanned","componentDidMount","getUoms","getRefrenceSource","getAttributes","IsEnterpriseNode","axios","RestAPIs","then","response","VOLUME","MASS","massUOM","catch","shareholder","product","text","supplierCode","terminalCode","PIPELINE","shareholderSuppliers","shareholderCust","ShareholderCode","SupplierOriginTerminalsList","receiptRow","pipelineReceiptEntity","pipelineReceiptStatusTimeAttributeEntity","PIPELINERECEIPT","PIPELINERECEIPTCHSTATUSTIME","localNodeAttribute","terminalSelectionChange","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","trailerAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","fillAttributeDetails","err","transportationType","PageAttibutes","DefaultQtyUOMForTransactionUI","TransactionMode","add","keyCode","KeyCodes","ShareHolderCode","keyDataCode","code","GetSnapShotsForPlan","getReciptStatuses","getReceiptOperations","getKPIList","setSeconds","parseInt","tankComps","tankCodeList","tankQuantity","compart","includes","pipelineReceiptTankInfoDef","col","validator","displayName","returnValue","values","every","onSaved","PrimaryShareholder","Entity","originTermailList","originTerminal","headerCode","AssociatedMeterCodes","Shareholder","tanks","Table","tank","RECEIPT","remarks","RationPending","toString","ActualEndTime","ActualStartTime","EndGrossVolume","VolumeUOM","EndNetVolume","StartGrossVolume","StartNetVolume","Density","DensityUOM","Temperature","TemperatureUOM","fillTransactionPlanDetails","modTransactiondetails","ViewTransactiondetails","comp","adjustedquantity","ReceivedGrossQuantity","ReceivedNetQuantity","PlannedQuantityUOM","fillTankDetails","modViewTankdetails","ViewTankdetails","fillMeterDetails","modMeterDetails","ViewMeterdetails","MeterCode","StartGrossTotalizer","EndGrossTotalizer","StartNetTotalizer","EndNetTotalizer","dispatchUpdateInfo","activityInfo","ActivityCode","PIPELINE_RECEIPT_ENABLE_UPDATE","ActionTypeCode","CHECK","ShipmentStates","receipt","PARTIALLY_COMPLETED","UpdatePipelineReceiptRationedQuantities","pipelineSnapShotInfoList","MarkInvalidPipelineReceiptRecords","rationPending","modPipelineSnapShotInfo","emptyPipelineSnapshotInfo","PlanCode","TransactionType","PipelineTransactionID","GrossQuantity","NetQuantity","CustodyTransferReferenceSource","attributes","compAttributes","att","AttributeName","DisplayName","IsMandatory","DataType","IsReadonly","MinValue","MaxValue","ValidationFormat","compSequenceNo","compAtt","selAtt","receiptCode","view","fnKPIInformation","objKPIRequestData","PageName","KpiPipelineReceiptDetail","TransportationType","InputParameters","ListKPIDetails","render","popUpContents","fieldName","fieldValue","LastUpdatedTime","CreatedTime","TMDetailsHeader","entityCode","newEntityName","PipelineReceiptViewAuditTrailDetails","ReceiptCode","handleBack","PipelineReceiptManualEntryDetailsComposite","TMDetailsKPILayout","KPIList","TMDetailsUserActions","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","TransactionSummaryOperations","selectedItem","handleOperationButtonClick","currentStatuses","isDetails","webPortalAllowedOperations","isWebPortalUser","unAllowedOperations","LoadingPage","connect","getUserDetails","TokenAuth","userActions","bindActionCreators","modelOpen","setModelOpen","useState","handleAttributeType","toLowerCase","STRING","INT","LONG","FLOAT","BOOL","formatter","engine","cls","fontSize","getKeyByValue","val","id","wjChart","itemsSource","chartType","bindingX","palette","width","minWidth","height","plotMargin","position","wjProperty","majorUnit","max","min","itemFormatter","axisLine","binding","textAlign","el","window","document","getElementById","innerHTML","iframe","createElement","doc","body","appendChild","contentWindow","str1","substring","str2","write","close","focus","print","setTimeout","removeChild","wjcCore"],"sourceRoot":""}