{"version":3,"file":"static/js/9868.219b5ff1.chunk.js","mappings":"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","sources":["Components/UIBase/Details/ReportScheduleDetails.jsx","Components/Composite/Details/ReportScheduleDetailsComposite.jsx","Components/Composite/Summary/ReportScheduleSummaryComposite.jsx","Components/Composite/Entity/ReportScheduleComposite.jsx","JS/DateFieldsInEntities.js","JS/functionalUtilities.js"],"sourcesContent":["import React from \"react\";\r\nimport { Select, Checkbox } from \"@scuf/common\";\r\nimport { Accordion, Input, DatePicker } from \"@scuf/common\";\r\n//import * as Constants from \"./../../../JS/Constants\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\nimport { Loader } from \"@scuf/common\";\r\n\r\nReportScheduleDetails.propTypes = {\r\n  reportScheduleDetails: PropTypes.object.isRequired,\r\n  modreportScheduleDetails: PropTypes.object.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  onReportNameChange: PropTypes.func.isRequired,\r\n  onCheckChange: PropTypes.func.isRequired,\r\n  onPrinterChange: PropTypes.func.isRequired,\r\n  //onReportNameSearchChange: PropTypes.func.isRequired,\r\n  //loadParamDetails: PropTypes.func.isRequired,\r\n  onParamLoad: PropTypes.func.isRequired,\r\n  //renderParam: PropTypes.func.isRequired,\r\n  showReportParams: PropTypes.bool.isRequired,\r\n  parameterLoading: PropTypes.bool.isRequired,\r\n  paramValues: PropTypes.object.isRequired,\r\n  savedparamValues: PropTypes.object.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    reportNames: PropTypes.array,\r\n    printers: PropTypes.array,\r\n  }).isRequired,\r\n};\r\nReportScheduleDetails.defaultProps = {\r\n  listOptions: {\r\n    reportNames: [],\r\n    printers: [],\r\n  },\r\n  isEnterpriseNode: false,\r\n  isWebPortalUser: false,\r\n};\r\n\r\nexport function ReportScheduleDetails({\r\n  reportScheduleDetails,\r\n  modreportScheduleDetails,\r\n  validationErrors,\r\n  listOptions,\r\n  onReportNameChange,\r\n  onPrinterChange,\r\n  isEnterpriseNode,\r\n  isWebPortalUser,\r\n  //onReportNameSearchChange,\r\n  onCheckChange,\r\n  showReportParams,\r\n  onParamLoad,\r\n  paramValues,\r\n  savedparamValues,\r\n  parameterLoading,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div>\r\n          <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  placeholder={t(\"Common_Select\")}\r\n                  label={t(\"ReportSchedule_ReportName\")}\r\n                  value={modreportScheduleDetails.ReportName}\r\n                  options={listOptions.reportNames}\r\n                  onChange={(data) => {\r\n                    //onFieldChange(\"CarrierCode\", data);\r\n                    onReportNameChange(data);\r\n                  }}\r\n                  indicator=\"required\"\r\n                  //error={t(validationErrors.)}\r\n                  error={t(validationErrors.ReportName)}\r\n                  reserveSpace={false}\r\n                  disabled={\r\n                    reportScheduleDetails.ReportName !== \"\" &&\r\n                    reportScheduleDetails.ReportName !== undefined\r\n                  }\r\n                  search={true}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                  // onSearch={onReportNameSearchChange}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={\r\n                    modreportScheduleDetails.ScheduleName === null\r\n                      ? \"\"\r\n                      : modreportScheduleDetails.ScheduleName\r\n                  }\r\n                  label={t(\"ReportSchedules_ScheduleName\")}\r\n                  disabled={true}\r\n                  indicator=\"required\"\r\n                  //onChange={(data) => onFieldChange(\"License1\", data)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-12 col-md-6 col-lg-4 checkboxSelect\">\r\n                <Checkbox\r\n                  className=\"LabelEnabled\"\r\n                  label={t(\"ReportSchedules_IsEOS\")}\r\n                  checked={modreportScheduleDetails.IsEOS}\r\n                  onChange={(eoschecked) => {\r\n                    onCheckChange(\"IsEOS\", eoschecked);\r\n                  }}\r\n                  disabled={false}\r\n                />\r\n                <Checkbox\r\n                  className=\"LabelEnabled\"\r\n                  label={t(\"ReportSchedules_IsEOD\")}\r\n                  checked={modreportScheduleDetails.IsEOD}\r\n                  onChange={(eodchecked) => {\r\n                    onCheckChange(\"IsEOD\", eodchecked);\r\n                  }}\r\n                  disabled={false}\r\n                />\r\n                <Checkbox\r\n                  className=\"LabelEnabled\"\r\n                  label={t(\"ReportSchedules_IsMonthly\")}\r\n                  checked={modreportScheduleDetails.IsMonthly}\r\n                  onChange={(isMonthlychecked) => {\r\n                    onCheckChange(\"IsMonthly\", isMonthlychecked);\r\n                  }}\r\n                  disabled={false}\r\n                />\r\n                <Checkbox\r\n                  className=\"LabelEnabled\"\r\n                  label={t(\"ReportSchedules_IsWeekly\")}\r\n                  checked={modreportScheduleDetails.IsWeekly}\r\n                  onChange={(isWeeklychecked) => {\r\n                    onCheckChange(\"IsWeekly\", isWeeklychecked);\r\n                  }}\r\n                  disabled={false}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <table width=\"100%\">\r\n                  <tbody>\r\n                    {\" \"}\r\n                    <tr width=\"100%\">\r\n                      <td width=\"100%\" valign=\"top\">\r\n                        <Checkbox\r\n                          className=\"LabelEnabled\"\r\n                          label={t(\"ReportSchedule_IsPrint\")}\r\n                          checked={modreportScheduleDetails.IsPrint}\r\n                          onChange={(isPrint) => {\r\n                            onCheckChange(\"IsPrint\", isPrint);\r\n                          }}\r\n                          disabled={false}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      {\" \"}\r\n                      <td width=\"100%\">\r\n                        <Select\r\n                          fluid\r\n                          placeholder=\"Select\"\r\n                          value={\r\n                            modreportScheduleDetails.Printer === undefined ||\r\n                            modreportScheduleDetails.Printer === \"\" ||\r\n                            !modreportScheduleDetails.IsPrint\r\n                              ? []\r\n                              : Utilities.transferCommaStringtoOptions(\r\n                                  modreportScheduleDetails.Printer\r\n                                )\r\n                          }\r\n                          disabled={!modreportScheduleDetails.IsPrint}\r\n                          //label={t(\"ReportSchedule_Printer\")}\r\n                          indicator={\r\n                            modreportScheduleDetails.IsPrint ? \"required\" : \"\"\r\n                          }\r\n                          options={Utilities.transferListtoOptions(\r\n                            listOptions.printerList\r\n                          )}\r\n                          onChange={(data) => onPrinterChange(data)}\r\n                          error={t(validationErrors.Printer)}\r\n                          //disabled={listOptions.printers.length === 0}\r\n                          multiple={true}\r\n                          reserveSpace={false}\r\n                          search={true}\r\n                          noResultsMessage={t(\"noResultsMessage\")}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n\r\n                <div className=\"col-12 col-md-6 col-lg-4\"></div>\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\"> </div>\r\n            </div>\r\n          </div>\r\n          {parameterLoading ? (\r\n            <div className={`authLoading parameterLoader`}>\r\n              <Loader\r\n                text=\" \"\r\n                className={`globalLoaderPositionPosition`}\r\n              ></Loader>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n\r\n          {showReportParams ? (\r\n            <div className=\"detailsContainer\">\r\n              <div className=\"row\">{onParamLoad()}</div>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { ReportScheduleDetails } from \"../../UIBase/Details/ReportScheduleDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { emptyReportSchedule } from \"../../../JS/DefaultEntities\";\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport dayjs from \"dayjs\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Select, DatePicker, Input } from \"@scuf/common\";\r\nimport { reportScheduleValidationDef } from \"../../../JS/ValidationDef\";\r\nimport {\r\n  functionGroups,\r\n  fnReportConfiguration,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport lodash from \"lodash\";\r\nimport * as DateFieldsInEntities from \"../../../JS/DateFieldsInEntities\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\nclass ReportScheduleDetailsComposite extends Component {\r\n  state = {\r\n    reportScheduleDetails: {},\r\n    modreportScheduleDetails: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      reportScheduleValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    //listOptions: { carriers: [], languageOptions: [], terminalCodes: [] },\r\n    saveEnabled: false,\r\n    entityType: \"reportSchedule\",\r\n    printerList: [],\r\n    reportNames: [],\r\n    selectedShareholer: this.props.selectedShareholder,\r\n    showReportParams: false,\r\n    parameters: [],\r\n    displayParameters: [],\r\n    paramValues: {},\r\n    savedparamValues: {},\r\n    paramOptions: {},\r\n    disabledParams: {},\r\n    listLoading: true,\r\n    parameterLoading: false,\r\n    showAuthenticationLayout: false,\r\n    tempReportScheduleDetails: {},\r\n\r\n  };\r\n  componentDidMount() {\r\n    try {\r\n      // this.setState({ isReadyToRender: true });\r\n      let isNew = false;\r\n      if (this.props.selectedRow.ReportSchedules_ReportName === undefined)\r\n        isNew = true;\r\n      this.getReportSchedule(isNew);\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportScheduleDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.reportScheduleDetails.ReportName !== \"\" &&\r\n        nextProps.selectedRow.ReportSchedules_ReportName === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getReportSchedule(true);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportScheduleDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  validateParams = (paramValues) => {\r\n    let cloneValidationErrors = { ...this.state.validationErrors };\r\n    let cloneModreportScheduleDetails = {\r\n      ...this.state.modreportScheduleDetails,\r\n    };\r\n    if (\r\n      cloneModreportScheduleDetails.IsPrint &&\r\n      (cloneModreportScheduleDetails.Printer === undefined ||\r\n        cloneModreportScheduleDetails.Printer === null ||\r\n        cloneModreportScheduleDetails.Printer === \"\")\r\n    ) {\r\n      cloneValidationErrors[\"Printer\"] = \"ReportSchedule_PrinterRequired\";\r\n    } else {\r\n      cloneValidationErrors[\"Printer\"] = \"\";\r\n    }\r\n    if (\r\n      cloneModreportScheduleDetails.ReportName === \"\" ||\r\n      cloneModreportScheduleDetails.ReportName == null\r\n    ) {\r\n      cloneValidationErrors[\"ReportName\"] = \"ReportSchedule_ReportNameRequired\";\r\n    }\r\n    let validationDef = this.validationDef;\r\n    if (validationDef !== undefined && validationDef != null) {\r\n      Object.keys(validationDef).forEach(function (key) {\r\n        if (paramValues[key] !== undefined)\r\n          cloneValidationErrors[key] = Utilities.validateField(\r\n            validationDef[key],\r\n            paramValues[key]\r\n          );\r\n      });\r\n    }\r\n\r\n    this.setState({ validationErrors: cloneValidationErrors });\r\n    let returnValue = Object.values(cloneValidationErrors).every(function (\r\n      value\r\n    ) {\r\n      return value === \"\";\r\n    });\r\n\r\n    return returnValue;\r\n  };\r\n\r\n  getReportSchedule(isNew) {\r\n    this.getReportNames(isNew);\r\n    this.getPrintersNames();\r\n    let modreportScheduleDetails;\r\n\r\n    if (isNew) {\r\n      this.setState({\r\n        reportScheduleDetails: lodash.cloneDeep(emptyReportSchedule),\r\n        modreportScheduleDetails: lodash.cloneDeep(emptyReportSchedule),\r\n        showReportParams: false,\r\n        parameters: [],\r\n        displayParameters: [],\r\n        paramValues: {},\r\n        savedparamValues: {},\r\n        paramOptions: {},\r\n        disabledParams: {},\r\n        isReadyToRender: true,\r\n        saveEnabled: Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          fnReportConfiguration\r\n        ),\r\n      });\r\n\r\n      return;\r\n    } else {\r\n      modreportScheduleDetails = this.state.modreportScheduleDetails;\r\n      if (\r\n        modreportScheduleDetails.ShareholderCode === undefined ||\r\n        modreportScheduleDetails.ShareholderCode === null ||\r\n        modreportScheduleDetails.ShareholderCode === \"\"\r\n      )\r\n        modreportScheduleDetails.ShareholderCode =\r\n          this.props.selectedShareholder;\r\n      if (\r\n        modreportScheduleDetails.ReportName === undefined ||\r\n        modreportScheduleDetails.ReportName === null ||\r\n        modreportScheduleDetails.ReportName === \"\"\r\n      )\r\n        modreportScheduleDetails.ReportName =\r\n          this.props.selectedRow.ReportSchedules_ReportName;\r\n    }\r\n    axios(\r\n      RestAPIs.GetReportScheduleDetails +\r\n      \"?ShareholderCode=\" +\r\n      modreportScheduleDetails.ShareholderCode +\r\n      \"&ReportName=\" +\r\n      modreportScheduleDetails.ReportName,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          //fill all the values of various params\r\n          this.getReportParams(\r\n            result.EntityResult.ReportName,\r\n            result.EntityResult.ParamData\r\n          );\r\n          this.FillParamValuesFromDetails(result.EntityResult.ParamData);\r\n          this.setState({\r\n            isReadyToRender: true,\r\n            reportScheduleDetails: result.EntityResult,\r\n            modreportScheduleDetails: lodash.cloneDeep(result.EntityResult),\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnReportConfiguration\r\n            ),\r\n          });\r\n        } else {\r\n          this.setState({\r\n            modreportScheduleDetails: lodash.cloneDeep(emptyReportSchedule),\r\n            reportScheduleDetails: lodash.cloneDeep(emptyReportSchedule),\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in GetReportScheduleDetails:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting report schedule:\", error);\r\n      });\r\n  }\r\n\r\n  getReportParams = (report, passedParamdata) => {\r\n    axios(\r\n      RestAPIs.GetReportParams + \"?ReportName=\" + report,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        if (response.data.IsSuccess) {\r\n          let params = response.data.EntityResult.Parameters;\r\n          let cloneDisplayParams = response.data.EntityResult.Parameters;\r\n          this.paramTables = response.data.EntityResult.ReportsData;\r\n          let cloneParamOptions = lodash.cloneDeep(this.state.paramOptions);\r\n          let cloneDisabledParams = lodash.cloneDeep(this.state.disabledParams);\r\n          let cloneParamValues = {\r\n            Culture: this.props.userDetails.EntityResult.UICulture,\r\n          };\r\n\r\n          this.validationDef = {};\r\n          this.reportName = response.data.EntityResult.ReportName;\r\n          if (response.data.EntityResult.UserName !== undefined && response.data.EntityResult.UserName !== null) {\r\n            cloneParamValues[\"UserName\"] = response.data.EntityResult.UserName;\r\n          }\r\n\r\n\r\n          if (params !== undefined && params !== null) {\r\n            for (let j = 0; j < params.length; ++j) {\r\n              if (params[j].ControlType === \"DateTime\") {\r\n                cloneDisplayParams = cloneDisplayParams.filter(\r\n                  (obj) => obj.ParamName !== params[j].ParamName\r\n                );\r\n              } else if (\r\n                !this.props.userDetails.EntityResult.IsEnterpriseNode &&\r\n                params[j].IsOnlyForEnterprise\r\n              ) {\r\n                cloneDisplayParams = cloneDisplayParams.filter(\r\n                  (obj) => obj.ParamName !== params[j].ParamName\r\n                );\r\n              } else if (params[j].ParamName === \"Shareholder\") {\r\n                cloneDisplayParams = cloneDisplayParams.filter(\r\n                  (obj) => obj.ParamName !== params[j].ParamName\r\n                );\r\n              }\r\n            }\r\n            for (let i = 0; i < params.length; ++i) {\r\n              if (params[i].ControlType === \"DropDownList\") {\r\n                this.validationDef[params[i].ParamName] = [];\r\n                if (params[i].Required === true) {\r\n                  this.validationDef[params[i].ParamName].push({\r\n                    minLength: 1,\r\n                    errorCode: \"Select_Value\",\r\n                  });\r\n                }\r\n                if (\r\n                  params[i].DependentControls === null ||\r\n                  params[i].DependentControls.length === 0 ||\r\n                  (params[i].DependentControls.length === 1 &&\r\n                    params[i].DependentControls[0] === \"Shareholder\") ||\r\n                  (params[i].DependentControls.length === 1 &&\r\n                    params[i].DependentControls[0] === \"Terminal\" &&\r\n                    !this.props.userDetails.EntityResult.IsEnterpriseNode)\r\n                ) {\r\n                  let tableName = params[i].TableName;\r\n                  let fieldName = params[i].FieldName;\r\n                  let list = this.paramTables[tableName];\r\n                  let optionsSet = new Set(list.map((row) => row[fieldName]));\r\n                  optionsSet = [...optionsSet];\r\n                  let optionsValues = Utilities.transferListtoOptions(optionsSet);\r\n\r\n                  cloneParamValues[params[i].ParamName] = null;\r\n\r\n                  if (!params[i].IsOnlyForEnterprise && !params[i].Required) {\r\n                    optionsValues.unshift({ text: \"All\", value: \"0\" });\r\n                    cloneParamValues[params[i].ParamName] = 0;\r\n                  }\r\n                  cloneParamOptions[params[i].ParamName] = optionsValues;\r\n                  cloneDisabledParams[params[i].ParamName] = false;\r\n                } else {\r\n                  let optionsValues = [{ text: \"All\", value: \"0\" }];\r\n                  cloneParamOptions[params[i].ParamName] = optionsValues;\r\n                  cloneDisabledParams[params[i].ParamName] = true;\r\n                  cloneParamValues[params[i].ParamName] = 0;\r\n                  if (!params[i].IsOnlyForEnterprise && !params[i].Required) {\r\n                    optionsValues.unshift({ text: \"All\", value: \"0\" });\r\n                    cloneParamValues[params[i].ParamName] = 0;\r\n                  }\r\n                }\r\n              } else if (params[i].ControlType === \"DateTime\") {\r\n                //this.validationDef[params[i].ParamName] = [];\r\n                if (params[i].Required === true) {\r\n                  let def = [\r\n                    { minLength: 1, errorCode: \"Select_Date\" },\r\n                    { isDate: true, errorCode: \"Valid_Date\" },\r\n                  ];\r\n\r\n                  this.validationDef[params[i].ParamName] = def;\r\n                }\r\n                cloneParamValues[params[i].ParamName] = null;\r\n              } else if (params[i].ControlType === \"Date\") {\r\n                //this.validationDef[params[i].ParamName] = [];\r\n                if (params[i].Required === true) {\r\n                  let def = [\r\n                    { minLength: 1, errorCode: \"Select_Date\" },\r\n                    { isDate: true, errorCode: \"Valid_Date\" },\r\n                  ];\r\n\r\n                  this.validationDef[params[i].ParamName] = def;\r\n                }\r\n                cloneParamValues[params[i].ParamName] = null;\r\n              } else if (params[i].ControlType === \"Text\") {\r\n                if (params[i].Required === true) {\r\n                  const codeExpression = \"^[0-9a-zA-Z-_]+$\";\r\n                  const codeError = \"Code_ValidInputCharacters\";\r\n                  let def = [\r\n                    { minLength: 1, errorCode: \"Mandatory_Field\" },\r\n                    { expression: codeExpression, errorCode: codeError },\r\n                  ];\r\n\r\n                  this.validationDef[params[i].ParamName] = def;\r\n                }\r\n                cloneParamValues[params[i].ParamName] = null;\r\n              }\r\n            }\r\n            if (\r\n              !this.props.userDetails.EntityResult.IsEnterpriseNode &&\r\n              cloneParamValues !== undefined &&\r\n              cloneParamValues !== null &&\r\n              cloneParamOptions.Terminal !== undefined &&\r\n              cloneParamOptions.Terminal !== null\r\n            ) {\r\n              cloneParamValues.Terminal = cloneParamOptions.Terminal[0].value;\r\n            }\r\n            if (\r\n              cloneParamValues !== undefined &&\r\n              cloneParamValues !== null &&\r\n              (cloneParamOptions.Shareholder !== undefined &&\r\n                cloneParamOptions.Shareholder !== null)\r\n            ) {\r\n              cloneParamValues.Shareholder = this.props.selectedShareholder;\r\n            }\r\n\r\n            let paramDatefields = params.filter(\r\n              (ob) => ob.ControlType === \"DateTime\" || ob.ControlType === \"Date\"\r\n            );\r\n            if (\r\n              paramDatefields !== undefined &&\r\n              paramDatefields !== null &&\r\n              paramDatefields.length > 0\r\n            ) {\r\n              for (let i = 0; i < paramDatefields.length; ++i) {\r\n                cloneParamValues[paramDatefields[i].ParamName] = dayjs(\r\n                  new Date()\r\n                ).format(\"YYYY-MM-DD\");\r\n              }\r\n            }\r\n\r\n            if (\r\n              passedParamdata === undefined ||\r\n              passedParamdata === null ||\r\n              passedParamdata === \"\"\r\n            ) {\r\n              this.setState({\r\n                parameters: [...response.data.EntityResult.Parameters],\r\n                paramOptions: cloneParamOptions,\r\n                disabledParams: cloneDisabledParams,\r\n                paramValues: cloneParamValues,\r\n                showReportParams: true, //trying\r\n                validationErrors: Utilities.getInitialValidationErrors(\r\n                  this.validationDef\r\n                ),\r\n                parameterLoading: false,\r\n                displayParameters: cloneDisplayParams,\r\n              });\r\n            } else {\r\n              this.setState({\r\n                parameters: [...response.data.EntityResult.Parameters],\r\n                paramOptions: cloneParamOptions,\r\n                disabledParams: cloneDisabledParams,\r\n                showReportParams: true, //trying\r\n                validationErrors: Utilities.getInitialValidationErrors(\r\n                  this.validationDef\r\n                ),\r\n                parameterLoading: false,\r\n                displayParameters: cloneDisplayParams,\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          console.log(\"Get Report Params error:\", response.data.ErrorList);\r\n          this.setState({ parameterLoading: false, showReportParams: false });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error occured on get report params\", err);\r\n        this.setState({ parameterLoading: false, showReportParams: false });\r\n      });\r\n  };\r\n  handleReportChange = (reportName) => {\r\n    try {\r\n      this.setState({ parameterLoading: true });\r\n      let modreportScheduleDetails = this.state.modreportScheduleDetails;\r\n      modreportScheduleDetails.ReportName = reportName;\r\n      modreportScheduleDetails.ScheduleName =\r\n        reportName + this.props.selectedShareholder;\r\n      this.setState({ modreportScheduleDetails: modreportScheduleDetails });\r\n      this.getReportParams(reportName, null);\r\n      this.buildReportParams();\r\n      // let returnValue = Object.values(this.state.validationErrors).every(\r\n      //   function (value) {\r\n      //     return value === \"\";\r\n      //   }\r\n      // );\r\n      // if (returnValue) {\r\n      //   this.getReportParams(reportName);\r\n      //   this.buildReportParams();\r\n      // }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportsComposite: Error occured onhandleShowReportClick\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handlePrinterChange = (printers) => {\r\n    try {\r\n      const modreportScheduleDetails = lodash.cloneDeep(\r\n        this.state.modreportScheduleDetails\r\n      );\r\n      modreportScheduleDetails.Printer = printers.join(\",\");\r\n      this.setState({ modreportScheduleDetails: modreportScheduleDetails });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportScheduleDetailsComposite:Error occured on handlePrinterChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleCheckChange = (propertyName, value) => {\r\n    try {\r\n      const modreportScheduleDetails = lodash.cloneDeep(\r\n        this.state.modreportScheduleDetails\r\n      );\r\n      modreportScheduleDetails[propertyName] = value;\r\n      if (propertyName === \"IsPrint\" && !value) {\r\n        modreportScheduleDetails[\"Printer\"] = \"\";\r\n      }\r\n      this.setState({ modreportScheduleDetails: modreportScheduleDetails });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportScheduleDetailsComposite:Error occured on handleCheckChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  buildReportParams = () => {\r\n    let isSavedReportSchedule = false;\r\n    if (\r\n      this.state.savedparamValues !== \"\" &&\r\n      this.state.savedparamValues !== undefined\r\n    ) {\r\n      isSavedReportSchedule = true;\r\n    }\r\n    return this.state.displayParameters.map((parameter) => {\r\n      if (parameter.ControlType === \"DropDownList\") {\r\n        return (\r\n          <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <Select\r\n                  fluid\r\n                  placeholder={t(\"FinishedProductInfo_Select\")}\r\n                  indicator={parameter.Required ? \"required\" : \"\"}\r\n                  label={t(parameter.LocalisedParamName)}\r\n                  value={\r\n                    !isSavedReportSchedule &&\r\n                      (this.state.paramValues[parameter.ParamName] ===\r\n                        undefined ||\r\n                        this.state.paramValues[parameter.ParamName] === null)\r\n                      ? \"\"\r\n                      : isSavedReportSchedule\r\n                        ? this.state.savedparamValues[parameter.ParamName]\r\n                        : this.state.paramValues[parameter.ParamName]\r\n                  }\r\n                  disabled={this.state.disabledParams[parameter.ParamName]}\r\n                  options={this.state.paramOptions[parameter.ParamName]}\r\n                  onChange={(data) => this.onDropDownChange(data, parameter)}\r\n                  error={t(this.state.validationErrors[parameter.ParamName])}\r\n                  reserveSpace={false}\r\n                />\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        );\r\n      } else if (parameter.ControlType === \"DateTime\") {\r\n        return \"\";\r\n        // return (\r\n        //   <div className=\"col-12 col-md-6 col-lg-4\">\r\n        //     <TranslationConsumer>\r\n        //       {(t) => (\r\n        //         <DatePicker\r\n        //           fluid\r\n        //           //value={modCarrier.PermitExpiryDate.toISOString()}\r\n        //           value={\r\n        //             !isSavedReportSchedule &&\r\n        //             this.state.paramValues[parameter.ParamName] === null\r\n        //               ? new Date()\r\n        //               : isSavedReportSchedule\r\n        //               ? new Date(\r\n        //                   this.state.savedparamValues[parameter.ParamName]\r\n        //                 )\r\n        //               : new Date(this.state.paramValues[parameter.ParamName])\r\n        //           }\r\n        //           displayFormat={getCurrentDateFormat()}\r\n        //           label={t(parameter.LocalisedParamName)}\r\n        //           showYearSelector=\"true\"\r\n        //           //indicator={parameter.Required ? \"required\" : \"\"}\r\n        //           // onChange={(data) =>\r\n        //           //   this.onFieldChange(parameter.ParamName, data.toISOString())\r\n        //           // }\r\n        //           // onTextChange={(value, error) => {\r\n        //           //   this.onDateTextChange(parameter.ParamName, value, error);\r\n        //           // }}\r\n        //           // error={t(this.state.validationErrors[parameter.ParamName])}\r\n        //           // reserveSpace={false}\r\n        //         />\r\n        //       )}\r\n\r\n        //     </TranslationConsumer>\r\n        //   </div>\r\n        // );\r\n      } else if (parameter.ControlType === \"Text\") {\r\n        return (\r\n          <div className=\"col-12 col-md-6 col-lg-4\">\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <Input\r\n                  fluid\r\n                  value={\r\n                    !isSavedReportSchedule &&\r\n                      this.state.paramValues[parameter.ParamName] === null\r\n                      ? \"\"\r\n                      : isSavedReportSchedule\r\n                        ? this.state.savedparamValues[parameter.ParamName]\r\n                        : this.state.paramValues[parameter.ParamName]\r\n                  }\r\n                  onChange={(data) =>\r\n                    this.onFieldChange(parameter.ParamName, data)\r\n                  }\r\n                  label={t(parameter.LocalisedParamName)}\r\n                  error={t(this.state.validationErrors[parameter.ParamName])}\r\n                  reserveSpace={false}\r\n                />\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n  };\r\n  onFieldChange = (ParamName, date) => {\r\n    let cloneParamValues = lodash.cloneDeep(this.state.paramValues);\r\n    let cloneValidationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    cloneParamValues[ParamName] = date;\r\n\r\n    if (this.validationDef[ParamName] !== undefined) {\r\n      cloneValidationErrors[ParamName] = Utilities.validateField(\r\n        this.validationDef[ParamName],\r\n        date\r\n      );\r\n    }\r\n\r\n    this.setState({\r\n      paramValues: cloneParamValues,\r\n      validationErrors: cloneValidationErrors,\r\n    });\r\n  };\r\n\r\n  onDateTextChange = (ParamName, value, error) => {\r\n    let cloneParamValues = lodash.cloneDeep(this.state.paramValues);\r\n    let cloneValidationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n\r\n    cloneValidationErrors[ParamName] = error;\r\n    cloneParamValues[ParamName] = value;\r\n\r\n    this.setState({\r\n      paramValues: cloneParamValues,\r\n      validationErrors: cloneValidationErrors,\r\n    });\r\n  };\r\n  onDropDownChange = (data, parameter) => {\r\n    let cloneParamValues = lodash.cloneDeep(this.state.paramValues);\r\n    let cloneDisabledParams = lodash.cloneDeep(this.state.disabledParams);\r\n    let cloneParamOptions = lodash.cloneDeep(this.state.paramOptions);\r\n    let cloneValidationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    if (data !== undefined && data !== null) {\r\n      cloneParamValues[parameter.ParamName] = data;\r\n      if (this.validationDef[parameter.ParamName] !== undefined) {\r\n        cloneValidationErrors[parameter.ParamName] = Utilities.validateField(\r\n          this.validationDef[parameter.ParamName],\r\n          data\r\n        );\r\n      }\r\n\r\n      let refreshControls = parameter.RefreshControls;\r\n\r\n      for (let i = 0; i < refreshControls.length; ++i) {\r\n        cloneDisabledParams[refreshControls[i]] = false;\r\n        let refreshParameter = this.state.parameters.find(\r\n          ({ ParamName }) => ParamName === refreshControls[i]\r\n        );\r\n\r\n        let paramTable = this.paramTables[refreshParameter.TableName];\r\n        let dependentControls = refreshParameter.DependentControls;\r\n        for (let j = 0; j < dependentControls.length; ++j) {\r\n          let dependantParam = this.state.parameters.find(\r\n            ({ ParamName }) => ParamName === dependentControls[j]\r\n          );\r\n\r\n          paramTable = paramTable.filter(\r\n            (obj) =>\r\n              obj[dependantParam.FieldName] ===\r\n              cloneParamValues[dependentControls[j]]\r\n          );\r\n        }\r\n\r\n        let optionsSet = new Set(\r\n          paramTable.map((row) => row[refreshParameter.FieldName])\r\n        );\r\n        optionsSet = [...optionsSet];\r\n\r\n        let optionsValues = Utilities.transferListtoOptions(optionsSet);\r\n        optionsValues.unshift({ text: \"All\", value: \"0\" });\r\n        cloneParamOptions[refreshParameter.ParamName] = optionsValues;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      paramValues: cloneParamValues,\r\n      //tocheck\r\n      savedparamValues: cloneParamValues,\r\n      disabledParams: cloneDisabledParams,\r\n      paramOptions: cloneParamOptions,\r\n      validationErrors: cloneValidationErrors,\r\n    });\r\n  };\r\n\r\n\r\n  AddUpdateReportConfig = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      this.handleAuthenticationClose();\r\n\r\n      let tempReportScheduleDetails = lodash.cloneDeep(this.state.tempReportScheduleDetails);\r\n\r\n      tempReportScheduleDetails = this.FillParams(tempReportScheduleDetails);\r\n     \r\n      this.state.reportScheduleDetails.ReportName === \"\"\r\n        ? this.CreateReportSchedule(tempReportScheduleDetails)\r\n        : this.UpdateReportSchedule(tempReportScheduleDetails);\r\n\r\n    } catch (error) {\r\n      console.log(\"Report config Composite : Error in AddUpdateReportConfig\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n     // this.setState({ saveEnabled: false });\r\n      //let modDriver = this.fillAttributeDetails();\r\n      let modreportScheduleDetails = lodash.cloneDeep(\r\n        this.state.modreportScheduleDetails\r\n      );\r\n      if (this.validateParams(this.state.paramValues)) {\r\n       \r\n        let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      let tempReportScheduleDetails = lodash.cloneDeep(modreportScheduleDetails);\r\n      this.setState({ showAuthenticationLayout, tempReportScheduleDetails }, () => {\r\n        if (showAuthenticationLayout === false) {\r\n          this.AddUpdateReportConfig();\r\n        }\r\n    });\r\n\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportScheduleDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  FillParamValuesFromDetails(ParamData) {\r\n    try {\r\n      let savedparamValues = {};\r\n      if (\r\n        ParamData !== undefined &&\r\n        ParamData !== \"\" &&\r\n        ParamData.split(\",\").length > 2\r\n      ) {\r\n        let paramSavedValues = ParamData.split(\",\");\r\n        paramSavedValues.pop();\r\n        //for (let i = 0; i < (paramSavedValues.length - 1) / 2; i = i + 2) {\r\n        for (let i = 0; i < paramSavedValues.length - 1; i = i + 2) {\r\n          // if (paramSavedValues[i] !== \"Culture\") {\r\n          //   savedparamValues[paramSavedValues[i]] = paramSavedValues[i + 1];\r\n          // }\r\n          savedparamValues[paramSavedValues[i]] = paramSavedValues[i + 1];\r\n        }\r\n        this.setState(\r\n          { savedparamValues: savedparamValues, paramValues: savedparamValues },\r\n          () => {\r\n            this.setState({ showReportParams: true });\r\n            this.buildReportParams();\r\n          }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportScheduleDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  FillParams(modreportScheduleDetails) {\r\n    let paramKeys = Object.keys(this.state.paramValues);\r\n    // if (\r\n    //   this.state.savedparamValues !== null &&\r\n    //   this.state.savedparamValues !== undefined &&\r\n    //   this.state.savedparamValues !== \"\"\r\n    // ) {\r\n    //   paramKeys = Object.keys(this.state.savedparamValues);\r\n    // }\r\n\r\n    // let reportParams = [];\r\n    let reportParams = \"\";\r\n    for (let i = 0; i < paramKeys.length; ++i) {\r\n      //reportParams.push(paramKeys[i]);\r\n      //reportParams.push(this.state.paramValues[paramKeys[i]]);\r\n      reportParams =\r\n        reportParams +\r\n        paramKeys[i] +\r\n        \",\" +\r\n        this.state.paramValues[paramKeys[i]] +\r\n        \",\";\r\n    }\r\n    modreportScheduleDetails.ParamData = reportParams;\r\n    return modreportScheduleDetails;\r\n  }\r\n  CreateReportSchedule(modreportScheduleDetails) {\r\n    modreportScheduleDetails.ShareholderCode = this.props.selectedShareholder;\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"ReportSchedule_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ReportSchedule_Title\"],\r\n          keyValues: [modreportScheduleDetails.ReportName],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.CreateReportSchedule,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        modreportScheduleDetails,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getReportSchedule(false);\r\n          ///call get\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: true,\r\n          });\r\n          console.log(\"Error in CreateReportSchedule:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(modreportScheduleDetails, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting GetReportList:\", error);\r\n      });\r\n  }\r\n\r\n  UpdateReportSchedule(modreportScheduleDetails) {\r\n    modreportScheduleDetails.ShareholderCode = this.props.selectedShareholder;\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"ReportSchedule_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"ReportSchedule_Title\"],\r\n          keyValues: [modreportScheduleDetails.ReportName],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.UpdateReportSchedule,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        modreportScheduleDetails,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.getReportSchedule(false);\r\n          ///call get\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: true,\r\n          });\r\n          console.log(\"Error in CreateReportSchedule:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(modreportScheduleDetails, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting CreateReportSchedule:\", error);\r\n      });\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      const reportScheduleDetails = lodash.cloneDeep(\r\n        this.state.reportScheduleDetails\r\n      );\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState({\r\n        modreportScheduleDetails: { ...reportScheduleDetails },\r\n        validationErrors,\r\n        displayParameters: [],\r\n        paramValues: {},\r\n        savedparamValues: {},\r\n        paramOptions: {},\r\n        disabledParams: {},\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportScheduleDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  getReportNames(isNew) {\r\n    let shareHolder = null;\r\n    if (isNew === true) {\r\n      shareHolder = this.props.selectedShareholder;\r\n    }\r\n    let reportNames = [];\r\n    axios(\r\n      RestAPIs.GetAllReportNames + \"?ShareholderCode=\" + shareHolder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          reportNames = result.EntityResult;\r\n          this.setState({ reportNames: reportNames });\r\n        } else {\r\n          console.log(\"Error in GetAllReportNames:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting GetAllReportNames:\", error);\r\n      });\r\n    //return reportNames;\r\n  }\r\n  getPrintersNames() {\r\n    let printerList = [];\r\n    try {\r\n      axios(\r\n        RestAPIs.GetPrinters,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        if (response.data.IsSuccess) {\r\n          printerList = response.data.EntityResult;\r\n          this.setState({ printerList: printerList });\r\n        } else {\r\n          console.log(\"Error:In getPrintersNames\", response);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportScheduleDetailsComposite:Error occured on getPrintersNames\",\r\n        error\r\n      );\r\n      //let printerList = [\"printer1\", \"printer2\"];\r\n      //return printerList;\r\n    }\r\n  }\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const popUpContents = [];\r\n    const listOptions = {\r\n      printerList: this.state.printerList,\r\n      reportNames: Utilities.transferDictionarytoOptions(\r\n        this.state.reportNames\r\n      ),\r\n    };\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.reportScheduleDetails.ReportName}\r\n            newEntityName=\"DriverInfo_NewReportSchedule\"\r\n          //popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <ReportScheduleDetails\r\n            reportScheduleDetails={this.state.reportScheduleDetails}\r\n            modreportScheduleDetails={this.state.modreportScheduleDetails}\r\n            validationErrors={this.state.validationErrors}\r\n            listOptions={listOptions}\r\n            onReportNameChange={this.handleReportChange}\r\n            onPrinterChange={this.handlePrinterChange}\r\n            onCheckChange={this.handleCheckChange}\r\n            onParamLoad={this.buildReportParams}\r\n            showReportParams={this.state.showReportParams}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            isWebPortalUser={\r\n              this.props.userDetails.EntityResult.IsWebPortalUser\r\n            }\r\n            paramValues={this.state.paramValues}\r\n            savedparamValues={this.state.savedparamValues}\r\n            parameterLoading={this.state.parameterLoading}\r\n          ></ReportScheduleDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.reportScheduleDetails.ReportName === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnReportConfiguration}\r\n            handleOperation={this.AddUpdateReportConfig}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ReportScheduleDetailsComposite);\r\n\r\nReportScheduleDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TMSummaryPageComposite } from \"../Common/TMSummaryPageComposite\";\r\n\r\nexport function ReportScheduleSummaryPageComposite({\r\n  tableData,\r\n  columnDetails,\r\n  pageSize,\r\n  terminalsToShow,\r\n  selectedItems,\r\n  onSelectionChange,\r\n  onRowClick,\r\n}) {\r\n  return (\r\n    <TMSummaryPageComposite\r\n      tableData={tableData}\r\n      columnDetails={columnDetails}\r\n      pageSize={pageSize}\r\n      terminalsToShow={terminalsToShow}\r\n      selectedItems={selectedItems}\r\n      onSelectionChange={onSelectionChange}\r\n      onRowClick={onRowClick}\r\n    ></TMSummaryPageComposite>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../../../CSS/styles.css\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  functionGroups,\r\n  fnReportConfiguration,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport { ReportScheduleSummaryPageComposite } from \"../Summary/ReportScheduleSummaryComposite\";\r\nimport ReportScheduleDetailsComposite from \"../Details/ReportScheduleDetailsComposite\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport { emptyReportSchedule } from \"../../../JS/DefaultEntities\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass ReportSchedule extends Component {\r\n  state = {\r\n    isDetails: \"false\",\r\n    isReadyToRender: false,\r\n    isDetailsModified: \"false\",\r\n    operationsVisibilty: { add: false, delete: false, shareholder: true },\r\n    selectedRow: {},\r\n    selectedItems: [],\r\n    selectedShareholder: \"\",\r\n    data: {},\r\n    showAuthenticationLayout: false,\r\n  };\r\n\r\n  handleAdd = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete = false;\r\n      operationsVisibilty.add = false;\r\n      operationsVisibilty.shareholder = false;\r\n\r\n      this.setState({\r\n        isDetails: \"true\",\r\n        selectedRow: {},\r\n        operationsVisibilty,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"ReportSchedule:Error occured on handleAdd\", error);\r\n    }\r\n  };\r\n  handleDelete = () => {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete = false;\r\n      this.setState({ operationsVisibilty });\r\n      var deleteReportScheduleData = [];\r\n      var reportNamesDeleted = [];\r\n      var reportKeyFields = [];\r\n      var reportnames = \"\";\r\n      for (var i = 0; i < this.state.selectedItems.length; i++) {\r\n        var reportScheduleData = lodash.cloneDeep(emptyReportSchedule);\r\n        reportScheduleData.ShareholderCode = this.state.selectedShareholder;\r\n        reportScheduleData.ReportName =\r\n          this.state.selectedItems[i][\"ReportSchedules_ReportName\"];\r\n        reportnames =\r\n          reportnames +\r\n          this.state.selectedItems[i][\"ReportSchedules_ReportName\"] +\r\n          \"-\";\r\n        deleteReportScheduleData.push(reportScheduleData);\r\n        reportKeyFields.push(\"ReportSchedule_Title\");\r\n        reportNamesDeleted.push(\r\n          this.state.selectedItems[i][\"ReportSchedules_ReportName\"]\r\n        );\r\n      }\r\n      var notification = {\r\n        messageType: \"critical\",\r\n        message: \"ReportSchedule_DeletionStatus\",\r\n        messageResultDetails: [],\r\n      };\r\n      axios(\r\n        RestAPIs.DeleteReportSchedule,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          deleteReportScheduleData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          var isRefreshDataRequire = result.IsSuccess;\r\n\r\n          if (isRefreshDataRequire) {\r\n            this.setState({ isReadyToRender: false });\r\n            this.getreportScheduleList(this.state.selectedShareholder);\r\n            operationsVisibilty.delete = false;\r\n            this.setState({\r\n              selectedItems: [],\r\n              operationsVisibilty,\r\n              selectedRow: {},\r\n            });\r\n          } else {\r\n            operationsVisibilty.delete = true;\r\n            this.setState({ operationsVisibilty });\r\n          }\r\n\r\n          notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n          var msgobj = {\r\n            keyFields: reportKeyFields,\r\n            keyValues: reportNamesDeleted,\r\n            isSuccess: true,\r\n            errorMessage: \"\",\r\n          };\r\n          notification.messageResultDetails.push(msgobj);\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error occured while deleting:\" + error);\r\n          var { operationsVisibilty } = { ...this.state };\r\n          operationsVisibilty.delete = true;\r\n          this.setState({ operationsVisibilty });\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportScheduleComposite:Error occured on handleDelet\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleBack = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnReportConfiguration\r\n      );\r\n      operationsVisibilty.delete = false;\r\n      operationsVisibilty.shareholder = true;\r\n      this.setState({\r\n        isDetails: \"false\",\r\n        selectedRow: {},\r\n        selectedItems: [],\r\n        operationsVisibilty,\r\n        isReadyToRender: false,\r\n      });\r\n      this.getreportScheduleList(this.state.selectedShareholder);\r\n      //this.getKPIList(this.state.selectedShareholder);\r\n    } catch (error) {\r\n      console.log(\"ReportSchedule:Error occured on Back click\", error);\r\n    }\r\n  };\r\n  handleRowClick = (item) => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnReportConfiguration\r\n      );\r\n      operationsVisibilty.delete = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.remove,\r\n        fnReportConfiguration\r\n      );\r\n      operationsVisibilty.shareholder = false;\r\n      this.setState({\r\n        isDetails: \"true\",\r\n        selectedRow: item,\r\n        selectedItems: [item],\r\n        operationsVisibilty,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"ReportSchedule:Error occured on handleRowClick\", error);\r\n    }\r\n  };\r\n  handleSelection = (items) => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n\r\n      operationsVisibilty.delete =\r\n        items.length > 0 &&\r\n        Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.remove,\r\n          fnReportConfiguration\r\n        );\r\n\r\n      this.setState({ selectedItems: items, operationsVisibilty });\r\n    } catch (error) {\r\n      console.log(\"ReportSchedule:Error occured on handleSelection\", error);\r\n    }\r\n  };\r\n  savedEvent = (data, saveType, notification) => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      if (notification.messageType === \"success\") {\r\n         operationsVisibilty.add = Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          fnReportConfiguration\r\n        );\r\n\t      operationsVisibilty.delete = Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.remove,\r\n          fnReportConfiguration\r\n        );\r\n        this.setState({ isDetailsModified: \"true\", operationsVisibilty });\r\n      }\r\n      if (notification.messageType === \"success\" && saveType === \"add\") {\r\n        var selectedItems = [\r\n          {\r\n            ReportSchedules_ReportName: data.ReportName,\r\n            Common_Shareholder: data.ShareholderCode,\r\n          },\r\n        ];\r\n        this.setState({ selectedItems });\r\n      }\r\n      toast(\r\n        <ErrorBoundary>\r\n          <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n        </ErrorBoundary>,\r\n        {\r\n          autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\"ReportSchedule:Error occured on savedEvent\", error);\r\n    }\r\n  };\r\n\r\n  getreportScheduleList(shareholder) {\r\n    axios(\r\n      RestAPIs.GetReportsScheduledList + \"?Shareholder=\" + shareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({ data: result.EntityResult, isReadyToRender: true });\r\n        } else {\r\n          this.setState({ data: [], isReadyToRender: true });\r\n          console.log(\r\n            \"Error in GetReportScheduleListForRole:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ data: [], isReadyToRender: true });\r\n        console.log(\"Error while getting ReportSchedule List:\", error);\r\n      });\r\n  }\r\n\r\n  handleShareholderSelectionChange = (shareholder) => {\r\n    try {\r\n      let { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete = false;\r\n      this.setState({\r\n        selectedShareholder: shareholder,\r\n        isReadyToRender: false,\r\n        selectedItems: [],\r\n        operationsVisibilty,\r\n      });\r\n      this.getreportScheduleList(shareholder);\r\n    } catch (error) {\r\n      console.log(\r\n        \"ReportSchedule:Error occured on handleShareholderSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnReportConfiguration\r\n      );\r\n      this.setState({\r\n        operationsVisibilty,\r\n        selectedShareholder:\r\n          this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      });\r\n      this.getreportScheduleList(\r\n        this.props.userDetails.EntityResult.PrimaryShareholder\r\n      );\r\n    } catch (error) {\r\n      console.log(\"ReportSchedule:Error occured on ComponentDidMount\", error);\r\n    }\r\n  }\r\n\r\n  authenticateDelete = () => {\r\n    try {\r\n      let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      this.setState({ showAuthenticationLayout });\r\n      if (showAuthenticationLayout === false) {\r\n        this.handleDelete();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Report Schedule Composite : Error in authenticateDelete\");\r\n    }\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMUserActionsComposite\r\n            operationsVisibilty={this.state.operationsVisibilty}\r\n            breadcrumbItem={this.props.activeItem}\r\n            shareholders={this.props.userDetails.EntityResult.ShareholderList}\r\n            selectedShareholder={this.state.selectedShareholder}\r\n            onShareholderChange={this.handleShareholderSelectionChange}\r\n            onDelete={this.authenticateDelete}\r\n            onAdd={this.handleAdd}\r\n            handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n          ></TMUserActionsComposite>\r\n        </ErrorBoundary>\r\n        {this.state.isDetails === \"true\" ? (\r\n          <ErrorBoundary>\r\n            <ReportScheduleDetailsComposite\r\n              key=\"ReportScheduleDetails\"\r\n              selectedRow={this.state.selectedRow}\r\n              selectedShareholder={this.state.selectedShareholder}\r\n              onBack={this.handleBack}\r\n              onSaved={this.savedEvent}\r\n              //selectedItems={this.state.selectedItems}\r\n            ></ReportScheduleDetailsComposite>\r\n          </ErrorBoundary>\r\n        ) : this.state.isReadyToRender ? (\r\n          <div>\r\n            <ErrorBoundary>\r\n              <ReportScheduleSummaryPageComposite\r\n                tableData={this.state.data.Table}\r\n                columnDetails={this.state.data.Column}\r\n                pageSize={\r\n                  this.props.userDetails.EntityResult.PageAttibutes\r\n                    .WebPortalListPageSize\r\n                }\r\n                terminalsToShow={\r\n                  this.props.userDetails.EntityResult.PageAttibutes\r\n                    .NoOfTerminalsToShow\r\n                }\r\n                selectedItems={this.state.selectedItems}\r\n                onRowClick={this.handleRowClick}\r\n                onSelectionChange={this.handleSelection}\r\n              ></ReportScheduleSummaryPageComposite>\r\n            </ErrorBoundary>\r\n          </div>\r\n        ) : (\r\n          <LoadingPage message=\"Loading\"></LoadingPage>\r\n        )}\r\n        <ErrorBoundary>\r\n          <ToastContainer\r\n            hideProgressBar={true}\r\n            closeOnClick={false}\r\n            closeButton={true}\r\n            newestOnTop={true}\r\n            position=\"bottom-right\"\r\n            toastClassName=\"toast-notification-wrap\"\r\n          />\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={functionGroups.remove}\r\n            functionGroup={fnReportConfiguration}\r\n            handleClose={this.handleAuthenticationClose}\r\n            handleOperation={this.handleDelete}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ReportSchedule);\r\n\r\nReportSchedule.propTypes = {\r\n  activeItem: PropTypes.object,\r\n};\r\n","export const DatesInEntity={\r\n    Driver : [\r\n    \"License1ExpiryDate\",\r\n    \"License1IssueDate\",\r\n    \"License2IssueDate\",\r\n    \"License2ExpiryDate\",\r\n    \"License3IssueDate\",\r\n    \"License3ExpiryDate\",\r\n    \"HazardousLicenseExpiry\"\r\n  ],\r\n  CarrierCompany:[\"PermitExpiryDate\"],\r\n  PrimeMover:[\"RoadTaxNoIssueDate\",\"RoadTaxNoExpiryDate\",\"licenseExpiryDate\"],\r\n  Wagon:[\"LicenseExpiryDate\"],\r\n  Vehicle:[\"LicenseNoIssueDate\",\"LicenseNoExpiryDate\",\r\n  \"RoadTaxNoIssueDate\",\"RoadTaxNoExpiryDate\",\"Bondexpirydate\",\"HazardousLicenseExpiry\"],\r\n  Contract:[\"StartDate\",\"EndDate\"],\r\n  ContractItem:[\"StartDate\",\"EndDate\"],\r\n  Order:[\"OrderStartDate\",\"OrderEndDate\",\"OrderDate\",\"DeliveryDate\"],\r\n  AccessCard:[\"ExpiryDate\",\"IssueDate\",\"PasswordExpiryDate\"],\r\n  Trailer:[\"HazardousLicenseExpiry\"],\r\n  };","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["ReportScheduleDetails","_ref","reportScheduleDetails","modreportScheduleDetails","validationErrors","listOptions","onReportNameChange","onPrinterChange","isEnterpriseNode","isWebPortalUser","onCheckChange","showReportParams","onParamLoad","paramValues","savedparamValues","parameterLoading","_jsx","TranslationConsumer","children","t","_jsxs","className","Select","fluid","placeholder","label","value","ReportName","options","reportNames","onChange","data","indicator","error","reserveSpace","disabled","undefined","search","noResultsMessage","Input","ScheduleName","Checkbox","checked","IsEOS","eoschecked","IsEOD","eodchecked","IsMonthly","isMonthlychecked","IsWeekly","isWeeklychecked","width","valign","IsPrint","isPrint","Printer","Utilities","printerList","multiple","Loader","text","defaultProps","printers","ReportScheduleDetailsComposite","Component","constructor","arguments","state","reportScheduleValidationDef","isReadyToRender","saveEnabled","entityType","selectedShareholer","this","props","selectedShareholder","parameters","displayParameters","paramOptions","disabledParams","listLoading","showAuthenticationLayout","tempReportScheduleDetails","validateParams","cloneValidationErrors","cloneModreportScheduleDetails","validationDef","Object","keys","forEach","key","setState","values","every","getReportParams","report","passedParamdata","axios","RestAPIs","tokenDetails","tokenInfo","then","response","IsSuccess","params","EntityResult","Parameters","cloneDisplayParams","paramTables","ReportsData","cloneParamOptions","lodash","cloneDisabledParams","cloneParamValues","Culture","userDetails","UICulture","reportName","UserName","j","length","ControlType","IsEnterpriseNode","IsOnlyForEnterprise","ParamName","filter","obj","i","Required","push","minLength","errorCode","DependentControls","tableName","TableName","fieldName","FieldName","list","optionsSet","Set","map","row","optionsValues","unshift","def","isDate","expression","Terminal","Shareholder","paramDatefields","ob","dayjs","Date","format","console","log","ErrorList","catch","err","handleReportChange","buildReportParams","handlePrinterChange","join","handleCheckChange","propertyName","isSavedReportSchedule","parameter","LocalisedParamName","onDropDownChange","onFieldChange","date","onDateTextChange","refreshControls","RefreshControls","refreshParameter","find","paramTable","dependentControls","dependantParam","_ref2","AddUpdateReportConfig","handleAuthenticationClose","FillParams","CreateReportSchedule","UpdateReportSchedule","handleSave","IsWebPortalUser","handleReset","componentDidMount","isNew","selectedRow","ReportSchedules_ReportName","getReportSchedule","componentWillReceiveProps","nextProps","getReportNames","getPrintersNames","emptyReportSchedule","FunctionsList","functionGroups","add","fnReportConfiguration","ShareholderCode","result","ParamData","FillParamValuesFromDetails","modify","split","paramSavedValues","pop","paramKeys","reportParams","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","onSaved","shareHolder","render","ErrorBoundary","TMDetailsHeader","entityCode","newEntityName","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","ReportScheduleSummaryPageComposite","tableData","columnDetails","pageSize","terminalsToShow","selectedItems","onSelectionChange","onRowClick","TMSummaryPageComposite","ReportSchedule","isDetails","isDetailsModified","operationsVisibilty","delete","shareholder","handleAdd","handleDelete","deleteReportScheduleData","reportNamesDeleted","reportKeyFields","reportnames","reportScheduleData","getreportScheduleList","msgobj","toast","NotifyEvent","notificationMessage","autoClose","handleRowClick","item","remove","handleSelection","items","savedEvent","saveType","Common_Shareholder","handleShareholderSelectionChange","authenticateDelete","IsArchived","PrimaryShareholder","TMUserActionsComposite","breadcrumbItem","activeItem","shareholders","ShareholderList","onShareholderChange","onDelete","onAdd","handleBreadCrumbClick","Table","Column","PageAttibutes","WebPortalListPageSize","NoOfTerminalsToShow","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","position","toastClassName","DatesInEntity","Driver","CarrierCompany","PrimeMover","Wagon","Vehicle","Contract","ContractItem","Order","AccessCard","Trailer","getOptionsWithSelect","ddlOptions","selectOptionText","Array","isArray","option","getCurrentDateFormat","language","window","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}