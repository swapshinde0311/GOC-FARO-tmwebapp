{"version":3,"file":"static/js/7342.e3076e95.chunk.js","mappings":"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","sources":["Components/Composite/Common/Charts/LACSeriesChart.jsx","Components/Composite/Common/Charts/WidgetOutlines/DashboardCard.jsx","Components/Composite/Common/SlotBook/SlotHeaderUserActionsComposite.jsx","Components/Composite/Details/ProductDemandForecastingDetailsComposite.jsx","Components/Composite/Entity/ProductDemandForecastingComposite.jsx","JS/KeyCodes.js","JS/NotifyEvent.js","JS/functionalUtilities.js","../node_modules/@grapecity/wijmo.react.base/es5-esm.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as wjChart from \"@grapecity/wijmo.react.chart\";\r\nimport * as wjChartInteraction from \"@grapecity/wijmo.react.chart.interaction\";\r\nimport * as wjChartAnimate from \"@grapecity/wijmo.react.chart.animation\";\r\nimport * as wjChartAnalytics from '@grapecity/wijmo.react.chart.analytics';\r\nimport ErrorBoundary from \"../../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { ThemeType } from \"@scuf/common\";\r\nimport { connect } from 'react-redux'\r\n\r\nconst LACSeriesChart = (props) => {\r\n  const flexRef = React.useRef();\r\n  const jsonData = JSON.parse(props.kpiInfo.JSONFormat);\r\n  const initGestures = (gestures) => {\r\n    gestures.posX = jsonData.Chart.ChartDetails.initialPosition\r\n      ? jsonData.Chart.ChartDetails.initialPosition.xPosition\r\n      : 0;\r\n    gestures.posY = jsonData.Chart.ChartDetails.initialPosition\r\n      ? jsonData.Chart.ChartDetails.initialPosition.yPosition\r\n      : 0;\r\n    gestures.scaleX = jsonData.Chart.ChartDetails.initialPosition\r\n      ? jsonData.Chart.ChartDetails.initialPosition.xScale\r\n      : 0;\r\n    gestures.scaleY = jsonData.Chart.ChartDetails.initialPosition\r\n      ? jsonData.Chart.ChartDetails.initialPosition.yScale\r\n      : 0;\r\n  };\r\n\r\n  // reset major unit for Y-axis\r\n  React.useEffect(() => {\r\n    if (flexRef) {\r\n      setMajorUnitY();\r\n    }\r\n  }, [props.kpiInfo.KPIData]);\r\n\r\n  // get palette based on the selected theme\r\n  const getPalletes = (theme) => {\r\n    try {\r\n      const chartPalette = jsonData.Chart.ChartDetails.common.palette;\r\n      if (chartPalette) {\r\n        // if palette in JSON does not have separate colours for 'dark' & 'light' theme\r\n        if (Array.isArray(chartPalette)) {\r\n          return jsonData.Chart.ChartDetails.common.palette;\r\n        }\r\n        else {\r\n          // select palette based on theme\r\n          if (theme === ThemeType.Dark && chartPalette.dark) {\r\n            return chartPalette.dark;\r\n          }\r\n          else {\r\n            return chartPalette.default;\r\n          }\r\n        }\r\n      }\r\n      else if (\r\n        jsonData.Chart.ChartDetails.bindings.colorsSource &&\r\n        jsonData.Chart.ChartDetails.bindings.colorsSource.table &&\r\n        jsonData.Chart.ChartDetails.bindings.colorsSource.columnName\r\n      ) {\r\n        if (\r\n          Array.isArray(\r\n            props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.colorsSource.table]\r\n          )\r\n        ) {\r\n          return props.kpiInfo.KPIData[\r\n            jsonData.Chart.ChartDetails.bindings.colorsSource.table\r\n          ].map((item) => item[jsonData.Chart.ChartDetails.bindings.colorsSource.columnName]);\r\n        }\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in getPalettes:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // set Y-axis step and max value\r\n  const setMajorUnitY = () => {\r\n    let flex = flexRef.current;\r\n    let data = props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.seriesSource]\r\n    if (data && flex) {\r\n      // get the list of series bindings\r\n      let yBindings = jsonData.Chart.ChartDetails.seriesData.map((col) => col.binding);\r\n      let maxs = [];\r\n      // identify the max value for each series bindings\r\n      yBindings.forEach((ybind) => {\r\n        let max = 0;\r\n        data.forEach((row, index) => {\r\n          if (index === 0) {\r\n            max = row[ybind]\r\n          }\r\n          else {\r\n            if (row[ybind] > max) {\r\n              max = row[ybind]\r\n            }\r\n          }\r\n        })\r\n        maxs.push(max);\r\n      })\r\n\r\n      if (maxs.filter(val => val <= 5).length === maxs.length) {\r\n        // set majorUnit as 1 to avoid decimals\r\n        flex.axisY.majorUnit = 1;\r\n        flex.axisY.max = 5;\r\n      }\r\n      else {\r\n        // set majorUnit to auto\r\n        flex.axisY.majorUnit = undefined;\r\n        flex.axisY.max = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  const chartInitiliazed = (flex) => {\r\n    flexRef.current = flex;\r\n\r\n    setMajorUnitY();\r\n\r\n    if (props.setChartRefs) {\r\n      props.setChartRefs(props.kpiInfo.KPIName, flex, props.kpiInfo.Sequence);\r\n    }\r\n\r\n    if (props.isLiveCheck) {\r\n      props.isLiveCheck(jsonData.Chart.ChartDetails.isLive);\r\n    }\r\n  };\r\n\r\n  // const handleRender = (s) => {\r\n  //   try {\r\n  //     let elements = s.engine.element;\r\n  //     let seriesDataLength = Array.isArray(jsonData.Chart.ChartDetails.seriesData) ? jsonData.Chart.ChartDetails.seriesData.length : 0;\r\n  //     if (seriesDataLength <= 1) {\r\n  //       let series = elements.querySelectorAll('.wj-series-group g');\r\n  //       if (jsonData.Chart.ChartDetails.common.chartType === \"Column\") {\r\n  //         // set the width for each column\r\n  //         series.forEach((seriesItem, idx) => {\r\n  //           seriesItem.querySelectorAll('rect').forEach((rect) => {\r\n  //             // set the max width to 30\r\n  //             if (Number(rect.getAttribute('width')) > 35) {\r\n  //               let xTickLoc = 0;\r\n  //               xTickLoc = (Number(rect.getAttribute('x')) + Number(rect.getAttribute('width')) / 2) - 17.5;\r\n  //               // set 'width' to 30\r\n  //               rect.setAttribute('width', '35');\r\n  //               // set 'x' value\r\n  //               rect.setAttribute('x', xTickLoc);\r\n  //             }\r\n  //           });\r\n  //         });\r\n  //       }\r\n  //       else if (jsonData.Chart.ChartDetails.common.chartType === \"Bar\") {\r\n  //         // set the width for each bar\r\n  //         series.forEach((seriesItem, idx) => {\r\n  //           seriesItem.querySelectorAll('rect').forEach((rect) => {\r\n  //             // set the max height to 30\r\n  //             if (Number(rect.getAttribute('height')) > 35) {\r\n  //               // get new 'x' value for thebar \r\n  //               let xTickLoc = (Number(rect.getAttribute('y')) + Number(rect.getAttribute('height')) / 2) - 17.5;\r\n  //               // set 'height' to 30\r\n  //               rect.setAttribute('height', '35');\r\n  //               // set 'y' value\r\n  //               rect.setAttribute('y', xTickLoc);\r\n  //             }\r\n  //           });\r\n  //         });\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   catch (error) {\r\n  //     console.log(\"Error in handleRender: \", error)\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <ErrorBoundary>\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div className=\"wijmoCharts\">\r\n            <wjChart.FlexChart\r\n              {...jsonData.Chart.ChartDetails.common}\r\n              itemsSource={\r\n                props.kpiInfo.KPIData[\r\n                jsonData.Chart.ChartDetails.bindings.seriesSource\r\n                ]\r\n              }\r\n              header={t(jsonData.Chart.ChartDetails.common.header_locale_key)}\r\n              initialized={chartInitiliazed}\r\n              palette={getPalletes(props.theme)}\r\n            // onRendered={handleRender}\r\n            >\r\n              <wjChart.FlexChartLegend\r\n                {\r\n                ...(\r\n                  jsonData.Chart.ChartDetails.chartLegend ?\r\n                    jsonData.Chart.ChartDetails.chartLegend :\r\n                    { position: \"Bottom\" }\r\n                )\r\n                }\r\n              ></wjChart.FlexChartLegend>\r\n              {jsonData.Chart.ChartDetails.seriesData.map((column) => {\r\n                return (\r\n                  <wjChart.FlexChartSeries {...column} name={t(column.name)}>\r\n                    {Array.isArray(column.chartAxis)\r\n                      ? column.chartAxis.map((axisFormat) => {\r\n                        return (\r\n                          <wjChart.FlexChartAxis\r\n                            {...axisFormat}\r\n                          ></wjChart.FlexChartAxis>\r\n                        );\r\n                      })\r\n                      : null}\r\n                  </wjChart.FlexChartSeries>\r\n                );\r\n              })}\r\n              {Array.isArray(jsonData.Chart.ChartDetails.chartAxis)\r\n                ? jsonData.Chart.ChartDetails.chartAxis.map((axis) => {\r\n                  return (\r\n                    <wjChart.FlexChartAxis\r\n                      {...axis}\r\n                      title={t(axis.title)}\r\n                    ></wjChart.FlexChartAxis>\r\n                  );\r\n                })\r\n                : null}\r\n              {jsonData.Chart.ChartDetails.dataLabel ? (\r\n                <wjChart.FlexChartDataLabel\r\n                  {...jsonData.Chart.ChartDetails.dataLabel}\r\n                ></wjChart.FlexChartDataLabel>\r\n              ) : null}\r\n\r\n              {\r\n                Array.isArray(jsonData.Chart.Thresholds) ?\r\n                  jsonData.Chart.Thresholds.map(threshold => {\r\n                    return (\r\n                      <wjChartAnalytics.FlexChartYFunctionSeries\r\n                        {...threshold}\r\n                        name={t(threshold.Name)}\r\n                        style={{\r\n                          ...threshold.Styles\r\n                        }}\r\n                        min={\r\n                          threshold.Min ?\r\n                            threshold.Min : 0\r\n                        }\r\n                        max={props.kpiInfo.KPIData[\r\n                          jsonData.Chart.ChartDetails.bindings.seriesSource\r\n                        ].length - 1}\r\n                        sampleCount={props.kpiInfo.KPIData[\r\n                          jsonData.Chart.ChartDetails.bindings.seriesSource\r\n                        ].length - 1}\r\n                        tooltipContent={threshold.tooltipContent ? t(threshold.tooltipContent.Label) + \": \" + threshold.tooltipContent.Value : \"{y}\"}\r\n                        func={(x) => {\r\n                          return threshold.Value;\r\n                        }}>\r\n                      </wjChartAnalytics.FlexChartYFunctionSeries>\r\n                    );\r\n                  })\r\n                  : null\r\n              }\r\n              <wjChartInteraction.FlexChartGestures\r\n                initialized={initGestures}\r\n                mouseAction=\"Pan\"\r\n              ></wjChartInteraction.FlexChartGestures>\r\n              <wjChartAnimate.FlexChartAnimation></wjChartAnimate.FlexChartAnimation>\r\n            </wjChart.FlexChart>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nLACSeriesChart.propTypes = {\r\n  kpiInfo: PropTypes.object.isRequired,\r\n  setChartRefs: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    theme: state.appTheme.theme\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(LACSeriesChart);\r\n","import { Icon, Modal, Popup, Tooltip, VerticalMenu } from '@scuf/common';\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ErrorBoundary from '../../../../ErrorBoundary';\r\nimport { TranslationConsumer } from '@scuf/localization';\r\n\r\nconst DashboardCard = (props) => {\r\n    const [cardPreview, setCardPreview] = useState(false);\r\n\r\n    const [isLive, setIsLive] = useState(false);\r\n\r\n    // add additional props to child elements\r\n    const childrenWithProps = React.Children.map((props.children), child => {\r\n        if (React.isValidElement(child)) {\r\n            return React.cloneElement(child,\r\n                {\r\n                    // check if widget represents live data\r\n                    isLiveCheck: (isLive) => {\r\n                        setIsLive((typeof isLive !== \"boolean\") ? false : isLive)\r\n                    }\r\n                })\r\n        }\r\n\r\n        return child;\r\n    })\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <TranslationConsumer>\r\n                {(t) =>\r\n                    <React.Fragment>\r\n                        <div className={\"dashboardCard \" + props.className}>\r\n                            <div className=\"dashboardCardHeader pl-0\">\r\n                                <div className='pl-2 pt-1' style={{ float: \"left\", width: \"60%\" }}>\r\n                                    <Tooltip\r\n                                        content={t(props.header)}\r\n                                        element={\r\n                                            <h4 style={{\r\n                                                fontSize: \"12px\",\r\n                                                fontWeight: \"600\",\r\n                                                whiteSpace: \"nowrap\",\r\n                                                overflow: \"hidden\",\r\n                                                textOverflow: \"ellipsis\"\r\n                                            }}>\r\n                                                {t(props.header)}\r\n                                            </h4>\r\n                                        }\r\n                                        hoverable={true}\r\n                                        event='hover'\r\n                                    />\r\n                                </div>\r\n                                <div style={{ float: \"right\" }}>\r\n                                    {isLive ?\r\n                                        <span className='px-2'>\r\n                                            <span\r\n                                                className='icon-Live'\r\n                                                style={{ fontSize: \"16px\", verticalAlign: \"middle\" }}>\r\n                                            </span>\r\n                                        </span>\r\n                                        : null\r\n                                    }\r\n                                    {props.isExportRequired ?\r\n                                        <Popup\r\n                                            element={\r\n                                                <Tooltip\r\n                                                    content={t(\"Chart_Download\")}\r\n                                                    element={\r\n                                                        <span className='px-2' style={{ padding: \"10px\" }}>\r\n                                                            <Icon root=\"common\" name=\"file-download\" className='dashboardIcon' size=\"small\" />\r\n                                                        </span>\r\n                                                    }\r\n                                                    hoverable={true}\r\n                                                    event='hover'\r\n                                                />\r\n                                            }\r\n                                            on=\"click\">\r\n                                            <VerticalMenu>\r\n                                                <VerticalMenu.Item onClick={() => props.exportHandler(props.exportName, \"png\")}>PNG</VerticalMenu.Item>\r\n                                                <VerticalMenu.Item onClick={() => props.exportHandler(props.exportName, \"jpeg\")}>JPEG</VerticalMenu.Item>\r\n                                                <VerticalMenu.Item onClick={() => props.exportHandler(props.exportName, \"svg\")}>SVG</VerticalMenu.Item>\r\n                                            </VerticalMenu>\r\n                                        </Popup> : null\r\n                                    }\r\n                                    {\r\n                                        props.isFullScreenRequired ?\r\n                                            <Tooltip\r\n                                                content={t(\"Chart_Fullscreen\")}\r\n                                                element={\r\n                                                    <span\r\n                                                        className='px-2'\r\n                                                        style={{ \"cursor\": \"pointer\" }}\r\n                                                        onClick={() => {\r\n                                                            setCardPreview(true)\r\n                                                            // if any operation to executed when widget is shown in full-screen\r\n                                                            if (props.fullScreenHandler)\r\n                                                                props.fullScreenHandler(true);\r\n                                                        }}>\r\n                                                        <Icon root='common' name=\"enter-fullscreen\" size=\"small\" className='dashboardIcon' />\r\n                                                    </span>}\r\n                                                hoverable={true}\r\n                                                event='hover'\r\n                                            /> : null\r\n                                    }\r\n                                    {\r\n                                        !isNaN(parseInt(props.childCount)) && parseInt(props.childCount) > 0 ?\r\n                                            <Tooltip\r\n                                                content={t(\"More_Details\")}\r\n                                                element={\r\n                                                    <span className='px-2' style={{ \"cursor\": \"pointer\" }} onClick={props.clickHandler}>\r\n                                                        <Icon root=\"common\" className='dashboardIcon' name=\"caret-right\" size=\"small\" />\r\n                                                    </span>}\r\n                                                hoverable={true}\r\n                                                event='hover'\r\n                                            />\r\n                                            : null\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"dashboardCardContent\">\r\n                                {!cardPreview ? childrenWithProps : null}\r\n                            </div>\r\n                        </div>\r\n                        {\r\n                            cardPreview ?\r\n                                (\r\n                                    <Modal\r\n                                        open={cardPreview}\r\n                                        size=\"large\"\r\n                                        className='cardDetailsPopup'\r\n                                        closeOnDimmerClick={false}\r\n                                        closeOnDocumentClick={false}\r\n                                        onClose={() => {\r\n                                            setCardPreview(false)\r\n                                            // if any operation to executed when full-screen is closed \r\n                                            if (props.fullScreenHandler)\r\n                                                props.fullScreenHandler(false);\r\n                                        }}\r\n                                        closeIcon={true}>\r\n                                        <Modal.Header>\r\n                                            {t(props.header)}\r\n                                            {props.isExportRequired ?\r\n                                                <Popup\r\n                                                    element={\r\n                                                        <Tooltip\r\n                                                            content={t(\"Download\")}\r\n                                                            element={\r\n                                                                <span className='pl-3' style={{ padding: \"10px\" }}>\r\n                                                                    <Icon root=\"common\" name=\"file-download\" size=\"small\" />\r\n                                                                </span>\r\n                                                            }\r\n                                                            hoverable={true}\r\n                                                            event='hover'\r\n                                                        />\r\n                                                    }\r\n                                                    on=\"click\">\r\n                                                    <VerticalMenu>\r\n                                                        <VerticalMenu.Item onClick={() => props.exportHandler(props.exportName, \"png\")}>PNG</VerticalMenu.Item>\r\n                                                        <VerticalMenu.Item onClick={() => props.exportHandler(props.exportName, \"jpeg\")}>JPEG</VerticalMenu.Item>\r\n                                                        <VerticalMenu.Item onClick={() => props.exportHandler(props.exportName, \"svg\")}>SVG</VerticalMenu.Item>\r\n                                                    </VerticalMenu>\r\n                                                </Popup> : null\r\n                                            }\r\n                                        </Modal.Header>\r\n                                        <Modal.Content>\r\n                                            {childrenWithProps}\r\n                                        </Modal.Content>\r\n                                    </Modal>\r\n                                ) : null\r\n                        }\r\n                    </React.Fragment>\r\n\r\n                }\r\n            </TranslationConsumer>\r\n        </ErrorBoundary >\r\n    )\r\n}\r\n\r\nDashboardCard.propTypes = {\r\n    header: PropTypes.string.isRequired,\r\n    childCount: PropTypes.number.isRequired,\r\n    clickHandler: PropTypes.func,\r\n    exportHandler: PropTypes.func,\r\n    exportName: PropTypes.string,\r\n    children: PropTypes.element,\r\n    menuItems: PropTypes.array,\r\n    fullScreenHandler: PropTypes.func,\r\n    className: PropTypes.string,\r\n    isExportRequired: PropTypes.bool,\r\n    isFullScreenRequired: PropTypes.bool\r\n}\r\n\r\nDashboardCard.defaultProps = {\r\n    exportName: \"Chart\",\r\n    menuItems: [],\r\n    className: \"\",\r\n    isExportRequired: true,\r\n    isFullScreenRequired: true\r\n}\r\n\r\nexport default DashboardCard","import React from \"react\";\r\nimport { Breadcrumb, Select } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../../JS/Utilities\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nSlotHeaderUserActionsComposite.propTypes = {\r\n  operationsVisibilty: PropTypes.shape({\r\n    //add: PropTypes.bool,\r\n    terminal: PropTypes.bool,\r\n  }).isRequired,\r\n  breadcrumbItem: PropTypes.shape({\r\n    itemName: PropTypes.string,\r\n    itemCode: PropTypes.string,\r\n    itemProps: PropTypes.any,\r\n    localizedKey: PropTypes.string,\r\n    parents: PropTypes.array,\r\n    isComponent: PropTypes.bool,\r\n  }).isRequired,\r\n  terminals: PropTypes.array.isRequired,\r\n  selectedTerminal: PropTypes.string.isRequired,\r\n  onTerminalChange: PropTypes.func.isRequired,\r\n  //onDelete: PropTypes.func.isRequired,\r\n  //onAdd: PropTypes.func.isRequired,\r\n  //popUpContent: PropTypes.array,\r\n};\r\nSlotHeaderUserActionsComposite.defaultProps = {\r\n  operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n  breadcrumbItem: {\r\n    itemName: \"\",\r\n    itemCode: \"\",\r\n    localizedKey: \"\",\r\n    itemProps: {},\r\n    parents: [],\r\n    isComponent: false,\r\n  },\r\n  terminals: [],\r\n  selectedTerminal: \"\",\r\n  //popUpContent: [],\r\n  //terminalVisible: true,\r\n};\r\nexport function SlotHeaderUserActionsComposite({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  terminals,\r\n  selectedTerminal,\r\n  onTerminalChange,\r\n  //onDelete,\r\n  handleBreadCrumbClick,\r\n\r\n  //popUpContent,\r\n  //shrVisible,\r\n}) {\r\n  //const [modelOpen, setModelOpen] = useState(false);\r\n  //const [popUpOpen, setPopUpOpen] = useState(false);\r\n  function getTerminalDropdownOptions() {\r\n    return Utilities.transferListtoOptions(terminals);\r\n    // var List = [];\r\n    // shareholders.forEach((element) => {\r\n    //   List.push({ text: element, value: element });\r\n    // });\r\n    // return List;\r\n  }\r\n\r\n  function buildBreadcrumb() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {breadcrumbItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item\r\n                  key={parentitem.itemCode}\r\n                  onClick={() =>\r\n                    handleBreadCrumbClick(\r\n                      parentitem.itemCode,\r\n                      breadcrumbItem.parents\r\n                    )\r\n                  }\r\n                >\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={breadcrumbItem.itemCode}>\r\n              {t(breadcrumbItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n\r\n  // function displayIcons() {\r\n  //   return (\r\n  //     <div style={{ float: \"right\", display: \"inline-block\" }}>\r\n  //       <div\r\n  //         className={\r\n  //           (operationsVisibilty.add ? \"iconCircle \" : \"iconCircleDisable \") +\r\n  //           \"iconblock\"\r\n  //         }\r\n  //         onClick={onAdd}\r\n  //       >\r\n  //         <Icon root=\"common\" name=\"badge-plus\" size=\"small\" color=\"white\" />\r\n  //       </div>\r\n\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n  //   function displayTMModalforDelete() {\r\n  //     //console.log(\"entered to display modal actions\");\r\n  //     return (\r\n  //       <TranslationConsumer>\r\n  //         {(t) => (\r\n  //           <Modal open={modelOpen} size=\"small\">\r\n  //             <Modal.Content>\r\n  //               <div>\r\n  //                 <b>{t(\"Confirm_Delete\")}</b>\r\n  //               </div>\r\n  //             </Modal.Content>\r\n  //             <Modal.Footer>\r\n  //               <Button\r\n  //                 type=\"secondary\"\r\n  //                 content={t(\"Cancel\")}\r\n  //                 onClick={() => setModelOpen(false)}\r\n  //               />\r\n  //               <Button\r\n  //                 type=\"primary\"\r\n  //                 content={t(\"PipelineDispatch_BtnSubmit\")}\r\n  //                 onClick={() => {\r\n  //                   setModelOpen(false);\r\n  //                   onDelete();\r\n  //                 }}\r\n  //               />\r\n  //             </Modal.Footer>\r\n  //           </Modal>\r\n  //         )}\r\n  //       </TranslationConsumer>\r\n  //     );\r\n  //     //return <TMModal open={true}></TMModal>;\r\n  //   }\r\n\r\n  return (\r\n    <div className=\"row\" style={{ marginTop: \"10px\" }}>\r\n      <div className=\"col-12 col-sm-12 col-md-12 col-lg-5 col-xl-7\">\r\n        <ErrorBoundary> {buildBreadcrumb()}</ErrorBoundary>\r\n      </div>\r\n      <div\r\n        className=\"col-12 col-sm-12 col-md-12 col-lg-7 col-xl-5\"\r\n        //style={{ verticalAlign: \"middle\" }}\r\n      >\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <div className=\"compartmentIcon\">\r\n              <div>\r\n                <h4 className=\"shrText\">{t(\"Common_Terminal\")}:</h4>\r\n              </div>\r\n              <div className=\"opSelect\">\r\n                <Select\r\n                  //className=\"opSelect\"\r\n                  placeholder={t(\"Common_Terminal\")}\r\n                  value={selectedTerminal}\r\n                  disabled={!operationsVisibilty.terminal}\r\n                  options={getTerminalDropdownOptions()}\r\n                  onChange={(value) => onTerminalChange(value)}\r\n                />\r\n              </div>\r\n\r\n              {/* {displayIcons()} */}\r\n            </div>\r\n          )}\r\n        </TranslationConsumer>\r\n      </div>\r\n      {/* {displayTMModalforDelete()} */}\r\n    </div>\r\n  );\r\n}\r\n","import { Button, DatePicker, Icon, Select, Tooltip } from '@scuf/common';\r\nimport { TranslationConsumer } from '@scuf/localization';\r\nimport React from 'react';\r\nimport * as wijmoPdf from \"@grapecity/wijmo.pdf\";\r\nimport * as wijmo from \"@grapecity/wijmo\";\r\nimport { toPng } from \"html-to-image\";\r\nimport PropTypes from 'prop-types';\r\nimport ErrorBoundary from '../../ErrorBoundary';\r\nimport { DataTable } from '@scuf/datatable';\r\nimport * as Utilities from '../../../JS/Utilities';\r\nimport { connect } from 'react-redux';\r\nimport LACSeriesChart from '../Common/Charts/LACSeriesChart';\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\nimport { LoadingPage } from '../../UIBase/Common/LoadingPage';\r\nimport DashboardCard from '../Common/Charts/WidgetOutlines/DashboardCard';\r\n\r\nclass ProductDemandForecastingDetailsComposite extends React.Component {\r\n    state = {\r\n        chartRef: React.createRef(),\r\n        isDownloading: false,\r\n    }\r\n\r\n    downloadBtnClick = (t, overallCapacity, inventory, uom) => {\r\n        this.setState({\r\n            isDownloading: true\r\n        }, () => {\r\n            let doc = new wijmoPdf.PdfDocument({\r\n                // method to execute on end\r\n                ended: (s, e) => {\r\n                    if (e.blob) {\r\n                        this.setState({ isDownloading: false }, () => {\r\n                            wijmoPdf.saveBlob(e.blob, \"ProductDemandForecast.pdf\");\r\n                        })\r\n                    }\r\n                },\r\n                pageSettings: {\r\n                    margins: {\r\n                        left: 20,\r\n                        top: 20,\r\n                        right: 20,\r\n                        bottom: 20,\r\n                    },\r\n                    layout: wijmoPdf.PdfPageOrientation.Portrait,\r\n                }\r\n            });\r\n\r\n            try {\r\n                toPng(\r\n                    this.state.chartRef.hostElement,\r\n                    { cacheBust: true }\r\n                ).then(url => {\r\n                    let colWidth = 140, rowHeight = 30;\r\n                    // report header\r\n                    doc.drawText(t(\"ProductDemandForecast_Report\"), null, null, {\r\n                        align: wijmoPdf.PdfTextHorizontalAlign.Center,\r\n                        font: new wijmoPdf.PdfFont('times', 16, 'normal', 'bold'),\r\n                        lineGap: 40\r\n                    });\r\n\r\n                    // base product details\r\n                    doc.drawText(t(\"ProductDemandForecast_Product\"), 0, doc.y, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold'),\r\n                        continued: true\r\n                    });\r\n\r\n                    doc.drawText(this.props.baseProduct, null, null, {\r\n                        continued: true,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'normal')\r\n                    });\r\n\r\n                    // exported date\r\n                    doc.drawText(t(\"ProductForecast_PrintDate\"), 265, doc.y, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold'),\r\n                        continued: true\r\n                    });\r\n                    doc.drawText(new Date().toLocaleString(), null, null, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'normal'),\r\n                    });\r\n\r\n                    // selected forecasting period\r\n                    doc.drawText(t(\"ProductDemandForecast_Duration\"), null, null, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold'),\r\n                        continued: true\r\n                    });\r\n\r\n                    doc.drawText(new Date().toLocaleDateString() + \" - \" + this.props.endDate.toLocaleDateString(), null, null, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'normal'),\r\n                        lineGap: 20\r\n                    });\r\n\r\n                    let x = 0;\r\n                    let y = doc.y;\r\n\r\n                    // selected tank details\r\n                    doc.paths.rect(x, y, 560, rowHeight).stroke();\r\n\r\n                    doc.drawText(t(\"Tank_Details_Label\") + \": \", x + 2, y + 2, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold'),\r\n                        continued: true\r\n                    });\r\n\r\n                    // overall capacity and available inventory of selected tanks\r\n                    doc.drawText(t(\"Overall_Capacity_Label\") + \"- \" + String(overallCapacity) + \" \" + uom + \", \" + t(\"Inventory_Label\") + \"- \" + String(inventory) + \" \" + uom, doc.x, y + 2, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'normal'),\r\n                    });\r\n\r\n                    y += rowHeight;\r\n\r\n                    // table to show list of selected tanks\r\n                    doc.paths.rect(x, y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"TankCode\"), x + 2, y + 2, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + colWidth, y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_Inventory\", [uom]), x + colWidth + 2, y + 2, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (2 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_Capacity\", [uom]), x + (2 * colWidth) + 2, y + 2, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (3 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"TankInfo_Mode\"), x + (3 * colWidth) + 2, y + 2, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n\r\n                    // columns in the tanks list data object\r\n                    let tankColumns = [\"Code\", \"Capacity\", \"GrossQuantity\", \"TankMode\"];\r\n                    // for each tank, create a table row and populate respective columns\r\n                    this.props.selectedTanks.forEach((tank) => {\r\n                        y += rowHeight;\r\n                        // if current 'y' position exceeds document height, add a new page\r\n                        if (y >= doc.height) {\r\n                            y = 0;\r\n                            doc.addPage();\r\n                        }\r\n\r\n                        // for each column, create a cell and populate data\r\n                        tankColumns.forEach((col, index) => {\r\n                            let cellText = tank[col] === null || tank[col] === undefined ?\r\n                                \"\" : String(tank[col]);\r\n                            if (col === \"Code\") {\r\n                                if (!tank[\"Active\"]) {\r\n                                    cellText += \" (\" + t(\"ProductForecast_InactiveTank\") + \")\";\r\n                                }\r\n                                else {\r\n                                    cellText += \" (\" + t(\"ProductForecast_ActiveTank\") + \")\";\r\n                                }\r\n                            }\r\n\r\n                            // create and populate table cell\r\n                            doc.paths.rect(x + (index * colWidth), y, colWidth, rowHeight).stroke();\r\n                            doc.drawText(cellText, x + (index * colWidth) + 2, y + 2, {\r\n                                font: new wijmoPdf.PdfFont(\"times\", 12, \"normal\", \"normal\"),\r\n                                width: colWidth - 2\r\n                            });\r\n                        });\r\n                    })\r\n\r\n                    // if current 'y' position is greater than half of doc height, add new page\r\n                    if (doc.y > doc.height / 2) {\r\n                        doc.addPage();\r\n                    }\r\n                    // else move 'y' position down by 3 units\r\n                    else {\r\n                        doc.moveDown(3);\r\n                    }\r\n\r\n                    let currentDate = new Date();\r\n                    currentDate.setHours(0, 0, 0, 0);\r\n                    doc.drawText(t(\"ProductDemandForecast_ForecastTableDetails\", [Utilities.DateDiffInDays(currentDate, this.props.endDate)]), 0, doc.y, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold'),\r\n                        lineGap: 20\r\n                    });\r\n\r\n                    // dividing the table into 7/8 columns based on Slot Availability feature\r\n                    colWidth = (this.props.isSlotEnabled ? 70 : 80); rowHeight = 40; y = doc.y;\r\n\r\n                    // add row headers for forecast details table\r\n                    doc.paths.rect(x, y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_Date\"), x + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + colWidth, y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_OpeningInventory\", [uom]), x + colWidth + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (2 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_OpeningUllage\", [uom]), x + (2 * colWidth) + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (3 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_PlannedReceipts\", [uom]), x + (3 * colWidth) + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (4 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_PlannedShipments\", [uom]), x + (4 * colWidth) + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (5 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_ClosingInventory\", [uom]), x + (5 * colWidth) + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n                    doc.paths.rect(x + (6 * colWidth), y, colWidth, rowHeight).stroke();\r\n                    doc.drawText(t(\"ProductForecast_ClosingUllage\", [uom]), x + (6 * colWidth) + 2, y + 2, {\r\n                        width: colWidth - 2,\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                    });\r\n\r\n                    let forecastColumns = [\"ForecastDate\", \"OpenInventory\", \"OpenUllage\", \"PlannedReceiptQty\", \"ShipQtyDemand\", \"CloseInventory\", \"CloseUllage\"];\r\n\r\n                    // if slot availability feature is available, add Slot Availability column\r\n                    if (this.props.isSlotEnabled) {\r\n                        doc.paths.rect(x + (7 * colWidth), y, colWidth, rowHeight).stroke();\r\n                        doc.drawText(t(\"ProductForecast_SlotAvailability\"), x + (7 * colWidth) + 2, y + 2, {\r\n                            width: colWidth - 2,\r\n                            font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold')\r\n                        });\r\n\r\n                        forecastColumns.push([\"ROADSlots\", \"MarineSlots\"])\r\n                    }\r\n\r\n                    // add table row for each day\r\n                    this.props.forecastDetails.forEach(row => {\r\n                        y += rowHeight;\r\n                        // if current 'y' position exceeds document height, add a new page\r\n                        if (y >= doc.height - 20) {\r\n                            y = 0;\r\n                            doc.addPage();\r\n                        }\r\n\r\n                        // add table cell for each column\r\n                        forecastColumns.forEach((col, index) => {\r\n                            let cellText = \"\";\r\n                            let xPad = 2;\r\n                            doc.paths.rect(x + (index * colWidth), y, colWidth, rowHeight).stroke();\r\n                            // for slot availability column\r\n                            if (index === 7) {\r\n                                cellText = \"Not Available\"\r\n                                if (row[col[0]] > 0) {\r\n                                    cellText = \"Truck\";\r\n                                }\r\n                                if (row[col[1]] > 0) {\r\n                                    cellText = (cellText === \"Truck\") ? (cellText + \" | Marine\") : \"Marine\";\r\n                                }\r\n                            } else {\r\n                                cellText = String(row[col]);\r\n                            }\r\n\r\n                            // draw 'circle' based planned shipments quantity value\r\n                            if (col === \"ShipQtyDemand\") {\r\n                                // if shipments quantity is well below available inventory, draw green circle\r\n                                let color = \"green\";\r\n                                // mass/volume tolerance value based on product\r\n                                const tolerance = this.props.isVolume ? this.props.configuration.tolerance.Volume : this.props.configuration.tolerance.Mass;\r\n                                // if shipments quantity exceeds available inventory, draw red circle\r\n                                if (Number(row[col]) > row[\"OpenInventory\"]) {\r\n                                    color = \"red\";\r\n                                }\r\n                                // if shipments quantity is close the available inventory (based on tolerance), draw yellow circle\r\n                                else if (Number(row[col]) + Number(tolerance) > row[\"OpenInventory\"]) {\r\n                                    color = \"yellow\";\r\n                                }\r\n                                xPad = 12;\r\n                                doc.paths.circle(x + (index * colWidth) + 5, y + 6, 4).fill(new wijmo.Color(color));\r\n                            }\r\n\r\n                            doc.drawText(cellText, x + (index * colWidth) + xPad, y + 2, {\r\n                                width: colWidth - xPad,\r\n                                font: new wijmoPdf.PdfFont('times', 12, 'normal', 'normal')\r\n                            });\r\n                        });\r\n                    })\r\n\r\n                    // add new page for forecast overview chart\r\n                    doc.addPage();\r\n\r\n                    doc.drawText(t(\"ProductDemandForecast_ForecastOverview\"), null, null, {\r\n                        font: new wijmoPdf.PdfFont('times', 12, 'normal', 'bold'),\r\n                        lineGap: 20\r\n                    });\r\n\r\n                    // draw the image generated by 'toPng'\r\n                    doc.drawImage(url, undefined, undefined, {\r\n                        width: 560,\r\n                        align: wijmoPdf.PdfImageHorizontalAlign.Center,\r\n                    });\r\n\r\n                    // call end() method\r\n                    doc.end();\r\n                }).catch(error => {\r\n                    console.log(\"Error converting HTML to image: \", error);\r\n                    this.setState({ isDownloading: false });\r\n                })\r\n\r\n            }\r\n            catch (error) {\r\n                this.setState({ isDownloading: false });\r\n                console.log(\"Error generating PDF: \", error);\r\n            }\r\n        });\r\n    }\r\n\r\n    setRefs = (key, ref, sequence) => {\r\n        this.setState({\r\n            chartRef: ref\r\n        });\r\n    }\r\n\r\n    fetchChartConfiguration = (t, tolerance, uom, overAllCapacity) => {\r\n        let chartInfo = {}\r\n        if (Array.isArray(this.props.forecastDetails)) {\r\n            chartInfo = {\r\n                JSONFormat: '{\"Chart\": {\"ChartDetails\": {\"bindings\": {\"seriesSource\": \"Table\"}, \"common\": {\"bindingX\": \"ForecastDate\", \"ChartType\": \"Line\", \"name\": \"Days\"}, \"chartLegend\": {\"position\":\"Right\"}, \"seriesData\": [{\"name\": \"Default_lblShipment\", \"binding\": \"ShipQtyDemand\", \"chartType\": \"Column\"}, {\"name\": \"Inventory_Label\", \"binding\": \"OpenInventory\", \"chartType\": \"Area\"}], \"chartAxis\": [{\"wjProperty\": \"axisY\", \"title\": \"' + t(\"ProductForecast_Quantity\", [uom]) + '\", \"axisLine\": true, \"position\": \"Left\"}]}, \"Thresholds\": [{\"Value\":' + tolerance +\r\n                    ', \"Name\": \"Tolerance_Level\", \"tooltipContent\": {\"Label\":\"Tolerance_Level\", \"Value\": \"{y}\"}}, {\"Value\": ' + String(overAllCapacity) + ', \"Name\": \"Total_Capacity\", \"tooltipContent\": {\"Label\": \"Total_Capacity\", \"Value\":\"{y}\"}}]}}',\r\n                KPIData: { Table: this.props.forecastDetails }\r\n            }\r\n        }\r\n\r\n        return chartInfo;\r\n    }\r\n\r\n    render() {\r\n        let overAllCapacity = 0, inventory = 0;\r\n        // configured mass/volume uom based on product\r\n        const uom = (this.props.isVolume ? this.props.configuration.uoms.Volume : this.props.configuration.uoms.Mass);\r\n        // configured mass/volume tolerance based on product\r\n        const tolerance = String(this.props.isVolume ? this.props.configuration.tolerance.Volume : this.props.configuration.tolerance.Mass);\r\n\r\n        // calculate overallCapacity & available inventory for selected tanks\r\n        if (Array.isArray(this.props.selectedTanks)) {\r\n            this.props.selectedTanks.forEach(tank => {\r\n                overAllCapacity += Number(tank.Capacity);\r\n                inventory += Number(tank.GrossQuantity);\r\n            });\r\n        }\r\n\r\n        let currentDate = new Date();\r\n        currentDate.setHours(0, 0, 0, 0);\r\n\r\n        return (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <TranslationConsumer>\r\n                        {\r\n                            (t) => (\r\n                                <div>\r\n                                    <div className='row'>\r\n                                        <div className='col-12'>\r\n                                            <Button\r\n                                                className='btn-download-product-forecast'\r\n                                                type='primary'\r\n                                                onClick={() => this.downloadBtnClick(t, overAllCapacity, inventory, uom)}\r\n                                                disabled={!this.props.isChartDataReady || this.state.isDownloading}\r\n                                                actionType='button'>\r\n                                                {t(\"Chart_Download\")}\r\n                                            </Button>\r\n                                        </div>\r\n                                        <div className='col-12 col-md-12 col-lg-5 col-xxl-4'>\r\n                                            <div className='row'>\r\n                                                <div className='col-12'>\r\n                                                    <Select\r\n                                                        options={this.props.baseProductsList}\r\n                                                        multiple={false}\r\n                                                        disabled={this.state.isDownloading}\r\n                                                        placeholder={t(\"Common_Select\")}\r\n                                                        label={t(\"BPCode\")}\r\n                                                        value={this.props.baseProduct}\r\n                                                        onChange={val => this.props.onChange(\"BaseProduct\", val)}\r\n                                                        reserveSpace={false}\r\n                                                        error={t(this.props.validationErrors.BaseProduct)}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className='row'>\r\n                                                <div className='col-12 col-md-10 p-0'>\r\n                                                    <div className='row m-0 p-0'>\r\n                                                        <div className='col-12 col-md-6 product-demand-forecasting-date'>\r\n                                                            <DatePicker\r\n                                                                disabled={true}\r\n                                                                label={t(\"From\")}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                type=\"date\"\r\n                                                                reserveSpace={false}\r\n                                                                value={new Date()} />\r\n                                                        </div>\r\n                                                        <div className='col-12 col-md-6 product-demand-forecasting-date'>\r\n                                                            <DatePicker\r\n                                                                type=\"date\"\r\n                                                                disabled={this.state.isDownloading}\r\n                                                                label={t('To')}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                disablePast={true}\r\n                                                                onChange={val => this.props.onChange(\"EndDate\", val)}\r\n                                                                onTextChange={val => this.props.onChange(\"EndDate\", val)}\r\n                                                                value={this.props.endDate}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div>\r\n                                                        {\r\n                                                            this.props.validationErrors.EndDate !== \"\" ?\r\n                                                                <div className='col-12 below-text'>\r\n                                                                    <span className='ui error-message'>\r\n                                                                        {t(this.props.validationErrors.EndDate, [this.props.configuration.maxDuration])}\r\n                                                                    </span>\r\n                                                                </div> : null\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='col-12 col-md-2 mt-md-4 pl-md-0'>\r\n                                                    <Button\r\n                                                        type=\"primary\"\r\n                                                        className='product-demand-forecast-go-btn'\r\n                                                        actionType=\"button\"\r\n                                                        disabled={this.props.isLoading || this.state.isDownloading}\r\n                                                        onClick={this.props.onGoClick}>\r\n                                                        {t(\"Common_Go\")}\r\n                                                    </Button>\r\n                                                </div>\r\n                                            </div>\r\n                                            {\r\n                                                (this.props.baseProduct !== null &&\r\n                                                    this.props.baseProduct !== undefined &&\r\n                                                    this.props.baseProduct !== \"\") ?\r\n                                                    <>\r\n                                                        <div className='row'>\r\n                                                            <div className='col-12'>\r\n                                                                <span>\r\n                                                                    {t(\"Tank_Details_Label\")}: {t(\"Overall_Capacity_Label\")} {overAllCapacity} {uom} | {t(\"Inventory_Label\")}: {inventory} {uom}\r\n                                                                </span>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className='row'>\r\n                                                            {\r\n                                                                this.props.validationErrors.Tanks !== \"\" ?\r\n                                                                    <div className='col-12 below-text'>\r\n                                                                        <span className='ui error-message'>{t(this.props.validationErrors.Tanks)}</span>\r\n                                                                    </div> : null\r\n                                                            }\r\n                                                            <div className='col-12'>\r\n                                                                <DataTable\r\n                                                                    data={this.props.tanks}\r\n                                                                    lazy={true}\r\n                                                                    scrollable={true}\r\n                                                                    className='tank-grid-product-forecast'\r\n                                                                    scrollHeight=\"173px\"\r\n                                                                    showHeader={true}\r\n                                                                    selection={this.props.selectedTanks}\r\n                                                                    onSelectionChange={this.props.onTankSelection}\r\n                                                                    onSelectAll={this.props.onTankSelection}\r\n                                                                    selectionMode={\"multiple\"}\r\n                                                                >\r\n                                                                    <DataTable.Column\r\n                                                                        field='Code'\r\n                                                                        header={t(\"TankCode\")}\r\n                                                                        renderer={(cellData) => {\r\n                                                                            return (\r\n                                                                                <Tooltip\r\n                                                                                    element={\r\n                                                                                        <span\r\n                                                                                            style={{\r\n                                                                                                color: (cellData.rowData.Active ? \"#14b614\" : \"red\")\r\n                                                                                            }}>\r\n                                                                                            {cellData.value}\r\n                                                                                        </span>\r\n                                                                                    }\r\n                                                                                    hover={true}\r\n                                                                                    event=\"hover\"\r\n                                                                                    content={t(cellData.rowData.Active ? \"ProductForecast_ActiveTank\" : \"ProductForecast_InactiveTank\")}\r\n                                                                                />\r\n                                                                            );\r\n                                                                        }} />\r\n                                                                    <DataTable.Column field='GrossQuantity' header={t(\"ProductForecast_Inventory\", [uom])} />\r\n                                                                    <DataTable.Column field='Capacity' header={t(\"ProductForecast_Capacity\", [uom])} />\r\n                                                                    <DataTable.Column\r\n                                                                        field='TankMode'\r\n                                                                        header={t(\"TankInfo_Mode\")}\r\n                                                                        renderer={(cellData) => t(cellData.value)} />\r\n                                                                </DataTable>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </> : null\r\n                                            }\r\n                                        </div>\r\n                                        {\r\n                                            this.props.isChartDataReady ?\r\n                                                <div className='col-12 col-md-12 col-lg-7 col-xxl-8'>\r\n                                                    <DashboardCard\r\n                                                        header={t(\"ProductDemandForecast_ForecastOverview\")}\r\n                                                        childCount={0}\r\n                                                        isExportRequired={false}\r\n                                                        className=\"product-forecast-chart\">\r\n                                                        <LACSeriesChart\r\n                                                            kpiInfo={this.fetchChartConfiguration(t, tolerance, uom, overAllCapacity)}\r\n                                                            setChartRefs={this.setRefs}\r\n                                                        />\r\n                                                    </DashboardCard>\r\n                                                </div> : (\r\n                                                    this.props.isLoading ?\r\n                                                        <div className='col-12 col-md-12 col-lg-7 col-xxl-8'>\r\n                                                            <LoadingPage message=\"Loading\" />\r\n                                                        </div>\r\n                                                        : null\r\n                                                )\r\n                                        }\r\n                                    </div>\r\n                                    {\r\n                                        this.props.isChartDataReady ?\r\n                                            <div className='row'>\r\n                                                <div className='col-12 col-md-12 col-lg-6'>\r\n                                                    <span>\r\n                                                        {t(\r\n                                                            \"ProductDemandForecastGridHeader\",\r\n                                                            [\r\n                                                                Utilities.DateDiffInDays(currentDate, this.props.endDate),\r\n                                                                this.props.baseProduct,\r\n                                                                currentDate.toLocaleDateString(),\r\n                                                                this.props.endDate.toLocaleDateString()\r\n                                                            ]\r\n                                                        )}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className='col-12 col-md-12 col-lg-6'>\r\n                                                    <span style={{ float: \"right\", fontStyle: \"italic\", color: \"#a0a0a0\" }}>\r\n                                                        {t(\"ProductDemandForecastDisclaimer\")}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className='col-12'>\r\n                                                    <DataTable\r\n                                                        data={this.props.forecastDetails}\r\n                                                        lazy={true}\r\n                                                        scrollable={true}\r\n                                                        scrollHeight={\"300px\"}\r\n                                                        showHeader={true}\r\n                                                        className=\"forecast-details-table\"\r\n                                                        columnResizeMode=\"fit\"\r\n                                                        resizableColumns={true}\r\n                                                    >\r\n                                                        <DataTable.Column field='ForecastDate' header={t(\"ProductForecast_Date\")} />\r\n                                                        <DataTable.Column field='OpenInventory' header={t(\"ProductForecast_OpeningInventory\", [uom])} />\r\n                                                        <DataTable.Column field='OpenUllage' header={t(\"ProductForecast_OpeningUllage\", [uom])} />\r\n                                                        <DataTable.Column field='PlannedReceiptQty' header={t(\"ProductForecast_PlannedReceipts\", [uom])} />\r\n                                                        <DataTable.Column\r\n                                                            field='ShipQtyDemand'\r\n                                                            header={t(\"ProductForecast_PlannedShipments\", [uom])}\r\n                                                            renderer={(cellData) => {\r\n                                                                let icon = null;\r\n                                                                if (cellData.value > cellData.rowData.OpenInventory) {\r\n                                                                    icon = <Icon root='building' className='pr-2' name=\"close-circled\" size=\"small\" color='red' />\r\n                                                                }\r\n                                                                else if ((cellData.value + Number(tolerance)) > cellData.rowData.OpenInventory) {\r\n                                                                    icon = <Icon name=\"badge-warning\" className='pr-2' color=\"yellow\" size=\"small\" />\r\n                                                                }\r\n                                                                else {\r\n                                                                    icon = <Icon root=\"common\" name='badge-check' className='pr-2' size=\"small\" color=\"green\" />\r\n                                                                }\r\n\r\n                                                                return (\r\n                                                                    <span>\r\n                                                                        {icon}\r\n                                                                        {cellData.value}\r\n                                                                    </span>\r\n                                                                )\r\n                                                            }} />\r\n                                                        <DataTable.Column field='CloseInventory' header={t(\"ProductForecast_ClosingInventory\", [uom])} />\r\n                                                        <DataTable.Column field='CloseUllage' header={t(\"ProductForecast_ClosingUllage\", [uom])} />\r\n                                                        {\r\n                                                            this.props.isSlotEnabled ?\r\n                                                                <DataTable.Column\r\n                                                                    field='ROADSlots'\r\n                                                                    header={\r\n                                                                        <span>\r\n                                                                            {t(\"ProductForecast_SlotAvailability\")}\r\n                                                                            <span className='px-1' style={{ fontSize: \"8px\" }}>({t(\"Common_Receipts\")})</span>\r\n                                                                        </span>\r\n                                                                    }\r\n                                                                    renderer={(cellData) => {\r\n                                                                        let roadColor = (cellData.rowData.ROADSlots === 0 ? \"red\" : \"inherit\");\r\n                                                                        let marineColor = (cellData.rowData.MarineSlots === 0 ? \"red\" : \"inherit\");\r\n                                                                        return (\r\n                                                                            <span>\r\n                                                                                <span\r\n                                                                                    className='icon-Road'\r\n                                                                                    style={{ color: roadColor }}></span>\r\n                                                                                <span\r\n                                                                                    className='pl-1'\r\n                                                                                    style={{ color: roadColor }}>\r\n                                                                                    {t(\"Common_Truck\")}\r\n                                                                                </span>\r\n                                                                                <span> | </span>\r\n                                                                                <span\r\n                                                                                    className='icon-Marine'\r\n                                                                                    style={{ color: marineColor }}>\r\n                                                                                </span>\r\n                                                                                <span\r\n                                                                                    className='pl-1'\r\n                                                                                    style={{ color: marineColor }}>\r\n                                                                                    {t(\"Marine\")}\r\n                                                                                </span>\r\n                                                                            </span>\r\n                                                                        )\r\n                                                                    }}\r\n                                                                /> : null\r\n                                                        }\r\n                                                    </DataTable>\r\n                                                </div>\r\n                                            </div> : (\r\n                                                this.props.isLoading ?\r\n                                                    <div className='row'>\r\n                                                        <div className='col-12'>\r\n                                                            <LoadingPage message=\"Loading\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    : null\r\n                                            )\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </TranslationConsumer>\r\n                </ErrorBoundary>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nProductDemandForecastingDetailsComposite.propTypes = {\r\n    baseProductsList: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    terminal: PropTypes.string.isRequired,\r\n    baseProduct: PropTypes.string.isRequired,\r\n    endDate: PropTypes.any.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    tanks: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    configuration: PropTypes.object.isRequired,\r\n    onGoClick: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n    forecastDetails: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    isChartDataReady: PropTypes.bool\r\n}\r\n\r\nProductDemandForecastingDetailsComposite.defaultProps = {\r\n    isChartDataReady: false,\r\n    isLoading: false\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProductDemandForecastingDetailsComposite);","import React, { Component } from \"react\";\r\nimport { SlotHeaderUserActionsComposite } from \"../Common/SlotBook/SlotHeaderUserActionsComposite\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { connect } from \"react-redux\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport ProductDemandForecastingDetailsComposite from \"../Details/ProductDemandForecastingDetailsComposite\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\n\r\nclass ProductDemandForecastComposite extends Component {\r\n    state = {\r\n        terminals: [],\r\n        selectedTerminal: { Key: { Code: \"\" }, Value: [] },\r\n        baseProducts: [],\r\n        selectedBaseProduct: \"\",\r\n        selectedDate: \"\",\r\n        operationsVisibilty: {\r\n            terminal: true,\r\n        },\r\n        productForecastDetails: [],\r\n        validationErrors: {\r\n            BaseProduct: \"\",\r\n            EndDate: \"\",\r\n            Tanks: \"\"\r\n        },\r\n        isReadyToRender: false,\r\n        tanksInfo: [],\r\n        selectedTanks: [],\r\n        config: {\r\n            uoms: { Mass: '', Volume: '' },\r\n            maxDuration: 30,\r\n            tolerance: { Mass: 10000, Volume: 10000 }\r\n        },\r\n        isLoading: false,\r\n        isChartDataReady: false,\r\n        isVolume: true,\r\n        isSlotEnabled: false,\r\n        errorMessage: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        try {\r\n            this.getInitialConfigurations();\r\n        } catch (error) {\r\n            console.log(\r\n                \"ProductDemandForecastComposite:Error occured on componentDidMount\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    getInitialConfigurations() {\r\n        this.getTerminals();\r\n    }\r\n\r\n    showNotification = (notification) => {\r\n        toast(\r\n            <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n                autoClose:\r\n                    notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n        );\r\n    }\r\n\r\n    // fetch available terminals\r\n    getTerminals() {\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"TerminalList_NotAvailable\",\r\n            messageResultDetails: [],\r\n        };\r\n        try {\r\n            axios(\r\n                RestAPIs.GetTerminalDetailsForFeature + \"3\",\r\n                // RestAPIs.GetTerminalDetailsForUser,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (\r\n                            Array.isArray(result.EntityResult) &&\r\n                            result.EntityResult.length > 0\r\n                        ) {\r\n                            this.setState(\r\n                                {\r\n                                    terminals: result.EntityResult,\r\n                                    selectedTerminal: result.EntityResult[0],\r\n                                },\r\n                                () => {\r\n                                    this.FetchProductDemandForecastConfiguration();\r\n                                }\r\n                            );\r\n                        } else {\r\n                            console.log(\"Error while getting Terminal List:\", result);\r\n                            this.showNotification(notification);\r\n                            this.setState({ isReadyToRender: true, errorMessage: notification.message });\r\n                        }\r\n                    } else {\r\n                        notification.messageResultDetails = [{\r\n                            keyFields: \"\",\r\n                            keyValues: [],\r\n                            isSuccess: false,\r\n                            errorMessage: result.ErrorList[0]\r\n                        }];\r\n                        console.log(\"Error while getting Terminal List:\", result);\r\n                        this.showNotification(notification);\r\n                        this.setState({ isReadyToRender: true, errorMessage: notification.message });\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    notification.messageResultDetails = [{\r\n                        keyFields: \"\",\r\n                        keyValues: [this.state.selectedBaseProduct],\r\n                        isSuccess: false,\r\n                        errorMessage: error\r\n                    }];\r\n                    this.showNotification(notification);\r\n                    this.setState({ isReadyToRender: true, errorMessage: notification.message });\r\n                    console.log(\"Error while getting Terminal List:\", error);\r\n                });\r\n        }\r\n        catch (error) {\r\n            notification.messageResultDetails = [{\r\n                keyFields: \"\",\r\n                keyValues: [this.state.selectedBaseProduct],\r\n                isSuccess: false,\r\n                errorMessage: error\r\n            }];\r\n            console.log(\"Error in getTerminals(): \", error);\r\n            this.showNotification(notification);\r\n            this.setState({ isReadyToRender: true, errorMessage: notification.message });\r\n        }\r\n    }\r\n\r\n    // fetch configuration for product demand forecasting\r\n    FetchProductDemandForecastConfiguration = () => {\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"ProductForecastConfiguration_NotAvailable\",\r\n            messageResultDetails: [],\r\n        };\r\n\r\n        try {\r\n            axios(\r\n                RestAPIs.GetProductForecastConfiguration + \"?TerminalCode=\" + this.state.selectedTerminal.Key.Code + \"&GetIfEmpty=true\",\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            ).then(response => {\r\n                if (response.data.IsSuccess) {\r\n                    if (Array.isArray(response.data.EntityResult.ProductForecastParams) &&\r\n                        response.data.EntityResult.ProductForecastParams.length > 0) {\r\n                        // if configuration is not available, show notification\r\n                        if (response.data.EntityResult.ProductForecastParams.filter(param => param.Value === \"\").length > 0) {\r\n                            this.showNotification(notification);\r\n                            this.setState({ isReadyToRender: true, errorMessage: notification.message });\r\n                        }\r\n                        else {\r\n                            // populate state with configuration values\r\n                            this.setState({\r\n                                config: {\r\n                                    ...this.state.config,\r\n                                    uoms: {\r\n                                        Mass: response.data.EntityResult.ProductForecastParams.filter(param => param.Name === \"MassUOM\")[0].Value,\r\n                                        Volume: response.data.EntityResult.ProductForecastParams.filter(param => param.Name === \"VolumeUOM\")[0].Value\r\n                                    },\r\n                                    maxDuration: response.data.EntityResult.ProductForecastParams.filter(param => param.Name === \"MaxDuration\")[0].Value,\r\n                                    tolerance: {\r\n                                        Mass: response.data.EntityResult.ProductForecastParams.filter(param => param.Name === \"ToleranceLimitMass\")[0].Value,\r\n                                        Volume: response.data.EntityResult.ProductForecastParams.filter(param => param.Name === \"ToleranceLimitVolume\")[0].Value\r\n                                    }\r\n                                }\r\n                            }, () => {\r\n                                // fetch base products for the terminal\r\n                                this.GetBaseProducts(this.state.selectedTerminal.Key.Code);\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.showNotification(notification);\r\n                        this.setState({ isReadyToRender: true, errorMessage: notification.message });\r\n                    }\r\n                }\r\n                else {\r\n                    notification.messageResultDetails = [{\r\n                        keyFields: \"\",\r\n                        keyValues: [this.state.selectedTerminal.Key.Code],\r\n                        isSuccess: false,\r\n                        errorMessage: response.data.ErrorList[0]\r\n                    }];\r\n                    this.showNotification(notification);\r\n                    this.setState({ isReadyToRender: true, errorMessage: \"\" });\r\n                }\r\n            }).catch(error => {\r\n                notification.messageResultDetails = [{\r\n                    keyFields: \"\",\r\n                    keyValues: [this.state.selectedBaseProduct],\r\n                    isSuccess: false,\r\n                    errorMessage: error\r\n                }];\r\n                console.log(\"Error in fetch ProductForecastingConfiguration: \", error);\r\n                this.showNotification(notification);\r\n                this.setState({ isReadyToRender: true, errorMessage: \"\" });\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in FetchProductDemandForecastConfiguration: \", error);\r\n            this.showNotification(notification);\r\n            this.setState({ isReadyToRender: true, errorMessage: \"\" });\r\n        }\r\n    }\r\n\r\n    // get base products for the terminal (excluding additives)\r\n    GetBaseProducts(terminal) {\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"BaseProductList_NotAvailable\",\r\n            messageResultDetails: [],\r\n        };\r\n        if (terminal !== null && terminal !== undefined && terminal !== \"\") {\r\n            axios(\r\n                RestAPIs.GetBaseProductsForTerminal +\r\n                \"?TerminalCode=\" +\r\n                terminal +\r\n                \"&isAdditiveIncluded=\" +\r\n                false,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess) {\r\n                        if (Array.isArray(result.EntityResult)) {\r\n                            // update state\r\n                            this.setState({\r\n                                baseProducts: result.EntityResult.map(bp => ({ text: bp, value: bp })),\r\n                                isReadyToRender: true\r\n                            });\r\n                        }\r\n                        else {\r\n                            this.showNotification(notification);\r\n                        }\r\n                    } else {\r\n                        notification.messageResultDetails = [{\r\n                            keyFields: \"\",\r\n                            keyValues: [this.state.selectedBaseProduct],\r\n                            isSuccess: false,\r\n                            errorMessage: result.ErrorList[0]\r\n                        }];\r\n                        this.showNotification(notification);\r\n                        console.log(\"Error in getBaseProductList:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    notification.messageResultDetails = [{\r\n                        keyFields: \"\",\r\n                        keyValues: [this.state.selectedTerminal.Key.Code],\r\n                        isSuccess: false,\r\n                        errorMessage: error\r\n                    }];\r\n                    this.showNotification(notification);\r\n                    console.log(\"Error while getting Base Product List:\", error);\r\n                });\r\n        }\r\n    }\r\n\r\n    // get list of tanks for selected base product\r\n    getTankDetails() {\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"TankList_NotAvailable\",\r\n            messageResultDetails: [],\r\n        };\r\n        try {\r\n            // populate key data with terminal and base product codes\r\n            const keyData = {\r\n                keyDataCode: 0,\r\n                ShareHolderCode: \"\",\r\n                KeyCodes: [\r\n                    { Key: KeyCodes.terminalCode, Value: this.state.selectedTerminal.Key.Code },\r\n                    { Key: KeyCodes.baseProductCode, Value: this.state.selectedBaseProduct },\r\n                ],\r\n            };\r\n\r\n            axios(\r\n                RestAPIs.GetTanksForProductForecast,\r\n                Utilities.getAuthenticationObjectforPost(keyData, this.props.tokenDetails.tokenInfo)\r\n            ).then(response => {\r\n                if (response.data.IsSuccess) {\r\n                    if (Array.isArray(response.data.EntityResult.Table) && response.data.EntityResult.Table.length > 0) {\r\n                        // update state\r\n                        this.setState({\r\n                            tanksInfo: response.data.EntityResult.Table,\r\n                            selectedTanks: response.data.EntityResult.Table,\r\n                            isVolume: response.data.EntityResult.Table[0].IsVolume\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.showNotification(notification);\r\n                    }\r\n                }\r\n                else {\r\n                    notification.messageResultDetails = [{\r\n                        keyFields: \"\",\r\n                        keyValues: [this.state.selectedBaseProduct],\r\n                        isSuccess: false,\r\n                        errorMessage: response.data.ErrorList[0]\r\n                    }];\r\n                    this.showNotification(notification);\r\n                }\r\n            }).catch(error => {\r\n                notification.messageResultDetails = [{\r\n                    keyFields: \"\",\r\n                    keyValues: [this.state.selectedBaseProduct],\r\n                    isSuccess: false,\r\n                    errorMessage: error\r\n                }];\r\n                console.log(error);\r\n                this.showNotification(notification);\r\n            });\r\n        }\r\n        catch (error) {\r\n            notification.messageResultDetails = [{\r\n                keyFields: \"\",\r\n                keyValues: [this.state.selectedBaseProduct],\r\n                isSuccess: false,\r\n                errorMessage: error\r\n            }];\r\n            console.log(\"Error in getTankDetails(): \", error);\r\n            this.showNotification(notification);\r\n        }\r\n    }\r\n\r\n    // get forecast details\r\n    loadForecastDetails = () => {\r\n        if (this.validate()) {\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"ForecastDetails_NotAvailable\",\r\n                messageResultDetails: [],\r\n            };\r\n            try {\r\n                // populate key data with terminal, base product, duration and selected tanks\r\n                const keyData = {\r\n                    keyDataCode: 0,\r\n                    ShareHolderCode: \"\",\r\n                    KeyCodes: [\r\n                        { Key: KeyCodes.terminalCode, Value: this.state.selectedTerminal.Key.Code },\r\n                        { Key: KeyCodes.baseProductCode, Value: this.state.selectedBaseProduct },\r\n                        { Key: KeyCodes.forecastDate, Value: this.state.selectedDate.toISOString() },\r\n                        { Key: KeyCodes.forecastTanks, Value: JSON.stringify(this.state.selectedTanks.map(tank => tank.Code)) }\r\n                    ],\r\n                };\r\n                this.setState({ isLoading: true }, () => {\r\n                    axios(\r\n                        RestAPIs.GetProductForecastDetails,\r\n                        Utilities.getAuthenticationObjectforPost(keyData, this.props.tokenDetails.tokenInfo)\r\n                    ).then(response => {\r\n                        if (response.data.IsSuccess) {\r\n                            this.setState({\r\n                                productForecastDetails: response.data.EntityResult.Table,\r\n                                isChartDataReady: true,\r\n                                isLoading: false,\r\n                                isSlotEnabled: (Array.isArray(response.data.EntityResult.Table1) ?\r\n                                    response.data.EntityResult.Table1[0].SlotEnabled :\r\n                                    this.state.isSlotEnabled)\r\n                            });\r\n                        }\r\n                        else {\r\n                            notification.messageResultDetails = [{\r\n                                keyFields: \"\",\r\n                                keyValues: [],\r\n                                isSuccess: false,\r\n                                errorMessage: response.data.ErrorList[0]\r\n                            }];\r\n\r\n                            this.setState({ isLoading: false });\r\n\r\n                            this.showNotification(notification);\r\n                        }\r\n                    }).catch(error => {\r\n                        notification.messageResultDetails = [{\r\n                            keyFields: \"\",\r\n                            keyValues: [],\r\n                            isSuccess: false,\r\n                            errorMessage: error\r\n                        }];\r\n                        this.setState({ isLoading: false });\r\n                        console.log(error);\r\n                        this.showNotification(notification);\r\n                    })\r\n                });\r\n            }\r\n            catch (error) {\r\n                this.setState({ isLoading: false });\r\n                notification.messageResultDetails = [{\r\n                    keyFields: \"\",\r\n                    keyValues: [],\r\n                    isSuccess: false,\r\n                    errorMessage: error\r\n                }];\r\n                console.log(\"Error in loadForecastDetails(): \", error);\r\n                this.showNotification(notification);\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle control changes\r\n    handleChange = (property, value) => {\r\n        if (property === \"BaseProduct\") {\r\n            // update state\r\n            this.setState({\r\n                selectedBaseProduct: value,\r\n                validationErrors: {\r\n                    ...this.state.validationErrors,\r\n                    BaseProduct: \"\"\r\n                },\r\n                isChartDataReady: false,\r\n                productForecastDetails: [],\r\n                selectedTanks: [],\r\n                tanksInfo: [],\r\n            }, () => {\r\n                // fetch tank details on selection of base product\r\n                this.getTankDetails();\r\n            });\r\n        }\r\n        else if (property === \"EndDate\") {\r\n            // check if value is a valid 'Date'\r\n            let errorMsg = this.validateDate(value);\r\n            let endDate = new Date(value);\r\n            if (endDate.toString() === \"Invalid Date\") {\r\n                endDate = null;\r\n            }\r\n\r\n            this.setState({\r\n                selectedDate: endDate,\r\n                validationErrors: {\r\n                    ...this.state.validationErrors,\r\n                    EndDate: errorMsg\r\n                },\r\n                isChartDataReady: false,\r\n                productForecastDetails: []\r\n            });\r\n        }\r\n    }\r\n\r\n    // update selected tanks\r\n    onTanksSelection = (tanks) => {\r\n        this.setState({\r\n            selectedTanks: tanks,\r\n            validationErrors: {\r\n                ...this.state.validationErrors,\r\n                Tanks: \"\"\r\n            },\r\n            isChartDataReady: false,\r\n            productForecastDetails: []\r\n        });\r\n    }\r\n\r\n    // validate date\r\n    validateDate = (date) => {\r\n        let selectedDate = new Date(date);\r\n        let today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        if (selectedDate.toString() === \"Invalid Date\") {\r\n            return \"ProductReconciliationList_ToDateFormatInvalid\";\r\n        }\r\n        else if (selectedDate < today) {\r\n            return \"ProductReconciliationList_InvalidDateRange\";\r\n        }\r\n        else if (Utilities.DateDiffInDays(today, selectedDate) > this.state.config.maxDuration) {\r\n            return \"ProductForecast_MaxDurationExceed\";\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    // validate controls before fetching forecast details\r\n    validate = () => {\r\n        try {\r\n            let baseProductError = \"\", selectedTanksError = \"\";\r\n            if (this.state.selectedBaseProduct === null ||\r\n                this.state.selectedBaseProduct === undefined ||\r\n                this.state.selectedBaseProduct === \"\") {\r\n                baseProductError = \"ProductDemandForecast_BaseProductMandatory\";\r\n            }\r\n\r\n            let dateValidationError = this.validateDate(this.state.selectedDate);\r\n\r\n            if (!Array.isArray(this.state.selectedTanks) || this.state.selectedTanks.length === 0) {\r\n                selectedTanksError = \"ProductDemandForecast_TanksNotSelected\";\r\n            }\r\n\r\n            this.setState({\r\n                validationErrors: {\r\n                    ...this.state.validationErrors,\r\n                    BaseProduct: baseProductError,\r\n                    EndDate: dateValidationError,\r\n                    Tanks: selectedTanksError\r\n                }\r\n            });\r\n\r\n            if (baseProductError === \"\" &&\r\n                dateValidationError === \"\" &&\r\n                selectedTanksError === \"\") {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in validate(): \", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    handleTerminalChange = (terminalCode) => {\r\n        try {\r\n            let filteredTerminals = this.state.terminals.filter(terminal => terminal.Key.Code === terminalCode);\r\n            if (filteredTerminals.length > 0) {\r\n                this.setState({\r\n                    selectedTerminal: filteredTerminals[0],\r\n                    selectedBaseProduct: \"\",\r\n                    selectedTanks: [],\r\n                    selectedDate: \"\",\r\n                    baseProducts: [],\r\n                    isChartDataReady: false,\r\n                    validationErrors: {},\r\n                    config: {\r\n                        uoms: { Mass: '', Volume: '' },\r\n                        maxDuration: 30,\r\n                        tolerance: { Mass: 10000, Volume: 10000 }\r\n                    },\r\n                    tanksInfo: [],\r\n                    productForecastDetails: [],\r\n                    isLoading: false,\r\n                    isReadyToRender: false\r\n                }, () => {\r\n                    this.FetchProductDemandForecastConfiguration();\r\n                });\r\n            }\r\n            else {\r\n                this.showNotification({\r\n                    messageType: \"critical\",\r\n                    message: \"Invalid_Terminal\",\r\n                    messageResultDetails: [],\r\n                });\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in handleTerminalChange(): \", error);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TranslationConsumer>\r\n                    {(t) => (\r\n                        <>\r\n                            <ErrorBoundary>\r\n                                <SlotHeaderUserActionsComposite\r\n                                    operationsVisibilty={this.state.operationsVisibilty}\r\n                                    breadcrumbItem={this.props.activeItem}\r\n                                    terminals={this.state.terminals.map(function (a) {\r\n                                        return a.Key.Code;\r\n                                    })}\r\n                                    selectedTerminal={this.state.selectedTerminal.Key.Code}\r\n                                    onTerminalChange={this.handleTerminalChange}\r\n                                    handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n                                ></SlotHeaderUserActionsComposite>\r\n                            </ErrorBoundary>\r\n                            {\r\n                                this.state.isReadyToRender && this.state.config.uoms.Mass !== \"\" && this.state.config.uoms.Volume !== \"\" ?\r\n                                    <ErrorBoundary>\r\n                                        <ProductDemandForecastingDetailsComposite\r\n                                            baseProductsList={this.state.baseProducts}\r\n                                            baseProduct={this.state.selectedBaseProduct}\r\n                                            terminal={this.state.selectedTerminal}\r\n                                            endDate={this.state.selectedDate}\r\n                                            tanks={this.state.tanksInfo}\r\n                                            onChange={this.handleChange}\r\n                                            selectedTanks={this.state.selectedTanks}\r\n                                            onTankSelection={this.onTanksSelection}\r\n                                            validationErrors={this.state.validationErrors}\r\n                                            onGoClick={this.loadForecastDetails}\r\n                                            isLoading={this.state.isLoading}\r\n                                            configuration={this.state.config}\r\n                                            forecastDetails={this.state.productForecastDetails}\r\n                                            isChartDataReady={this.state.isChartDataReady}\r\n                                            isVolume={this.state.isVolume}\r\n                                            isSlotEnabled={this.state.isSlotEnabled}\r\n                                        />\r\n                                    </ErrorBoundary> : (\r\n                                        this.state.isReadyToRender && this.state.config.uoms.Mass === \"\" && this.state.config.uoms.Volume === \"\" ? <div>{t(this.state.errorMessage)}</div> :\r\n                                            <LoadingPage message=\"Loading\"></LoadingPage>\r\n                                    )\r\n                            }\r\n                            <ErrorBoundary>\r\n                                <ToastContainer\r\n                                    hideProgressBar={true}\r\n                                    closeOnClick={false}\r\n                                    closeButton={true}\r\n                                    newestOnTop={true}\r\n                                    position=\"bottom-right\"\r\n                                    toastClassName=\"toast-notification-wrap\"\r\n                                />\r\n                            </ErrorBoundary>\r\n                        </>\r\n                    )}\r\n                </TranslationConsumer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProductDemandForecastComposite);\r\n","export const carrierCode = \"CarrierCode\";\r\nexport const transportationType = \"TransportationType\";\r\nexport const shareholderCode = \"ShareHolderCode\";\r\nexport const driverCode = \"DriverCode\";\r\nexport const customerCode = \"CustomerCode\";\r\nexport const trailerCode = \"TrailerCode\";\r\nexport const originTerminalCode = \"OriginTerminalCode\";\r\nexport const primeMoverCode = \"PrimeMoverCode\";\r\nexport const vehicleCode = \"VehicleCode\";\r\nexport const destinationCode = \"DestinationCode\";\r\nexport const finishedProductCode = \"FinishedProductCode\";\r\nexport const shipmentCode = \"ShipmentCode\";\r\nexport const orderCode = \"OrderCode\";\r\nexport const receiptCode = \"ReceiptCode\";\r\nexport const suppliercode = \"SupplierCode\";\r\nexport const marineDispatchCode = \"MarineDispatchCode\";\r\nexport const marineReceiptCode = \"MarineReceiptCode\";\r\nexport const supplierCode = \"SupplierCode\";\r\nexport const contractCode = \"ContractCode\";\r\n\r\nexport const railDispatchCode = \"RailDispatchCode\";\r\nexport const railReceiptCode = \"RailReceiptCode\";\r\nexport const railRouteCode = \"RailRouteCode\";\r\nexport const wagonCode = \"WagonCode\";\r\n\r\nexport const compartmentCode = \"CompartmentCode\";\r\n\r\nexport const smsConfigurationCode = \"SMSConfigurationCode\";\r\nexport const pipelineDispatchCode = \"PipelineDispatchCode\";\r\nexport const pipelineReceiptCode = \"PipelineReceiptCode\";\r\nexport const EmailConfigurationCode = \"EmailConfigurationCode\";\r\n\r\nexport const baseProductCode = \"BaseProductCode\";\r\nexport const locationCode = \"LocationCode\";\r\nexport const gantryCode = \"GantryCode\";\r\n\r\nexport const siteViewType = \"SiteViewType\";\r\n\r\nexport const entityCode = \"EntityCode\";\r\n\r\nexport const entityType = \"EntityType\";\r\nexport const cardReaderCode = \"CardReaderCode\";\r\nexport const accessCardCode = \"AccessCardCode\";\r\nexport const bcuCode = \"BcuCode\";\r\nexport const deuCode = \"DeuCode\";\r\nexport const weighBridgeCode = \"WeighBridgeCode\";\r\nexport const weight = \"Weight\";\r\nexport const outOfToleranceAllowed = \"OutOfToleranceAllowed\";\r\n\r\nexport const loadingArmCode = \"LoadingArmCode\";\r\nexport const transportaionType = \"TransportationType\";\r\nexport const bayCode = \"BayCode\";\r\nexport const TransactionNumber = \"TransactionNumber\";\r\nexport const BatchNumber = \"BatchNumber\";\r\nexport const terminalCode = \"TerminalCode\";\r\nexport const tankGroupCode = \"TankGroupCode\";\r\nexport const tankCode = \"TankCode\";\r\nexport const meterCode = \"MeterCode\";\r\n\r\nexport const shipmentType = \"ShipmentType\";\r\nexport const shipmentStatus = \"ShipmentStatus\";\r\nexport const meterLineType = \"MeterLineType\";\r\nexport const dispatchCode = \"DispatchCode\";\r\nexport const railReceiptStatus = \"RailReceiptStatus\";\r\nexport const receiptStatus = \"ReceiptStatus\";\r\nexport const fptTansactionID = \"FPTransactionID\";\r\nexport const productCategoryType = \"ProductCategoryType\";\r\nexport const marineReason = \"Reason\";\r\n\r\nexport const sealMasterCode = \"SealMasterCode\";\r\nexport const marineDispatchReason = \"Reason\";\r\nexport const OperationName = \"OperationName\";\r\nexport const FPTransactionID = \"FPTransactionID\";\r\nexport const ProductCategoryType = \"ProductCategoryType\";\r\nexport const compartmentSeqNoInVehicle = \"CompartmentSeqNoInVehicle\";\r\nexport const adjustedPlanQuantity = \"AdjustedPlanQuantity\";\r\nexport const forceComplete = \"ForceComplete\";\r\nexport const dispatchStatus = \"DispatchStatus\";\r\nexport const HolidayDate = \"HolidayDate\";\r\nexport const ActionID = \"ActionID\";\r\nexport const EODTimePrev = \"EODTimePrev\";\r\nexport const TerminalAction = \"TerminalAction\";\r\nexport const EODTime = \"EODTime\";\r\nexport const MonthStartDay = \"MonthStartDay\";\r\nexport const captainCode = \"CaptainCode\";\r\nexport const userType = \"GeneralTMUserType\";\r\nexport const generalTMUserCode = \"GeneralTMUserCode\";\r\nexport const isPriority = \"IsPriority\";\r\nexport const actualTerminalCode = \"ActualTerminalCode\";\r\nexport const shipmentBondNo = \"ShipmentBondNo\"\r\nexport const receiptBondNo = \"ReceiptBondNo\"\r\nexport const marineReceiptStatus = \"MarineReceiptStatus\";\r\nexport const deviceType = \"DeviceType\";\r\nexport const deviceCode = \"DeviceCode\";\r\nexport const bayGroup = \"BayGroup\";\r\nexport const pipelineHeaderCode = \"PipelineHeaderCode\";\r\nexport const exchangePartnerName = \"ExchangePartner\";\r\nexport const personID = \"PersonID\";\r\nexport const userName = \"UserName\";\r\nexport const pipelinePlanCode = \"PipelinePlanCode\";\r\nexport const pipelinePlanType = \"PipelinePlanType\";\r\nexport const channelCode = \"ChannelCode\";\r\nexport const ProcessName = \"ProcessName\";\r\nexport const reconciliationCode = \"ReconciliationCode\";\r\nexport const NotificationGroupCode = \"NotificationGroupCode\";\r\nexport const NotificationGroupStatus = \"NotificationGroupStatus\";\r\nexport const NotificationGroupDesc = \"NotificationGroupDesc\";\r\nexport const NotificationResSource = \"NotificationResSource\";\r\nexport const NotificationResMsgCode = \"NotificationResMsgCode\";\r\nexport const NotificationOrigResSource = \"NotificationOrigResSource\";\r\nexport const NotificationOrigResMsgCode = \"NotificationOrigResMsgCode\";\r\nexport const NotificationMessageCode = \"NotificationMessageCode\"\r\nexport const positionType = \"PositionType\";\r\nexport const roleName = \"RoleName\";\r\nexport const exchangeAgreementCode = \"ExchangeAgreementCode\";\r\nexport const ProductTransferAgreementCode = \"ProductTransferAgreementCode\";\r\nexport const ShareholderAgreementStatus = \"ShareholderAgreementStatus\";\r\nexport const RequestorShareholder = \"RequestorShareholder\";\r\nexport const LenderShareholder = \"LenderShareholder\";\r\nexport const requestCode = \"RequestCode\";\r\nexport const TransferReferenceCode = \"TransferReferenceCode\";\r\nexport const ShiftID = \"ShiftID\";\r\nexport const ShiftName = \"ShiftName\";\r\nexport const printerName = \"PrinterName\";\r\nexport const locationtype = \"LocationType\";\r\nexport const forceClosureReason = \"ForceClosureReason\";\r\nexport const TransactionType = \"TransactionType\";\r\nexport const CustomerRecipeCode = \"CustomerRecipeCode\";\r\n\r\nexport const coaTemplateCode = \"COATemplateCode\";\r\nexport const coaManagementCode = \"COAManagementCode\";\r\nexport const coaParameterCode = \"COAParameterCode\";\r\nexport const coaManagementFinishedProductCode = \"COAManagementFinishedProductCode\";\r\nexport const coaCustomerCode = \"COACustomerCode\";\r\nexport const coaFinishedProductCode = \"COAFinishedProductCode\";\r\nexport const coaAssignmentCode = \"COAAssignmentCode\";\r\nexport const coaTransportationType = \"COATransportationType\";\r\nexport const coaTransactionType = \"COATransactionType\";\r\nexport const coaSeqNumber = \"COASeqNumber\";\r\nexport const forecastDate = \"ForecastDate\";\r\nexport const forecastTanks = \"ForecastTanks\";","import React from \"react\";\r\nimport { Notification } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { delimiter } from \"./Constants\";\r\nimport PropTypes from \"prop-types\";\r\nNotifyEvent.propTypes = {\r\n  notificationMessage: PropTypes.shape({\r\n    messageType: PropTypes.oneOf([\"success\", \"critical\"]),\r\n    message: PropTypes.string,\r\n    messageResultDetails: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        keyFields: PropTypes.arrayOf(PropTypes.string),\r\n        KeyValues: PropTypes.arrayOf(PropTypes.string),\r\n        isSuccess: PropTypes.bool,\r\n        errorMessage: PropTypes.string,\r\n      })\r\n    ),\r\n  }).isRequired,\r\n  //closeToast: PropTypes.bool,\r\n};\r\n// notifiaionMessage={messageType:\"success/critical\",message:\"title of message\",\r\n// messageResultDetails:[{keyFields:[Array Of Key Codes],KeyValues:[Array of Key Values],isSuccess,ErrorMessage}]}\r\nexport default function NotifyEvent({ notificationMessage }) {\r\n\r\n  function getLocalizedMessage(message) {\r\n    try {\r\n      let messageOptions = message.split(delimiter);\r\n      return messageOptions[0];\r\n    } catch (error) {\r\n      console.log(error);\r\n      return \"\";\r\n    }\r\n  }\r\n  function getLocalizedMessageParameters(message) {\r\n    try {\r\n      let messageOptions = message.split(delimiter);\r\n      messageOptions.splice(0, 1);\r\n      return messageOptions;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <Notification\r\n          className=\"toast-notification\"\r\n          severity={notificationMessage.messageType}\r\n          // onCloseClick={closeToast}\r\n          hasIcon={true}\r\n          title={t(notificationMessage.message)}\r\n        //onDetailsClick={() => alert(details)}\r\n        >\r\n          {notificationMessage.messageResultDetails.map((messageResult) => {\r\n            var entityKeyDetails = \"\";\r\n            if (messageResult.keyFields.length > 0) {\r\n              for (var i = 0; i < messageResult.keyFields.length; i++) {\r\n                entityKeyDetails =\r\n                  entityKeyDetails +\r\n                  t(messageResult.keyFields[i]) +\r\n                  \" : \" +\r\n                  messageResult.keyValues[i] +\r\n                  \", \";\r\n              }\r\n            }\r\n            return (\r\n              <div>\r\n                <span\r\n                  style={{ color: messageResult.isSuccess ? \"#7eb338\" : \"#F15A4F\" }}\r\n                >\r\n                  {entityKeyDetails}\r\n                  {messageResult.isSuccess\r\n                    ? t(\"NotificationList_MessageType_Success\")\r\n                    : t(\"NotificationList_MessageType_Failure\") +\r\n                    \" : \" +\r\n                    t(\r\n                      getLocalizedMessage(messageResult.errorMessage),\r\n                      getLocalizedMessageParameters(\r\n                        messageResult.errorMessage\r\n                      )\r\n                    )}\r\n                </span>\r\n                <br></br>\r\n              </div>\r\n            );\r\n          })}\r\n        </Notification>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}","/*!\n    *\n    * Wijmo Library 5.20221.857\n    * http://wijmo.com/\n    *\n    * Copyright(c) GrapeCity, Inc.  All rights reserved.\n    *\n    * Licensed under the GrapeCity Commercial License.\n    * sales@wijmo.com\n    * wijmo.com/products/wijmo-5/license/\n    *\n    */\n\nvar __extends=this&&this.__extends||function(){var extendStatics=function(t,e){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};return function(t,e){extendStatics(t,e);function __(){this.constructor=t}t.prototype=null===e?Object.create(e):(__.prototype=e.prototype,new __)}}();import{Control,Event,isArray,addClass,removeClass,setCss,isFunction,isPrimitive,isObject,DateTime,isUndefined}from\"@grapecity/wijmo\";import*as React from\"react\";var ComponentBase=function(t){__extends(ComponentBase,t);function ComponentBase(e,n,o){var i=t.call(this,e)||this;i._objPropHash={};i._isMounted=!1;i._mountedCBs=[];i._hostRef=function(t){return i._hostRefValue=t};i._beforeRender=new Event;i._afterRender=new Event;i._beforeWillUnmount=new Event;i._afterWillUnmount=new Event;i._beforeDidUpdate=new Event;i._afterDidUpdate=new Event;ComponentBase._reactMajorVersion||(ComponentBase._reactMajorVersion=parseInt(React.version));i.props=e;i.controlType=n;for(var r=0,s=o&&o.objectProps||[];r<s.length;r++){var p=s[r];i._objPropHash[p]=!0}return i}ComponentBase.prototype.render=function(){this._onBeforeRender();var t=this._renderImpl();this._onAfterRender();return t};ComponentBase.prototype.componentDidMount=function(){var t=this;if(this._isChild()){var e=this.props[ComponentBase._propsParent];e&&e._mountedCB((function(){t._setParent(e)}))}else this._prepareControl();return this.control};ComponentBase.prototype.componentWillUnmount=function(){this._onBeforeWillUnmount();this._siblingInsertedEH&&this._getElement().removeEventListener(\"DOMNodeInserted\",this._siblingInsertedEH);var t=this.control;if(t)if(this._isChild()){var e=this._getParentProp();if(e){var n=this.parent.control[e];if(isArray(n)){var o=n.indexOf(t);o>-1&&n.splice(o,1)}}}else t instanceof Control&&setTimeout((function(){if(t.hostElement){t._orgOuter=null;t.dispose()}}));this._onAfterWillUnmount()};ComponentBase.prototype.shouldComponentUpdate=function(t){return!0};ComponentBase.prototype.componentDidUpdate=function(t){this._onBeforeDidUpdate();var e=this.control;this._copy(e,this.props,t);this._onAfterDidUpdate()};ComponentBase.prototype._mountedCB=function(t){this._isMounted?t():this._mountedCBs.push(t)};ComponentBase.prototype._renderImpl=function(){var t={};t[ComponentBase._propsParent]=this;var e=React.Children.map(this.props.children,(function(e){return e&&React.cloneElement(e,t)})),n={ref:this._hostRef};this._isChild()&&(n.style={display:\"none\"});return React.createElement(\"div\",n,e)};ComponentBase.prototype._onBeforeRender=function(t){this._beforeRender.raise(this,t)};ComponentBase.prototype._onAfterRender=function(t){this._afterRender.raise(this,t)};ComponentBase.prototype._onBeforeWillUnmount=function(t){this._beforeWillUnmount.raise(this,t)};ComponentBase.prototype._onAfterWillUnmount=function(t){this._afterWillUnmount.raise(this,t)};ComponentBase.prototype._onBeforeDidUpdate=function(t){this._beforeDidUpdate.raise(this,t)};ComponentBase.prototype._onAfterDidUpdate=function(t){this._afterDidUpdate.raise(this,t)};ComponentBase.prototype._createControl=function(){var t=this._isChild()?this._isParentInCtor()?this.parent.control:void 0:this._getElement();return new this.controlType(t)};ComponentBase.prototype._prepareControl=function(){var t=this._getElement(),e=this.props;t&&!this._isChild()&&ComponentBase._copyAttrs(t,e,Control._rxInputAtts);var n=this.control=this._createControl(),o=n instanceof Control,i=ComponentBase;if(!this._siblingId){null==this.constructor[i._typeSiblingIdProp]&&(this.constructor[i._typeSiblingIdProp]=++i._siblingDirId+\"\");this._siblingId=this.constructor[i._typeSiblingIdProp]}t.setAttribute(i._typeSiblingIdProp,this._siblingId);var r={};for(var s in e){var p=e[s];this._ignoreProp(s)||isUndefined(p)||(s in n?r[s]=p:this._setHostAttribute(t,s,p))}o?n.initialize(r):this._copy(n,r,null,!0);this._isMounted=!0;var a=this._mountedCBs;this._mountedCBs=[];for(var l=0,h=a;l<h.length;l++){(0,h[l])()}isFunction(e.initialized)&&e.initialized(n)};ComponentBase.prototype._initParent=function(){var t=this._getParentProp();if(t){var e=this.parent.control,n=e[t];if(isArray(n)){var o=this._getSiblingIndex();(o<0||o>=n.length)&&(o=n.length);n.splice(o,0,this.control);this._siblingInsertedEH=this._siblingInserted.bind(this);this._getElement().addEventListener(\"DOMNodeInserted\",this._siblingInsertedEH)}else e[t]=this.control}};ComponentBase.prototype._setParent=function(t){if(t!==this.parent){if(this.parent)throw\"Wijmo child component is already attached to a different parent.\";this.parent=t;this._prepareControl();this._initParent()}};ComponentBase.prototype._isChild=function(){return null!=this._parentProp||null!=this._parentInCtor};ComponentBase.prototype._isParentInCtor=function(){return!0===this._parentInCtor};ComponentBase.prototype._getParentProp=function(){return this.props.wjProperty||this._parentProp};ComponentBase.prototype._getSiblingIndex=function(){var t=this._getElement(),e=t.parentElement;if(!e)return-1;for(var n=e.childNodes,o=-1,i=this._siblingId,r=0;r<n.length;r++){var s=n[r];if(1==s.nodeType&&s.getAttribute(ComponentBase._typeSiblingIdProp)==i){++o;if(s===t)return o}}return-1};ComponentBase.prototype._siblingInserted=function(t){if(t.target===this._getElement()){var e=this._getSiblingIndex(),n=this.control,o=this.parent.control[this._getParentProp()],i=o.indexOf(n);if(e>=0&&i>=0&&e!==i){o.splice(i,1);e=Math.min(e,o.length);o.splice(e,0,n)}}};ComponentBase.prototype._copy=function(t,e,n,o){void 0===o&&(o=!1);if(t&&e){var i,r=t===this.control;for(var s in e)if(!this._ignoreProp(s)||!r){var p=e[s];if(s in t){if(this._isEvent(t,s))o&&isFunction(p)&&t[s].addHandler(p);else if(!n||!this._sameValue(n[s],p))if(null==p)t[s]=p;else if(isPrimitive(p)||isFunction(p)||this._objPropHash[s]&&t===(i||(i=this.control)))t[s]=p;else if(isArray(p)&&isArray(t[s])){var a=t[s],l=p;if(l.length==a.length)for(var h=0;h<l.length;h++)this._copy(a[h],l[h])}else isObject(p)&&this._copy(t[s],e[s])}else this._setHostAttribute(t.hostElement,s,e[s])}}};ComponentBase.prototype._setHostAttribute=function(t,e,n){if(t)switch(e){case\"className\":var o=this._appliedClassName;if(o!==n){removeClass(t,o);addClass(t,n);this._appliedClassName=n}break;case\"style\":setCss(t,n);break;default:null!=t[e]?t[e]=n:\"string\"==typeof n&&\"$\"!==e[0]&&t.setAttribute(e,n)}};ComponentBase.prototype._sameValue=function(t,e){return t==e||DateTime.equals(t,e)};ComponentBase.prototype._isEvent=function(t,e){var n=t&&t[e];return null!=n&&n instanceof Event};ComponentBase.prototype._getElement=function(){return this._hostRefValue};ComponentBase.prototype._ignoreProp=function(t){return\"children\"===t};ComponentBase._copyAttrs=function(t,e,n){if(t)for(var o in e)o.match(n)&&t.setAttribute(o,e[o])};ComponentBase.isInStrictMode=function(t){return!!(t.hasOwnProperty(\"_reactInternalFiber\")&&1&t._reactInternalFiber.mode)};ComponentBase._propsParent=\"$parent\";ComponentBase._typeSiblingIdProp=\"_wjSiblingIdProp\";ComponentBase._siblingDirId=0;return ComponentBase}(React.Component);export{ComponentBase};"],"names":["connect","state","theme","appTheme","props","flexRef","React","jsonData","JSON","parse","kpiInfo","JSONFormat","initGestures","gestures","posX","Chart","ChartDetails","initialPosition","xPosition","posY","yPosition","scaleX","xScale","scaleY","yScale","setMajorUnitY","KPIData","getPalletes","chartPalette","common","palette","Array","isArray","ThemeType","Dark","dark","default","bindings","colorsSource","table","columnName","map","item","error","console","log","flex","current","data","seriesSource","yBindings","seriesData","col","binding","maxs","forEach","ybind","max","row","index","push","filter","val","length","axisY","majorUnit","undefined","chartInitiliazed","setChartRefs","KPIName","Sequence","isLiveCheck","isLive","_jsx","ErrorBoundary","children","TranslationConsumer","t","className","_jsxs","wjChart","itemsSource","header","header_locale_key","initialized","chartLegend","position","column","name","chartAxis","axisFormat","axis","title","dataLabel","Thresholds","threshold","wjChartAnalytics","Name","style","Styles","min","Min","sampleCount","tooltipContent","Label","Value","func","x","wjChartInteraction","mouseAction","wjChartAnimate","DashboardCard","cardPreview","setCardPreview","useState","setIsLive","childrenWithProps","child","float","width","Tooltip","content","element","fontSize","fontWeight","whiteSpace","overflow","textOverflow","hoverable","event","verticalAlign","isExportRequired","Popup","padding","Icon","root","size","on","VerticalMenu","Item","onClick","exportHandler","exportName","isFullScreenRequired","fullScreenHandler","isNaN","parseInt","childCount","clickHandler","Modal","open","closeOnDimmerClick","closeOnDocumentClick","onClose","closeIcon","Header","Content","defaultProps","menuItems","SlotHeaderUserActionsComposite","_ref","operationsVisibilty","breadcrumbItem","terminals","selectedTerminal","onTerminalChange","handleBreadCrumbClick","marginTop","Breadcrumb","parents","parentitem","itemCode","localizedKey","Select","placeholder","value","disabled","terminal","options","Utilities","onChange","add","delete","shareholder","itemName","itemProps","isComponent","ProductDemandForecastingDetailsComposite","constructor","arguments","chartRef","isDownloading","downloadBtnClick","overallCapacity","inventory","uom","this","setState","doc","wijmoPdf","ended","s","e","blob","pageSettings","margins","left","top","right","bottom","layout","Portrait","toPng","hostElement","cacheBust","then","url","colWidth","rowHeight","drawText","align","Center","font","lineGap","y","continued","baseProduct","Date","toLocaleString","toLocaleDateString","endDate","paths","rect","stroke","String","tankColumns","selectedTanks","tank","height","addPage","cellText","moveDown","currentDate","setHours","isSlotEnabled","forecastColumns","forecastDetails","xPad","color","tolerance","isVolume","configuration","Volume","Mass","Number","circle","fill","wijmo","drawImage","end","catch","setRefs","key","ref","sequence","fetchChartConfiguration","overAllCapacity","chartInfo","Table","render","uoms","Capacity","GrossQuantity","Button","type","isChartDataReady","actionType","baseProductsList","multiple","label","reserveSpace","validationErrors","BaseProduct","DatePicker","displayFormat","getCurrentDateFormat","disablePast","onTextChange","EndDate","maxDuration","isLoading","onGoClick","_Fragment","Tanks","DataTable","tanks","lazy","scrollable","scrollHeight","showHeader","selection","onSelectionChange","onTankSelection","onSelectAll","selectionMode","Column","field","renderer","cellData","rowData","Active","hover","LACSeriesChart","LoadingPage","message","fontStyle","columnResizeMode","resizableColumns","icon","OpenInventory","roadColor","ROADSlots","marineColor","MarineSlots","userDetails","getUserDetails","tokenDetails","TokenAuth","ProductDemandForecastComposite","Component","Key","Code","baseProducts","selectedBaseProduct","selectedDate","productForecastDetails","isReadyToRender","tanksInfo","config","errorMessage","showNotification","notification","toast","NotifyEvent","notificationMessage","autoClose","messageType","FetchProductDemandForecastConfiguration","messageResultDetails","axios","RestAPIs","tokenInfo","response","IsSuccess","EntityResult","ProductForecastParams","param","GetBaseProducts","keyFields","keyValues","isSuccess","ErrorList","loadForecastDetails","validate","keyData","keyDataCode","ShareHolderCode","KeyCodes","toISOString","stringify","Table1","SlotEnabled","handleChange","property","getTankDetails","errorMsg","validateDate","toString","onTanksSelection","date","today","baseProductError","selectedTanksError","dateValidationError","handleTerminalChange","terminalCode","filteredTerminals","componentDidMount","getInitialConfigurations","getTerminals","result","bp","text","IsVolume","activeItem","a","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","toastClassName","carrierCode","transportationType","shareholderCode","driverCode","customerCode","trailerCode","originTerminalCode","primeMoverCode","vehicleCode","destinationCode","finishedProductCode","shipmentCode","orderCode","receiptCode","marineDispatchCode","marineReceiptCode","supplierCode","contractCode","railDispatchCode","railReceiptCode","railRouteCode","wagonCode","compartmentCode","smsConfigurationCode","pipelineDispatchCode","pipelineReceiptCode","EmailConfigurationCode","baseProductCode","locationCode","siteViewType","entityCode","entityType","cardReaderCode","accessCardCode","bcuCode","deuCode","weighBridgeCode","weight","outOfToleranceAllowed","loadingArmCode","transportaionType","bayCode","TransactionNumber","BatchNumber","tankGroupCode","tankCode","meterCode","shipmentType","shipmentStatus","meterLineType","dispatchCode","receiptStatus","fptTansactionID","productCategoryType","marineReason","sealMasterCode","marineDispatchReason","OperationName","FPTransactionID","ProductCategoryType","compartmentSeqNoInVehicle","adjustedPlanQuantity","forceComplete","dispatchStatus","HolidayDate","ActionID","EODTimePrev","TerminalAction","EODTime","MonthStartDay","captainCode","userType","generalTMUserCode","isPriority","actualTerminalCode","shipmentBondNo","receiptBondNo","deviceType","deviceCode","bayGroup","pipelineHeaderCode","exchangePartnerName","personID","userName","pipelinePlanCode","pipelinePlanType","channelCode","ProcessName","reconciliationCode","NotificationGroupCode","NotificationGroupStatus","NotificationGroupDesc","NotificationResSource","NotificationResMsgCode","NotificationOrigResSource","NotificationOrigResMsgCode","NotificationMessageCode","positionType","exchangeAgreementCode","ProductTransferAgreementCode","ShareholderAgreementStatus","RequestorShareholder","LenderShareholder","requestCode","TransferReferenceCode","ShiftID","ShiftName","printerName","locationtype","forceClosureReason","TransactionType","CustomerRecipeCode","coaTemplateCode","coaManagementCode","coaParameterCode","coaManagementFinishedProductCode","coaSeqNumber","forecastDate","forecastTanks","getLocalizedMessage","split","delimiter","getLocalizedMessageParameters","messageOptions","splice","Notification","severity","hasIcon","messageResult","entityKeyDetails","i","getOptionsWithSelect","ddlOptions","selectOptionText","option","unshift","language","window","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class","__extends","extendStatics","Object","setPrototypeOf","__proto__","n","hasOwnProperty","__","prototype","create","ComponentBase","o","call","_objPropHash","_isMounted","_mountedCBs","_hostRef","_hostRefValue","_beforeRender","Event","_afterRender","_beforeWillUnmount","_afterWillUnmount","_beforeDidUpdate","_afterDidUpdate","_reactMajorVersion","controlType","r","objectProps","p","_onBeforeRender","_renderImpl","_onAfterRender","_isChild","_propsParent","_mountedCB","_setParent","_prepareControl","control","componentWillUnmount","_onBeforeWillUnmount","_siblingInsertedEH","_getElement","removeEventListener","_getParentProp","parent","indexOf","Control","setTimeout","_orgOuter","dispose","_onAfterWillUnmount","shouldComponentUpdate","componentDidUpdate","_onBeforeDidUpdate","_copy","_onAfterDidUpdate","display","raise","_createControl","_isParentInCtor","_copyAttrs","_rxInputAtts","_siblingId","_typeSiblingIdProp","_siblingDirId","setAttribute","_ignoreProp","isUndefined","_setHostAttribute","initialize","l","h","isFunction","_initParent","_getSiblingIndex","_siblingInserted","bind","addEventListener","_parentProp","_parentInCtor","wjProperty","parentElement","childNodes","nodeType","getAttribute","target","Math","_isEvent","addHandler","_sameValue","isPrimitive","isObject","_appliedClassName","removeClass","addClass","setCss","DateTime","equals","match","isInStrictMode","_reactInternalFiber","mode"],"sourceRoot":""}