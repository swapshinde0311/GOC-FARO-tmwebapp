{"version":3,"file":"static/js/7519.dd912bb7.chunk.js","mappings":"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","sources":["Components/UIBase/Details/ProductReconciliationReportDetails.jsx","Components/UIBase/Details/ViewMeterUnAccountedTransactionsDetails.jsx","Components/UIBase/Details/ViewTankUnAccountedTransactionsDetails.jsx","Components/Composite/Details/ProductReconciliationReportDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Common/TMTransactionFilters.jsx","Components/UIBase/Common/TMReportViewer.jsx","Components/UIBase/Details/ReportDetails.jsx","JS/functionalUtilities.js"],"sourcesContent":["import React from 'react';\r\nimport { Select, Input,Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\n\r\n\r\nProductReconciliationReportDetails.propTypes = {\r\n    reconciliationInfo: PropTypes.object.isRequired,\r\n    modReconciliationInfo:PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        productReconciliationStatusOptions: PropTypes.array,\r\n        \r\n    }).isRequired,\r\n    handleReconciliationStatusChange: PropTypes.func.isRequired,\r\n    handleReopenReconciliation: PropTypes.func.isRequired,\r\n    handleViewReport: PropTypes.func.isRequired,\r\n    handleViewUnAccountedTransactions: PropTypes.func.isRequired,\r\n    handleReset: PropTypes.func.isRequired,\r\n    \r\n}\r\n\r\nProductReconciliationReportDetails.defaultProps = {\r\n    listOptions: {\r\n        productReconciliationStatusOptions: [],\r\n    },\r\n   \r\n}\r\n\r\n\r\nexport function ProductReconciliationReportDetails({\r\n    reconciliationInfo,\r\n    modReconciliationInfo,\r\n    validationErrors,\r\n    onFieldChange,\r\n    listOptions,\r\n    handleReconciliationStatusChange,\r\n    handleReopenReconciliation,\r\n    handleViewReport,\r\n    handleViewUnAccountedTransactions,\r\n    handleReset,\r\n    \r\n \r\n}) {\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input \r\n                                fluid\r\n                                value={modReconciliationInfo.ReconciliationCode}\r\n                                disabled= {true}\r\n                                label={t(\"ReconciliationReportDetail_RcCode\")}\r\n                                error={t(validationErrors.Code)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input \r\n                                fluid\r\n                                value= {new Date(modReconciliationInfo.StartDate).toLocaleDateString() +\r\n                                    \" \" +\r\n                                   new Date(modReconciliationInfo.StartDate).toLocaleTimeString()}\r\n                                disabled= {true}\r\n                                label={t(\"ReconciliationReportDetail_StartDate\")}\r\n                                error={t(validationErrors.Name)}\r\n                                reserveSpace={false}\r\n                                \r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input \r\n                                fluid\r\n                                value= {new Date(modReconciliationInfo.EndDate).toLocaleDateString() +\r\n                                    \" \" +\r\n                                   new Date(modReconciliationInfo.EndDate).toLocaleTimeString()}\r\n                                disabled= {true}\r\n                                label={t(\"ReconciliationReportDetail_EndDate\")}\r\n                                error={t(validationErrors.Name)}\r\n                                reserveSpace={false}\r\n                                \r\n                            />\r\n                        </div>\r\n  \r\n                         <div className= \"col-12 col-md-6 col-lg-4\">\r\n                            <Select \r\n                                fluid\r\n                                placeholder=\"Select\"\r\n                                value={modReconciliationInfo.Status}\r\n                                label={t(\"ReconciliationReportDetail_Status\")}\r\n                                options={Utilities.transferListtoOptions(\r\n                                    listOptions.productReconciliationStatusOptions\r\n                                )}\r\n                                onChange={(data) => handleReconciliationStatusChange(data)}\r\n                                error={t(validationErrors.Status)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                onResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div> \r\n                       \r\n                       \r\n                        \r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modReconciliationInfo.Remarks}\r\n                                label={t(\"CaptainInfo_Remarks\")}\r\n                                error={t(validationErrors.Remarks)}\r\n                                indicator={modReconciliationInfo.Status !== reconciliationInfo.Status ? \"required\" : \"\"}\r\n                                reserveSpace={false}\r\n                                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modReconciliationInfo.ReportWarnings}\r\n                                label={t(\"ReconciliationReportDetail_ReportProcessWarning\")}\r\n                                disabled={true}\r\n                                error={t(validationErrors.ReportWarnings)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n                    <div className=\"row userActionPosition\">\r\n                    <div className=\"col-12 col-md-3 col-lg-4\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    onClick={() => handleViewReport()}\r\n                                    content={t(\"ReconciliationReportDetail_btnViewReconcile\")}\r\n                                    disabled={false}\r\n                                    ></Button>\r\n                                    </div>\r\n                                    <div className=\"col-12 col-md-3 col-lg-4\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    content={t(\"ReconciliationReportDetail_btnUnAccountedTankTransaction\")}\r\n                                    disabled={reconciliationInfo.EntityTypeCode === \"Meter\" }\r\n                                    onClick={() => handleViewUnAccountedTransactions()}\r\n                                    ></Button>\r\n                                    </div>\r\n                                    <div className=\"col-12 col-md-3 col-lg-4\">\r\n                                    <Button\r\n                                    type=\"primary\"\r\n                                    \r\n                                    disabled={reconciliationInfo.EntityTypeCode === \"Tank\" }\r\n                                    content={t(\"ReconciliationReportDetail_btnUnAccountedMeterTransaction\")}\r\n\r\n                                    onClick={() => handleViewUnAccountedTransactions()}\r\n\r\n                                    ></Button>\r\n                                    </div>\r\n                                    <div className=\"col-12 col-md-3 col-lg-4\">\r\n                                     <Button\r\n                                    type=\"primary\"\r\n                                  onClick={() => handleReopenReconciliation()}\r\n                                    disabled={!(modReconciliationInfo.Status.toUpperCase()===Constants.ProductReconciliationReportStatus.Reconciled_Diff.toUpperCase())}\r\n                                    content={t(\"ReconciliationReportDetail_btnManualReconcile\")}\r\n                                ></Button>\r\n\r\n                                </div>\r\n                            </div>  \r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\n\r\nViewMeterUnAccountedTransactionsDetails.propTypes = {\r\n    transactionData: PropTypes.array.isRequired,\r\n    handleBack: PropTypes.func.isRequired,\r\n    pageSize: PropTypes.number\r\n};\r\n\r\nViewMeterUnAccountedTransactionsDetails.defaultProps = {};\r\n\r\nexport function ViewMeterUnAccountedTransactionsDetails({\r\n    transactionData,\r\n    handleBack,\r\n    pageSize\r\n}) {\r\n\r\n    return (\r\n        <div>\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <div>\r\n                        <div className=\"detailsContainer\">\r\n                            <div id=\"printTable\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        <h3>\r\n                                            {t(\"MeterUnaccountedTransaction_Header\")}\r\n                                        </h3>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row marginRightZero tableScroll\">\r\n                                    <div className=\"col-12 detailsTable \">\r\n                                        <DataTable\r\n                                            data={transactionData}\r\n                                            reorderableColumns={true}\r\n                                            resizableColumns={true}\r\n                                            search={true}\r\n                                            searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                                            rows={pageSize}\r\n                                        >\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"MeterUnaccountedTransaction_MeterCode\"\r\n                                                field=\"MeterUnaccountedTransaction_MeterCode\"\r\n                                                header={t(\"MeterUnaccountedTransaction_MeterCode\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"MeterUnaccountedTransaction_TankCode\"\r\n                                                field=\"MeterUnaccountedTransaction_TankCode\"\r\n                                                header={t(\"MeterUnaccountedTransaction_TankCode\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"Vehicle_Transport\"\r\n                                                field=\"Vehicle_Transport\"\r\n                                                header={t(\"Vehicle_Transport\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"MeterUnaccountedTransaction_BPCode\"\r\n                                                field=\"MeterUnaccountedTransaction_BPCode\"\r\n                                                header={t(\"MeterUnaccountedTransaction_BPCode\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"MeterUnaccountedTransaction_Type\"\r\n                                                field=\"MeterUnaccountedTransaction_Type\"\r\n                                                header={t(\"MeterUnaccountedTransaction_Type\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"MeterUnaccountedTransaction_UnAccountedGrossQuantity\"\r\n                                                field=\"MeterUnaccountedTransaction_UnAccountedGrossQuantity\"\r\n                                                header={t(\"MeterUnaccountedTransaction_UnAccountedGrossQuantity\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"MeterUnaccountedTransaction_UnAccountedNetQuantity\"\r\n                                                field=\"MeterUnaccountedTransaction_UnAccountedNetQuantity\"\r\n                                                header={t(\"MeterUnaccountedTransaction_UnAccountedNetQuantity\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"MeterUnaccountedTransaction_QuantityUOM\"\r\n                                                field=\"MeterUnaccountedTransaction_QuantityUOM\"\r\n                                                header={t(\"MeterUnaccountedTransaction_QuantityUOM\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"MeterUnaccountedTransaction_CreatedTime\"\r\n                                                field=\"MeterUnaccountedTransaction_CreatedTime\"\r\n                                                header={t(\"MeterUnaccountedTransaction_CreatedTime\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                                renderer={(cellData) => new Date(cellData.value).toLocaleDateString()}\r\n                                            ></DataTable.Column>\r\n                                        </DataTable>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 col-sm-6 col-lg-8\">\r\n                                    <Button\r\n                                        className=\"backButton\"\r\n                                        onClick={handleBack}\r\n                                        content={t(\"Back\")}\r\n                                    ></Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </TranslationConsumer>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\n\r\nViewTankUnAccountedTransactionsDetails.propTypes = {\r\n    transactionData: PropTypes.array.isRequired,\r\n    handleBack: PropTypes.func.isRequired,\r\n    pageSize: PropTypes.number\r\n};\r\n\r\nViewTankUnAccountedTransactionsDetails.defaultProps = {};\r\n\r\nexport function ViewTankUnAccountedTransactionsDetails({\r\n    transactionData,\r\n    handleBack,\r\n    pageSize\r\n}) {\r\n    return (\r\n        <div>\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <div>\r\n                        <div className=\"detailsContainer\">\r\n                            <div id=\"printTable\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n                                        <h3>\r\n                                            {t(\"TankUnaccountedTransaction_Header\")}\r\n                                        </h3>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"row marginRightZero tableScroll\">\r\n                                    <div className=\"col-12 detailsTable \">\r\n                                        <DataTable\r\n                                            data={transactionData}\r\n                                            reorderableColumns={true}\r\n                                            resizableColumns={true}\r\n                                            search={true}\r\n                                            searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                                            rows={pageSize}\r\n                                        >\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"TankUnaccountedTransaction_TankCode\"\r\n                                                field=\"TankUnaccountedTransaction_TankCode\"\r\n                                                header={t(\"TankUnaccountedTransaction_TankCode\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"TankUnaccountedTransaction_BPCode\"\r\n                                                field=\"TankUnaccountedTransaction_BPCode\"\r\n                                                header={t(\"TankUnaccountedTransaction_BPCode\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"Vehicle_Transport\"\r\n                                                field=\"Vehicle_Transport\"\r\n                                                header={t(\"Vehicle_Transport\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"TankUnaccountedTransaction_Type\"\r\n                                                field=\"TankUnaccountedTransaction_Type\"\r\n                                                header={t(\"TankUnaccountedTransaction_Type\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"TankUnaccountedTransaction_UnAccountedGrossQuantity\"\r\n                                                field=\"TankUnaccountedTransaction_UnAccountedGrossQuantity\"\r\n                                                header={t(\"TankUnaccountedTransaction_UnAccountedGrossQuantity\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"TankUnaccountedTransaction_UnAccountedNetQuantity\"\r\n                                                field=\"TankUnaccountedTransaction_UnAccountedNetQuantity\"\r\n                                                header={t(\"TankUnaccountedTransaction_UnAccountedNetQuantity\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"TankUnaccountedTransaction_QuantityUOM\"\r\n                                                field=\"TankUnaccountedTransaction_QuantityUOM\"\r\n                                                header={t(\"TankUnaccountedTransaction_QuantityUOM\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"TankUnaccountedTransaction_Density\"\r\n                                                field=\"TankUnaccountedTransaction_Density\"\r\n                                                header={t(\"TankUnaccountedTransaction_Density\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"TankUnaccountedTransaction_DensityUOM\"\r\n                                                field=\"TankUnaccountedTransaction_DensityUOM\"\r\n                                                header={t(\"TankUnaccountedTransaction_DensityUOM\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"TankUnaccountedTransaction_StartTime\"\r\n                                                field=\"TankUnaccountedTransaction_StartTime\"\r\n                                                header={t(\"TankUnaccountedTransaction_StartTime\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"TankUnaccountedTransaction_EndTime\"\r\n                                                field=\"TankUnaccountedTransaction_EndTime\"\r\n                                                header={t(\"TankUnaccountedTransaction_EndTime\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                            <DataTable.Column\r\n                                                className=\"compColHeight\"\r\n                                                key=\"TankUnaccountedTransaction_CreatedTime\"\r\n                                                field=\"TankUnaccountedTransaction_CreatedTime\"\r\n                                                header={t(\"TankUnaccountedTransaction_CreatedTime\")}\r\n                                                editable={false}\r\n                                                editFieldType=\"text\"\r\n                                            ></DataTable.Column>\r\n                                        </DataTable>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 col-sm-6 col-lg-8\">\r\n                                    <Button\r\n                                        className=\"backButton\"\r\n                                        onClick={handleBack}\r\n                                        content={t(\"Back\")}\r\n                                    ></Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </TranslationConsumer>\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { ProductReconciliationReportDetails } from \"../../UIBase/Details/ProductReconciliationReportDetails\";\r\nimport { ViewMeterUnAccountedTransactionsDetails } from \"../../UIBase/Details/ViewMeterUnAccountedTransactionsDetails\";\r\nimport { ViewTankUnAccountedTransactionsDetails } from \"../../UIBase/Details/ViewTankUnAccountedTransactionsDetails\";\r\nimport { emptyReconciliationInfo } from \"../../../JS/DefaultEntities\";\r\nimport { productReconciliationReportValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport PropTypes from \"prop-types\";\r\nimport lodash, { constant } from \"lodash\";\r\nimport { functionGroups, fnProductReconciliationReports } from \"../../../JS/FunctionGroups\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport ReportDetails from \"../../UIBase/Details/ReportDetails\";\r\nimport { TMTransactionFilters } from \"../../UIBase/Common/TMTransactionFilters\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass ProductReconciliationReportDetailsComposite extends Component {\r\n  state = {\r\n    reconciliationInfo: lodash.cloneDeep(emptyReconciliationInfo),\r\n    modReconciliationInfo: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      productReconciliationReportValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    saveEnabled: true,\r\n    productReconciliationStatusOptions: [],\r\n    showReport: false,\r\n    reonciliationReportNames: { tank: '', meter: ''},\r\n    showTankTransactions:false,\r\n    showMeterTransactions: false,\r\n    data: {},\r\n    fromDate: new Date(),\r\n    toDate: new Date(),\r\n    dateError: \"\",\r\n    showAuthenticationLayout: false,\r\n    tempReconciliationInfo: {}\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getReconciliationReport(this.props.selectedRow);\r\n      this.getLookUpData();\r\n      this.getProductReconciliationStatus(this.props.selectedRow.Reconciliation_Status);\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProductReconciliationDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      let ReconciliationCode = this.state.reconciliationInfo.reconciliationCode\r\n      if (\r\n        ReconciliationCode !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getReconciliationReport(nextProps.selectedRow);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProductReconciliationDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n \r\n\r\n  getProductReconciliationStatus(reconStatus) {\r\n    axios(\r\n      RestAPIs.GetProductReconciliationStatus,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let productReconciliationStatusOptions = [];\r\n          if (result.EntityResult !== null) {\r\n            Object.keys(result.EntityResult).forEach((key) =>\r\n            productReconciliationStatusOptions.push(result.EntityResult[key])\r\n            );\r\n             \r\n            let filteredStatus = [];\r\n          \r\n\r\n            if (reconStatus.toUpperCase()===Constants.ProductReconciliationReportStatus.Open.toUpperCase())\r\n            {\r\n              filteredStatus = productReconciliationStatusOptions.filter(\r\n                (objOption) => objOption.toUpperCase() === Constants.ProductReconciliationReportStatus.Open.toUpperCase()\r\n              );\r\n            }\r\n            else if (reconStatus.toUpperCase() === Constants.ProductReconciliationReportStatus.In_Progress.toUpperCase())\r\n            {\r\n              filteredStatus = productReconciliationStatusOptions.filter(\r\n                (objOption) => objOption.toUpperCase() === Constants.ProductReconciliationReportStatus.In_Progress.toUpperCase()\r\n              );\r\n            }\r\n            else if(reconStatus.toUpperCase()===Constants.ProductReconciliationReportStatus.Reconciled_NoDiff.toUpperCase() )\r\n            {\r\n              filteredStatus = productReconciliationStatusOptions.filter(\r\n                (objOption) => (\r\n                  objOption.toUpperCase() === Constants.ProductReconciliationReportStatus.Reconciled_NoDiff.toUpperCase()\r\n                  ||\r\n                  objOption.toUpperCase() === Constants.ProductReconciliationReportStatus.Approved.toUpperCase()\r\n                  ||\r\n                  objOption.toUpperCase() === Constants.ProductReconciliationReportStatus.Closed.toUpperCase()\r\n                  )\r\n              );\r\n            }\r\n            else if (reconStatus.toUpperCase() === Constants.ProductReconciliationReportStatus.Approved.toUpperCase())\r\n            {\r\n           \r\n              filteredStatus = productReconciliationStatusOptions.filter(\r\n                (objOption) => (\r\n                  \r\n                  objOption.toUpperCase() === Constants.ProductReconciliationReportStatus.Approved.toUpperCase()\r\n                  ||\r\n                  objOption.toUpperCase() === Constants.ProductReconciliationReportStatus.Closed.toUpperCase()\r\n                  )\r\n\r\n              );\r\n            }\r\n              \r\n            else if (reconStatus.toUpperCase()===Constants.ProductReconciliationReportStatus.Reconciled_Diff.toUpperCase())\r\n            {\r\n                 filteredStatus = productReconciliationStatusOptions.filter(\r\n                  (objOption) => (\r\n                    objOption.toUpperCase() === Constants.ProductReconciliationReportStatus.Reconciled_Diff.toUpperCase()\r\n                    ||\r\n                    objOption.toUpperCase() === Constants.ProductReconciliationReportStatus.Approved.toUpperCase()\r\n                    ||\r\n                    objOption.toUpperCase() === Constants.ProductReconciliationReportStatus.Rejected.toUpperCase()\r\n                    )\r\n                );\r\n\r\n              }\r\n            else if (reconStatus.toUpperCase() ===Constants.ProductReconciliationReportStatus.Rejected.toUpperCase())\r\n            {\r\n              filteredStatus = productReconciliationStatusOptions.filter(\r\n                (objOption) => (\r\n              objOption.toUpperCase() === Constants.ProductReconciliationReportStatus.Rejected.toUpperCase()\r\n              ||\r\n              objOption.toUpperCase() === Constants.ProductReconciliationReportStatus.Closed.toUpperCase()  \r\n              )\r\n              );\r\n            }\r\n\r\n            if(filteredStatus.length>0)\r\n             this.setState({ productReconciliationStatusOptions:filteredStatus });\r\n             else\r\n             this.setState({ productReconciliationStatusOptions });\r\n\r\n          } else {\r\n            console.log(\"No productReconciliationStatusOptions identified.\");\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetProductReconciliationStatus:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting ProductReconciliationStatus:\", error);\r\n      });\r\n  }\r\n\r\n  updateProductReconciliationReport = () => {\r\n    try {\r\n      this.handleAuthenticationClose();\r\n      this.setState({ saveEnabled: false });\r\n      let tempReconciliationInfo = lodash.cloneDeep(this.state.tempReconciliationInfo);\r\n      this.updateReconciliationReport(tempReconciliationInfo);\r\n\r\n    } catch (error) {\r\n      console.log(\"ProductReconciliationReport Details Composite : Error in updateProductReconciliationReport\");\r\n    }\r\n  };\r\n\r\n\r\n  handleSave = () => {\r\n     \r\n    try {\r\n        let modReconciliationInfo = this.state.modReconciliationInfo;\r\n        \r\n    \r\n        if (this.validateSave(modReconciliationInfo)) {\r\n          \r\n          let showAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n        let tempReconciliationInfo= lodash.cloneDeep(modReconciliationInfo);\r\n        this.setState({ showAuthenticationLayout, tempReconciliationInfo }, () => {\r\n          if (showAuthenticationLayout === false) {\r\n            this.updateProductReconciliationReport();\r\n          }\r\n      });\r\n       \r\n        } else this.setState({ saveEnabled: true });\r\n    }\r\n    catch (error) {\r\n        console.log(\"ProductReconciliationReportDetailsComposite:Error occured on handleSave\", error);\r\n    }\r\n};\r\n  \r\n\r\nhandleReopenReconciliation = () => {\r\n  try {\r\n      let modReconciliationInfo = this.state.modReconciliationInfo;\r\n      modReconciliationInfo.RefreshWithLatestTransactions = true;\r\n\r\n      this.setState({ saveEnabled: false });\r\n      if (this.validateSave(modReconciliationInfo)) {\r\n        \r\n      this.reopenReconciliation(modReconciliationInfo);\r\n      } else this.setState({ saveEnabled: true });\r\n  }\r\n  catch (error) {\r\n      console.log(\"ProductReconciliationReportDetailsComposite:Error occured on handleReopenReconciliation\", error);\r\n  }\r\n};\r\n\r\nvalidateSave(modReconciliationInfo) {\r\n  var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n  Object.keys(productReconciliationReportValidationDef).forEach(function (key) {\r\n      validationErrors[key] = Utilities.validateField(\r\n        productReconciliationReportValidationDef[key],\r\n          modReconciliationInfo[key]\r\n      );\r\n  });\r\n  if (modReconciliationInfo.Status !== this.state.reconciliationInfo.Status) {\r\n    if (modReconciliationInfo.Remarks === null || modReconciliationInfo.Remarks === \"\") {\r\n      validationErrors[\"Remarks\"] = \"CaptainInfo_RemarksRequired\";\r\n    }\r\n  }\r\n\r\n  this.setState({ validationErrors });\r\n\r\n \r\n  var returnValue = true;\r\n\r\n\r\n \r\n  if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n          return value === \"\";\r\n      });\r\n\r\n\r\n  return returnValue;\r\n}\r\n \r\n\r\nreopenReconciliation(modReconciliationInfo) {\r\n  let keyCode = [\r\n      {\r\n          key: KeyCodes.reconciliationCode,\r\n          value: modReconciliationInfo.Code,\r\n      },\r\n  ];\r\n  let obj = {\r\n      keyDataCode: KeyCodes.reconciliationCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modReconciliationInfo,\r\n  };\r\n\r\n  let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ManualReconciliation_UpdateSuccessMsg\",\r\n      messageResultDetails: [\r\n          {\r\n              keyFields: [\"ReconciliationReportDetail_RcCode\"],\r\n              keyValues: [modReconciliationInfo.ReconciliationCode],\r\n              isSuccess: false,\r\n              errorMessage: \"\",\r\n          },\r\n      ],\r\n  };\r\n\r\n  axios(\r\n      RestAPIs.UpdateReconciliationReport,\r\n      Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n      )\r\n  ).then((response) => {\r\n      let result = response.data;\r\n      notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n      notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n      if (result.IsSuccess === true) {\r\n          this.setState(\r\n              {\r\n                  saveEnabled: Utilities.isInFunction(\r\n                      this.props.userDetails.EntityResult.FunctionsList,\r\n                      functionGroups.modify,\r\n                      fnProductReconciliationReports\r\n                  ),\r\n              },\r\n              () => this.getReconciliationReport({ Common_Code: modReconciliationInfo.ReconciliationCode })\r\n          );\r\n      } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n          this.setState({\r\n              saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnProductReconciliationReports\r\n              ),\r\n          });\r\n          console.log(\"Error in update ReconciliationReport:\", result.ErrorList);\r\n      }\r\n      this.props.onSaved(this.state.modReconciliationInfo, \"update\", notification);\r\n  })\r\n      .catch((error) => {\r\n          this.setState({\r\n              saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnProductReconciliationReports\r\n              ),\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(this.state.modReconciliationInfo, \"modify\", notification);\r\n      });\r\n}\r\n\r\nhandleViewUnAccountedTransactions = () => {\r\n try {\r\n  let modReconciliationInfo = lodash.cloneDeep(this.state.modReconciliationInfo);\r\n \r\n  if(modReconciliationInfo.EntityTypeCode===\"Meter\")\r\n  {\r\n  this.GetUnAccountedTransactionMeterList(this.props.shareholerCode)\r\n  this.setState({\r\n    showTankTransactions: false, showMeterTransactions: true,\r\n } )\r\n    }\r\n    else\r\n    {\r\n      this.GetUnAccountedTransactionTankList(this.props.shareholerCode)\r\n  this.setState({\r\n    showTankTransactions: true, showMeterTransactions: false,\r\n } )\r\n    }\r\n  }\r\n    catch (error) {\r\n        console.log(\"Error in handleViewUnAccountedTransactions\", error)\r\n    }\r\n};\r\n\r\nhandleRangeSelect = ({ to, from }) => {\r\n  if (to !== undefined) this.setState({ toDate: to });\r\n  if (from !== undefined) this.setState({ fromDate: from });\r\n};\r\nhandleLoadOrders = () => {\r\n  //debugger;\r\n  let error = Utilities.validateDateRange(\r\n    this.state.toDate,\r\n    this.state.fromDate\r\n  );\r\n\r\n  if (error !== \"\") {\r\n    this.setState({ dateError: error });\r\n  } else {\r\n    this.setState({ dateError: \"\" });\r\n    let kk=this.props.userDetails;\r\n    if(this.state.showMeterTransactions)\r\n    this.GetUnAccountedTransactionMeterList(this.props.shareholerCode);\r\n    else\r\n    this.GetUnAccountedTransactionTankList(this.props.shareholerCode);\r\n\r\n  }\r\n};\r\n\r\nGetUnAccountedTransactionTankList(shareholder) {\r\n  let fromDate = new Date(this.state.fromDate);\r\n  let toDate = new Date(this.state.toDate);\r\n  fromDate.setHours(0, 0, 0);\r\n  toDate.setHours(23, 59, 59);\r\n  let obj = {\r\n    ShareholderCode: shareholder,\r\n    startRange: fromDate,\r\n    endRange: toDate,\r\n  };\r\n  if (shareholder !== undefined && shareholder !== \"\") {\r\n    axios(\r\n      RestAPIs.GetUnAccountedTransactionTankList,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            data: this.fillTankDetails(result.EntityResult),\r\n            isReadyToRender: true,\r\n          });\r\n        } else {\r\n          this.setState({ data: [], isReadyToRender: true });\r\n          console.log(\r\n            \"Error in GetUnAccountedTransactionTankList:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ data: [], isReadyToRender: true });\r\n        console.log(\r\n          \"Error while getting UnAccountedTransactionTank List:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n}\r\n\r\nfillTankDetails(data) {\r\n  try {\r\n    data.Table.forEach((p) => {\r\n      if (\r\n        p.TankUnaccountedTransaction_UnAccountedGrossQuantity !== null &&\r\n        p.TankUnaccountedTransaction_UnAccountedGrossQuantity !== \"\"\r\n      )\r\n        p.TankUnaccountedTransaction_UnAccountedGrossQuantity =\r\n          p.TankUnaccountedTransaction_UnAccountedGrossQuantity.toLocaleString();\r\n      if (\r\n        p.TankUnaccountedTransaction_UnAccountedNetQuantity !== null &&\r\n        p.TankUnaccountedTransaction_UnAccountedNetQuantity !== \"\"\r\n      )\r\n        p.TankUnaccountedTransaction_UnAccountedNetQuantity =\r\n          p.TankUnaccountedTransaction_UnAccountedNetQuantity.toLocaleString();\r\n      if (\r\n        p.TankUnaccountedTransaction_Density !== null &&\r\n        p.TankUnaccountedTransaction_Density !== \"\"\r\n      )\r\n        p.TankUnaccountedTransaction_Density =\r\n          p.TankUnaccountedTransaction_Density.toLocaleString();\r\n    });\r\n\r\n    this.setState({ data });\r\n    return data;\r\n  } catch (error) {\r\n    console.log(\r\n      \"UnAccountedTransactionMeterDetailsComposite:Error occured on fillDetails\",\r\n      error\r\n    );\r\n  }\r\n}\r\n\r\nGetUnAccountedTransactionMeterList(shareholder) {\r\n  let fromDate = new Date(this.state.fromDate);\r\n  let toDate = new Date(this.state.toDate);\r\n  fromDate.setHours(0, 0, 0);\r\n  toDate.setHours(23, 59, 59);\r\n  let obj = {\r\n    ShareholderCode: shareholder,\r\n    startRange: fromDate,\r\n    endRange: toDate,\r\n  };\r\n  if (shareholder !== undefined && shareholder !== \"\") {\r\n    axios(\r\n      RestAPIs.GetUnAccountedTransactionMeterList,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            data: this.fillMeterDetails(result.EntityResult),\r\n            isReadyToRender: true,\r\n          });\r\n        } else {\r\n          this.setState({ data: [], isReadyToRender: true });\r\n          console.log(\r\n            \"Error in GetUnAccountedTransactionMeterList:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ data: [], isReadyToRender: true });\r\n        console.log(\r\n          \"Error while getting UnAccountedTransactionMeter List:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n}\r\n\r\nfillMeterDetails(data) {\r\n  try {\r\n    data.Table.forEach((p) => {\r\n      if (\r\n        p.MeterUnaccountedTransaction_UnAccountedGrossQuantity !== null &&\r\n        p.MeterUnaccountedTransaction_UnAccountedGrossQuantity !== \"\"\r\n      )\r\n        p.MeterUnaccountedTransaction_UnAccountedGrossQuantity =\r\n          p.MeterUnaccountedTransaction_UnAccountedGrossQuantity.toLocaleString();\r\n      if (\r\n        p.MeterUnaccountedTransaction_UnAccountedNetQuantity !== null &&\r\n        p.MeterUnaccountedTransaction_UnAccountedNetQuantity !== \"\"\r\n      )\r\n        p.MeterUnaccountedTransaction_UnAccountedNetQuantity =\r\n          p.MeterUnaccountedTransaction_UnAccountedNetQuantity.toLocaleString();\r\n    });\r\n    this.setState({ data });\r\n    return data;\r\n  } catch (error) {\r\n    console.log(\r\n      \"UnAccountedTransactionMeterDetailsComposite:Error occured on fillDetails\",\r\n      error\r\n    );\r\n  }\r\n}\r\n\r\n\r\n \r\n\r\nupdateReconciliationReport(modReconciliationInfo) {\r\n  let keyCode = [\r\n      {\r\n          key: KeyCodes.reconciliationCode,\r\n          value: modReconciliationInfo.Code,\r\n      },\r\n  ];\r\n  let obj = {\r\n      keyDataCode: KeyCodes.reconciliationCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modReconciliationInfo,\r\n  };\r\n\r\n  let notification = {\r\n      messageType: \"critical\",\r\n      message: \"ProductReconciliation_UpdateMsg\",\r\n      messageResultDetails: [\r\n          {\r\n              keyFields: [\"ReconciliationReportDetail_RcCode\"],\r\n              keyValues: [modReconciliationInfo.ReconciliationCode],\r\n              isSuccess: false,\r\n              errorMessage: \"\",\r\n          },\r\n      ],\r\n  };\r\n\r\n  axios(\r\n      RestAPIs.UpdateReconciliationReport,\r\n      Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n      )\r\n  ).then((response) => {\r\n      let result = response.data;\r\n      notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n      notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n      if (result.IsSuccess === true) {\r\n          this.setState(\r\n              {\r\n                  saveEnabled: Utilities.isInFunction(\r\n                      this.props.userDetails.EntityResult.FunctionsList,\r\n                      functionGroups.modify,\r\n                      fnProductReconciliationReports\r\n                  ),\r\n              },\r\n              () => this.getReconciliationReport({ Common_Code: modReconciliationInfo.ReconciliationCode })\r\n          );\r\n      } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n              result.ErrorList[0];\r\n          this.setState({\r\n              saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnProductReconciliationReports\r\n              ),\r\n          });\r\n          console.log(\"Error in update ReconciliationReport:\", result.ErrorList);\r\n      }\r\n      this.props.onSaved(this.state.modReconciliationInfo, \"update\", notification);\r\n  })\r\n      .catch((error) => {\r\n          this.setState({\r\n              saveEnabled: Utilities.isInFunction(\r\n                  this.props.userDetails.EntityResult.FunctionsList,\r\n                  functionGroups.modify,\r\n                  fnProductReconciliationReports\r\n              ),\r\n          });\r\n          notification.messageResultDetails[0].errorMessage = error;\r\n          this.props.onSaved(this.state.modReconciliationInfo, \"modify\", notification);\r\n      });\r\n}\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n      const reconciliationInfo = lodash.cloneDeep(this.state.reconciliationInfo);\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modReconciliationInfo: { ...reconciliationInfo },\r\n          selectedCompRow: [],\r\n          validationErrors,\r\n        } \r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"ProductReconciliationDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getReconciliationReport(prodReconReportRow) {\r\n        \r\n    if (prodReconReportRow.Common_Code === undefined) {\r\n        this.setState({\r\n            reconciliationInfo: lodash.cloneDeep(emptyReconciliationInfo),\r\n            modReconciliationInfo: lodash.cloneDeep(emptyReconciliationInfo),\r\n            isReadyToRender: true,\r\n            \r\n            saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.add,\r\n                fnProductReconciliationReports\r\n            ),\r\n        },\r\n         \r\n        );\r\n        return;\r\n    }\r\n    var keyCode = [\r\n        {\r\n            key: KeyCodes.reconciliationCode,\r\n            value: prodReconReportRow.Common_Code,\r\n        }\r\n    ];\r\n    var obj = {\r\n        reconciliationCode: prodReconReportRow.Common_Code,\r\n        keyDataCode: KeyCodes.reconciliationCode,\r\n        KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n        RestAPIs.GetReconciliationReport,\r\n        Utilities.getAuthenticationObjectforPost(\r\n            obj,\r\n            this.props.tokenDetails.tokenInfo\r\n        )\r\n    ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n            result.EntityResult.ReconciliationCode = result.EntityResult.ReconciliationCode.toString();\r\n            this.setState(\r\n                {\r\n                    isReadyToRender: true,\r\n                    reconciliationInfo: lodash.cloneDeep(result.EntityResult),\r\n                    modReconciliationInfo: lodash.cloneDeep(result.EntityResult),\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.modify,\r\n                        fnProductReconciliationReports\r\n                    ),\r\n                }, \r\n            );\r\n        } else {\r\n            this.setState({\r\n              reconciliationInfo: lodash.cloneDeep(emptyReconciliationInfo),\r\n              modReconciliationInfo: lodash.cloneDeep(emptyReconciliationInfo),\r\n                isReadyToRender: true,\r\n            });\r\n            console.log(\"Error in get ReconciliationReport:\", result.ErrorList);\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            console.log(\"Error while get ReconciliationReport:\", error, prodReconReportRow);\r\n        });\r\n}\r\n\r\n\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modReconciliationInfo = lodash.cloneDeep(this.state.modReconciliationInfo);\r\n\r\n      modReconciliationInfo[propertyName] = data;\r\n      this.setState({ modReconciliationInfo });\r\n\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (productReconciliationReportValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          productReconciliationReportValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n \r\n    } catch (error) {\r\n      console.log(\r\n        \"ProductReconciliationDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getLookUpData() {\r\n    axios(\r\n      RestAPIs.GetLookUpData + \"?LookUpTypeCode=ReportConfig\",\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        const result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          var { reonciliationReportNames } = { ...this.state };\r\n          reonciliationReportNames.tank = result.EntityResult.TankFolio;\r\n          reonciliationReportNames.meter = result.EntityResult.MeterReconciliation;\r\n\r\n          this.setState({ reonciliationReportNames });\r\n        } else {\r\n          console.log(\"Error in getLookUpData: \", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"ProductReconciliationDetailsComposite: Error occurred on getLookUpData\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  handleModalBack = () => {\r\n    this.setState({ showReport: false });\r\n  };\r\n\r\n  renderModal() {\r\n   \r\n    var { reonciliationReportNames } = { ...this.state };\r\n     \r\n    let path = null;\r\n    let reportName = '';\r\n   if(this.state.reconciliationInfo.EntityTypeCode === \"Meter\")\r\n    reportName = reonciliationReportNames.meter;\r\n    else\r\n    reportName= reonciliationReportNames.tank;\r\n   \r\n    if (this.props.userDetails.EntityResult.IsArchived) {\r\n      path = \"TM/\" + Constants.TMReportArchive + \"/\" + reportName;\r\n    } else {\r\n      path = \"TM/\" + Constants.TMReports + \"/\" + reportName;\r\n    }\r\n    let paramValues = {};\r\n\r\n      paramValues = {\r\n        Culture: this.props.userDetails.EntityResult.UICulture,\r\n        ReconciliationCode: this.state.reconciliationInfo.ReconciliationCode,\r\n        readonly: 1\r\n      };\r\n   \r\n    return (\r\n      <ErrorBoundary>\r\n        <ReportDetails\r\n          showReport={this.state.showReport}\r\n          handleBack={this.handleModalBack}\r\n          handleModalClose={this.handleModalBack}\r\n          proxyServerHost={RestAPIs.WebAPIURL}\r\n          reportServiceHost={this.reportServiceURI}\r\n          filePath={path}\r\n          parameters={paramValues}\r\n        />\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n\r\n  handleViewReport = () => {\r\n    try {\r\n      if (this.reportServiceURI === undefined) {\r\n        axios(\r\n          RestAPIs.GetReportServiceURI,\r\n          Utilities.getAuthenticationObjectforGet(\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        ).then((response) => {\r\n          if (response.data.IsSuccess) {\r\n            this.reportServiceURI = response.data.EntityResult;\r\n            this.setState({ showReport: true });\r\n          }\r\n        });\r\n      } else {\r\n        this.setState({ showReport: true});\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log(\r\n        \"ProductReconciliationDetailsComposite:Error occured on handleView Report\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  \r\n  BackEvent = () => {\r\n    try {\r\n        this.setState({\r\n           showTankTransactions: false,showMeterTransactions: false,\r\n        }, )\r\n    }\r\n    catch (error) {\r\n        console.log(\"Error in BackEvent\", error)\r\n    }\r\n}\r\n\r\n\r\n\r\n  handleReconciliationStatusChange = (value) => {\r\n    try {\r\n      let modReconciliationInfo = lodash.cloneDeep(this.state.modReconciliationInfo);\r\n      modReconciliationInfo.Status = value;\r\n      if (modReconciliationInfo.Status !== this.state.reconciliationInfo.Status)\r\n      modReconciliationInfo.Remarks = \"\";\r\n      this.setState({ modReconciliationInfo });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const listOptions = {\r\n      productReconciliationStatusOptions: this.state.productReconciliationStatusOptions,\r\n    };\r\n\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"CaptainInfo_LastUpdated\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modReconciliationInfo.LastUpdatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modReconciliationInfo.LastUpdatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"CaptainInfo_CreatedTime\",\r\n        fieldValue:\r\n          new Date(this.state.modReconciliationInfo.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modReconciliationInfo.CreatedTime).toLocaleTimeString(),\r\n      },\r\n \r\n    ];\r\n\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.reconciliationInfo.ReconciliationCode}\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        {this.state.showTankTransactions || this.state.showMeterTransactions ? (\r\n          this.state.showMeterTransactions?(\r\n          <ErrorBoundary>\r\n          <TMTransactionFilters\r\n            dateRange={{ from: this.state.fromDate, to: this.state.toDate }}\r\n            dateError={this.state.dateError}\r\n            handleRangeSelect={this.handleRangeSelect}\r\n            handleLoadOrders={this.handleLoadOrders}\r\n            filterText=\"LoadTransactionMeter\"\r\n          ></TMTransactionFilters>\r\n      \r\n                      <ViewMeterUnAccountedTransactionsDetails\r\n                          transactionData={this.state.data.Table}\r\n                          handleBack={this.BackEvent}\r\n                          pageSize={this.props.userDetails.EntityResult.PageAttibutes\r\n                              .WebPortalListPageSize}\r\n                      >\r\n                      </ViewMeterUnAccountedTransactionsDetails>\r\n                  </ErrorBoundary>) :\r\n                   <ErrorBoundary>\r\n                   <TMTransactionFilters\r\n                     dateRange={{ from: this.state.fromDate, to: this.state.toDate }}\r\n                     dateError={this.state.dateError}\r\n                     handleRangeSelect={this.handleRangeSelect}\r\n                     handleLoadOrders={this.handleLoadOrders}\r\n                     filterText=\"LoadTransactionTank\"\r\n                   ></TMTransactionFilters>\r\n                      <ViewTankUnAccountedTransactionsDetails\r\n                          transactionData={this.state.data.Table}\r\n                          handleBack={this.BackEvent}\r\n                          pageSize={this.props.userDetails.EntityResult.PageAttibutes\r\n                              .WebPortalListPageSize}\r\n                      >\r\n                      </ViewTankUnAccountedTransactionsDetails>\r\n                  </ErrorBoundary>\r\n                        ):\r\n      this.state.showReport === false ? (\r\n        <ErrorBoundary>\r\n          <ProductReconciliationReportDetails\r\n            reconciliationInfo={this.state.reconciliationInfo}\r\n            modReconciliationInfo={this.state.modReconciliationInfo}\r\n            listOptions={listOptions}\r\n            validationErrors={this.state.validationErrors}\r\n            onFieldChange={this.handleChange}\r\n            handleReconciliationStatusChange={this.handleReconciliationStatusChange}\r\n            handleReopenReconciliation={this.handleReopenReconciliation}\r\n            handleViewReport={this.handleViewReport}\r\n            handleViewUnAccountedTransactions= {this.handleViewUnAccountedTransactions}\r\n          ></ProductReconciliationReportDetails>\r\n        <TMDetailsUserActions\r\n          handleBack={this.props.onBack}\r\n          handleSave={this.handleSave}\r\n          handleReset={this.handleReset}\r\n          saveEnabled={this.state.saveEnabled}\r\n        ></TMDetailsUserActions>\r\n          \r\n      </ErrorBoundary>\r\n      \r\n          ) : (this.renderModal())\r\n        }\r\n         \r\n         {\r\n           \r\n         this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={functionGroups.modify}\r\n            functionGroup={fnProductReconciliationReports}\r\n            handleOperation={this.updateProductReconciliationReport}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProductReconciliationReportDetailsComposite);\r\n\r\nProductReconciliationReportDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n  shareholerCode: PropTypes.func.isRequired\r\n};","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { DatePicker, Button } from \"@scuf/common\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function TMTransactionFilters({\r\n  handleDateTextChange,\r\n  handleRangeSelect,\r\n  handleLoadOrders,\r\n  dateError,\r\n  dateRange,\r\n  filterText,\r\n}) {\r\n  //console.log(dateError);\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"dateRangeContainer\">\r\n          <div className=\"dateRangeMargin\">\r\n            <DatePicker\r\n              type=\"daterange\"\r\n              closeOnSelection={true}\r\n              error={t(dateError)}\r\n              displayFormat={getCurrentDateFormat()}\r\n              //value={dateRange}\r\n              rangeValue={dateRange}\r\n              onTextChange={handleDateTextChange}\r\n              onRangeSelect={handleRangeSelect}\r\n              reserveSpace={false}\r\n            />\r\n          </div>\r\n          <div className=\"dateSearch\">\r\n            <Button content={t(filterText)} onClick={handleLoadOrders} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport * as WjCore from \"@grapecity/wijmo\";\r\nimport { ReportViewer } from \"@grapecity/wijmo.react.viewer\";\r\nimport * as wjViewer from \"@grapecity/wijmo.viewer\";\r\nimport \"@grapecity/wijmo.styles/wijmo.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Constants from \"./../../../JS/Constants\";\r\nimport { connect } from \"react-redux\";\r\n\r\nTMReportViewer.propTypes = {\r\n  proxyServerHost: PropTypes.string.isRequired,\r\n  reportServiceHost: PropTypes.string.isRequired,\r\n  parameters: PropTypes.object.isRequired,\r\n};\r\n\r\nTMReportViewer.defaultProps = {\r\n  parameters: {},\r\n};\r\n\r\nWjCore.setLicenseKey(Constants.wizmoKey);\r\n\r\nfunction TMReportViewer({\r\n  proxyServerHost,\r\n  reportServiceHost,\r\n  parameters,\r\n  filePath,\r\n  ...props\r\n}) {\r\n  //   const [proxyHost, setProxyHost] = useState(\r\n  //     \"http://localhost:8888/TMWebProxyAPI/\"\r\n  //   );\r\n  //   const [reportServiceHost, setReportServiceHost] = useState(\r\n  //     \"http://localhost:5632/\"\r\n  //   );\r\n  //   const [reportUrl, setReportUrl] = useState(proxyHost + \"api/report\");\r\n  //   const [filePath, setFilePath] = useState(\r\n  //     \"TM/\" + \"TMReports/\" + \"CarrierCompanyReport\"\r\n  //   );\r\n  const reportUrl = proxyServerHost + \"api/report\";\r\n  //const filePath = \"TM/\" + \"TMReports/\" + reportName;\r\n\r\n  const beforeXhrRequestSend = (s, event) => {\r\n    // use this event for Authorization purpose\r\n    const prevBeforeSend = event.settings.beforeSend;\r\n    event.settings.beforeSend = function (xhr) {\r\n      prevBeforeSend && prevBeforeSend(xhr);\r\n      //here you may add the params for XMLHttpRequest as required\r\n      if (!props.userDetails.EntityResult.IsWebPortalUser)\r\n        xhr.withCredentials = true;\r\n      if (xhr.URL_DEBUG.indexOf(\"parameters\") > -1) {\r\n        xhr.onreadystatechange = function () {\r\n          if (this.readyState === 4 && this.status === 200) {\r\n            var host = s.hostElement;\r\n            setTimeout(() => {\r\n              var splitter = host.querySelector(\".wj-viewer-splitter\");\r\n              var param = host\r\n                .querySelector(\".wj-viewer-tabsleft\")\r\n                .querySelectorAll(\"li\")[2];\r\n              if (!param.disabled) {\r\n                param.className = \"hidden\";\r\n                splitter.click();\r\n              }\r\n            }, 1000);\r\n          }\r\n        };\r\n      }\r\n    };\r\n  };\r\n  let header = {\r\n    Authorization: \"Bearer \" + props.tokenDetails.tokenInfo,\r\n  };\r\n\r\n  // let header = {\r\n  //   Authorization: \"Bearer \" + \"fiewjfjewifi\",\r\n  // };\r\n\r\n  const initViewer = (s, event) => {\r\n    wjViewer._ReportService.prototype.load = function (data) {\r\n      var _this = this;\r\n      var promise = new wjViewer._Promise();\r\n      if (!this._checkReportController(promise)) {\r\n        return promise;\r\n      }\r\n      this.httpRequest(this._getReportInstancesUrl(), {\r\n        method: \"POST\",\r\n        data: data,\r\n      }).then(\r\n        function (xhr) {\r\n          var v = wjViewer._parseReportExecutionInfo(xhr.responseText);\r\n          _this._instanceId = v.id;\r\n          _this._status = wjViewer._ExecutionStatus.loaded;\r\n          _this._outlinesLocation = v.outlinesLocation;\r\n          _this._statusLocation = v.statusLocation.replace(\r\n            reportServiceHost,\r\n            proxyServerHost\r\n          );\r\n          _this._pageSettingsLocation = v.pageSettingsLocation;\r\n          _this._featuresLocation = v.featuresLocation;\r\n          _this._parametersLocation = v.parametersLocation;\r\n          promise.resolve(v);\r\n        },\r\n        function (xhr) {\r\n          promise.reject(_this._getError(xhr));\r\n        }\r\n      );\r\n      return promise;\r\n    };\r\n  };\r\n\r\n  //console.log(props.userDetails.EntityResult.IsWebPortalUser, header);\r\n  return (\r\n    <div>\r\n      {props.userDetails.EntityResult.IsWebPortalUser ? (\r\n        <div>\r\n          <ReportViewer\r\n            requestHeaders={header}\r\n            style={{ height: \"80vh\" }}\r\n            parameters={parameters}\r\n            serviceUrl={reportUrl}\r\n            filePath={filePath}\r\n            initialized={initViewer}\r\n            beforeSendRequest={beforeXhrRequestSend}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <ReportViewer\r\n            //requestHeaders={header}\r\n            style={{ height: \"80vh\" }}\r\n            parameters={parameters}\r\n            serviceUrl={reportUrl}\r\n            filePath={filePath}\r\n            initialized={initViewer}\r\n            beforeSendRequest={beforeXhrRequestSend}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TMReportViewer);\r\n","import React from \"react\";\r\nimport { Modal, Button, Header } from \"@scuf/common\";\r\nimport TMReportViewer from \"../Common/TMReportViewer\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nReportDetails.propTypes = {\r\n  proxyServerHost: PropTypes.string.isRequired,\r\n  reportServiceHost: PropTypes.string.isRequired,\r\n  filePath: PropTypes.string.isRequired,\r\n  handleBack: PropTypes.func.isRequired,\r\n  showReport: PropTypes.bool.isRequired,\r\n  handleModalClose: PropTypes.func.isRequired,\r\n  parameters: PropTypes.object.isRequired,\r\n};\r\nReportDetails.defaultProps = {\r\n  parameters: {},\r\n};\r\nexport default function ReportDetails({\r\n  proxyServerHost,\r\n  reportServiceHost,\r\n  filePath,\r\n  handleBack,\r\n  showReport,\r\n  handleModalClose,\r\n  parameters,\r\n}) {\r\n  const [t] = useTranslation();\r\n\r\n  return (\r\n    <Modal\r\n      style={{ padding: \"0px\" }}\r\n      size=\"fullscreen\"\r\n      open={showReport}\r\n      // onClose={handleModalClose}\r\n    >\r\n      <div>\r\n        <Header title={t(\"Header_TerminalManager\")} menu={false} />\r\n        <TMReportViewer\r\n          proxyServerHost={proxyServerHost}\r\n          reportServiceHost={reportServiceHost}\r\n          filePath={filePath}\r\n          parameters={parameters}\r\n        />\r\n        <div style={{ marginTop: \"10px\", marginLeft: \"20px\" }}>\r\n          <Button\r\n            className=\"backButton\"\r\n            onClick={handleBack}\r\n            content={t(\"Report_Back\")}\r\n          ></Button>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["ProductReconciliationReportDetails","_ref","reconciliationInfo","modReconciliationInfo","validationErrors","onFieldChange","listOptions","handleReconciliationStatusChange","handleReopenReconciliation","handleViewReport","handleViewUnAccountedTransactions","handleReset","_jsx","TranslationConsumer","children","t","_jsxs","className","Input","fluid","value","ReconciliationCode","disabled","label","error","Code","reserveSpace","Date","StartDate","toLocaleDateString","toLocaleTimeString","Name","EndDate","Select","placeholder","Status","options","Utilities","productReconciliationStatusOptions","onChange","data","search","onResultsMessage","Remarks","indicator","ReportWarnings","Button","type","onClick","content","EntityTypeCode","toUpperCase","Constants","Reconciled_Diff","defaultProps","ViewMeterUnAccountedTransactionsDetails","transactionData","handleBack","pageSize","id","DataTable","reorderableColumns","resizableColumns","searchPlaceholder","rows","Column","field","header","editable","editFieldType","renderer","cellData","ViewTankUnAccountedTransactionsDetails","ProductReconciliationReportDetailsComposite","Component","constructor","arguments","state","lodash","emptyReconciliationInfo","productReconciliationReportValidationDef","isReadyToRender","saveEnabled","showReport","reonciliationReportNames","tank","meter","showTankTransactions","showMeterTransactions","fromDate","toDate","dateError","showAuthenticationLayout","tempReconciliationInfo","updateProductReconciliationReport","this","handleAuthenticationClose","setState","updateReconciliationReport","console","log","handleSave","validateSave","props","userDetails","EntityResult","IsWebPortalUser","RefreshWithLatestTransactions","reopenReconciliation","GetUnAccountedTransactionMeterList","shareholerCode","GetUnAccountedTransactionTankList","handleRangeSelect","to","from","undefined","handleLoadOrders","Object","keys","forEach","key","selectedCompRow","handleChange","propertyName","handleModalBack","reportServiceURI","axios","RestAPIs","tokenDetails","tokenInfo","then","response","IsSuccess","BackEvent","componentDidMount","IsArchived","getReconciliationReport","selectedRow","getLookUpData","getProductReconciliationStatus","Reconciliation_Status","componentWillReceiveProps","nextProps","reconciliationCode","Common_Code","reconStatus","result","push","filteredStatus","Open","filter","objOption","In_Progress","Reconciled_NoDiff","Approved","Closed","Rejected","length","ErrorList","catch","returnValue","values","every","keyCode","KeyCodes","obj","keyDataCode","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","FunctionsList","functionGroups","modify","fnProductReconciliationReports","onSaved","shareholder","setHours","ShareholderCode","startRange","endRange","fillTankDetails","Table","p","TankUnaccountedTransaction_UnAccountedGrossQuantity","toLocaleString","TankUnaccountedTransaction_UnAccountedNetQuantity","TankUnaccountedTransaction_Density","fillMeterDetails","MeterUnaccountedTransaction_UnAccountedGrossQuantity","MeterUnaccountedTransaction_UnAccountedNetQuantity","prodReconReportRow","toString","add","TankFolio","MeterReconciliation","renderModal","path","reportName","paramValues","Culture","UICulture","readonly","ErrorBoundary","ReportDetails","handleModalClose","proxyServerHost","reportServiceHost","filePath","parameters","render","popUpContents","fieldName","fieldValue","LastUpdatedTime","CreatedTime","TMDetailsHeader","entityCode","TMTransactionFilters","dateRange","filterText","PageAttibutes","WebPortalListPageSize","TMDetailsUserActions","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","newEntityName","style","margin","Popup","element","Icon","marginLeft","root","name","size","position","List","map","Content","float","handleDateTextChange","DatePicker","closeOnSelection","displayFormat","getCurrentDateFormat","rangeValue","onTextChange","onRangeSelect","TMReportViewer","reportUrl","beforeXhrRequestSend","s","event","prevBeforeSend","settings","beforeSend","xhr","withCredentials","URL_DEBUG","indexOf","onreadystatechange","readyState","status","host","hostElement","setTimeout","splitter","querySelector","param","querySelectorAll","click","Authorization","initViewer","wjViewer","prototype","load","_this","promise","_checkReportController","httpRequest","_getReportInstancesUrl","method","v","responseText","_instanceId","_status","loaded","_outlinesLocation","outlinesLocation","_statusLocation","statusLocation","replace","_pageSettingsLocation","pageSettingsLocation","_featuresLocation","featuresLocation","_parametersLocation","parametersLocation","resolve","reject","_getError","ReportViewer","requestHeaders","height","serviceUrl","initialized","beforeSendRequest","WjCore","useTranslation","Modal","padding","open","Header","title","menu","marginTop","getOptionsWithSelect","ddlOptions","selectOptionText","Array","isArray","option","text","unshift","language","window","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}