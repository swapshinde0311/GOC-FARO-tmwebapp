{"version":3,"file":"static/js/4348.4c53db13.chunk.js","mappings":"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","sources":["Components/UIBase/Common/svgCircle.jsx","Components/Composite/Details/ENDashboardDetailsComposite.jsx","Components/UIBase/Common/Carousel.jsx","Components/Composite/Summary/ENDashboardSummaryComposite.jsx","Components/Composite/Entity/ENDashboardComposite.jsx","Components/Composite/Entity/ENDashboardOverviewComposite.jsx","JS/NotifyEvent.js","JS/functionalUtilities.js"],"sourcesContent":["import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport \"./../../../CSS/styles.css\";\r\n\r\nconst SvgCircle = (props) => {\r\n  //const [offset, setOffset] = useState(0);\r\n  //const circleRef = useRef(null);\r\n  const { size, progress, strokeWidth, circleOneStroke } = props;\r\n\r\n  const center = size / 2;\r\n  const radius = size / 2 - strokeWidth / 2;\r\n  //const circumference = 2 * Math.PI * radius;\r\n  //const offset = ((100 - progress) / 100) * circumference;\r\n  // useEffect(() => {\r\n  //   const progressOffset = ((100 - progress) / 100) * circumference;\r\n  //   setOffset(progressOffset);\r\n  //   circleRef.current.style =\r\n  //     \"transition: stroke-dashoffset 850ms ease-in-out;\";\r\n  // }, [setOffset, circumference, progress, offset]);\r\n\r\n  return (\r\n    <>\r\n      <svg className=\"svg\" width={size} height={size}>\r\n        <circle\r\n          className=\"svg-circle-bg\"\r\n          stroke={circleOneStroke}\r\n          cx={center}\r\n          cy={center}\r\n          r={radius}\r\n          strokeWidth={strokeWidth}\r\n        />\r\n\r\n        <text x={`${center}`} y={`${center + 10}`} className=\"svg-circle-text\">\r\n          {progress}\r\n        </text>\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nSvgCircle.propTypes = {\r\n  size: PropTypes.number.isRequired,\r\n  progress: PropTypes.number.isRequired,\r\n  strokeWidth: PropTypes.number.isRequired,\r\n  circleOneStroke: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default SvgCircle;\r\n","//import { Button } from \"@scuf/common\";\r\nimport { Icon } from \"@scuf/common\";\r\nimport React, { Component } from \"react\";\r\nimport SvgCircle from \"../../UIBase/Common/svgCircle\";\r\nimport lodash from \"lodash\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { kpiTerminalDashboardDetails } from \"../../../JS/KPIPageName\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport PropTypes from \"prop-types\";\r\nconst mapOptions = window[\"runConfig\"].mapOptions;\r\n\r\nclass ENDashboardDetailsComposite extends Component {\r\n  state = {\r\n    selectedMOT: \"\",\r\n    expandedRows: [],\r\n    kpiList: [],\r\n  };\r\n  componentDidMount() {\r\n    try {\r\n      this.getKPIList();\r\n      this.startRefreshTimer();\r\n    } catch (error) {\r\n      console.log(\r\n        \"EnDashboarDetailsComposite:Error occured on ComponentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.stopRefreshTimer();\r\n  }\r\n  startRefreshTimer = () => {\r\n    let refreshInterval = 5;\r\n    if (\r\n      mapOptions.refreshMinutes !== undefined &&\r\n      mapOptions.refreshMinutes > 0\r\n    ) {\r\n      refreshInterval = mapOptions.refreshMinutes;\r\n    }\r\n    this.refreshTimer = setInterval(() => {\r\n      console.log(\"Details Refreshing started \" + refreshInterval + new Date()); //TODO:Remove after testing\r\n      this.getKPIList();\r\n    }, refreshInterval * 60 * 1000);\r\n  };\r\n  stopRefreshTimer = () => {\r\n    if (this.refreshTimer !== null) {\r\n      clearInterval(this.refreshTimer);\r\n      console.log(\"Details Refreshing stopped \" + new Date()); //TODO:Remove after testing\r\n    }\r\n  };\r\n  getKPIList() {\r\n    var notification = {\r\n      message: \"\",\r\n      messageType: \"critical\",\r\n      messageResultDetails: [], //{keyFields: [\"DriverInfo_Code\"],\r\n      //keyValues: [this.state.modDriver.Code],\r\n      //isSuccess: false,\r\n      //errorMessage: \"\",}\r\n    };\r\n    let objKPIRequestData = {\r\n      PageName: kpiTerminalDashboardDetails,\r\n      InputParameters: [\r\n        {\r\n          key: \"TerminalCode\",\r\n          value: this.props.selectedTerminal.TerminalCode,\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.GetKPI,\r\n      Utilities.getAuthenticationObjectforPost(objKPIRequestData, null)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        //console.log(result);\r\n        if (result.IsSuccess === true) {\r\n          this.setState({ kpiList: result.EntityResult.ListKPIDetails });\r\n        } else {\r\n          this.setState({ kpiList: [] });\r\n          console.log(\"Error in Dashboard KPIList:\", result.ErrorList);\r\n          notification.messageResultDetails.push({\r\n            keyFields: [],\r\n            keyValues: [],\r\n            isSuccess: false,\r\n            errorMessage: result.ErrorList[0],\r\n          });\r\n        }\r\n        if (notification.messageResultDetails.length > 0) {\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Dashboard KPIList:\", error);\r\n      });\r\n  }\r\n\r\n  getTPIList() {\r\n    //debugger;\r\n    let selectedMOT = this.state.selectedMOT;\r\n    //if (selectedMOT !== \"\") {\r\n    let terminal = this.props.selectedTerminal;\r\n    let motTPIDetails = [];\r\n\r\n    let terminalTPis = this.props.tpiList.filter(\r\n      (terminalTPI) => terminalTPI.Key === terminal.TerminalCode\r\n    );\r\n\r\n    try {\r\n      if (terminalTPis.length > 0) {\r\n        if (Array.isArray(terminalTPis[0].Value.MoTTPIDetails)) {\r\n          let motList = [];\r\n          if (selectedMOT !== \"\") {\r\n            motList = terminalTPis[0].Value.MoTTPIDetails.filter(\r\n              (mottpi) => mottpi.Key === selectedMOT\r\n            );\r\n          } else {\r\n            motList = [{ Key: \"Terminal\", Value: [] }];\r\n            terminalTPis[0].Value.MoTTPIDetails.forEach((mot) => {\r\n              motList[0].Value = motList[0].Value.concat(mot.Value);\r\n            });\r\n          }\r\n          if (motList.length > 0) {\r\n            if (\r\n              Array.isArray(motList[0].Value) &&\r\n              motList[0].Value.length > 0\r\n            ) {\r\n              motList[0].Value.forEach((tpi) => {\r\n                if (tpi.ParentTPIDetails.ChartType === \"SingleValue\") {\r\n                  let tpiDetails = lodash.cloneDeep(tpi.ParentTPIDetails);\r\n\r\n                  tpiDetails[\"childTPIs\"] = lodash.cloneDeep(\r\n                    tpi.ChildTPIDetails\r\n                  );\r\n                  motTPIDetails.push(tpiDetails);\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error in format TPIs at DashboardDetails.getTPIList\", error);\r\n    }\r\n    //console.log(\"selectedMOT\", motTPIDetails);\r\n    return (\r\n      <ErrorBoundary>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <DataTable\r\n              data={motTPIDetails}\r\n              reorderableColumns={true}\r\n              resizableColumns={true}\r\n              //search={true}\r\n              expandedRows={this.state.expandedRows}\r\n              rowExpansionTemplate={this.rowExpansionTemplate}\r\n            //searchPlaceholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n            // rows={pageSize}\r\n            >\r\n              <DataTable.Column\r\n                initialWidth=\"20%\"\r\n                key=\"TPICategory\"\r\n                field=\"TPICategory\"\r\n                header={t(\"tpi_Category\")}\r\n                sortable={true}\r\n                renderer={(cellData) => {\r\n                  return t(\"tpi_\" + cellData.rowData[\"TPICategory\"]);\r\n                }}\r\n              />\r\n              <DataTable.Column\r\n                initialWidth=\"20%\"\r\n                key=\"TPIName\"\r\n                //field=\"TPIName\"\r\n                header={t(\"tpi_Name\")}\r\n                // sortable={true}\r\n                renderer={(cellData) => {\r\n                  let configuration = JSON.parse(\r\n                    cellData.rowData[\"JSONFormat\"]\r\n                  );\r\n                  return t(\"tpi_\" + configuration.reflocalekey + \"_name\");\r\n                }}\r\n              />\r\n\r\n              <DataTable.Column\r\n                //initialWidth={columnDetail.Width}\r\n                key=\"Formula\"\r\n                // field=\"TPIName\"\r\n                header={t(\"tpi_Formula\")}\r\n                // sortable={true}\r\n                renderer={(cellData) => {\r\n                  //debugger;\r\n                  let configuration = JSON.parse(\r\n                    cellData.rowData[\"JSONFormat\"]\r\n                  );\r\n                  let formulaColumn = configuration.item.formulaCol;\r\n                  let itemData = cellData.rowData[\"TPIData\"][0];\r\n                  if (itemData[formulaColumn] === null) {\r\n                    return \"---\";\r\n                  } else {\r\n                    return <span>{itemData[formulaColumn]}</span>;\r\n                  }\r\n                }}\r\n              />\r\n              <DataTable.Column\r\n                initialWidth=\"12%\"\r\n                key=\"TPIValue\"\r\n                //field=\"TPIName\"\r\n                header={t(\"tpi_Value\")}\r\n                // sortable={true}\r\n                renderer={(cellData) => {\r\n                  //debugger;\r\n                  let configuration = JSON.parse(\r\n                    cellData.rowData[\"JSONFormat\"]\r\n                  );\r\n                  let valueColumn = configuration.item.tpiValueCol;\r\n                  let unit = configuration.item.unit;\r\n                  let itemData = cellData.rowData[\"TPIData\"][0];\r\n                  if (itemData[valueColumn] === null) {\r\n                    return \"---\";\r\n                  } else {\r\n                    return (\r\n                      <span>\r\n                        {itemData[valueColumn]} {unit}\r\n                      </span>\r\n                    );\r\n                  }\r\n                }}\r\n              />\r\n              <DataTable.Column\r\n                initialWidth=\"10%\"\r\n                key=\"TPIIndex\"\r\n                field=\"TPIValue\"\r\n                header={t(\"tpi_Index\")}\r\n                sortable={true}\r\n                renderer={(cellData) => {\r\n                  let configuration = JSON.parse(\r\n                    cellData.rowData[\"JSONFormat\"]\r\n                  );\r\n                  let valueColumn = configuration.item.tpiValueCol;\r\n                  let itemData = cellData.rowData[\"TPIData\"][0];\r\n                  let categories = configuration.item.categories;\r\n                  let color = this.getTPIColorCode(\r\n                    categories,\r\n                    \"tpiValue\",\r\n                    itemData[valueColumn]\r\n                  );\r\n                  return (\r\n                    <span style={{ color: color }}>\r\n                      {cellData.rowData[\"TPIValue\"]}\r\n                    </span>\r\n                  );\r\n                }}\r\n              />\r\n              <DataTable.Column\r\n                initialWidth=\"5px\"\r\n                renderer={(data) => {\r\n                  if (data.rowData[\"childTPIs\"].length > 0) {\r\n                    // const open = this.state.expandedRows.includes(data.rowData);\r\n                    const open =\r\n                      this.state.expandedRows.findIndex(\r\n                        (x) =>\r\n                          x.TransportationType ===\r\n                          data.rowData.TransportationType &&\r\n                          x.TPIName === data.rowData.TPIName\r\n                      ) >= 0\r\n                        ? true\r\n                        : false;\r\n                    return (\r\n                      <div\r\n                        onClick={() => this.toggleExpand(data.rowData, open)}\r\n                      >\r\n                        <Icon\r\n                          root=\"common\"\r\n                          name={open ? \"caret-down\" : \"caret-right\"}\r\n                        />\r\n                      </div>\r\n                    );\r\n                  } else return \"\";\r\n                }}\r\n              />\r\n            </DataTable>\r\n          )}\r\n        </TranslationConsumer>\r\n      </ErrorBoundary>\r\n    );\r\n    // } else {\r\n    //   return \"\";\r\n    // }\r\n  }\r\n  getTPIColorCode(categories, indexColumn, tpiIndex) {\r\n    let colorCode = \"\";\r\n    try {\r\n      let modifiedIndex = tpiIndex === null ? 0 : tpiIndex;\r\n      if (Array.isArray(categories)) {\r\n        for (const category of categories) {\r\n          if (modifiedIndex >= category[indexColumn]) {\r\n            colorCode = category.color;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"DashboardDetails-GetColor-Error:\", error);\r\n    }\r\n    return colorCode;\r\n  }\r\n  rowExpansionTemplate(data) {\r\n    return <div>childTPIS: {data[\"childTPIs\"].length}</div>;\r\n  }\r\n\r\n  toggleExpand(data, open) {\r\n    let expanded = this.state.expandedRows;\r\n    if (open) {\r\n      let index = expanded.findIndex(\r\n        (item) =>\r\n          item.TransportationType === data.TransportationType &&\r\n          item.TPIName === data.TPIName //JSON.stringify(item) === JSON.stringify(data)\r\n      );\r\n      expanded.splice(index, 1);\r\n    } else {\r\n      expanded.push(data);\r\n    }\r\n    this.setState({ expandedRows: expanded });\r\n  }\r\n\r\n  handleMOTClick = (mot) => {\r\n    this.setState({ selectedMOT: mot === this.state.selectedMOT ? \"\" : mot });\r\n  };\r\n\r\n  getTransportationTPIIndexes() {\r\n    //debugger;\r\n    let terminal = this.props.selectedTerminal;\r\n    // let motTPIs = [];\r\n    let motDivs = [];\r\n    try {\r\n      let terminalTPis = this.props.tpiList.filter(\r\n        (terminalTPI) => terminalTPI.Key === terminal.TerminalCode\r\n      );\r\n\r\n      if (terminalTPis.length > 0) {\r\n        if (Array.isArray(terminalTPis[0].Value.MoTTPIIndex)) {\r\n          terminalTPis[0].Value.MoTTPIIndex.forEach((motTPI) => {\r\n            let terminalConfig = JSON.parse(terminal.TerminalConfig);\r\n            let categories = terminalConfig.TPIConfig[motTPI.Key];\r\n            let motIconClass = motTPI.Key.toLowerCase();\r\n            motIconClass =\r\n              \"icon-\" +\r\n              motIconClass.charAt(0).toUpperCase() +\r\n              motIconClass.slice(1);\r\n            let paneClassName = \"tpiMotPane\";\r\n            let motSpanclassName = \"tpiMOTType\";\r\n            if (motTPI.Key === this.state.selectedMOT) {\r\n              paneClassName = \"tpiSelectedMotPane\";\r\n              motSpanclassName = \"selectedtpiMOTType\";\r\n            }\r\n            motDivs.push(\r\n              <div className=\"col-12 col-md-6 col-lg-4 col-xl-3\">\r\n                <ErrorBoundary>\r\n                  <TranslationConsumer>\r\n                    {(t) => (\r\n                      <div className={paneClassName}>\r\n                        <div\r\n                          style={{\r\n                            display: \"flex\",\r\n                            padding: \"8px\",\r\n                            paddingBottom: \"0px\",\r\n                            borderBottom: \"1.5px solid #f0f0f0\",\r\n                          }}\r\n                        >\r\n                          <div>\r\n                            <span\r\n                              className={\r\n                                motIconClass +\r\n                                \" \" +\r\n                                motSpanclassName +\r\n                                \" font24\"\r\n                              }\r\n                            ></span>\r\n                          </div>\r\n\r\n                          <div>\r\n                            <span className={motSpanclassName}>\r\n                              {t(motTPI.Key)}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div\r\n                          style={{ height: \"100px\", cursor: \"pointer\" }}\r\n                          onClick={() => this.handleMOTClick(motTPI.Key)}\r\n                        >\r\n                          <SvgCircle\r\n                            progress={motTPI.Value}\r\n                            size={95}\r\n                            strokeWidth={5}\r\n                            circleOneStroke={this.getTPIColorCode(\r\n                              categories,\r\n                              \"tpiIndex\",\r\n                              motTPI.Value\r\n                            )} //\"#7ea9e1\"\r\n                          ></SvgCircle>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </TranslationConsumer>\r\n                </ErrorBoundary>\r\n              </div>\r\n            );\r\n          });\r\n        }\r\n\r\n        // motTPIs = terminalTPis[0].Value.MoTTPIIndex;\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"error in DashboardDetails- getTransportationTPIIndexes\",\r\n        error\r\n      );\r\n    }\r\n    return motDivs;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ErrorBoundary>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <div className=\" ui breadcrumb\">\r\n                <div\r\n                  className=\"section\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => this.props.onBackClick(1)}\r\n                >\r\n                  <Icon\r\n                    root=\"common\"\r\n                    name=\"caret-left\"\r\n                    className=\"caretLeft\"\r\n                  ></Icon>\r\n                </div>\r\n                <div className=\"section pl-1\">\r\n                  <span>\r\n                    {t(\"tpi_Benchmarking\") +\r\n                      \" - \" +\r\n                      this.props.selectedTerminal.TerminalCode}\r\n                  </span>\r\n                </div>\r\n                {/* <div>\r\n            <span\r\n              className=\"icon-Home section\"\r\n              onClick={() => this.props.onBackClick()}\r\n            ></span>\r\n          </div> */}\r\n              </div>\r\n              <ErrorBoundary>\r\n                <KPIDashboardLayout\r\n                  kpiList={this.state.kpiList}\r\n                ></KPIDashboardLayout>\r\n              </ErrorBoundary>\r\n\r\n              <div className=\"row\">{this.getTransportationTPIIndexes()}</div>\r\n\r\n              <div>{this.getTPIList()}</div>\r\n            </div>\r\n          )}\r\n        </TranslationConsumer>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ENDashboardDetailsComposite;\r\nENDashboardDetailsComposite.propTypes = {\r\n  tpiList: PropTypes.array.isRequired,\r\n  selectedTerminal: PropTypes.object.isRequired,\r\n  onBackClick: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { CarouselProvider, Slider, Slide, ButtonBack, ButtonNext } from 'pure-react-carousel';\r\nimport { Icon } from '@scuf/common';\r\nimport PropTypes from 'prop-types';\r\nimport \"pure-react-carousel/dist/react-carousel.es.css\";\r\nimport ErrorBoundary from '../../ErrorBoundary';\r\n\r\nconst Carousel = (props) => {\r\n\r\n    const getVisibleSlides = () => {\r\n        let screenWidth = window.screen.width;\r\n        if (screenWidth < 768) {\r\n            return 1\r\n        }\r\n        else if (screenWidth >= 768 && screenWidth < 992) {\r\n            return props.visibleSlides.tablet ? props.visibleSlides.tablet : 2;\r\n        }\r\n        else if (screenWidth >= 992 && screenWidth < 1600) {\r\n            return props.visibleSlides.laptop ? props.visibleSlides.laptop : 3;\r\n        }\r\n        else {\r\n            return props.visibleSlides.desktop ? props.visibleSlides.desktop : 4;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <CarouselProvider\r\n                naturalSlideWidth={props.slideWidth}\r\n                totalSlides={props.items.length}\r\n                visibleSlides={getVisibleSlides()}\r\n                naturalSlideHeight={props.slideHeight}\r\n            >\r\n                {/* adding enclosing div to place back and next button along the slides*/}\r\n                <div style={{ \"position\": \"relative\" }}>\r\n                    <Slider className='slider'>\r\n                        {\r\n                            props.items.map((item, index) => (\r\n                                <Slide key={index} index={index}>\r\n                                    <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                                        {props.renderItem(item)}\r\n                                    </div>\r\n                                </Slide>\r\n                            ))\r\n                        }\r\n                    </Slider>\r\n                    <ButtonBack className=\"carousel-back-button\">\r\n                        <Icon root=\"common\" className='carousel-next-prev-icon' name=\"caret-left\" size=\"large\" />\r\n                    </ButtonBack>\r\n                    <ButtonNext className=\"carousel-next-button\">\r\n                        <Icon root=\"common\" className='carousel-next-prev-icon' name=\"caret-right\" size=\"large\" />\r\n                    </ButtonNext>\r\n                </div>\r\n            </CarouselProvider>\r\n        </ErrorBoundary>\r\n    )\r\n}\r\n\r\nCarousel.propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    slideWidth: PropTypes.number,\r\n    slideHeight: PropTypes.number,\r\n    visibleSlides: PropTypes.object\r\n}\r\n\r\nCarousel.defaultProps = {\r\n    slideWidth: 100,\r\n    slideHeight: 100\r\n}\r\n\r\nexport default Carousel;","import React, { Component } from \"react\";\r\nimport { MapContainer, GeoJSON, Popup, Marker } from \"react-leaflet\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport axios from \"axios\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport L from \"leaflet\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport Carousel from \"../../UIBase/Common/Carousel\";\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { KpiHomePage } from \"../../../JS/KPIPageName\";\r\nimport DonutPieChart from \"../Common/Charts/DonutPieChart\";\r\nimport WithDetails from \"../Common/Charts/Wrappers/WithDetails\";\r\nimport { ChartType } from \"../../../JS/Constants\";\r\nimport LACSeriesChart from \"../Common/Charts/LACSeriesChart\";\r\nimport LACDynamicSeriesChart from \"../Common/Charts/LACDynamicSeriesChart\";\r\nimport { ExportChart } from \"../../../JS/DashboardUtilities\";\r\n\r\nconst mapOptions = window[\"runConfig\"].mapOptions;\r\n\r\n// const mapMarker = new L.icon({\r\n//   iconUrl: markerIcon,\r\n//   iconSize: 20,\r\n//   className: \"blinking\",\r\n// });\r\n// const mapMarker = L.divIcon({\r\n//   className: \"icon-Transactions blinking mapIcon\",\r\n// });\r\n\r\nclass ENDashboardSummaryComposite extends Component {\r\n  state = {\r\n    mapData: null,\r\n    carouselChartData: [],\r\n    chartRefs: {},\r\n    modalOpen: false,\r\n    parentKpiName: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      this.getMapData();\r\n      // fetch carousel details only for Enterprise\r\n      if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n        this.getCarouselChartData();\r\n        this.autoRefreshTimer();\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"ENDashboardSummary:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    if (this.timer) {\r\n      this.timer = clearInterval(this.timer);\r\n    }\r\n  };\r\n\r\n  autoRefreshTimer = () => {\r\n    let refreshInterval = 5;\r\n    if (\r\n      mapOptions.refreshMinutes !== undefined &&\r\n      mapOptions.refreshMinutes > 0\r\n    ) {\r\n      refreshInterval = mapOptions.refreshMinutes;\r\n    }\r\n\r\n    this.timer = setInterval(() => {\r\n      this.getCarouselChartData();\r\n    }, refreshInterval * 60 * 1000);\r\n  };\r\n\r\n  getMapData = () => {\r\n    axios(\"map.json\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        let mapData = response.data;\r\n        // console.log(mapData);\r\n        this.setState({ mapData });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Map data:\", error);\r\n      });\r\n  };\r\n  getTPIColorCode(categories, indexColumn, tpiIndex) {\r\n    let colorCode = \"\";\r\n    try {\r\n      if (Array.isArray(categories)) {\r\n        for (const category of categories) {\r\n          if (tpiIndex >= category[indexColumn]) {\r\n            colorCode = category.color;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"DashboardSummary-GetColor-Error:\", error);\r\n    }\r\n    return colorCode;\r\n  }\r\n  getTerminalPopupDetails(terminal) {\r\n    let terminalTPIList = this.props.tpiList.filter(\r\n      (terminalTPI) => terminalTPI.Key === terminal.TerminalCode\r\n    );\r\n    let tpiIndex = null;\r\n    let motTPIIndex = [];\r\n    if (terminalTPIList.length > 0) {\r\n      tpiIndex = terminalTPIList[0].Value.TerminalTPIIndex;\r\n      if (Array.isArray(terminalTPIList[0].Value.MoTTPIIndex)) {\r\n        terminalTPIList[0].Value.MoTTPIIndex.forEach((mot) => {\r\n          motTPIIndex.push(mot);\r\n        });\r\n      }\r\n    }\r\n    let terminalConfig = JSON.parse(terminal.TerminalConfig);\r\n    return (\r\n      <ErrorBoundary>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <div style={{ width: \"100%\" }}>\r\n              <div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-12 col-md-12 col-lg-12\">\r\n                    <span\r\n                      style={{\r\n                        fontSize: \"16px\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {terminal.TerminalCode + \" \" + t(\"tpi_Overview\")}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                {tpiIndex !== null ? (\r\n                  <div className=\"row\">\r\n                    <div className=\"col-8 col-md-8 col-lg-8\">\r\n                      <span style={{ fontSize: \"16px\" }}>\r\n                        {t(\"tpi_Terminal_Index\")}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"col-4 col-md-4 col-lg-4\">\r\n                      <span\r\n                        style={{\r\n                          //color: \"white\",\r\n                          fontSize: \"18px\",\r\n\r\n                          color: this.getTPIColorCode(\r\n                            terminalConfig.TPIConfig[\"Terminal\"],\r\n                            \"tpiIndex\",\r\n                            tpiIndex\r\n                          ),\r\n                          // border:\r\n                          //   \"1px solid \" +\r\n                          //   this.getTPIColorCode(\r\n                          //     terminalConfig.TPIConfig[\"Terminal\"],\r\n                          //     \"tpiIndex\",\r\n                          //     tpiIndex\r\n                          //   ),\r\n                          // borderRadius: \"5px\",\r\n                        }}\r\n                      >\r\n                        {tpiIndex}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n\r\n                {motTPIIndex.map((mot) => (\r\n                  <div className=\"row\">\r\n                    <div className=\"col-8 col-md-8 col-lg-8\">\r\n                      <span style={{ fontSize: \"16px\" }}>\r\n                        {t(\"tpi_\" + mot.Key + \"_Index\")}{\" \"}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"col-4 col-md-4 col-lg-4\">\r\n                      <span\r\n                        style={{\r\n                          fontSize: \"18px\",\r\n                          // color: \"white\",\r\n                          color: this.getTPIColorCode(\r\n                            terminalConfig.TPIConfig[mot.Key],\r\n                            \"tpiIndex\",\r\n                            mot.Value\r\n                          ),\r\n                          // border:\r\n                          //   \"1px solid \" +\r\n                          //   this.getTPIColorCode(\r\n                          //     terminalConfig.TPIConfig[mot.Key],\r\n                          //     \"tpiIndex\",\r\n                          //     mot.Value\r\n                          //   ),\r\n                          // borderRadius: \"5px\",\r\n                        }}\r\n                      >\r\n                        {mot.Value}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n                {terminal.IsAlive ||\r\n                !this.props.userDetails.EntityResult.IsEnterpriseNode ? (\r\n                  \"\"\r\n                ) : (\r\n                  <div className=\"row\">\r\n                    <div className=\"col-6 col-md-6 col-lg-6\">\r\n                      <span style={{ fontSize: \"16px\" }}>\r\n                        {t(\"tpi_LastAliveTime\")}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"col-6 col-md-6 col-lg-6\">\r\n                      <span style={{ fontSize: \"13px\" }}>\r\n                        {new Date(terminal.LastAliveTime).toLocaleDateString() +\r\n                          \" \" +\r\n                          new Date(terminal.LastAliveTime).toLocaleTimeString()}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <div className=\"row\">\r\n                  {motTPIIndex.length > 0 ? (\r\n                    <div className=\"col-6 col-md-6 col-lg-6 mapButtondiv\">\r\n                      <Button\r\n                        className=\"mapButton\"\r\n                        content={t(\"AccessCardInfo_Details\")}\r\n                        onClick={() => this.props.onDetailsClick(terminal, 2)}\r\n                      ></Button>\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  <div className=\"col-6 col-md-6 col-lg-6 mapButtondiv\">\r\n                    <Button\r\n                      className=\"mapButton\"\r\n                      content={t(\"tpi_Dashboard\")}\r\n                      onClick={() => this.props.onDashboardClick(terminal, 3)}\r\n                    ></Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </TranslationConsumer>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n  getTerminalMarker(terminal) {\r\n    return (\r\n      <ErrorBoundary>\r\n        <Marker\r\n          position={[terminal.Latitude, terminal.Longitude]}\r\n          icon={L.divIcon({\r\n            className: this.props.userDetails.EntityResult.IsEnterpriseNode\r\n              ? terminal.IsAlive\r\n                ? \"icon-Location-pin blinking  mapAliveIcon\"\r\n                : \"icon-Location-pin mapDeadIcon\"\r\n              : \"icon-Location-pin mapAliveIcon\",\r\n          })}\r\n          //icon={mapMarker}\r\n          // pathOptions={{\r\n          //   color: terminal.IsAlive ? \"green\" : \"red\",\r\n          //   fillColor: terminal.IsAlive ? \"green\" : \"red\",\r\n          //   fillOpacity: \"1\",\r\n          //   weight: 2,\r\n          //   className: \"blinking\",\r\n          // }}\r\n          // center={[terminal.Longitude, terminal.Latitude]}\r\n          // radius={10}\r\n        >\r\n          <Popup>\r\n            {this.getTerminalPopupDetails(terminal)}\r\n            {/* <h1>{terminal.TerminalCode}</h1> */}\r\n          </Popup>\r\n        </Marker>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n\r\n  getCarouselChartData = () => {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          {\r\n            PageName: KpiHomePage,\r\n            InputParameters: [],\r\n            TransportationType: \"All\",\r\n          },\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let result = response.data;\r\n\r\n          if (result.IsSuccess) {\r\n            this.setState({\r\n              carouselChartData: result.EntityResult.ListKPIDetails,\r\n            });\r\n          } else {\r\n            console.log(\"Error in carousel KPIList\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in carousel chart data:\", error);\r\n    }\r\n  };\r\n\r\n  getGenericChart = (chartInfo) => {\r\n    if (\r\n      chartInfo.ChartType === ChartType.FlexSeries ||\r\n      chartInfo.ChartType === ChartType.FlexPie ||\r\n      chartInfo.ChartType === ChartType.FlexDynamicSeries\r\n    ) {\r\n      return (\r\n        <ErrorBoundary>\r\n          <WithDetails\r\n            cardHeader={chartInfo.KPIName}\r\n            childCount={chartInfo.ChildCount}\r\n            exportHandler={(kpiName, format) =>\r\n              ExportChart(this.state.chartRefs[kpiName], format, kpiName)\r\n            }\r\n            handleClick={() => this.cardClick(chartInfo.KPIName, null)}\r\n            modalOpen={\r\n              chartInfo.KPIName === this.state.parentKpiName\r\n                ? this.state.modalOpen\r\n                : false\r\n            }\r\n            handleModalClose={() => {\r\n              this.setState({\r\n                modalOpen: false,\r\n                parentKpiName: null,\r\n                modalContent: null,\r\n              });\r\n              // restart auto-refresh\r\n              if (!this.timer) {\r\n                this.autoRefreshTimer();\r\n              }\r\n            }}\r\n            modalContent={this.state.modalContent}\r\n            fullScreenHandler={this.fullScreenView}\r\n          >\r\n            {this.getChart(chartInfo)}\r\n          </WithDetails>\r\n        </ErrorBoundary>\r\n      );\r\n    } else {\r\n      return \"Chart Type not supported\";\r\n    }\r\n  };\r\n\r\n  // abort auto-refresh when in full screen mode\r\n  fullScreenView = (fullScreenState) => {\r\n    if (fullScreenState) {\r\n      if (this.timer) {\r\n        this.timer = clearInterval(this.timer);\r\n      }\r\n    } else {\r\n      if (!this.timer) this.autoRefreshTimer();\r\n    }\r\n  };\r\n\r\n  // return Column, Bar, Line, Area, Pie, Donut charts\r\n  getChart = (chartInfo) => {\r\n    if (chartInfo.ChartType === ChartType.FlexSeries) {\r\n      return (\r\n        <LACSeriesChart kpiInfo={chartInfo} setChartRefs={this.setChartRefs} />\r\n      );\r\n    }\r\n    if (chartInfo.ChartType === ChartType.FlexDynamicSeries) {\r\n      return (\r\n        <LACDynamicSeriesChart\r\n          kpiInfo={chartInfo}\r\n          setChartRefs={this.setChartRefs}\r\n        />\r\n      );\r\n    } else if (chartInfo.ChartType === ChartType.FlexPie) {\r\n      return (\r\n        <DonutPieChart kpiInfo={chartInfo} setChartRefs={this.setChartRefs} />\r\n      );\r\n    }\r\n  };\r\n\r\n  // set chart refs for export functionality\r\n  setChartRefs = (kpiName, ref) => {\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      chartRefs: { ...prevState.chartRefs, [kpiName]: ref },\r\n    }));\r\n  };\r\n\r\n  // handle card more details click\r\n  cardClick = async (parentKpiName) => {\r\n    if (this.timer) {\r\n      this.timer = clearInterval(this.timer);\r\n    }\r\n    this.setState({ modalOpen: true, parentKpiName: parentKpiName });\r\n\r\n    try {\r\n      // axios(\r\n      //   RestAPIs.GetKPI,\r\n      //   Utilities.getAuthenticationObjectforPost(\r\n      //     {\r\n      //       PageName: KpiHomePage,\r\n      //       InputParameters: [\r\n      //         {\r\n      //           key: \"FromDate\",\r\n      //           value: new Date(\r\n      //             new Date().setDate(new Date().getDate() - 1)\r\n      //           ).toJSON(),\r\n      //         },\r\n      //         {\r\n      //           key: \"ToDate\",\r\n      //           value: new Date().toJSON(),\r\n      //         },\r\n      //       ],\r\n      //       TransportationType: \"All\",\r\n      //       ParentKPIName: parentKpiName,\r\n      //     },\r\n      //     null\r\n      //   )\r\n      // )\r\n      this.getChildKpiData(parentKpiName)\r\n        .then((response) => {\r\n          let result = response.data;\r\n\r\n          if (result.IsSuccess) {\r\n            this.setState({\r\n              modalContent: (\r\n                <TranslationConsumer>\r\n                  {(t) => (\r\n                    <KPIDashboardLayout\r\n                      kpiList={result.EntityResult.ListKPIDetails}\r\n                      fetchData={this.getChildKpiData}\r\n                      isDetails={true}\r\n                      isDraggable={true}\r\n                      isResizable={true}\r\n                      rowHeight={125}\r\n                      widgetHeight={2}\r\n                      pageName={parentKpiName + \"Map\"}\r\n                      customControlObject={\r\n                        <span className=\"pl-1\" style={{ fontSize: \"1.125rem\" }}>\r\n                          {t(parentKpiName)}\r\n                        </span>\r\n                      }\r\n                      exportRequired={true}\r\n                    />\r\n                  )}\r\n                </TranslationConsumer>\r\n              ),\r\n            });\r\n          } else {\r\n            console.log(\"Error in carousel KPIList\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error in carousel chart data:\", error);\r\n    }\r\n  };\r\n\r\n  // fetch data for child KPIs\r\n  getChildKpiData = (parentKPIName) => {\r\n    return axios(\r\n      RestAPIs.GetKPI,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        {\r\n          PageName: KpiHomePage,\r\n          InputParameters: [],\r\n          TransportationType: \"All\",\r\n          ParentKPIName: parentKPIName,\r\n        },\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    );\r\n  };\r\n\r\n  render() {\r\n    if (this.state.mapData !== null) {\r\n      return (\r\n        <div style={{ height: \"90vh\", position: \"relative\" }}>\r\n          <ErrorBoundary>\r\n            <MapContainer\r\n              style={{ height: \"100%\" }}\r\n              //zoom={2}\r\n              zoom={mapOptions.zoom}\r\n              center={mapOptions.center}\r\n              //center={[64.69734, -6.71326]}\r\n            >\r\n              <GeoJSON\r\n                style={{\r\n                  //fillColor: \"#cccccc\",\r\n                  opacity: \"1\",\r\n                  //color: \"#9e9e9e\",\r\n                  weight: 1,\r\n                }}\r\n                className=\"mapCountry\"\r\n                // style={{ className: \"CountryStyle\" }}\r\n                data={this.state.mapData.features}\r\n              ></GeoJSON>\r\n              {this.props.terminals.map((terminal) =>\r\n                this.getTerminalMarker(terminal)\r\n              )}\r\n            </MapContainer>\r\n            <ErrorBoundary>\r\n              {this.state.carouselChartData &&\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode &&\r\n              this.state.carouselChartData.length > 0 ? (\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    bottom: \"-10px\",\r\n                    zIndex: 400,\r\n                    width: \"100%\",\r\n                  }}\r\n                >\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                      <Carousel\r\n                        items={this.state.carouselChartData}\r\n                        slideWidth={100}\r\n                        visibleSlides={{ tablet: 2, laptop: 3, desktop: 4 }}\r\n                        renderItem={this.getGenericChart}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : null}\r\n            </ErrorBoundary>\r\n          </ErrorBoundary>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <LoadingPage loadingClass=\"nestedList\" message=\"\"></LoadingPage>;\r\n    }\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(ENDashboardSummaryComposite);\r\nENDashboardSummaryComposite.propTypes = {\r\n  terminals: PropTypes.array.isRequired,\r\n  tpiList: PropTypes.array.isRequired,\r\n  onDetailsClick: PropTypes.func.isRequired,\r\n  onDashboardClick: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport ENDashboardSummaryComposite from \"../Summary/ENDashboardSummaryComposite\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport \"../../../CSS/styles.css\";\r\nimport ENDashboardDetailsComposite from \"../Details/ENDashboardDetailsComposite\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport ENDashboardOverviewComposite from \"./ENDashboardOverviewComposite\";\r\n\r\nconst mapOptions = window[\"runConfig\"].mapOptions;\r\n\r\nclass ENDashboardComposite extends Component {\r\n  refreshTimer = null;\r\n  state = {\r\n    terminals: [],\r\n    tpiList: [],\r\n    //isDetails: false,\r\n    screenType: 1, //1:Summary(TPI Map),2:TPI Details;3:Dashboard\r\n    selectedTerminal: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      this.getTerminalsInfo();\r\n      this.getTPIInfo();\r\n      this.startRefreshTimer();\r\n    } catch (error) {\r\n      console.log(\r\n        \"ENDashboardComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.stopRefreshTimer();\r\n  }\r\n  startRefreshTimer = () => {\r\n    let refreshInterval = 5;\r\n    if (\r\n      mapOptions.refreshMinutes !== undefined &&\r\n      mapOptions.refreshMinutes > 0\r\n    ) {\r\n      refreshInterval = mapOptions.refreshMinutes;\r\n    }\r\n    this.refreshTimer = setInterval(() => {\r\n      console.log(\"Summary Refreshing started \" + refreshInterval + new Date()); //TODO:Remove after testing\r\n      this.getTerminalsInfo();\r\n      this.getTPIInfo();\r\n    }, refreshInterval * 60 * 1000);\r\n  };\r\n  stopRefreshTimer = () => {\r\n    if (this.refreshTimer !== null) {\r\n      clearInterval(this.refreshTimer);\r\n      console.log(\"Summary Refreshing stopped \" + new Date()); //TODO:Remove after testing\r\n    }\r\n  };\r\n  getTerminalsInfo() {\r\n    axios(\r\n      RestAPIs.GetEnTerminalsData,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        // console.log(\"TerminalInfo\", response);\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            Array.isArray(result.EntityResult.Table) &&\r\n            result.EntityResult.Table.length > 0\r\n          ) {\r\n            this.setState({ terminals: result.EntityResult.Table });\r\n          } else {\r\n            console.log(\"Error while getting Terminal List:\", result);\r\n          }\r\n        } else {\r\n          console.log(\"Error while getting Terminal List:\", result);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Terminal List:\", error);\r\n      });\r\n  }\r\n\r\n  getTPIInfo() {\r\n    axios(\r\n      RestAPIs.GetTPIInfo,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        // console.log(\"TPIInfo\", response);\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            Array.isArray(result.EntityResult) &&\r\n            result.EntityResult.length > 0\r\n          ) {\r\n            this.setState({ tpiList: result.EntityResult });\r\n          } else {\r\n            console.log(\"Error while getting TPIInfo:\", result);\r\n          }\r\n        } else {\r\n          console.log(\"Error while getting TPIInfo:\", result);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting TPIInfo:\", error);\r\n      });\r\n  }\r\n  handleDetailsClick = (terminal, screenType) => {\r\n    this.setState({ selectedTerminal: terminal, screenType: screenType });\r\n  };\r\n  handleDashboardClick = (terminal, screenType) => {\r\n    this.setState({ selectedTerminal: terminal, screenType: screenType });\r\n  };\r\n  handleBackClick = (screenType) => {\r\n    this.setState({ screenType: screenType });\r\n  };\r\n\r\n  getScreen() {\r\n    if (this.state.screenType === 1) {\r\n      return (\r\n        <ErrorBoundary>\r\n          <ENDashboardSummaryComposite\r\n            terminals={this.state.terminals}\r\n            tpiList={this.state.tpiList}\r\n            onDetailsClick={this.handleDetailsClick}\r\n            onDashboardClick={this.handleDashboardClick}\r\n          ></ENDashboardSummaryComposite>\r\n        </ErrorBoundary>\r\n      );\r\n    } else if (this.state.screenType === 2) {\r\n      return (\r\n        <ErrorBoundary>\r\n          <ENDashboardDetailsComposite\r\n            //terminals={this.state.terminals}\r\n            tpiList={this.state.tpiList}\r\n            selectedTerminal={this.state.selectedTerminal}\r\n            onBackClick={this.handleBackClick}\r\n          ></ENDashboardDetailsComposite>\r\n        </ErrorBoundary>\r\n      );\r\n    } else if (this.state.screenType === 3) {\r\n      return (\r\n        <ErrorBoundary>\r\n          <ENDashboardOverviewComposite\r\n            //terminals={this.state.terminals}\r\n            //tpiList={this.state.tpiList}\r\n            selectedTerminal={this.state.selectedTerminal}\r\n            onBackClick={this.handleBackClick}\r\n          ></ENDashboardOverviewComposite>\r\n        </ErrorBoundary>\r\n      );\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.getScreen()}\r\n        <ErrorBoundary>\r\n          <ToastContainer\r\n            hideProgressBar={true}\r\n            closeOnClick={false}\r\n            closeButton={true}\r\n            newestOnTop={true}\r\n            position=\"bottom-right\"\r\n            toastClassName=\"toast-notification-wrap\"\r\n          />\r\n        </ErrorBoundary>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ENDashboardComposite);\r\n","import React, { Component } from \"react\";\r\nimport { Button, DatePicker, Icon } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport \"@grapecity/wijmo.styles/wijmo.css\";\r\nimport { kpiTerminalDashboards } from \"../../../JS/KPIPageName\";\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nclass ENDashboardOverviewComposite extends Component {\r\n  state = {\r\n    selectedMOT: this.props.selectedMOT,\r\n    kpis: {}, //{ROAD:[],RAIL:[],MARINE}:[],PIPELINE:[]}\r\n    //dashboards: [], //[{mot:\"\",tankInventory:null,fpLoadThroughPut:null,fpUnloadThroughput:null}]\r\n    chartRefs: {},\r\n    modalOpen: false,\r\n    parentKpiName: null,\r\n    rangeValue: {\r\n      to: new Date(new Date().setHours(23, 59, 59, 0)),\r\n      from: new Date(new Date().setHours(0, 0, 0, 0))\r\n    },\r\n    ErrorMsg: null,\r\n    isRefreshing: false,\r\n    refreshInterval: 15000,\r\n    exportLoading: false\r\n  };\r\n\r\n  dashboardRef = React.createRef();\r\n\r\n  componentDidMount() {\r\n    try {\r\n      let selectedMOT = \"\";\r\n      if (\r\n        this.state.selectedMOT !== undefined &&\r\n        this.state.selectedMOT !== null\r\n      ) {\r\n        selectedMOT = this.state.selectedMOT;\r\n      } else {\r\n        if (\r\n          Array.isArray(\r\n            this.props.userDetails.EntityResult.TransportationTypes\r\n          ) &&\r\n          this.props.userDetails.EntityResult.TransportationTypes.length > 0\r\n        ) {\r\n          selectedMOT =\r\n            this.props.userDetails.EntityResult.TransportationTypes[0];\r\n          this.setState({ selectedMOT: selectedMOT });\r\n        }\r\n        if (selectedMOT !== undefined && selectedMOT !== null) {\r\n          // this.getDashboards(selectedMOT);\r\n          this.getKPIs(selectedMOT);\r\n        }\r\n\r\n        // get lookup value for auto refresh interval\r\n        axios(\r\n          RestAPIs.GetLookUpData + \"?LookUpTypeCode=TerminalsDashboard\",\r\n          Utilities.getAuthenticationObjectforGet(\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        ).then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true &&\r\n            Number.isInteger(parseInt(result.EntityResult.RefreshInterval))) {\r\n            this.setState({ refreshInterval: Number(result.EntityResult.RefreshInterval) }, () => {\r\n              // initiate auto refresh with interval from lookup\r\n              this.autoRefreshData();\r\n            });\r\n          }\r\n          else {\r\n            console.log(\"Error in fetching LookupValue\");\r\n            // initiate auto refresh with default interval\r\n            this.autoRefreshData();\r\n          }\r\n        }).catch(error => {\r\n          // initiate auto refresh with default interval\r\n          this.autoRefreshData();\r\n          console.log(\"Error in fetching LookupValue: \", error);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"EnDashboardOverviewComposite:Error occured on ComponentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    // clear auto refresh on unmount\r\n    if (this.interval) {\r\n      this.interval = clearInterval(this.interval);\r\n    }\r\n  }\r\n\r\n  // refresh dashboard data\r\n  autoRefreshData() {\r\n    this.interval = setInterval(() => {\r\n      let error = Utilities.validateDateRange(\r\n        this.state.rangeValue.to,\r\n        this.state.rangeValue.from\r\n      )\r\n\r\n      if (error !== \"\") {\r\n        this.setState({ ErrorMsg: error });\r\n      }\r\n      else {\r\n        this.setState({ isRefreshing: true, ErrorMsg: null }, () => {\r\n          this.getKPIs(this.state.selectedMOT);\r\n        });\r\n      }\r\n    }, this.state.refreshInterval);\r\n  }\r\n\r\n  getKPIs(mot) {\r\n    if (this.state.kpis[mot] === undefined || this.state.isRefreshing) {\r\n      let kpis = lodash.cloneDeep(this.state.kpis);\r\n\r\n      var notification = {\r\n        message: \"\",\r\n        messageType: \"critical\",\r\n        messageResultDetails: [], //{keyFields: [\"DriverInfo_Code\"],\r\n        //keyValues: [this.state.modDriver.Code],\r\n        //isSuccess: false,\r\n        //errorMessage: \"\",}\r\n      };\r\n      let objKPIRequestData = {\r\n        PageName: kpiTerminalDashboards,\r\n        TransportationType: mot,\r\n        InputParameters: [\r\n          {\r\n            key: \"TerminalCode\",\r\n            value: this.props.selectedTerminal.TerminalCode,\r\n          },\r\n          {\r\n            key: \"FromDate\",\r\n            value: this.state.rangeValue.from.toJSON()\r\n          },\r\n          {\r\n            key: \"ToDate\",\r\n            value: this.state.rangeValue.to.toJSON()\r\n          }\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          // console.log(result);\r\n          if (result.IsSuccess === true) {\r\n            kpis[mot] = result.EntityResult.ListKPIDetails;\r\n            this.setState({ kpis, isRefreshing: false });\r\n          } else {\r\n            // this.setState({ kpiList: [] });\r\n            console.log(\"Error in Dashboard KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Dashboard KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n\r\n  handleMOTChange = (mot) => {\r\n    if (mot !== this.state.selectedMOT) {\r\n      this.setState({ selectedMOT: mot });\r\n      // this.getDashboards(mot);\r\n      this.getKPIs(mot);\r\n    }\r\n  };\r\n  BindTransportationTypes() {\r\n    let MotDivs = [];\r\n    //debugger;\r\n    if (\r\n      Array.isArray(this.props.userDetails.EntityResult.TransportationTypes)\r\n    ) {\r\n      let tranpsortationTypes = this.props.userDetails.EntityResult.RoleName.toLowerCase() === \"carriercompany\" ?\r\n        // remove pipeline mot for carriercompany role\r\n        this.props.userDetails.EntityResult.TransportationTypes.filter(mot => mot.toLowerCase() !== \"pipeline\") :\r\n        [...this.props.userDetails.EntityResult.TransportationTypes]\r\n\r\n      tranpsortationTypes.forEach((mot) => {\r\n        let motIconClass = mot.toLowerCase();\r\n        motIconClass =\r\n          \"icon-\" +\r\n          motIconClass.charAt(0).toUpperCase() +\r\n          motIconClass.slice(1);\r\n        MotDivs.push(\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              // <div className=\"col-3 col-sm-1 col-md-2 col-lg-1 col-xl-1\">\r\n              <div\r\n                onClick={() => this.handleMOTChange(mot)}\r\n                className=\"dashboardTab\"\r\n              // className={\r\n              //   this.state.selectedMOT === mot\r\n              //     ? \"dashboardTab active\"\r\n              //     : \"dashboardTab\"\r\n              // }\r\n              >\r\n                <div\r\n                  className={\r\n                    this.state.selectedMOT === mot\r\n                      ? \"flexWrap active\"\r\n                      : \"flexWrap\"\r\n                  }\r\n                >\r\n                  <span\r\n                    className={motIconClass}\r\n                    style={{\r\n                      padding: \"0\",\r\n                      paddingTop: \"0.4rem\",\r\n                      paddingBottom: \"0.25rem\",\r\n                      fontSize: \"24px\",\r\n                    }}\r\n                  ></span>\r\n                  <a className=\"item\">{t(mot)}</a>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        );\r\n      });\r\n    }\r\n    return MotDivs;\r\n  }\r\n\r\n  //function to fetch data for KPIs\r\n  getChildKpiData = (parentKPIName) => {\r\n    return axios(\r\n      RestAPIs.GetKPI,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        {\r\n          PageName: kpiTerminalDashboards,\r\n          InputParameters: [\r\n            {\r\n              key: \"TerminalCode\",\r\n              value: this.props.selectedTerminal.TerminalCode,\r\n            },\r\n            {\r\n              key: \"FromDate\",\r\n              value: this.state.rangeValue.from.toJSON()\r\n            },\r\n            {\r\n              key: \"ToDate\",\r\n              value: this.state.rangeValue.to.toJSON()\r\n            }\r\n          ],\r\n          TransportationType: this.state.selectedMOT,\r\n          ParentKPIName: parentKPIName,\r\n        },\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    );\r\n  }\r\n\r\n  // load widget charts for selected date range\r\n  loadWidgets = () => {\r\n    let error = Utilities.validateDateRange(\r\n      this.state.rangeValue.to,\r\n      this.state.rangeValue.from\r\n    )\r\n    if (error !== \"\") {\r\n      this.setState({ ErrorMsg: error });\r\n    }\r\n    else {\r\n      // clear data for selected MOT\r\n      this.setState((prevState) => ({\r\n        kpis: { ...prevState.kpis, [this.state.selectedMOT]: undefined },\r\n        ErrorMsg: null\r\n      }), () => {\r\n        this.getKPIs(this.state.selectedMOT);\r\n      });\r\n    }\r\n  }\r\n\r\n  // validate text change in date component\r\n  handleDateTextChange = (value, error) => {\r\n    if (value === \"\")\r\n      this.setState({ ErrorMsg: \"\", rangeValue: { ...this.state.rangeValue, to: \"\", from: \"\" } });\r\n    if (error !== null && error !== \"\")\r\n      this.setState({\r\n        ErrorMsg: \"Common_InvalidDate\",\r\n        rangeValue: { ...this.state.rangeValue, to: \"\", from: \"\" },\r\n      });\r\n    else {\r\n      this.setState({\r\n        dateError: \"\",\r\n        rangeValue: { ...this.state.rangeValue, to: \"\", from: \"\" },\r\n      });\r\n    }\r\n  }\r\n\r\n  getDateControl = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) =>\r\n          <div className={\"col-sm-12 \" + (this.state.exportLoading ? \"col-lg-8\" : \"col-lg-9\") + \" pl-1 pb-0\"} style={{ \"display\": \"flex\" }}>\r\n            <DatePicker\r\n              type=\"daterange\"\r\n              className=\"dashboardDatePicker ml-sm-auto ml-lg-0\"\r\n              displayFormat={getCurrentDateFormat()}\r\n              rangeValue={this.state.rangeValue}\r\n              disableFuture={true}\r\n              closeOnSelection={true}\r\n              onTextChange={this.handleDateTextChange}\r\n              onRangeSelect={(({ to, from }) => this.dateChange(to, from))}\r\n              error={t(this.state.ErrorMsg)}\r\n              reserveSpace={false}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              actionType=\"button\"\r\n              onClick={this.loadWidgets}\r\n              className=\"doneButton ml-2\"\r\n              disabled={this.state.exportLoading}>\r\n              <Icon root=\"common\" name=\"arrow-right\" size=\"small\" className=\"btnArrowRight\" />\r\n            </Button>\r\n          </div>\r\n        }\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n\r\n  // handle date change from date picker\r\n  dateChange = (to, from) => {\r\n    let toDate = new Date(to);\r\n    let fromDate = new Date(from);\r\n    if (toDate.toString() === \"Invalid Date\") {\r\n      toDate = null;\r\n    }\r\n    else {\r\n      // set end of the day time for toDate\r\n      toDate.setHours(23, 59, 59, 0);\r\n\r\n      // enable auto refresh if selected date is current date\r\n      if (toDate.toDateString() === new Date().toDateString()) {\r\n        if (!this.interval) {\r\n          this.autoRefreshData();\r\n        }\r\n      }\r\n      else if (this.interval) {\r\n        // clear interval if to date is not current date \r\n        this.interval = clearInterval(this.interval);\r\n      }\r\n    }\r\n\r\n    if (fromDate.toString() === \"Invalid Date\") {\r\n      fromDate = null;\r\n    }\r\n\r\n    this.setState({ rangeValue: { to: toDate, from: fromDate } });\r\n  }\r\n\r\n  // abort auto-refresh when in full screen mode\r\n  fullScreenView = (fullScreenState) => {\r\n    if (fullScreenState) {\r\n      if (this.interval) {\r\n        this.interval = clearInterval(this.interval);\r\n      }\r\n    }\r\n    else {\r\n      if (!this.interval)\r\n        this.autoRefreshData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.props.userDetails);\r\n    let userDetails = this.props.userDetails.EntityResult;\r\n\r\n    return (\r\n      <ErrorBoundary>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <div style={{ marginTop: \"10px\" }}>\r\n              <ErrorBoundary>\r\n                <div className=\"ui breadcrumb pl-1\" style={{ alignItems: \"start\" }}>\r\n                  <div\r\n                    className=\"section mt-sm-2 mt-lg-0\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() => this.props.onBackClick(1)}\r\n                  >\r\n                    <Icon\r\n                      root=\"common\"\r\n                      name=\"caret-left\"\r\n                      className=\"caretLeft\"\r\n                    //color=\"black\"\r\n                    ></Icon>\r\n                  </div>\r\n                  <div className=\"section pl-1 mt-sm-2 mt-lg-0\" style={{ width: \"50%\" }}>\r\n                    <span>\r\n                      {t(\"tpi_Dashboard\") +\r\n                        \" - \" +\r\n                        this.props.selectedTerminal.TerminalCode}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"pr-3\" style={{ marginLeft: \"auto\" }}>\r\n                    <div className=\"row\">\r\n                      {this.getDateControl()}\r\n                      <div\r\n                        className={\"col-sm-12 \" + (!this.state.exportLoading ? \"col-lg-3\" : \"col-lg-4\") + \" pl-3 pb-0 pt-sm-3 pt-lg-0\"}\r\n                        style={{ textAlign: \"right\" }}>\r\n                        <Button\r\n                          type=\"primary\"\r\n                          disabled={this.state.exportLoading}\r\n                          className=\"dashboardExport\"\r\n                          onClick={() => {\r\n                            // check if KPIDashboard reference is available\r\n                            if (this.dashboardRef.current) {\r\n                              this.setState({ exportLoading: true }, () => {\r\n                                // call method in KPIDashboardLayout\r\n                                this.dashboardRef.current.exportAllCharts();\r\n                              });\r\n                            }\r\n                          }}\r\n                          actionType=\"button\">\r\n                          {t(\"WijmoGridExport\")}\r\n                          {\r\n                            this.state.exportLoading ?\r\n                              <span className=\"pl-1\">\r\n                                <Icon name=\"redo\" size=\"small\" loading={true} />\r\n                              </span> :\r\n                              null\r\n                          }\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"dashboard detailsContainer\" style={{ paddingTop: \"0px\" }}>\r\n                  <div\r\n                    className=\" ui pointing secondary ui scuf-tab menu \"\r\n                    style={{ minHeight: \"0px\", marginBottom: \"20px\" }}\r\n                  >\r\n                    {this.BindTransportationTypes()}\r\n                    <div className=\"mt-2 pr-3\" style={{ marginLeft: \"auto\", fontSize: \"14px\" }}>\r\n                      {t(\"LastUpdatedTime\")}: {new Date().toLocaleTimeString()}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </ErrorBoundary>\r\n              <ErrorBoundary>\r\n                {\r\n                  this.state.kpis[this.state.selectedMOT] ?\r\n                    <KPIDashboardLayout\r\n                      ref={this.dashboardRef}\r\n                      kpiList={this.state.kpis[this.state.selectedMOT]}\r\n                      fetchData={this.getChildKpiData}\r\n                      fullScreenHandler={this.fullScreenView}\r\n                      isDraggable={true}\r\n                      isResizable={true}\r\n                      rowHeight={125}\r\n                      widgetHeight={2}\r\n                      exportCallback={() => this.setState({ exportLoading: false })}\r\n                      pageName=\"Dashboard\"\r\n                    />\r\n                    : <LoadingPage loadingClass=\"nestedList\" message=\"\"></LoadingPage>\r\n                }\r\n              </ErrorBoundary>\r\n            </div>\r\n          )}\r\n        </TranslationConsumer>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ENDashboardOverviewComposite);\r\nENDashboardOverviewComposite.propTypes = {\r\n  selectedTerminal: PropTypes.object.isRequired,\r\n  onBackClick: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { Notification } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { delimiter } from \"./Constants\";\r\nimport PropTypes from \"prop-types\";\r\nNotifyEvent.propTypes = {\r\n  notificationMessage: PropTypes.shape({\r\n    messageType: PropTypes.oneOf([\"success\", \"critical\"]),\r\n    message: PropTypes.string,\r\n    messageResultDetails: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        keyFields: PropTypes.arrayOf(PropTypes.string),\r\n        KeyValues: PropTypes.arrayOf(PropTypes.string),\r\n        isSuccess: PropTypes.bool,\r\n        errorMessage: PropTypes.string,\r\n      })\r\n    ),\r\n  }).isRequired,\r\n  //closeToast: PropTypes.bool,\r\n};\r\n// notifiaionMessage={messageType:\"success/critical\",message:\"title of message\",\r\n// messageResultDetails:[{keyFields:[Array Of Key Codes],KeyValues:[Array of Key Values],isSuccess,ErrorMessage}]}\r\nexport default function NotifyEvent({ notificationMessage }) {\r\n\r\n  function getLocalizedMessage(message) {\r\n    try {\r\n      let messageOptions = message.split(delimiter);\r\n      return messageOptions[0];\r\n    } catch (error) {\r\n      console.log(error);\r\n      return \"\";\r\n    }\r\n  }\r\n  function getLocalizedMessageParameters(message) {\r\n    try {\r\n      let messageOptions = message.split(delimiter);\r\n      messageOptions.splice(0, 1);\r\n      return messageOptions;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <Notification\r\n          className=\"toast-notification\"\r\n          severity={notificationMessage.messageType}\r\n          // onCloseClick={closeToast}\r\n          hasIcon={true}\r\n          title={t(notificationMessage.message)}\r\n        //onDetailsClick={() => alert(details)}\r\n        >\r\n          {notificationMessage.messageResultDetails.map((messageResult) => {\r\n            var entityKeyDetails = \"\";\r\n            if (messageResult.keyFields.length > 0) {\r\n              for (var i = 0; i < messageResult.keyFields.length; i++) {\r\n                entityKeyDetails =\r\n                  entityKeyDetails +\r\n                  t(messageResult.keyFields[i]) +\r\n                  \" : \" +\r\n                  messageResult.keyValues[i] +\r\n                  \", \";\r\n              }\r\n            }\r\n            return (\r\n              <div>\r\n                <span\r\n                  style={{ color: messageResult.isSuccess ? \"#7eb338\" : \"#F15A4F\" }}\r\n                >\r\n                  {entityKeyDetails}\r\n                  {messageResult.isSuccess\r\n                    ? t(\"NotificationList_MessageType_Success\")\r\n                    : t(\"NotificationList_MessageType_Failure\") +\r\n                    \" : \" +\r\n                    t(\r\n                      getLocalizedMessage(messageResult.errorMessage),\r\n                      getLocalizedMessageParameters(\r\n                        messageResult.errorMessage\r\n                      )\r\n                    )}\r\n                </span>\r\n                <br></br>\r\n              </div>\r\n            );\r\n          })}\r\n        </Notification>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["props","size","progress","strokeWidth","circleOneStroke","center","radius","_jsx","_Fragment","children","_jsxs","className","width","height","stroke","cx","cy","r","x","concat","y","mapOptions","window","ENDashboardDetailsComposite","Component","constructor","arguments","state","selectedMOT","expandedRows","kpiList","startRefreshTimer","refreshInterval","undefined","refreshMinutes","this","refreshTimer","setInterval","console","log","Date","getKPIList","stopRefreshTimer","clearInterval","handleMOTClick","mot","setState","componentDidMount","error","componentWillUnmount","notification","message","messageType","messageResultDetails","objKPIRequestData","PageName","kpiTerminalDashboardDetails","InputParameters","key","value","selectedTerminal","TerminalCode","axios","RestAPIs","Utilities","then","response","result","data","IsSuccess","EntityResult","ListKPIDetails","ErrorList","push","keyFields","keyValues","isSuccess","errorMessage","length","toast","ErrorBoundary","NotifyEvent","notificationMessage","autoClose","catch","getTPIList","terminal","motTPIDetails","terminalTPis","tpiList","filter","terminalTPI","Key","Array","isArray","Value","MoTTPIDetails","motList","mottpi","forEach","tpi","ParentTPIDetails","ChartType","tpiDetails","lodash","ChildTPIDetails","TranslationConsumer","t","DataTable","reorderableColumns","resizableColumns","rowExpansionTemplate","Column","initialWidth","field","header","sortable","renderer","cellData","rowData","configuration","JSON","parse","reflocalekey","formulaColumn","item","formulaCol","itemData","valueColumn","tpiValueCol","unit","categories","color","getTPIColorCode","style","open","findIndex","TransportationType","TPIName","onClick","toggleExpand","Icon","root","name","indexColumn","tpiIndex","colorCode","modifiedIndex","category","expanded","index","splice","getTransportationTPIIndexes","motDivs","MoTTPIIndex","motTPI","TerminalConfig","TPIConfig","motIconClass","toLowerCase","charAt","toUpperCase","slice","paneClassName","motSpanclassName","display","padding","paddingBottom","borderBottom","cursor","SvgCircle","render","marginTop","onBackClick","KPIDashboardLayout","Carousel","CarouselProvider","naturalSlideWidth","slideWidth","totalSlides","items","visibleSlides","getVisibleSlides","screenWidth","screen","tablet","laptop","desktop","naturalSlideHeight","slideHeight","Slider","map","Slide","justifyContent","alignItems","renderItem","ButtonBack","ButtonNext","defaultProps","ENDashboardSummaryComposite","mapData","carouselChartData","chartRefs","modalOpen","parentKpiName","timer","autoRefreshTimer","getCarouselChartData","getMapData","headers","Accept","KpiHomePage","tokenDetails","tokenInfo","getGenericChart","chartInfo","FlexSeries","FlexPie","FlexDynamicSeries","WithDetails","cardHeader","KPIName","childCount","ChildCount","exportHandler","kpiName","format","ExportChart","handleClick","cardClick","handleModalClose","modalContent","fullScreenHandler","fullScreenView","getChart","fullScreenState","LACSeriesChart","kpiInfo","setChartRefs","LACDynamicSeriesChart","DonutPieChart","ref","prevState","async","getChildKpiData","fetchData","isDetails","isDraggable","isResizable","rowHeight","widgetHeight","pageName","customControlObject","fontSize","exportRequired","parentKPIName","ParentKPIName","userDetails","IsEnterpriseNode","getTerminalPopupDetails","terminalTPIList","motTPIIndex","TerminalTPIIndex","terminalConfig","fontWeight","IsAlive","LastAliveTime","toLocaleDateString","toLocaleTimeString","Button","content","onDetailsClick","onDashboardClick","getTerminalMarker","Marker","position","Latitude","Longitude","icon","L","Popup","MapContainer","zoom","GeoJSON","opacity","weight","features","terminals","bottom","zIndex","LoadingPage","loadingClass","connect","getUserDetails","TokenAuth","ENDashboardComposite","screenType","getTerminalsInfo","getTPIInfo","handleDetailsClick","handleDashboardClick","handleBackClick","Table","getScreen","ENDashboardOverviewComposite","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","toastClassName","kpis","rangeValue","to","setHours","from","ErrorMsg","isRefreshing","exportLoading","dashboardRef","React","interval","handleMOTChange","getKPIs","kpiTerminalDashboards","toJSON","loadWidgets","handleDateTextChange","dateError","getDateControl","DatePicker","type","displayFormat","getCurrentDateFormat","disableFuture","closeOnSelection","onTextChange","onRangeSelect","_ref","dateChange","reserveSpace","actionType","disabled","toDate","fromDate","toString","toDateString","autoRefreshData","TransportationTypes","Number","isInteger","parseInt","RefreshInterval","BindTransportationTypes","MotDivs","RoleName","paddingTop","marginLeft","textAlign","current","exportAllCharts","loading","minHeight","marginBottom","exportCallback","getLocalizedMessage","split","delimiter","getLocalizedMessageParameters","messageOptions","Notification","severity","hasIcon","title","messageResult","entityKeyDetails","i","getOptionsWithSelect","ddlOptions","selectOptionText","option","text","unshift","language","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}