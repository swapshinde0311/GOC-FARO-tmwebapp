{"version":3,"file":"static/js/2296.7b779e96.chunk.js","mappings":"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","sources":["Components/Composite/Common/TMDetailsKPILayout.jsx","Components/UIBase/Details/DriverDetails.jsx","Components/Composite/Details/DriverDetailsComposite.jsx","Components/UIBase/Common/AssociatedTerminals.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/DateFieldsInEntities.js","JS/functionalUtilities.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nexport default function TMDetailsKPILayout({\r\n    KPIList,\r\n    pageName,\r\n    rowHeight,\r\n    widgetHeight,\r\n    isDraggable,\r\n    isResizable,\r\n    kpiDisplayTopBreakpoint\r\n}) {\r\n    const [KPIDisplays, setKPIDisplays] = useState(1);\r\n\r\n    const kpiDiv = React.useRef(null);\r\n\r\n    const hideKpis = () => {\r\n        let currentScrollPos = window.pageYOffset;\r\n        let KPIDisplay = KPIDisplays;\r\n\r\n        // hide kpis based on div position to top of the window \r\n        if (kpiDiv.current && kpiDiv.current.getBoundingClientRect().top < kpiDisplayTopBreakpoint) {\r\n            KPIDisplay = 0;\r\n        }\r\n        // show the kpis once at top of the screen\r\n        else if (currentScrollPos === 0) {\r\n            KPIDisplay = 1\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n\r\n        setKPIDisplays(KPIDisplay);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            window.addEventListener(\"scroll\", hideKpis);\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // remove listener on unmount\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", hideKpis)\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div ref={kpiDiv}>\r\n            {KPIDisplays === 1 ? <TranslationConsumer>\r\n                {(t) => (\r\n                    <div style={{ marginTop: \"6px\" }}>\r\n                        <ErrorBoundary>\r\n                            <KPIDashboardLayout\r\n                                kpiList={KPIList}\r\n                                isDraggable={isDraggable}\r\n                                isResizable={isResizable}\r\n                                rowHeight={rowHeight}\r\n                                widgetHeight={widgetHeight}\r\n                                pageName={pageName}\r\n                            ></KPIDashboardLayout>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n\r\n                )}\r\n            </TranslationConsumer> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nTMDetailsKPILayout.propTypes = {\r\n    kpiDisplayTopBreakpoint: PropTypes.number\r\n}\r\n\r\nTMDetailsKPILayout.defaultProps = {\r\n    kpiDisplayTopBreakpoint: 100\r\n}","import React from \"react\";\r\nimport { Select, InputLabel } from \"@scuf/common\";\r\nimport { Accordion, Input, DatePicker, Checkbox } from \"@scuf/common\";\r\n//import * as Constants from \"./../../../JS/Constants\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { AssociatedTerminals } from \"../Common/AssociatedTerminals\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\n\r\nDriverDetails.propTypes = {\r\n  driver: PropTypes.object.isRequired,\r\n  modDriver: PropTypes.object.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  attributeValidationErrors: PropTypes.object.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    carriers: PropTypes.array,\r\n    languageOptions: PropTypes.array,\r\n    terminalCodes: PropTypes.array,\r\n  }).isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  handleDCHCellDataEdit: PropTypes.func.isRequired,\r\n  onDateTextChange: PropTypes.func.isRequired,\r\n  onCarrierChange: PropTypes.func.isRequired,\r\n  onImageChange: PropTypes.func.isRequired,\r\n  onAllTerminalsChange: PropTypes.func.isRequired,\r\n  onActiveStatusChange: PropTypes.func.isRequired,\r\n  onAttributeDataChange: PropTypes.func.isRequired,\r\n  isEnterpriseNode: PropTypes.bool.isRequired,\r\n  handleTerminalSelectionChange: PropTypes.func.isRequired,\r\n  onCarrierSearchChange: PropTypes.func.isRequired,\r\n  modDCHAttributes: PropTypes.array.isRequired,\r\n  isDCHEnabled: PropTypes.bool.isRequired,\r\n  dchAttributeValidationErrors: PropTypes.object.isRequired,\r\n  hazardousEnabled: PropTypes.bool,\r\n};\r\nDriverDetails.defaultProps = {\r\n  listOptions: {\r\n    carriers: [],\r\n    languageOptions: [],\r\n    terminalCodes: [],\r\n  },\r\n  isEnterpriseNode: false,\r\n  isDCHEnabled: false,\r\n  hazardousEnabled: false,\r\n};\r\n\r\nexport function DriverDetails({\r\n  driver,\r\n  modDriver,\r\n  modDCHAttributes,\r\n  validationErrors,\r\n  attributeValidationErrors,\r\n  listOptions,\r\n\r\n  modAttributeMetaDataList,\r\n  onFieldChange,\r\n  onDateTextChange,\r\n  onCarrierChange,\r\n  onImageChange,\r\n  onAllTerminalsChange,\r\n  onActiveStatusChange,\r\n  isEnterpriseNode,\r\n  onAttributeDataChange,\r\n  onCarrierSearchChange,\r\n  isDCHEnabled,\r\n  dchAttributeValidationErrors,\r\n  handleDCHCellDataEdit,\r\n  isWebPortalUser,\r\n  hazardousEnabled,\r\n}) {\r\n  const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n    let attributeValidation = [];\r\n    attributeValidation = attributeValidationErrors.find(\r\n      (selectedAttribute) => {\r\n        return selectedAttribute.TerminalCode === terminal;\r\n      }\r\n    );\r\n    return attributeValidation.attributeValidationErrors;\r\n  };\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div>\r\n          <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <InputLabel label={t(\"DriverInfo_Image\")} />\r\n                {modDriver !== undefined &&\r\n                modDriver.DriverImage !== undefined &&\r\n                modDriver.DriverImage !== null &&\r\n                modDriver.DriverImage.length > 0 ? (\r\n                  <img\r\n                    height=\"100\"\r\n                    width=\"100\"\r\n                    alt=\"\"\r\n                    src={\"data:image/jpg;base64,\" + modDriver.DriverImage}\r\n                  />\r\n                ) : (\r\n                  <img alt=\"\" height=\"100\" width=\"100\" />\r\n                )}\r\n                <br />\r\n                {isWebPortalUser === false ? (\r\n                  <input\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    name=\"image\"\r\n                    id=\"file\"\r\n                    onChange={onImageChange}\r\n                  />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modDriver.Code}\r\n                  label={t(\"DriverInfo_Code\")}\r\n                  indicator=\"required\"\r\n                  disabled={driver.Code !== \"\"}\r\n                  onChange={(data) => onFieldChange(\"Code\", data)}\r\n                  error={t(validationErrors.Code)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modDriver.Name}\r\n                  label={t(\"DriverInfo_DriverName\")}\r\n                  indicator=\"required\"\r\n                  onChange={(data) => onFieldChange(\"Name\", data)}\r\n                  error={t(validationErrors.Name)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  placeholder={t(\"Common_Select\")}\r\n                  label={t(\"DriverInfo_Carrier\")}\r\n                  value={modDriver.CarrierCode}\r\n                  options={listOptions.carriers}\r\n                  onChange={(data) => {\r\n                    //onFieldChange(\"CarrierCode\", data);\r\n                    onCarrierChange(data);\r\n                  }}\r\n                  indicator=\"required\"\r\n                  error={t(validationErrors.CarrierCode)}\r\n                  reserveSpace={false}\r\n                  disabled={driver.Code !== \"\"}\r\n                  search={true}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                  onSearch={onCarrierSearchChange}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modDriver.License1 === null ? \"\" : modDriver.License1}\r\n                  label={t(\"DriverInfo_Lic1\")}\r\n                  indicator=\"required\"\r\n                  onChange={(data) => onFieldChange(\"License1\", data)}\r\n                  error={t(validationErrors.License1)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <DatePicker\r\n                  fluid\r\n                  value={\r\n                    modDriver.License1IssueDate === null\r\n                      ? \"\"\r\n                      : Utilities.convertStringToCommonDateFormat(\r\n                          modDriver.License1IssueDate\r\n                        )\r\n                  }\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  label={t(\"DriverInfo_Lic1Issue\")}\r\n                  showYearSelector=\"true\"\r\n                  indicator=\"required\"\r\n                  onChange={(data) => onFieldChange(\"License1IssueDate\", data)}\r\n                  onTextChange={(value, error) => {\r\n                    onDateTextChange(\"License1IssueDate\", value, error);\r\n                  }}\r\n                  error={t(validationErrors.License1IssueDate)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <DatePicker\r\n                  fluid\r\n                  value={\r\n                    modDriver.License1ExpiryDate === null\r\n                      ? \"\"\r\n                      : Utilities.convertStringToCommonDateFormat(\r\n                          modDriver.License1ExpiryDate\r\n                        )\r\n                  }\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  label={t(\"DriverInfo_Lic1Expiry\")}\r\n                  disablePast={true}\r\n                  indicator=\"required\"\r\n                  showYearSelector=\"true\"\r\n                  onChange={(data) => onFieldChange(\"License1ExpiryDate\", data)}\r\n                  onTextChange={(value, error) => {\r\n                    onDateTextChange(\"License1ExpiryDate\", value, error);\r\n                  }}\r\n                  error={t(validationErrors.License1ExpiryDate)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modDriver.License2 === null ? \"\" : modDriver.License2}\r\n                  label={t(\"DriverInfo_Lic2\")}\r\n                  onChange={(data) => onFieldChange(\"License2\", data)}\r\n                  error={t(validationErrors.License2)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <DatePicker\r\n                  fluid\r\n                  value={\r\n                    modDriver.License2IssueDate === null\r\n                      ? \"\"\r\n                      : Utilities.convertStringToCommonDateFormat(\r\n                          modDriver.License2IssueDate\r\n                        )\r\n                  }\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  label={t(\"DriverInfo_Lic2Issue\")}\r\n                  showYearSelector=\"true\"\r\n                  onChange={(data) => onFieldChange(\"License2IssueDate\", data)}\r\n                  onTextChange={(value, error) => {\r\n                    onDateTextChange(\"License2IssueDate\", value, error);\r\n                  }}\r\n                  error={t(validationErrors.License2IssueDate)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <DatePicker\r\n                  fluid\r\n                  value={\r\n                    modDriver.License2ExpiryDate === null\r\n                      ? \"\"\r\n                      : Utilities.convertStringToCommonDateFormat(\r\n                          modDriver.License2ExpiryDate\r\n                        )\r\n                  }\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  label={t(\"DriverInfo_Lic2Expiry\")}\r\n                  disablePast={true}\r\n                  showYearSelector=\"true\"\r\n                  onChange={(data) => onFieldChange(\"License2ExpiryDate\", data)}\r\n                  onTextChange={(value, error) => {\r\n                    onDateTextChange(\"License2ExpiryDate\", value, error);\r\n                  }}\r\n                  error={t(validationErrors.License2ExpiryDate)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modDriver.License3 === null ? \"\" : modDriver.License3}\r\n                  label={t(\"DriverInfo_Lic3\")}\r\n                  onChange={(data) => onFieldChange(\"License3\", data)}\r\n                  error={t(validationErrors.License3)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <DatePicker\r\n                  fluid\r\n                  value={\r\n                    modDriver.License3IssueDate === null\r\n                      ? \"\"\r\n                      : Utilities.convertStringToCommonDateFormat(\r\n                          modDriver.License3IssueDate\r\n                        )\r\n                  }\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  label={t(\"DriverInfo_Lic3Issue\")}\r\n                  showYearSelector=\"true\"\r\n                  onChange={(data) => onFieldChange(\"License3IssueDate\", data)}\r\n                  onTextChange={(value, error) => {\r\n                    onDateTextChange(\"License3IssueDate\", value, error);\r\n                  }}\r\n                  error={t(validationErrors.License3IssueDate)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <DatePicker\r\n                  fluid\r\n                  value={\r\n                    modDriver.License3ExpiryDate === null\r\n                      ? \"\"\r\n                      : Utilities.convertStringToCommonDateFormat(\r\n                          modDriver.License3ExpiryDate\r\n                        )\r\n                  }\r\n                  displayFormat={getCurrentDateFormat()}\r\n                  label={t(\"DriverInfo_Lic3Expiry\")}\r\n                  disablePast={true}\r\n                  showYearSelector=\"true\"\r\n                  onChange={(data) => onFieldChange(\"License3ExpiryDate\", data)}\r\n                  onTextChange={(value, error) => {\r\n                    onDateTextChange(\"License3ExpiryDate\", value, error);\r\n                  }}\r\n                  error={t(validationErrors.License3ExpiryDate)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              {hazardousEnabled ? (\r\n                <div className=\"col-12 col-md-6 col-lg-4 checkboxSelect\">\r\n                  <Checkbox\r\n                    label={t(\"DriverInfo_AllowHazardous\")}\r\n                    checked={modDriver.IsHazardousAllowed}\r\n                    onChange={(checked) =>\r\n                      onFieldChange(\"IsHazardousAllowed\", checked)\r\n                    }\r\n                  />\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              {hazardousEnabled ? (\r\n                <div className=\"col-12 col-md-6 col-lg-4 \">\r\n                  <DatePicker\r\n                    fluid\r\n                    value={\r\n                      modDriver.HazardousLicenseExpiry === null\r\n                        ? \"\"\r\n                        : Utilities.convertStringToCommonDateFormat(\r\n                            modDriver.HazardousLicenseExpiry\r\n                          )\r\n                    }\r\n                    displayFormat={getCurrentDateFormat()}\r\n                    label={t(\"DriverInfo_HazardousLicExpiry\")}\r\n                    disablePast={true}\r\n                    showYearSelector=\"true\"\r\n                    onChange={(data) =>\r\n                      onFieldChange(\"HazardousLicenseExpiry\", data)\r\n                    }\r\n                    onTextChange={(value, error) => {\r\n                      onDateTextChange(\"HazardousLicenseExpiry\", value, error);\r\n                    }}\r\n                    error={t(validationErrors.HazardousLicenseExpiry)}\r\n                    reserveSpace={false}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  placeholder={t(\"Common_Select\")}\r\n                  value={modDriver.LanguageCode}\r\n                  label={t(\"DriverInfo_Language\")}\r\n                  indicator=\"required\"\r\n                  options={listOptions.languageOptions}\r\n                  onChange={(data) => onFieldChange(\"LanguageCode\", data)}\r\n                  error={t(validationErrors.LanguageCode)}\r\n                  reserveSpace={false}\r\n                  search={true}\r\n                  noResultsMessage={t(\"noResultsMessage\")}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modDriver.Mobile === null ? \"\" : modDriver.Mobile}\r\n                  label={t(\"DriverInfo_Mobile\")}\r\n                  onChange={(data) => onFieldChange(\"Mobile\", data)}\r\n                  error={t(validationErrors.Mobile)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modDriver.Phone === null ? \"\" : modDriver.Phone}\r\n                  label={t(\"DriverInfo_Phone\")}\r\n                  onChange={(data) => onFieldChange(\"Phone\", data)}\r\n                  error={t(validationErrors.Phone)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modDriver.MailID === null ? \"\" : modDriver.MailID}\r\n                  label={t(\"DriverInfo_EMail\")}\r\n                  onChange={(data) => onFieldChange(\"MailID\", data)}\r\n                  error={t(validationErrors.MailID)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Select\r\n                  fluid\r\n                  placeholder={t(\"FinishedProductInfo_Select\")}\r\n                  label={t(\"DriverInfo_Status\")}\r\n                  value={modDriver.Active}\r\n                  options={[\r\n                    { text: t(\"ViewShipment_Ok\"), value: true },\r\n                    { text: t(\"ViewShipmentStatus_Inactive\"), value: false },\r\n                  ]}\r\n                  onChange={(data) => onActiveStatusChange(data)}\r\n                />\r\n              </div>\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                  fluid\r\n                  value={modDriver.Remarks === null ? \"\" : modDriver.Remarks}\r\n                  label={t(\"DriverInfo_Remarks\")}\r\n                  onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                  indicator={\r\n                    modDriver.Active !== driver.Active ? \"required\" : \"\"\r\n                  }\r\n                  error={t(validationErrors.Remarks)}\r\n                  reserveSpace={false}\r\n                />\r\n              </div>\r\n              {isEnterpriseNode ? (\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                  <AssociatedTerminals\r\n                    terminalList={listOptions.terminalCodes}\r\n                    selectedTerminal={modDriver.TerminalCodes}\r\n                    error={t(validationErrors.TerminalCodes)}\r\n                    onFieldChange={onFieldChange}\r\n                    onCheckChange={onAllTerminalsChange}\r\n                  ></AssociatedTerminals>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n            {modAttributeMetaDataList.length > 0\r\n              ? modAttributeMetaDataList.map((attire) => (\r\n                  <ErrorBoundary>\r\n                    <Accordion>\r\n                      <Accordion.Content\r\n                        className=\"attributeAccordian\"\r\n                        title={\r\n                          isEnterpriseNode\r\n                            ? attire.TerminalCode +\r\n                              \" - \" +\r\n                              t(\"Attributes_Header\")\r\n                            : t(\"Attributes_Header\")\r\n                        }\r\n                      >\r\n                        <AttributeDetails\r\n                          selectedAttributeList={attire.attributeMetaDataList}\r\n                          handleCellDataEdit={onAttributeDataChange}\r\n                          attributeValidationErrors={handleValidationErrorFilter(\r\n                            attributeValidationErrors,\r\n                            attire.TerminalCode\r\n                          )}\r\n                        ></AttributeDetails>\r\n                      </Accordion.Content>\r\n                    </Accordion>\r\n                  </ErrorBoundary>\r\n                ))\r\n              : null}\r\n            {isDCHEnabled && modDCHAttributes && modDCHAttributes.length > 0 ? (\r\n              <ErrorBoundary>\r\n                <Accordion>\r\n                  <Accordion.Content\r\n                    className=\"attributeAccordian\"\r\n                    title={t(\"External_System_Fields\")}\r\n                  >\r\n                    {modDCHAttributes.map((dchAttribute) => (\r\n                      //console.log(\"dchAttributeValidationErrors[dchAttribute.EntityName]\", dchAttribute.ID.toString()),\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                          fluid\r\n                          label={t(dchAttribute.EntityName)}\r\n                          value={\r\n                            dchAttribute.Value === null\r\n                              ? \"\"\r\n                              : dchAttribute.Value\r\n                          }\r\n                          indicator={\"required\"}\r\n                          onChange={(value) =>\r\n                            handleDCHCellDataEdit(dchAttribute, value)\r\n                          }\r\n                          error={t(\r\n                            dchAttributeValidationErrors[dchAttribute.ID]\r\n                          )}\r\n                          reserveSpace={false}\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                  </Accordion.Content>\r\n                </Accordion>\r\n              </ErrorBoundary>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { DriverDetails } from \"../../UIBase/Details/DriverDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport {\r\n  driverValidationDef,\r\n  dchAttributeValidationDef,\r\n} from \"../../../JS/ValidationDef\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { emptyDriver } from \"../../../JS/DefaultEntities\";\r\nimport axios from \"axios\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport {\r\n  functionGroups,\r\n  fnDriver,\r\n  fnKPIInformation,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport { driverAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport lodash from \"lodash\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport * as DateFieldsInEntities from \"../../../JS/DateFieldsInEntities\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiDriverDetail } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass DriverDetailsComposite extends Component {\r\n  state = {\r\n    driver: {},\r\n    attribute: [],\r\n    modDriver: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(driverValidationDef),\r\n    isReadyToRender: false,\r\n    carrierOptions: [],\r\n    carrierSearchOptions: [],\r\n    languageOptions: [],\r\n    terminalCodes: [],\r\n    //listOptions: { carriers: [], languageOptions: [], terminalCodes: [] },\r\n    saveEnabled: false,\r\n    entityType: \"driver\",\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    isDCHEnabled: false,\r\n    modDCHAttributes: [],\r\n    dchAttribute: [],\r\n    dchAttributeValidationErrors: {},\r\n    hazardousEnabled: false,\r\n    driverDetailsKPIList: [],\r\n    showAuthenticationLayout: false,\r\n    tempDriver: {},\r\n  };\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modDriver = lodash.cloneDeep(this.state.modDriver);\r\n      modDriver[propertyName] = data;\r\n\r\n      this.setState({ modDriver });\r\n      if (driverValidationDef[propertyName] !== undefined) {\r\n        const validationErrors = { ...this.state.validationErrors };\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          driverValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n\r\n      if (propertyName === \"TerminalCodes\") {\r\n        this.terminalSelectionChange(data);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"DriverDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getShareholderDetail(shareHolder) {\r\n    //console.log(\"DCH\", this.props.userDetails.EntityResult.IsDCHEnabled);\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.shareholderCode,\r\n        value: shareHolder,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: shareHolder,\r\n      keyDataCode: KeyCodes.shareholderCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetShareholder,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              isDCHEnabled:\r\n                result.EntityResult.ExternalSystemCode > 1 ? true : false,\r\n            },\r\n            () => {\r\n              if (this.state.isDCHEnabled) this.GetDCHAttributeInfoList();\r\n            }\r\n          );\r\n        } else {\r\n          this.setState({\r\n            isDCHEnabled: false,\r\n          });\r\n          console.log(\"Error in getShareholderDetail:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"Error while getting Shareholder detail:\",\r\n          error,\r\n          shareHolder\r\n        );\r\n      });\r\n    //console.log(\"Shareholder state : \", this.state.isValidShareholderSysExtCode)\r\n  }\r\n\r\n  GetDCHAttributeInfoList() {\r\n    try {\r\n      let modDriver = lodash.cloneDeep(this.state.modDriver);\r\n      let dcAttributeConfig = {\r\n        Shareholdercode: this.props.selectedShareholder,\r\n        EntityCode: modDriver.Code,\r\n        EntityType: Constants.ExtendEntity.DRIVER,\r\n      };\r\n      var obj = {\r\n        ShareHolderCode: this.props.selectedShareholder,\r\n        keyDataCode: KeyCodes.shareholderCode,\r\n        Entity: dcAttributeConfig,\r\n      };\r\n      axios(\r\n        RestAPIs.GetDCHAttributeInfoList,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              modDCHAttributes: result.EntityResult,\r\n              dchAttribute: result.EntityResult,\r\n            });\r\n          } else {\r\n            console.log(\"Error in GetDCHAttributeInfoList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting DCHAttributeInfoList:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while getting DCHAttributeInfoList:\", error);\r\n    }\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var modAttributeMetaDataList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.attributeMetaDataList\r\n        );\r\n        modAttributeMetaDataList = lodash.cloneDeep(\r\n          this.state.modAttributeMetaDataList\r\n        );\r\n        const attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        var modDriver = lodash.cloneDeep(this.state.modDriver);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.driver.forEach(function (attributeMetaData) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                var Attributevalue = modDriver.Attributes.find(\r\n                  (driverAttribute) => {\r\n                    return driverAttribute.TerminalCode === terminal;\r\n                  }\r\n                );\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute =\r\n                      Attributevalue.ListOfAttributeData.find((x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      });\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        modAttributeMetaDataList = [];\r\n        modAttributeMetaDataList = attributesTerminalsList;\r\n        modAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n          modAttributeMetaDataList\r\n        );\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n\r\n        this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"DriverDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (\r\n        Array.isArray(attributeMetaDataList.driver) &&\r\n        attributeMetaDataList.driver.length > 0\r\n      ) {\r\n        this.terminalSelectionChange([\r\n          attributeMetaDataList.driver[0].TerminalCode,\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"DriverDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      //console.log(nextProps);\r\n\r\n      if (\r\n        this.state.driver.Code !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        //console.log(nextProps);\r\n        this.getDriver(nextProps);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"DriverDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTerminalsForCarrier(carrier) {\r\n    var modDriver = lodash.cloneDeep(this.state.modDriver);\r\n    var terminalCodes = [];\r\n    if (!this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n      modDriver.CarrierCode = carrier;\r\n      modDriver.TerminalCodes = [];\r\n      this.setState({ terminalCodes, modDriver });\r\n    } else {\r\n      terminalCodes = [...this.state.terminalCodes];\r\n      //var listOptions = lodash.cloneDeep(this.state.listOptions);\r\n      modDriver.CarrierCode = carrier;\r\n      try {\r\n        if (carrier === undefined) {\r\n          terminalCodes = [];\r\n          modDriver.TerminalCodes = [];\r\n          this.setState({ terminalCodes, modDriver });\r\n          return;\r\n        }\r\n        var keyCode = [\r\n          {\r\n            key: KeyCodes.carrierCode,\r\n            value: carrier,\r\n          },\r\n          {\r\n            key: KeyCodes.transportationType,\r\n            value: Constants.TransportationType.ROAD,\r\n          },\r\n        ];\r\n        var obj = {\r\n          ShareHolderCode: this.props.selectedShareholder,\r\n          keyDataCode: KeyCodes.carrierCode,\r\n          KeyCodes: keyCode,\r\n        };\r\n        axios(\r\n          RestAPIs.GetCarrier,\r\n          Utilities.getAuthenticationObjectforPost(\r\n            obj,\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        )\r\n          .then((response) => {\r\n            var result = response.data;\r\n            //console.log(result);\r\n            //console.log(\"IsSuccess-\", result.IsSuccess);\r\n            if (\r\n              result.IsSuccess === true &&\r\n              result.EntityResult !== null &&\r\n              result.EntityResult.TerminalCodes !== null\r\n            ) {\r\n              terminalCodes = [...result.EntityResult.TerminalCodes];\r\n              this.setState({ terminalCodes });\r\n            } else {\r\n              terminalCodes = [];\r\n\r\n              this.setState({ terminalCodes });\r\n              console.log(\"Error in GetCarrier:\", result.ErrorList);\r\n            }\r\n            var driver = lodash.cloneDeep(this.state.driver);\r\n            if (\r\n              driver.Code === undefined ||\r\n              driver.Code === \"\" ||\r\n              driver.Code === null\r\n            ) {\r\n              if (terminalCodes.length === 1) {\r\n                modDriver.TerminalCodes = [...terminalCodes];\r\n                this.terminalSelectionChange(modDriver.TerminalCodes);\r\n              } else {\r\n                modDriver.TerminalCodes = [];\r\n                this.terminalSelectionChange([]);\r\n              }\r\n\r\n              if (Array.isArray(modDriver.TerminalCodes)) {\r\n                modDriver.TerminalCodes = terminalCodes.filter((x) =>\r\n                  modDriver.TerminalCodes.includes(x)\r\n                );\r\n              }\r\n              this.setState({ modDriver });\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            terminalCodes = [];\r\n            modDriver.TerminalCodes = [];\r\n            this.setState({ terminalCodes, modDriver });\r\n            console.log(\"Error while getting Carrier:\", error, carrier);\r\n            //throw error;\r\n          });\r\n      } catch (error) {\r\n        terminalCodes = [];\r\n        modDriver.TerminalCodes = [];\r\n        this.setState({ terminalCodes, modDriver });\r\n        console.log(\r\n          \"DriverDetailsComposite:Error occured on handleCarrierChange\",\r\n          error\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCarrierChange = (carrier) => {\r\n    if (this.props.userDetails.EntityResult.IsEnterpriseNode)\r\n      this.getTerminalsForCarrier(carrier);\r\n    else {\r\n      var modDriver = lodash.cloneDeep(this.state.modDriver);\r\n      modDriver.CarrierCode = carrier;\r\n      var terminalCodes = [];\r\n      modDriver.TerminalCodes = [];\r\n      this.setState({ terminalCodes, modDriver });\r\n    }\r\n    if (driverValidationDef[\"CarrierCode\"] !== undefined) {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      validationErrors[\"CarrierCode\"] = Utilities.validateField(\r\n        driverValidationDef[\"CarrierCode\"],\r\n        carrier\r\n      );\r\n\r\n      this.setState({ validationErrors });\r\n    }\r\n  };\r\n  handleSave = () => {\r\n    try {\r\n      // this.setState({ saveEnabled: false });\r\n      let modDriver = lodash.cloneDeep(this.state.modDriver);\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      if (this.validateSave(modDriver, attributeList)) {\r\n        // modDriver = this.fillAttributeDetails(modDriver, attributeList);\r\n\r\n        // modDriver = Utilities.convertDatesToString(\r\n        //   DateFieldsInEntities.DatesInEntity.Driver,\r\n        //   modDriver\r\n        // );\r\n        let showAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n        let tempDriver = lodash.cloneDeep(modDriver);\r\n        this.setState({ showAuthenticationLayout, tempDriver }, () => {\r\n          if (showAuthenticationLayout === false) {\r\n            this.saveDriver();\r\n          }\r\n        });\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"DriverDetailsComposite:Error occured on handleSave\", error);\r\n    }\r\n  };\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n  saveDriver = () => {\r\n    //debugger\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempDriver = lodash.cloneDeep(this.state.tempDriver);\r\n\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      tempDriver = this.fillAttributeDetails(tempDriver, attributeList);\r\n\r\n      tempDriver = Utilities.convertDatesToString(\r\n        DateFieldsInEntities.DatesInEntity.Driver,\r\n        tempDriver\r\n      );\r\n      this.state.driver.Code === \"\"\r\n        ? this.CreateDriver(tempDriver)\r\n        : this.UpdateDriver(tempDriver);\r\n    } catch (error) {\r\n      console.log(\"DriverDetailsComposite : Error in saveDriver\");\r\n    }\r\n  };\r\n  fillAttributeDetails(modDriver, attributeList) {\r\n    try {\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modDriver.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n\r\n      if (this.state.isDCHEnabled) {\r\n        let modDCHAttributes = lodash.cloneDeep(this.state.modDCHAttributes);\r\n        modDriver.IsDCHEnabled = true;\r\n        if (\r\n          modDCHAttributes !== null &&\r\n          modDCHAttributes !== undefined &&\r\n          modDCHAttributes.length > 0\r\n        ) {\r\n          let dchAttributeInfo = {\r\n            EntityCode: modDriver.Code,\r\n            EntityType: Constants.ExtendEntity.DRIVER,\r\n            Shareholdercode: this.props.selectedShareholder,\r\n            TabAttributeDataList: [],\r\n          };\r\n\r\n          modDCHAttributes.forEach((attribute) => {\r\n            dchAttributeInfo.TabAttributeDataList.push(attribute);\r\n          });\r\n          modDriver.DCHAttribute = dchAttributeInfo;\r\n        }\r\n      } else {\r\n        modDriver.IsDCHEnabled = false;\r\n        modDriver.DCHAttribute = null;\r\n      }\r\n\r\n      return modDriver;\r\n    } catch (error) {\r\n      console.log(\r\n        \"DriverDetailsComposite:Error occured on fillAttributeDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  validateSave(modDriver, attributeList) {\r\n    //const { modDriver } = this.state;\r\n    var validationErrors = { ...this.state.validationErrors };\r\n    Object.keys(driverValidationDef).forEach(function (key) {\r\n      validationErrors[key] = Utilities.validateField(\r\n        driverValidationDef[key],\r\n        modDriver[key]\r\n      );\r\n    });\r\n\r\n    if (modDriver.Active !== this.state.driver.Active) {\r\n      if (modDriver.Remarks === null || modDriver.Remarks === \"\") {\r\n        validationErrors[\"Remarks\"] = \"OriginTerminal_RemarksRequired\";\r\n      }\r\n    }\r\n    if (\r\n      (modDriver.License2 !== null && modDriver.License2 !== \"\") ||\r\n      !isNaN(Date.parse(modDriver.License2ExpiryDate)) ||\r\n      !isNaN(Date.parse(modDriver.License2IssueDate))\r\n    ) {\r\n      if (modDriver.License2 === null || modDriver.License2 === \"\") {\r\n        validationErrors[\"License2\"] = \"DriverInfo_License2Required\";\r\n      }\r\n\r\n      if (isNaN(Date.parse(modDriver.License2ExpiryDate))) {\r\n        validationErrors[\"License2ExpiryDate\"] =\r\n          \"DriverInfo_Lic2ExpiryRequired\";\r\n      }\r\n      if (isNaN(Date.parse(modDriver.License2IssueDate))) {\r\n        validationErrors[\"License2IssueDate\"] = \"DriverInfo_Lic2IssueRequired\";\r\n      }\r\n    }\r\n\r\n    if (\r\n      (modDriver.License3 !== null && modDriver.License3 !== \"\") ||\r\n      !isNaN(Date.parse(modDriver.License3ExpiryDate)) ||\r\n      !isNaN(Date.parse(modDriver.License3IssueDate))\r\n    ) {\r\n      if (modDriver.License3 === null || modDriver.License3 === \"\") {\r\n        validationErrors[\"License3\"] = \"DriverInfo_License3Required\";\r\n      }\r\n      if (isNaN(Date.parse(modDriver.License3ExpiryDate))) {\r\n        validationErrors[\"License3ExpiryDate\"] =\r\n          \"DriverInfo_Lic3ExpiryRequired\";\r\n      }\r\n      if (isNaN(Date.parse(modDriver.License3IssueDate))) {\r\n        validationErrors[\"License3IssueDate\"] = \"DriverInfo_Lic3IssueRequired\";\r\n      }\r\n    }\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n    this.setState({ validationErrors, attributeValidationErrors });\r\n    var returnValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n\r\n    let dchAttributeValidationErrors = lodash.cloneDeep(\r\n      this.state.dchAttributeValidationErrors\r\n    );\r\n\r\n    let modDCHAttributes = lodash.cloneDeep(this.state.modDCHAttributes);\r\n\r\n    //dchAttributeValidationErrors = getDCHAttributeErrors(modDCHAttributes, dchAttributeValidationDef);\r\n    modDCHAttributes.forEach((attributes) => {\r\n      dchAttributeValidationErrors[attributes.ID] = Utilities.validateField(\r\n        dchAttributeValidationDef[\"attribute\"],\r\n        attributes.Value\r\n      );\r\n    });\r\n\r\n    this.setState({ dchAttributeValidationErrors });\r\n\r\n    if (returnValue)\r\n      returnValue = Object.values(dchAttributeValidationErrors).every(function (\r\n        value\r\n      ) {\r\n        return value === \"\";\r\n      });\r\n\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n    return returnValue;\r\n  }\r\n\r\n  CreateDriver(modDriver) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.driverCode,\r\n        value: this.state.modDriver.Code,\r\n      },\r\n    ];\r\n\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.driverCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modDriver,\r\n    };\r\n\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"DriverInfo_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"DriverInfo_Code\"],\r\n          keyValues: [this.state.modDriver.Code],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.CreateDriver,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        // modDriver = Utilities.convertStringToDates(\r\n        //   DateFieldsInEntities.DatesInEntity.Driver,\r\n        //   modDriver\r\n        // );\r\n        var result = response.data;\r\n        //console.log(result);\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            // driver: lodash.cloneDeep(this.state.modDriver),\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnDriver\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          this.getDriver({\r\n            selectedRow: { Common_Code: this.state.modDriver.Code },\r\n          });\r\n          //this.props.onSaved(this.state.modDriver, \"DriverAddition\", true, \"\");\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnDriver\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in CreateDriver:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modDriver, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnDriver\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modCarrier, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  UpdateDriver(modDriver) {\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.driverCode,\r\n        value: this.state.modDriver.Code,\r\n      },\r\n    ];\r\n\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.driverCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modDriver,\r\n    };\r\n\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"DriverInfo_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"DriverInfo_Code\"],\r\n          keyValues: [this.state.modDriver.Code],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.UpdateDriver,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            //driver: lodash.cloneDeep(this.state.modDriver),\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnDriver\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          this.getDriver({\r\n            selectedRow: { Common_Code: this.state.modDriver.Code },\r\n          });\r\n        } else {\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnDriver\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          console.log(\"Error in UpdateDriver:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modDriver, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modCarrier, \"modify\", notification);\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.modify,\r\n            fnDriver\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getHazardousLookup();\r\n      this.getLanguages();\r\n      this.getCarriers(this.props.selectedShareholder);\r\n      this.getAttributes(this.props);\r\n    } catch (error) {\r\n      console.log(\r\n        \"DriverDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  getCarriers(shareholder) {\r\n    axios(\r\n      RestAPIs.GetCarrierCodes +\r\n        \"?Transportationtype=\" +\r\n        Constants.TransportationType.ROAD +\r\n        \"&ShareholderCode=\" +\r\n        shareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        // console.log(response);\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          // console.log(result.EntityResult);\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            var carrierOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            let carrierSearchOptions = lodash.cloneDeep(carrierOptions);\r\n            if (carrierSearchOptions.length > Constants.filteredOptionsCount) {\r\n              carrierSearchOptions = carrierSearchOptions.slice(\r\n                0,\r\n                Constants.filteredOptionsCount\r\n              );\r\n            }\r\n            this.setState({ carrierOptions, carrierSearchOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetCarrierCodes:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting GetCarrierCodes:\", error);\r\n      });\r\n  }\r\n\r\n  getAttributes(props) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [driverAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.driver\r\n                ),\r\n            },\r\n            () => this.getDriver(props)\r\n          );\r\n        } else {\r\n          console.log(\"Error in getAttributes:\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n\r\n  getLanguages() {\r\n    axios(\r\n      RestAPIs.GetLanguageList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          // console.log(result);\r\n          let languageOptions = [];\r\n          if (result.EntityResult !== null) {\r\n            Object.keys(result.EntityResult).forEach((key) =>\r\n              languageOptions.push({\r\n                text: result.EntityResult[key],\r\n                value: key,\r\n              })\r\n            );\r\n            this.setState({ languageOptions });\r\n          } else {\r\n            console.log(\"No languages identified.\");\r\n          }\r\n        } else {\r\n          console.log(\"Error in getLanguages:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Languages:\", error);\r\n      });\r\n  }\r\n\r\n  getDriver(props) {\r\n    let driver = props.selectedRow;\r\n    emptyDriver.ShareholderCode = this.props.selectedShareholder;\r\n    emptyDriver.LanguageCode = this.props.userDetails.EntityResult.UICulture;\r\n    var terminalCodes = [...this.state.terminalCodes];\r\n    if (driver.Common_Code === undefined) {\r\n      terminalCodes = [];\r\n\r\n      this.setState(\r\n        {\r\n          driver: lodash.cloneDeep(emptyDriver),\r\n          modDriver: lodash.cloneDeep(emptyDriver),\r\n          isReadyToRender: true,\r\n          terminalCodes,\r\n          modAttributeMetaDataList: [],\r\n          driverDetailsKPIList: [],\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnDriver\r\n          ),\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsDCHEnabled)\r\n            this.getShareholderDetail(this.props.selectedShareholder);\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode === false)\r\n            this.localNodeAttribute();\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.driverCode,\r\n        value: driver.Common_Code,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.driverCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetDriver,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        // console.log(result);\r\n        if (result.IsSuccess === true) {\r\n          // this.getTerminalsForCarrier(result.EntityResult.CarrierCode);\r\n          this.setState(\r\n            {\r\n              isReadyToRender: true,\r\n              driver: result.EntityResult,\r\n              modDriver: lodash.cloneDeep(result.EntityResult),\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnDriver\r\n              ),\r\n            },\r\n            () => {\r\n              this.getKPIList(\r\n                this.props.selectedShareholder,\r\n                result.EntityResult.Code,\r\n                result.EntityResult.CarrierCode\r\n              );\r\n              if (this.props.userDetails.EntityResult.IsDCHEnabled)\r\n                this.getShareholderDetail(this.props.selectedShareholder);\r\n              this.getTerminalsForCarrier(result.EntityResult.CarrierCode);\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                this.terminalSelectionChange(result.EntityResult.TerminalCodes);\r\n              } else {\r\n                this.localNodeAttribute();\r\n              }\r\n            }\r\n          );\r\n        } else {\r\n          this.setState(\r\n            {\r\n              modDriver: lodash.cloneDeep(emptyDriver),\r\n              driver: lodash.cloneDeep(emptyDriver),\r\n              isReadyToRender: true,\r\n            },\r\n            () => {\r\n              if (this.props.userDetails.EntityResult.IsDCHEnabled)\r\n                this.getShareholderDetail(this.props.selectedShareholder);\r\n            }\r\n          );\r\n          console.log(\"Error in GetDriver:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Driver:\", error, props);\r\n      });\r\n  }\r\n\r\n  handleImageChange = (event) => {\r\n    try {\r\n      var modDriver = lodash.cloneDeep(this.state.modDriver);\r\n\r\n      if (\r\n        event.target.files[0].type.includes(\"image\") &&\r\n        event.target.files[0].size <= 500 * 1024\r\n      ) {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(event.target.files[0]); // converts the blob to base64 and calls onload\r\n        reader.onloadend = () => {\r\n          modDriver.DriverImage = reader.result.split(\";base64,\")[1];\r\n          this.setState({ modDriver });\r\n        };\r\n      } else {\r\n        console.log(\"wrong type of image\");\r\n        event.target.value = null;\r\n        modDriver.DriverImage = null;\r\n        this.setState({ modDriver });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"DriverDetailsComposite:Error occured on handleImageChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleReset = () => {\r\n    try {\r\n      var modDriver = lodash.cloneDeep(this.state.driver);\r\n      this.setState(\r\n        {\r\n          modDriver,\r\n          validationErrors: [],\r\n          modAttributeMetaDataList: [],\r\n          dchAttributeValidationErrors: {},\r\n          modDCHAttributes: lodash.cloneDeep(this.state.dchAttribute),\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange(modDriver.TerminalCodes);\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            this.localNodeAttribute();\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        }\r\n      );\r\n      if (this.state.driver.Code === \"\") {\r\n        var terminalCodes = [...this.state.terminalCodes];\r\n        terminalCodes = [];\r\n        this.setState({ terminalCodes });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"DriverDetailsComposite:Error occured on handleReset\", error);\r\n    }\r\n  };\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"DriverDetailsComposite:Error occured on handleAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleDCHCellDataEdit = (attribute, value) => {\r\n    try {\r\n      attribute.Value = value;\r\n      this.setState({\r\n        attribute: attribute,\r\n      });\r\n      const dchAttributeValidationErrors = lodash.cloneDeep(\r\n        this.state.dchAttributeValidationErrors\r\n      );\r\n\r\n      dchAttributeValidationErrors[attribute.ID.toString()] =\r\n        Utilities.validateField(dchAttributeValidationDef[\"attribute\"], value);\r\n      this.setState({ dchAttributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"CustomerDetailsComposite:Error occured on handleDCHCellDataEdit\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors:\r\n          Utilities.getAttributeInitialValidationErrors(\r\n            attributeMetaDataList.driver\r\n          ),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"handleAttributeValidationError:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({\r\n      showMe: !this.state.showMe,\r\n      hideShowContent:\r\n        this.state.hideShowContent === \"HIDE ATTRIBUTES\"\r\n          ? \"SHOW ATTRIBUTES\"\r\n          : \"HIDE ATTRIBUTES\",\r\n    });\r\n  };\r\n\r\n  handleDateTextChange = (propertyName, value, error) => {\r\n    try {\r\n      var validationErrors = { ...this.state.validationErrors };\r\n      var modDriver = lodash.cloneDeep(this.state.modDriver);\r\n      validationErrors[propertyName] = error;\r\n      modDriver[propertyName] = value;\r\n      this.setState({ validationErrors, modDriver });\r\n    } catch (error) {\r\n      console.log(\r\n        \"DriverDetailsComposite:Error occured on handleDateTextChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleAllTerminalsChange = (checked) => {\r\n    try {\r\n      var terminalCodes = [...this.state.terminalCodes];\r\n      var modDriver = lodash.cloneDeep(this.state.modDriver);\r\n\r\n      if (checked) modDriver.TerminalCodes = [...terminalCodes];\r\n      else modDriver.TerminalCodes = [];\r\n      this.setState({ modDriver });\r\n      this.terminalSelectionChange(modDriver.TerminalCodes);\r\n    } catch (error) {\r\n      console.log(\r\n        \"DriverDetailsComposite:Error occured on handleAllTerminasChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modDriver = lodash.cloneDeep(this.state.modDriver);\r\n      modDriver.Active = value;\r\n      if (modDriver.Active !== this.state.driver.Active) modDriver.Remarks = \"\";\r\n      this.setState({ modDriver });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  handleCarrierSearchChange = (carrierCode) => {\r\n    try {\r\n      let carrierSearchOptions = this.state.carrierOptions.filter((item) =>\r\n        item.value.toLowerCase().includes(carrierCode.toLowerCase())\r\n      );\r\n      if (carrierSearchOptions.length > Constants.filteredOptionsCount) {\r\n        carrierSearchOptions = carrierSearchOptions.slice(\r\n          0,\r\n          Constants.filteredOptionsCount\r\n        );\r\n      }\r\n\r\n      this.setState({\r\n        carrierSearchOptions,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"DriverDetailsCompositeComposite:Error occured on handleCarrierSearchChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  getHazardousLookup() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=HazardousMaterial\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult[\"RoadEnabled\"]) {\r\n            if (result.EntityResult[\"RoadEnabled\"].toLowerCase() === \"true\") {\r\n              this.setState({ hazardousEnabled: true });\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"DriverDetailsComposite:Error occured on getHazardousLookup\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  getCarrierSearchOptions() {\r\n    let carrierSearchOptions = lodash.cloneDeep(\r\n      this.state.carrierSearchOptions\r\n    );\r\n    let modCarrierCode = this.state.modDriver.CarrierCode;\r\n    if (\r\n      modCarrierCode !== null &&\r\n      modCarrierCode !== \"\" &&\r\n      modCarrierCode !== undefined\r\n    ) {\r\n      let selectedCarrierCode = carrierSearchOptions.find(\r\n        (element) =>\r\n          element.value.toLowerCase() === modCarrierCode.toLowerCase()\r\n      );\r\n      if (selectedCarrierCode === undefined) {\r\n        carrierSearchOptions.push({\r\n          text: modCarrierCode,\r\n          value: modCarrierCode,\r\n        });\r\n      }\r\n    }\r\n    return carrierSearchOptions;\r\n  }\r\n  getKPIList(shareholder, driverCode, CarrierCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      let objKPIRequestData = {\r\n        PageName: kpiDriverDetail,\r\n        InputParameters: [\r\n          { key: \"ShareholderCode\", value: shareholder },\r\n          { key: \"DriverCode\", value: driverCode },\r\n          { key: \"CarrierCode\", value: CarrierCode },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              driverDetailsKPIList: result.EntityResult.ListKPIDetails,\r\n            });\r\n          } else {\r\n            this.setState({ driverDetailsKPIList: [] });\r\n            console.log(\"Error in driver KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Driver KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n  render() {\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"DriverInfo_LastUpdated\",\r\n        fieldValue:\r\n          new Date(this.state.modDriver.LastUpdatedDate).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modDriver.LastUpdatedDate).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"DriverInfo_CreatedTime\",\r\n        fieldValue:\r\n          new Date(this.state.modDriver.CreatedDate).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modDriver.CreatedDate).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"DriverInfo_LastActive\",\r\n        fieldValue:\r\n          this.state.modDriver.LastActiveDate !== undefined &&\r\n          this.state.modDriver.LastActiveDate !== null\r\n            ? new Date(\r\n                this.state.modDriver.LastActiveDate\r\n              ).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(this.state.modDriver.LastActiveDate).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"DriverInfo_LastReported\",\r\n        fieldValue:\r\n          this.state.modDriver.LastReportTime !== undefined &&\r\n          this.state.modDriver.LastReportTime !== null\r\n            ? new Date(\r\n                this.state.modDriver.LastReportTime\r\n              ).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(this.state.modDriver.LastReportTime).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n    ];\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.driver.Code}\r\n            newEntityName=\"DriverInfo_NewDriver\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <TMDetailsKPILayout KPIList={this.state.driverDetailsKPIList}>\r\n          {\" \"}\r\n        </TMDetailsKPILayout>\r\n        <ErrorBoundary>\r\n          <DriverDetails\r\n            driver={this.state.driver}\r\n            modDriver={this.state.modDriver}\r\n            modDCHAttributes={this.state.modDCHAttributes}\r\n            validationErrors={this.state.validationErrors}\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            listOptions={{\r\n              carriers: this.getCarrierSearchOptions(),\r\n              languageOptions: this.state.languageOptions,\r\n              terminalCodes: this.state.terminalCodes,\r\n            }}\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            attributeMetaDataList={this.state.attributeMetaDataList}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            onFieldChange={this.handleChange}\r\n            onDateTextChange={this.handleDateTextChange}\r\n            onCarrierChange={this.handleCarrierChange}\r\n            onImageChange={this.handleImageChange}\r\n            onAllTerminalsChange={this.handleAllTerminalsChange}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            onAttributeDataChange={this.handleAttributeDataChange}\r\n            onCarrierSearchChange={this.handleCarrierSearchChange}\r\n            isDCHEnabled={this.state.isDCHEnabled}\r\n            dchAttributeValidationErrors={\r\n              this.state.dchAttributeValidationErrors\r\n            }\r\n            handleDCHCellDataEdit={this.handleDCHCellDataEdit}\r\n            isWebPortalUser={\r\n              this.props.userDetails.EntityResult.IsWebPortalUser\r\n            }\r\n            hazardousEnabled={this.state.hazardousEnabled}\r\n          ></DriverDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.driver.Code === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnDriver}\r\n            handleOperation={this.saveDriver}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(DriverDetailsComposite);\r\n\r\nDriverDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Select, Checkbox } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nAssociatedTerminals.propTypes = {\r\n  terminalList: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  selectedTerminal: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  validationError: PropTypes.string,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onCheckChange: PropTypes.func.isRequired,\r\n};\r\nAssociatedTerminals.defaultProps = {\r\n  terminalList: [],\r\n  selectedTerminal: [],\r\n  validationError: \"\",\r\n};\r\nexport function AssociatedTerminals({\r\n  terminalList,\r\n  selectedTerminal,\r\n  validationError,\r\n  onFieldChange,\r\n  onCheckChange,\r\n}) {\r\n  //console.log(\"component terminalList\", terminalList);\r\n  if (selectedTerminal === null) selectedTerminal = [];\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <div style={{ width: \"80%\" }}>\r\n            <Select\r\n              fluid\r\n              placeholder={t(\"Common_Select\")}\r\n              label={t(\"TerminalCodes\")}\r\n              value={selectedTerminal}\r\n              multiple={true}\r\n              options={Utilities.transferListtoOptions(terminalList)}\r\n              onChange={(data) => onFieldChange(\"TerminalCodes\", data)}\r\n              error={t(validationError)}\r\n              disabled={terminalList.length === 0}\r\n              reserveSpace={false}\r\n            />\r\n          </div>\r\n          <div className=\"ddlSelectAll\">\r\n            <Checkbox\r\n              label={t(\"Common_All\")}\r\n              checked={\r\n                Array.isArray(selectedTerminal) &&\r\n                selectedTerminal.length === terminalList.length\r\n              }\r\n              onChange={(checked) => onCheckChange(checked)}\r\n            ></Checkbox>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","export const DatesInEntity={\r\n    Driver : [\r\n    \"License1ExpiryDate\",\r\n    \"License1IssueDate\",\r\n    \"License2IssueDate\",\r\n    \"License2ExpiryDate\",\r\n    \"License3IssueDate\",\r\n    \"License3ExpiryDate\",\r\n    \"HazardousLicenseExpiry\"\r\n  ],\r\n  CarrierCompany:[\"PermitExpiryDate\"],\r\n  PrimeMover:[\"RoadTaxNoIssueDate\",\"RoadTaxNoExpiryDate\",\"licenseExpiryDate\"],\r\n  Wagon:[\"LicenseExpiryDate\"],\r\n  Vehicle:[\"LicenseNoIssueDate\",\"LicenseNoExpiryDate\",\r\n  \"RoadTaxNoIssueDate\",\"RoadTaxNoExpiryDate\",\"Bondexpirydate\",\"HazardousLicenseExpiry\"],\r\n  Contract:[\"StartDate\",\"EndDate\"],\r\n  ContractItem:[\"StartDate\",\"EndDate\"],\r\n  Order:[\"OrderStartDate\",\"OrderEndDate\",\"OrderDate\",\"DeliveryDate\"],\r\n  AccessCard:[\"ExpiryDate\",\"IssueDate\",\"PasswordExpiryDate\"],\r\n  Trailer:[\"HazardousLicenseExpiry\"],\r\n  };","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["TMDetailsKPILayout","_ref","KPIList","pageName","rowHeight","widgetHeight","isDraggable","isResizable","kpiDisplayTopBreakpoint","KPIDisplays","setKPIDisplays","useState","kpiDiv","React","hideKpis","currentScrollPos","window","pageYOffset","KPIDisplay","current","getBoundingClientRect","top","useEffect","addEventListener","removeEventListener","_jsx","ref","children","TranslationConsumer","t","style","marginTop","ErrorBoundary","KPIDashboardLayout","kpiList","defaultProps","DriverDetails","driver","modDriver","modDCHAttributes","validationErrors","attributeValidationErrors","listOptions","modAttributeMetaDataList","onFieldChange","onDateTextChange","onCarrierChange","onImageChange","onAllTerminalsChange","onActiveStatusChange","isEnterpriseNode","onAttributeDataChange","onCarrierSearchChange","isDCHEnabled","dchAttributeValidationErrors","handleDCHCellDataEdit","isWebPortalUser","hazardousEnabled","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","_jsxs","className","InputLabel","label","undefined","DriverImage","length","height","width","alt","src","type","accept","name","id","onChange","Input","fluid","value","Code","indicator","disabled","data","error","reserveSpace","Name","Select","placeholder","CarrierCode","options","carriers","search","noResultsMessage","onSearch","License1","DatePicker","License1IssueDate","Utilities","displayFormat","getCurrentDateFormat","showYearSelector","onTextChange","License1ExpiryDate","disablePast","License2","License2IssueDate","License2ExpiryDate","License3","License3IssueDate","License3ExpiryDate","Checkbox","checked","IsHazardousAllowed","HazardousLicenseExpiry","LanguageCode","languageOptions","Mobile","Phone","MailID","Active","text","Remarks","AssociatedTerminals","terminalList","terminalCodes","selectedTerminal","TerminalCodes","onCheckChange","map","attire","Accordion","Content","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","handleCellDataEdit","dchAttribute","EntityName","Value","ID","DriverDetailsComposite","Component","constructor","arguments","state","attribute","driverValidationDef","isReadyToRender","carrierOptions","carrierSearchOptions","saveEnabled","entityType","driverDetailsKPIList","showAuthenticationLayout","tempDriver","handleChange","propertyName","lodash","this","setState","terminalSelectionChange","console","log","handleCarrierChange","carrier","props","userDetails","EntityResult","IsEnterpriseNode","getTerminalsForCarrier","handleSave","attributeList","validateSave","IsWebPortalUser","saveDriver","handleAuthenticationClose","fillAttributeDetails","DateFieldsInEntities","Driver","CreateDriver","UpdateDriver","handleImageChange","event","target","files","includes","size","reader","FileReader","readAsDataURL","onloadend","result","split","handleReset","handleResetAttributeValidationError","localNodeAttribute","handleAttributeDataChange","matchedAttributes","matchedAttributesList","filter","modattribute","Array","isArray","DefaultValue","forEach","toString","dchAttributeValidationDef","handleClick","showMe","hideShowContent","handleDateTextChange","handleAllTerminalsChange","handleActiveStatusChange","handleCarrierSearchChange","carrierCode","item","toLowerCase","Constants","slice","getShareholderDetail","shareHolder","keyCode","key","KeyCodes","obj","ShareHolderCode","keyDataCode","axios","RestAPIs","tokenDetails","tokenInfo","then","response","IsSuccess","ExternalSystemCode","GetDCHAttributeInfoList","ErrorList","catch","dcAttributeConfig","Shareholdercode","selectedShareholder","EntityCode","EntityType","DRIVER","Entity","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","Attributes","driverAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","push","Object","keys","componentWillReceiveProps","nextProps","selectedRow","Common_Code","getDriver","ROAD","IsDCHEnabled","dchAttributeInfo","TabAttributeDataList","DCHAttribute","isNaN","Date","parse","returnValue","values","every","attributes","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","FunctionsList","functionGroups","modify","fnDriver","add","onSaved","modCarrier","componentDidMount","IsArchived","getHazardousLookup","getLanguages","getCarriers","getAttributes","shareholder","driverAttributeEntity","emptyDriver","ShareholderCode","UICulture","getKPIList","getCarrierSearchOptions","modCarrierCode","element","driverCode","view","fnKPIInformation","objKPIRequestData","PageName","kpiDriverDetail","InputParameters","ListKPIDetails","render","popUpContents","fieldName","fieldValue","LastUpdatedDate","toLocaleDateString","toLocaleTimeString","CreatedDate","LastActiveDate","LastReportTime","TMDetailsHeader","entityCode","newEntityName","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","validationError","display","justifyContent","multiple","margin","Popup","Icon","marginLeft","root","position","List","content","Button","onClick","float","handleAttributeDateValue","convertAttributeDatetoString","chars","Dateval","getFullYear","getMonth","getDate","DataType","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","INT","LONG","FLOAT","DOUBLE","BOOL","DATETIME","toLocaleString","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","DatesInEntity","CarrierCompany","PrimeMover","Wagon","Vehicle","Contract","ContractItem","Order","AccessCard","Trailer","getOptionsWithSelect","ddlOptions","selectOptionText","option","unshift","language","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}