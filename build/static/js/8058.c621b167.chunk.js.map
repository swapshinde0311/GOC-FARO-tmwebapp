{"version":3,"file":"static/js/8058.c621b167.chunk.js","mappings":"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","sources":["Components/Composite/Common/SlotBook/CreateSlotComposite.jsx","Components/Composite/Common/SlotBook/ModifySlotComposite.jsx","Components/Composite/Details/SlotDetailsComposite.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/functionalUtilities.js","../node_modules/dayjs/plugin/isBetween.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Select,\r\n  Radio,\r\n  InputLabel,\r\n  Input,\r\n  Accordion,\r\n} from \"@scuf/common\";\r\nimport lodash from \"lodash\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { LoadingPage } from \"../../../UIBase/Common/LoadingPage\";\r\nimport * as Constants from \"../../../../JS/Constants\";\r\n//import { getCurrentDateFormat } from \"../../../../JS/functionalUtilities\";\r\nimport dayjs from \"dayjs\";\r\nimport * as Utilities from \"../../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../../ErrorBoundary\";\r\nimport { AttributeDetails } from \"../../../UIBase/Details/AttributeDetails\";\r\n\r\nclass CreateSlotComposite extends Component {\r\n  state = {\r\n    //open: this.props.open,\r\n  };\r\n  //errors = \"\";\r\n  getSlotTimings() {\r\n    //debugger;\r\n    let options = [];\r\n    try {\r\n      let slotParams = this.props.slotParameters;\r\n      let dayStartTime = slotParams.slotStartTime;\r\n      let dayEndTime = slotParams.slotEndTime;\r\n      let slotDuration = slotParams.slotDuration;\r\n      let tempStartTime = dayStartTime;\r\n      while (tempStartTime.isBefore(dayEndTime)) {\r\n        options.push({\r\n          text: tempStartTime.format(\"HH:mm\"),\r\n          value: tempStartTime.format(\"HH:mm\"),\r\n        });\r\n        tempStartTime = tempStartTime.add(slotDuration, \"minute\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\"CreateSlotComposite-> error in getSlotTimings\", error);\r\n    }\r\n    return options;\r\n  }\r\n  getDurations() {\r\n    // debugger;\r\n    let options = [];\r\n    try {\r\n      let slotParams = this.props.slotParameters;\r\n      let maxSlots = slotParams.maxSlots;\r\n      let slotDuration = slotParams.slotDuration;\r\n      for (let i = 1; i <= maxSlots; i++) {\r\n        options.push({\r\n          text: i * slotDuration,\r\n          value: (i * slotDuration).toString(),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"CreateSlotComposite-> error in getDurations\", error);\r\n    }\r\n    return options;\r\n  }\r\n  getProductAvaiabilityList() {\r\n    let productsList = []; ////{Code,Quantity,UOM,shCode,isAvailable}\r\n    try {\r\n      let bayProducts = []; //[shCode:Sh1,fpCodes:[]]\r\n      let filteredBays = this.props.bayList.filter(\r\n        (bay) => bay.bayCode === this.props.slotCreateFields.bayCode\r\n      );\r\n      if (filteredBays.length > 0) {\r\n        bayProducts = filteredBays[0].shareholder;\r\n      }\r\n      productsList = lodash.cloneDeep(this.props.transactionData.products);\r\n      productsList.forEach((product) => {\r\n        product[\"isAvailable\"] = false;\r\n        bayProducts.forEach((shProd) => {\r\n          if (shProd.shCode === product.shCode) {\r\n            shProd.fpCodes.forEach((fp) => {\r\n              if (fp === product.code) {\r\n                product[\"isAvailable\"] = true;\r\n              }\r\n            });\r\n          }\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"CreateSlotComposite-> error in getProductAvaiabilityList\",\r\n        error\r\n      );\r\n    }\r\n    return productsList;\r\n  }\r\n  getModalContent() {\r\n    //debugger;\r\n    let slotCreateFields = this.props.slotCreateFields;\r\n    let slotParameters = this.props.slotParameters;\r\n    // this.errors = dayjs()\r\n    //   .add(slotParameters.minSlotMinutesToBook, \"minute\")\r\n    //   .isBefore(\r\n    //     slotCreateFields.slotTime.add(slotParameters.timeDifference, \"minute\")\r\n    //   )\r\n    //   ? \"\"\r\n    //   : \"invalid time for booking\";\r\n    if (!this.props.isRefreshing) {\r\n      if (this.props.slotInfo !== null) {\r\n        let slotInfo = this.props.slotInfo;\r\n        return (\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <div className=\"slotBookSuccess\">\r\n                <div>\r\n                  <span className=\"icon-accept productAvailable\"></span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {t(\"Booking_Success\")}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"slotDetailssmallSpan\">\r\n                    {t(\"Slot_ReferenceNum\")} :{\" \"}\r\n                  </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {slotInfo.ReferenceNumber}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"slotDetailssmallSpan\">\r\n                    {t(\"ViewShipmentTrailerStatus_Time\")} :{\" \"}\r\n                  </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {dayjs(slotInfo.StartTime)\r\n                      .add(-1 * slotParameters.timeDifference, \"minute\")\r\n                      .format(\"DD-MMM-YYYY HH:mm\")}\r\n                  </span>\r\n                  <span className=\"slotDetailssmallSpan\"> {t(\"To\")} </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {dayjs(slotInfo.EndTime)\r\n                      .add(-1 * slotParameters.timeDifference, \"minute\")\r\n                      .format(\r\n                        this.props.transportationType ===\r\n                          Constants.TransportationType.ROAD\r\n                          ? \"HH:mm\"\r\n                          : \"DD-MMM-YYYY HH:mm\"\r\n                      )}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"slotDetailssmallSpan\">\r\n                    {this.props.transportationType ===\r\n                    Constants.TransportationType.ROAD\r\n                      ? t(\"BayGroupList_BayCode\")\r\n                      : t(\"LocationInfo_BerthCode\")}{\" \"}\r\n                    :{\" \"}\r\n                  </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {slotInfo.LocationCode}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"slotDetailssmallSpan\">\r\n                    {slotInfo.TransactionType.toString() ===\r\n                    Constants.slotSource.SHIPMENT\r\n                      ? t(\"Report_ShipmentCode\")\r\n                      : t(\"Receipt_Code\")}{\" \"}\r\n                    :{\" \"}\r\n                  </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {slotInfo.TransactionCode}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        );\r\n      } else {\r\n        return (\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <div className=\"slotCreateDiv \">\r\n                <div className=\"row\">\r\n                  <div className=\"col-12 col-sm-6 col-md-12 col-lg-12\">\r\n                    <span>\r\n                      {this.props.transportationType ===\r\n                      Constants.TransportationType.ROAD\r\n                        ? t(\"BayGroupList_BayCode\")\r\n                        : t(\"LocationInfo_BerthCode\")}\r\n                    </span>\r\n                    {\": \"}\r\n                    <span>{slotCreateFields.bayCode}</span>\r\n                  </div>\r\n                  <div className=\"col-12 col-sm-6 col-md-4 col-lg-4\">\r\n                    <InputLabel fluid label={t(\"Report_Date\")} />\r\n                    <InputLabel\r\n                      fluid\r\n                      label={slotCreateFields.slotTime.format(\"DD-MMM-YYYY\")}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12 col-sm-6 col-md-4 col-lg-4\">\r\n                    {/* <div style={{ width: \"49%\" }}> */}\r\n                    <Select\r\n                      fluid\r\n                      label={t(\"StartTime\")}\r\n                      value={slotCreateFields.slotTime.format(\"HH:mm\")}\r\n                      options={this.getSlotTimings()}\r\n                      onChange={(data) => {\r\n                        this.props.onChange(data, \"Time\");\r\n                      }}\r\n                      reserveSpace={false}\r\n                      // error={this.errors}\r\n                      //noResultsMessage={t(\"noResultsMessage\")}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12  col-sm-6 col-md-4 col-lg-4\">\r\n                    <Select\r\n                      fluid\r\n                      label={t(\"SlotDuration\")}\r\n                      value={slotCreateFields.slotDuration}\r\n                      options={this.getDurations()}\r\n                      reserveSpace={false}\r\n                      onChange={(data) => {\r\n                        this.props.onChange(data, \"slotDuration\");\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  {this.props.transportationType ===\r\n                  Constants.TransportationType.ROAD ? (\r\n                    <div className=\"col-12 col-sm-6 col-md-6 col-lg-6\">\r\n                      <Select\r\n                        fluid\r\n                        label={t(\"Header_Shareholder\")}\r\n                        value={slotCreateFields.shareholder}\r\n                        options={this.props.shareholders}\r\n                        onChange={(data) => {\r\n                          this.props.onChange(data, \"shareholder\");\r\n                        }}\r\n                        reserveSpace={false}\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {this.props.transportationType ===\r\n                    Constants.TransportationType.ROAD &&\r\n                  slotCreateFields.slotSource !==\r\n                    Constants.slotSource.RECEIPT ? (\r\n                    <div className=\"col-12 col-sm-6 col-md-6 col-lg-6\">\r\n                      <div>\r\n                        <Radio\r\n                          label={t(\"Default_lblShipment\")}\r\n                          name=\"RadioGroup\"\r\n                          checked={\r\n                            slotCreateFields.slotSource ===\r\n                            Constants.slotSource.SHIPMENT\r\n                          }\r\n                          onChange={() => {\r\n                            this.props.onChange(\r\n                              Constants.slotSource.SHIPMENT,\r\n                              \"slotSource\"\r\n                            );\r\n                          }}\r\n                        />\r\n                        <Radio\r\n                          label={t(\"FeatureConfig_TrckOrder\")}\r\n                          name=\"RadioGroup\"\r\n                          checked={\r\n                            slotCreateFields.slotSource ===\r\n                            Constants.slotSource.ORDER\r\n                          }\r\n                          onChange={() => {\r\n                            this.props.onChange(\r\n                              Constants.slotSource.ORDER,\r\n                              \"slotSource\"\r\n                            );\r\n                          }}\r\n                        />\r\n                        <Radio\r\n                          label={t(\"FeatureConfig_TrckCon\")}\r\n                          name=\"RadioGroup\"\r\n                          checked={\r\n                            slotCreateFields.slotSource ===\r\n                            Constants.slotSource.CONTRACT\r\n                          }\r\n                          onChange={() => {\r\n                            this.props.onChange(\r\n                              Constants.slotSource.CONTRACT,\r\n                              \"slotSource\"\r\n                            );\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {this.props.transportationType ===\r\n                    Constants.TransportationType.ROAD &&\r\n                  slotCreateFields.slotSource === Constants.slotSource.ORDER ? (\r\n                    <div className=\"col-12 col-sm-6 col-md-6 col-lg-6\">\r\n                      <Select\r\n                        fluid\r\n                        label={t(\"ShipmentOrder_OrderCode\")}\r\n                        value={this.props.slotCreateFields.orderCode}\r\n                        options={Utilities.transferListtoOptions(\r\n                          this.props.slotCreateOptions.filteredorders\r\n                        )}\r\n                        onSearch={(query) =>\r\n                          this.props.onSearchChange(query, \"orders\")\r\n                        }\r\n                        onChange={(data) => {\r\n                          this.props.onChange(data, \"orderCode\");\r\n                        }}\r\n                        reserveSpace={false}\r\n                        search={true}\r\n                        noResultsMessage={t(\"noResultsMessage\")}\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {this.props.transportationType ===\r\n                    Constants.TransportationType.ROAD &&\r\n                  slotCreateFields.slotSource ===\r\n                    Constants.slotSource.CONTRACT ? (\r\n                    <div className=\"col-12 col-sm-6 col-md-6 col-lg-6\">\r\n                      <Select\r\n                        fluid\r\n                        label={t(\"ContractInfo_ContractCode\")}\r\n                        value={this.props.slotCreateFields.contractCode}\r\n                        options={Utilities.transferListtoOptions(\r\n                          this.props.slotCreateOptions.filteredcontracts\r\n                        )}\r\n                        onSearch={(query) =>\r\n                          this.props.onSearchChange(query, \"contracts\")\r\n                        }\r\n                        onChange={(data) => {\r\n                          this.props.onChange(data, \"contractCode\");\r\n                        }}\r\n                        reserveSpace={false}\r\n                        search={true}\r\n                        noResultsMessage={t(\"noResultsMessage\")}\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {slotCreateFields.slotSource ===\r\n                    Constants.slotSource.SHIPMENT ||\r\n                  (slotCreateFields.slotSource === Constants.slotSource.ORDER &&\r\n                    slotCreateFields.orderCode !== \"\") ||\r\n                  (slotCreateFields.slotSource ===\r\n                    Constants.slotSource.CONTRACT &&\r\n                    slotCreateFields.contractCode !== \"\") ? (\r\n                    <div className=\"col-12 col-sm-6 col-md-6 col-lg-6\">\r\n                      <Select\r\n                        fluid\r\n                        label={t(\"Report_ShipmentCode\")}\r\n                        value={this.props.slotCreateFields.shipmentCode}\r\n                        options={Utilities.transferListtoOptions(\r\n                          this.props.slotCreateOptions.filteredshipments\r\n                        )}\r\n                        onChange={(data) => {\r\n                          this.props.onChange(data, \"shipmentCode\");\r\n                        }}\r\n                        reserveSpace={false}\r\n                        onSearch={(query) =>\r\n                          this.props.onSearchChange(query, \"shipments\")\r\n                        }\r\n                        search={true}\r\n                        noResultsMessage={t(\"noResultsMessage\")}\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {slotCreateFields.slotSource ===\r\n                  Constants.slotSource.RECEIPT ? (\r\n                    <div className=\"col-12 col-sm-6 col-md-6 col-lg-6\">\r\n                      <Select\r\n                        fluid\r\n                        label={t(\"Receipt_Code\")}\r\n                        value={this.props.slotCreateFields.receiptCode}\r\n                        options={Utilities.transferListtoOptions(\r\n                          this.props.slotCreateOptions.filteredreceipts\r\n                        )}\r\n                        onSearch={(query) =>\r\n                          this.props.onSearchChange(query, \"receipts\")\r\n                        }\r\n                        onChange={(data) => {\r\n                          this.props.onChange(data, \"receiptCode\");\r\n                        }}\r\n                        reserveSpace={false}\r\n                        search={true}\r\n                        noResultsMessage={t(\"noResultsMessage\")}\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  <div className=\"col-12  col-sm-6 col-md-6 col-lg-6\">\r\n                    <Input\r\n                      fluid\r\n                      value={this.props.slotCreateFields.remarks}\r\n                      onChange={(data) => this.props.onChange(data, \"remarks\")}\r\n                      label={t(\"DriverInfo_Remarks\")}\r\n                      reserveSpace={false}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                {this.props.slotCreateFields.receiptCode !== \"\" ||\r\n                this.props.slotCreateFields.shipmentCode !== \"\" ? (\r\n                  <div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-evenly\",\r\n                      }}\r\n                    >\r\n                      <div>\r\n                        <span className=\"icon-accept productAvailable\"></span>\r\n                        <span className=\"slotDetailssmallSpan\">\r\n                          {t(\"Product_Available\")}\r\n                        </span>\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"icon-denied noProduct\"></span>\r\n                        <span className=\"slotDetailssmallSpan\">\r\n                          {t(\"Product_not_available\")}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"slotModelSeparator\">\r\n                      <div style={{ width: \"150px\" }}>\r\n                        <span className=\"slotDetailsSmallBoldSpan\">\r\n                          {t(\"productAllocation_Carrier\")}\r\n                        </span>\r\n                        {\" : \"}\r\n                        <span className=\"slotDetailssmallSpan\">\r\n                          {this.props.transactionData.carrier}\r\n                        </span>\r\n                      </div>\r\n                      <div style={{ width: \"150px\" }}>\r\n                        <span className=\"slotDetailsSmallBoldSpan\">\r\n                          {this.props.transportationType ===\r\n                          Constants.TransportationType.ROAD\r\n                            ? t(\"ViewShipment_Vehicle\")\r\n                            : t(\"MarineShipmentList_Vessel\")}\r\n                        </span>\r\n                        {\" : \"}\r\n                        <span className=\"slotDetailssmallSpan\">\r\n                          {this.props.transactionData.vehicle}\r\n                        </span>\r\n                      </div>\r\n                      <div style={{ width: \"150px\" }}>\r\n                        <span className=\"slotDetailsSmallBoldSpan\">\r\n                          {this.props.transportationType ===\r\n                          Constants.TransportationType.ROAD\r\n                            ? t(\"DriverInfo_Driver\")\r\n                            : t(\"ViewMarineShipmentList_Captain\")}{\" \"}\r\n                        </span>\r\n                        {\" : \"}\r\n                        <span className=\"slotDetailssmallSpan\">\r\n                          {this.props.transactionData.driver}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"slotModelSeparator\">\r\n                      {this.getProductAvaiabilityList().map((product) => {\r\n                        return (\r\n                          <div style={{ width: \"150px\" }}>\r\n                            <span\r\n                              className={\r\n                                product.isAvailable\r\n                                  ? \"icon-accept productAvailable\"\r\n                                  : \"icon-denied noProduct\"\r\n                              }\r\n                            ></span>\r\n                            <span className={\"slotDetailsSmallBoldSpan\"}>\r\n                              {product.code}\r\n                            </span>\r\n                            {\" : \"}\r\n                            <span className=\"slotDetailssmallSpan\">\r\n                              {product.quantity}\r\n                              {product.UOM}\r\n                            </span>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                {this.props.attributesList.length > 0\r\n                  ? this.props.attributesList.map((attribute) => (\r\n                      <ErrorBoundary>\r\n                        <Accordion>\r\n                          <Accordion.Content\r\n                            className=\"attributeAccordian\"\r\n                            title={t(\"Attributes_Header\")}\r\n                          >\r\n                            <AttributeDetails\r\n                              selectedAttributeList={\r\n                                attribute.attributeMetaDataList\r\n                              }\r\n                              handleCellDataEdit={\r\n                                this.props.onAttributeDataChange\r\n                              }\r\n                              attributeValidationErrors={\r\n                                this.props.attributeValidationErrors\r\n                              }\r\n                            ></AttributeDetails>\r\n                          </Accordion.Content>\r\n                        </Accordion>\r\n                      </ErrorBoundary>\r\n                    ))\r\n                  : \"\"}\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        );\r\n      }\r\n    } else {\r\n      return <LoadingPage loadingClass=\"nestedList\" message=\"\"></LoadingPage>;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal\r\n            closeIcon={true}\r\n            onClose={() => this.props.modelCloseEvent()}\r\n            open={this.props.modelOpen}\r\n            size=\"small\"\r\n            closeOnDimmerClick={false}\r\n            className=\"createSlotModal\"\r\n          >\r\n            <Modal.Header>\r\n              <div className=\"createSlotHeader\">\r\n                <span>{this.props.slotParameters.terminalCode}</span> -{\" \"}\r\n                <span>{this.props.transportationType}</span>\r\n              </div>\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n              <ErrorBoundary> {this.getModalContent()}</ErrorBoundary>\r\n            </Modal.Content>\r\n            <Modal.Footer className=\"createSlotModalFooter\">\r\n              <ErrorBoundary>\r\n                {(this.props.slotCreateFields.shipmentCode !== \"\" ||\r\n                  this.props.slotCreateFields.receiptCode !== \"\") &&\r\n                this.props.isRefreshing === false &&\r\n                this.props.transactionData.status === \"READY\" &&\r\n                this.props.slotInfo === null ? (\r\n                  <div style={{ width: \"100%\" }}>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"flex-end\",\r\n                      }}\r\n                    >\r\n                      <Button\r\n                        type=\"primary\"\r\n                        content={t(\"SlotBook_Book\")}\r\n                        onClick={() => this.props.onBook()}\r\n                      />\r\n                    </div>\r\n\r\n                    {Array.isArray(this.props.validationErrors) &&\r\n                    this.props.validationErrors.length > 0 ? (\r\n                      <div className=\"below-text\">\r\n                        <span className=\"ui error-message\">\r\n                          {t(this.props.validationErrors[0])}\r\n                        </span>\r\n                      </div>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </ErrorBoundary>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateSlotComposite;\r\nCreateSlotComposite.propTypes = {\r\n  modelOpen: PropTypes.bool.isRequired,\r\n  slotCreateFields: PropTypes.shape({\r\n    transactionType: PropTypes.string.isRequired,\r\n    slotTime: PropTypes.object.isRequired,\r\n    bayCode: PropTypes.string.isRequired,\r\n    slotDuration: PropTypes.number.isRequired,\r\n    slotSource: PropTypes.string.isRequired,\r\n    shareholder: PropTypes.string,\r\n    orderCode: PropTypes.string,\r\n    contractCode: PropTypes.string,\r\n    shipmentCode: PropTypes.string,\r\n    receiptCode: PropTypes.string,\r\n    remarks: PropTypes.string,\r\n  }).isRequired,\r\n  shareholders: PropTypes.array,\r\n  slotInfo: PropTypes.object,\r\n  slotCreateOptions: PropTypes.shape({\r\n    orders: PropTypes.array.isRequired,\r\n    filteredorders: PropTypes.array.isRequired,\r\n    contracts: PropTypes.array.isRequired,\r\n    filteredcontracts: PropTypes.array.isRequired,\r\n    shipments: PropTypes.array.isRequired,\r\n    filteredshipments: PropTypes.array.isRequired,\r\n    receipts: PropTypes.array.isRequired,\r\n    filteredreceipts: PropTypes.array.isRequired,\r\n  }).isRequired,\r\n  transactionData: PropTypes.shape({\r\n    products: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        code: PropTypes.string.isRequired,\r\n        quantity: PropTypes.number.isRequired,\r\n        UOM: PropTypes.string.isRequired,\r\n        shCode: PropTypes.string.isRequired,\r\n      })\r\n    ),\r\n    driver: PropTypes.string,\r\n    carrier: PropTypes.string.isRequired,\r\n    vehicle: PropTypes.string.isRequired,\r\n    status: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  isRefreshing: PropTypes.bool.isRequired,\r\n  transportationType: PropTypes.string.isRequired,\r\n  slotParameters: PropTypes.shape({\r\n    slotStartTime: PropTypes.object.isRequired, //LocalTerminalTime\r\n    slotEndTime: PropTypes.object.isRequired, //LocalTerminalTime\r\n    slotDuration: PropTypes.number.isRequired,\r\n    timeDifference: PropTypes.number.isRequired,\r\n    minSlotMinutesToBook: PropTypes.number.isRequired,\r\n    maxSlotDaysToBook: PropTypes.number.isRequired,\r\n    minSlotChangeMinutes: PropTypes.number.isRequired,\r\n    maxSlots: PropTypes.number.isRequired,\r\n    terminalCode: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  bayList: PropTypes.array.isRequired,\r\n  validationErrors: PropTypes.array.isRequired,\r\n  attributesList: PropTypes.array.isRequired,\r\n  attributeValidationErrors: PropTypes.object.isRequired,\r\n  transactionType: PropTypes.string,\r\n  modelCloseEvent: PropTypes.func.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  onSearchChange: PropTypes.func.isRequired,\r\n  onBook: PropTypes.func.isRequired,\r\n  onAttributeDataChange: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Select,\r\n  DatePicker,\r\n  Input,\r\n  Accordion,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../../JS/functionalUtilities\";\r\nimport dayjs from \"dayjs\";\r\nimport { LoadingPage } from \"../../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport ErrorBoundary from \"../../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport { AttributeDetails } from \"../../../UIBase/Details/AttributeDetails\";\r\n\r\nclass ModifySlotComposite extends Component {\r\n  state = {};\r\n  getSlotTimings() {\r\n    let options = [];\r\n    try {\r\n      let slotParams = this.props.slotParameters;\r\n      let dayStartTime = slotParams.slotStartTime;\r\n      let dayEndTime = slotParams.slotEndTime;\r\n      let slotDuration = slotParams.slotDuration;\r\n      let tempStartTime = dayStartTime;\r\n      while (tempStartTime.isBefore(dayEndTime)) {\r\n        options.push({\r\n          text: tempStartTime.format(\"HH:mm\"),\r\n          value: tempStartTime.format(\"HH:mm\"),\r\n        });\r\n        tempStartTime = tempStartTime.add(slotDuration, \"minute\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ModifySlotComposite-> error in getSlotTimings\", error);\r\n    }\r\n    return options;\r\n  }\r\n  getDurations() {\r\n    // debugger;\r\n    let options = [];\r\n    try {\r\n      let slotParams = this.props.slotParameters;\r\n      let maxSlots = slotParams.maxSlots;\r\n      let slotDuration = slotParams.slotDuration;\r\n      for (let i = 1; i <= maxSlots; i++) {\r\n        options.push({\r\n          text: i * slotDuration,\r\n          value: (i * slotDuration).toString(),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ModifySlotComposite-> error in getDurations\", error);\r\n    }\r\n    return options;\r\n  }\r\n  getProductAvaiabilityList() {\r\n    let productsList = []; ////{Code,Quantity,UOM,shCode,isAvailable}\r\n    try {\r\n      let bayProducts = []; //[shCode:Sh1,fpCodes:[]]\r\n      let filteredBays = this.props.bayList.filter(\r\n        (bay) => bay.bayCode === this.props.slotModifyFields.bayCode\r\n      );\r\n      if (filteredBays.length > 0) {\r\n        bayProducts = filteredBays[0].shareholder;\r\n      }\r\n      productsList = lodash.cloneDeep(this.props.transactionData.products);\r\n      productsList.forEach((product) => {\r\n        product[\"isAvailable\"] = false;\r\n        bayProducts.forEach((shProd) => {\r\n          if (shProd.shCode === product.shCode) {\r\n            shProd.fpCodes.forEach((fp) => {\r\n              if (fp === product.code) {\r\n                product[\"isAvailable\"] = true;\r\n              }\r\n            });\r\n          }\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"ModifySlotComposite-> error in getProductAvaiabilityList\",\r\n        error\r\n      );\r\n    }\r\n    return productsList;\r\n  }\r\n  getFilteredBays() {\r\n    //debugger;\r\n    let options = [];\r\n    try {\r\n      let allBays = this.props.bayList; //[{bayCode:\"\",active: true, bayType: \"LOADING\",shareholder:[shCode:Sh1,fpCodes:[]]}]\r\n      let transactionProducts = []; //[{Code,Quantity,UOM,shCode}]\r\n      if (this.props.transactionData !== null) {\r\n        transactionProducts = this.props.transactionData.products;\r\n      }\r\n      let activeBays = allBays.filter((bay) => bay.active === true);\r\n      let filteredBays = activeBays.filter((bay) => {\r\n        let shareholderMatchedArray = bay.shareholder.filter(\r\n          (sh) =>\r\n            transactionProducts.filter(\r\n              (tpProduct) =>\r\n                tpProduct.shCode === sh.shCode &&\r\n                sh.fpCodes.filter((fp) => fp === tpProduct.code).length > 0\r\n            ).length > 0\r\n        );\r\n        return shareholderMatchedArray.length > 0;\r\n      });\r\n      filteredBays.forEach((bay) => {\r\n        options.push({ text: bay.bayCode, value: bay.bayCode });\r\n      });\r\n    } catch (error) {\r\n      console.log(\"ModifySlotComposite-> error in getFilteredBays\", error);\r\n    }\r\n    return options;\r\n  }\r\n  getModalContent() {\r\n    //debugger;\r\n    let slotModifyFields = this.props.slotModifyFields;\r\n    let slotParameters = this.props.slotParameters;\r\n    let slotInfo = this.props.slotInfo;\r\n\r\n    if (!this.props.isRefreshing) {\r\n      if (this.props.resultStatus.modify) {\r\n        return (\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <div className=\"slotBookSuccess\">\r\n                <div>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {t(\"Slot_Modify_Success\")}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"slotDetailssmallSpan\">\r\n                    {t(\"Slot_ReferenceNum\")} :{\" \"}\r\n                  </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {slotInfo.ReferenceNumber}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"slotDetailssmallSpan\">\r\n                    {t(\"ViewShipmentTrailerStatus_Time\")} :{\" \"}\r\n                  </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {dayjs(slotInfo.StartTime)\r\n                      .add(-1 * slotParameters.timeDifference, \"minute\")\r\n                      .format(\"DD-MMM-YYYY HH:mm\")}\r\n                  </span>\r\n                  <span className=\"slotDetailssmallSpan\"> {t(\"To\")} </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {dayjs(slotInfo.EndTime)\r\n                      .add(-1 * slotParameters.timeDifference, \"minute\")\r\n                      .format(\r\n                        slotInfo.TransportationType ===\r\n                          Constants.TransportationType.ROAD\r\n                          ? \"HH:mm\"\r\n                          : \"DD-MMM-YYYY HH:mm\"\r\n                      )}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"slotDetailssmallSpan\">\r\n                    {slotInfo.TransportationType ===\r\n                    Constants.TransportationType.ROAD\r\n                      ? t(\"BayGroupList_BayCode\")\r\n                      : t(\"LocationInfo_BerthCode\")}{\" \"}\r\n                    :{\" \"}\r\n                  </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {slotInfo.LocationCode}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"slotDetailssmallSpan\">\r\n                    {slotInfo.TransactionType.toString() ===\r\n                    Constants.slotSource.SHIPMENT\r\n                      ? t(\"Report_ShipmentCode\")\r\n                      : t(\"Receipt_Code\")}{\" \"}\r\n                    :{\" \"}\r\n                  </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {slotInfo.TransactionCode}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        );\r\n      } else if (this.props.resultStatus.cancel) {\r\n        return (\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <div className=\"slotBookSuccess\">\r\n                <div>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {t(\"Slot_Cancel_Success\")}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"slotDetailssmallSpan\">\r\n                    {t(\"Slot_ReferenceNum\")} :{\" \"}\r\n                  </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {slotInfo.ReferenceNumber}\r\n                  </span>\r\n                </div>\r\n\r\n                <div>\r\n                  <span className=\"slotDetailssmallSpan\">\r\n                    {slotInfo.TransportationType ===\r\n                    Constants.TransportationType.ROAD\r\n                      ? t(\"BayGroupList_BayCode\")\r\n                      : t(\"LocationInfo_BerthCode\")}{\" \"}\r\n                    :{\" \"}\r\n                  </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {slotInfo.LocationCode}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"slotDetailssmallSpan\">\r\n                    {slotInfo.TransactionType.toString() ===\r\n                    Constants.slotSource.SHIPMENT\r\n                      ? t(\"Report_ShipmentCode\")\r\n                      : t(\"Receipt_Code\")}{\" \"}\r\n                    :{\" \"}\r\n                  </span>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {slotInfo.TransactionCode}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        );\r\n      }\r\n      let disabled = dayjs()\r\n        .add(slotParameters.minSlotChangeMinutes, \"minute\")\r\n        .isBefore(dayjs(slotInfo.StartTime))\r\n        ? false\r\n        : true;\r\n      return (\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <div className=\"slotCreateDiv \">\r\n              <div className=\"row\">\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                  <DatePicker\r\n                    fluid\r\n                    value={slotModifyFields.slotTime.toDate()}\r\n                    displayFormat={getCurrentDateFormat()}\r\n                    label={t(\"Report_Date\")}\r\n                    showYearSelector=\"true\"\r\n                    onChange={(data) => this.props.onChange(data, \"Date\")}\r\n                    onTextChange={(value, error) => {\r\n                      this.props.onChange(value, \"Date\");\r\n                    }}\r\n                    disabled={disabled}\r\n                    reserveSpace={false}\r\n                  />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                  <Select\r\n                    fluid\r\n                    label={t(\"StartTime\")}\r\n                    value={slotModifyFields.slotTime.format(\"HH:mm\")}\r\n                    options={this.getSlotTimings()}\r\n                    onChange={(data) => {\r\n                      this.props.onChange(data, \"Time\");\r\n                    }}\r\n                    reserveSpace={false}\r\n                    // error={this.errors}\r\n                    disabled={disabled}\r\n                  />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                  <Select\r\n                    fluid\r\n                    label={t(\"SlotDuration\")}\r\n                    value={slotModifyFields.slotDuration}\r\n                    options={this.getDurations()}\r\n                    reserveSpace={false}\r\n                    onChange={(data) => {\r\n                      this.props.onChange(data, \"slotDuration\");\r\n                    }}\r\n                    disabled={disabled}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-12 col-md-12 col-lg-6\">\r\n                  <Select\r\n                    fluid\r\n                    label={\r\n                      slotInfo.TransportationType ===\r\n                      Constants.TransportationType.ROAD\r\n                        ? t(\"BayGroupList_BayCode\")\r\n                        : t(\"LocationInfo_BerthCode\")\r\n                    }\r\n                    value={slotModifyFields.bayCode}\r\n                    options={this.getFilteredBays()}\r\n                    onChange={(data) => {\r\n                      this.props.onChange(data, \"bayCode\");\r\n                    }}\r\n                    reserveSpace={false}\r\n                    disabled={disabled}\r\n                  />\r\n                </div>\r\n                <div className=\"col-12 col-md-12 col-lg-6\">\r\n                  <Input\r\n                    fluid\r\n                    value={this.props.slotModifyFields.remarks}\r\n                    onChange={(data) => this.props.onChange(data, \"remarks\")}\r\n                    label={t(\"DriverInfo_Remarks\")}\r\n                    reserveSpace={false}\r\n                    disabled={disabled}\r\n                    indicator=\"required\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              {this.props.transactionData !== null ? (\r\n                <div>\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"space-evenly\",\r\n                    }}\r\n                  >\r\n                    <div>\r\n                      <span className=\"icon-accept productAvailable\"></span>\r\n                      <span className=\"slotDetailssmallSpan\">\r\n                        {t(\"Product_Available\")}\r\n                      </span>\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"icon-denied noProduct\"></span>\r\n                      <span className=\"slotDetailssmallSpan\">\r\n                        {t(\"Product_not_available\")}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"slotModelSeparator\">\r\n                    <div style={{ width: \"150px\" }}>\r\n                      <span className=\"slotDetailsSmallBoldSpan\">\r\n                        {t(\"productAllocation_Carrier\")}\r\n                      </span>\r\n                      {\" : \"}\r\n                      <span className=\"slotDetailssmallSpan\">\r\n                        {this.props.transactionData.carrier}\r\n                      </span>\r\n                    </div>\r\n                    <div style={{ width: \"150px\" }}>\r\n                      <span className=\"slotDetailsSmallBoldSpan\">\r\n                        {slotInfo.TransportationType ===\r\n                        Constants.TransportationType.ROAD\r\n                          ? t(\"ViewShipment_Vehicle\")\r\n                          : t(\"MarineShipmentList_Vessel\")}\r\n                      </span>\r\n                      {\" : \"}\r\n                      <span className=\"slotDetailssmallSpan\">\r\n                        {this.props.transactionData.vehicle}\r\n                      </span>\r\n                    </div>\r\n                    <div style={{ width: \"150px\" }}>\r\n                      <span className=\"slotDetailsSmallBoldSpan\">\r\n                        {slotInfo.TransportationType ===\r\n                        Constants.TransportationType.ROAD\r\n                          ? t(\"DriverInfo_Driver\")\r\n                          : t(\"ViewMarineShipmentList_Captain\")}\r\n                      </span>\r\n                      {\" : \"}\r\n                      <span className=\"slotDetailssmallSpan\">\r\n                        {this.props.transactionData.driver}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"slotModelSeparator\">\r\n                    {this.getProductAvaiabilityList().map((product) => {\r\n                      return (\r\n                        <div style={{ width: \"150px\" }}>\r\n                          <span\r\n                            className={\r\n                              product.isAvailable\r\n                                ? \"icon-accept productAvailable\"\r\n                                : \"icon-denied noProduct\"\r\n                            }\r\n                          ></span>\r\n                          <span className={\"slotDetailsSmallBoldSpan\"}>\r\n                            {product.code}\r\n                          </span>\r\n                          {\" : \"}\r\n                          <span className=\"slotDetailssmallSpan\">\r\n                            {product.quantity}\r\n                            {product.UOM}\r\n                          </span>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              {this.props.attributesList.length > 0\r\n                ? this.props.attributesList.map((attribute) => (\r\n                    <ErrorBoundary>\r\n                      <Accordion>\r\n                        <Accordion.Content\r\n                          className=\"attributeAccordian\"\r\n                          title={t(\"Attributes_Header\")}\r\n                        >\r\n                          <AttributeDetails\r\n                            selectedAttributeList={\r\n                              attribute.attributeMetaDataList\r\n                            }\r\n                            handleCellDataEdit={\r\n                              this.props.onAttributeDataChange\r\n                            }\r\n                            attributeValidationErrors={\r\n                              this.props.attributeValidationErrors\r\n                            }\r\n                          ></AttributeDetails>\r\n                        </Accordion.Content>\r\n                      </Accordion>\r\n                    </ErrorBoundary>\r\n                  ))\r\n                : \"\"}\r\n            </div>\r\n          )}\r\n        </TranslationConsumer>\r\n      );\r\n    } else {\r\n      return <LoadingPage loadingClass=\"nestedList\" message=\"\"></LoadingPage>;\r\n    }\r\n  }\r\n  render() {\r\n    let slotInfo = this.props.slotInfo;\r\n    let disabled = false;\r\n    if (slotInfo !== null && this.props.isRefreshing === false) {\r\n      disabled = dayjs()\r\n        .add(this.props.slotParameters.minSlotChangeMinutes, \"minute\")\r\n        .isBefore(dayjs(slotInfo.StartTime))\r\n        ? false\r\n        : true;\r\n    }\r\n    // if (slotInfo !== null) console.log(slotInfo);\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal\r\n            closeIcon={true}\r\n            onClose={() => this.props.modelCloseEvent()}\r\n            open={this.props.modelOpen}\r\n            size=\"small\"\r\n            closeOnDimmerClick={false}\r\n            className=\"createSlotModal\"\r\n          >\r\n            <Modal.Header>\r\n              {slotInfo === null ? (\r\n                \"\"\r\n              ) : (\r\n                <div className=\"createSlotHeader\">\r\n                  <span>{slotInfo.TransactionCode}</span>\r\n                  {slotInfo.TransportationType ===\r\n                  Constants.TransportationType.ROAD\r\n                    ? \" - \" + slotInfo.ShareholderCode\r\n                    : \"\"}\r\n                </div>\r\n              )}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n              <ErrorBoundary>{this.getModalContent()}</ErrorBoundary>\r\n            </Modal.Content>\r\n            <Modal.Footer className=\"modifySlotModalFooter\">\r\n              <ErrorBoundary>\r\n                {slotInfo !== null &&\r\n                this.props.isRefreshing === false &&\r\n                disabled === false &&\r\n                this.props.transactionData.status === \"READY\" &&\r\n                this.props.resultStatus.modify === false &&\r\n                this.props.resultStatus.cancel === false ? (\r\n                  <div style={{ width: \"100%\" }}>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"flex-end\",\r\n                      }}\r\n                    >\r\n                      {this.props.modifyAccess ? (\r\n                        <Button\r\n                          type=\"primary\"\r\n                          content={t(\"UOM_Update\")}\r\n                          onClick={() => this.props.onModify()}\r\n                        />\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {this.props.cancelAccess ? (\r\n                        <Button\r\n                          type=\"primary\"\r\n                          content={t(\"SlotBook_Cancel\")}\r\n                          className=\"cancelButton\"\r\n                          onClick={() => this.props.onCancel()}\r\n                        />\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n\r\n                    {Array.isArray(this.props.validationErrors) &&\r\n                    this.props.validationErrors.length > 0 ? (\r\n                      <div className=\"below-text\">\r\n                        {\" \"}\r\n                        <span className=\"ui error-message\">\r\n                          {t(this.props.validationErrors[0])}\r\n                        </span>{\" \"}\r\n                      </div>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </ErrorBoundary>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModifySlotComposite;\r\nModifySlotComposite.propTypes = {\r\n  modelOpen: PropTypes.bool.isRequired,\r\n  isRefreshing: PropTypes.bool.isRequired,\r\n  slotModifyFields: PropTypes.shape({\r\n    slotTime: PropTypes.object.isRequired,\r\n    bayCode: PropTypes.string.isRequired,\r\n    slotDuration: PropTypes.number.isRequired,\r\n    transactionCode: PropTypes.string,\r\n    remarks: PropTypes.string,\r\n  }).isRequired,\r\n  slotInfo: PropTypes.object,\r\n\r\n  transactionData: PropTypes.shape({\r\n    products: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        code: PropTypes.string.isRequired,\r\n        quantity: PropTypes.number.isRequired,\r\n        UOM: PropTypes.string.isRequired,\r\n        shCode: PropTypes.string.isRequired,\r\n      })\r\n    ),\r\n    driver: PropTypes.string,\r\n    carrier: PropTypes.string.isRequired,\r\n    vehicle: PropTypes.string.isRequired,\r\n    status: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  slotParameters: PropTypes.shape({\r\n    slotStartTime: PropTypes.object.isRequired, //LocalTerminalTime\r\n    slotEndTime: PropTypes.object.isRequired, //LocalTerminalTime\r\n    slotDuration: PropTypes.number.isRequired,\r\n    timeDifference: PropTypes.number.isRequired,\r\n    minSlotMinutesToBook: PropTypes.number.isRequired,\r\n    maxSlotDaysToBook: PropTypes.number.isRequired,\r\n    minSlotChangeMinutes: PropTypes.number.isRequired,\r\n    maxSlots: PropTypes.number.isRequired,\r\n    terminalCode: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  modifyAccess: PropTypes.bool.isRequired,\r\n  cancelAccess: PropTypes.bool.isRequired,\r\n  bayList: PropTypes.array.isRequired,\r\n  validationErrors: PropTypes.array.isRequired,\r\n  attributesList: PropTypes.array.isRequired,\r\n  attributeValidationErrors: PropTypes.object.isRequired,\r\n  resultStatus: PropTypes.shape({\r\n    modify: PropTypes.bool.isRequired,\r\n    cancel: PropTypes.bool.isRequired,\r\n  }).isRequired,\r\n  modelCloseEvent: PropTypes.func.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  onModify: PropTypes.func.isRequired,\r\n  onCancel: PropTypes.func.isRequired,\r\n  onAttributeDataChange: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  Select,\r\n  Tab,\r\n  Popup,\r\n  Card,\r\n  Pagination,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport dayjs from \"dayjs\";\r\nimport * as dayJSBetween from \"dayjs/plugin/isBetween\";\r\nimport axios from \"axios\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { connect } from \"react-redux\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  functionGroups,\r\n  fnSlotInformation, \r\n} from \"../../../JS/FunctionGroups\";\r\n//import * as utc from \"dayjs/plugin/utc\";\r\nimport lodash from \"lodash\";\r\nimport CreateSlotComposite from \"../Common/SlotBook/CreateSlotComposite\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport ModifySlotComposite from \"../Common/SlotBook/ModifySlotComposite\";\r\nimport {\r\n  kpiSlotDetailsShipmentList,\r\n  kpiSlotDetailsReceiptList,\r\n} from \"../../../JS/KPIPageName\";\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nconst pageSize = 5;\r\n//let tabIndex = [Constants.slotSource.SHIPMENT, Constants.slotSource.RECEIPT];\r\nclass SlotDetailsComposite extends Component {\r\n  refreshTimer = null;\r\n\r\n  state = {\r\n    slotRangeList: [],\r\n    selectedSlotRange: {\r\n      slNo: 1,\r\n      fromLTTime: dayjs(),\r\n      fromCurrentTime: dayjs(),\r\n      toLTTime: dayjs(),\r\n      toCurrentTime: dayjs(),\r\n    },\r\n    slotParameters: {\r\n      slotStartTime: dayjs(), //LocalTerminalTime\r\n      slotEndTime: dayjs(), //LocalTerminalTime\r\n      slotDuration: 30,\r\n      timeDifference: 0,\r\n      minSlotMinutesToBook: 30,\r\n      maxSlotDaysToBook: 7,\r\n      minSlotChangeMinutes: 90,\r\n      maxSlots: 1,\r\n      refreshTime: 5,\r\n      terminalCode: this.props.terminal.Key.Code,\r\n    },\r\n    bayList: [], //[{bayCode:\"\",    active: true, bayType: \"LOADING\",shareholder:[shCode:Sh1,fpCodes:[]]}]\r\n    shipmentSlotsList: [],\r\n    receiptSlotsList: [],\r\n    selectedDate: this.props.selectedDate,\r\n    isShipmentsRefreshing: true,\r\n    isReceiptsRefreshing: true,\r\n    isCreateSlotOpen: false,\r\n    modalSlotCreateFields: {\r\n      transactionType: \"\",\r\n      slotTime: dayjs(),\r\n      bayCode: \"\",\r\n      slotDuration: 0,\r\n      slotSource: \"\",\r\n      shareholder: \"\",\r\n      orderCode: \"\",\r\n      contractCode: \"\",\r\n      shipmentCode: \"\",\r\n      receiptCode: \"\",\r\n      remarks: \"\",\r\n      attributes: [],\r\n    },\r\n    modalSlotCreateList: {\r\n      orders: [],\r\n      filteredorders: [],\r\n      contracts: [],\r\n      filteredcontracts: [],\r\n      shipments: [],\r\n      filteredshipments: [],\r\n      receipts: [],\r\n      filteredreceipts: [],\r\n    },\r\n    isCreateModalrefreshing: true,\r\n    modalTransactionData: {\r\n      products: [], //{code,quantity,UOM,shCode}\r\n      driver: \"\",\r\n      carrier: \"\",\r\n      vehicle: \"\",\r\n      status: \"\",\r\n    },\r\n    modalValidationErrors: [],\r\n    modelResultStatus: { modify: false, cancel: false },\r\n    isModifySlotOpen: false,\r\n    isModifyModalrefreshing: true,\r\n    modalSlotModifyFields: {\r\n      // transactionType: \"\",\r\n      slotTime: dayjs(),\r\n      bayCode: \"\",\r\n      slotDuration: 0,\r\n      remarks: \"\",\r\n      shareholder: \"\",\r\n      transactionCode: \"\",\r\n      attributes: [],\r\n    },\r\n\r\n    selectedSlotInfo: null,\r\n    kpiList: {},\r\n    shipmentPageIndex: 1,\r\n    receiptPageIndex: 1,\r\n    filteredShipmentBayCode: \"-1\",\r\n    filteredReceiptBayCode: \"-1\",\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    //currentTabIndex: 0,\r\n    showBookSlotAuthenticationLayout: false,\r\n    showUpdateSlotAuthenticationLayout: false,\r\n    showCancelSlotAuthenticationLayout: false,\r\n\r\n    tempSlotInfo: {},\r\n  };\r\n  componentWillUnmount() {\r\n    this.stopRefreshTimer();\r\n  }\r\n  startRefreshTimer = () => {\r\n    this.refreshTimer = setInterval(() => {\r\n      // console.log(\r\n      //   \" Details Refreshing started \" +\r\n      //     this.state.slotParameters.refreshTime +\r\n      //     dayjs().toDate().toString()\r\n      // ); //TODO:Remove after testing\r\n      if (this.props.operationsVisibilty.shipments) {\r\n        this.getSlotsList(Constants.slotSource.SHIPMENT);\r\n        this.getKPIList(Constants.slotSource.SHIPMENT);\r\n      }\r\n      if (this.props.operationsVisibilty.receipts) {\r\n        this.getSlotsList(Constants.slotSource.RECEIPT);\r\n        this.getKPIList(Constants.slotSource.RECEIPT);\r\n      }\r\n    }, this.state.slotParameters.refreshTime * 60 * 1000);\r\n  };\r\n  stopRefreshTimer = () => {\r\n    if (this.refreshTimer !== null) {\r\n      clearInterval(this.refreshTimer);\r\n      // console.log(\r\n      //   \" Details Refreshing started \" +\r\n      //     this.state.slotParameters.refreshTime +\r\n      //     dayjs().toDate().toString()\r\n      // ); //TODO:Remove after testing\r\n    }\r\n  };\r\n  getConfigurationsAndSlotsList() {\r\n    //debugger;\r\n    try {\r\n      let arrTimeRange = []; //{slNo,fromLTTime,fromCurrentTime,ToLTTime,ToCurrentTime}\r\n      let terminalTimeZone = this.props.terminal.Key.TimeZone;\r\n      let selectedConfigurations = this.props.slotConfigurations.filter(\r\n        (sc) => sc.TerminalCode === this.props.terminal.Key.Code\r\n      );\r\n      let currentDate = new Date();\r\n      let currentTimeZone = currentDate.getTimezoneOffset() * -1;\r\n      let timeDifference = currentTimeZone - terminalTimeZone;\r\n      let slotStartTime = this.state.selectedDate;\r\n      let slotEndTime = this.state.selectedDate;\r\n      let startTime = \"00:00\";\r\n      let endTime = \"23:59\";\r\n      let slotDuration = \"30\";\r\n      let maxNoOfSlots = 1;\r\n      let minSlotMinutesToBook = 30;\r\n      let maxSlotDaysToBook = 7;\r\n      let minSlotChangeMinutes = 90;\r\n      let refreshTime = 5;\r\n      if (selectedConfigurations.length > 0) {\r\n        let operationalParams = selectedConfigurations[0].SlotParams.filter(\r\n          (sp) => sp.Name === \"SlotStartTime\"\r\n        );\r\n        if (operationalParams.length > 0) {\r\n          startTime = operationalParams[0].Value;\r\n        }\r\n        operationalParams = selectedConfigurations[0].SlotParams.filter(\r\n          (sp) => sp.Name === \"SlotEndTime\"\r\n        );\r\n        if (operationalParams.length > 0) {\r\n          endTime = operationalParams[0].Value;\r\n        }\r\n        operationalParams = selectedConfigurations[0].SlotParams.filter(\r\n          (sp) => sp.Name === \"SlotDuration\"\r\n        );\r\n        if (operationalParams.length > 0) {\r\n          slotDuration = operationalParams[0].Value;\r\n        }\r\n        operationalParams = selectedConfigurations[0].SlotParams.filter(\r\n          (sp) => sp.Name === \"MaxNoOfSlots\"\r\n        );\r\n        if (operationalParams.length > 0) {\r\n          maxNoOfSlots = operationalParams[0].Value;\r\n        }\r\n        operationalParams = selectedConfigurations[0].SlotParams.filter(\r\n          (sp) => sp.Name === \"AdvanceSlotBookMaxDays\"\r\n        );\r\n        if (operationalParams.length > 0) {\r\n          maxSlotDaysToBook = operationalParams[0].Value;\r\n        }\r\n        operationalParams = selectedConfigurations[0].SlotParams.filter(\r\n          (sp) => sp.Name === \"BookAdvSlotMinutes\"\r\n        );\r\n        if (operationalParams.length > 0) {\r\n          minSlotMinutesToBook = operationalParams[0].Value;\r\n        }\r\n        operationalParams = selectedConfigurations[0].SlotParams.filter(\r\n          (sp) => sp.Name === \"ChangeAdvSlotMinutes\"\r\n        );\r\n        if (operationalParams.length > 0) {\r\n          minSlotChangeMinutes = operationalParams[0].Value;\r\n        }\r\n        operationalParams = selectedConfigurations[0].SlotParams.filter(\r\n          (sp) => sp.Name === \"RefreshInterval\"\r\n        );\r\n        if (operationalParams.length > 0) {\r\n          refreshTime = operationalParams[0].Value;\r\n        }\r\n      }\r\n      slotStartTime = slotStartTime\r\n        .set(\"hour\", startTime.split(\":\")[0])\r\n        .set(\"minute\", startTime.split(\":\")[1]);\r\n      slotEndTime = slotEndTime\r\n        .set(\"hour\", endTime.split(\":\")[0])\r\n        .set(\"minute\", endTime.split(\":\")[1]);\r\n      //if (slotEndTime.isBefore(slotStartTime)) {\r\n      if (slotStartTime.diff(slotEndTime, \"minute\") >= 0) {\r\n        slotEndTime = slotEndTime.add(1, \"day\");\r\n      }\r\n      let tempslotStartTime = lodash.cloneDeep(slotStartTime);\r\n      let tempslotEndTime = tempslotStartTime.add(7 * slotDuration, \"minute\");\r\n      let tmpSlNo = 1;\r\n      //while (slotEndTime.diff(tempslotStartTime, \"minute\") > slotDuration) {\r\n      while (slotEndTime.diff(tempslotEndTime, \"minute\") >= 0) {\r\n        arrTimeRange.push({\r\n          slNo: tmpSlNo,\r\n          fromLTTime: tempslotStartTime,\r\n          fromCurrentTime: tempslotStartTime.add(timeDifference, \"minute\"),\r\n          toLTTime: tempslotEndTime, //tempslotStartTime.add(7 * slotDuration, \"minute\"),\r\n          toCurrentTime: tempslotEndTime\r\n            //.add(7 * slotDuration, \"minute\")\r\n            .add(timeDifference, \"minute\"),\r\n        }); //{slNo,fromLTTime,fromCurrentTime,ToLTTime,ToCurrentTime}\r\n\r\n        tempslotStartTime = tempslotStartTime.add(slotDuration, \"minute\");\r\n        tempslotEndTime = tempslotEndTime.add(slotDuration, \"minute\");\r\n        tmpSlNo += 1;\r\n      }\r\n      let slotParameters = {\r\n        slotStartTime: slotStartTime,\r\n        slotEndTime: slotEndTime,\r\n        slotDuration: slotDuration,\r\n        timeDifference: timeDifference,\r\n        terminalCode: this.props.terminal.Key.Code,\r\n        maxSlots: maxNoOfSlots,\r\n        minSlotChangeMinutes: minSlotChangeMinutes,\r\n        minSlotMinutesToBook: minSlotMinutesToBook,\r\n        maxSlotDaysToBook: maxSlotDaysToBook,\r\n        refreshTime: refreshTime,\r\n      };\r\n      let currentDayjs = dayjs();\r\n      let selectedSlotRanges = arrTimeRange.filter(\r\n        (tr) =>\r\n          tr.fromCurrentTime.diff(currentDayjs, \"minute\") > slotDuration * -1\r\n      );\r\n      let selectedSlotRange = arrTimeRange[0];\r\n      if (selectedSlotRanges.length > 0)\r\n        selectedSlotRange = selectedSlotRanges[0];\r\n      else if (\r\n        currentDayjs.isBefore(\r\n          arrTimeRange[arrTimeRange.length - 1].toCurrentTime\r\n        )\r\n      )\r\n        selectedSlotRange = arrTimeRange[arrTimeRange.length - 1];\r\n\r\n      this.setState(\r\n        {\r\n          slotRangeList: arrTimeRange,\r\n          selectedSlotRange,\r\n          slotParameters,\r\n        },\r\n        () => {\r\n          if (this.props.operationsVisibilty.shipments) {\r\n            this.getSlotsList(Constants.slotSource.SHIPMENT);\r\n            this.getKPIList(Constants.slotSource.SHIPMENT);\r\n          }\r\n          if (this.props.operationsVisibilty.receipts) {\r\n            this.getSlotsList(Constants.slotSource.RECEIPT);\r\n            this.getKPIList(Constants.slotSource.RECEIPT);\r\n          }\r\n          this.startRefreshTimer();\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\"error in getConfigurationsAndSlotsList\", error);\r\n    }\r\n    //return arrTimeRange; //.slice(0, 7);\r\n  }\r\n\r\n  getKPIList(transactionType) {\r\n    var notification = {\r\n      message: \"\",\r\n      messageType: \"critical\",\r\n      messageResultDetails: [], //{keyFields: [\"DriverInfo_Code\"],\r\n      //keyValues: [this.state.modDriver.Code],\r\n      //isSuccess: false,\r\n      //errorMessage: \"\",}\r\n    };\r\n    let objKPIRequestData = {\r\n      PageName:\r\n        transactionType === Constants.slotSource.SHIPMENT\r\n          ? kpiSlotDetailsShipmentList\r\n          : kpiSlotDetailsReceiptList,\r\n      TransportationType: this.props.transportationType,\r\n      InputParameters: [\r\n        { key: \"TerminalCode\", value: this.state.slotParameters.terminalCode },\r\n        { key: \"Date\", value: this.state.selectedDate.format(\"YYYY-MM-DD\") },\r\n        { key: \"TransactionType\", value: transactionType },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.GetKPI,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        objKPIRequestData,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        //console.log(result);\r\n        if (result.IsSuccess === true) {\r\n          let kpiList = lodash.cloneDeep(this.state.kpiList);\r\n          kpiList[transactionType] = result.EntityResult.ListKPIDetails;\r\n          this.setState({ kpiList });\r\n          // let errorKPIs = result.EntityResult.ListKPIDetails.filter(\r\n          //   (kpi) => kpi.resultData.IsSuccess === false\r\n          // );\r\n          // errorKPIs.forEach((kpi) =>\r\n          //   notification.messageResultDetails.push({\r\n          //     keyFields: [\"kpi_\" + kpi.KPIName], //TODO:Localize\r\n          //     keyValues: [\"\"], //TODO:Localize\r\n          //     isSuccess: false,\r\n          //     errorMessage: kpi.resultData.ErrorList[0].ErrorMessage,\r\n          //   })\r\n          // );\r\n        } else {\r\n          this.setState({ driverKPIList: [] });\r\n          console.log(\"Error in slot details KPIList:\", result.ErrorList);\r\n          notification.messageResultDetails.push({\r\n            keyFields: [],\r\n            keyValues: [],\r\n            isSuccess: false,\r\n            errorMessage: result.ErrorList[0],\r\n          });\r\n        }\r\n        if (notification.messageResultDetails.length > 0) {\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting SlotDetails KPIList:\", error);\r\n      });\r\n  }\r\n\r\n  getSlotsList(transactionType) {\r\n    let slotParams = this.state.slotParameters;\r\n    let slotRequestInfo = {\r\n      TerminalCode: slotParams.terminalCode,\r\n      TransportationType: this.props.transportationType,\r\n      TransactionSource: transactionType,\r\n      FromDate: slotParams.slotStartTime\r\n        .add(slotParams.timeDifference, \"minute\")\r\n        .toDate(),\r\n      ToDate: slotParams.slotEndTime\r\n        .add(slotParams.timeDifference, \"minute\")\r\n        .toDate(),\r\n    };\r\n    axios(\r\n      RestAPIs.GetSlotsList,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        slotRequestInfo,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        //debugger;\r\n        //console.log(response);\r\n\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (Array.isArray(result.EntityResult)) {\r\n            // console.log(\"shipmentsSummary\", result.EntityResult.Table);\r\n            if (\r\n              slotRequestInfo.TransactionSource ===\r\n              Constants.slotSource.SHIPMENT\r\n            ) {\r\n              this.setState({\r\n                shipmentSlotsList: result.EntityResult,\r\n                isShipmentsRefreshing: false,\r\n              });\r\n            } else {\r\n              this.setState({\r\n                receiptSlotsList: result.EntityResult,\r\n                isReceiptsRefreshing: false,\r\n              });\r\n            }\r\n          } else {\r\n            if (\r\n              slotRequestInfo.TransactionSource ===\r\n              Constants.slotSource.SHIPMENT\r\n            ) {\r\n              this.setState({ isShipmentsRefreshing: false });\r\n            } else {\r\n              this.setState({ isReceiptsRefreshing: false });\r\n            }\r\n\r\n            console.log(\"Error while getting getSlotList:\", result);\r\n          }\r\n        } else {\r\n          if (\r\n            slotRequestInfo.TransactionSource === Constants.slotSource.SHIPMENT\r\n          ) {\r\n            this.setState({ isShipmentsRefreshing: false });\r\n          } else {\r\n            this.setState({ isReceiptsRefreshing: false });\r\n          }\r\n\r\n          console.log(\"Error while getting getSlotList:\", result);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (\r\n          slotRequestInfo.TransactionSource === Constants.slotSource.SHIPMENT\r\n        ) {\r\n          this.setState({ isShipmentsRefreshing: false });\r\n        } else {\r\n          this.setState({ isReceiptsRefreshing: false });\r\n        }\r\n\r\n        console.log(\"Error while getting getSlotList:\", error);\r\n      });\r\n  }\r\n\r\n  handleDateChanage = (duration) => {\r\n    try {\r\n      let selectedDate = this.state.selectedDate;\r\n      selectedDate = selectedDate.add(duration, \"day\");\r\n      this.setState(\r\n        {\r\n          selectedDate,\r\n          isShipmentsRefreshing: true,\r\n          isReceiptsRefreshing: true,\r\n        },\r\n        () => this.getConfigurationsAndSlotsList()\r\n      );\r\n      this.props.onDateChange(\"day\", duration);\r\n    } catch (error) {\r\n      console.log(\"error in handleDateChanage\", error);\r\n    }\r\n  };\r\n\r\n  handleSlotModifyFieldsChange = (value, fieldName) => {\r\n    //debugger;\r\n    try {\r\n      let modalSlotModifyFields = lodash.cloneDeep(\r\n        this.state.modalSlotModifyFields\r\n      );\r\n      if (\r\n        fieldName === \"bayCode\" ||\r\n        fieldName === \"slotDuration\" ||\r\n        fieldName === \"remarks\"\r\n      ) {\r\n        modalSlotModifyFields[fieldName] = value;\r\n      } else if (fieldName === \"Time\") {\r\n        let slotTime = modalSlotModifyFields.slotTime;\r\n        let timeSplits = value.split(\":\");\r\n        modalSlotModifyFields.slotTime = slotTime\r\n          .set(\"hour\", timeSplits[0])\r\n          .set(\"minute\", timeSplits[1]);\r\n      } else if (fieldName === \"Date\") {\r\n        let modslotTime = dayjs(modalSlotModifyFields.slotTime.toDate());\r\n        modalSlotModifyFields.slotTime = dayjs(value)\r\n          .set(\"hour\", modslotTime.get(\"hour\"))\r\n          .set(\"minute\", modslotTime.get(\"minute\"));\r\n        if (isNaN(modalSlotModifyFields.slotTime.get(\"hour\"))) {\r\n          modalSlotModifyFields.slotTime = dayjs(modslotTime);\r\n        }\r\n      }\r\n      this.setState({ modalSlotModifyFields });\r\n      // else if()\r\n    } catch (error) {\r\n      console.log(\"error in handleSlotModifyFieldsChange\", error);\r\n    }\r\n  };\r\n\r\n  handleSlotCreateFieldsChange = (value, fieldName) => {\r\n    try {\r\n      let modalSlotCreateFields = lodash.cloneDeep(\r\n        this.state.modalSlotCreateFields\r\n      );\r\n      if (fieldName === \"slotDuration\") {\r\n        modalSlotCreateFields[\"slotDuration\"] = value;\r\n        this.setState({ modalSlotCreateFields });\r\n      } else if (fieldName === \"Time\") {\r\n        let slotTime = modalSlotCreateFields.slotTime;\r\n        let timeSplits = value.split(\":\");\r\n        modalSlotCreateFields.slotTime = slotTime\r\n          .set(\"hour\", timeSplits[0])\r\n          .set(\"minute\", timeSplits[1]);\r\n        this.setState({ modalSlotCreateFields });\r\n      } else if (fieldName === \"remarks\") {\r\n        modalSlotCreateFields[\"remarks\"] = value;\r\n        this.setState({ modalSlotCreateFields });\r\n      } else {\r\n        modalSlotCreateFields[fieldName] = value;\r\n        this.prepareKeyDataforAvailableTransactions(\r\n          modalSlotCreateFields,\r\n          fieldName\r\n        );\r\n        this.setState({ isCreateModalrefreshing: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error in handleSlotCreateFieldsChange\", error);\r\n    }\r\n  };\r\n  prepareKeyDataforAvailableTransactions(\r\n    modalSlotCreateFields,\r\n    fieldNameChanged\r\n  ) {\r\n    try {\r\n      let modalSlotCreateList = lodash.cloneDeep(\r\n        this.state.modalSlotCreateList\r\n      );\r\n      let requestTransactionInfoToBookSlot = {\r\n        TerminalCode: this.props.terminal.Key.Code,\r\n        TransportationType: this.props.transportationType,\r\n        TransactionSource: modalSlotCreateFields.slotSource,\r\n        LocationCode: modalSlotCreateFields.bayCode,\r\n        ShareholderCode: modalSlotCreateFields.shareholder,\r\n        CreatedFrom: Constants.shipmentFrom.None,\r\n        TransactionSourceCode: \"\",\r\n      };\r\n      if (fieldNameChanged === \"shareholder\") {\r\n        if (modalSlotCreateFields.slotSource === \"\") {\r\n          this.setState({ modalSlotCreateFields });\r\n          return;\r\n        } else if (\r\n          modalSlotCreateFields.slotSource === Constants.slotSource.SHIPMENT\r\n        ) {\r\n          modalSlotCreateFields.shipmentCode = \"\";\r\n          this.getAvailableTransactionsToBook(\r\n            requestTransactionInfoToBookSlot,\r\n            \"shipments\",\r\n            modalSlotCreateFields,\r\n            modalSlotCreateList\r\n          );\r\n        } else if (\r\n          modalSlotCreateFields.slotSource === Constants.slotSource.ORDER\r\n        ) {\r\n          modalSlotCreateFields.shipmentCode = \"\";\r\n          modalSlotCreateFields.orderCode = \"\";\r\n          modalSlotCreateList.shipments = [];\r\n          this.getAvailableTransactionsToBook(\r\n            requestTransactionInfoToBookSlot,\r\n            \"orders\",\r\n            modalSlotCreateFields,\r\n            modalSlotCreateList\r\n          );\r\n        } else if (\r\n          modalSlotCreateFields.slotSource === Constants.slotSource.CONTRACT\r\n        ) {\r\n          modalSlotCreateFields.shipmentCode = \"\";\r\n          modalSlotCreateFields.contractCode = \"\";\r\n          modalSlotCreateList.shipments = [];\r\n          this.getAvailableTransactionsToBook(\r\n            requestTransactionInfoToBookSlot,\r\n            \"contracts\",\r\n            modalSlotCreateFields,\r\n            modalSlotCreateList\r\n          );\r\n        } else if (\r\n          modalSlotCreateFields.slotSource === Constants.slotSource.RECEIPT\r\n        ) {\r\n          modalSlotCreateFields.receiptCode = \"\";\r\n          this.getAvailableTransactionsToBook(\r\n            requestTransactionInfoToBookSlot,\r\n            \"receipts\",\r\n            modalSlotCreateFields,\r\n            modalSlotCreateList\r\n          );\r\n        }\r\n      } else if (fieldNameChanged === \"slotSource\") {\r\n        //TODO set state for slotsource\r\n        if (\r\n          modalSlotCreateFields.slotSource === Constants.slotSource.SHIPMENT\r\n        ) {\r\n          modalSlotCreateFields.shipmentCode = \"\";\r\n          modalSlotCreateFields.orderCode = \"\";\r\n          modalSlotCreateFields.contractCode = \"\";\r\n          modalSlotCreateList.contracts = [];\r\n          modalSlotCreateList.filteredcontracts = [];\r\n          modalSlotCreateList.orders = [];\r\n          modalSlotCreateList.filteredorders = [];\r\n          this.getAvailableTransactionsToBook(\r\n            requestTransactionInfoToBookSlot,\r\n            \"shipments\",\r\n            modalSlotCreateFields,\r\n            modalSlotCreateList\r\n          );\r\n        } else if (\r\n          modalSlotCreateFields.slotSource === Constants.slotSource.ORDER\r\n        ) {\r\n          modalSlotCreateList.shipments = [];\r\n          modalSlotCreateList.filteredshipments = [];\r\n          modalSlotCreateList.contracts = [];\r\n          modalSlotCreateList.filteredcontracts = [];\r\n          modalSlotCreateFields.shipmentCode = \"\";\r\n          modalSlotCreateFields.orderCode = \"\";\r\n          modalSlotCreateFields.contractCode = \"\";\r\n          this.getAvailableTransactionsToBook(\r\n            requestTransactionInfoToBookSlot,\r\n            \"orders\",\r\n            modalSlotCreateFields,\r\n            modalSlotCreateList\r\n          );\r\n        } else if (\r\n          modalSlotCreateFields.slotSource === Constants.slotSource.CONTRACT\r\n        ) {\r\n          modalSlotCreateList.shipments = [];\r\n          modalSlotCreateList.filteredshipments = [];\r\n          modalSlotCreateList.orders = [];\r\n          modalSlotCreateList.filteredorders = [];\r\n          modalSlotCreateFields.shipmentCode = \"\";\r\n          modalSlotCreateFields.ordercode = \"\";\r\n          modalSlotCreateFields.contractCode = \"\";\r\n          this.getAvailableTransactionsToBook(\r\n            requestTransactionInfoToBookSlot,\r\n            \"contracts\",\r\n            modalSlotCreateFields,\r\n            modalSlotCreateList\r\n          );\r\n        } else if (\r\n          modalSlotCreateFields.slotSource === Constants.slotSource.RECEIPT\r\n        ) {\r\n          modalSlotCreateFields.receiptCode = \"\";\r\n          this.getAvailableTransactionsToBook(\r\n            requestTransactionInfoToBookSlot,\r\n            \"receipts\",\r\n            modalSlotCreateFields,\r\n            modalSlotCreateList\r\n          );\r\n        }\r\n      } else if (fieldNameChanged === \"orderCode\") {\r\n        // modalSlotCreateList.shipments = [];\r\n        modalSlotCreateFields.shipmentCode = \"\";\r\n        requestTransactionInfoToBookSlot.CreatedFrom =\r\n          Constants.shipmentFrom.Order;\r\n        requestTransactionInfoToBookSlot.TransactionSource =\r\n          Constants.slotSource.SHIPMENT;\r\n        requestTransactionInfoToBookSlot.TransactionSourceCode =\r\n          modalSlotCreateFields.orderCode;\r\n        this.getAvailableTransactionsToBook(\r\n          requestTransactionInfoToBookSlot,\r\n          \"shipments\",\r\n          modalSlotCreateFields,\r\n          modalSlotCreateList\r\n        );\r\n      } else if (fieldNameChanged === \"contractCode\") {\r\n        // modalSlotCreateList.shipments = [];\r\n        modalSlotCreateFields.shipmentCode = \"\";\r\n        requestTransactionInfoToBookSlot.CreatedFrom =\r\n          Constants.shipmentFrom.Contract;\r\n        requestTransactionInfoToBookSlot.TransactionSource =\r\n          Constants.slotSource.SHIPMENT;\r\n        requestTransactionInfoToBookSlot.TransactionSourceCode =\r\n          modalSlotCreateFields.contractCode;\r\n        this.getAvailableTransactionsToBook(\r\n          requestTransactionInfoToBookSlot,\r\n          \"shipments\",\r\n          modalSlotCreateFields,\r\n          modalSlotCreateList\r\n        );\r\n      } else if (fieldNameChanged === \"shipmentCode\") {\r\n        this.getShipment(modalSlotCreateFields, \"create\");\r\n      } else if (fieldNameChanged === \"receiptCode\") {\r\n        this.getReceipt(modalSlotCreateFields, \"create\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error in prepareKeyDataforAvailableTransactions\", error);\r\n    }\r\n  }\r\n  getShipment(modalSlotCreateFields, modalType) {\r\n    if (this.props.transportationType === Constants.TransportationType.ROAD) {\r\n      this.getTruckShipment(modalSlotCreateFields, modalType);\r\n    } else if (\r\n      this.props.transportationType === Constants.TransportationType.MARINE\r\n    ) {\r\n      this.getMarineShipment(modalSlotCreateFields, modalType);\r\n    }\r\n  }\r\n  getReceipt(modalSlotCreateFields, modalType) {\r\n    if (this.props.transportationType === Constants.TransportationType.ROAD) {\r\n      this.getTruckReceipt(modalSlotCreateFields, modalType);\r\n    } else if (\r\n      this.props.transportationType === Constants.TransportationType.MARINE\r\n    ) {\r\n      this.getMarineReceipt(modalSlotCreateFields, modalType);\r\n    }\r\n  }\r\n  getTruckShipment(modalSlotFields, modalType) {\r\n    let modalTransactionData = {\r\n      products: [], //{code,quantity,UOM,shCode}\r\n      driver: \"\",\r\n      carrier: \"\",\r\n      vehicle: \"\",\r\n      status: \"\",\r\n    };\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.shipmentCode,\r\n        value:\r\n          modalType === \"create\"\r\n            ? modalSlotFields.shipmentCode\r\n            : modalSlotFields.transactionCode,\r\n      },\r\n    ];\r\n    let obj = {\r\n      ShareHolderCode: modalSlotFields.shareholder,\r\n      keyDataCode: KeyCodes.shipmentCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetShipment,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        //console.log(result);\r\n        if (result.IsSuccess === true && result.EntityResult != null) {\r\n          let shipment = result.EntityResult;\r\n          modalTransactionData.driver = shipment.DriverCode;\r\n          modalTransactionData.vehicle = shipment.VehicleCode;\r\n          modalTransactionData.carrier = shipment.CarrierCode;\r\n          modalTransactionData.status = shipment.Status;\r\n\r\n          if (Array.isArray(shipment.ShipmentDetailsInfo)) {\r\n            shipment.ShipmentDetailsInfo.forEach((sd) => {\r\n              modalTransactionData.products.push({\r\n                code: sd.FinishedProductCode,\r\n                quantity: sd.Quantity,\r\n                UOM: sd.QuantityUOM,\r\n                shCode: sd.ShareholderCode,\r\n              });\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetShiment:\", result);\r\n        }\r\n        // console.log(modalTransactionData);\r\n        if (modalType === \"create\") {\r\n          this.setState({\r\n            modalSlotCreateFields: modalSlotFields,\r\n            modalTransactionData,\r\n            isCreateModalrefreshing: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            modalSlotModifyFields: modalSlotFields,\r\n            modalTransactionData,\r\n            isModifyModalrefreshing: false,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (modalType === \"create\") {\r\n          this.setState({\r\n            modalSlotCreateFields: modalSlotFields,\r\n            isCreateModalrefreshing: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            modalSlotModifyFields: modalSlotFields,\r\n            isModifyModalrefreshing: false,\r\n          });\r\n        }\r\n        console.log(\"Error while getting truck Shipment:\", error);\r\n      });\r\n  }\r\n  getTruckReceipt(modalSlotFields, modalType) {\r\n    let modalTransactionData = {\r\n      products: [], //{code,quantity,UOM}\r\n      driver: \"\",\r\n      carrier: \"\",\r\n      vehicle: \"\",\r\n      status: \"\",\r\n    };\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.receiptCode,\r\n        value:\r\n          modalType === \"create\"\r\n            ? modalSlotFields.receiptCode\r\n            : modalSlotFields.transactionCode,\r\n      },\r\n    ];\r\n    var obj = {\r\n      ShareHolderCode: modalSlotFields.shareholder,\r\n      keyDataCode: KeyCodes.receiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetReceipt,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        //console.log(result);\r\n        if (result.IsSuccess === true && result.EntityResult != null) {\r\n          let receipt = result.EntityResult;\r\n          modalTransactionData.driver = receipt.DriverCode;\r\n          modalTransactionData.vehicle = receipt.VehicleCode;\r\n          modalTransactionData.carrier = receipt.CarrierCode;\r\n          modalTransactionData.status = receipt.ReceiptStatus;\r\n          if (Array.isArray(receipt.ReceiptCompartmentsInfo)) {\r\n            receipt.ReceiptCompartmentsInfo.forEach((rc) => {\r\n              let receiptProducts = modalTransactionData.products.filter(\r\n                (product) => rc.FinishedProductCode === product.code\r\n              );\r\n              if (receiptProducts.length === 0) {\r\n                modalTransactionData.products.push({\r\n                  code: rc.FinishedProductCode,\r\n                  quantity: rc.Quantity,\r\n                  UOM: rc.QuantityUOM,\r\n                  shCode: rc.ShareholderCode,\r\n                });\r\n              } else {\r\n                receiptProducts[0].quantity =\r\n                  receiptProducts[0].quantity + rc.Quantity;\r\n              }\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetReceipt:\", result);\r\n        }\r\n        //console.log(modalTransactionData);\r\n        if (modalType === \"create\") {\r\n          this.setState({\r\n            modalSlotCreateFields: modalSlotFields,\r\n            modalTransactionData,\r\n            isCreateModalrefreshing: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            modalSlotModifyFields: modalSlotFields,\r\n            modalTransactionData,\r\n            isModifyModalrefreshing: false,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (modalType === \"create\") {\r\n          this.setState({\r\n            modalSlotCreateFields: modalSlotFields,\r\n            isCreateModalrefreshing: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            modalSlotModifyFields: modalSlotFields,\r\n            isModifyModalrefreshing: false,\r\n          });\r\n        }\r\n        console.log(\"Error while getting Receipt:\", error);\r\n      });\r\n  }\r\n  getMarineReceipt(modalSlotFields, modalType) {\r\n    let modalTransactionData = {\r\n      products: [], //{code,quantity,UOM}\r\n      driver: \"\",\r\n      carrier: \"\",\r\n      vehicle: \"\",\r\n      status: \"\",\r\n    };\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.marineReceiptCode,\r\n        value:\r\n          modalType === \"create\"\r\n            ? modalSlotFields.receiptCode\r\n            : modalSlotFields.transactionCode,\r\n      },\r\n      {\r\n        key: KeyCodes.transportationType,\r\n        value: this.props.transportationType,\r\n      },\r\n    ];\r\n    var obj = {\r\n      keyDataCode: KeyCodes.marineReceiptCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetMarineReceipt,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        //console.log(result);\r\n        if (result.IsSuccess === true && result.EntityResult != null) {\r\n          let receipt = result.EntityResult;\r\n          modalTransactionData.driver = receipt.GeneralTMUser;\r\n          modalTransactionData.vehicle = receipt.VesselCode;\r\n          modalTransactionData.carrier = receipt.CarrierCode;\r\n          modalTransactionData.status = receipt.ReceiptStatus;\r\n          if (\r\n            Array.isArray(receipt.RailMarineReceiptCompartmentDetailPlanList)\r\n          ) {\r\n            receipt.RailMarineReceiptCompartmentDetailPlanList.forEach((rc) => {\r\n              let receiptProducts = modalTransactionData.products.filter(\r\n                (product) =>\r\n                  rc.FinishedProductCode === product.code &&\r\n                  rc.ShareholderCode === product.shCode\r\n              );\r\n              if (receiptProducts.length === 0) {\r\n                modalTransactionData.products.push({\r\n                  code: rc.FinishedProductCode,\r\n                  quantity: rc.Quantity,\r\n                  UOM: rc.QuantityUOM,\r\n                  shCode: rc.ShareholderCode,\r\n                });\r\n              } else {\r\n                receiptProducts[0].quantity =\r\n                  receiptProducts[0].quantity + rc.Quantity;\r\n              }\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetReceipt:\", result);\r\n        }\r\n        //console.log(modalTransactionData);\r\n        if (modalType === \"create\") {\r\n          this.setState({\r\n            modalSlotCreateFields: modalSlotFields,\r\n            modalTransactionData,\r\n            isCreateModalrefreshing: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            modalSlotModifyFields: modalSlotFields,\r\n            modalTransactionData,\r\n            isModifyModalrefreshing: false,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (modalType === \"create\") {\r\n          this.setState({\r\n            modalSlotCreateFields: modalSlotFields,\r\n            isCreateModalrefreshing: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            modalSlotModifyFields: modalSlotFields,\r\n\r\n            isModifyModalrefreshing: false,\r\n          });\r\n        }\r\n        console.log(\"Error while getting Receipt:\", error);\r\n      });\r\n  }\r\n\r\n  getMarineShipment(modalSlotFields, modalType) {\r\n    let modalTransactionData = {\r\n      products: [], //{code,quantity,UOM}\r\n      driver: \"\",\r\n      carrier: \"\",\r\n      vehicle: \"\",\r\n      status: \"\",\r\n    };\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.marineDispatchCode,\r\n        value:\r\n          modalType === \"create\"\r\n            ? modalSlotFields.shipmentCode\r\n            : modalSlotFields.transactionCode,\r\n      },\r\n      {\r\n        key: KeyCodes.transportationType,\r\n        value: this.props.transportationType,\r\n      },\r\n    ];\r\n    var obj = {\r\n      keyDataCode: KeyCodes.marineDispatchCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetMarineDispatch,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        //console.log(result);\r\n        if (result.IsSuccess === true && result.EntityResult != null) {\r\n          let shipment = result.EntityResult;\r\n          modalTransactionData.driver = shipment.GeneralTMUser;\r\n          modalTransactionData.vehicle = shipment.VesselCode;\r\n          modalTransactionData.carrier = shipment.CarrierCode;\r\n          modalTransactionData.status = shipment.DispatchStatus;\r\n          if (Array.isArray(shipment.DispatchCompartmentDetailPlanList)) {\r\n            shipment.DispatchCompartmentDetailPlanList.forEach((sc) => {\r\n              let shipmentProducts = modalTransactionData.products.filter(\r\n                (product) =>\r\n                  sc.FinishedProductCode === product.code &&\r\n                  sc.ShareholderCode === product.shCode\r\n              );\r\n              if (shipmentProducts.length === 0) {\r\n                modalTransactionData.products.push({\r\n                  code: sc.FinishedProductCode,\r\n                  quantity: sc.Quantity,\r\n                  UOM: sc.QuantityUOM,\r\n                  shCode: sc.ShareholderCode,\r\n                });\r\n              } else {\r\n                shipmentProducts[0].quantity =\r\n                  shipmentProducts[0].quantity + sc.Quantity;\r\n              }\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetReceipt:\", result);\r\n        }\r\n        // console.log(modalTransactionData);\r\n        if (modalType === \"create\") {\r\n          this.setState({\r\n            modalSlotCreateFields: modalSlotFields,\r\n            modalTransactionData,\r\n            isCreateModalrefreshing: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            modalSlotModifyFields: modalSlotFields,\r\n            modalTransactionData,\r\n            isModifyModalrefreshing: false,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (modalType === \"create\") {\r\n          this.setState({\r\n            modalSlotCreateFields: modalSlotFields,\r\n            isCreateModalrefreshing: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            modalSlotModifyFields: modalSlotFields,\r\n            isModifyModalrefreshing: false,\r\n          });\r\n        }\r\n        console.log(\"Error while getting Shipment:\", error);\r\n      });\r\n  }\r\n  getAvailableTransactionsToBook(\r\n    requestInfo,\r\n    arrayToUpdate,\r\n    modalSlotCreateFields,\r\n    modalSlotCreateList\r\n  ) {\r\n    axios(\r\n      RestAPIs.GetAvailableTransactionsForBooking,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        requestInfo,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        //debugger;\r\n        //console.log(response);\r\n\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (Array.isArray(result.EntityResult)) {\r\n            modalSlotCreateList[arrayToUpdate] = result.EntityResult;\r\n            if (result.EntityResult.length > Constants.filteredOptionsCount) {\r\n              modalSlotCreateList[\"filtered\" + arrayToUpdate] =\r\n                result.EntityResult.slice(0, Constants.filteredOptionsCount);\r\n            } else {\r\n              modalSlotCreateList[\"filtered\" + arrayToUpdate] =\r\n                result.EntityResult;\r\n            }\r\n          } else {\r\n            modalSlotCreateList[arrayToUpdate] = [];\r\n            modalSlotCreateList[\"filtered\" + arrayToUpdate] = [];\r\n            console.log(\r\n              \"Error while getting getAvailableTransactionsToBook:\",\r\n              result\r\n            );\r\n          }\r\n        } else {\r\n          modalSlotCreateList[arrayToUpdate] = [];\r\n          modalSlotCreateList[\"filtered\" + arrayToUpdate] = [];\r\n\r\n          console.log(\r\n            \"Error while getting getAvailableTransactionsToBook:\",\r\n            result\r\n          );\r\n        }\r\n        this.setState({\r\n          modalSlotCreateFields,\r\n          modalSlotCreateList,\r\n          isCreateModalrefreshing: false,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        modalSlotCreateList[arrayToUpdate] = [];\r\n        modalSlotCreateList[\"filtered\" + arrayToUpdate] = [];\r\n        this.setState({\r\n          modalSlotCreateFields,\r\n          modalSlotCreateList,\r\n          isCreateModalrefreshing: false,\r\n        });\r\n\r\n        console.log(\r\n          \"Error while getting getAvailableTransactionsToBook:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n\r\n  getFilteredTimeRangeOptions(isFrom) {\r\n    let options = [];\r\n    // let filteredTimeRanges = this.state.slotRangeList.filter((sr) =>\r\n    //   sr.toLTTime.isBefore(\r\n    //     this.state.slotParameters.slotEndTime.add(1, \"minute\")\r\n    //   )\r\n    // );\r\n    this.state.slotRangeList.forEach((ft) => {\r\n      options.push({\r\n        value: ft.slNo,\r\n        text: isFrom\r\n          ? ft.fromLTTime.format(\"HH:mm\")\r\n          : ft.toLTTime.format(\"HH:mm\"),\r\n      });\r\n    });\r\n    return options;\r\n  }\r\n  handleTimeRangeChange(slNo) {\r\n    try {\r\n      let slotRangeList = this.state.slotRangeList;\r\n      let selectedRangeList = slotRangeList.filter((sr) => sr.slNo === slNo);\r\n      if (selectedRangeList.length > 0) {\r\n        this.setState({ selectedSlotRange: selectedRangeList[0] });\r\n      } else {\r\n        console.log(\"no slot Ranges identified\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error in handleTimeRangeChange\", error);\r\n    }\r\n  }\r\n  moveTimeRange(noOfMoves) {\r\n    let slNo = this.state.selectedSlotRange.slNo;\r\n    slNo = slNo + noOfMoves;\r\n    this.handleTimeRangeChange(slNo);\r\n  }\r\n  filterAttributeMetaData(slotsource, slotInfo) {\r\n    try {\r\n      let attributeMetaDataList = lodash.cloneDeep(\r\n        this.props.attributeMetaDataList\r\n      );\r\n      let modAttributeMetaDataList = [];\r\n      let attributeValidationErrors = [];\r\n      let terminalCode = this.props.terminal.Key.Code;\r\n      let transportationType = this.props.transportationType;\r\n      let attributeType =\r\n        transportationType +\r\n        Utilities.getKeyByValue(Constants.slotSource, slotsource) +\r\n        \"SLOTINFO\";\r\n      if (Array.isArray(attributeMetaDataList[attributeType])) {\r\n        modAttributeMetaDataList = attributeMetaDataList[attributeType].filter(\r\n          (attribute) => attribute.TerminalCode === terminalCode\r\n        );\r\n      }\r\n      // console.log(modAttributeMetaDataList);\r\n\r\n      attributeValidationErrors = Utilities.getAttributeInitialValidationErrors(\r\n        modAttributeMetaDataList\r\n      );\r\n      if (attributeValidationErrors.length > 0) {\r\n        attributeValidationErrors =\r\n          attributeValidationErrors[0].attributeValidationErrors;\r\n      }\r\n      //Fill slot info attribute values to Modified Attribute MetaData\r\n      if (slotInfo !== null && slotInfo !== undefined) {\r\n        let terminaAttributeMetaData = slotInfo.Attributes.find(\r\n          (slotInfoAttribute) => {\r\n            return slotInfoAttribute.TerminalCode === terminalCode;\r\n          }\r\n        );\r\n        if (\r\n          terminaAttributeMetaData !== undefined &&\r\n          modAttributeMetaDataList.length > 0\r\n        ) {\r\n          modAttributeMetaDataList[0].attributeMetaDataList.forEach(\r\n            (attributeMetaData) => {\r\n              let attributeValue =\r\n                terminaAttributeMetaData.ListOfAttributeData.find(\r\n                  (slotInfoAttribute) => {\r\n                    return (\r\n                      slotInfoAttribute.AttributeCode === attributeMetaData.Code\r\n                    );\r\n                  }\r\n                );\r\n              if (attributeValue !== undefined) {\r\n                attributeMetaData.DefaultValue = attributeValue.AttributeValue;\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }\r\n      this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\"filterAttributeMetaData\", error);\r\n    }\r\n  }\r\n  getBaysforTerminal() {\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message:\r\n        this.props.transportationType === Constants.TransportationType.ROAD\r\n          ? \"BaySearch_NoResult\"\r\n          : \"Berths_Not_found\",\r\n      messageResultDetails: [],\r\n    };\r\n    axios(\r\n      RestAPIs.GetBaysOfUser +\r\n      \"?TransportationType=\" +\r\n      this.props.transportationType +\r\n      \"&TerminalCode=\" +\r\n      this.props.terminal.Key.Code,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        // console.log(response);\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            Array.isArray(result.EntityResult) &&\r\n            result.EntityResult.length > 0\r\n          ) {\r\n            //[{bayCode:\"\",Active:false,bayType:Both,shareholder:[shCode:Sh1,fpCodes:[]]}]\r\n            let bayList = [];\r\n            result.EntityResult.forEach((bay) => {\r\n              let bayItem = {\r\n                bayCode: bay.BayCode,\r\n                active: bay.Active,\r\n                bayType: bay.BayType,\r\n                shareholder: [],\r\n              };\r\n              if (Array.isArray(bay.SupportedProducts)) {\r\n                bay.SupportedProducts.forEach((product) => {\r\n                  if (product.Active) {\r\n                    let shareholderArray = bayItem.shareholder.filter(\r\n                      (sh) => sh.shCode === product.Shareholdercode\r\n                    );\r\n                    if (shareholderArray.length > 0) {\r\n                      shareholderArray[0].fpCodes.push(product.Code);\r\n                    } else {\r\n                      bayItem.shareholder.push({\r\n                        shCode: product.Shareholdercode,\r\n                        fpCodes: [product.Code],\r\n                      });\r\n                    }\r\n                  }\r\n                });\r\n              }\r\n              bayList.push(bayItem);\r\n            });\r\n            // console.log(bayList);\r\n            this.setState(\r\n              {\r\n                bayList,\r\n              },\r\n              () => {\r\n                this.getConfigurationsAndSlotsList();\r\n              }\r\n            );\r\n          } else {\r\n            this.setState({\r\n              isReceiptsRefreshing: false,\r\n              isShipmentsRefreshing: false,\r\n            });\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n            console.log(\"No Bays found:\", result);\r\n          }\r\n        } else {\r\n          this.setState({\r\n            isReceiptsRefreshing: false,\r\n            isShipmentsRefreshing: false,\r\n          });\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n          console.log(\"Error while getting bays:\", result);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          isReceiptsRefreshing: false,\r\n          isShipmentsRefreshing: false,\r\n        });\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n        console.log(\"Error while getting getSlotConfigurations:\", error);\r\n      });\r\n  }\r\n  componentDidMount() {\r\n    // this.getConfigurationsAndSlotsList();\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getBaysforTerminal();\r\n    } catch (error) {\r\n      console.log(\"error in Component did mount\", error);\r\n    }\r\n  }\r\n\r\n  getFPSpans(fpArray, isFullDisplay) {\r\n    let fpSpans = [];\r\n    try {\r\n      for (const [index, value] of fpArray.entries()) {\r\n        if (isFullDisplay) {\r\n          fpSpans.push(<span className=\"slotDetailssmallSpan\">{value},</span>);\r\n        } else {\r\n          if (index < 2) {\r\n            fpSpans.push(\r\n              <span className=\"slotDetailssmallSpan\">{value},</span>\r\n            );\r\n          } else if (index === 2) {\r\n            fpSpans.push(<span className=\"slotDetailssmallSpan\">...</span>);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error in getFPSpans\", error);\r\n    }\r\n    return fpSpans;\r\n  }\r\n  getbayFinishedProductPopover(shArray) {\r\n    if (Array.isArray(shArray) && shArray.length > 0) {\r\n      return (\r\n        <ErrorBoundary>\r\n          <Popup\r\n            className=\"popup-theme-wrap\"\r\n            position=\"top left\"\r\n            on=\"click\"\r\n            element={this.getShareholderFPElements(shArray, false)}\r\n          >\r\n            <Card>\r\n              <Card.Content>\r\n                {this.getShareholderFPElements(shArray, true)}\r\n              </Card.Content>\r\n            </Card>\r\n          </Popup>\r\n        </ErrorBoundary>\r\n      );\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n  //shareholder:[shCode:Sh1,fpCodes:[]]}]\r\n  getShareholderFPElements(shArray, isfullDisplay) {\r\n    //debugger;\r\n    let shareholderElements = [];\r\n    try {\r\n      if (Array.isArray(shArray)) {\r\n        for (const [index, value] of shArray.entries()) {\r\n          if (isfullDisplay) {\r\n            shareholderElements.push(\r\n              <div style={{ display: \"flex\" }}>\r\n                <span className=\"slotDetailsSmallBoldSpan\">{value.shCode}</span>\r\n                <span>{\": \"}</span>\r\n                {this.getFPSpans(value.fpCodes, isfullDisplay)}\r\n              </div>\r\n            );\r\n          } else {\r\n            if (index < 2) {\r\n              shareholderElements.push(\r\n                <div>\r\n                  <span className=\"slotDetailsSmallBoldSpan\">\r\n                    {value.shCode}\r\n                  </span>\r\n                  <span>{\": \"}</span>\r\n                  {this.getFPSpans(value.fpCodes, isfullDisplay)}\r\n                </div>\r\n              );\r\n            } else if (index === 2) {\r\n              shareholderElements.push(<div>...</div>);\r\n            }\r\n          }\r\n        }\r\n        return shareholderElements;\r\n      } else return \"\";\r\n    } catch (error) {\r\n      console.log(\"error in getShareholderFPElements\", error);\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  getBookedSlotsLayoutforBay(\r\n    slotSource,\r\n    slotsList,\r\n    minuteWidthPerc,\r\n    locationCode\r\n  ) {\r\n    //debugger;\r\n    let bookedDivs = [];\r\n    let selectedSlotRange = this.state.selectedSlotRange;\r\n    let srCurrentStartTime = selectedSlotRange.fromCurrentTime;\r\n    let srCurrentEndTime = selectedSlotRange.toCurrentTime;\r\n\r\n    dayjs.extend(dayJSBetween);\r\n    let filteredSlots = slotsList.filter(\r\n      (si) =>\r\n        si.LocationCode === locationCode &&\r\n        (srCurrentStartTime.isBetween(\r\n          dayjs(si.StartTime),\r\n          dayjs(si.EndTime).subtract(1, \"minute\"),\r\n          \"minute\",\r\n          []\r\n        ) ||\r\n          srCurrentEndTime.isBetween(\r\n            dayjs(si.StartTime),\r\n            dayjs(si.EndTime).subtract(1, \"minute\"),\r\n            \"minute\",\r\n            []\r\n          ) ||\r\n          dayjs(si.StartTime).isBetween(\r\n            srCurrentStartTime,\r\n            srCurrentEndTime,\r\n            \"minute\",\r\n            []\r\n          ) ||\r\n          dayjs(si.EndTime)\r\n            .subtract(1, \"minute\")\r\n            .isBetween(srCurrentStartTime, srCurrentEndTime, null, []))\r\n    );\r\n\r\n    filteredSlots.forEach((si) => {\r\n      let bookingclassName = \"\";\r\n      let bookingclassNameBar = \"\";\r\n      let leftPerc = 0;\r\n      let widthPerc = 100;\r\n      let slotStartTime = dayjs(si.StartTime);\r\n      let slotEndTime = dayjs(si.EndTime).subtract(1, \"minute\");\r\n      //if(srCurrentStartTime.isBefore(slotStartTime))\r\n      leftPerc =\r\n        minuteWidthPerc * slotStartTime.diff(srCurrentStartTime, \"minute\");\r\n      leftPerc = leftPerc < 0 ? 1 : leftPerc + 1;\r\n      // console.log(\"left perc\", leftPerc, si);\r\n      if (window.innerWidth <= 800 && leftPerc <= 20) {\r\n        leftPerc = leftPerc + 18;\r\n      } else {\r\n        leftPerc = leftPerc + 15.5;\r\n      }\r\n      //leftPerc = leftPerc + 15.5;\r\n      if (\r\n        slotStartTime.isBetween(\r\n          srCurrentStartTime,\r\n          srCurrentEndTime,\r\n          null,\r\n          []\r\n        ) &&\r\n        slotEndTime.isBetween(srCurrentStartTime, srCurrentEndTime, null, [])\r\n      ) {\r\n        widthPerc = slotEndTime.diff(slotStartTime, \"minute\") * minuteWidthPerc;\r\n      } else if (\r\n        slotStartTime.isBefore(srCurrentStartTime) &&\r\n        slotEndTime.isAfter(srCurrentEndTime)\r\n      ) {\r\n        widthPerc = 100;\r\n      } else if (slotStartTime.isBefore(srCurrentStartTime)) {\r\n        widthPerc =\r\n          slotEndTime.diff(srCurrentStartTime, \"minute\") * minuteWidthPerc;\r\n      } else if (slotEndTime.isAfter(srCurrentStartTime)) {\r\n        widthPerc =\r\n          srCurrentEndTime.diff(slotStartTime, \"minute\") * minuteWidthPerc;\r\n      }\r\n      widthPerc = widthPerc - 0.5;\r\n      if (!si.IsAuthorized) {\r\n        bookingclassName = \"slotDetailsBlockedBooking\";\r\n      } else if (si.Status === Constants.slotStatus.COMPLETED) {\r\n        bookingclassName = \"slotDetailsCompletedBooking\";\r\n        bookingclassNameBar = \"slotDetailsCompletedBookingBar\";\r\n      } else if (slotEndTime.isBefore(dayjs())) {\r\n        bookingclassName = \"slotDetailsPastBooking\";\r\n        bookingclassNameBar = \"slotDetailsPastBookingBar\";\r\n      } else {\r\n        bookingclassName = \"slotDetailsFutureBooking\";\r\n        bookingclassNameBar = \"slotDetailsFutureBookingBar\";\r\n      }\r\n      if (leftPerc < 100) {\r\n        bookedDivs.push(\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <div\r\n                className={bookingclassName}\r\n                style={{\r\n                  left: leftPerc + \"%\",\r\n                  width: widthPerc + \"%\",\r\n                }}\r\n              >\r\n                {si.IsAuthorized ? (\r\n                  <div\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() => this.openSlotModifyModal(si)}\r\n                  >\r\n                    <div className={bookingclassNameBar}></div>\r\n                    <div className=\"slotDetailsTransactionSpan\">\r\n                      <span>{si.TransactionCode}</span>\r\n                    </div>\r\n                    <div className=\"slotDetailsBookingSpan\">\r\n                      <span>{si.ReferenceNumber}</span>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"slotDetailsBookingSpan\">\r\n                    <span>{t(\"SlotUnauthorized\")}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        );\r\n      }\r\n    });\r\n    return bookedDivs;\r\n  }\r\n  openSlotModifyModal(slotInfo) {\r\n    //debugger;\r\n    this.stopRefreshTimer();\r\n    this.filterAttributeMetaData(slotInfo.TransactionType.toString(), slotInfo);\r\n    let modalSlotModifyFields = {\r\n      slotTime: dayjs(slotInfo.StartTime).add(\r\n        -1 * this.state.slotParameters.timeDifference,\r\n        \"minute\"\r\n      ),\r\n      slotDuration: (\r\n        slotInfo.NoOfSlots * this.state.slotParameters.slotDuration\r\n      ).toString(),\r\n      bayCode: slotInfo.LocationCode,\r\n      transactionCode: slotInfo.TransactionCode,\r\n      shareholder: slotInfo.ShareholderCode,\r\n      remarks: slotInfo.Remarks,\r\n    };\r\n    let modelResultStatus = { modify: false, cancel: false };\r\n\r\n    this.setState({\r\n      isModifySlotOpen: true,\r\n      isModifyModalrefreshing: true,\r\n      selectedSlotInfo: slotInfo,\r\n      modalValidationErrors: [],\r\n      modelResultStatus,\r\n    });\r\n    if (slotInfo.TransportationType === Constants.TransportationType.ROAD) {\r\n      if (\r\n        slotInfo.TransactionType.toString() === Constants.slotSource.SHIPMENT\r\n      ) {\r\n        this.getTruckShipment(modalSlotModifyFields, \"modify\");\r\n      } else {\r\n        this.getTruckReceipt(modalSlotModifyFields, \"modify\");\r\n      }\r\n    } else if (\r\n      slotInfo.TransportationType === Constants.TransportationType.MARINE\r\n    ) {\r\n      if (\r\n        slotInfo.TransactionType.toString() === Constants.slotSource.SHIPMENT\r\n      ) {\r\n        this.getMarineShipment(modalSlotModifyFields, \"modify\");\r\n      } else {\r\n        this.getMarineReceipt(modalSlotModifyFields, \"modify\");\r\n      }\r\n    }\r\n  }\r\n  closeSlotModifyModal = () => {\r\n    this.startRefreshTimer();\r\n    let modalSlotModifyFields = {\r\n      // transactionType: \"\",\r\n      slotTime: dayjs(),\r\n      bayCode: \"\",\r\n      slotDuration: 0,\r\n      remarks: \"\",\r\n      shareholder: \"\",\r\n      transactionCode: \"\",\r\n      attributes: [],\r\n    };\r\n    let modalTransactionData = {\r\n      products: [], //{Code,Quantity,UOM,shCode}\r\n      driver: \"\",\r\n      carrier: \"\",\r\n      vehicle: \"\",\r\n      status: \"\",\r\n    };\r\n    let modelResultStatus = { modify: false, cancel: false };\r\n\r\n    this.setState({\r\n      isModifySlotOpen: false,\r\n      isModifyModalrefreshing: true,\r\n      selectedSlotInfo: null,\r\n      transactionData: null,\r\n      modalTransactionData,\r\n      modalSlotModifyFields,\r\n      modalValidationErrors: [],\r\n      modelResultStatus,\r\n    });\r\n  };\r\n  openSlotCreateModal(transactionType, slotStartTime, bayCode) {\r\n    this.stopRefreshTimer();\r\n    this.filterAttributeMetaData(transactionType);\r\n    let modalSlotCreateFields = {\r\n      transactionType: transactionType,\r\n      slotTime: slotStartTime,\r\n      bayCode: bayCode,\r\n      slotDuration: this.state.slotParameters.slotDuration,\r\n      slotSource: transactionType,\r\n      shareholder: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      shipmentCode: \"\",\r\n      receiptCode: \"\",\r\n      orderCode: \"\",\r\n      contractCode: \"\",\r\n      remarks: \"\",\r\n    };\r\n    let requestTransactionInfoToBookSlot = {\r\n      TerminalCode: this.props.terminal.Key.Code,\r\n      TransportationType: this.props.transportationType,\r\n      TransactionSource: modalSlotCreateFields.slotSource,\r\n      LocationCode: modalSlotCreateFields.bayCode,\r\n      ShareholderCode: modalSlotCreateFields.shareholder,\r\n      CreatedFrom: Constants.shipmentFrom.None,\r\n      TransactionSourceCode: \"\",\r\n    };\r\n    let modalSlotCreateList = {\r\n      orders: [],\r\n      filteredOrders: [],\r\n      contracts: [],\r\n      filteredcontracts: [],\r\n      shipments: [],\r\n      filteredshipments: [],\r\n      receipts: [],\r\n      filteredreceipts: [],\r\n    };\r\n    this.setState({\r\n      isCreateSlotOpen: true,\r\n      isCreateModalrefreshing: true,\r\n      selectedSlotInfo: null,\r\n      modalValidationErrors: [],\r\n    });\r\n    this.getAvailableTransactionsToBook(\r\n      requestTransactionInfoToBookSlot,\r\n      transactionType === Constants.slotSource.SHIPMENT\r\n        ? \"shipments\"\r\n        : \"receipts\",\r\n      modalSlotCreateFields,\r\n      modalSlotCreateList\r\n    );\r\n  }\r\n  closeSlotCreateModal = () => {\r\n    this.startRefreshTimer();\r\n    let modalSlotCreateFields = {\r\n      transactionType: \"\",\r\n      slotTime: dayjs(),\r\n      bayCode: \"\",\r\n      slotDuration: this.state.slotParameters.slotDuration,\r\n      slotSource: \"\",\r\n      shareholder: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      shipmentCode: \"\",\r\n      receiptCode: \"\",\r\n      orderCode: \"\",\r\n      contractCode: \"\",\r\n      remarks: \"\",\r\n      attributes: [],\r\n    };\r\n    let modalTransactionData = {\r\n      products: [], //{Code,Quantity,UOM,shCode}\r\n      driver: \"\",\r\n      carrier: \"\",\r\n      vehicle: \"\",\r\n      status: \"\",\r\n    };\r\n    let modalSlotCreateList = {\r\n      orders: [],\r\n      filteredOrders: [],\r\n      contracts: [],\r\n      filteredcontracts: [],\r\n      shipments: [],\r\n      filteredshipments: [],\r\n      receipts: [],\r\n      filteredreceipts: [],\r\n    };\r\n    this.setState({\r\n      isCreateSlotOpen: false,\r\n      isCreateModalrefreshing: true,\r\n      modalSlotCreateFields,\r\n      modalSlotCreateList,\r\n      modalTransactionData,\r\n      selectedSlotInfo: null,\r\n      modalValidationErrors: [],\r\n    });\r\n  };\r\n  handleModelOptionsSearchChange = (query, arrayName) => {\r\n    try {\r\n      let modalSlotCreateList = lodash.cloneDeep(\r\n        this.state.modalSlotCreateList\r\n      );\r\n      let options = modalSlotCreateList[arrayName];\r\n      let filteredOptions = options.filter((item) =>\r\n        item.toLowerCase().includes(query.toLowerCase())\r\n      );\r\n      if (filteredOptions.length > Constants.filteredOptionsCount) {\r\n        filteredOptions = filteredOptions.slice(\r\n          0,\r\n          Constants.filteredOptionsCount\r\n        );\r\n      }\r\n      modalSlotCreateList[\"filtered\" + arrayName] = filteredOptions;\r\n      this.setState({\r\n        modalSlotCreateList,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"slotDetailsComposite:Error occured on handleModelOptionsSearchChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n\r\n  cancelBooking = () => {\r\n     \r\n    let validationErrors = this.validateCancelSlot();\r\n    if (validationErrors.length === 0) {\r\n      let slotModifyFields = this.state.modalSlotModifyFields;\r\n      let slotInfo = lodash.cloneDeep(this.state.selectedSlotInfo);\r\n      slotInfo.Remarks = slotModifyFields.remarks;\r\n     \r\n      let showCancelSlotAuthenticationLayout =\r\n      this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n        ? true\r\n        : false;\r\n\r\n    let tempSlotInfo = lodash.cloneDeep(slotInfo);\r\n\r\n      this.setState({ showCancelSlotAuthenticationLayout, tempSlotInfo }, () => {\r\n        if (showCancelSlotAuthenticationLayout === false) {\r\n          this.handleCancelBooking();\r\n        }\r\n    });\r\n\r\n    } else {\r\n      console.log(\"Error while Cancel Slot\", validationErrors);\r\n    }\r\n     \r\n    }\r\n\r\n  handleCancelBooking = () => {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n      \r\n      let tempSlotInfo = lodash.cloneDeep(this.state.tempSlotInfo);\r\n      let modalValidationErrors = lodash.cloneDeep(this.state.modalValidationErrors);\r\n\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: 0,\r\n        KeyCodes: null,\r\n        Entity: tempSlotInfo,\r\n      };\r\n      this.setState({ isModifyModalrefreshing: true });\r\n\r\n      axios(\r\n        RestAPIs.CancelSlot,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          \r\n          let result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult !== null) {\r\n              let modelResultStatus = { modify: false, cancel: true };\r\n\r\n              this.setState(\r\n                {\r\n                  modelResultStatus,\r\n                  isModifyModalrefreshing: false,\r\n                },\r\n                () => {\r\n                  if (this.props.operationsVisibilty.shipments) {\r\n                    this.getSlotsList(Constants.slotSource.SHIPMENT);\r\n                    this.getKPIList(Constants.slotSource.SHIPMENT);\r\n                  }\r\n                  if (this.props.operationsVisibilty.receipts) {\r\n                    this.getSlotsList(Constants.slotSource.RECEIPT);\r\n                    this.getKPIList(Constants.slotSource.RECEIPT);\r\n                  }\r\n                }\r\n              );\r\n            } else {\r\n              modalValidationErrors.push(\"UnKnown_Error\");\r\n              this.setState({\r\n                isModifyModalrefreshing: false,\r\n                modalValidationErrors,\r\n              });\r\n\r\n               \r\n              console.log(\"Error while Cancel Slot:\", result);\r\n            }\r\n          } else {\r\n            modalValidationErrors.push(\r\n              result.ErrorList.length > 0\r\n                ? result.ErrorList[0]\r\n                : \"UnKnown_Error\"\r\n            );\r\n\r\n            this.setState({\r\n              isModifyModalrefreshing: false,\r\n              modalValidationErrors,\r\n            });\r\n            console.log(\"Error while  Cancle Slot:\", result);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          modalValidationErrors.push(\"UnKnown_Error\");\r\n          this.setState({\r\n            isModifyModalrefreshing: false,\r\n            modalValidationErrors,\r\n          });\r\n           \r\n          console.log(\"Error while  Cancel Slot:\", error);\r\n        });\r\n     \r\n    } catch (error) {\r\n      console.log(\"Error while Cancel Slot\", error);\r\n    }\r\n  };\r\n\r\n  validateCancelSlot() {\r\n    dayjs.extend(dayJSBetween);\r\n    let validationErrors = [];\r\n    let slotModifyFields = this.state.modalSlotModifyFields;\r\n    let selectedSlotInfo = this.state.selectedSlotInfo;\r\n    let slotParameters = this.state.slotParameters;\r\n    let oldRemarks = selectedSlotInfo.Remarks;\r\n    let newRemarks = slotModifyFields.remarks;\r\n    if (newRemarks === null || newRemarks.length === 0) {\r\n      validationErrors.push(\"OriginTerminal_RemarksRequired\");\r\n    } else if (newRemarks.length > 300) {\r\n      validationErrors.push(\"Contract_Remarks_Exceeds_MaxLen\");\r\n    } else if (newRemarks === oldRemarks) {\r\n      validationErrors.push(\"Remarks_Change_require\");\r\n    } else if (!newRemarks.match(/^[^!%<>?\\[\\]^`{}|~=]+$/)) {\r\n      validationErrors.push(\"Remarks_Invalid\");\r\n    }\r\n    if (this.props.transportationType === Constants.TransportationType.ROAD) {\r\n      let slotCurrentStartTime = dayjs(selectedSlotInfo.StartTime);\r\n      if (\r\n        dayjs()\r\n          .add(slotParameters.minSlotChangeMinutes, \"minute\")\r\n          .isBefore(slotCurrentStartTime) === false\r\n      ) {\r\n        validationErrors.push(\"Slot_Booking_Closed\");\r\n      }\r\n    }\r\n    this.setState({ modalValidationErrors: validationErrors });\r\n    return validationErrors;\r\n  }\r\n\r\n\r\n  updateSlotBooking = () => {\r\n     \r\n    let validationErrors = this.validateUpdateSlot();\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let attributesValidation = this.validateAttributes(attributeList);\r\n\r\n      if (validationErrors.length === 0 && attributesValidation) {\r\n        let slotModifyFields = this.state.modalSlotModifyFields;\r\n        let slotParameters = this.state.slotParameters;\r\n        let slotInfo = lodash.cloneDeep(this.state.selectedSlotInfo);\r\n        slotInfo.Remarks = slotModifyFields.remarks;\r\n        slotInfo.StartTime = slotModifyFields.slotTime\r\n          .add(slotParameters.timeDifference, \"minute\")\r\n          .toDate();\r\n      \r\n        slotInfo.EndTime = this.getSlotLTEndTimeForSave(\r\n          slotModifyFields.slotTime,\r\n          slotModifyFields.slotDuration\r\n        )\r\n          .add(slotParameters.timeDifference, \"minute\")\r\n          .toDate();\r\n        slotInfo.LocationCode = slotModifyFields.bayCode;\r\n        slotInfo.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n       \r\n        this.setState({ isModifyModalrefreshing: true });\r\n\r\n        let showUpdateSlotAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n  \r\n      let tempSlotInfo = lodash.cloneDeep(slotInfo);\r\n        this.setState({ showUpdateSlotAuthenticationLayout, tempSlotInfo }, () => {\r\n          if (showUpdateSlotAuthenticationLayout === false) {\r\n            this.handleUpdateSlotBooking();\r\n          }\r\n      });\r\n       \r\n      } else {\r\n        console.log(\"Error while Update Slot\", validationErrors);\r\n      }\r\n     \r\n    }\r\n\r\n  handleUpdateSlotBooking = () => {\r\n    this.handleAuthenticationClose();\r\n    try {\r\n     \r\n      let tempSlotInfo = lodash.cloneDeep(this.state.tempSlotInfo);\r\n      let modalValidationErrors = lodash.cloneDeep(this.state.modalValidationErrors);\r\n\r\n\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: 0,\r\n        KeyCodes: null,\r\n        Entity: tempSlotInfo,\r\n      };\r\n\r\n      axios(\r\n        RestAPIs.UpdateSlot,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          // debugger;\r\n          //console.log(response);\r\n\r\n          let result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult !== null) {\r\n              let modelResultStatus = { modify: true, cancel: false };\r\n\r\n              this.setState(\r\n                {\r\n                  modelResultStatus,\r\n                  selectedSlotInfo: tempSlotInfo,\r\n                  isModifyModalrefreshing: false,\r\n                },\r\n                () => {\r\n                  if (this.props.operationsVisibilty.shipments) {\r\n                    this.getSlotsList(Constants.slotSource.SHIPMENT);\r\n                    this.getKPIList(Constants.slotSource.SHIPMENT);\r\n                  }\r\n                  if (this.props.operationsVisibilty.receipts) {\r\n                    this.getSlotsList(Constants.slotSource.RECEIPT);\r\n                    this.getKPIList(Constants.slotSource.RECEIPT);\r\n                  }\r\n                }\r\n              );\r\n            } else {\r\n              modalValidationErrors.push(\"UnKnown_Error\");\r\n              this.setState({\r\n                isModifyModalrefreshing: false,\r\n                modalValidationErrors,\r\n              });\r\n\r\n              console.log(\"Error while Update Slot:\", result);\r\n            }\r\n          } else {\r\n            modalValidationErrors.push(\r\n              result.ErrorList.length > 0\r\n                ? result.ErrorList[0]\r\n                : \"UnKnown_Error\"\r\n            );\r\n\r\n            this.setState({\r\n              isModifyModalrefreshing: false,\r\n              modalValidationErrors,\r\n            });\r\n\r\n            console.log(\"Error while  Update Slot:\", result);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          modalValidationErrors.push(\"UnKnown_Error\");\r\n          this.setState({\r\n            isModifyModalrefreshing: false,\r\n            modalValidationErrors,\r\n          });\r\n\r\n          console.log(\"Error while  Update Slot:\", error);\r\n        });\r\n        \r\n    } catch (error) {\r\n      console.log(\"Error while Update Slot\", error);\r\n    }\r\n  };\r\n  validateUpdateSlot() {\r\n    dayjs.extend(dayJSBetween);\r\n\r\n    let validationErrors = [];\r\n    let slotModifyFields = this.state.modalSlotModifyFields;\r\n    let selectedSlotInfo = this.state.selectedSlotInfo;\r\n    let slotParameters = this.state.slotParameters;\r\n    let oldRemarks = selectedSlotInfo.Remarks;\r\n    let newRemarks = slotModifyFields.remarks;\r\n    if (newRemarks === null || newRemarks.length === 0) {\r\n      validationErrors.push(\"OriginTerminal_RemarksRequired\");\r\n    } else if (newRemarks.length > 300) {\r\n      validationErrors.push(\"Contract_Remarks_Exceeds_MaxLen\");\r\n    } else if (newRemarks === oldRemarks) {\r\n      validationErrors.push(\"Remarks_Change_require\");\r\n    } else if (!newRemarks.match(/^[^!%<>?\\[\\]^`{}|~=]+$/)) {\r\n      validationErrors.push(\"Remarks_Invalid\");\r\n    }\r\n    let slotsList =\r\n      selectedSlotInfo.TransactionType.toString() ===\r\n        Constants.slotSource.SHIPMENT\r\n        ? this.state.shipmentSlotsList\r\n        : this.state.receiptSlotsList;\r\n    let slotLTStartTime = slotModifyFields.slotTime;\r\n    // let slotLTEndTime = slotModifyFields.slotTime.add(\r\n    //   slotModifyFields.slotDuration,\r\n    //   \"minute\"\r\n    // );\r\n    let slotLTEndTime = this.getSlotLTEndTimeForSave(\r\n      slotModifyFields.slotTime,\r\n      slotModifyFields.slotDuration\r\n    );\r\n    let slotCurrentStartTime = slotLTStartTime.add(\r\n      slotParameters.timeDifference,\r\n      \"minute\"\r\n    );\r\n    let slotCurrentEndTime = slotLTEndTime.add(\r\n      slotParameters.timeDifference,\r\n      \"minute\"\r\n    );\r\n    if (\r\n      dayjs()\r\n        .add(slotParameters.minSlotChangeMinutes, \"minute\")\r\n        .isBefore(slotCurrentStartTime) === false\r\n    ) {\r\n      validationErrors.push(\"Slot_Booking_Closed\");\r\n    }\r\n    //debugger;\r\n    let tempdayLTStartTime = slotParameters.slotStartTime;\r\n    let tempdayLTEndTime = slotParameters.slotEndTime;\r\n    let startDaysDiff = slotLTStartTime.diff(tempdayLTStartTime, \"day\");\r\n    tempdayLTStartTime = tempdayLTStartTime.add(startDaysDiff, \"day\");\r\n    tempdayLTEndTime = tempdayLTEndTime.add(startDaysDiff, \"day\");\r\n    if (\r\n      !slotLTStartTime.isBetween(\r\n        tempdayLTStartTime,\r\n        tempdayLTEndTime,\r\n        \"minute\",\r\n        \"[)\"\r\n      )\r\n    ) {\r\n      tempdayLTStartTime = tempdayLTStartTime.add(-1, \"day\");\r\n      tempdayLTEndTime = tempdayLTEndTime.add(-1, \"day\");\r\n    }\r\n\r\n    let localTime = dayjs()\r\n      .add(-1 * slotParameters.timeDifference, \"minute\")\r\n      .set(\"hour\", 0)\r\n      .set(\"minute\", 0)\r\n      .set(\"second\", 0);\r\n    if (\r\n      tempdayLTStartTime\r\n        .set(\"hour\", 0)\r\n        .set(\"minute\", 0)\r\n        .set(\"second\", 0)\r\n        .diff(localTime, \"day\") >= slotParameters.maxSlotDaysToBook\r\n    ) {\r\n      validationErrors.push(\"Slot_Booking_Closed\");\r\n    }\r\n    if (this.props.transportationType === Constants.TransportationType.ROAD) {\r\n      if (slotLTEndTime.isAfter(tempdayLTEndTime)) {\r\n        validationErrors.push(\"Slot_End_Time_Crossed_Day\");\r\n      }\r\n    }\r\n    slotsList.forEach((si) => {\r\n      let startTime = dayjs(si.StartTime);\r\n      let endTime = dayjs(si.EndTime);\r\n      if (\r\n        si.LocationCode === slotModifyFields.bayCode &&\r\n        si.TransactionCode !== selectedSlotInfo.TransactionCode &&\r\n        (startTime.isBetween(\r\n          slotCurrentStartTime,\r\n          slotCurrentEndTime,\r\n          \"minute\",\r\n          \"[)\"\r\n        ) ||\r\n          endTime.isBetween(\r\n            slotCurrentStartTime,\r\n            slotCurrentEndTime,\r\n            \"minute\",\r\n            \"(]\"\r\n          ) ||\r\n          (startTime.diff(slotCurrentStartTime, \"minute\") === 0 &&\r\n            endTime.diff(slotCurrentEndTime, \"minute\") === 0))\r\n      ) {\r\n        validationErrors.push(\"Selected_Slot_Not_Available\");\r\n      }\r\n    });\r\n    this.setState({ modalValidationErrors: validationErrors });\r\n    return validationErrors;\r\n  }\r\n\r\n\r\n  bookSlot = () => {\r\n     \r\n    let attributeList = Utilities.attributesConverttoLocaleString(\r\n      this.state.modAttributeMetaDataList\r\n    );\r\n    let validationErrors = this.validateBookSlot();\r\n    let attributesValidation = this.validateAttributes(attributeList);\r\n    \r\n    if (validationErrors.length === 0 && attributesValidation) {\r\n      let slotCreateFields = this.state.modalSlotCreateFields;\r\n      let slotParameters = this.state.slotParameters;\r\n\r\n      let slotInfo = {\r\n        Remarks: slotCreateFields.remarks,\r\n        TransactionType: slotCreateFields.transactionType,\r\n        TransactionCode:\r\n          slotCreateFields.transactionType === Constants.slotSource.SHIPMENT\r\n            ? slotCreateFields.shipmentCode\r\n            : slotCreateFields.receiptCode,\r\n        Status: Constants.slotStatus.BOOKED,\r\n        StartTime: slotCreateFields.slotTime\r\n          .add(slotParameters.timeDifference, \"minute\")\r\n          .toDate(),\r\n        EndTime: this.getSlotLTEndTimeForSave(\r\n          slotCreateFields.slotTime,\r\n          slotCreateFields.slotDuration\r\n        )\r\n          .add(slotParameters.timeDifference, \"minute\")\r\n          .toDate(),\r\n        LocationCode: slotCreateFields.bayCode,\r\n        ShareholderCode: slotCreateFields.shareholder,\r\n        TerminalCode: slotParameters.terminalCode,\r\n        TransportationType: this.props.transportationType,\r\n        Attributes: Utilities.fillAttributeDetails(attributeList),\r\n      };\r\n\r\n      let showBookSlotAuthenticationLayout =\r\n      this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n        ? true\r\n        : false;\r\n\r\n    let tempSlotInfo = lodash.cloneDeep(slotInfo);\r\n      this.setState({ showBookSlotAuthenticationLayout, tempSlotInfo }, () => {\r\n        if (showBookSlotAuthenticationLayout === false) {\r\n          this.handleBookSlot();\r\n        }\r\n    });\r\n\r\n    } else {\r\n      console.log(\"Error while Booking Slot\", validationErrors);\r\n    } \r\n    }\r\n\r\n    handleBookSlot = () => {\r\n      this.handleAuthenticationClose();\r\n      let tempSlotInfo = lodash.cloneDeep(this.state.tempSlotInfo);\r\n      let modalValidationErrors = lodash.cloneDeep(this.state.modalValidationErrors);\r\n      var obj = {\r\n        ShareHolderCode: \"\",\r\n        keyDataCode: 0,\r\n        KeyCodes: null,\r\n        Entity: tempSlotInfo,\r\n      };\r\n      this.setState({\r\n        isCreateModalrefreshing: true,\r\n        selectedSlotInfo: null,\r\n      });\r\n\r\n    try {\r\n       \r\n      axios(\r\n        RestAPIs.BookSlot,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n\r\n          let result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult !== null) {\r\n              this.setState(\r\n                {\r\n                  selectedSlotInfo: result.EntityResult,\r\n                  isCreateModalrefreshing: false,\r\n                },\r\n                () => {\r\n                  if (this.props.operationsVisibilty.shipments) {\r\n                    this.getSlotsList(Constants.slotSource.SHIPMENT);\r\n                    this.getKPIList(Constants.slotSource.SHIPMENT);\r\n                  }\r\n                  if (this.props.operationsVisibilty.receipts) {\r\n                    this.getSlotsList(Constants.slotSource.RECEIPT);\r\n                    this.getKPIList(Constants.slotSource.RECEIPT);\r\n                  }\r\n                }\r\n              );\r\n            } else {\r\n              modalValidationErrors.push(\"UnKnown_Error\");\r\n              this.setState({\r\n                isCreateModalrefreshing: true,\r\n                selectedSlotInfo: null,\r\n                modalValidationErrors: modalValidationErrors,\r\n              });\r\n\r\n              console.log(\"Error while Booking Slot:\", result);\r\n            }\r\n          } else {\r\n            modalValidationErrors.push(\r\n              result.ErrorList.length > 0\r\n                ? result.ErrorList[0]\r\n                : \"UnKnown_Error\"\r\n            );\r\n            this.setState({\r\n              isCreateModalrefreshing: false,\r\n              selectedSlotInfo: null,\r\n              modalValidationErrors,\r\n            });\r\n\r\n            console.log(\"Error while Booking Slot:\", result);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          modalValidationErrors.push(\"UnKnown_Error\");\r\n          this.setState({\r\n            isCreateModalrefreshing: false,\r\n            selectedSlotInfo: null,\r\n            modalValidationErrors,\r\n          });\r\n\r\n          console.log(\"Error while Booking Slot:\", error);\r\n        });\r\n     \r\n    } catch (error) {\r\n      console.log(\"Error while Booking Slot\", error);\r\n    }\r\n  };\r\n\r\n  validateAttributes(attributeList) {\r\n    let returnValue = true;\r\n\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n\r\n    let matchedAttributesList = attributeList.filter(\r\n      (modattribute) =>\r\n        modattribute.TerminalCode === this.state.slotParameters.terminalCode\r\n    );\r\n    if (\r\n      matchedAttributesList.length > 0 &&\r\n      Array.isArray(matchedAttributesList[0].attributeMetaDataList) &&\r\n      matchedAttributesList[0].attributeMetaDataList.length > 0\r\n    ) {\r\n      matchedAttributesList[0].attributeMetaDataList.forEach((modattribute) => {\r\n        attributeValidationErrors[modattribute.Code] =\r\n          Utilities.valiateAttributeField(\r\n            modattribute,\r\n            modattribute.DefaultValue\r\n          );\r\n      });\r\n      returnValue = Object.values(attributeValidationErrors).every(function (\r\n        value\r\n      ) {\r\n        return value === \"\";\r\n      });\r\n    }\r\n\r\n    this.setState({ attributeValidationErrors });\r\n    return returnValue;\r\n  }\r\n\r\n  validateBookSlot() {\r\n    dayjs.extend(dayJSBetween);\r\n    let validationErrors = [];\r\n    let slotCreateFields = this.state.modalSlotCreateFields;\r\n    let slotParameters = this.state.slotParameters;\r\n    let remarks = slotCreateFields.remarks;\r\n    if (remarks === null || remarks.length === 0) {\r\n    } else if (remarks.length > 300) {\r\n      validationErrors.push(\"Contract_Remarks_Exceeds_MaxLen\");\r\n    } else if (!remarks.match(/^[^!%<>?\\[\\]^`{}|~=]+$/)) {\r\n      validationErrors.push(\"Remarks_Invalid\");\r\n    }\r\n    let slotsList =\r\n      slotCreateFields.transactionType.toString() ===\r\n        Constants.slotSource.SHIPMENT\r\n        ? this.state.shipmentSlotsList\r\n        : this.state.receiptSlotsList;\r\n\r\n    let slotLTStartTime = slotCreateFields.slotTime;\r\n    // let slotLTEndTime = slotCreateFields.slotTime.add(\r\n    //   slotCreateFields.slotDuration,\r\n    //   \"minute\"\r\n    // );\r\n    let slotLTEndTime = this.getSlotLTEndTimeForSave(\r\n      slotCreateFields.slotTime,\r\n      slotCreateFields.slotDuration\r\n    );\r\n    let slotCurrentStartTime = slotLTStartTime.add(\r\n      slotParameters.timeDifference,\r\n      \"minute\"\r\n    );\r\n    let slotCurrentEndTime = slotLTEndTime.add(\r\n      slotParameters.timeDifference,\r\n      \"minute\"\r\n    );\r\n    if (\r\n      dayjs()\r\n        .add(slotParameters.minSlotMinutesToBook, \"minute\")\r\n        .isBefore(slotCurrentStartTime) === false\r\n    ) {\r\n      validationErrors.push(\"Slot_Booking_Closed\");\r\n    }\r\n    if (this.props.transportationType === Constants.TransportationType.ROAD) {\r\n      if (slotLTEndTime.isAfter(slotParameters.slotEndTime)) {\r\n        validationErrors.push(\"Slot_End_Time_Crossed_Day\");\r\n      }\r\n    }\r\n    slotsList.forEach((si) => {\r\n      let startTime = dayjs(si.StartTime);\r\n      let endTime = dayjs(si.EndTime);\r\n      if (\r\n        si.LocationCode === slotCreateFields.bayCode &&\r\n        (startTime.isBetween(\r\n          slotCurrentStartTime,\r\n          slotCurrentEndTime,\r\n          \"minute\",\r\n          \"[)\"\r\n        ) ||\r\n          endTime.isBetween(\r\n            slotCurrentStartTime,\r\n            slotCurrentEndTime,\r\n            \"minute\",\r\n            \"(]\"\r\n          ) ||\r\n          (startTime.diff(slotCurrentStartTime, \"minute\") === 0 &&\r\n            endTime.diff(slotCurrentEndTime, \"minute\") === 0))\r\n      ) {\r\n        validationErrors.push(\"Selected_Slot_Not_Available\");\r\n      }\r\n    });\r\n    this.setState({ modalValidationErrors: validationErrors });\r\n    return validationErrors;\r\n  }\r\n  getSlotLTEndTimeForSave(startLTTime, duration) {\r\n    //debugger;\r\n    dayjs.extend(dayJSBetween);\r\n    let slotParameters = this.state.slotParameters;\r\n    let tempdayLTStartTime = slotParameters.slotStartTime;\r\n    let tempdayLTEndTime = slotParameters.slotEndTime;\r\n    let startDaysDiff = startLTTime.diff(tempdayLTStartTime, \"day\");\r\n    tempdayLTStartTime = tempdayLTStartTime.add(startDaysDiff, \"day\");\r\n    tempdayLTEndTime = tempdayLTEndTime.add(startDaysDiff, \"day\");\r\n    if (\r\n      !startLTTime.isBetween(\r\n        tempdayLTStartTime,\r\n        tempdayLTEndTime,\r\n        \"minute\",\r\n        \"[)\"\r\n      )\r\n    ) {\r\n      tempdayLTStartTime = tempdayLTStartTime.add(-1, \"day\");\r\n      tempdayLTEndTime = tempdayLTEndTime.add(-1, \"day\");\r\n    }\r\n\r\n    let tempDuarion = duration;\r\n    let ltEndTime = startLTTime;\r\n    while (tempDuarion !== 0) {\r\n      if (ltEndTime.add(tempDuarion, \"minute\").isAfter(tempdayLTEndTime)) {\r\n        tempdayLTStartTime = tempdayLTStartTime.add(1, \"day\");\r\n        tempDuarion = tempDuarion - tempdayLTEndTime.diff(ltEndTime, \"minute\");\r\n        tempdayLTEndTime = tempdayLTEndTime.add(1, \"day\");\r\n        ltEndTime = tempdayLTStartTime;\r\n      } else {\r\n        ltEndTime = ltEndTime.add(tempDuarion, \"minute\");\r\n        tempDuarion = 0;\r\n      }\r\n    }\r\n    return ltEndTime;\r\n  }\r\n\r\n  getBaySelectionControl(bays, slotSource) {\r\n    let bayOptions = [];\r\n\r\n    bayOptions.push({ value: \"-1\", text: \"All\" });\r\n    bays.forEach((bay) => {\r\n      bayOptions.push({ value: bay.bayCode, text: bay.bayCode });\r\n    });\r\n\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Select\r\n            fluid\r\n            value={\r\n              slotSource === Constants.slotSource.SHIPMENT\r\n                ? this.state.filteredShipmentBayCode\r\n                : this.state.filteredReceiptBayCode\r\n            }\r\n            options={bayOptions}\r\n            onChange={(data) => {\r\n              if (slotSource === Constants.slotSource.SHIPMENT) {\r\n                this.setState({ filteredShipmentBayCode: data });\r\n              } else {\r\n                this.setState({ filteredReceiptBayCode: data });\r\n              }\r\n            }}\r\n            reserveSpace={false}\r\n            search={true}\r\n          />\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n\r\n  getSlotListLayOut(slotSource, slotsList, isRefreshing) {\r\n    if (isRefreshing) {\r\n      return <LoadingPage loadingClass=\"nestedList\" message=\"\"></LoadingPage>;\r\n    } else {\r\n      // debugger;\r\n      let selectedSlotRange = this.state.selectedSlotRange;\r\n      let slotParams = this.state.slotParameters;\r\n      let slotTimes = []; //{fromLTTime,fromCurrentTime,ToLTTime,ToCurrentTime}\r\n      let tempslotStartTime = selectedSlotRange.fromLTTime;\r\n      let tempslotEndTime = selectedSlotRange.toLTTime;\r\n      let minuteWidthPerc =\r\n        (100 - 16) / tempslotEndTime.diff(tempslotStartTime, \"minute\");\r\n      let bayList = this.state.bayList;\r\n      let filteredBays = [];\r\n      if (slotSource === Constants.slotSource.SHIPMENT) {\r\n        filteredBays = bayList.filter(\r\n          (bay) => bay.bayType === \"BOTH\" || bay.bayType === \"LOADING\"\r\n        );\r\n      } else {\r\n        filteredBays = bayList.filter(\r\n          (bay) => bay.bayType === \"BOTH\" || bay.bayType === \"UNLOADING\"\r\n        );\r\n      }\r\n      let paginationBays = [];\r\n      let selectedBay = \"\";\r\n      if (slotSource === Constants.slotSource.SHIPMENT) {\r\n        selectedBay = this.state.filteredShipmentBayCode;\r\n      } else {\r\n        selectedBay = this.state.filteredReceiptBayCode;\r\n      }\r\n      if (selectedBay === \"-1\") {\r\n        if (filteredBays.length > 0) {\r\n          let currentPageIndex =\r\n            slotSource === Constants.slotSource.SHIPMENT\r\n              ? this.state.shipmentPageIndex\r\n              : this.state.receiptPageIndex;\r\n          let firstIndexInPage = (currentPageIndex - 1) * pageSize;\r\n          let lastIndexInPage = firstIndexInPage + pageSize;\r\n          if (lastIndexInPage >= filteredBays.length) {\r\n            lastIndexInPage = filteredBays.length;\r\n          }\r\n          paginationBays = filteredBays.slice(\r\n            firstIndexInPage,\r\n            lastIndexInPage\r\n          );\r\n        }\r\n      } else {\r\n        paginationBays = filteredBays.filter(\r\n          (bay) => bay.bayCode === selectedBay\r\n        );\r\n      }\r\n      let currentTime = dayjs();\r\n      let ltCurrentTime = currentTime.add(\r\n        -1 * slotParams.timeDifference,\r\n        \"minute\"\r\n      );\r\n      let minTimeForBook = currentTime.add(\r\n        slotParams.minSlotMinutesToBook,\r\n        \"minute\"\r\n      );\r\n      // let maxDaysBeforeBookDate = ltCurrentTime.add(\r\n      //   slotParams.maxSlotDaysToBook,\r\n      //   \"day\"\r\n      // );\r\n      // let tempSlNo=1\r\n      while (tempslotStartTime.isBefore(tempslotEndTime)) {\r\n        slotTimes.push({\r\n          fromLTTime: tempslotStartTime,\r\n          fromCurrentTime: tempslotStartTime.add(\r\n            slotParams.timeDifference,\r\n            \"minute\"\r\n          ),\r\n          toLTTime: tempslotStartTime.add(slotParams.slotDuration, \"minute\"),\r\n          toCurrentTime: tempslotStartTime\r\n            .add(slotParams.slotDuration, \"minute\")\r\n            .add(slotParams.timeDifference, \"minute\"),\r\n        });\r\n        tempslotStartTime = tempslotStartTime.add(\r\n          slotParams.slotDuration,\r\n          \"minute\"\r\n        );\r\n      }\r\n      return (\r\n        <div\r\n          className=\" tableScroll tableSlotScroll\"\r\n          style={{ overflowY: \"hidden\" }}\r\n        >\r\n          <div style={{ display: \"flex\", minWidth: \"800px\" }}>\r\n            <div className=\"slotBaySelection\">\r\n              {this.getBaySelectionControl(filteredBays, slotSource)}\r\n            </div>\r\n            {slotTimes.map((st) => {\r\n              return (\r\n                <ErrorBoundary>\r\n                  <div\r\n                    style={{\r\n                      width: \"12%\",\r\n                      textAlign: \"center\",\r\n\r\n                      margin: \"auto\",\r\n                    }}\r\n                  >\r\n                    <span style={{ paddingTop: \"0.438rem\" }}>\r\n                      {st.fromLTTime.format(\"HH:mm\")}\r\n                    </span>\r\n                  </div>\r\n                </ErrorBoundary>\r\n              );\r\n            })}\r\n          </div>\r\n          {paginationBays.map((bay) => {\r\n            //debugger;\r\n            return (\r\n              <ErrorBoundary>\r\n                <div className={bay.active ? \"\" : \"slotInActiveBay\"}>\r\n                  <div className=\"slotDetailsBayBar\">\r\n                    <div className=\"slotDetailsBayDiv\">\r\n                      <div>\r\n                        <span className=\"slotDetailsBayFont\">\r\n                          {bay.bayCode}\r\n                        </span>\r\n                      </div>\r\n\r\n                      <div>\r\n                        {this.getbayFinishedProductPopover(bay.shareholder)}\r\n                      </div>\r\n                    </div>\r\n                    {slotTimes.map((st) => {\r\n                      return (\r\n                        <ErrorBoundary>\r\n                          <div className=\"slotDetailsSlotsDiv\">\r\n                            <div className=\"slotDetailsAddIconDiv\">\r\n                              {minTimeForBook.isBefore(st.fromCurrentTime) &&\r\n                                this.state.selectedDate.diff(\r\n                                  ltCurrentTime,\r\n                                  \"day\"\r\n                                ) < slotParams.maxSlotDaysToBook &&\r\n                                // maxDaysBeforeBookDate.isAfter(\r\n                                //   st.fromLTTime,\r\n                                //   \"day\"\r\n                                // ) &&\r\n                                bay.active &&\r\n                                this.props.operationsVisibilty.add ? (\r\n                                <div\r\n                                  // className=\"iconCircle iconblock\"\r\n                                  onClick={() =>\r\n                                    this.openSlotCreateModal(\r\n                                      slotSource,\r\n                                      st.fromLTTime,\r\n                                      bay.bayCode\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  <Icon\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    root=\"common\"\r\n                                    name=\"badge-plus\"\r\n                                    exactSize={30}\r\n                                  ></Icon>\r\n                                </div>\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </ErrorBoundary>\r\n                      );\r\n                    })}\r\n\r\n                    {this.getBookedSlotsLayoutforBay(\r\n                      slotSource,\r\n                      slotsList,\r\n                      minuteWidthPerc,\r\n                      bay.bayCode\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </ErrorBoundary>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  buildPaging(slotSource) {\r\n    let bayList = this.state.bayList;\r\n    let selectedBay = \"-1\";\r\n    let filteredBays = [];\r\n    if (slotSource === Constants.slotSource.SHIPMENT) {\r\n      filteredBays = bayList.filter(\r\n        (bay) => bay.bayType === \"BOTH\" || bay.bayType === \"LOADING\"\r\n      );\r\n      selectedBay = this.state.filteredShipmentBayCode;\r\n    } else {\r\n      filteredBays = bayList.filter(\r\n        (bay) => bay.bayType === \"BOTH\" || bay.bayType === \"UNLOADING\"\r\n      );\r\n      selectedBay = this.state.filteredReceiptBayCode;\r\n    }\r\n    if (filteredBays.length > pageSize && selectedBay === \"-1\") {\r\n      return (\r\n        <ErrorBoundary>\r\n          <Pagination\r\n            totalItems={filteredBays.length}\r\n            itemsPerPage={pageSize}\r\n            activePage={\r\n              slotSource === Constants.slotSource.SHIPMENT\r\n                ? this.state.shipmentPageIndex\r\n                : this.state.receiptPageIndex\r\n            }\r\n            onPageChange={(page) => {\r\n              if (slotSource === Constants.slotSource.SHIPMENT) {\r\n                this.setState({ shipmentPageIndex: page });\r\n              } else {\r\n                this.setState({ receiptPageIndex: page });\r\n              }\r\n            }}\r\n          ></Pagination>\r\n        </ErrorBoundary>\r\n      );\r\n    } else return \"\";\r\n  }\r\n\r\n  getTabControl() {\r\n    if (\r\n      this.props.operationsVisibilty.shipments &&\r\n      this.props.operationsVisibilty.receipts\r\n    ) {\r\n      return (\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <Tab\r\n              activeIndex={this.props.defaultTabIndex}\r\n              onTabChange={(activeIndex) => {\r\n                this.props.onTabChange(activeIndex);\r\n              }}\r\n            >\r\n              <Tab.Pane title={t(\"Common_Shipments\")}>\r\n                <div>\r\n                  <ErrorBoundary>\r\n                    {this.getSlotListLayOut(\r\n                      Constants.slotSource.SHIPMENT,\r\n                      this.state.shipmentSlotsList,\r\n                      this.state.isShipmentsRefreshing\r\n                    )}\r\n                  </ErrorBoundary>\r\n                  {this.buildPaging(Constants.slotSource.SHIPMENT)}\r\n                </div>\r\n              </Tab.Pane>\r\n\r\n              <Tab.Pane title={t(\"Common_Receipts\")}>\r\n                <div>\r\n                  <ErrorBoundary>\r\n                    {this.getSlotListLayOut(\r\n                      Constants.slotSource.RECEIPT,\r\n                      this.state.receiptSlotsList,\r\n                      this.state.isReceiptsRefreshing\r\n                    )}\r\n                  </ErrorBoundary>\r\n                  {this.buildPaging(Constants.slotSource.RECEIPT)}\r\n                </div>\r\n              </Tab.Pane>\r\n            </Tab>\r\n          )}\r\n        </TranslationConsumer>\r\n      );\r\n    } else if (this.props.operationsVisibilty.shipments) {\r\n      return (\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <Tab\r\n              activeIndex={this.props.defaultTabIndex}\r\n              onTabChange={(activeIndex) => {\r\n                this.props.onTabChange(activeIndex);\r\n              }}\r\n            >\r\n              <Tab.Pane title={t(\"Common_Shipments\")}>\r\n                <div>\r\n                  {\" \"}\r\n                  <ErrorBoundary>\r\n                    {this.getSlotListLayOut(\r\n                      Constants.slotSource.SHIPMENT,\r\n                      this.state.shipmentSlotsList,\r\n                      this.state.isShipmentsRefreshing\r\n                    )}\r\n                  </ErrorBoundary>\r\n                  {this.buildPaging(Constants.slotSource.SHIPMENT)}\r\n                </div>\r\n              </Tab.Pane>\r\n            </Tab>\r\n          )}\r\n        </TranslationConsumer>\r\n      );\r\n    } else if (this.props.operationsVisibilty.receipts) {\r\n      return (\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <Tab\r\n              activeIndex={this.props.defaultTabIndex}\r\n              onTabChange={(activeIndex) => {\r\n                this.props.onTabChange(activeIndex);\r\n              }}\r\n            >\r\n              <Tab.Pane title={t(\"Common_Receipts\")}>\r\n                <div>\r\n                  {\" \"}\r\n                  <ErrorBoundary>\r\n                    {this.getSlotListLayOut(\r\n                      Constants.slotSource.RECEIPT,\r\n                      this.state.receiptSlotsList,\r\n                      this.state.isReceiptsRefreshing\r\n                    )}\r\n                  </ErrorBoundary>\r\n                  {this.buildPaging(Constants.slotSource.RECEIPT)}\r\n                </div>\r\n              </Tab.Pane>\r\n            </Tab>\r\n          )}\r\n        </TranslationConsumer>\r\n      );\r\n    }\r\n  }\r\n\r\n  getSlotKPIsPane() {\r\n    if (\r\n      this.props.operationsVisibilty.shipments &&\r\n      this.props.operationsVisibilty.receipts\r\n    ) {\r\n      if (\r\n        this.props.defaultTabIndex === 0 &&\r\n        Array.isArray(this.state.kpiList[Constants.slotSource.SHIPMENT])\r\n      ) {\r\n        return (\r\n          <ErrorBoundary>\r\n            <KPIDashboardLayout\r\n              kpiList={this.state.kpiList[Constants.slotSource.SHIPMENT]}\r\n              pageName=\"SlotDetails\"\r\n            ></KPIDashboardLayout>\r\n          </ErrorBoundary>\r\n        );\r\n      } else if (\r\n        this.props.defaultTabIndex === 1 &&\r\n        Array.isArray(this.state.kpiList[Constants.slotSource.RECEIPT])\r\n      ) {\r\n        return (\r\n          <ErrorBoundary>\r\n            <KPIDashboardLayout\r\n              kpiList={this.state.kpiList[Constants.slotSource.RECEIPT]}\r\n              pageName=\"SlotDetails\"\r\n            ></KPIDashboardLayout>\r\n          </ErrorBoundary>\r\n        );\r\n      } else {\r\n        return \"\";\r\n      }\r\n    } else if (this.props.operationsVisibilty.shipments) {\r\n      if (Array.isArray(this.state.kpiList[Constants.slotSource.SHIPMENT])) {\r\n        return (\r\n          <ErrorBoundary>\r\n            <KPIDashboardLayout\r\n              kpiList={this.state.kpiList[Constants.slotSource.SHIPMENT]}\r\n              pageName=\"SlotDetails\"\r\n            ></KPIDashboardLayout>\r\n          </ErrorBoundary>\r\n        );\r\n      } else {\r\n        return \"\";\r\n      }\r\n    } else if (this.props.operationsVisibilty.receipts) {\r\n      if (Array.isArray(this.state.kpiList[Constants.slotSource.RECEIPT])) {\r\n        return (\r\n          <ErrorBoundary>\r\n            <KPIDashboardLayout\r\n              kpiList={this.state.kpiList[Constants.slotSource.RECEIPT]}\r\n              pageName=\"SlotDetails\"\r\n            ></KPIDashboardLayout>\r\n          </ErrorBoundary>\r\n        );\r\n      } else {\r\n        return \"\";\r\n      }\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      // this.setState({\r\n      //   attribute: attribute,\r\n      // });\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors[attribute.Code] =\r\n        Utilities.valiateAttributeField(attribute, value);\r\n\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"SlotDetailsComposite:Error occured on onAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n    showBookSlotAuthenticationLayout: false,\r\n    showUpdateSlotAuthenticationLayout: false,\r\n    showCancelSlotAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n \r\n\r\n   getOperationMode() {\r\n    if(this.state.showBookSlotAuthenticationLayout)\r\n       return  functionGroups.add;\r\n    else if (this.state.showUpdateSlotAuthenticationLayout)\r\n      return functionGroups.modify;\r\n      else if (this.state.showCancelSlotAuthenticationLayout)\r\n      return functionGroups.remove;\r\n   };\r\n\r\n \r\n   handleOperation()  {\r\n  \r\n    if(this.state.showBookSlotAuthenticationLayout)\r\n      return this.handleBookSlot\r\n    else if(this.state.showUpdateSlotAuthenticationLayout)\r\n      return this.handleUpdateSlotBooking\r\n    else if(this.state.showCancelSlotAuthenticationLayout)\r\n      return this.handleCancelBooking\r\n     \r\n };\r\n\r\n\r\n  render() {\r\n    //console.log(this.state.slotRange);\r\n    let selectedDate = this.state.selectedDate;\r\n\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            {this.getSlotKPIsPane()}\r\n\r\n            <div className=\"slotLayoutOuterPane\">\r\n              <div className=\"slotDetailsPane\">\r\n                <div className=\"row lightBackground\">\r\n                  <div className=\"col-12 col-md-7 col-lg-8 slotDateColHeader\">\r\n                    <div className=\"slotBlocksDispaly\">\r\n                      <div>\r\n                        <Icon\r\n                          onClick={() => this.handleDateChanage(-1)}\r\n                          style={{ cursor: \"pointer\" }}\r\n                          root=\"common\"\r\n                          name=\"double-caret-left\"\r\n                          exactSize={24}\r\n                        ></Icon>\r\n                      </div>\r\n                      <div className=\"slotDateSpan\">\r\n                        <span>{selectedDate.format(\"DD-MMM-YYYY\")}</span>\r\n                      </div>\r\n\r\n                      <div>\r\n                        <Icon\r\n                          onClick={() => this.handleDateChanage(1)}\r\n                          style={{ cursor: \"pointer\" }}\r\n                          root=\"common\"\r\n                          name=\"double-caret-right\"\r\n                          exactSize={24}\r\n                        ></Icon>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div\r\n                    className=\"col-12 col-md-5 col-lg-4 \"\r\n                    style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                  >\r\n                    <div>\r\n                      <Icon\r\n                        onClick={() => {\r\n                          if (this.state.selectedSlotRange.slNo > 1)\r\n                            this.moveTimeRange(-1);\r\n                        }}\r\n                        style={{ cursor: \"pointer\" }}\r\n                        root=\"common\"\r\n                        name=\"double-caret-left\"\r\n                        exactSize={16}\r\n                        disabled={true}\r\n                      ></Icon>\r\n                    </div>\r\n                    <div className=\"slotTimeRangeDDL\">\r\n                      <Select\r\n                        fluid\r\n                        value={this.state.selectedSlotRange.slNo}\r\n                        options={this.getFilteredTimeRangeOptions(true)}\r\n                        onChange={(data) => {\r\n                          this.handleTimeRangeChange(data);\r\n                        }}\r\n                        reserveSpace={false}\r\n                      />\r\n                    </div>\r\n                    <div className=\"slotTimeRangeDDL\">\r\n                      <Select\r\n                        fluid\r\n                        value={this.state.selectedSlotRange.slNo}\r\n                        options={this.getFilteredTimeRangeOptions(false)}\r\n                        disabled={true}\r\n                        reserveSpace={false}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Icon\r\n                        onClick={() => {\r\n                          if (\r\n                            this.state.selectedSlotRange.slNo <\r\n                            this.state.slotRangeList.length\r\n                          )\r\n                            this.moveTimeRange(-1);\r\n                          this.moveTimeRange(1);\r\n                        }}\r\n                        style={{ cursor: \"pointer\" }}\r\n                        root=\"common\"\r\n                        name=\"double-caret-right\"\r\n                        exactSize={16}\r\n                      ></Icon>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {this.getTabControl()}\r\n                {/* <Tab\r\n                  activeIndex={this.props.defaultTabIndex}\r\n                  onTabChange={(activeIndex) => {\r\n                    this.props.onTabChange(activeIndex);\r\n                  }}\r\n                >\r\n                  <Tab.Pane title={t(\"Common_Shipments\")}>\r\n                    {this.getSlotListLayOut()}\r\n                  </Tab.Pane>\r\n                  <Tab.Pane title={t(\"Common_Receipts\")}>\r\n                    {this.getSlotListLayOut()}\r\n                  </Tab.Pane>\r\n                </Tab> */}\r\n              </div>\r\n            </div>\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={this.props.onBackClick}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n            <ErrorBoundary>\r\n              <CreateSlotComposite\r\n                modelOpen={this.state.isCreateSlotOpen}\r\n                slotCreateFields={this.state.modalSlotCreateFields}\r\n                shareholders={Utilities.transferListtoOptions(\r\n                  this.props.terminal.Value\r\n                )}\r\n                slotInfo={this.state.selectedSlotInfo}\r\n                slotCreateOptions={this.state.modalSlotCreateList}\r\n                transactionData={this.state.modalTransactionData}\r\n                isRefreshing={this.state.isCreateModalrefreshing}\r\n                transportationType={this.props.transportationType}\r\n                slotParameters={this.state.slotParameters}\r\n                bayList={this.state.bayList}\r\n                validationErrors={this.state.modalValidationErrors}\r\n                attributeValidationErrors={this.state.attributeValidationErrors}\r\n                attributesList={this.state.modAttributeMetaDataList}\r\n                modelCloseEvent={this.closeSlotCreateModal}\r\n                onChange={this.handleSlotCreateFieldsChange}\r\n                onAttributeDataChange={this.handleAttributeDataChange}\r\n                onSearchChange={this.handleModelOptionsSearchChange}\r\n                onBook={this.bookSlot}\r\n              ></CreateSlotComposite>\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n              <ModifySlotComposite\r\n                modelOpen={this.state.isModifySlotOpen}\r\n                isRefreshing={this.state.isModifyModalrefreshing}\r\n                slotModifyFields={this.state.modalSlotModifyFields}\r\n                slotInfo={this.state.selectedSlotInfo}\r\n                slotParameters={this.state.slotParameters}\r\n                transactionData={this.state.modalTransactionData}\r\n                bayList={this.state.bayList}\r\n                modifyAccess={this.props.operationsVisibilty.modify}\r\n                cancelAccess={this.props.operationsVisibilty.cancel}\r\n                validationErrors={this.state.modalValidationErrors}\r\n                attributeValidationErrors={this.state.attributeValidationErrors}\r\n                attributesList={this.state.modAttributeMetaDataList}\r\n                resultStatus={this.state.modelResultStatus}\r\n                onChange={this.handleSlotModifyFieldsChange}\r\n                onAttributeDataChange={this.handleAttributeDataChange}\r\n                modelCloseEvent={this.closeSlotModifyModal}\r\n                onModify={this.updateSlotBooking}\r\n                onCancel={this.cancelBooking}\r\n              ></ModifySlotComposite>\r\n            </ErrorBoundary>\r\n            {this.state.showBookSlotAuthenticationLayout||\r\n          this.state.showUpdateSlotAuthenticationLayout ||\r\n          this.state.showCancelSlotAuthenticationLayout   \r\n         ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={this.getOperationMode()}\r\n            functionGroup={fnSlotInformation}\r\n            handleOperation={this.handleOperation()}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(SlotDetailsComposite);\r\n\r\nSlotDetailsComposite.propTypes = {\r\n  selectedDate: PropTypes.object.isRequired,\r\n  terminal: PropTypes.object.isRequired,\r\n  slotConfigurations: PropTypes.array.isRequired,\r\n  transportationType: PropTypes.string.isRequired,\r\n  defaultTabIndex: PropTypes.number.isRequired,\r\n  attributeMetaData: PropTypes.object.isRequired,\r\n  operationsVisibilty: PropTypes.shape({\r\n    add: PropTypes.bool,\r\n    shipments: PropTypes.bool,\r\n    receipts: PropTypes.bool,\r\n    terminal: PropTypes.bool,\r\n  }).isRequired,\r\n\r\n  onBackClick: PropTypes.func.isRequired,\r\n  onTabChange: PropTypes.func.isRequired,\r\n  onDateChange: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}","!function(e,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_isBetween=i()}(this,(function(){\"use strict\";return function(e,i,t){i.prototype.isBetween=function(e,i,s,f){var n=t(e),o=t(i),r=\"(\"===(f=f||\"()\")[0],u=\")\"===f[1];return(r?this.isAfter(n,s):!this.isBefore(n,s))&&(u?this.isBefore(o,s):!this.isAfter(o,s))||(r?this.isBefore(n,s):!this.isAfter(n,s))&&(u?this.isAfter(o,s):!this.isBefore(o,s))}}}));"],"names":["CreateSlotComposite","Component","constructor","arguments","state","getSlotTimings","options","slotParams","this","props","slotParameters","dayStartTime","slotStartTime","dayEndTime","slotEndTime","slotDuration","tempStartTime","isBefore","push","text","format","value","add","error","console","log","getDurations","maxSlots","i","toString","getProductAvaiabilityList","productsList","bayProducts","filteredBays","bayList","filter","bay","bayCode","slotCreateFields","length","shareholder","lodash","transactionData","products","forEach","product","shProd","shCode","fpCodes","fp","code","getModalContent","isRefreshing","_jsx","LoadingPage","loadingClass","message","slotInfo","TranslationConsumer","children","t","_jsxs","className","ReferenceNumber","dayjs","StartTime","timeDifference","EndTime","transportationType","Constants","ROAD","LocationCode","TransactionType","SHIPMENT","TransactionCode","InputLabel","fluid","label","slotTime","Select","onChange","data","reserveSpace","shareholders","slotSource","RECEIPT","Radio","name","checked","ORDER","CONTRACT","orderCode","Utilities","slotCreateOptions","filteredorders","onSearch","query","onSearchChange","search","noResultsMessage","contractCode","filteredcontracts","shipmentCode","filteredshipments","receiptCode","filteredreceipts","Input","remarks","style","display","justifyContent","width","carrier","vehicle","driver","map","isAvailable","quantity","UOM","attributesList","attribute","ErrorBoundary","Accordion","Content","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","handleCellDataEdit","onAttributeDataChange","attributeValidationErrors","render","Modal","closeIcon","onClose","modelCloseEvent","open","modelOpen","size","closeOnDimmerClick","Header","terminalCode","Footer","status","Button","type","content","onClick","onBook","Array","isArray","validationErrors","ModifySlotComposite","slotModifyFields","getFilteredBays","allBays","transactionProducts","active","sh","tpProduct","resultStatus","modify","TransportationType","cancel","disabled","minSlotChangeMinutes","DatePicker","toDate","displayFormat","getCurrentDateFormat","showYearSelector","onTextChange","indicator","ShareholderCode","modifyAccess","onModify","cancelAccess","onCancel","SlotDetailsComposite","refreshTimer","slotRangeList","selectedSlotRange","slNo","fromLTTime","fromCurrentTime","toLTTime","toCurrentTime","minSlotMinutesToBook","maxSlotDaysToBook","refreshTime","terminal","Key","Code","shipmentSlotsList","receiptSlotsList","selectedDate","isShipmentsRefreshing","isReceiptsRefreshing","isCreateSlotOpen","modalSlotCreateFields","transactionType","attributes","modalSlotCreateList","orders","contracts","shipments","receipts","isCreateModalrefreshing","modalTransactionData","modalValidationErrors","modelResultStatus","isModifySlotOpen","isModifyModalrefreshing","modalSlotModifyFields","transactionCode","selectedSlotInfo","kpiList","shipmentPageIndex","receiptPageIndex","filteredShipmentBayCode","filteredReceiptBayCode","modAttributeMetaDataList","showBookSlotAuthenticationLayout","showUpdateSlotAuthenticationLayout","showCancelSlotAuthenticationLayout","tempSlotInfo","startRefreshTimer","setInterval","operationsVisibilty","getSlotsList","getKPIList","stopRefreshTimer","clearInterval","handleDateChanage","duration","setState","getConfigurationsAndSlotsList","onDateChange","handleSlotModifyFieldsChange","fieldName","timeSplits","split","set","modslotTime","get","isNaN","handleSlotCreateFieldsChange","prepareKeyDataforAvailableTransactions","closeSlotModifyModal","closeSlotCreateModal","userDetails","EntityResult","PrimaryShareholder","filteredOrders","handleModelOptionsSearchChange","arrayName","filteredOptions","item","toLowerCase","includes","slice","cancelBooking","validateCancelSlot","Remarks","IsWebPortalUser","handleCancelBooking","handleAuthenticationClose","obj","ShareHolderCode","keyDataCode","KeyCodes","Entity","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","IsSuccess","ErrorList","catch","updateSlotBooking","validateUpdateSlot","attributeList","attributesValidation","validateAttributes","getSlotLTEndTimeForSave","Attributes","handleUpdateSlotBooking","bookSlot","validateBookSlot","Status","BOOKED","TerminalCode","handleBookSlot","handleAttributeDataChange","matchedAttributes","matchedAttributesList","modattribute","DefaultValue","componentWillUnmount","arrTimeRange","terminalTimeZone","TimeZone","selectedConfigurations","slotConfigurations","sc","Date","getTimezoneOffset","startTime","endTime","maxNoOfSlots","operationalParams","SlotParams","sp","Name","Value","diff","tempslotStartTime","tempslotEndTime","tmpSlNo","currentDayjs","selectedSlotRanges","tr","notification","messageType","messageResultDetails","objKPIRequestData","PageName","kpiSlotDetailsShipmentList","kpiSlotDetailsReceiptList","InputParameters","key","ListKPIDetails","driverKPIList","keyFields","keyValues","isSuccess","errorMessage","toast","NotifyEvent","notificationMessage","autoClose","slotRequestInfo","TransactionSource","FromDate","ToDate","fieldNameChanged","requestTransactionInfoToBookSlot","CreatedFrom","None","TransactionSourceCode","getAvailableTransactionsToBook","ordercode","Order","Contract","getShipment","getReceipt","modalType","getTruckShipment","MARINE","getMarineShipment","getTruckReceipt","getMarineReceipt","modalSlotFields","keyCode","shipment","DriverCode","VehicleCode","CarrierCode","ShipmentDetailsInfo","sd","FinishedProductCode","Quantity","QuantityUOM","receipt","ReceiptStatus","ReceiptCompartmentsInfo","rc","receiptProducts","GeneralTMUser","VesselCode","RailMarineReceiptCompartmentDetailPlanList","DispatchStatus","DispatchCompartmentDetailPlanList","shipmentProducts","requestInfo","arrayToUpdate","getFilteredTimeRangeOptions","isFrom","ft","handleTimeRangeChange","selectedRangeList","sr","moveTimeRange","noOfMoves","filterAttributeMetaData","slotsource","attributeType","undefined","terminaAttributeMetaData","find","slotInfoAttribute","attributeMetaData","attributeValue","ListOfAttributeData","AttributeCode","AttributeValue","getBaysforTerminal","bayItem","BayCode","Active","bayType","BayType","SupportedProducts","shareholderArray","Shareholdercode","componentDidMount","IsArchived","getFPSpans","fpArray","isFullDisplay","fpSpans","index","entries","getbayFinishedProductPopover","shArray","Popup","position","on","element","getShareholderFPElements","Card","isfullDisplay","shareholderElements","getBookedSlotsLayoutforBay","slotsList","minuteWidthPerc","locationCode","bookedDivs","srCurrentStartTime","srCurrentEndTime","dayJSBetween","si","isBetween","subtract","bookingclassName","bookingclassNameBar","leftPerc","widthPerc","window","innerWidth","isAfter","IsAuthorized","COMPLETED","left","cursor","openSlotModifyModal","NoOfSlots","openSlotCreateModal","oldRemarks","newRemarks","match","slotCurrentStartTime","slotLTStartTime","slotLTEndTime","slotCurrentEndTime","tempdayLTStartTime","tempdayLTEndTime","startDaysDiff","localTime","returnValue","Object","values","every","startLTTime","tempDuarion","ltEndTime","getBaySelectionControl","bays","bayOptions","getSlotListLayOut","slotTimes","paginationBays","selectedBay","firstIndexInPage","lastIndexInPage","currentTime","ltCurrentTime","minTimeForBook","overflowY","minWidth","st","textAlign","margin","paddingTop","Icon","root","exactSize","buildPaging","Pagination","totalItems","itemsPerPage","activePage","onPageChange","page","getTabControl","Tab","activeIndex","defaultTabIndex","onTabChange","Pane","getSlotKPIsPane","KPIDashboardLayout","pageName","getOperationMode","functionGroups","remove","handleOperation","onBackClick","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","fnSlotInformation","handleClose","connect","getUserDetails","TokenAuth","_ref","handleAttributeDateValue","convertAttributeDatetoString","chars","Dateval","getFullYear","getMonth","getDate","DataType","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","INT","LONG","FLOAT","DOUBLE","BOOL","Checkbox","DATETIME","toLocaleString","getOptionsWithSelect","ddlOptions","selectOptionText","option","unshift","language","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class","module","exports","e","prototype","s","f","n","o","r","u"],"sourceRoot":""}