{"version":3,"file":"static/js/3235.3cd4e31a.chunk.js","mappings":"oKAqBO,SAASA,EAAeC,GAAgD,IAA/C,WAAEC,EAAU,cAAEC,EAAa,cAAEC,GAAeH,EAC1E,OACEI,EAAAA,EAAAA,KAACC,EAAAA,oBAAmB,CAAAC,SAChBC,IACAH,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kBAAiBF,UAC9BG,EAAAA,EAAAA,MAAA,OAAKD,UAAU,oBAAmBF,SAAA,EAChCF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,4BAA2BF,UACxCF,EAAAA,EAAAA,KAAA,QAAMM,MAAO,CAAEC,OAAQ,QAAUH,UAAU,cAAaF,SACtC,KAAfL,QAAoCW,IAAfX,EAClBM,EAAEL,GACFD,MAGQ,KAAfA,QACcW,IAAfX,GACAE,EAAcU,OAAS,GACrBT,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kBAAiBF,UAC9BF,EAAAA,EAAAA,KAACU,EAAAA,MAAK,CACJC,SACEN,EAAAA,EAAAA,MAAA,OAAAH,SAAA,CACGC,EAAEJ,EAAc,GAAGa,WAAa,IAAI,IACpC,IAAMb,EAAc,GAAGc,YACxBb,EAAAA,EAAAA,KAACc,EAAAA,KAAI,CACHR,MAAO,CAAES,WAAY,QACrBC,KAAK,SACLC,KAAK,aACLC,KAAK,aAIXC,SAAS,cACTjB,UAEAF,EAAAA,EAAAA,KAACoB,EAAAA,KAAI,CAAChB,UAAU,qBAAoBF,SACjCH,EAAcsB,KAAKC,IAClBjB,EAAAA,EAAAA,MAACe,EAAAA,KAAKG,QAAO,CAEXnB,UAAU,gCAA+BF,SAAA,CAExCC,EAAEmB,EAAQV,WAAa,IAAI,IAAE,IAAMU,EAAQT,aAHxC,6BAUd,SAOd,CA3DAlB,EAAgB6B,aAAe,CAC7B3B,WAAY,GACZC,cAAe,GACfC,cAAe,IA0DjB,S,6GCzEO,SAAS0B,EAAqBC,EAAYC,GAC/C,GAAIC,MAAMC,QAAQH,GAAa,CAIA,IAHTA,EAAWI,QAC5BC,GAAWA,EAAOC,OAASL,IAEZlB,QAChBiB,EAAWO,QAAQ,CACjBC,MAAO,KACPF,KAAML,GAEZ,CACA,OAAOD,CACT,CAEO,SAASS,IACd,IAAIC,EAAWC,OAAOC,UAAUC,cAAgBF,OAAOC,UAAUF,SAMjE,OALAI,IAAAA,OAAcJ,GACGI,IAAAA,aAEOC,eAAe,IAGzC,CAGO,SAASC,EAAgCC,GAC9C,OACEtC,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EAAKF,EAAAA,EAAAA,KAAA,QAAAE,SAAOyC,KAAY3C,EAAAA,EAAAA,KAAA,OAAK4C,MAAM,wDAEvC,C","sources":["Components/UIBase/Common/TMDetailsHeader.jsx","JS/functionalUtilities.js"],"sourcesContent":["import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["TMDetailsHeader","_ref","entityCode","newEntityName","popUpContents","_jsx","TranslationConsumer","children","t","className","_jsxs","style","margin","undefined","length","Popup","element","fieldName","fieldValue","Icon","marginLeft","root","name","size","position","List","map","content","Content","defaultProps","getOptionsWithSelect","ddlOptions","selectOptionText","Array","isArray","filter","option","text","unshift","value","getCurrentDateFormat","language","window","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","data","class"],"sourceRoot":""}