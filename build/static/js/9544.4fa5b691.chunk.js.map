{"version":3,"file":"static/js/9544.4fa5b691.chunk.js","mappings":"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","sources":["Components/UIBase/Common/TMUserActions.jsx","Components/Composite/Common/TMUserActionsComposite.jsx","Components/UIBase/Details/ProductForecastConfigurationDetail.jsx","Components/Composite/Details/ProductForecastConfigurationDetailComposite.jsx","Components/Composite/Entity/ProductForecastConfigurationComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","JS/FunctionGroups.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Icon,\r\n  Breadcrumb,\r\n  Select,\r\n  Modal,\r\n  Button,\r\n  Popup,\r\n  VerticalMenu,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nTMUserActions.propTypes = {\r\n  operationsVisibilty: PropTypes.shape({\r\n    add: PropTypes.bool,\r\n    delete: PropTypes.bool,\r\n    shareholder: PropTypes.bool,\r\n  }).isRequired,\r\n  breadcrumbItem: PropTypes.shape({\r\n    itemName: PropTypes.string,\r\n    itemCode: PropTypes.string,\r\n    itemProps: PropTypes.any,\r\n    localizedKey: PropTypes.string,\r\n    parents: PropTypes.array,\r\n    isComponent: PropTypes.bool,\r\n  }).isRequired,\r\n  shareholders: PropTypes.array.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onShareholderChange: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onAdd: PropTypes.func.isRequired,\r\n  popUpContent: PropTypes.array,\r\n};\r\nTMUserActions.defaultProps = {\r\n  operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n  breadcrumbItem: {\r\n    itemName: \"\",\r\n    itemCode: \"\",\r\n    localizedKey: \"\",\r\n    itemProps: {},\r\n    parents: [],\r\n    isComponent: false,\r\n  },\r\n  shareholders: [],\r\n  selectedShareholder: \"\",\r\n  popUpContent: [],\r\n  shrVisible: true,\r\n  addVisible: true,\r\n  deleteVisible: true\r\n};\r\nexport function TMUserActions({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [popUpOpen, setPopUpOpen] = useState(false);\r\n  function getShareholderDropdownOptions() {\r\n    return Utilities.transferListtoOptions(shareholders);\r\n    // var List = [];\r\n    // shareholders.forEach((element) => {\r\n    //   List.push({ text: element, value: element });\r\n    // });\r\n    // return List;\r\n  }\r\n\r\n  function buildBreadcrumb() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {breadcrumbItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item\r\n                  onClick={() => {\r\n                    if (\r\n                      handleBreadCrumbClick !== undefined &&\r\n                      handleBreadCrumbClick !== null\r\n                    ) {\r\n                      handleBreadCrumbClick(\r\n                        parentitem.itemCode,\r\n                        breadcrumbItem.parents\r\n                      );\r\n                    }\r\n                  }}\r\n                  key={parentitem.itemCode}\r\n                >\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={breadcrumbItem.itemCode}>\r\n              {t(breadcrumbItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  function handlePopUpClick() {\r\n    if (operationsVisibilty.add) {\r\n      if (popUpContent.length > 0) {\r\n        if (popUpOpen === false) setPopUpOpen(true);\r\n        else setPopUpOpen(false);\r\n      } else {\r\n        onAdd();\r\n      }\r\n    }\r\n  }\r\n\r\n  function popUpMenuClick(menuItem) {\r\n    setPopUpOpen(false);\r\n    onAdd(menuItem);\r\n  }\r\n  function displayIcons() {\r\n    return (\r\n      <div\r\n        style={{ float: \"right\", display: \"inline-block\", marginTop: \"10px\" }}\r\n      >\r\n        {addVisible ? <Popup\r\n          position=\"bottom right\"\r\n          className=\"popup-theme-wrap\"\r\n          element={\r\n            <div\r\n              className={\r\n                (operationsVisibilty.add\r\n                  ? \"iconCircle \"\r\n                  : \"iconCircleDisable \") + \"iconblock\"\r\n              }\r\n              onClick={handlePopUpClick}\r\n            >\r\n              <Icon\r\n                root=\"common\"\r\n                name=\"badge-plus\"\r\n                size=\"small\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          }\r\n          on=\"click\"\r\n          open={popUpOpen}\r\n        >\r\n          <div onMouseLeave={() => setPopUpOpen(false)}>\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <VerticalMenu>\r\n                  <VerticalMenu>\r\n                    <VerticalMenu.Header>\r\n                      {t(\"Common_Create\")}\r\n                    </VerticalMenu.Header>\r\n                    {popUpContent.map((item) => {\r\n                      return (\r\n                        <VerticalMenu.Item\r\n                          onClick={() => popUpMenuClick(item.fieldName)}\r\n                        >\r\n                          {t(item.fieldValue)}\r\n                        </VerticalMenu.Item>\r\n                      );\r\n                    })}\r\n                  </VerticalMenu>\r\n                </VerticalMenu>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        </Popup> : \"\"}\r\n        {deleteVisible ? <div\r\n          style={{ marginLeft: \"10px\" }}\r\n          onClick={() => {\r\n            if (operationsVisibilty.delete) {\r\n              setModelOpen(true);\r\n              //displayTMModalforDelete();\r\n              //onDelete();\r\n            }\r\n          }}\r\n          className={\r\n            (operationsVisibilty.delete\r\n              ? \"iconCircle \"\r\n              : \"iconCircleDisable \") + \"iconblock\"\r\n          }\r\n        >\r\n          <Icon root=\"common\" name=\"delete\" size=\"small\" color=\"white\" />\r\n        </div> : \"\"}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayTMModalforDelete() {\r\n    //console.log(\"entered to display modal actions\");\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  onDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n    //return <TMModal open={true}></TMModal>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\" style={{ alignItems: \"flex-start\", padding: \"0px\" }}>\r\n      <div\r\n        className=\"col-9 col-sm-9 col-md-9 col-lg-10 col-xl-10\"\r\n        style={{ padding: \"0px\" }}\r\n      >\r\n        <div className=\"row\" style={{ marginTop: \"10px\", alignItems: \"\" }}>\r\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n            <ErrorBoundary> {buildBreadcrumb()}</ErrorBoundary>\r\n          </div>\r\n          <div\r\n            className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-4\"\r\n          //style={{ verticalAlign: \"middle\" }}\r\n          >\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <div\r\n                  className=\"compartmentIcon\"\r\n                  style={{ justifyContent: \"flex-start\" }}\r\n                >\r\n                  {shrVisible === false ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <div>\r\n                        <h4 className=\"shrText\">{t(\"Common_Shareholder\")}:</h4>\r\n                      </div>\r\n                      <div className=\"opSelect\">\r\n                        <Select\r\n                          //className=\"opSelect\"\r\n                          placeholder={t(\"Common_Shareholder\")}\r\n                          value={selectedShareholder}\r\n                          disabled={!operationsVisibilty.shareholder}\r\n                          options={getShareholderDropdownOptions()}\r\n                          onChange={(value) => onShareholderChange(value)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n\r\n          {displayTMModalforDelete()}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-3 col-sm-3 col-md-3 col-lg-2 col-xl-2\">\r\n        {displayIcons()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TMUserActions } from \"../../UIBase/Common/TMUserActions\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nexport function TMUserActionsComposite({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n\r\n}) {\r\n  return (\r\n    <TMUserActions\r\n      operationsVisibilty={operationsVisibilty}\r\n      breadcrumbItem={breadcrumbItem}\r\n      shareholders={shareholders}\r\n      selectedShareholder={selectedShareholder}\r\n      onShareholderChange={onShareholderChange}\r\n      onDelete={onDelete}\r\n      onAdd={onAdd}\r\n      popUpContent={popUpContent}\r\n      shrVisible={shrVisible}\r\n      handleBreadCrumbClick={handleBreadCrumbClick}\r\n      addVisible={addVisible}\r\n      deleteVisible={deleteVisible}\r\n    ></TMUserActions>\r\n  );\r\n}\r\n","import { Checkbox, Input, Select, Tooltip } from '@scuf/common';\r\nimport { TranslationConsumer } from '@scuf/localization';\r\nimport React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorBoundary from '../../ErrorBoundary';\r\n\r\nconst ProductForecastConfigurationDetail = (props) => {\r\n\r\n    const renderControl = (translator, controlInfo) => {\r\n        // display textbox control\r\n        if (controlInfo.DataType === \"string\" ||\r\n            controlInfo.DataType === \"int\" ||\r\n            controlInfo.DataType === \"decimal\") {\r\n            return <Tooltip\r\n                element={<Input\r\n                    fluid\r\n                    indicator=\"required\"\r\n                    disabled={false}\r\n                    label={translator(controlInfo.Name + \"_label\")}\r\n                    onChange={(data) => props.onChange(controlInfo.Name, data)}\r\n                    reserveSpace={false}\r\n                    error={translator(props.validationErrors[controlInfo.Name])}\r\n                    value={controlInfo.Value}\r\n                />\r\n                }\r\n                hoverable={true}\r\n                event=\"hover\"\r\n                content={translator(controlInfo.Name + \"_tooltip\")}\r\n            />\r\n        }\r\n        // display dropdwon control with select-all checkbox\r\n        else if (controlInfo.DataType === \"multiselect\") {\r\n            let options = getDropdownOptionsForSelect(controlInfo);\r\n\r\n            let selectedOptions = Array.isArray(controlInfo.Value) ? controlInfo.Value : (\r\n                controlInfo.Value === \"\" ? [] : controlInfo.Value.split(\",\")\r\n            );\r\n\r\n            return (\r\n                <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                    <div style={{ width: \"80%\" }}>\r\n                        <Tooltip\r\n                            element={\r\n                                <Select\r\n                                    fluid\r\n                                    indicator=\"required\"\r\n                                    multiple={true}\r\n                                    options={options}\r\n                                    disabled={false}\r\n                                    placeholder={translator(\"Select\")}\r\n                                    label={translator(controlInfo.Name + \"_label\")}\r\n                                    onChange={(value) => props.onChange(controlInfo.Name, value.join())}\r\n                                    reserveSpace={false}\r\n                                    error={translator(props.validationErrors[controlInfo.Name])}\r\n                                    search={false}\r\n                                    value={selectedOptions}\r\n                                />\r\n                            }\r\n                            content={translator(controlInfo.Name + \"_tooltip\")}\r\n                            hoverable={true}\r\n                            event=\"hover\"\r\n                        />\r\n                    </div>\r\n                    <div className='ddlSelectAll'>\r\n                        <Tooltip\r\n                            element={\r\n                                <Checkbox\r\n                                    label={translator(\"Common_All\")}\r\n                                    checked={\r\n                                        selectedOptions.length === options.length\r\n                                    }\r\n                                    onChange={(checked) => props.onCheckAllChange(checked, controlInfo.Name)}\r\n                                ></Checkbox>\r\n                            }\r\n                            content={translator(controlInfo.Name + \"_checkAll_tooltip\")}\r\n                            event=\"hover\"\r\n                            hoverable={true}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        // display dropdown for single selection dropdown\r\n        else if (controlInfo.DataType === \"select\") {\r\n            let options = getDropdownOptionsForSelect(controlInfo);\r\n\r\n            return (\r\n                <Tooltip\r\n                    element={\r\n                        <Select\r\n                            fluid\r\n                            indicator='required'\r\n                            multiple={false}\r\n                            disabled={false}\r\n                            options={options}\r\n                            placeholder={translator(\"Select\")}\r\n                            label={translator(controlInfo.Name + \"_label\")}\r\n                            onChange={(value) => props.onChange(controlInfo.Name, value)}\r\n                            reserveSpace={false}\r\n                            error={translator(props.validationErrors[controlInfo.Name])}\r\n                            search={false}\r\n                            value={controlInfo.Value === \"\" ? null : controlInfo.Value}\r\n                        />\r\n                    }\r\n                    hoverable={true}\r\n                    event=\"hover\"\r\n                    content={translator(controlInfo.Name + \"_tooltip\")}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    // populate parameters in an array object for dropdowns\r\n    const getDropdownOptionsForSelect = (item) => {\r\n        let options = [];\r\n\r\n        if (Object.keys(props.controlParameters).includes(item.Name) &&\r\n            Array.isArray(props.controlParameters[item.Name])) {\r\n            props.controlParameters[item.Name].forEach(elem => {\r\n                options.push({\r\n                    text: elem,\r\n                    value: elem\r\n                });\r\n            });\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <div className='detailsContainer'>\r\n                <TranslationConsumer>\r\n                    {\r\n                        (t) => (\r\n                            <div className='row mt-3'>\r\n                                {\r\n                                    props.modProductForecastConfiguration.ProductForecastParams.map(param => {\r\n                                        return (\r\n                                            <div className='col-12 col-md-6 col-lg-4'>\r\n                                                {renderControl(t, param)}\r\n                                            </div>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        )\r\n                    }\r\n                </TranslationConsumer>\r\n            </div>\r\n        </ErrorBoundary>\r\n    );\r\n}\r\n\r\nProductForecastConfigurationDetail.propTypes = {\r\n    modProductForecastConfiguration: PropTypes.object.isRequired,\r\n    controlParameters: PropTypes.object.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    onCheckAllChange: PropTypes.func\r\n}\r\n\r\nexport default ProductForecastConfigurationDetail;","import React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport NotifyEvent from '../../../JS/NotifyEvent';\r\nimport axios from 'axios';\r\nimport ErrorBoundary from '../../ErrorBoundary';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport TMDetailsHeader from '../../UIBase/Common/TMDetailsHeader';\r\nimport ProductForecastConfigurationDetail from '../../UIBase/Details/ProductForecastConfigurationDetail';\r\nimport { Button } from '@scuf/common';\r\nimport { TranslationConsumer } from '@scuf/localization';\r\nimport { productForecastParameterValidationDef } from '../../../JS/ValidationDef';\r\nimport { LoadingPage } from '../../UIBase/Common/LoadingPage';\r\nimport {\r\n    fnProductForecastConfiguration,\r\n    functionGroups,\r\n} from \"../../../JS/FunctionGroups\";\r\n\r\nclass ProductForecastConfigurationDetailComposite extends React.Component {\r\n    state = {\r\n        terminalCode: null,\r\n        productForecastConfig: {},\r\n        modProductForecastConfig: {},\r\n        isNew: false,\r\n        validationErrors: Utilities.getInitialValidationErrors(\r\n            productForecastParameterValidationDef\r\n        ),\r\n        controlParameters: {},\r\n        isReadyToRender: false,\r\n        saveEnabled: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        // get terminals\r\n        this.getTerminals()\r\n            .then(terminalCode => {\r\n                this.setState({\r\n                    terminalCode: terminalCode\r\n                }, () => {\r\n                    // fetch product forecast configuration when terminal code is available\r\n                    if (terminalCode !== \"\")\r\n                        this.getProductForecastConfiguration();\r\n                })\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    // populate default values for parameters list object\r\n    populateDefaultValuesForCreate = (pfConfig) => {\r\n        try {\r\n            if (Array.isArray(pfConfig)) {\r\n                // return parameters list object with default value populated in 'Value' property\r\n                return pfConfig.map(param => {\r\n                    return {\r\n                        ...param,\r\n                        Value: (param.Value === \"\" ? param.DefaultValue : param.Value)\r\n                    }\r\n                })\r\n            }\r\n\r\n            return pfConfig;\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in populateDefaultValuesForCreate(): \", error);\r\n            return pfConfig;\r\n        }\r\n    }\r\n\r\n    // fetch product forecast configuration\r\n    getProductForecastConfiguration = () => {\r\n        try {\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"ProductForecastConfigurationsEmpty\",\r\n                messageResultDetails: [],\r\n            };\r\n\r\n            axios(\r\n                RestAPIs.GetProductForecastConfiguration + \"?TerminalCode=\" + this.state.terminalCode + \"&GetIfEmpty=true\",\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            ).then(response => {\r\n                let result = response.data;\r\n                if (result.IsSuccess) {\r\n                    let isNew = false;\r\n                    if (Array.isArray(result.EntityResult.ProductForecastParams) &&\r\n                        result.EntityResult.ProductForecastParams.length > 0 &&\r\n                        result.EntityResult.ProductForecastParams[0].Value === \"\") {\r\n                        isNew = true;\r\n                        notification = {\r\n                            messageType: \"critical\",\r\n                            message: \"ProductForecastConfiguration_New\",\r\n                            messageResultDetails: [],\r\n                        };\r\n                        toast(\r\n                            <ErrorBoundary>\r\n                                <NotifyEvent\r\n                                    notificationMessage={notification}\r\n                                ></NotifyEvent>\r\n                            </ErrorBoundary>,\r\n                            {\r\n                                autoClose:\r\n                                    notification.messageType === \"success\"\r\n                                        ? 10000\r\n                                        : false,\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                    this.setState({\r\n                        productForecastConfig: { ...result.EntityResult },\r\n                        modProductForecastConfig: {\r\n                            ...result.EntityResult,\r\n                            ProductForecastParams: this.populateDefaultValuesForCreate(result.EntityResult.ProductForecastParams)\r\n                        },\r\n                        isNew: isNew,\r\n                        // saveEnabled: true\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            isNew\r\n                                ? functionGroups.add\r\n                                : functionGroups.modify,\r\n                            fnProductForecastConfiguration\r\n                        )\r\n                    }, () => {\r\n                        // fetch parameters for the controls once state is updated\r\n                        this.getControlParameters();\r\n                        this.setState({\r\n                            isReadyToRender: true\r\n                        });\r\n                    });\r\n                }\r\n                else {\r\n                    toast(\r\n                        <ErrorBoundary>\r\n                            <NotifyEvent\r\n                                notificationMessage={notification}\r\n                            ></NotifyEvent>\r\n                        </ErrorBoundary>,\r\n                        {\r\n                            autoClose:\r\n                                notification.messageType === \"success\"\r\n                                    ? 10000\r\n                                    : false,\r\n                        }\r\n                    );\r\n                    console.log(\r\n                        \"Error while getting getProductForecastConfigurations:\",\r\n                        result\r\n                    );\r\n                    this.setState({\r\n                        isReadyToRender: true\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                console.log(error);\r\n                this.setState({\r\n                    isReadyToRender: true\r\n                });\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in getProductForecastConfiguration(): \", error);\r\n            this.setState({\r\n                isReadyToRender: true\r\n            });\r\n        }\r\n    }\r\n\r\n    // get parameters for dropdown controls\r\n    getControlParameters = () => {\r\n        try {\r\n            this.state.productForecastConfig.ProductForecastParams.forEach(param => {\r\n                // if API is available, fetch data and populate for respective control\r\n                if (param.API) {\r\n                    axios(\r\n                        RestAPIs.WebAPIURL + param.API,\r\n                        Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n                    ).then(response => {\r\n                        if (response.data.IsSuccess) {\r\n                            let data = response.data.EntityResult;\r\n                            this.setState({\r\n                                controlParameters: {\r\n                                    ...this.state.controlParameters,\r\n                                    [param.Name]: data\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            this.setState({\r\n                                controlParameters: {\r\n                                    ...this.state.controlParameters,\r\n                                    [param.Name]: null\r\n                                }\r\n                            });\r\n                        }\r\n                    }).catch(error => {\r\n                        console.log(\"Error in fetching control parameters for ProductForecastConfiguration\", error);\r\n                        this.setState({\r\n                            controlParameters: {\r\n                                ...this.state.controlParameters,\r\n                                [param.Name]: null\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in getControlParameters(): \", error);\r\n        }\r\n    }\r\n\r\n    // fetch terminal list asynchronously\r\n    async getTerminals() {\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"TerminalList_NotAvailable\",\r\n            messageResultDetails: [],\r\n        };\r\n\r\n        // return axios promise\r\n        return await axios(\r\n            RestAPIs.GetTerminalDetailsForUser,\r\n            Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    if (\r\n                        Array.isArray(result.EntityResult) &&\r\n                        result.EntityResult.length > 0\r\n                    ) {\r\n                        return result.EntityResult[0].Key.Code;\r\n                    } else {\r\n                        console.log(\"Error while getting Terminal List:\", result);\r\n                        toast(\r\n                            <ErrorBoundary>\r\n                                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                            </ErrorBoundary>,\r\n                            {\r\n                                autoClose:\r\n                                    notification.messageType === \"success\" ? 10000 : false,\r\n                            }\r\n                        );\r\n\r\n                        return \"\";\r\n                    }\r\n                } else {\r\n                    console.log(\"Error while getting Terminal List:\", result);\r\n                    toast(\r\n                        <ErrorBoundary>\r\n                            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                        </ErrorBoundary>,\r\n                        {\r\n                            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n                        }\r\n                    );\r\n\r\n                    return \"\";\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                toast(\r\n                    <ErrorBoundary>\r\n                        <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                    </ErrorBoundary>,\r\n                    {\r\n                        autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n                    }\r\n                );\r\n                console.log(\"Error while getting Terminal List:\", error);\r\n\r\n                return \"\";\r\n            });\r\n    }\r\n\r\n    // handle change in value of controls\r\n    handleChange = (propertyName, value) => {\r\n        try {\r\n            // update state based on control key (propertyName)\r\n            const updatedProductForecastConfig = {\r\n                ...this.state.modProductForecastConfig,\r\n                ProductForecastParams: this.state.modProductForecastConfig.ProductForecastParams.map(param => {\r\n                    if (param.Name === propertyName) {\r\n                        return {\r\n                            ...param,\r\n                            Value: value\r\n                        };\r\n                    }\r\n\r\n                    return param;\r\n                })\r\n            };\r\n\r\n            this.setState({\r\n                modProductForecastConfig: updatedProductForecastConfig\r\n            }, () => {\r\n                // check validations\r\n                if (Object.keys(this.state.validationErrors).includes(propertyName)) {\r\n                    let validations = Utilities.validateField(\r\n                        productForecastParameterValidationDef[propertyName],\r\n                        value\r\n                    );\r\n\r\n                    this.setState({\r\n                        validationErrors: {\r\n                            ...this.state.validationErrors,\r\n                            [propertyName]: validations\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error updating values: \" + error);\r\n        }\r\n    }\r\n\r\n    // validate all the control values\r\n    validate = () => {\r\n        const validations = {};\r\n        const validationDefKeys = Object.keys(productForecastParameterValidationDef);\r\n        this.state.modProductForecastConfig.ProductForecastParams.forEach(param => {\r\n            if (validationDefKeys.includes(param.Name)) {\r\n                validations[param.Name] = Utilities.validateField(\r\n                    productForecastParameterValidationDef[param.Name],\r\n                    param.Value\r\n                );\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            validationErrors: validations\r\n        });\r\n\r\n        return !Object.values(validations).filter(value => value !== \"\").length > 0;\r\n    }\r\n\r\n    // save button click event handler, redirects to create/update\r\n    handleSave = () => {\r\n        try {\r\n            if (this.validate()) {\r\n                this.setState({ saveEnabled: false }, () => {\r\n                    const requestObj = {\r\n                        Entity: { ...this.state.modProductForecastConfig }\r\n                    }\r\n\r\n                    // if configuration does not exist, create configuration, else update configuration\r\n                    if (this.state.isNew) {\r\n                        this.createConfiguration(requestObj);\r\n                    }\r\n                    else {\r\n                        this.updateConfiguration(requestObj);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error saving product forecast configuration: \", error);\r\n        }\r\n    }\r\n\r\n    // create product forecast configuration\r\n    createConfiguration = (obj) => {\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"ProductForecastConfiguration_SavedStatus\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [\"TerminalCode\"],\r\n                    keyValues: [this.state.terminalCode],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n\r\n        axios(\r\n            RestAPIs.CreateProductForecastConfiguration,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        ).then(response => {\r\n            let result = response.data;\r\n            notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (!result.IsSuccess) {\r\n                notification.messageResultDetails[0].errorMessage =\r\n                    result.ErrorList[0];\r\n                this.setState({\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnProductForecastConfiguration\r\n                    )\r\n                });\r\n            }\r\n            else {\r\n                this.getProductForecastConfiguration();\r\n            }\r\n\r\n            this.props.onNotice(notification);\r\n        }).catch(error => {\r\n            this.setState({\r\n                saveEnabled: Utilities.isInFunction(\r\n                    this.props.userDetails.EntityResult.FunctionsList,\r\n                    functionGroups.add,\r\n                    fnProductForecastConfiguration\r\n                )\r\n            });\r\n            notification.messageResultDetails[0].errorMessage = error;\r\n            console.log(\"Error creating product forecast configuration: \", error);\r\n            this.props.onNotice(notification);\r\n        })\r\n    }\r\n\r\n    // update product forecasting confguration\r\n    updateConfiguration = (obj) => {\r\n        let notification = {\r\n            messageType: \"critical\",\r\n            message: \"ProductForecastConfiguration_SavedStatus\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [\"TerminalCode\"],\r\n                    keyValues: [this.state.terminalCode],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n\r\n        axios(\r\n            RestAPIs.UpdateProductForecastConfiguration,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        ).then(response => {\r\n            let result = response.data;\r\n            notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n            notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n            if (!result.IsSuccess) {\r\n                notification.messageResultDetails[0].errorMessage =\r\n                    result.ErrorList[0];\r\n                this.setState({\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.modify,\r\n                        fnProductForecastConfiguration\r\n                    )\r\n                });\r\n            }\r\n            else {\r\n                this.getProductForecastConfiguration();\r\n            }\r\n\r\n            this.props.onNotice(notification);\r\n        }).catch(error => {\r\n            this.setState({\r\n                saveEnabled: Utilities.isInFunction(\r\n                    this.props.userDetails.EntityResult.FunctionsList,\r\n                    functionGroups.modify,\r\n                    fnProductForecastConfiguration\r\n                )\r\n            });\r\n            notification.messageResultDetails[0].errorMessage = error;\r\n            console.log(\"Error updating product forecast configuration: \", error);\r\n            this.props.onNotice(notification);\r\n        })\r\n    }\r\n\r\n    // handle check/un-check for multi-select dropdown\r\n    handleMultiSelectCheckAll = (checked, key) => {\r\n        try {\r\n            let updatedProductForecastConfig = {}\r\n            if (checked) {\r\n                if (Object.keys(this.state.controlParameters).includes(key) &&\r\n                    Array.isArray(this.state.controlParameters[key])) {\r\n                    let selectedValues = this.state.controlParameters[key].join();\r\n\r\n                    // update multi-select dropdown control state values\r\n                    updatedProductForecastConfig = {\r\n                        ...this.state.modProductForecastConfig,\r\n                        ProductForecastParams: this.state.modProductForecastConfig.ProductForecastParams.map(param => {\r\n                            if (param.Name === key) {\r\n                                return {\r\n                                    ...param,\r\n                                    Value: selectedValues\r\n                                }\r\n                            }\r\n\r\n                            return param;\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // update multi-select dropdown control state values\r\n                updatedProductForecastConfig = {\r\n                    ...this.state.modProductForecastConfig,\r\n                    ProductForecastParams: this.state.modProductForecastConfig.ProductForecastParams.map(param => {\r\n                        if (param.Name === key) {\r\n                            return {\r\n                                ...param,\r\n                                Value: \"\"\r\n                            }\r\n                        }\r\n\r\n                        return param;\r\n                    })\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                modProductForecastConfig: updatedProductForecastConfig\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error in handleMultiSelectCheckAll(): \", error);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ErrorBoundary>\r\n                {\r\n                    this.state.isReadyToRender ?\r\n                        <div>\r\n                            <ErrorBoundary>\r\n                                <TMDetailsHeader newEntityName=\"ProductForecastConfiguration_pgTitle\" />\r\n                            </ErrorBoundary>\r\n\r\n                            <TranslationConsumer>\r\n                                {\r\n                                    (t) => (\r\n                                        Array.isArray(this.state.modProductForecastConfig.ProductForecastParams) && this.state.modProductForecastConfig.ProductForecastParams ? (\r\n                                            <>\r\n                                                <ProductForecastConfigurationDetail\r\n                                                    modProductForecastConfiguration={this.state.modProductForecastConfig}\r\n                                                    controlParameters={this.state.controlParameters}\r\n                                                    onChange={this.handleChange}\r\n                                                    validationErrors={this.state.validationErrors}\r\n                                                    onCheckAllChange={this.handleMultiSelectCheckAll}\r\n                                                />\r\n                                                <div className=\"row mt-3\">\r\n                                                    <div className=\"col col-12\" style={{ textAlign: \"right\" }}>\r\n                                                        <Button\r\n                                                            content={t(\"Save\")}\r\n                                                            disabled={!this.state.saveEnabled}\r\n                                                            onClick={() => this.handleSave()}\r\n                                                        ></Button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </>\r\n                                        ) : <h5>{t(\"ProductForecastConfiguration_Parameters_Unavailable\")}</h5>)\r\n                                }\r\n                            </TranslationConsumer>\r\n                        </div> : <LoadingPage message=\"Loading\" />\r\n                }\r\n            </ErrorBoundary >\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    }\r\n}\r\n\r\nProductForecastConfigurationDetailComposite.propTypes = {\r\n    tokenDetails: PropTypes.object.isRequired,\r\n    onNotice: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps)(ProductForecastConfigurationDetailComposite);","import React from 'react';\r\nimport ErrorBoundary from '../../ErrorBoundary';\r\nimport { TMUserActionsComposite } from '../Common/TMUserActionsComposite';\r\nimport ProductForecastConfigurationDetailComposite from '../Details/ProductForecastConfigurationDetailComposite';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport NotifyEvent from '../../../JS/NotifyEvent';\r\nimport { LoadingPage } from '../../UIBase/Common/LoadingPage';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../../CSS/styles.css\";\r\n\r\nclass ProductForecastConfigurationComposite extends React.Component {\r\n    state = {\r\n        operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n        isReadyToRender: false\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({\r\n            isReadyToRender: true\r\n        });\r\n    }\r\n\r\n    notifyEvent = (notification) => {\r\n        try {\r\n            toast(\r\n                <ErrorBoundary>\r\n                    <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                </ErrorBoundary>,\r\n                {\r\n                    autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n                }\r\n            );\r\n        } catch (error) {\r\n            console.log(\r\n                \"ProductForecastConfigurationComposite: Error occurred on savedEvent\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <TMUserActionsComposite\r\n                        operationsVisibility={this.state.operationsVisibility}\r\n                        breadcrumbItem={this.props.activeItem}\r\n                        handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n                        addVisible={false}\r\n                        deleteVisible={false}\r\n                        shrVisible={false}\r\n                    />\r\n                </ErrorBoundary>\r\n                {\r\n                    this.state.isReadyToRender ?\r\n                        <ErrorBoundary>\r\n                            <ProductForecastConfigurationDetailComposite\r\n                                onNotice={this.notifyEvent}\r\n                                genericProps={this.props.activeItem.itemProps}\r\n                            />\r\n                        </ErrorBoundary>\r\n                        : <LoadingPage message=\"Loading\" />\r\n                }\r\n                <ErrorBoundary>\r\n                    <ToastContainer\r\n                        hideProgressBar={true}\r\n                        closeOnClick={false}\r\n                        closeButton={true}\r\n                        newestOnTop={true}\r\n                        position=\"bottom-right\"\r\n                        toastClassName=\"toast-notification-wrap\"\r\n                    />\r\n                </ErrorBoundary>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductForecastConfigurationComposite;","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","export const functionGroups = {\r\n  view: \"view\",\r\n  add: \"add\",\r\n  modify: \"modify\",\r\n  remove: \"remove\",\r\n};\r\nexport const fnCarrierCompany = \"carriercompany\";\r\nexport const fnDriver = \"driver\";\r\nexport const fnCustomer = \"customer\";\r\nexport const fnTrailer = \"trailer\";\r\nexport const fnOriginTerminal = \"originterminal\";\r\nexport const fnDestination = \"destination\";\r\nexport const fnPrimeMover = \"primemover\";\r\nexport const fnVehicle = \"vehicle\";\r\nexport const fnSBC = \"shipmentbycompartment\";\r\nexport const fnSBP = \"shipmentbyproduct\";\r\nexport const fnShipmentStatus = \"ViewShipmentStatus\";\r\nexport const fnVessel = \"vessel\";\r\nexport const fnOrder = \"order\";\r\nexport const fnOrderForceClose = \"OrderForceClose\";\r\n\r\nexport const fnContract = \"contract\";\r\nexport const fnTruckReceipt = \"receiptplanbycompartment\";\r\nexport const fnMarineDispatch = \"ViewMarineShipment\";\r\nexport const fnMarineShipmentByCompartment = \"MarineShipmentByCompartment\";\r\nexport const fnMarineReceipt = \"ViewMarineReceipt\";\r\nexport const fnSupplier = \"supplier\";\r\nexport const fnFinishedProduct = \"finishedproduct\";\r\nexport const fnRailDispatch = \"RailDispatch\";\r\nexport const fnRailReceipt = \"RailReceipt\";\r\nexport const fnRailRoute = \"RailRoute\";\r\nexport const fnRailWagon = \"RailWagon\"\r\n\r\nexport const fnCloseRailDispatch = \"CloseRailDispatch\";\r\nexport const fnPrintRailBOL = \"PrintRailBOL\";\r\nexport const fnPrintRailFAN = \"PrintRailFAN\";\r\nexport const fnRailDispatchLoadSpotAssignment = \"RailDispatchLoadSpotAssignment\";\r\nexport const fnRailDispatchProductAssignment = \"RailDispatchProductAssignment\";\r\nexport const fnViewRailDispatch = \"ViewRailDispatch\"\r\nexport const fnViewRailLoadingDetails = \"ViewRailLoadingDetails\"\r\n\r\nexport const fnCloseRailReceipt = \"CloseRailReceipt\";\r\nexport const fnPrintRailBOD = \"PrintRailBOD\";\r\nexport const fnPrintRailRAN = \"PrintRailRAN\";\r\nexport const fnViewRailReceipt = \"ViewRailReceipt\"\r\nexport const fnViewRailUnLoadingDetails = \"ViewRailUnLoadingDetails\"\r\n\r\nexport const fnSMSConfiguration = \"SMS\";\r\nexport const fnUnAccountedTransactionTank = \"UnAccountedTransactionTank\"\r\nexport const fnUnAccountedTransactionMeter = \"UnAccountedTransactionMeter\"\r\nexport const fnPipelineDispatch = \"PipelineDispatch\";\r\nexport const fnPipelineReceipt = \"PipelineReceipt\";\r\n\r\nexport const fnPipelineDispatchManualEntry = \"PipelineDispatchManualEntry\";\r\nexport const fnPipelineReceiptManualEntry = \"PipelineReceiptManualEntry\";\r\n\r\nexport const fnLookUpData = \"LookUpData\";\r\n\r\n\r\n\r\nexport const fnHSEInspection = \"HSEInspection\";\r\nexport const fnHSEConfiguration = \"HSEInspectionConfig\"\r\n\r\nexport const fnEmailConfiguration = \"Email\";\r\nexport const fnShareholder = \"Shareholder\";\r\nexport const fnLocation = \"LocationConfig\";\r\nexport const fnDevice = \"DeviceConfig\";\r\nexport const fnBaseProduct = \"baseproduct\";\r\nexport const fnSiteView = \"SiteView\";\r\nexport const fnLeakageManualEntry = \"LeakageManualEntry\";\r\nexport const fnTerminal = \"Terminal\";\r\nexport const fnSlotInformation = \"SlotInformation\";\r\nexport const fnTankGroup = \"TankGroup\";\r\nexport const fnTank = \"Tank\";\r\nexport const fnSealMaster = \"SealMaster\"\r\nexport const fnTankEODEntry = \"TankEODEntry\";\r\nexport const fnUnmatchedLocalTransactions = \"UnmatchedLocalTransactions\";\r\nexport const fnAccessCard = \"AccessCard\";\r\nexport const fnResetPin = \"ResetPin\";\r\nexport const fnSlotConfiguration = \"SlotConfiguration\";\r\nexport const fnUOM = \"UOM\";\r\nexport const fnPrintMarineFAN = \"PrintMarineFAN\";\r\nexport const fnPrintMarineBOL = \"PrintMarineBOL\";\r\nexport const fnViewMarineLoadingDetails = \"ViewMarineLoadingDetails\";\r\nexport const fnViewMarineShipmentAuditTrail = \"ViewMarineShipmentAuditTrail\";\r\nexport const fnCloseMarineShipment = \"CloseMarineShipment\";\r\nexport const fnIssueCard = \"IssueCard\";\r\nexport const fnActivateCard = \"ActivateCard\";\r\nexport const fnRevokeCard = \"RevokeCard\";\r\nexport const fnAutoIDAssociation = \"AutoIDAssociation\";\r\nexport const fnMarineReceiptByCompartment = \"MarineReceiptByCompartment\";\r\nexport const fnPrintMarineRAN = \"PrintMarineRAN\";\r\nexport const fnPrintMarineBOD = \"PrintMarineBOD\";\r\nexport const fnViewMarineUnloadingDetails = \"ViewMarineUnloadingDetails\";\r\nexport const fnViewMarineReceiptAuditTrail = \"ViewMarineReceiptAuditTrail\";\r\n\r\nexport const fnCloseMarineReceipt = \"CloseMarineReceipt\";\r\nexport const fnWeekendConfig = \"WeekendConfig\";\r\nexport const fnEODAdmin = \"EODAdmin\";\r\nexport const fnPrintBOL = \"PrintBOL\";\r\nexport const fnPrintFAN = \"PrintFAN\";\r\nexport const fnPrintBOD = \"PrintBOD\";\r\nexport const fnCloseShipment = \"CloseShipment\";\r\nexport const fnCloseReceipt = \"CloseReceipt\";\r\nexport const fnContractForceClose = \"CONTRACTFORCECLOSE\";\r\nexport const fnCaptain = \"Captain\";\r\nexport const fnOverrideShipmentSeq = \"OverrideShipmentSequence\";\r\nexport const fnKPIInformation = \"KPIInformation\";\r\n\r\nexport const fnLanguage = \"Language\";\r\nexport const fnWebPortalUserMap = \"WebPortalUserMap\";\r\nexport const fnBayGroup = \"BayGroup\";\r\nexport const fnPipelineHeaderSiteView = \"PipelineHeaderSiteView\";\r\n\r\nexport const fnExchangePartner = \"ExchangePartner\";\r\nexport const fnTankMonitor = \"TankMonitor\";\r\nexport const fnUser = \"PersonAdmin\";\r\nexport const fnProductReconciliationReports = \"ProductReconciliationReports\";\r\n\r\nexport const fnReportConfiguration = \"ReportConfiguration\";\r\nexport const fnProcessConfiguration = \"EXECONFIGURATION\";\r\n\r\nexport const fnShareholderAllocation = \"ShareholderAllocation\";\r\nexport const fnNotificationGroup = \"NotificationGroup\";\r\nexport const fnNotificationRestriction = \"NotificationRestriction\";\r\nexport const fnNotificationConfig = \"NotificationConfig\";\r\n\r\n\r\n\r\nexport const fn_WEIGHBRIDGEMANUALENTRY = \"WEIGHBRIDGEMANUALENTRY\";\r\nexport const fnAllowWeighBridgeManualEntry = \"AllowWeighBridgeManualEntry\";\r\n\r\n\r\nexport const fnProductAllocation = \"ProductAllocation\";\r\nexport const fnMasterDeviceConfiguration = \"MasterDeviceConfiguration\";\r\nexport const fnShareholderAgreement = \"ShareholderAgreement\";\r\nexport const fnTankShareholderPrimeFunction = \"TANKSHAREHOLDERPRIMEFUNCTION\";\r\nexport const fnRoleAdmin = \"ROLEADMIN\";\r\nexport const fnShiftConfig = \"ShiftConfig\";\r\nexport const fnPrinterConfiguration = \"PrinterConfiguration\";\r\nexport const fnCustomerAgreement = \"CustomerAgreement\";\r\nexport const fnbaySCADAConfiguration = \"BaySCADAConfiguration\";\r\nexport const fnRailReceiptUnloadSpotAssignment =\r\n  \"RailReceiptUnloadSpotAssignment\";\r\nexport const fnStaffVisitor = \"STAFF_VISITOR\";\r\nexport const fnPipelineMeterSiteView = \"PipelineMeterSiteView\";\r\nexport const fnRailSiteView = \"RailSiteView\";\r\nexport const fnMarineSiteView = \"MarineSiteView\";\r\nexport const fnLoadingDetails = \"LoadingDetails\";\r\nexport const fnUnloadingDetails = \"UnloadingDetails\";\r\n\r\n\r\n\r\nexport const fnRoadHSEInspection = \"RoadHSEInspection\";\r\nexport const fnRoadHSEConfiguration = \"RoadHSEInspectionConfig\";\r\n\r\nexport const fnMarineHSEInspection = \"MarineHSEInspection\";\r\nexport const fnMarineHSEConfiguration = \"MarineHSEInspectionConfig\";\r\n\r\nexport const fnRailHSEInspection = \"RailHSEInspection\";\r\nexport const fnRailHSEConfiguration = \"RailHSEInspectionConfig\";\r\n\r\nexport const fnPipelineHSEInspection = \"PipelineHSEInspection\";\r\nexport const fnPipelineHSEConfiguration = \"PipelineHSEInspectionConfig\";\r\nexport const fnPrintRAN = \"PrintRAN\";\r\nexport const fnViewReceiptStatus = \"ViewReceiptStatus\";\r\nexport const fnViewReceiptAuditTrail = \"ViewReceiptAuditTrail\";\r\nexport const fnCustomerRecipe = \"customerrecipe\";\r\n\r\nexport const fnCOAParameter = \"COAParameter\";\r\nexport const fnCOATemplate = \"COATemplate\";\r\nexport const fnCOAManagement = \"COAManagement\";\r\nexport const fnCOAManagementFinishedProduct = \"COAManagementFinishedProduct\";\r\nexport const fnCOACustomer = \"COACustomer\";\r\nexport const fnCOAAssignment = \"COAAssignment\";\r\n\r\nexport const fnShipmentDriver = \"ShipmentDriver\";\r\nexport const fnReceiptDriver = \"ReceiptDriver\";\r\n\r\nexport const fnProductForecastConfiguration = \"ProductForecastConfiguration\";"],"names":["TMUserActions","_ref","operationsVisibilty","breadcrumbItem","shareholders","selectedShareholder","onShareholderChange","onDelete","onAdd","popUpContent","shrVisible","handleBreadCrumbClick","addVisible","deleteVisible","modelOpen","setModelOpen","useState","popUpOpen","setPopUpOpen","handlePopUpClick","add","length","_jsxs","className","style","alignItems","padding","children","_jsx","marginTop","ErrorBoundary","TranslationConsumer","t","Breadcrumb","parents","map","parentitem","Item","onClick","undefined","itemCode","localizedKey","justifyContent","_Fragment","Select","placeholder","value","disabled","shareholder","options","Utilities","onChange","Modal","open","size","Content","Footer","Button","type","content","float","display","Popup","position","element","Icon","root","name","color","on","onMouseLeave","VerticalMenu","Header","item","popUpMenuClick","menuItem","fieldName","fieldValue","marginLeft","delete","defaultProps","itemName","itemProps","isComponent","TMUserActionsComposite","props","renderControl","translator","controlInfo","DataType","Tooltip","Input","fluid","indicator","label","Name","data","reserveSpace","error","validationErrors","Value","hoverable","event","getDropdownOptionsForSelect","selectedOptions","Array","isArray","split","width","multiple","join","search","Checkbox","checked","onCheckAllChange","Object","keys","controlParameters","includes","forEach","elem","push","text","modProductForecastConfiguration","ProductForecastParams","param","ProductForecastConfigurationDetailComposite","React","constructor","arguments","state","terminalCode","productForecastConfig","modProductForecastConfig","isNew","productForecastParameterValidationDef","isReadyToRender","saveEnabled","populateDefaultValuesForCreate","pfConfig","DefaultValue","console","log","getProductForecastConfiguration","notification","messageType","message","messageResultDetails","axios","RestAPIs","this","tokenDetails","tokenInfo","then","response","result","IsSuccess","EntityResult","toast","NotifyEvent","notificationMessage","autoClose","setState","userDetails","FunctionsList","functionGroups","modify","fnProductForecastConfiguration","getControlParameters","catch","API","handleChange","propertyName","updatedProductForecastConfig","validations","validate","validationDefKeys","values","filter","handleSave","requestObj","Entity","createConfiguration","updateConfiguration","obj","keyFields","keyValues","isSuccess","errorMessage","ErrorList","onNotice","handleMultiSelectCheckAll","key","selectedValues","componentDidMount","getTerminals","Key","Code","render","TMDetailsHeader","newEntityName","ProductForecastConfigurationDetail","textAlign","LoadingPage","connect","getUserDetails","TokenAuth","ProductForecastConfigurationComposite","notifyEvent","operationsVisibility","activeItem","genericProps","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","toastClassName","entityCode","popUpContents","margin","List","view","remove","fnCarrierCompany","fnDriver","fnCustomer","fnTrailer","fnOriginTerminal","fnDestination","fnPrimeMover","fnVehicle","fnSBC","fnSBP","fnShipmentStatus","fnVessel","fnOrder","fnOrderForceClose","fnContract","fnTruckReceipt","fnMarineDispatch","fnMarineShipmentByCompartment","fnMarineReceipt","fnSupplier","fnFinishedProduct","fnRailDispatch","fnRailReceipt","fnRailRoute","fnRailWagon","fnCloseRailDispatch","fnPrintRailBOL","fnPrintRailFAN","fnRailDispatchLoadSpotAssignment","fnRailDispatchProductAssignment","fnViewRailDispatch","fnViewRailLoadingDetails","fnCloseRailReceipt","fnPrintRailBOD","fnPrintRailRAN","fnViewRailReceipt","fnViewRailUnLoadingDetails","fnSMSConfiguration","fnUnAccountedTransactionTank","fnUnAccountedTransactionMeter","fnPipelineDispatch","fnPipelineReceipt","fnPipelineDispatchManualEntry","fnPipelineReceiptManualEntry","fnLookUpData","fnHSEInspection","fnHSEConfiguration","fnEmailConfiguration","fnShareholder","fnLocation","fnDevice","fnBaseProduct","fnSiteView","fnLeakageManualEntry","fnTerminal","fnSlotInformation","fnTankGroup","fnTank","fnSealMaster","fnTankEODEntry","fnUnmatchedLocalTransactions","fnAccessCard","fnResetPin","fnSlotConfiguration","fnPrintMarineFAN","fnPrintMarineBOL","fnViewMarineLoadingDetails","fnViewMarineShipmentAuditTrail","fnCloseMarineShipment","fnIssueCard","fnActivateCard","fnRevokeCard","fnAutoIDAssociation","fnMarineReceiptByCompartment","fnPrintMarineRAN","fnPrintMarineBOD","fnViewMarineUnloadingDetails","fnViewMarineReceiptAuditTrail","fnCloseMarineReceipt","fnWeekendConfig","fnEODAdmin","fnPrintBOL","fnPrintFAN","fnPrintBOD","fnCloseShipment","fnCloseReceipt","fnContractForceClose","fnCaptain","fnOverrideShipmentSeq","fnKPIInformation","fnLanguage","fnWebPortalUserMap","fnBayGroup","fnPipelineHeaderSiteView","fnTankMonitor","fnUser","fnProductReconciliationReports","fnReportConfiguration","fnProcessConfiguration","fnShareholderAllocation","fnNotificationGroup","fnNotificationRestriction","fnNotificationConfig","fnAllowWeighBridgeManualEntry","fnProductAllocation","fnMasterDeviceConfiguration","fnShareholderAgreement","fnTankShareholderPrimeFunction","fnRoleAdmin","fnShiftConfig","fnPrinterConfiguration","fnCustomerAgreement","fnbaySCADAConfiguration","fnRailReceiptUnloadSpotAssignment","fnStaffVisitor","fnPipelineMeterSiteView","fnRailSiteView","fnMarineSiteView","fnLoadingDetails","fnUnloadingDetails","fnRoadHSEInspection","fnRoadHSEConfiguration","fnMarineHSEInspection","fnMarineHSEConfiguration","fnRailHSEInspection","fnRailHSEConfiguration","fnPipelineHSEInspection","fnPipelineHSEConfiguration","fnPrintRAN","fnViewReceiptStatus","fnCustomerRecipe","fnCOAParameter","fnCOATemplate","fnCOAManagement","fnCOACustomer","fnCOAAssignment"],"sourceRoot":""}