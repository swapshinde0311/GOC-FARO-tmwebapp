{"version":3,"file":"static/js/1652.4b4d118d.chunk.js","mappings":"kOAKe,SAASA,EAAkBC,GAQtC,IARuC,QACvCC,EAAO,SACPC,EAAQ,UACRC,EAAS,aACTC,EAAY,YACZC,EAAW,YACXC,EAAW,wBACXC,GACHP,EACG,MAAOQ,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,GAEzCC,EAASC,EAAAA,OAAa,MAEtBC,EAAWA,KACb,IAAIC,EAAmBC,OAAOC,YAC1BC,EAAaT,EAGjB,GAAIG,EAAOO,SAAWP,EAAOO,QAAQC,wBAAwBC,IAAMb,EAC/DU,EAAa,MAGZ,IAAyB,IAArBH,EAIL,OAHAG,EAAa,CAIjB,CAEAR,EAAeQ,EAAW,EAkB9B,OAfAI,EAAAA,EAAAA,YAAU,KACgB,qBAAXN,QACPA,OAAOO,iBAAiB,SAAUT,EACtC,KAIJQ,EAAAA,EAAAA,YAAU,IAEC,KACHN,OAAOQ,oBAAoB,SAAUV,EAAS,GAGnD,KAGCW,EAAAA,EAAAA,KAAA,OAAKC,IAAKd,EAAOe,SACI,IAAhBlB,GAAoBgB,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAD,SACnCE,IACEJ,EAAAA,EAAAA,KAAA,OAAKK,MAAO,CAAEC,UAAW,OAAQJ,UAC7BF,EAAAA,EAAAA,KAACO,EAAAA,EAAa,CAAAL,UACVF,EAAAA,EAAAA,KAACQ,EAAAA,EAAkB,CACfC,QAAShC,EACTI,YAAaA,EACbC,YAAaA,EACbH,UAAWA,EACXC,aAAcA,EACdF,SAAUA,UAML,IAGrC,CAMAH,EAAmBmC,aAAe,CAC9B3B,wBAAyB,I,2KCvCtB,SAAS4B,EAAkBnC,GAoB9B,IApB+B,YAC/BoC,EAAW,eACXC,EAAc,iBACdC,EAAgB,cAChBC,EAAa,cACbC,EAAa,YACbC,EAAW,qBACXC,EAAoB,iBACpBC,EAAgB,qBAChBC,EAAoB,yBACpBC,EAAwB,0BACxBC,EAAyB,sBACzBC,EAAqB,oBACrBC,EAAmB,mBACrBC,EAAkB,aAClBC,EAAY,cACZC,EAAa,iBACbC,EAAgB,iBAChBC,EAAgB,WAChBC,GACDtD,EACG,MAAMuD,EAA8BA,CAACT,EAA2BU,KAC5D,IAAIC,EAAsB,GAI1B,OAHAA,EAAsBX,EAA0BY,MAAMC,GAC3CA,EAAkBC,eAAiBJ,IAEvCC,EAAoBX,yBAAyB,EAExD,OACItB,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAD,SACdE,IACEiC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBpC,SAAA,EAC7BmC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKpC,SAAA,EAChBF,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,CACFC,OAAK,EACLC,MAAO5B,EAAe6B,KACtBC,UAAU,WACVC,SAA+B,KAArBhC,EAAY8B,KACtBG,SAAWC,GAAS9B,EAAc,OAAQ8B,GAC1CC,MAAO3C,EAAE,gCACT4C,MAAO5C,EAAEU,EAAiB4B,MAC1BO,cAAc,OAGtBjD,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,CACFC,OAAK,EACLC,MAAO5B,EAAeqC,KACtBP,UAAU,WACVE,SAAWC,GAAS9B,EAAc,OAAQ8B,GAC1CC,MAAO3C,EAAE,gCACT4C,MAAO5C,EAAEU,EAAiBoC,MAC1BD,cAAc,OAGtBjD,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,CACFC,OAAK,EACLC,MAAO5B,EAAesC,YACtBJ,MAAO3C,EAAE,wBACTyC,SAAWC,GAAS9B,EAAc,cAAe8B,GACjDE,MAAO5C,EAAEU,EAAiBqC,aAC1BF,cAAc,OAItBjD,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACoD,EAAAA,OAAM,CACHZ,OAAK,EACLa,YAAajD,EAAE,iBACf2C,MAAO3C,EAAE,8BACTqC,MAAO5B,EAAeyC,WACtBC,QAAStC,EAAYqC,WACrBT,SAAWC,IACP9B,EAAc,aAAc8B,EAAK,EAErCH,UAAU,WACVK,MAAO5C,EAAEU,EAAiBwC,YAC1BL,cAAc,EACdO,QAAQ,EACRC,iBAAkBrD,EAAE,yBAG5BJ,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,CACFC,OAAK,EACLG,UAAU,WACVF,MACkC,OAA9B5B,EAAe6C,WAAsB,GAAK7C,EAAe6C,WAAWC,iBAExEZ,MAAO3C,EAAE,8BACTyC,SAAWC,GAAS9B,EAAc,aAAc8B,GAChDE,MAAO5C,EAAEU,EAAiB4C,YAC1BT,cAAc,OAGtBjD,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,CACFC,OAAK,EACLG,UAAU,WACVF,MACkC,OAA9B5B,EAAe+C,WAAsB,GAAK/C,EAAe+C,WAAWD,iBAExEZ,MAAO3C,EAAE,8BACTyC,SAAWC,GAAS9B,EAAc,aAAc8B,GAChDE,MAAO5C,EAAEU,EAAiB8C,YAC1BX,cAAc,OAGtBjD,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACoD,EAAAA,OAAM,CACHZ,OAAK,EACLa,YAAajD,EAAE,iBACf2C,MAAO3C,EAAE,+BACTqC,MAAO5B,EAAegD,YACtBN,QAAStC,EAAY6C,YACrBjB,SAAWC,IACP9B,EAAc,cAAe8B,EAAK,EAEtCH,UAAU,WACVK,MAAO5C,EAAEU,EAAiB+C,aAC1BZ,cAAc,EACdO,QAAQ,EACRC,iBAAkBrD,EAAE,yBAG5BJ,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,CACFC,OAAK,EACLC,MAAO5B,EAAekD,UACtBhB,MAAO3C,EAAE,yBACTyC,SAAWC,GAAS9B,EAAc,YAAa8B,GAC/CE,MAAO5C,EAAEU,EAAiBiD,WAC1Bd,cAAc,OAItBZ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0CAAyCpC,SAAA,EACpDF,EAAAA,EAAAA,KAACgE,EAAAA,SAAQ,CACLjB,MAAO3C,EAAE,4BACT6D,UAASpD,EAAeqD,WACxBrB,SAAWC,GAAS9B,EAAc,aAAc8B,GAChDF,UAAmD,IAAzC/B,EAAesD,yBAE7BnE,EAAAA,EAAAA,KAACgE,EAAAA,SAAQ,CACLjB,MAAO3C,EAAE,gCACT6D,UAASpD,EAAesD,sBACxBvB,UAAwC,IAA9B/B,EAAeqD,WACzBrB,SAAWC,GAAS9B,EAAc,wBAAyB8B,SAGnE9C,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,CACFC,OAAK,EACLC,MAAO5B,EAAeuD,YACtBrB,MAAO3C,EAAE,+BACTyC,SAAWC,GAAS9B,EAAc,cAAe8B,GACjDE,MAAO5C,EAAEU,EAAiBsD,aAC1BnB,cAAc,OAItBZ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BpC,SAAA,EACnDF,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,CAACC,OAAK,EACVF,UAAS,sBAAA+B,OAAwBtD,GAAmC,YAAlBA,EAA8B,iBAAmB,IACnGgC,MAAO3C,EAAE,4BACTkE,QAASA,IAAM9C,IACfiB,MAC6B,OAAzB5B,EAAe0D,MACb,GACA1D,EAAe0D,MAErBlE,MAAO,CAAEmE,gBAAiBzD,GAC1BkC,cAAc,EACdD,MAAOlB,EAAa,GAAK1B,EAAEU,EAAiByD,OAC5C1B,SAAW4B,GAAU5C,EAAiB4C,KAItC7C,GAAmBS,EAAAA,EAAAA,MAAAqC,EAAAA,SAAA,CAAAxE,SAAA,EACjBF,EAAAA,EAAAA,KAAC2E,EAAAA,YAAW,CACVC,QAASA,IAAMlD,EAAa,CAAEmD,IAAK9D,IACnC8B,SAAW4B,GAAU9C,EAAc8C,GACnChC,MAAO1B,KAETf,EAAAA,EAAAA,KAAC8E,EAAAA,OAAM,CAACC,KAAK,UACXC,SAAS,SACTC,KAAK,QACL3C,UAAU,qBACV4C,QAAQ,GACRC,QAASA,IAAM1D,IACf2D,aAAa,YAAe,OAKxBpF,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACoD,EAAAA,OAAM,CACHZ,OAAK,EACLa,YAAajD,EAAE,iBACf2C,MAAO3C,EAAE,0BACTqC,MAAO5B,EAAewE,OACtB9B,QAAS,CACL,CAAE+B,KAAMlF,EAAE,mBAAoBqC,OAAO,GACrC,CAAE6C,KAAMlF,EAAE,+BAAgCqC,OAAO,IAErDI,SAAWC,GAAS5B,EAAqB4B,GACzCE,MAAO5C,EAAEU,EAAiBuE,QAC1BpC,cAAc,EACdO,QAAQ,EACRC,iBAAkBrD,EAAE,yBAG5BJ,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,CACFC,OAAK,EACLC,MAAO5B,EAAe0E,QACtB1C,SAAWC,GAAS9B,EAAc,UAAW8B,GAC7CC,MAAO3C,EAAE,2BACT4C,MAAO5C,EAAEU,EAAiByE,SAC1B5C,UAAW9B,EAAewE,SAAWzE,EAAYyE,OAAS,WAAa,GACvEpC,cAAc,MAIrB9B,GACInB,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACtCF,EAAAA,EAAAA,KAACwF,EAAAA,EAAmB,CAChBC,aAAcxE,EAAYyE,cAC1BC,iBAAkB9E,EAAe+E,cACjC5C,MAAO5C,EAAEU,EAAiB8E,eAC1B5E,cAAeA,EACf6E,cAAezE,MAEZ,MAIfC,EAAyByE,OAAS,EAClCzE,EAAyB0E,KAAKC,IACtBhG,EAAAA,EAAAA,KAACO,EAAAA,EAAa,CAAAL,UACVF,EAAAA,EAAAA,KAACiG,EAAAA,UAAS,CAAA/F,UACNF,EAAAA,EAAAA,KAACiG,EAAAA,UAAUC,QAAO,CACd5D,UAAU,qBACV6D,MAAOhF,EAAoB6E,EAAU5D,aAAe,MAAQhC,EAAE,qBAAyBA,EAAE,qBAAsBF,UAE/GF,EAAAA,EAAAA,KAACoG,EAAAA,EAAgB,CACbC,sBAAuBL,EAAUM,sBACjCC,mBAAoBhF,EACpBD,0BAA2BS,EAA4BT,EAA2B0E,EAAU5D,wBAK5G,SAMhC,CA7QAzB,EAAmBD,aAAe,CAC9BO,YAAa,CACT6C,YAAa,GACbR,WAAY,IAEhBnC,kBAAkB,G,sKCbtB,MAAMqF,UAAoCC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KAClDC,MAAQ,CACNhG,YAAaiG,IAAAA,UAAiBC,EAAAA,IAC9BjG,eAAgB,CAAC,EACjBkG,aAAc,GACdC,SAAU,GACVlG,iBAAkBmG,EAAAA,GAChBC,EAAAA,IAEFC,iBAAiB,EACjBC,aAAa,EACbC,iBAAiB,EACjBC,mBAAoB,GACpBC,kBAAmB,GACnBjB,sBAAuB,GACvBjF,yBAA0B,GAC1BC,0BAA2B,GAC3BkG,mBAAoB,GACpBC,0BAA0B,EAC1BC,gBAAiB,CAAC,GAClB,KAgRFC,aAAe,CAACC,EAAc9E,KAC5B,IACE,MAAMjC,EAAiBgG,IAAAA,UAAiBgB,KAAKjB,MAAM/F,gBAEnDA,EAAe+G,GAAgB9E,EAC/B+E,KAAKC,SAAS,CAAEjH,mBAEhB,MAAMC,EAAmB+F,IAAAA,UAAiBgB,KAAKjB,MAAM9F,uBACNiH,IAA3Cb,EAAAA,GAAyBU,KAC3B9G,EAAiB8G,GAAgBX,EAAAA,GAC/BC,EAAAA,GAAyBU,GACzB9E,GAEF+E,KAAKC,SAAS,CAAEhH,sBAGG,kBAAjB8G,GACFC,KAAKG,wBAAwBlF,EAEjC,CAAE,MAAOE,GACPiF,QAAQC,IACN,4DACAlF,EAEJ,GACA,KAEFmF,yBAA4BlE,IAC1B,IACE,IAAIyB,EAAgB,IAAImC,KAAKO,MAAM1C,eAC/B7E,EAAiBgG,IAAAA,UAAiBgB,KAAKjB,MAAM/F,gBACpCA,EAAe+E,cAAxB3B,EAAwC,IAAIyB,GACZ,GACpCmC,KAAKC,SAAS,CAAEjH,eAAgBA,IAChCgH,KAAKG,wBAAwBnH,EAAe+E,cAC9C,CAAE,MAAO5C,GACPiF,QAAQC,IACN,uEACAlF,EAEJ,GACA,KAEFqF,YAAexD,IACb,GAAY,OAARA,GAAwB,KAARA,EAAY,CAC9B,IAAImC,EAAWnC,EACXhE,EAAiBgG,IAAAA,UAAiBgB,KAAKjB,MAAM/F,gBACjDA,EAAe0D,MAAQyC,EACvBa,KAAKC,SAAS,CACZd,WACAnG,iBACAkG,aAAcC,GAElB,MACEa,KAAKC,SAAS,CACZd,SAAU,GACVD,aAAcC,GAElB,EACA,KAEFsB,kBAAoB,KAClB,IACET,KAAKC,SAAS,CACZT,iBAAiB,EACjBvF,YAAY,GAEhB,CAAE,MAAOkB,GACPiF,QAAQC,IACN,+DACAlF,EAEJ,GACA,KAEFuF,uBAAyB,KACvB,IAAI1H,EAAiBgG,IAAAA,UAAiBgB,KAAKjB,MAAM/F,gBACjD,IACEA,EAAe0D,WACewD,IAA5BF,KAAKjB,MAAMG,aAA6Bc,KAAKjB,MAAMG,aAAe,GAEpEc,KAAKC,SAAS,CACZT,iBAAiB,EACjBL,cAC8Be,IAA5BF,KAAKjB,MAAMG,aAA6Bc,KAAKjB,MAAMG,aAAe,GACpElG,iBACAiB,YAAY,GAEhB,CAAE,MAAOkB,GACPiF,QAAQC,IACN,oEACAlF,EAEJ,GACA,KAEFwF,iBAAoB/D,IAElB,GADiBoD,KAAKjB,MAAM9E,WACZ,CACd,IAAIjB,EAAiBgG,IAAAA,UAAiBgB,KAAKjB,MAAM/F,gBACjDA,EAAe0D,MAAQE,EAAMI,IAC7BgD,KAAKC,SAAS,CACZf,aAActC,EAAMI,IACpBwC,iBAAiB,EACjBL,SAAUvC,EAAMI,IAChBhE,kBAEJ,GACA,KAEF4H,oBAAuBhE,IACrB,IAAI5D,EAAiBgG,IAAAA,UAAiBgB,KAAKjB,MAAM/F,gBACjDA,EAAe0D,MAAQE,EAAMI,IAC7BgD,KAAKC,SAAS,CACZd,SAAUvC,EAAMI,IAChBhE,iBACAiB,YAAY,GACZ,EACF,KAEF4G,yBAA4BjG,IAC1B,IACE,IAAI5B,EAAiBgG,IAAAA,UAAiBgB,KAAKjB,MAAM/F,gBACjDA,EAAewE,OAAS5C,EACpB5B,EAAewE,SAAWwC,KAAKjB,MAAMhG,YAAYyE,SACnDxE,EAAe0E,QAAU,IAC3BsC,KAAKC,SAAS,CAAEjH,kBAClB,CAAE,MAAOmC,GACPiF,QAAQC,IAAIlF,EACd,GACA,KA2DF2F,YAAc,KACZ,IACE,MAAM,iBAAE7H,GAAqB,IAAK+G,KAAKjB,OACjChG,EAAciG,IAAAA,UAAiBgB,KAAKjB,MAAMhG,aAEhD,IAAI6D,EAAQ,GAEuB,OAAjCoD,KAAKjB,MAAMhG,YAAY2D,OACU,KAAjCsD,KAAKjB,MAAMhG,YAAY2D,QAEvBE,EAAQoD,KAAKjB,MAAMhG,YAAY2D,OAEjC3D,EAAY2D,MAAQE,EAEpBmE,OAAOC,KAAK/H,GAAkBgI,SAAQ,SAAUC,GAC9CjI,EAAiBiI,GAAO,EAC1B,IACAlB,KAAKC,SACH,CACEjH,eAAgB,IAAKD,GACrBoI,gBAAiB,GACjBlI,mBACAO,yBAA0B,GAC1B2F,SAAUvC,EACVsC,aAActC,EACd4C,iBAAiB,EACjBvF,YAAY,IAEd,KACM+F,KAAKO,MAAMa,YAAYC,aAAaC,kBACtCtB,KAAKG,wBAAwBpH,EAAYgF,eACzCiC,KAAKuB,wCAELvB,KAAKwB,qBACLxB,KAAKuB,sCACP,GAGN,CAAE,MAAOpG,GACPiF,QAAQC,IACN,2DACAlF,EAEJ,GACA,KAqBFsG,WAAa,KACX,IACE,IAAIzI,EAAiBgH,KAAK0B,cACtBC,EAAgBvC,EAAAA,GAClBY,KAAKjB,MAAMvF,0BAMb,GAH6B,OAAzBR,EAAe0D,OAA2C,KAAzB1D,EAAe0D,QAC7C1D,EAAe0D,MAAQ,IAE1BsD,KAAK4B,aAAa5I,EAAgB2I,GAAgB,CACpD,IAAI/B,GACsD,IAAxDI,KAAKO,MAAMa,YAAYC,aAAaQ,gBAGlChC,EAAkBb,IAAAA,UAAiBhG,GACvCgH,KAAKC,SAAS,CAAEL,2BAA0BC,oBAAmB,MAC1B,IAA7BD,GACFI,KAAK8B,iBACP,GAEJ,CACF,CAAE,MAAO3G,GACPiF,QAAQC,IACN,0DACAlF,EAEJ,GACA,KAEF4G,0BAA4B,KAC1B/B,KAAKC,SAAS,CACZL,0BAA0B,GAC1B,EACF,KAEFkC,gBAAkB,KAChB,IACE9B,KAAKC,SAAS,CAAEV,aAAa,IAC7B,IAAIM,EAAkBb,IAAAA,UAAiBgB,KAAKjB,MAAMc,iBAE9C8B,EAAgBvC,EAAAA,GAClBY,KAAKjB,MAAMvF,0BAGbqG,EAAkBG,KAAKgC,uBACrBnC,EACA8B,GAG8B,KAAhC3B,KAAKjB,MAAMhG,YAAY8B,KACnBmF,KAAKiC,kBAAkBpC,GACvBG,KAAKkC,kBAAkBrC,EAC7B,CAAE,MAAO1E,GACPiF,QAAQC,IAAI,yDACd,GACA,KAwGF8B,qBAAwBvH,IACtB,IACE,IAAI5B,EAAiBgG,IAAAA,UAAiBgB,KAAKjB,MAAM/F,gBACjD,IAAIC,EAAmB+F,IAAAA,UAAiBgB,KAAKjB,MAAM9F,kBACnDD,EAAe0D,MAAQ9B,EACvBoF,KAAKC,SAAS,CAAEjH,mBAEhB,IAAIiB,EADQ,oBACWmI,KAAKxH,GAExBX,EACF+F,KAAKC,SAAS,CACZd,SAAUvE,UAICsF,IAAVtF,GAAiC,KAAVA,GACE,KAAzB5B,EAAe0D,YAAyCwD,IAAzBlH,EAAe0D,QAE/CzD,EAAwB,MAAI,gBAC9B+G,KAAKC,SAAS,CACZd,SAAU,aAGda,KAAKC,SAAS,CAAEhH,mBAAkBgB,cACpC,CAAE,MAAOkB,GACPiF,QAAQC,IAAIlF,EACd,GACA,KAwLFkH,0BAA4B,CAAClE,EAAWvD,KACtC,IACE,IAAI0H,EAAoB,GACpB9I,EAA2BwF,IAAAA,UAC7BgB,KAAKjB,MAAMvF,0BAET+I,EAAwB/I,EAAyBgJ,QAClDC,GAAiBA,EAAalI,eAAiB4D,EAAU5D,eAG1DgI,EAAsBtE,OAAS,GAC/ByE,MAAMC,QAAQJ,EAAsB,GAAG9D,yBAEvC6D,EACEC,EAAsB,GAAG9D,sBAAsB+D,QAC5CC,GAAiBA,EAAa5H,OAASsD,EAAUtD,QAGpDyH,EAAkBrE,OAAS,IAC7BqE,EAAkB,GAAGM,aAAehI,GAEtC,MAAMnB,EAA4BuF,IAAAA,UAChCgB,KAAKjB,MAAMtF,2BAGbA,EAA0BwH,SAAS7G,IAC7BA,EAAoBG,eAAiB4D,EAAU5D,eACjDH,EAAoBX,0BAA0B0E,EAAUtD,MACtDuE,EAAAA,GAAgCjB,EAAWvD,GAC/C,IAEFoF,KAAKC,SAAS,CAAExG,4BAA2BD,4BAC7C,CAAE,MAAO2B,GACPiF,QAAQC,IACN,yEACAlF,EAEJ,EACA,CAr6BF0H,iBAAAA,GACE,IACEzD,EAAAA,GAAqBY,KAAKO,MAAMa,YAAYC,aAAayB,YACzD1C,QAAQC,IAAIL,KAAKO,MAAMa,YAAYC,cACnCrB,KAAK+C,cAAc/C,KAAKO,MAAMyC,aAC9BhD,KAAKiD,kBACLjD,KAAKkD,mBACP,CAAE,MAAO/H,GACPiF,QAAQC,IACN,iEACAlF,EAEJ,CACF,CAEAgI,yBAAAA,CAA0BC,GACxB,IACE,GACkC,KAAhCpD,KAAKjB,MAAMhG,YAAY8B,WACeqF,IAAtCkD,EAAUJ,YAAYK,aACtBrD,KAAKO,MAAM+C,aAAaC,YAAcH,EAAUE,aAAaC,UAC7D,CACAvD,KAAK+C,cAAcK,EAAUJ,aAC7B,IAAI/J,EAAmB,IAAK+G,KAAKjB,MAAM9F,kBACvC8H,OAAOC,KAAK/H,GAAkBgI,SAASC,IACrCjI,EAAiBiI,GAAO,EAAE,IAE5BlB,KAAKC,SAAS,CAAEhH,oBAClB,CACF,CAAE,MAAOkC,GACPiF,QAAQC,IACN,yEACAlF,EAEJ,CACF,CAEA4H,aAAAA,CAAcS,GACZ,IACEC,IACEC,EAAAA,IACAtE,EAAAA,GACE,CAACuE,EAAAA,IACD3D,KAAKO,MAAM+C,aAAaC,YAE1BK,MAAMC,IACN,IAAIC,EAASD,EAAS5I,MACG,IAArB6I,EAAOC,UACT/D,KAAKC,SACH,CACExB,sBAAuBO,IAAAA,UAAiB8E,EAAOzC,cAC/C5H,0BACE2F,EAAAA,GACE0E,EAAOzC,aAAatI,eAG1B,IAAMiH,KAAKgE,eAAeR,KAG5BpD,QAAQC,IAAI,0BACd,GAEJ,CAAE,MAAOlF,GACPiF,QAAQC,IAAI,6BAA8BlF,EAC5C,CACF,CAEAgF,uBAAAA,CAAwB8D,GACtB,IACE,QAA0B/D,IAAtB+D,GAAyD,OAAtBA,EAA4B,CACjE,IAAIC,EAA0B,GAC9B,IAAIzF,EAAwB,GACxBjF,EAA2B,GAC/BiF,EAAwBO,IAAAA,UACtBgB,KAAKjB,MAAMN,uBAEbjF,EAA2BwF,IAAAA,UACzBgB,KAAKjB,MAAMvF,0BAEb,MAAMC,EAA4BuF,IAAAA,UAChCgB,KAAKjB,MAAMtF,2BAEb,IAAIT,EAAiBgG,IAAAA,UAAiBgB,KAAKjB,MAAM/F,gBAEjDiL,EAAkBhD,SAAS9G,IACzB,IAAIgK,EAAY3K,EAAyBa,MAAMC,GACtCA,EAAkBC,eAAiBJ,SAG1B+F,IAAdiE,EACF1F,EAAsB1F,YAAYkI,SAAQ,SACxCmD,GAEA,GAAIA,EAAkB7J,eAAiBJ,EAAU,CAC/C,IAAIkK,EAAiBrL,EAAesL,WAAWjK,MAC5CkK,GACQA,EAAqBhK,eAAiBJ,SAG1B+F,IAAnBmE,GACFD,EAAkB3F,sBAAsBwC,SAAQ,SAC9CmD,GAEA,IAAII,EACFH,EAAeI,oBAAoBpK,MAAMqK,GAChCA,EAAEC,gBAAkBP,EAAkBvJ,YAE1BqF,IAAnBsE,IACFJ,EAAkBxB,aAChB4B,EAAeI,eACrB,IAEFV,EAAwBW,KAAKT,EAC/B,CACF,IAEAF,EAAwBW,KAAKV,EAC/B,IAEF3K,EAA2B,GAC3BA,EAA2B0K,EAC3B1K,EAA2B4F,EAAAA,GACzB5F,GAEFC,EAA0BwH,SAAS7G,SAIX8F,IAHF+D,EAAkB5J,MAAM4J,GACnC7J,EAAoBG,eAAiB0J,KAG5ClD,OAAOC,KAAK5G,EAAoBX,2BAA2BwH,SACxDC,GAAS9G,EAAoBX,0BAA0ByH,GAAO,IAEnE,IAEFlB,KAAKC,SAAS,CAAEzG,2BAA0BC,6BAC5C,CACF,CAAE,MAAO0B,GACPiF,QAAQC,IACN,uEACAlF,EAEJ,CACF,CAEAqG,kBAAAA,GACE,IACE,IAAI/C,EAAwBO,IAAAA,UAC1BgB,KAAKjB,MAAMN,uBAGXiE,MAAMC,QAAQlE,EAAsB1F,cACpC0F,EAAsB1F,YAAYkF,OAAS,GAE3C+B,KAAKG,wBAAwB,CAC3B1B,EAAsB1F,YAAY,GAAGwB,cAG3C,CAAE,MAAOY,GACPiF,QAAQC,IACN,kEACAlF,EAEJ,CACF,CAEA6I,cAAAA,CAAeR,GAUb,GATAvE,EAAAA,GAAiBxD,WACfuE,KAAKO,MAAMa,YAAYC,aAAayD,cAAcC,YAAYtJ,WAC5DuE,KAAKO,MAAMa,YAAYC,aAAaC,mBACtCrC,EAAAA,GAAiBlB,cACqB,IAApCiC,KAAKO,MAAM1C,cAAcI,OACrB,IAAI+B,KAAKO,MAAM1C,eACf,SAG2BqC,IAA/BsD,EAAeH,YAAnB,CA+BA,IAAI2B,EAAU,CACZ,CACE9D,IAAK+D,EAAAA,GACLrK,MAAO4I,EAAeH,cAGtB6B,EAAM,CACRC,YAAaF,EAAAA,GACbA,SAAUD,GAEZvB,IACEC,EAAAA,IACAtE,EAAAA,GACE8F,EACAlF,KAAKO,MAAM+C,aAAaC,YAGzBK,MAAMC,IACL,IAAIC,EAASD,EAAS5I,MACG,IAArB6I,EAAOC,WACT/D,KAAKC,SACH,CACEX,iBAAiB,EACjBvG,YAAaiG,IAAAA,UAAiB8E,EAAOzC,cACrCrI,eAAgBgG,IAAAA,UAAiB8E,EAAOzC,cACxC9B,YAAaH,EAAAA,GACXY,KAAKO,MAAMa,YAAYC,aAAa+D,cACpCC,EAAAA,EAAeC,OACfC,EAAAA,MAGJ,KACEvF,KAAKwF,WAAW1B,EAAOzC,aAAaxG,MAChCmF,KAAKO,MAAMa,YAAYC,aAAaC,iBACtCtB,KAAKG,wBAAwB2D,EAAOzC,aAAatD,eAEjDiC,KAAKwB,oBACP,IAKsB,OAAxBsC,EAAOzC,mBACiBnB,IAAxB4D,EAAOzC,cAGPrB,KAAKQ,YAAYsD,EAAOzC,aAAa3E,SAIvCsD,KAAKC,SAAS,CACZlH,YAAaiG,IAAAA,UAAiBC,EAAAA,IAC9BjG,eAAgBgG,IAAAA,UAAiBC,EAAAA,IACjCK,iBAAiB,EACjBH,SAAU,KAEZiB,QAAQC,IAAI,2BAA4ByD,EAAO2B,WACjD,IAEDC,OAAOvK,IACNiF,QAAQC,IAAI,mCAAoClF,EAAOqI,EAAe,GA9D1E,MA5BExD,KAAKC,SACH,CACElH,YAAaiG,IAAAA,UAAiBC,EAAAA,IAC9BjG,eAAgBgG,IAAAA,UAAiBC,EAAAA,IACjCK,iBAAiB,EACjB9F,yBAA0B,GAC1BmG,mBAAoB,GACpBJ,YAAaH,EAAAA,GACXY,KAAKO,MAAMa,YAAYC,aAAa+D,cACpCC,EAAAA,EAAeM,IACfJ,EAAAA,IAEFpG,SAAU,GACVD,aAAc,KAEhB,KACMc,KAAKO,MAAMa,YAAYC,aAAaC,iBACE,IAApCtB,KAAKO,MAAM1C,cAAcI,OAC3B+B,KAAKG,wBAAwBH,KAAKO,MAAM1C,eAExCmC,KAAKG,wBAAwB,IAG/BH,KAAKwB,oBACP,GAoER,CAsIAyB,eAAAA,GACEQ,IACEC,EAAAA,IACAtE,EAAAA,GAAwCY,KAAKO,MAAM+C,aAAaC,YAE/DK,MAAMC,IACL,IAAIC,EAASD,EAAS5I,KACtB,IAAyB,IAArB6I,EAAOC,WACT,GAC0B,OAAxBD,EAAOzC,cACPqB,MAAMC,QAAQmB,EAAOzC,cACrB,CACA,IAAI5B,EAAqBL,EAAAA,GACvB0E,EAAOzC,cAETrB,KAAKC,SAAS,CAAER,sBAClB,OAEAW,QAAQC,IAAI,4BAA6ByD,EAAO2B,UAClD,IAEDC,OAAOvK,IACNiF,QAAQC,IAAI,uCAAwClF,EAAM,GAEhE,CAEA+H,iBAAAA,GACEO,IACEC,EAAAA,IACAtE,EAAAA,GAAwCY,KAAKO,MAAM+C,aAAaC,YAE/DK,MAAMC,IACL,IAAIC,EAASD,EAAS5I,KACtB,IAAyB,IAArB6I,EAAOC,WACT,GAA4B,OAAxBD,EAAOzC,aAAuB,CAChC,IAAIuE,EAAc9B,EAAOzC,aAAawE,QAClCnG,EAAoB,GACxBkG,EAAY3E,SAAS6E,IACnBpG,EAAkBmF,KAAK,CACrBpH,KAAMqI,EACNlL,MAAOkL,GACP,IAGJ9F,KAAKC,SAAS,CACZP,qBAEJ,OAEAU,QAAQC,IAAI,mBAAoByD,EAAO2B,UACzC,IAEDC,OAAOvK,IACNiF,QAAQC,IAAI,8BAA+BlF,EAAM,GAEvD,CAgDAoG,mCAAAA,GACE,IACE,IAAI9C,EAAwBO,IAAAA,UAC1BgB,KAAKjB,MAAMN,uBAEbuB,KAAKC,SAAS,CACZxG,0BACE2F,EAAAA,GACEX,EAAsB1F,cAG9B,CAAE,MAAOoC,GACPiF,QAAQC,IACN,8DACAlF,EAEJ,CACF,CAkEAuG,WAAAA,GACE,IACE,IAAI1I,EAAiBgG,IAAAA,UAAiBgB,KAAKjB,MAAM/F,gBAcjD,OAZgC,OAA9BA,EAAe6C,YACe,KAA9B7C,EAAe6C,aAEf7C,EAAe6C,WAAa7C,EAAe6C,WAAWC,kBAExB,OAA9B9C,EAAe+C,YACe,KAA9B/C,EAAe+C,aAEf/C,EAAe+C,WAAa/C,EAAe+C,WAAWD,kBAGxDkE,KAAKC,SAAS,CAAEjH,mBACTA,CACT,CAAE,MAAOmC,GACPiF,QAAQC,IACN,2DACAlF,EAEJ,CACF,CAEAyG,YAAAA,CAAa5I,EAAgB2I,GAC3B,MAAM1I,EAAmB,IAAK+G,KAAKjB,MAAM9F,kBACzC8H,OAAOC,KAAK3B,EAAAA,IAA0B4B,SAAQ,SAAUC,QAC1BhB,IAAxBlH,EAAekI,KACjBjI,EAAiBiI,GAAO9B,EAAAA,GACtBC,EAAAA,GAAyB6B,GACzBlI,EAAekI,IAErB,IAGgC,OAA9BlI,EAAe6C,YACe,KAA9B7C,EAAe6C,YACe,OAA9B7C,EAAe+C,YACe,KAA9B/C,EAAe+C,YAGbqD,EAAAA,GAAiCpG,EAAe6C,aAChDuD,EAAAA,GAAiCpG,EAAe+C,cAEhD9C,EAA6B,WAAI,oCAIjCD,EAAewE,SAAWwC,KAAKjB,MAAMhG,YAAYyE,SACpB,OAA3BxE,EAAe0E,SAA+C,KAA3B1E,EAAe0E,UACpDzE,EAA0B,QAAI,iCAIlC,IAAIQ,EAA4BuF,IAAAA,UAC9BgB,KAAKjB,MAAMtF,2BAEbkI,EAAcV,SAAS9C,IACrB1E,EAA0BwH,SAAS7G,IAC7BA,EAAoBG,eAAiB4D,EAAU5D,cACjD4D,EAAUM,sBAAsBwC,SAASmD,IACvChK,EAAoBX,0BAClB2K,EAAkBvJ,MAChBuE,EAAAA,GACFgF,EACAA,EAAkBxB,aACnB,GAEL,GACA,IAGJ5C,KAAKC,SAAS,CAAEhH,mBAAkBQ,8BAElC,IAAIsM,GAAc,EAkBlB,OAjBAtM,EAA0BwH,SAASyD,IACjC,IAAIqB,EAOF,OAAOA,EANPA,EAAchF,OAAOiF,OAAOtB,EAAEjL,2BAA2BwM,OACvD,SAAUrL,GACR,MAAiB,KAAVA,CACT,GAIJ,IAGEmL,IACFA,EAAchF,OAAOiF,OAAO/M,GAAkBgN,OAAM,SAAUrL,GAC5D,MAAiB,KAAVA,CACT,KAEKmL,CACT,CA+BA/D,sBAAAA,CAAuBhJ,EAAgB2I,GACrC,IAmBE,OAjBgC,OAA9B3I,EAAe6C,YACe,KAA9B7C,EAAe6C,aAEf7C,EAAe6C,WAAauD,EAAAA,GAC1BpG,EAAe6C,aAIa,OAA9B7C,EAAe+C,YACe,KAA9B/C,EAAe+C,aAEf/C,EAAe+C,WAAaqD,EAAAA,GAC1BpG,EAAe+C,aAGnB4F,EAAgBvC,EAAAA,GAAuCuC,GACvD3I,EAAesL,WAAalF,EAAAA,GAA+BuC,GACpD3I,CACT,CAAE,MAAOkN,GACP9F,QAAQC,IAAI,mDAAoD6F,EAClE,CACF,CAEAjE,iBAAAA,CAAkBjJ,GAChB,IAAIgM,EAAU,CACZ,CACE9D,IAAK+D,EAAAA,GACLrK,MAAO5B,EAAe6B,OAGtBqK,EAAM,CACRC,YAAaF,EAAAA,GACbA,SAAUD,EACVmB,OAAQnN,GAGNoN,EAAe,CACjBC,YAAa,WACbC,QAAS,8BACTC,qBAAsB,CACpB,CACEC,UAAW,CAAC,gCACZC,UAAW,CAACzN,EAAe6B,MAC3B6L,WAAW,EACXC,aAAc,MAKpBlD,IACEC,EAAAA,IACAtE,EAAAA,GACE8F,EACAlF,KAAKO,MAAM+C,aAAaC,YAGzBK,MAAMC,IACL,IAAIC,EAASD,EAAS5I,KACtBmL,EAAaC,YAAcvC,EAAOC,UAAY,UAAY,WAC1DqC,EAAaG,qBAAqB,GAAGG,UAAY5C,EAAOC,WAC/B,IAArBD,EAAOC,UACT/D,KAAKC,SACH,CACEV,YAAaH,EAAAA,GACXY,KAAKO,MAAMa,YAAYC,aAAa+D,cACpCC,EAAAA,EAAeC,OACfC,EAAAA,IAEF3F,0BAA0B,IAE5B,IAAMI,KAAKgE,eAAe,CAAEX,YAAarK,EAAe6B,UAG1DuL,EAAaG,qBAAqB,GAAGI,aACnC7C,EAAO2B,UAAU,GACnBzF,KAAKC,SAAS,CACZV,YAAaH,EAAAA,GACXY,KAAKO,MAAMa,YAAYC,aAAa+D,cACpCC,EAAAA,EAAeM,IACfJ,EAAAA,IAEF3F,0BAA0B,IAE5BQ,QAAQC,IAAI,8BAA+ByD,EAAO2B,YAEpDzF,KAAKO,MAAMqG,QAAQ5G,KAAKjB,MAAM/F,eAAgB,MAAOoN,EAAa,IAEnEV,OAAOvK,IACN6E,KAAKC,SAAS,CACZV,YAAaH,EAAAA,GACXY,KAAKO,MAAMa,YAAYC,aAAa+D,cACpCC,EAAAA,EAAeM,IACfJ,EAAAA,IAEF3F,0BAA0B,IAE5BwG,EAAaG,qBAAqB,GAAGI,aAAexL,EACpD6E,KAAKO,MAAMqG,QAAQ5G,KAAKjB,MAAM/F,eAAgB,MAAOoN,EAAa,GAExE,CAEAlE,iBAAAA,CAAkBlJ,GAChB,IAAIgM,EAAU,CACZ,CACE9D,IAAK+D,EAAAA,GACLrK,MAAO5B,EAAe6B,OAGtBqK,EAAM,CACRC,YAAaF,EAAAA,GACbA,SAAUD,EACVmB,OAAQnN,GAGNoN,EAAe,CACjBC,YAAa,WACbC,QAAS,8BACTC,qBAAsB,CACpB,CACEC,UAAW,CAAC,gCACZC,UAAW,CAACzN,EAAe6B,MAC3B6L,WAAW,EACXC,aAAc,MAKpBlD,IACEC,EAAAA,IACAtE,EAAAA,GACE8F,EACAlF,KAAKO,MAAM+C,aAAaC,YAGzBK,MAAMC,IACL,IAAIC,EAASD,EAAS5I,KACtBmL,EAAaC,YAAcvC,EAAOC,UAAY,UAAY,WAC1DqC,EAAaG,qBAAqB,GAAGG,UAAY5C,EAAOC,WAC/B,IAArBD,EAAOC,UACT/D,KAAKC,SACH,CACEV,YAAaH,EAAAA,GACXY,KAAKO,MAAMa,YAAYC,aAAa+D,cACpCC,EAAAA,EAAeC,OACfC,EAAAA,IAEF3F,0BAA0B,IAE5B,IAAMI,KAAKgE,eAAe,CAAEX,YAAarK,EAAe6B,UAG1DuL,EAAaG,qBAAqB,GAAGI,aACnC7C,EAAO2B,UAAU,GACnBzF,KAAKC,SAAS,CACZV,YAAaH,EAAAA,GACXY,KAAKO,MAAMa,YAAYC,aAAa+D,cACpCC,EAAAA,EAAeC,OACfC,EAAAA,IAEF3F,0BAA0B,IAE5BQ,QAAQC,IAAI,+BAAgCyD,EAAO2B,YAErDzF,KAAKO,MAAMqG,QAAQ5G,KAAKjB,MAAM/F,eAAgB,SAAUoN,EAAa,IAEtEV,OAAOvK,IACN6E,KAAKC,SAAS,CACZV,YAAaH,EAAAA,GACXY,KAAKO,MAAMa,YAAYC,aAAa+D,cACpCC,EAAAA,EAAeC,OACfC,EAAAA,IAEF3F,0BAA0B,IAE5BwG,EAAaG,qBAAqB,GAAGI,aAAexL,EACpD6E,KAAKO,MAAMqG,QAAQ5G,KAAKjB,MAAM/F,eAAgB,SAAUoN,EAAa,GAE3E,CA0CAZ,UAAAA,CAAWqB,GAMT,IAAgB,IALFzH,EAAAA,GACZY,KAAKO,MAAMa,YAAYC,aAAa+D,cACpCC,EAAAA,EAAeyB,KACfC,EAAAA,IAEoB,CACpB,IAAIC,EAAoB,CACtBC,SAAUC,EAAAA,GACVC,gBAAiB,CAAC,CAAEjG,IAAK,kBAAmBtG,MAAOiM,KAErDpD,IACEC,EAAAA,IACAtE,EAAAA,GACE4H,EACAhH,KAAKO,MAAM+C,aAAaC,YAGzBK,MAAMC,IACL,IAAIC,EAASD,EAAS5I,MACG,IAArB6I,EAAOC,UACT/D,KAAKC,SAAS,CACZN,mBAAoBmE,EAAOzC,aAAa+F,kBAG1CpH,KAAKC,SAAS,CAAEN,mBAAoB,KACpCS,QAAQC,IAAI,iCAAkCyD,EAAO2B,WACvD,IAEDC,OAAOvK,IACNiF,QAAQC,IAAI,4CAA6ClF,EAAM,GAErE,CACF,CAEAkM,MAAAA,GACE,MAAMjO,EAAc,CAClB6C,YAAa+D,KAAKjB,MAAMU,mBACxBhE,WAAYuE,KAAKjB,MAAMW,kBACvB7B,cAAemC,KAAKO,MAAM1C,eAEtByJ,EAAgB,CACpB,CACEC,UAAW,8BACXC,WACE,IAAIC,KACFzH,KAAKjB,MAAM/F,eAAe0O,iBAC1BC,qBACF,IACA,IAAIF,KACFzH,KAAKjB,MAAM/F,eAAe0O,iBAC1BE,sBAEN,CACEL,UAAW,oCACXC,gBAC+CtH,IAA7CF,KAAKjB,MAAM/F,eAAe6O,gBACmB,OAA7C7H,KAAKjB,MAAM/F,eAAe6O,eACtB,IAAIJ,KACFzH,KAAKjB,MAAM/F,eAAe6O,gBAC1BF,qBACF,IACA,IAAIF,KACFzH,KAAKjB,MAAM/F,eAAe6O,gBAC1BD,qBACF,IAER,CACEL,UAAW,0BACXC,WACE,IAAIC,KAAKzH,KAAKjB,MAAM/F,eAAe8O,aAAaH,qBAChD,IACA,IAAIF,KAAKzH,KAAKjB,MAAM/F,eAAe8O,aAAaF,uBAItD,OAAO5H,KAAKjB,MAAMO,iBAChB9E,EAAAA,EAAAA,MAAA,OAAAnC,SAAA,EACEF,EAAAA,EAAAA,KAACO,EAAAA,EAAa,CAAAL,UACZF,EAAAA,EAAAA,KAAC4P,EAAAA,EAAe,CACdC,WAAYhI,KAAKjB,MAAMhG,YAAY8B,KACnCoN,cAAc,iCACdX,cAAeA,OAGnBnP,EAAAA,EAAAA,KAACzB,EAAAA,EAAkB,CAACE,QAASoJ,KAAKjB,MAAMY,mBAAmBtH,SACxD,OAEHF,EAAAA,EAAAA,KAACO,EAAAA,EAAa,CAAAL,UACZF,EAAAA,EAAAA,KAACW,EAAkB,CACjBC,YAAaiH,KAAKjB,MAAMhG,YACxBC,eAAgBgH,KAAKjB,MAAM/F,eAC3BI,YAAaA,EACbH,iBAAkB+G,KAAKjB,MAAM9F,iBAC7BC,cAAe8G,KAAKjB,MAAMI,SAC1BhG,cAAe6G,KAAKF,aACpBzG,qBAAsB2G,KAAKa,yBAC3BtH,qBAAsByG,KAAKM,yBAC3B3G,oBAAqBqG,KAAKS,kBAC1B7G,mBAAoBoG,KAAKU,uBACzB7G,aAAcmG,KAAKW,iBACnB7G,cAAekG,KAAKY,oBACpB5G,iBAAkBgG,KAAKmC,qBACvBpI,iBAAkBiG,KAAKjB,MAAMS,gBAC7BvF,WAAY+F,KAAKjB,MAAM9E,WACvBX,iBACE0G,KAAKO,MAAMa,YAAYC,aAAaC,iBAEtC7H,0BAA2BuG,KAAKjB,MAAMtF,0BACtCD,yBAA0BwG,KAAKjB,MAAMvF,yBACrCE,sBAAuBsG,KAAKqC,+BAGhClK,EAAAA,EAAAA,KAACO,EAAAA,EAAa,CAAAL,UACZF,EAAAA,EAAAA,KAAC+P,EAAAA,EAAoB,CACnBC,WAAYnI,KAAKO,MAAM6H,OACvB3G,WAAYzB,KAAKyB,WACjBX,YAAad,KAAKc,YAClBvB,YAAaS,KAAKjB,MAAMQ,gBAI3BS,KAAKjB,MAAMa,0BACVzH,EAAAA,EAAAA,KAACkQ,EAAAA,EAAwB,CACvBC,SAAUtI,KAAKO,MAAMa,YAAYC,aAAakH,SAC9CC,aACkC,KAAhCxI,KAAKjB,MAAMhG,YAAY8B,KACnBwK,EAAAA,EAAeM,IACfN,EAAAA,EAAeC,OAErBmD,cAAelD,EAAAA,GACfmD,gBAAiB1I,KAAK8B,gBACtB6G,YAAa3I,KAAK+B,4BAElB,SAGN5J,EAAAA,EAAAA,KAACyQ,EAAAA,EAAW,CAACtC,QAAQ,WAEzB,EAGF,MAOA,GAAeuC,EAAAA,EAAAA,KAPU9J,IAChB,CACLqC,YAAarC,EAAM+J,eAAe1H,YAClCkC,aAAcvE,EAAM+J,eAAeC,aAIvC,CAAwCpK,E,4FC1lCjC,SAAShB,EAAmBhH,GAM/B,IANgC,aAClCiH,EAAY,iBACZE,EAAgB,gBAChBkL,EAAe,cACf7P,EAAa,cACb6E,GACDrH,EAGC,OADyB,OAArBmH,IAA2BA,EAAmB,KAEhD3F,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAD,SAChBE,IACAiC,EAAAA,EAAAA,MAAA,OAAKhC,MAAO,CAAEyQ,QAAS,OAAQC,eAAgB,iBAAkB7Q,SAAA,EAC/DF,EAAAA,EAAAA,KAAA,OAAKK,MAAO,CAAE2Q,MAAO,OAAQ9Q,UAC3BF,EAAAA,EAAAA,KAACoD,EAAAA,OAAM,CACLZ,OAAK,EACLa,YAAajD,EAAE,iBACf2C,MAAO3C,EAAE,iBACTqC,MAAOkD,EACPsL,UAAU,EACV1N,QAAS0D,EAAAA,GAAgCxB,GACzC5C,SAAWC,GAAS9B,EAAc,gBAAiB8B,GACnDE,MAAO5C,EAAEyQ,GACTjO,SAAkC,IAAxB6C,EAAaK,OACvB7C,cAAc,OAGlBjD,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,eAAcpC,UAC3BF,EAAAA,EAAAA,KAACgE,EAAAA,SAAQ,CACPjB,MAAO3C,EAAE,cACT6D,QACEsG,MAAMC,QAAQ7E,IACdA,EAAiBG,SAAWL,EAAaK,OAE3CjD,SAAWoB,GAAY4B,EAAc5B,WAOnD,CA9CAuB,EAAoB9E,aAAe,CACjC+E,aAAc,GACdE,iBAAkB,GAClBkL,gBAAiB,G,iFCMZ,SAASjB,EAAepR,GAAgD,IAA/C,WAAEqR,EAAU,cAAEC,EAAa,cAAEX,GAAe3Q,EAC1E,OACEwB,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAD,SAChBE,IACAJ,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,kBAAiBpC,UAC9BmC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBpC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,4BAA2BpC,UACxCF,EAAAA,EAAAA,KAAA,QAAMK,MAAO,CAAE6Q,OAAQ,QAAU5O,UAAU,cAAapC,SACtC,KAAf2P,QAAoC9H,IAAf8H,EAClBzP,EAAE0P,GACFD,MAGQ,KAAfA,QACc9H,IAAf8H,GACAV,EAAcrJ,OAAS,GACrB9F,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,kBAAiBpC,UAC9BF,EAAAA,EAAAA,KAACmR,EAAAA,MAAK,CACJC,SACE/O,EAAAA,EAAAA,MAAA,OAAAnC,SAAA,CACGE,EAAE+O,EAAc,GAAGC,WAAa,IAAI,IACpC,IAAMD,EAAc,GAAGE,YACxBrP,EAAAA,EAAAA,KAACqR,EAAAA,KAAI,CACHhR,MAAO,CAAEiR,WAAY,QACrBC,KAAK,SACLC,KAAK,aACLC,KAAK,aAIXC,SAAS,cACTxR,UAEAF,EAAAA,EAAAA,KAAC2R,EAAAA,KAAI,CAACrP,UAAU,qBAAoBpC,SACjCiP,EAAcpJ,KAAKb,IAClB7C,EAAAA,EAAAA,MAACsP,EAAAA,KAAKzL,QAAO,CAEX5D,UAAU,gCAA+BpC,SAAA,CAExCE,EAAE8E,EAAQkK,WAAa,IAAI,IAAE,IAAMlK,EAAQmK,aAHxC,6BAUd,SAOd,CA3DAO,EAAgBlP,aAAe,CAC7BmP,WAAY,GACZC,cAAe,GACfX,cAAe,IA0DjB,S,gFCjEO,SAASY,EAAoBvR,GAKhC,IALiC,WACnCwR,EAAU,WACV1G,EAAU,YACVX,EAAW,YACXvB,GACD5I,EACC,OACEwB,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAD,SAChBE,IACAiC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBpC,SAAA,EACrCF,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACvCF,EAAAA,EAAAA,KAAC8E,EAAAA,OAAM,CACLxC,UAAU,aACV6C,QAAS6K,EACT9K,QAAS9E,EAAE,aAGfJ,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACvCmC,EAAAA,EAAAA,MAAA,OAAKhC,MAAO,CAAEuR,MAAO,SAAU1R,SAAA,EAC7BF,EAAAA,EAAAA,KAAC8E,EAAAA,OAAM,CACLI,QAAS9E,EAAE,uBACXkC,UAAU,eACV6C,QAASwD,KAEX3I,EAAAA,EAAAA,KAAC8E,EAAAA,OAAM,CACLI,QAAS9E,EAAE,QACXwC,UAAWwE,EACXjC,QAASmE,aAWzB,CAvCAyG,EAAqBrP,aAAe,CAAE0G,aAAa,E,sGCH5C,SAAShB,EAAgB5H,GAI5B,IAJ6B,sBAC7B6H,EAAqB,mBACrBE,EAAkB,0BAClBjF,GACH9C,EACG,MAAMqT,EAA4B7L,IAC9B,GAA+B,eAA3BA,EAAUyE,aAEV,OADAqH,EAA6B9L,EAAU,IAAIsJ,MACpC,IAAIA,KAEX,IAAIyC,EAAQ/L,EAAUyE,aAAauH,MAAM,KACzC,OAAO,IAAI1C,KAAKyC,EAAM,GAAGA,EAAM,GAAG,EAAEA,EAAM,GAC9C,EAEED,EAA+BA,CAAC9L,EAAWvD,KAC7C,IAAIwP,EAAU,IAAI3C,KAAK7M,GACvBA,EAAQwP,EAAQC,cAAgB,KAAO,KAAOD,EAAQE,WAAa,IAAIC,OAAO,GAAK,KAAO,IAAMH,EAAQI,WAAWD,OAAO,GAC1H7L,EAAmBP,EAAUvD,EAAM,EAEvC,OACIzC,EAAAA,EAAAA,KAACG,EAAAA,oBAAmB,CAAAD,SACdE,IACEJ,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,MAAKpC,UAChBF,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,kCAAiCpC,UAC5CF,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,MAAKpC,SAEZmG,EAAsBN,KAAKC,GACvBA,EAAUsM,SAASC,gBAAkBC,EAAAA,GAAmBC,OAAOF,gBAAyC,IAAxBvM,EAAU0M,WACtF1S,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,CACFC,OAAK,EACLO,MAAO3C,EAAE4F,EAAU2M,aACnBlQ,MAAkC,OAA3BuD,EAAUyE,aAAwB,GAAKzE,EAAUyE,aACxD9H,WAAqC,IAA1BqD,EAAU4M,YAAuB,WAAa,KACzDhQ,UAAmC,IAAzBoD,EAAU6M,WACpBhQ,SAAWJ,GAAU8D,EAAmBP,EAAWvD,GACnDO,MAAO5C,EAAEkB,EAA0B0E,EAAUtD,OAC7CO,cAAc,MAEZ+C,EAAUsM,SAASC,gBAAkBC,EAAAA,GAAmBM,IAAIP,eAAiBvM,EAAUsM,SAASC,gBAAkBC,EAAAA,GAAmBO,KAAKR,gBAA0C,IAAxBvM,EAAU0M,UAezK1M,EAAUsM,SAASC,gBAAkBC,EAAAA,GAAmBQ,MAAMT,eAAiBvM,EAAUsM,SAASC,gBAAkBC,EAAAA,GAAmBS,OAAOV,gBAA0C,IAAxBvM,EAAU0M,UAgBzK1M,EAAUsM,SAASC,gBAAkBC,EAAAA,GAAmBU,KAAKX,gBAAyC,IAAxBvM,EAAU0M,WACpF1S,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACgE,EAAAA,SAAQ,CAAC1B,UAAU,sCAChBS,MAAO3C,EAAE4F,EAAU2M,aACnB1O,QAAoC,OAA3B+B,EAAUyE,aAAwB,GAAyD,SAApDzE,EAAUyE,aAAa0I,WAAWZ,cAClF3P,UAAmC,IAAzBoD,EAAU6M,WACpBhQ,SAAWJ,GAAU8D,EAAmBP,EAAWvD,OAIzDuD,EAAUsM,SAASC,gBAAkBC,EAAAA,GAAmBY,SAASb,gBAAyC,IAAxBvM,EAAU0M,WAE1F1S,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACqT,EAAAA,WAAU,CACP7Q,OAAK,EACLC,MAAmC,OAA3BuD,EAAUyE,cAAoD,KAA3BzE,EAAUyE,aAAuB,GACtEoH,EAAyB7L,GAE/BjD,MAAO3C,EAAE4F,EAAU2M,aACnBW,eAAeC,EAAAA,EAAAA,MACfC,iBAAiB,OACjB7Q,WAAqC,IAA1BqD,EAAU4M,YAAuB,WAAa,KACzDhQ,UAAmC,IAAzBoD,EAAU6M,WACpBhQ,SAAWJ,GACPqP,EAA6B9L,EAAWvD,GAE5CgR,aAAehR,IACXqP,EAA6B9L,EAAWvD,EAAM,EAElDO,MAAO5C,EAAEkB,EAA0B0E,EAAUtD,OAC7CO,cAAc,MAEb,MA/CjBjD,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,CACFC,OAAK,EACLO,MAAO3C,EAAE4F,EAAU2M,aACnBlQ,MAEgC,OAA3BuD,EAAUyE,cAAoD,KAA3BzE,EAAUyE,aAAuB,GAAMzE,EAAUyE,aAAc9G,iBAEvGhB,WAAqC,IAA1BqD,EAAU4M,YAAuB,WAAa,KACzDhQ,UAAmC,IAAzBoD,EAAU6M,WACpBhQ,SAAWJ,GAAU8D,EAAmBP,EAAWvD,GACnDO,MAAO5C,EAAEkB,EAA0B0E,EAAUtD,OAC7CO,cAAc,OA3B1BjD,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,2BAA0BpC,UACrCF,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,CACFC,OAAK,EACLO,MAAO3C,EAAE4F,EAAU2M,aACnBlQ,MAAkC,OAA3BuD,EAAUyE,aAAwB,GAAKzE,EAAUyE,aAExD9H,WAAqC,IAA1BqD,EAAU4M,YAAuB,WAAa,KACzDhQ,UAAmC,IAAzBoD,EAAU6M,WACpBhQ,SAAWJ,GAAU8D,EAAmBP,EAAWvD,GACnDO,MAAO5C,EAAEkB,EAA0B0E,EAAUtD,OAC7CO,cAAc,eA6DlE,C,mjCCtHO,MAAMyQ,EAAwB,SACxBC,EAAyB,iBACzBC,EAA6B,cAC7BpI,EAA6B,cAC7BqI,EAAyB,UACzBC,EAA6B,qBAC7BC,EAA0B,WAC1BC,EAA0B,WAC1BC,EAA6B,cAC7BC,EAAiC,kBACjCC,EAAsB,OACtBC,EAAwB,gBACxBC,EAAmC,4BACnCC,EAA0B,WAC1BC,EAAyB,UACzBC,EAAgC,iBAChCC,EAAgC,iBAChCC,EAAqB,MACrBC,EAA4B,aAC5BC,EAA4B,aAC5BC,EAAmC,oBACnCC,EAAuB,QACvBC,EAA0B,WAC1BC,EAAqC,sBACrCC,EAAgD,iCAChDC,EAAiC,kBACjCC,EAA4C,6BAC5CC,EAAiC,kBACjCC,EAAoC,qBACpCC,EAAgC,iBAChCC,EAAoC,kCACpCC,EAA2B,YAC3BC,EAA4B,aAC5BC,EAAqB,MACrBC,EAA6B,kBAE7BC,EAAgC,6BAEhCC,EAA0C,yBAC1CC,EAA0C,yBAC1CC,EAA2C,+BAI3CC,EAAkC,mBAClCC,EAAkC,mBAClCC,EAA0C,2BAC1CC,EAAmC,oBACnCC,EAA6C,8BAC7CC,EAA+C,+BAC/CC,EAAuC,+BACvCC,EAAsC,uBACtCC,EAAsC,uBACtCC,EAA4C,6BAC5CC,EAA+B,gBAC/BC,EAA8B,8BAC9BC,GAA6B,6BAC7BC,GAAqC,yBACrCC,GAA8C,+BAC9CC,GAAwC,yBAExCC,GAAmC,iCACnCC,GAAoC,2BACpCC,GAAoC,2BACpCC,GAA4B,aAG5BC,GAA0C,mBAC1CC,GAA0C,mBAC1CC,GAA2C,yBAC3CC,GAA0B,0BAC1BC,GAA2B,2BAC3BC,GAAyB,UACzBC,GAAsC,wBAEtCC,GAAuB,QACvBC,GAA2B,YAC3BC,GAA0B,WAC1BC,GAA8B,gBAC9BC,GAAmC,mCACnCC,GAAyB,wBACzBC,GAA6B,cAC7BC,GAAqB,MAErBC,GAAuB,sBACvBC,GAAyB,wBACzBC,GAAgC,iBAChCC,GAA4B,aAC5BC,GAAwB,kBACxBC,GAAuB,uBACvBC,GAAsB,sBAEtBC,GAAyB,yBACzBC,GAAwB,wBAExBC,GAAkC,mBAClCC,GAAsC,uBACtCC,GAA4C,6BAC5CC,GAA2C,4BAC3CC,GAA+B,gBAE/BC,GAAuC,wBAGvCC,GAAiD,kCACjDC,GAA8C,+BAC9CC,GAAiD,kCACjDC,GAAwD,yCACxDC,GAAkD,mCAClDC,GAAiD,kCACjDC,GAAgD,iCAChDC,GAA+C,gCAC/CC,GAAgD,iCAChDC,GAA6C,8BAC7CC,GAAgD,iCAChDC,GAAuD,wCACvDC,GAAiD,kCACjDC,GAAgD,iCAChDC,GAA+C,gCAC/CC,GAA8C,+BAE9CC,GAA2B,uBAE3BC,GAA6B,cAC7BC,GAA+B,gBAC/BC,GAA6B,cAI7BC,GAA+B,e,6GC9HrC,SAASC,EAAqBC,EAAYC,GAC/C,GAAIlQ,MAAMC,QAAQgQ,GAAa,CAIA,IAHTA,EAAWnQ,QAC5BqQ,GAAWA,EAAOpV,OAASmV,IAEZ3U,QAChB0U,EAAWG,QAAQ,CACjBlY,MAAO,KACP6C,KAAMmV,GAEZ,CACA,OAAOD,CACT,CAEO,SAASjH,IACd,IAAIqH,EAAWrb,OAAOsb,UAAUC,cAAgBvb,OAAOsb,UAAUD,SAMjE,OALAG,IAAAA,OAAcH,GACGG,IAAAA,aAEOC,eAAe,IAGzC,CAGO,SAASC,EAAgCnY,GAC9C,OACET,EAAAA,EAAAA,MAAA,OAAAnC,SAAA,EAAKF,EAAAA,EAAAA,KAAA,QAAAE,SAAO4C,KAAY9C,EAAAA,EAAAA,KAAA,OAAKkb,MAAM,wDAEvC,C","sources":["Components/Composite/Common/TMDetailsKPILayout.jsx","Components/UIBase/Details/BaseProductDetails.jsx","Components/Composite/Details/BaseProductDetailsComposite.jsx","Components/UIBase/Common/AssociatedTerminals.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/functionalUtilities.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nexport default function TMDetailsKPILayout({\r\n    KPIList,\r\n    pageName,\r\n    rowHeight,\r\n    widgetHeight,\r\n    isDraggable,\r\n    isResizable,\r\n    kpiDisplayTopBreakpoint\r\n}) {\r\n    const [KPIDisplays, setKPIDisplays] = useState(1);\r\n\r\n    const kpiDiv = React.useRef(null);\r\n\r\n    const hideKpis = () => {\r\n        let currentScrollPos = window.pageYOffset;\r\n        let KPIDisplay = KPIDisplays;\r\n\r\n        // hide kpis based on div position to top of the window \r\n        if (kpiDiv.current && kpiDiv.current.getBoundingClientRect().top < kpiDisplayTopBreakpoint) {\r\n            KPIDisplay = 0;\r\n        }\r\n        // show the kpis once at top of the screen\r\n        else if (currentScrollPos === 0) {\r\n            KPIDisplay = 1\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n\r\n        setKPIDisplays(KPIDisplay);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            window.addEventListener(\"scroll\", hideKpis);\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // remove listener on unmount\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", hideKpis)\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div ref={kpiDiv}>\r\n            {KPIDisplays === 1 ? <TranslationConsumer>\r\n                {(t) => (\r\n                    <div style={{ marginTop: \"6px\" }}>\r\n                        <ErrorBoundary>\r\n                            <KPIDashboardLayout\r\n                                kpiList={KPIList}\r\n                                isDraggable={isDraggable}\r\n                                isResizable={isResizable}\r\n                                rowHeight={rowHeight}\r\n                                widgetHeight={widgetHeight}\r\n                                pageName={pageName}\r\n                            ></KPIDashboardLayout>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n\r\n                )}\r\n            </TranslationConsumer> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nTMDetailsKPILayout.propTypes = {\r\n    kpiDisplayTopBreakpoint: PropTypes.number\r\n}\r\n\r\nTMDetailsKPILayout.defaultProps = {\r\n    kpiDisplayTopBreakpoint: 100\r\n}","import React from \"react\";\r\nimport { Select, Input, Checkbox, Accordion, Button, ColorPicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { AssociatedTerminals } from \"../Common/AssociatedTerminals\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\n\r\nBaseProductDetails.propTypes = {\r\n    baseProduct: PropTypes.object.isRequired,\r\n    modBaseProduct: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    selectedColor: PropTypes.object,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        productType: PropTypes.array,\r\n        DensityUOM: PropTypes.array,\r\n    }).isRequired,\r\n    onActiveStatusChange: PropTypes.func.isRequired,\r\n    isEnterpriseNode: PropTypes.bool.isRequired,\r\n    onAllTerminalsChange: PropTypes.func.isRequired,\r\n    modAttributeMetaDataList: PropTypes.array.isRequired,\r\n    attributeValidationErrors: PropTypes.array.isRequired,\r\n    onAttributeDataChange: PropTypes.func.isRequired,\r\n    onColorPickerChange: PropTypes.func.isRequired,\r\n  onColorPickerClose: PropTypes.func.isRequired,\r\n  onApplyColor: PropTypes.func.isRequired,\r\n  onChangeColor: PropTypes.func.isRequired,\r\n  onHexValueChange: PropTypes.func.isRequired,\r\n  colorPickerState: PropTypes.bool,\r\n  isValidHex: PropTypes.bool.isRequired\r\n}\r\n\r\nBaseProductDetails.defaultProps = {\r\n    listOptions: {\r\n        productType: [],\r\n        DensityUOM: [],\r\n    },\r\n    isEnterpriseNode: false\r\n}\r\n\r\nexport function BaseProductDetails({\r\n    baseProduct,\r\n    modBaseProduct,\r\n    validationErrors,\r\n    selectedColor,\r\n    onFieldChange,\r\n    listOptions,\r\n    onActiveStatusChange,\r\n    isEnterpriseNode,\r\n    onAllTerminalsChange,\r\n    modAttributeMetaDataList,\r\n    attributeValidationErrors,\r\n    onAttributeDataChange,\r\n    onColorPickerChange,\r\n  onColorPickerClose,\r\n  onApplyColor,\r\n  onChangeColor,\r\n  colorPickerState,\r\n  onHexValueChange,\r\n  isValidHex\r\n}) {\r\n    const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n        let attributeValidation = [];\r\n        attributeValidation = attributeValidationErrors.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n        })\r\n        return attributeValidation.attributeValidationErrors;\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modBaseProduct.Code}\r\n                                indicator=\"required\"\r\n                                disabled={baseProduct.Code !== \"\"}\r\n                                onChange={(data) => onFieldChange(\"Code\", data)}\r\n                                label={t(\"BaseProductInfo_BaseProdCode\")}\r\n                                error={t(validationErrors.Code)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modBaseProduct.Name}\r\n                                indicator=\"required\"\r\n                                onChange={(data) => onFieldChange(\"Name\", data)}\r\n                                label={t(\"BaseProductInfo_BaseProdName\")}\r\n                                error={t(validationErrors.Name)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modBaseProduct.Description}\r\n                                label={t(\"BaseProductInfo_Desc\")}\r\n                                onChange={(data) => onFieldChange(\"Description\", data)}\r\n                                error={t(validationErrors.Description)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        \r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"BaseProductInfo_DensityUOM\")}\r\n                                value={modBaseProduct.DensityUOM}\r\n                                options={listOptions.DensityUOM}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"DensityUOM\", data);\r\n                                }}\r\n                                indicator=\"required\"\r\n                                error={t(validationErrors.DensityUOM)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                indicator=\"required\"\r\n                                value={\r\n                                    modBaseProduct.MinDensity === null ? \"\" : modBaseProduct.MinDensity.toLocaleString()\r\n                                }\r\n                                label={t(\"BaseProductInfo_MinDensity\")}\r\n                                onChange={(data) => onFieldChange(\"MinDensity\", data)}\r\n                                error={t(validationErrors.MinDensity)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                indicator=\"required\"\r\n                                value={\r\n                                    modBaseProduct.MaxDensity === null ? \"\" : modBaseProduct.MaxDensity.toLocaleString()\r\n                                }\r\n                                label={t(\"BaseProductInfo_MaxDensity\")}\r\n                                onChange={(data) => onFieldChange(\"MaxDensity\", data)}\r\n                                error={t(validationErrors.MaxDensity)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"BaseProductInfo_ProductType\")}\r\n                                value={modBaseProduct.ProductType}\r\n                                options={listOptions.productType}\r\n                                onChange={(data) => {\r\n                                    onFieldChange(\"ProductType\", data);\r\n                                }}\r\n                                indicator=\"required\"\r\n                                error={t(validationErrors.ProductType)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modBaseProduct.AliasName}\r\n                                label={t(\"BaseProductInfo_Alias\")}\r\n                                onChange={(data) => onFieldChange(\"AliasName\", data)}\r\n                                error={t(validationErrors.AliasName)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                       \r\n                        <div className=\"col-12 col-md-6 col-lg-4 checkboxSelect\">\r\n                            <Checkbox\r\n                                label={t(\"BaseProductInfo_Additive\")}\r\n                                checked={modBaseProduct.IsAdditive ? true : false}\r\n                                onChange={(data) => onFieldChange(\"IsAdditive\", data)}\r\n                                disabled={modBaseProduct.VapourRecoveryProduct === true}\r\n                            />\r\n                            <Checkbox\r\n                                label={t(\"BaseProductInfo_IsVapRecProd\")}\r\n                                checked={modBaseProduct.VapourRecoveryProduct ? true : false}\r\n                                disabled={modBaseProduct.IsAdditive === true}\r\n                                onChange={(data) => onFieldChange(\"VapourRecoveryProduct\", data)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modBaseProduct.HazchemCode}\r\n                                label={t(\"BaseProductInfo_HazchemCode\")}\r\n                                onChange={(data) => onFieldChange(\"HazchemCode\", data)}\r\n                                error={t(validationErrors.HazchemCode)}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input fluid\r\n                className={`color-picker-input ${selectedColor && selectedColor !== '#ffffff' ? 'color-selected' : ''}`}\r\n                label={t(\"FinishedProdut_colorCode\")}\r\n                onFocus={() => onColorPickerChange()}\r\n                value={\r\n                    modBaseProduct.Color === null\r\n                    ? \"\"\r\n                    : modBaseProduct.Color\r\n                }\r\n                style={{ backgroundColor: selectedColor }}\r\n                reserveSpace={false}\r\n                error={isValidHex ? '' : t(validationErrors.Color)}\r\n                onChange={(color) => onHexValueChange(color)}\r\n              />\r\n\r\n              {\r\n                colorPickerState ? <>\r\n                  <ColorPicker\r\n                    onApply={() => onApplyColor({ hex: selectedColor })}\r\n                    onChange={(color) => onChangeColor(color)}\r\n                    value={selectedColor}\r\n                  />\r\n                  <Button type=\"primary\"\r\n                    iconRoot=\"common\"\r\n                    icon=\"close\"\r\n                    className=\"color-picker-close\"\r\n                    content=\"\"\r\n                    onClick={() => onColorPickerClose()}\r\n                    iconPosition=\"left\" /></> : ''\r\n              }\r\n\r\n            </div>\r\n            \r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"BaseProductList_Status\")}\r\n                                value={modBaseProduct.Active}\r\n                                options={[\r\n                                    { text: t(\"ViewShipment_Ok\"), value: true },\r\n                                    { text: t(\"ViewShipmentStatus_Inactive\"), value: false },\r\n                                ]}\r\n                                onChange={(data) => onActiveStatusChange(data)}\r\n                                error={t(validationErrors.Active)}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modBaseProduct.Remarks}\r\n                                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                                label={t(\"BaseProductList_Remarks\")}\r\n                                error={t(validationErrors.Remarks)}\r\n                                indicator={modBaseProduct.Active !== baseProduct.Active ? \"required\" : \"\"}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        \r\n                        {isEnterpriseNode ?\r\n                            (<div className=\"col-12 col-md-6 col-lg-4\">\r\n                                <AssociatedTerminals\r\n                                    terminalList={listOptions.terminalCodes}\r\n                                    selectedTerminal={modBaseProduct.TerminalCodes}\r\n                                    error={t(validationErrors.TerminalCodes)}\r\n                                    onFieldChange={onFieldChange}\r\n                                    onCheckChange={onAllTerminalsChange}\r\n                                ></AssociatedTerminals>\r\n                            </div>) : (\"\")}\r\n                    </div>\r\n\r\n                    {\r\n                        modAttributeMetaDataList.length > 0 ?\r\n                        modAttributeMetaDataList.map((attribute) =>\r\n                                <ErrorBoundary>\r\n                                    <Accordion >\r\n                                        <Accordion.Content\r\n                                            className=\"attributeAccordian\"\r\n                                            title={isEnterpriseNode ? (attribute.TerminalCode + ' - ' + t(\"Attributes_Header\")) : (t(\"Attributes_Header\"))}\r\n                                        >\r\n                                            <AttributeDetails\r\n                                                selectedAttributeList={attribute.attributeMetaDataList}\r\n                                                handleCellDataEdit={onAttributeDataChange}\r\n                                                attributeValidationErrors={handleValidationErrorFilter(attributeValidationErrors, attribute.TerminalCode)}\r\n                                            ></AttributeDetails>\r\n                                        </Accordion.Content>\r\n                                    </Accordion>\r\n                                </ErrorBoundary>\r\n                            ) : null\r\n                    }\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { BaseProductDetails } from \"../../UIBase/Details/BaseProductDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { emptyBaseProduct } from \"../../../JS/DefaultEntities\";\r\nimport { baseProductValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport {\r\n  functionGroups,\r\n  fnBaseProduct,\r\n  fnKPIInformation,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport { baseProductAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiBaseProductDetail } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\nclass BaseProductDetailsComposite extends Component {\r\n  state = {\r\n    baseProduct: lodash.cloneDeep(emptyBaseProduct),\r\n    modBaseProduct: {},\r\n    appliedColor: \"\",\r\n    selColor: \"\",\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      baseProductValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    saveEnabled: false,\r\n    showColorPicker: false,\r\n    productTypeOptions: [],\r\n    densityUOMOptions: [],\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    baseProductKPIList: [],\r\n    showAuthenticationLayout: false,\r\n    tempBaseProduct: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      console.log(this.props.userDetails.EntityResult);\r\n      this.getAttributes(this.props.selectedRow);\r\n      this.getProductTypes();\r\n      this.getDensityUOMList();\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.baseProduct.Code !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getAttributes(nextProps.selectedRow);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getAttributes(baseProductRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [baseProductAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.baseProduct\r\n                ),\r\n            },\r\n            () => this.getBaseProduct(baseProductRow)\r\n          );\r\n        } else {\r\n          console.log(\"Error in getAttributes:\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var modAttributeMetaDataList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.attributeMetaDataList\r\n        );\r\n        modAttributeMetaDataList = lodash.cloneDeep(\r\n          this.state.modAttributeMetaDataList\r\n        );\r\n        const attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        var modBaseProduct = lodash.cloneDeep(this.state.modBaseProduct);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.baseProduct.forEach(function (\r\n              attributeMetaData\r\n            ) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                var Attributevalue = modBaseProduct.Attributes.find(\r\n                  (baseproductAttribute) => {\r\n                    return baseproductAttribute.TerminalCode === terminal;\r\n                  }\r\n                );\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute =\r\n                      Attributevalue.ListOfAttributeData.find((x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      });\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        modAttributeMetaDataList = [];\r\n        modAttributeMetaDataList = attributesTerminalsList;\r\n        modAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n          modAttributeMetaDataList\r\n        );\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (\r\n        Array.isArray(attributeMetaDataList.baseProduct) &&\r\n        attributeMetaDataList.baseProduct.length > 0\r\n      ) {\r\n        this.terminalSelectionChange([\r\n          attributeMetaDataList.baseProduct[0].TerminalCode,\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getBaseProduct(baseProductRow) {\r\n    emptyBaseProduct.DensityUOM =\r\n      this.props.userDetails.EntityResult.PageAttibutes.DefaultUOMS.DensityUOM;\r\n    if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n      emptyBaseProduct.TerminalCodes =\r\n        this.props.terminalCodes.length === 1\r\n          ? [...this.props.terminalCodes]\r\n          : [];\r\n    }\r\n\r\n    if (baseProductRow.Common_Code === undefined) {\r\n      this.setState(\r\n        {\r\n          baseProduct: lodash.cloneDeep(emptyBaseProduct),\r\n          modBaseProduct: lodash.cloneDeep(emptyBaseProduct),\r\n          isReadyToRender: true,\r\n          modAttributeMetaDataList: [],\r\n          baseProductKPIList: [],\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnBaseProduct\r\n          ),\r\n          selColor: \"\",\r\n          appliedColor: \"\",\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            if (this.props.terminalCodes.length === 1) {\r\n              this.terminalSelectionChange(this.props.terminalCodes);\r\n            } else {\r\n              this.terminalSelectionChange([]);\r\n            }\r\n          } else {\r\n            this.localNodeAttribute();\r\n          }\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.baseProductCode,\r\n        value: baseProductRow.Common_Code,\r\n      },\r\n    ];\r\n    var obj = {\r\n      keyDataCode: KeyCodes.baseProductCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetBaseProduct,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              isReadyToRender: true,\r\n              baseProduct: lodash.cloneDeep(result.EntityResult),\r\n              modBaseProduct: lodash.cloneDeep(result.EntityResult),\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnBaseProduct\r\n              ),\r\n            },\r\n            () => {\r\n              this.getKPIList(result.EntityResult.Code);\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                this.terminalSelectionChange(result.EntityResult.TerminalCodes);\r\n              } else {\r\n                this.localNodeAttribute();\r\n              }\r\n            }\r\n          );\r\n\r\n          if (\r\n            result.EntityResult !== null &&\r\n            result.EntityResult !== undefined\r\n          ) {\r\n            //this.hexToRGB(result.EntityResult.Color)\r\n            this.assignColor(result.EntityResult.Color);\r\n            //this.bindBaseProducts(result.EntityResult.ProductType)\r\n          }\r\n        } else {\r\n          this.setState({\r\n            baseProduct: lodash.cloneDeep(emptyBaseProduct),\r\n            modBaseProduct: lodash.cloneDeep(emptyBaseProduct),\r\n            isReadyToRender: true,\r\n            selColor: \"\",\r\n          });\r\n          console.log(\"Error in getBaseProduct:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting BaseProduct:\", error, baseProductRow);\r\n      });\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modBaseProduct = lodash.cloneDeep(this.state.modBaseProduct);\r\n\r\n      modBaseProduct[propertyName] = data;\r\n      this.setState({ modBaseProduct });\r\n\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (baseProductValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          baseProductValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n\r\n      if (propertyName === \"TerminalCodes\") {\r\n        this.terminalSelectionChange(data);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleAllTerminalsChange = (checked) => {\r\n    try {\r\n      var terminalCodes = [...this.props.terminalCodes];\r\n      var modBaseProduct = lodash.cloneDeep(this.state.modBaseProduct);\r\n      if (checked) modBaseProduct.TerminalCodes = [...terminalCodes];\r\n      else modBaseProduct.TerminalCodes = [];\r\n      this.setState({ modBaseProduct: modBaseProduct });\r\n      this.terminalSelectionChange(modBaseProduct.TerminalCodes);\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on handleAllTerminasChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  assignColor = (hex) => {\r\n    if (hex !== null && hex !== \"\") {\r\n      var selColor = hex;\r\n      var modBaseProduct = lodash.cloneDeep(this.state.modBaseProduct);\r\n      modBaseProduct.Color = selColor;\r\n      this.setState({\r\n        selColor,\r\n        modBaseProduct,\r\n        appliedColor: selColor,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        selColor: \"\",\r\n        appliedColor: selColor,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleColorPicker = () => {\r\n    try {\r\n      this.setState({\r\n        showColorPicker: true,\r\n        isValidHex: true,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsProject:Error occured on handleColorPicker\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleColorPickerClose = () => {\r\n    var modBaseProduct = lodash.cloneDeep(this.state.modBaseProduct);\r\n    try {\r\n      modBaseProduct.Color =\r\n        this.state.appliedColor !== undefined ? this.state.appliedColor : \"\";\r\n\r\n      this.setState({\r\n        showColorPicker: false,\r\n        selColor:\r\n          this.state.appliedColor !== undefined ? this.state.appliedColor : \"\",\r\n        modBaseProduct,\r\n        isValidHex: true,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"baseProductDetailsProject:Error occured on handleColorPickerClose\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleApplyColor = (color) => {\r\n    let isValidHex = this.state.isValidHex;\r\n    if (isValidHex) {\r\n      var modBaseProduct = lodash.cloneDeep(this.state.modBaseProduct);\r\n      modBaseProduct.Color = color.hex;\r\n      this.setState({\r\n        appliedColor: color.hex,\r\n        showColorPicker: false,\r\n        selColor: color.hex,\r\n        modBaseProduct,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleOnColorChange = (color) => {\r\n    var modBaseProduct = lodash.cloneDeep(this.state.modBaseProduct);\r\n    modBaseProduct.Color = color.hex;\r\n    this.setState({\r\n      selColor: color.hex,\r\n      modBaseProduct,\r\n      isValidHex: true,\r\n    });\r\n  };\r\n\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modBaseProduct = lodash.cloneDeep(this.state.modBaseProduct);\r\n      modBaseProduct.Active = value;\r\n      if (modBaseProduct.Active !== this.state.baseProduct.Active)\r\n        modBaseProduct.Remarks = \"\";\r\n      this.setState({ modBaseProduct });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  getProductTypes() {\r\n    axios(\r\n      RestAPIs.GetProductType,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let productTypeOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ productTypeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getProductTypes:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting getProductTypes:\", error);\r\n      });\r\n  }\r\n\r\n  getDensityUOMList() {\r\n    axios(\r\n      RestAPIs.GetUOMList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            let densityUOMs = result.EntityResult.DENSITY;\r\n            let densityUOMOptions = [];\r\n            densityUOMs.forEach((weightOption) => {\r\n              densityUOMOptions.push({\r\n                text: weightOption,\r\n                value: weightOption,\r\n              });\r\n            });\r\n\r\n            this.setState({\r\n              densityUOMOptions,\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getUOM:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting getUOM:\", error);\r\n      });\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n      const baseProduct = lodash.cloneDeep(this.state.baseProduct);\r\n\r\n      let color = \"\";\r\n      if (\r\n        this.state.baseProduct.Color !== null &&\r\n        this.state.baseProduct.Color !== \"\"\r\n      ) {\r\n        color = this.state.baseProduct.Color;\r\n      }\r\n      baseProduct.Color = color;\r\n\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modBaseProduct: { ...baseProduct },\r\n          selectedCompRow: [],\r\n          validationErrors,\r\n          modAttributeMetaDataList: [],\r\n          selColor: color,\r\n          appliedColor: color,\r\n          showColorPicker: false,\r\n          isValidHex: true,\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange(baseProduct.TerminalCodes);\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            this.localNodeAttribute();\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors:\r\n          Utilities.getAttributeInitialValidationErrors(\r\n            attributeMetaDataList.baseProduct\r\n          ),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"handleAttributeValidationError:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleSave = () => {\r\n    try {\r\n      let modBaseProduct = this.fillDetails();\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      //this.setState({ saveEnabled: false });\r\n      if (modBaseProduct.Color !== null && modBaseProduct.Color !== \"\") {\r\n      } else modBaseProduct.Color = \"\";\r\n\r\n      if (this.validateSave(modBaseProduct, attributeList)) {\r\n        let showAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n        let tempBaseProduct = lodash.cloneDeep(modBaseProduct);\r\n        this.setState({ showAuthenticationLayout, tempBaseProduct }, () => {\r\n          if (showAuthenticationLayout === false) {\r\n            this.saveBaseProduct();\r\n          }\r\n        });\r\n      } \r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  saveBaseProduct = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempBaseProduct = lodash.cloneDeep(this.state.tempBaseProduct);\r\n\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n\r\n      tempBaseProduct = this.convertStringtoDecimal(\r\n        tempBaseProduct,\r\n        attributeList\r\n      );\r\n\r\n      this.state.baseProduct.Code === \"\"\r\n        ? this.createBaseProduct(tempBaseProduct)\r\n        : this.updateBaseProduct(tempBaseProduct);\r\n    } catch (error) {\r\n      console.log(\"BaseProductDetailsComposite : Error in saveBaseProduct\");\r\n    }\r\n  };\r\n\r\n  // parentCallBack = () => {\r\n  //   let modBaseProduct = lodash.cloneDeep(this.state.modBaseProduct);\r\n  //   this.setState({ showAuthenticationLayout: false });\r\n  //   this.saveBaseProduct(modBaseProduct);\r\n  // };\r\n\r\n  fillDetails() {\r\n    try {\r\n      let modBaseProduct = lodash.cloneDeep(this.state.modBaseProduct);\r\n      if (\r\n        modBaseProduct.MinDensity !== null &&\r\n        modBaseProduct.MinDensity !== \"\"\r\n      )\r\n        modBaseProduct.MinDensity = modBaseProduct.MinDensity.toLocaleString();\r\n      if (\r\n        modBaseProduct.MaxDensity !== null &&\r\n        modBaseProduct.MaxDensity !== \"\"\r\n      )\r\n        modBaseProduct.MaxDensity = modBaseProduct.MaxDensity.toLocaleString();\r\n\r\n      //attributeList = Utilities.attributesConverttoLocaleString(attributeList);\r\n      this.setState({ modBaseProduct });\r\n      return modBaseProduct;\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on fillDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  validateSave(modBaseProduct, attributeList) {\r\n    const validationErrors = { ...this.state.validationErrors };\r\n    Object.keys(baseProductValidationDef).forEach(function (key) {\r\n      if (modBaseProduct[key] !== undefined)\r\n        validationErrors[key] = Utilities.validateField(\r\n          baseProductValidationDef[key],\r\n          modBaseProduct[key]\r\n        );\r\n    });\r\n\r\n    if (\r\n      modBaseProduct.MinDensity !== null &&\r\n      modBaseProduct.MinDensity !== \"\" &&\r\n      modBaseProduct.MaxDensity !== null &&\r\n      modBaseProduct.MaxDensity !== \"\"\r\n    ) {\r\n      if (\r\n        Utilities.convertStringtoDecimal(modBaseProduct.MinDensity) >=\r\n        Utilities.convertStringtoDecimal(modBaseProduct.MaxDensity)\r\n      ) {\r\n        validationErrors[\"MaxDensity\"] = \"BaseProductInfo_MaxDensityLesser\";\r\n      }\r\n    }\r\n\r\n    if (modBaseProduct.Active !== this.state.baseProduct.Active) {\r\n      if (modBaseProduct.Remarks === null || modBaseProduct.Remarks === \"\") {\r\n        validationErrors[\"Remarks\"] = \"BaseProductInfo_EnterRemarks\";\r\n      }\r\n    }\r\n\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({ validationErrors, attributeValidationErrors });\r\n\r\n    var returnValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  handleHexValueChange = (value) => {\r\n    try {\r\n      let modBaseProduct = lodash.cloneDeep(this.state.modBaseProduct);\r\n      var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      modBaseProduct.Color = value;\r\n      this.setState({ modBaseProduct });\r\n      var regex = /^#[0-9A-Fa-f]{6}$/;\r\n      let isValidHex = regex.test(value);\r\n\r\n      if (isValidHex) {\r\n        this.setState({\r\n          selColor: value,\r\n        });\r\n      } else {\r\n        if (\r\n          (value !== undefined || value !== \"\") &&\r\n          (modBaseProduct.Color !== \"\" || modBaseProduct.Color !== undefined)\r\n        )\r\n          validationErrors[\"Color\"] = \"FP_Color_hex\";\r\n        this.setState({\r\n          selColor: \"#ffffff\",\r\n        });\r\n      }\r\n      this.setState({ validationErrors, isValidHex });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  convertStringtoDecimal(modBaseProduct, attributeList) {\r\n    try {\r\n      if (\r\n        modBaseProduct.MinDensity !== null &&\r\n        modBaseProduct.MinDensity !== \"\"\r\n      ) {\r\n        modBaseProduct.MinDensity = Utilities.convertStringtoDecimal(\r\n          modBaseProduct.MinDensity\r\n        );\r\n      }\r\n      if (\r\n        modBaseProduct.MaxDensity !== null &&\r\n        modBaseProduct.MaxDensity !== \"\"\r\n      ) {\r\n        modBaseProduct.MaxDensity = Utilities.convertStringtoDecimal(\r\n          modBaseProduct.MaxDensity\r\n        );\r\n      }\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modBaseProduct.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n      return modBaseProduct;\r\n    } catch (err) {\r\n      console.log(\"convertStringtoDecimal error BaseProduct Details\", err);\r\n    }\r\n  }\r\n\r\n  createBaseProduct(modBaseProduct) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.baseProductCode,\r\n        value: modBaseProduct.Code,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.baseProductCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modBaseProduct,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"BaseProductInfo_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"BaseProductInfo_BaseProdCode\"],\r\n          keyValues: [modBaseProduct.Code],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.CreateBaseProduct,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnBaseProduct\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () => this.getBaseProduct({ Common_Code: modBaseProduct.Code })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnBaseProduct\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in createBaseProduct:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modBaseProduct, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnBaseProduct\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modBaseProduct, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  updateBaseProduct(modBaseProduct) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.baseProductCode,\r\n        value: modBaseProduct.Code,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.baseProductCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modBaseProduct,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"BaseProductInfo_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"BaseProductInfo_BaseProdCode\"],\r\n          keyValues: [modBaseProduct.Code],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateBaseProduct,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnBaseProduct\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () => this.getBaseProduct({ Common_Code: modBaseProduct.Code })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnBaseProduct\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in update BaseProduct:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modBaseProduct, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.modify,\r\n            fnBaseProduct\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modBaseProduct, \"modify\", notification);\r\n      });\r\n  }\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on handleAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  //Get KPI for Base Product\r\n  getKPIList(baseProductCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      let objKPIRequestData = {\r\n        PageName: kpiBaseProductDetail,\r\n        InputParameters: [{ key: \"BaseProductCode\", value: baseProductCode }],\r\n      };\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              baseProductKPIList: result.EntityResult.ListKPIDetails,\r\n            });\r\n          } else {\r\n            this.setState({ baseProductKPIList: [] });\r\n            console.log(\"Error in base product KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Base Product KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const listOptions = {\r\n      productType: this.state.productTypeOptions,\r\n      DensityUOM: this.state.densityUOMOptions,\r\n      terminalCodes: this.props.terminalCodes,\r\n    };\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"BaseProductInfo_LastUpdated\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modBaseProduct.LastUpdatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modBaseProduct.LastUpdatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"BaseProductInfo_LastActivatedTime\",\r\n        fieldValue:\r\n          this.state.modBaseProduct.LastActiveTime !== undefined &&\r\n          this.state.modBaseProduct.LastActiveTime !== null\r\n            ? new Date(\r\n                this.state.modBaseProduct.LastActiveTime\r\n              ).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(\r\n                this.state.modBaseProduct.LastActiveTime\r\n              ).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"BaseProductInfo_Created\",\r\n        fieldValue:\r\n          new Date(this.state.modBaseProduct.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modBaseProduct.CreatedTime).toLocaleTimeString(),\r\n      },\r\n    ];\r\n\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.baseProduct.Code}\r\n            newEntityName=\"BaseProductInfo_NewBaseProduct\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <TMDetailsKPILayout KPIList={this.state.baseProductKPIList}>\r\n          {\" \"}\r\n        </TMDetailsKPILayout>\r\n        <ErrorBoundary>\r\n          <BaseProductDetails\r\n            baseProduct={this.state.baseProduct}\r\n            modBaseProduct={this.state.modBaseProduct}\r\n            listOptions={listOptions}\r\n            validationErrors={this.state.validationErrors}\r\n            selectedColor={this.state.selColor}\r\n            onFieldChange={this.handleChange}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            onAllTerminalsChange={this.handleAllTerminalsChange}\r\n            onColorPickerChange={this.handleColorPicker}\r\n            onColorPickerClose={this.handleColorPickerClose}\r\n            onApplyColor={this.handleApplyColor}\r\n            onChangeColor={this.handleOnColorChange}\r\n            onHexValueChange={this.handleHexValueChange}\r\n            colorPickerState={this.state.showColorPicker}\r\n            isValidHex={this.state.isValidHex}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            onAttributeDataChange={this.handleAttributeDataChange}\r\n          ></BaseProductDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.baseProduct.Code === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnBaseProduct}\r\n            handleOperation={this.saveBaseProduct}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BaseProductDetailsComposite);\r\n\r\nBaseProductDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Select, Checkbox } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nAssociatedTerminals.propTypes = {\r\n  terminalList: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  selectedTerminal: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  validationError: PropTypes.string,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onCheckChange: PropTypes.func.isRequired,\r\n};\r\nAssociatedTerminals.defaultProps = {\r\n  terminalList: [],\r\n  selectedTerminal: [],\r\n  validationError: \"\",\r\n};\r\nexport function AssociatedTerminals({\r\n  terminalList,\r\n  selectedTerminal,\r\n  validationError,\r\n  onFieldChange,\r\n  onCheckChange,\r\n}) {\r\n  //console.log(\"component terminalList\", terminalList);\r\n  if (selectedTerminal === null) selectedTerminal = [];\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <div style={{ width: \"80%\" }}>\r\n            <Select\r\n              fluid\r\n              placeholder={t(\"Common_Select\")}\r\n              label={t(\"TerminalCodes\")}\r\n              value={selectedTerminal}\r\n              multiple={true}\r\n              options={Utilities.transferListtoOptions(terminalList)}\r\n              onChange={(data) => onFieldChange(\"TerminalCodes\", data)}\r\n              error={t(validationError)}\r\n              disabled={terminalList.length === 0}\r\n              reserveSpace={false}\r\n            />\r\n          </div>\r\n          <div className=\"ddlSelectAll\">\r\n            <Checkbox\r\n              label={t(\"Common_All\")}\r\n              checked={\r\n                Array.isArray(selectedTerminal) &&\r\n                selectedTerminal.length === terminalList.length\r\n              }\r\n              onChange={(checked) => onCheckChange(checked)}\r\n            ></Checkbox>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["TMDetailsKPILayout","_ref","KPIList","pageName","rowHeight","widgetHeight","isDraggable","isResizable","kpiDisplayTopBreakpoint","KPIDisplays","setKPIDisplays","useState","kpiDiv","React","hideKpis","currentScrollPos","window","pageYOffset","KPIDisplay","current","getBoundingClientRect","top","useEffect","addEventListener","removeEventListener","_jsx","ref","children","TranslationConsumer","t","style","marginTop","ErrorBoundary","KPIDashboardLayout","kpiList","defaultProps","BaseProductDetails","baseProduct","modBaseProduct","validationErrors","selectedColor","onFieldChange","listOptions","onActiveStatusChange","isEnterpriseNode","onAllTerminalsChange","modAttributeMetaDataList","attributeValidationErrors","onAttributeDataChange","onColorPickerChange","onColorPickerClose","onApplyColor","onChangeColor","colorPickerState","onHexValueChange","isValidHex","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","_jsxs","className","Input","fluid","value","Code","indicator","disabled","onChange","data","label","error","reserveSpace","Name","Description","Select","placeholder","DensityUOM","options","search","noResultsMessage","MinDensity","toLocaleString","MaxDensity","ProductType","productType","AliasName","Checkbox","checked","IsAdditive","VapourRecoveryProduct","HazchemCode","concat","onFocus","Color","backgroundColor","color","_Fragment","ColorPicker","onApply","hex","Button","type","iconRoot","icon","content","onClick","iconPosition","Active","text","Remarks","AssociatedTerminals","terminalList","terminalCodes","selectedTerminal","TerminalCodes","onCheckChange","length","map","attribute","Accordion","Content","title","AttributeDetails","selectedAttributeList","attributeMetaDataList","handleCellDataEdit","BaseProductDetailsComposite","Component","constructor","arguments","state","lodash","emptyBaseProduct","appliedColor","selColor","Utilities","baseProductValidationDef","isReadyToRender","saveEnabled","showColorPicker","productTypeOptions","densityUOMOptions","baseProductKPIList","showAuthenticationLayout","tempBaseProduct","handleChange","propertyName","this","setState","undefined","terminalSelectionChange","console","log","handleAllTerminalsChange","props","assignColor","handleColorPicker","handleColorPickerClose","handleApplyColor","handleOnColorChange","handleActiveStatusChange","handleReset","Object","keys","forEach","key","selectedCompRow","userDetails","EntityResult","IsEnterpriseNode","handleResetAttributeValidationError","localNodeAttribute","handleSave","fillDetails","attributeList","validateSave","IsWebPortalUser","saveBaseProduct","handleAuthenticationClose","convertStringtoDecimal","createBaseProduct","updateBaseProduct","handleHexValueChange","test","handleAttributeDataChange","matchedAttributes","matchedAttributesList","filter","modattribute","Array","isArray","DefaultValue","componentDidMount","IsArchived","getAttributes","selectedRow","getProductTypes","getDensityUOMList","componentWillReceiveProps","nextProps","Common_Code","tokenDetails","tokenInfo","baseProductRow","axios","RestAPIs","baseProductAttributeEntity","then","response","result","IsSuccess","getBaseProduct","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","Attributes","baseproductAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","push","PageAttibutes","DefaultUOMS","keyCode","KeyCodes","obj","keyDataCode","FunctionsList","functionGroups","modify","fnBaseProduct","getKPIList","ErrorList","catch","add","densityUOMs","DENSITY","weightOption","returnValue","values","every","err","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","onSaved","baseProductCode","view","fnKPIInformation","objKPIRequestData","PageName","kpiBaseProductDetail","InputParameters","ListKPIDetails","render","popUpContents","fieldName","fieldValue","Date","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","LastActiveTime","CreatedTime","TMDetailsHeader","entityCode","newEntityName","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","validationError","display","justifyContent","width","multiple","margin","Popup","element","Icon","marginLeft","root","name","size","position","List","float","handleAttributeDateValue","convertAttributeDatetoString","chars","split","Dateval","getFullYear","getMonth","slice","getDate","DataType","toLowerCase","Constants","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","INT","LONG","FLOAT","DOUBLE","BOOL","toString","DATETIME","DatePicker","displayFormat","getCurrentDateFormat","showYearSelector","onTextChange","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","getOptionsWithSelect","ddlOptions","selectOptionText","option","unshift","language","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}