{"version":3,"file":"static/js/2139.fc6caf14.chunk.js","mappings":"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","sources":["Components/Composite/Common/Charts/DonutPieChart.jsx","Components/Composite/Common/Charts/LACDynamicSeriesChart.jsx","Components/Composite/Common/Charts/LACSeriesChart.jsx","Components/Composite/Common/Charts/WidgetOutlines/DashboardCard.jsx","Components/Composite/Common/Charts/WidgetOutlines/CustomModal.jsx","Components/Composite/Common/Charts/Wrappers/WithDetails.jsx","Components/Composite/Common/Charts/SingleValueChart.jsx","Components/Composite/Common/Charts/EntityDetails.jsx","Components/Composite/Common/Charts/BulletChart.jsx","Components/Composite/Common/Charts/GaugeChart.jsx","Components/UIBase/Common/DashboardGrid.jsx","Components/Composite/Common/Charts/StackedBullet.jsx","Components/Composite/Common/Charts/BlockChart.jsx","Components/Composite/Common/KPIDashboard/KPIDashboardLayout.jsx","JS/DashboardUtilities.js","JS/KPIPageName.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as wjChart from \"@grapecity/wijmo.react.chart\";\r\nimport * as wjChartAnimate from \"@grapecity/wijmo.react.chart.animation\";\r\nimport ErrorBoundary from \"../../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { ThemeType } from \"@scuf/common\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst DonutPieChart = (props) => {\r\n  const chartInitialized = (flex) => {\r\n    if (props.setChartRefs) {\r\n      props.setChartRefs(props.kpiInfo.KPIName, flex, props.kpiInfo.Sequence);\r\n    }\r\n\r\n    if (props.isLiveCheck) {\r\n      props.isLiveCheck(jsonData.Chart.ChartDetails.isLive);\r\n    }\r\n  };\r\n\r\n  const jsonData = JSON.parse(props.kpiInfo.JSONFormat);\r\n\r\n  // get palette based on the selected theme\r\n  const getPalettes = (theme) => {\r\n    try {\r\n      const chartPalette = jsonData.Chart.ChartDetails.common.palette;\r\n      if (chartPalette) {\r\n        // if palette in JSON does not have separate colours for 'dark' & 'light' theme\r\n        if (Array.isArray(chartPalette)) {\r\n          return jsonData.Chart.ChartDetails.common.palette;\r\n        }\r\n        else {\r\n          // select palette based on theme\r\n          if (theme === ThemeType.Dark && chartPalette.dark) {\r\n            return chartPalette.dark;\r\n          }\r\n          else {\r\n            return chartPalette.default;\r\n          }\r\n        }\r\n      }\r\n      else if (\r\n        jsonData.Chart.ChartDetails.bindings.colorsSource &&\r\n        jsonData.Chart.ChartDetails.bindings.colorsSource.table &&\r\n        jsonData.Chart.ChartDetails.bindings.colorsSource.columnName\r\n      ) {\r\n        if (\r\n          Array.isArray(\r\n            props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.colorsSource.table]\r\n          )\r\n        ) {\r\n          return props.kpiInfo.KPIData[\r\n            jsonData.Chart.ChartDetails.bindings.colorsSource.table\r\n          ].map((item) => item[jsonData.Chart.ChartDetails.bindings.colorsSource.columnName]);\r\n        }\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in getPalettes:\", error);\r\n      return []\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ErrorBoundary>\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div className=\"wijmoCharts\">\r\n            <wjChart.FlexPie\r\n              {...jsonData.Chart.ChartDetails.common}\r\n              itemsSource={\r\n                props.kpiInfo.KPIData[\r\n                jsonData.Chart.ChartDetails.bindings.seriesSource\r\n                ]\r\n              }\r\n              palette={getPalettes(props.theme)}\r\n              header={t(jsonData.Chart.ChartDetails.header)}\r\n              initialized={chartInitialized}\r\n            >\r\n              {jsonData.Chart.ChartDetails.chartLegend ? (\r\n                <wjChart.FlexChartLegend\r\n                  {...jsonData.Chart.ChartDetails.chartLegend}\r\n                ></wjChart.FlexChartLegend>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              {jsonData.Chart.ChartDetails.dataLabel ? (\r\n                <wjChart.FlexPieDataLabel\r\n                  {...jsonData.Chart.ChartDetails.dataLabel}\r\n                ></wjChart.FlexPieDataLabel>\r\n              ) : null}\r\n              <wjChartAnimate.FlexChartAnimation animationMode=\"Point\"></wjChartAnimate.FlexChartAnimation>\r\n            </wjChart.FlexPie>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nDonutPieChart.propTypes = {\r\n  kpiInfo: PropTypes.object.isRequired,\r\n  setChartRefs: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    theme: state.appTheme.theme\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DonutPieChart);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as wjChart from \"@grapecity/wijmo.react.chart\";\r\nimport * as wjChartInteraction from \"@grapecity/wijmo.react.chart.interaction\";\r\nimport * as wjChartAnimate from \"@grapecity/wijmo.react.chart.animation\";\r\nimport * as wjChartAnalytics from '@grapecity/wijmo.react.chart.analytics';\r\nimport ErrorBoundary from \"../../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { ThemeType } from \"@scuf/common\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst LACDynamicSeriesChart = (props) => {\r\n  const flexRef = React.useRef();\r\n\r\n  const jsonData = JSON.parse(props.kpiInfo.JSONFormat);\r\n  const initGestures = (gestures) => {\r\n    gestures.posX = jsonData.Chart.ChartDetails.initialPosition\r\n      ? jsonData.Chart.ChartDetails.initialPosition.xPosition\r\n      : 0;\r\n    gestures.posY = jsonData.Chart.ChartDetails.initialPosition\r\n      ? jsonData.Chart.ChartDetails.initialPosition.yPosition\r\n      : 0;\r\n    gestures.scaleX = jsonData.Chart.ChartDetails.initialPosition\r\n      ? jsonData.Chart.ChartDetails.initialPosition.xScale\r\n      : 0;\r\n    gestures.scaleY = jsonData.Chart.ChartDetails.initialPosition\r\n      ? jsonData.Chart.ChartDetails.initialPosition.yScale\r\n      : 0;\r\n  };\r\n\r\n  // reset major unit for Y-axis\r\n  React.useEffect(() => {\r\n    if (flexRef) {\r\n      setMajorUnitY();\r\n    }\r\n  }, [props.kpiInfo.KPIData])\r\n\r\n  // set Y-axis step and max value\r\n  const setMajorUnitY = () => {\r\n    let flex = flexRef.current;\r\n    let data = props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.seriesSource]\r\n    if (data && flex) {\r\n      let seriesData = []\r\n\r\n      // get the list of series bindings\r\n      if (\r\n        Array.isArray(props.kpiInfo.KPIData.Table) &&\r\n        props.kpiInfo.KPIData.Table.length > 0 &&\r\n        Array.isArray(jsonData.Chart.ChartDetails.seriesData.excludedBinding)\r\n      ) {\r\n        let columns = Object.keys(props.kpiInfo.KPIData.Table[0]);\r\n        for (let key in columns) {\r\n          if (\r\n            !jsonData.Chart.ChartDetails.seriesData.excludedBinding.includes(\r\n              columns[key]\r\n            )\r\n          ) {\r\n            seriesData.push(columns[key]);\r\n          }\r\n        }\r\n      }\r\n\r\n      let maxs = [];\r\n      // identify the max value for each series bindings\r\n      seriesData.forEach((ybind) => {\r\n        let max = 0;\r\n        data.forEach((row, index) => {\r\n          if (index === 0) {\r\n            max = row[ybind]\r\n          }\r\n          else {\r\n            if (row[ybind] > max) {\r\n              max = row[ybind]\r\n            }\r\n          }\r\n        })\r\n        // store the diff for each series binding\r\n        maxs.push(max);\r\n      })\r\n\r\n      // check if diff values for all series bindings are less than threshold\r\n      if (maxs.filter(val => val <= 5).length === maxs.length) {\r\n        // set majorUnit as 1 to avoid decimals\r\n        flex.axisY.majorUnit = 1;\r\n        flex.axisY.max = 5;\r\n      }\r\n      else {\r\n        // set majorUnit to auto\r\n        flex.axisY.majorUnit = undefined;\r\n        flex.axisY.max = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  const chartInitiliazed = (flex) => {\r\n    flexRef.current = flex;\r\n\r\n    setMajorUnitY();\r\n\r\n    if (props.setChartRefs) {\r\n      props.setChartRefs(props.kpiInfo.KPIName, flex, props.kpiInfo.Sequence);\r\n    }\r\n\r\n    if (props.isLiveCheck) {\r\n      props.isLiveCheck(jsonData.Chart.ChartDetails.isLive);\r\n    }\r\n  };\r\n\r\n  // const handleRender = (s) => {\r\n  //   try {\r\n  //     let elements = s.engine.element;\r\n  //     let seriesDataLength = Array.isArray(jsonData.Chart.ChartDetails.seriesData) ? jsonData.Chart.ChartDetails.seriesData.length : 0;\r\n  //     if (seriesDataLength <= 1) {\r\n  //       let series = elements.querySelectorAll('.wj-series-group g');\r\n  //       if (jsonData.Chart.ChartDetails.common.chartType === \"Column\") {\r\n  //         // set the width for each column\r\n  //         series.forEach((seriesItem, idx) => {\r\n  //           seriesItem.querySelectorAll('rect').forEach((rect) => {\r\n  //             // set the max width to 30\r\n  //             if (Number(rect.getAttribute('width')) > 35) {\r\n  //               let xTickLoc = 0;\r\n  //               xTickLoc = (Number(rect.getAttribute('x')) + Number(rect.getAttribute('width')) / 2) - 17.5;\r\n  //               // set 'width' to 30\r\n  //               rect.setAttribute('width', '35');\r\n  //               // set 'x' value\r\n  //               rect.setAttribute('x', xTickLoc);\r\n  //             }\r\n  //           });\r\n  //         });\r\n  //       }\r\n  //       else if (jsonData.Chart.ChartDetails.common.chartType === \"Bar\") {\r\n  //         // set the width for each bar\r\n  //         series.forEach((seriesItem, idx) => {\r\n  //           seriesItem.querySelectorAll('rect').forEach((rect) => {\r\n  //             // set the max height to 30\r\n  //             if (Number(rect.getAttribute('height')) > 35) {\r\n  //               // get new 'x' value for thebar \r\n  //               let xTickLoc = (Number(rect.getAttribute('y')) + Number(rect.getAttribute('height')) / 2) - 17.5;\r\n  //               // set 'height' to 30\r\n  //               rect.setAttribute('height', '35');\r\n  //               // set 'y' value\r\n  //               rect.setAttribute('y', xTickLoc);\r\n  //             }\r\n  //           });\r\n  //         });\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   catch (error) {\r\n  //     console.log(\"Error in handleRender: \", error);\r\n  //   }\r\n  // }\r\n\r\n  const getFlexChartSeries = () => {\r\n    let flexSeries = [];\r\n    //let supportedObjetcs={}\r\n\r\n    try {\r\n      if (\r\n        Array.isArray(props.kpiInfo.KPIData.Table) &&\r\n        props.kpiInfo.KPIData.Table.length > 0 &&\r\n        Array.isArray(jsonData.Chart.ChartDetails.seriesData.excludedBinding)\r\n      ) {\r\n        let columns = Object.keys(props.kpiInfo.KPIData.Table[0]);\r\n        for (let key in columns) {\r\n          if (\r\n            !jsonData.Chart.ChartDetails.seriesData.excludedBinding.includes(\r\n              columns[key]\r\n            )\r\n          ) {\r\n            flexSeries.push(\r\n              <wjChart.FlexChartSeries\r\n                {...jsonData.Chart.ChartDetails.seriesData}\r\n                binding={columns[key]}\r\n                name={columns[key]}\r\n              ></wjChart.FlexChartSeries>\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error in getFlexChartSeries\", error);\r\n    }\r\n    return flexSeries;\r\n  };\r\n\r\n  // get palette based on the selected theme\r\n  const getPalletes = (theme) => {\r\n    try {\r\n      const chartPalette = jsonData.Chart.ChartDetails.common.palette;\r\n      if (chartPalette) {\r\n        // if palette in JSON does not have separate colours for 'dark' & 'light' theme\r\n        if (Array.isArray(chartPalette)) {\r\n          return jsonData.Chart.ChartDetails.common.palette;\r\n        }\r\n        else {\r\n          // select palette based on theme\r\n          if (theme === ThemeType.Dark && chartPalette.dark) {\r\n            return chartPalette.dark;\r\n          }\r\n          else {\r\n            return chartPalette.default;\r\n          }\r\n        }\r\n      }\r\n      else if (\r\n        jsonData.Chart.ChartDetails.bindings.colorsSource &&\r\n        jsonData.Chart.ChartDetails.bindings.colorsSource.table &&\r\n        jsonData.Chart.ChartDetails.bindings.colorsSource.columnName\r\n      ) {\r\n        if (\r\n          Array.isArray(\r\n            props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.colorsSource.table]\r\n          )\r\n        ) {\r\n          return props.kpiInfo.KPIData[\r\n            jsonData.Chart.ChartDetails.bindings.colorsSource.table\r\n          ].map((item) => item[jsonData.Chart.ChartDetails.bindings.colorsSource.columnName]);\r\n        }\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in getPalettes: \", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ErrorBoundary>\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div\r\n            className=\"wijmoCharts\"\r\n          >\r\n            {props.kpiInfo.KPIData[\r\n              jsonData.Chart.ChartDetails.bindings.seriesSource\r\n            ].length !== 0 ?\r\n              (<wjChart.FlexChart\r\n                {...jsonData.Chart.ChartDetails.common}\r\n                itemsSource={\r\n                  props.kpiInfo.KPIData[\r\n                  jsonData.Chart.ChartDetails.bindings.seriesSource\r\n                  ]\r\n                }\r\n                header={t(jsonData.Chart.ChartDetails.common.header_locale_key)}\r\n                initialized={chartInitiliazed}\r\n                palette={getPalletes(props.theme)}\r\n              // onRenderd={handleRender}\r\n              >\r\n                <wjChart.FlexChartLegend\r\n                  {...(jsonData.Chart.ChartDetails.chartLegend\r\n                    ? jsonData.Chart.ChartDetails.chartLegend\r\n                    : { position: \"Bottom\" })}\r\n                ></wjChart.FlexChartLegend>\r\n                {getFlexChartSeries()}\r\n                {Array.isArray(jsonData.Chart.ChartDetails.chartAxis)\r\n                  ? jsonData.Chart.ChartDetails.chartAxis.map((axis) => {\r\n                    return (\r\n                      <wjChart.FlexChartAxis\r\n                        {...axis}\r\n                        title={t(axis.title)}\r\n                      ></wjChart.FlexChartAxis>\r\n                    );\r\n                  })\r\n                  : null}\r\n                {jsonData.Chart.ChartDetails.dataLabel ? (\r\n                  <wjChart.FlexChartDataLabel\r\n                    {...jsonData.Chart.ChartDetails.dataLabel}\r\n                  ></wjChart.FlexChartDataLabel>\r\n                ) : null}\r\n\r\n                {\r\n                  Array.isArray(jsonData.Chart.Thresholds) ?\r\n                    jsonData.Chart.Thresholds.map(threshold => {\r\n                      return (\r\n                        <wjChartAnalytics.FlexChartYFunctionSeries\r\n                          {...threshold}\r\n                          name={t(threshold.Name)}\r\n                          style={{\r\n                            ...threshold.Styles\r\n                          }}\r\n                          min={\r\n                            threshold.Min ?\r\n                              threshold.Min : 0\r\n                          }\r\n                          max={props.kpiInfo.KPIData[\r\n                            jsonData.Chart.ChartDetails.bindings.seriesSource\r\n                          ].length - 1}\r\n                          sampleCount={props.kpiInfo.KPIData[\r\n                            jsonData.Chart.ChartDetails.bindings.seriesSource\r\n                          ].length - 1}\r\n                          tooltipContent={threshold.tooltipContent ? t(threshold.tooltipContent.Label) + \": \" + threshold.tooltipContent.Value : \"{y}\"}\r\n                          func={(x) => {\r\n                            return threshold.Value;\r\n                          }}>\r\n                        </wjChartAnalytics.FlexChartYFunctionSeries>\r\n                      );\r\n                    })\r\n                    : null\r\n                }\r\n                <wjChartInteraction.FlexChartGestures\r\n                  initialized={initGestures}\r\n                  mouseAction=\"Pan\"\r\n                ></wjChartInteraction.FlexChartGestures>\r\n                <wjChartAnimate.FlexChartAnimation></wjChartAnimate.FlexChartAnimation>\r\n              </wjChart.FlexChart>\r\n              ) : (\r\n                <div className=\"Widget_NoData\">\r\n                  {t(\"dashboard_DataNotAVailable\")}\r\n                </div>\r\n              )\r\n            }\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nLACDynamicSeriesChart.propTypes = {\r\n  kpiInfo: PropTypes.object.isRequired,\r\n  setChartRefs: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    theme: state.appTheme.theme\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(LACDynamicSeriesChart);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as wjChart from \"@grapecity/wijmo.react.chart\";\r\nimport * as wjChartInteraction from \"@grapecity/wijmo.react.chart.interaction\";\r\nimport * as wjChartAnimate from \"@grapecity/wijmo.react.chart.animation\";\r\nimport * as wjChartAnalytics from '@grapecity/wijmo.react.chart.analytics';\r\nimport ErrorBoundary from \"../../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { ThemeType } from \"@scuf/common\";\r\nimport { connect } from 'react-redux'\r\n\r\nconst LACSeriesChart = (props) => {\r\n  const flexRef = React.useRef();\r\n  const jsonData = JSON.parse(props.kpiInfo.JSONFormat);\r\n  const initGestures = (gestures) => {\r\n    gestures.posX = jsonData.Chart.ChartDetails.initialPosition\r\n      ? jsonData.Chart.ChartDetails.initialPosition.xPosition\r\n      : 0;\r\n    gestures.posY = jsonData.Chart.ChartDetails.initialPosition\r\n      ? jsonData.Chart.ChartDetails.initialPosition.yPosition\r\n      : 0;\r\n    gestures.scaleX = jsonData.Chart.ChartDetails.initialPosition\r\n      ? jsonData.Chart.ChartDetails.initialPosition.xScale\r\n      : 0;\r\n    gestures.scaleY = jsonData.Chart.ChartDetails.initialPosition\r\n      ? jsonData.Chart.ChartDetails.initialPosition.yScale\r\n      : 0;\r\n  };\r\n\r\n  // reset major unit for Y-axis\r\n  React.useEffect(() => {\r\n    if (flexRef) {\r\n      setMajorUnitY();\r\n    }\r\n  }, [props.kpiInfo.KPIData]);\r\n\r\n  // get palette based on the selected theme\r\n  const getPalletes = (theme) => {\r\n    try {\r\n      const chartPalette = jsonData.Chart.ChartDetails.common.palette;\r\n      if (chartPalette) {\r\n        // if palette in JSON does not have separate colours for 'dark' & 'light' theme\r\n        if (Array.isArray(chartPalette)) {\r\n          return jsonData.Chart.ChartDetails.common.palette;\r\n        }\r\n        else {\r\n          // select palette based on theme\r\n          if (theme === ThemeType.Dark && chartPalette.dark) {\r\n            return chartPalette.dark;\r\n          }\r\n          else {\r\n            return chartPalette.default;\r\n          }\r\n        }\r\n      }\r\n      else if (\r\n        jsonData.Chart.ChartDetails.bindings.colorsSource &&\r\n        jsonData.Chart.ChartDetails.bindings.colorsSource.table &&\r\n        jsonData.Chart.ChartDetails.bindings.colorsSource.columnName\r\n      ) {\r\n        if (\r\n          Array.isArray(\r\n            props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.colorsSource.table]\r\n          )\r\n        ) {\r\n          return props.kpiInfo.KPIData[\r\n            jsonData.Chart.ChartDetails.bindings.colorsSource.table\r\n          ].map((item) => item[jsonData.Chart.ChartDetails.bindings.colorsSource.columnName]);\r\n        }\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log(\"Error in getPalettes:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // set Y-axis step and max value\r\n  const setMajorUnitY = () => {\r\n    let flex = flexRef.current;\r\n    let data = props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.seriesSource]\r\n    if (data && flex) {\r\n      // get the list of series bindings\r\n      let yBindings = jsonData.Chart.ChartDetails.seriesData.map((col) => col.binding);\r\n      let maxs = [];\r\n      // identify the max value for each series bindings\r\n      yBindings.forEach((ybind) => {\r\n        let max = 0;\r\n        data.forEach((row, index) => {\r\n          if (index === 0) {\r\n            max = row[ybind]\r\n          }\r\n          else {\r\n            if (row[ybind] > max) {\r\n              max = row[ybind]\r\n            }\r\n          }\r\n        })\r\n        maxs.push(max);\r\n      })\r\n\r\n      if (maxs.filter(val => val <= 5).length === maxs.length) {\r\n        // set majorUnit as 1 to avoid decimals\r\n        flex.axisY.majorUnit = 1;\r\n        flex.axisY.max = 5;\r\n      }\r\n      else {\r\n        // set majorUnit to auto\r\n        flex.axisY.majorUnit = undefined;\r\n        flex.axisY.max = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  const chartInitiliazed = (flex) => {\r\n    flexRef.current = flex;\r\n\r\n    setMajorUnitY();\r\n\r\n    if (props.setChartRefs) {\r\n      props.setChartRefs(props.kpiInfo.KPIName, flex, props.kpiInfo.Sequence);\r\n    }\r\n\r\n    if (props.isLiveCheck) {\r\n      props.isLiveCheck(jsonData.Chart.ChartDetails.isLive);\r\n    }\r\n  };\r\n\r\n  // const handleRender = (s) => {\r\n  //   try {\r\n  //     let elements = s.engine.element;\r\n  //     let seriesDataLength = Array.isArray(jsonData.Chart.ChartDetails.seriesData) ? jsonData.Chart.ChartDetails.seriesData.length : 0;\r\n  //     if (seriesDataLength <= 1) {\r\n  //       let series = elements.querySelectorAll('.wj-series-group g');\r\n  //       if (jsonData.Chart.ChartDetails.common.chartType === \"Column\") {\r\n  //         // set the width for each column\r\n  //         series.forEach((seriesItem, idx) => {\r\n  //           seriesItem.querySelectorAll('rect').forEach((rect) => {\r\n  //             // set the max width to 30\r\n  //             if (Number(rect.getAttribute('width')) > 35) {\r\n  //               let xTickLoc = 0;\r\n  //               xTickLoc = (Number(rect.getAttribute('x')) + Number(rect.getAttribute('width')) / 2) - 17.5;\r\n  //               // set 'width' to 30\r\n  //               rect.setAttribute('width', '35');\r\n  //               // set 'x' value\r\n  //               rect.setAttribute('x', xTickLoc);\r\n  //             }\r\n  //           });\r\n  //         });\r\n  //       }\r\n  //       else if (jsonData.Chart.ChartDetails.common.chartType === \"Bar\") {\r\n  //         // set the width for each bar\r\n  //         series.forEach((seriesItem, idx) => {\r\n  //           seriesItem.querySelectorAll('rect').forEach((rect) => {\r\n  //             // set the max height to 30\r\n  //             if (Number(rect.getAttribute('height')) > 35) {\r\n  //               // get new 'x' value for thebar \r\n  //               let xTickLoc = (Number(rect.getAttribute('y')) + Number(rect.getAttribute('height')) / 2) - 17.5;\r\n  //               // set 'height' to 30\r\n  //               rect.setAttribute('height', '35');\r\n  //               // set 'y' value\r\n  //               rect.setAttribute('y', xTickLoc);\r\n  //             }\r\n  //           });\r\n  //         });\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   catch (error) {\r\n  //     console.log(\"Error in handleRender: \", error)\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <ErrorBoundary>\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div className=\"wijmoCharts\">\r\n            <wjChart.FlexChart\r\n              {...jsonData.Chart.ChartDetails.common}\r\n              itemsSource={\r\n                props.kpiInfo.KPIData[\r\n                jsonData.Chart.ChartDetails.bindings.seriesSource\r\n                ]\r\n              }\r\n              header={t(jsonData.Chart.ChartDetails.common.header_locale_key)}\r\n              initialized={chartInitiliazed}\r\n              palette={getPalletes(props.theme)}\r\n            // onRendered={handleRender}\r\n            >\r\n              <wjChart.FlexChartLegend\r\n                {\r\n                ...(\r\n                  jsonData.Chart.ChartDetails.chartLegend ?\r\n                    jsonData.Chart.ChartDetails.chartLegend :\r\n                    { position: \"Bottom\" }\r\n                )\r\n                }\r\n              ></wjChart.FlexChartLegend>\r\n              {jsonData.Chart.ChartDetails.seriesData.map((column) => {\r\n                return (\r\n                  <wjChart.FlexChartSeries {...column} name={t(column.name)}>\r\n                    {Array.isArray(column.chartAxis)\r\n                      ? column.chartAxis.map((axisFormat) => {\r\n                        return (\r\n                          <wjChart.FlexChartAxis\r\n                            {...axisFormat}\r\n                          ></wjChart.FlexChartAxis>\r\n                        );\r\n                      })\r\n                      : null}\r\n                  </wjChart.FlexChartSeries>\r\n                );\r\n              })}\r\n              {Array.isArray(jsonData.Chart.ChartDetails.chartAxis)\r\n                ? jsonData.Chart.ChartDetails.chartAxis.map((axis) => {\r\n                  return (\r\n                    <wjChart.FlexChartAxis\r\n                      {...axis}\r\n                      title={t(axis.title)}\r\n                    ></wjChart.FlexChartAxis>\r\n                  );\r\n                })\r\n                : null}\r\n              {jsonData.Chart.ChartDetails.dataLabel ? (\r\n                <wjChart.FlexChartDataLabel\r\n                  {...jsonData.Chart.ChartDetails.dataLabel}\r\n                ></wjChart.FlexChartDataLabel>\r\n              ) : null}\r\n\r\n              {\r\n                Array.isArray(jsonData.Chart.Thresholds) ?\r\n                  jsonData.Chart.Thresholds.map(threshold => {\r\n                    return (\r\n                      <wjChartAnalytics.FlexChartYFunctionSeries\r\n                        {...threshold}\r\n                        name={t(threshold.Name)}\r\n                        style={{\r\n                          ...threshold.Styles\r\n                        }}\r\n                        min={\r\n                          threshold.Min ?\r\n                            threshold.Min : 0\r\n                        }\r\n                        max={props.kpiInfo.KPIData[\r\n                          jsonData.Chart.ChartDetails.bindings.seriesSource\r\n                        ].length - 1}\r\n                        sampleCount={props.kpiInfo.KPIData[\r\n                          jsonData.Chart.ChartDetails.bindings.seriesSource\r\n                        ].length - 1}\r\n                        tooltipContent={threshold.tooltipContent ? t(threshold.tooltipContent.Label) + \": \" + threshold.tooltipContent.Value : \"{y}\"}\r\n                        func={(x) => {\r\n                          return threshold.Value;\r\n                        }}>\r\n                      </wjChartAnalytics.FlexChartYFunctionSeries>\r\n                    );\r\n                  })\r\n                  : null\r\n              }\r\n              <wjChartInteraction.FlexChartGestures\r\n                initialized={initGestures}\r\n                mouseAction=\"Pan\"\r\n              ></wjChartInteraction.FlexChartGestures>\r\n              <wjChartAnimate.FlexChartAnimation></wjChartAnimate.FlexChartAnimation>\r\n            </wjChart.FlexChart>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nLACSeriesChart.propTypes = {\r\n  kpiInfo: PropTypes.object.isRequired,\r\n  setChartRefs: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    theme: state.appTheme.theme\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(LACSeriesChart);\r\n","import { Icon, Modal, Popup, Tooltip, VerticalMenu } from '@scuf/common';\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ErrorBoundary from '../../../../ErrorBoundary';\r\nimport { TranslationConsumer } from '@scuf/localization';\r\n\r\nconst DashboardCard = (props) => {\r\n    const [cardPreview, setCardPreview] = useState(false);\r\n\r\n    const [isLive, setIsLive] = useState(false);\r\n\r\n    // add additional props to child elements\r\n    const childrenWithProps = React.Children.map((props.children), child => {\r\n        if (React.isValidElement(child)) {\r\n            return React.cloneElement(child,\r\n                {\r\n                    // check if widget represents live data\r\n                    isLiveCheck: (isLive) => {\r\n                        setIsLive((typeof isLive !== \"boolean\") ? false : isLive)\r\n                    }\r\n                })\r\n        }\r\n\r\n        return child;\r\n    })\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <TranslationConsumer>\r\n                {(t) =>\r\n                    <React.Fragment>\r\n                        <div className={\"dashboardCard \" + props.className}>\r\n                            <div className=\"dashboardCardHeader pl-0\">\r\n                                <div className='pl-2 pt-1' style={{ float: \"left\", width: \"60%\" }}>\r\n                                    <Tooltip\r\n                                        content={t(props.header)}\r\n                                        element={\r\n                                            <h4 style={{\r\n                                                fontSize: \"12px\",\r\n                                                fontWeight: \"600\",\r\n                                                whiteSpace: \"nowrap\",\r\n                                                overflow: \"hidden\",\r\n                                                textOverflow: \"ellipsis\"\r\n                                            }}>\r\n                                                {t(props.header)}\r\n                                            </h4>\r\n                                        }\r\n                                        hoverable={true}\r\n                                        event='hover'\r\n                                    />\r\n                                </div>\r\n                                <div style={{ float: \"right\" }}>\r\n                                    {isLive ?\r\n                                        <span className='px-2'>\r\n                                            <span\r\n                                                className='icon-Live'\r\n                                                style={{ fontSize: \"16px\", verticalAlign: \"middle\" }}>\r\n                                            </span>\r\n                                        </span>\r\n                                        : null\r\n                                    }\r\n                                    {props.isExportRequired ?\r\n                                        <Popup\r\n                                            element={\r\n                                                <Tooltip\r\n                                                    content={t(\"Chart_Download\")}\r\n                                                    element={\r\n                                                        <span className='px-2' style={{ padding: \"10px\" }}>\r\n                                                            <Icon root=\"common\" name=\"file-download\" className='dashboardIcon' size=\"small\" />\r\n                                                        </span>\r\n                                                    }\r\n                                                    hoverable={true}\r\n                                                    event='hover'\r\n                                                />\r\n                                            }\r\n                                            on=\"click\">\r\n                                            <VerticalMenu>\r\n                                                <VerticalMenu.Item onClick={() => props.exportHandler(props.exportName, \"png\")}>PNG</VerticalMenu.Item>\r\n                                                <VerticalMenu.Item onClick={() => props.exportHandler(props.exportName, \"jpeg\")}>JPEG</VerticalMenu.Item>\r\n                                                <VerticalMenu.Item onClick={() => props.exportHandler(props.exportName, \"svg\")}>SVG</VerticalMenu.Item>\r\n                                            </VerticalMenu>\r\n                                        </Popup> : null\r\n                                    }\r\n                                    {\r\n                                        props.isFullScreenRequired ?\r\n                                            <Tooltip\r\n                                                content={t(\"Chart_Fullscreen\")}\r\n                                                element={\r\n                                                    <span\r\n                                                        className='px-2'\r\n                                                        style={{ \"cursor\": \"pointer\" }}\r\n                                                        onClick={() => {\r\n                                                            setCardPreview(true)\r\n                                                            // if any operation to executed when widget is shown in full-screen\r\n                                                            if (props.fullScreenHandler)\r\n                                                                props.fullScreenHandler(true);\r\n                                                        }}>\r\n                                                        <Icon root='common' name=\"enter-fullscreen\" size=\"small\" className='dashboardIcon' />\r\n                                                    </span>}\r\n                                                hoverable={true}\r\n                                                event='hover'\r\n                                            /> : null\r\n                                    }\r\n                                    {\r\n                                        !isNaN(parseInt(props.childCount)) && parseInt(props.childCount) > 0 ?\r\n                                            <Tooltip\r\n                                                content={t(\"More_Details\")}\r\n                                                element={\r\n                                                    <span className='px-2' style={{ \"cursor\": \"pointer\" }} onClick={props.clickHandler}>\r\n                                                        <Icon root=\"common\" className='dashboardIcon' name=\"caret-right\" size=\"small\" />\r\n                                                    </span>}\r\n                                                hoverable={true}\r\n                                                event='hover'\r\n                                            />\r\n                                            : null\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"dashboardCardContent\">\r\n                                {!cardPreview ? childrenWithProps : null}\r\n                            </div>\r\n                        </div>\r\n                        {\r\n                            cardPreview ?\r\n                                (\r\n                                    <Modal\r\n                                        open={cardPreview}\r\n                                        size=\"large\"\r\n                                        className='cardDetailsPopup'\r\n                                        closeOnDimmerClick={false}\r\n                                        closeOnDocumentClick={false}\r\n                                        onClose={() => {\r\n                                            setCardPreview(false)\r\n                                            // if any operation to executed when full-screen is closed \r\n                                            if (props.fullScreenHandler)\r\n                                                props.fullScreenHandler(false);\r\n                                        }}\r\n                                        closeIcon={true}>\r\n                                        <Modal.Header>\r\n                                            {t(props.header)}\r\n                                            {props.isExportRequired ?\r\n                                                <Popup\r\n                                                    element={\r\n                                                        <Tooltip\r\n                                                            content={t(\"Download\")}\r\n                                                            element={\r\n                                                                <span className='pl-3' style={{ padding: \"10px\" }}>\r\n                                                                    <Icon root=\"common\" name=\"file-download\" size=\"small\" />\r\n                                                                </span>\r\n                                                            }\r\n                                                            hoverable={true}\r\n                                                            event='hover'\r\n                                                        />\r\n                                                    }\r\n                                                    on=\"click\">\r\n                                                    <VerticalMenu>\r\n                                                        <VerticalMenu.Item onClick={() => props.exportHandler(props.exportName, \"png\")}>PNG</VerticalMenu.Item>\r\n                                                        <VerticalMenu.Item onClick={() => props.exportHandler(props.exportName, \"jpeg\")}>JPEG</VerticalMenu.Item>\r\n                                                        <VerticalMenu.Item onClick={() => props.exportHandler(props.exportName, \"svg\")}>SVG</VerticalMenu.Item>\r\n                                                    </VerticalMenu>\r\n                                                </Popup> : null\r\n                                            }\r\n                                        </Modal.Header>\r\n                                        <Modal.Content>\r\n                                            {childrenWithProps}\r\n                                        </Modal.Content>\r\n                                    </Modal>\r\n                                ) : null\r\n                        }\r\n                    </React.Fragment>\r\n\r\n                }\r\n            </TranslationConsumer>\r\n        </ErrorBoundary >\r\n    )\r\n}\r\n\r\nDashboardCard.propTypes = {\r\n    header: PropTypes.string.isRequired,\r\n    childCount: PropTypes.number.isRequired,\r\n    clickHandler: PropTypes.func,\r\n    exportHandler: PropTypes.func,\r\n    exportName: PropTypes.string,\r\n    children: PropTypes.element,\r\n    menuItems: PropTypes.array,\r\n    fullScreenHandler: PropTypes.func,\r\n    className: PropTypes.string,\r\n    isExportRequired: PropTypes.bool,\r\n    isFullScreenRequired: PropTypes.bool\r\n}\r\n\r\nDashboardCard.defaultProps = {\r\n    exportName: \"Chart\",\r\n    menuItems: [],\r\n    className: \"\",\r\n    isExportRequired: true,\r\n    isFullScreenRequired: true\r\n}\r\n\r\nexport default DashboardCard","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, Header, Button } from '@scuf/common';\r\nimport ErrorBoundary from '../../../../ErrorBoundary';\r\nimport { TranslationConsumer } from '@scuf/localization';\r\n\r\nconst CustomModal = (props) => {\r\n    return (\r\n        <ErrorBoundary>\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <Modal style={{ padding: \"0px\" }} size=\"fullscreen\" open={props.openModal} onClose={props.closeHandler} closeOnDocumentClick={false} className='cardDetailsPopup'>\r\n                        <Modal.Header style={{ padding: \"0px\" }}>\r\n                            <Header title={t(\"Header_TerminalManager\")} menu={false} />\r\n                        </Modal.Header>\r\n                        <Modal.Content style={{ maxHeight: \"75vh\", height: \"75vh\", overflowX: \"hidden\", overflowY: \"auto\" }} className=\"cardDetailsPopup mt-3\">\r\n                            {/* <div className=\"col col-lg-12\">\r\n                                <h2>{t(props.header)}</h2>\r\n                            </div> */}\r\n                            {props.children}\r\n                        </Modal.Content>\r\n                        <Modal.Footer style={{ marginTop: \"10px\", borderTop: \"1px solid  #a0a0a0\" }}>\r\n                            <div style={{ marginLeft: \"20px\", width: \"100%\" }}>\r\n                                <Button\r\n                                    className=\"backButton\"\r\n                                    style={{ \"marginRight\": \"10px\" }}\r\n                                    onClick={props.closeHandler}\r\n                                    content={t(\"Report_Back\")}\r\n                                ></Button>\r\n                            </div>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                )}\r\n            </TranslationConsumer>\r\n        </ErrorBoundary>\r\n    )\r\n}\r\n\r\nCustomModal.propTypes = {\r\n    header: PropTypes.string,\r\n    openModal: PropTypes.bool.isRequired,\r\n    closeHandler: PropTypes.func.isRequired,\r\n    children: PropTypes.object\r\n}\r\n\r\nexport default CustomModal","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ErrorBoundary from '../../../../ErrorBoundary';\r\nimport DashboardCard from '../WidgetOutlines/DashboardCard';\r\nimport CustomModal from '../WidgetOutlines/CustomModal';\r\n\r\nWithDetails.propTypes = {\r\n    cardHeader: PropTypes.string.isRequired,\r\n    clickHandler: PropTypes.func,\r\n    childCount: PropTypes.number.isRequired,\r\n    exportHandler: PropTypes.func,\r\n    exportName: PropTypes.string,\r\n    modalOpen: PropTypes.bool,\r\n    closeHandler: PropTypes.func,\r\n    modalContent: PropTypes.object,\r\n    fullScreenHandler: PropTypes.func\r\n}\r\n\r\nexport default function WithDetails(props) {\r\n    return (\r\n        <ErrorBoundary>\r\n            <DashboardCard\r\n                header={props.cardHeader}\r\n                clickHandler={props.handleClick}\r\n                childCount={props.childCount}\r\n                exportHandler={props.exportHandler}\r\n                fullScreenHandler={props.fullScreenHandler}\r\n                isExportRequired={props.isExportRequired}\r\n                isFullScreenRequired={props.isFullScreenRequired}\r\n                exportName={props.cardHeader}>\r\n                {props.children}\r\n            </DashboardCard>\r\n            {\r\n                props.modalOpen ? (\r\n                    <CustomModal\r\n                        header={props.cardHeader}\r\n                        openModal={props.modalOpen}\r\n                        closeHandler={props.handleModalClose}\r\n                    >\r\n                        {props.modalContent}\r\n                    </CustomModal>\r\n                ) : null\r\n            }\r\n        </ErrorBoundary>\r\n    );\r\n}","import React, { Component } from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\n\r\nclass SingleValueChart extends Component {\r\n  state = {};\r\n  render() {\r\n    let kpiInfo = this.props.kpiInfo;\r\n    let config = JSON.parse(kpiInfo.JSONFormat);\r\n    //console.log(\"json configuration\", config);\r\n    let color = \"Red\";\r\n    let kpiValue = \"kpi_unabletoFetch\";\r\n    let secondaryValue = null;\r\n    let resultStatus = false;\r\n    try {\r\n      resultStatus = kpiInfo.resultData.IsSuccess;\r\n      if (resultStatus) {\r\n        color = \"#b0b0b0\";\r\n        kpiValue = kpiInfo.KPIData.Table[0][config.item.colName];\r\n        if (config.item.secondaryColName) {\r\n          secondaryValue = kpiInfo.KPIData.Table[0][config.item.secondaryColName];\r\n        }\r\n        // if (kpiValue !== undefined && kpiValue !== null) {\r\n        //   kpiValue = kpiValue.toString();\r\n        // }\r\n        if (Object.keys(config.item.categories).length > 1) {\r\n          for (const cat of Object.keys(config.item.categories)) {\r\n            if (kpiValue >= config.item.categories[cat].value) {\r\n              color = config.item.categories[cat].color;\r\n              break;\r\n            }\r\n          }\r\n        } else {\r\n          color = config.item.categories[\"cat1\"].color;\r\n        }\r\n      } else {\r\n        console.log(\r\n          \"fetch KPI Data\",\r\n          kpiInfo.resultData.ErrorList[0].ErrorMessage\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"fetch KPI Data\", error);\r\n    }\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div\r\n            className=\"tile\"\r\n            style={{\r\n              borderLeftColor: color,\r\n            }}\r\n          >\r\n            <div className=\"tileValue\">\r\n              <span style={{ color: color }}>\r\n                {resultStatus ? kpiValue : t(kpiValue)}\r\n              </span>{\" \"}\r\n              {\r\n                resultStatus && secondaryValue ?\r\n                  <span style={{ color: color, fontSize: \"12px\" }}>({secondaryValue})</span>\r\n                  : null\r\n              }\r\n              <span>{resultStatus ? config.item.unit : \"\"}</span>\r\n            </div>\r\n            <div className=\"tileName\">{t(config.item.localeKey)}</div>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SingleValueChart;\r\n","import React, { Component } from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorBoundary from \"../../../ErrorBoundary\";\r\nimport { LoadingPage } from \"../../../UIBase/Common/LoadingPage\";\r\nimport { Search, Pagination } from \"@scuf/common\";\r\nimport lodash from \"lodash\";\r\n\r\nconst pageSize = 9;\r\nclass EntityDetailsChart extends Component {\r\n  state = {\r\n    entityDetails: [], //this.props.kpiInfo,\r\n    searchResult: [], //this.props.kpiInfo,\r\n    pageResult: [],\r\n    value: \"\",\r\n    results: [],\r\n    pageIndex: 1,\r\n    //pageSize:9\r\n    //results: [],\r\n  };\r\n  buildPaging() {\r\n    let filteredEntityDetails = this.state.searchResult;\r\n    if (\r\n      filteredEntityDetails !== null &&\r\n      filteredEntityDetails !== undefined &&\r\n      filteredEntityDetails.KPIData !== undefined &&\r\n      filteredEntityDetails.KPIData.Table !== undefined &&\r\n      filteredEntityDetails.KPIData.Table !== null &&\r\n      filteredEntityDetails.KPIData.Table.length > pageSize\r\n    ) {\r\n      return (\r\n        <ErrorBoundary>\r\n          <div>\r\n            <Pagination\r\n              totalItems={filteredEntityDetails.KPIData.Table.length}\r\n              itemsPerPage={pageSize}\r\n              activePage={this.state.pageIndex}\r\n              onPageChange={(page) => {\r\n                this.setState({ pageIndex: page }, () =>\r\n                  this.fillEntityDetails()\r\n                );\r\n              }}\r\n            ></Pagination>\r\n          </div>\r\n        </ErrorBoundary>\r\n      );\r\n    } else return \"\";\r\n  }\r\n  fillEntityDetails() {\r\n    let filteredEntityDetails = this.state.searchResult;\r\n    let tkInventorys = null;\r\n    if (\r\n      filteredEntityDetails !== null &&\r\n      filteredEntityDetails !== undefined &&\r\n      filteredEntityDetails.KPIData !== undefined\r\n    ) {\r\n      tkInventorys = filteredEntityDetails.KPIData.Table;\r\n    }\r\n    if (filteredEntityDetails == null) {\r\n      return <LoadingPage loadingClass=\"nestedList\" message=\"\"></LoadingPage>;\r\n    } else if (\r\n      tkInventorys !== undefined &&\r\n      Array.isArray(tkInventorys) &&\r\n      tkInventorys.length > 0\r\n    ) {\r\n      // debugger;\r\n      let firstIndexInPage = (this.state.pageIndex - 1) * pageSize;\r\n      let lastIndexInPage = firstIndexInPage + pageSize;\r\n      if (lastIndexInPage >= tkInventorys.length) {\r\n        lastIndexInPage = tkInventorys.length;\r\n      }\r\n      return (\r\n        <div className=\"flexWrap\">\r\n          {tkInventorys\r\n            .slice(firstIndexInPage, lastIndexInPage)\r\n            .map((inventory) => this.fillEntityInfo(inventory))}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <ErrorBoundary>\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <div>\r\n                <span></span>{\" \"}\r\n                <span>{t(\"ATG_Tank_PointName_NotAvailable\")}</span>\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        </ErrorBoundary>\r\n      );\r\n    }\r\n  }\r\n\r\n  fillEntityInfo(inventory) {\r\n    // debugger;\r\n    //let kpiInfo = this.props.kpiInfo;\r\n    let config = JSON.parse(this.props.kpiInfo.JSONFormat);\r\n    let fillingColumn = \"GrossVolume\";\r\n\r\n    let productColor = \"#9e9e9e\";\r\n    let tkDisplayCols = null;\r\n    if (\r\n      config.entityWidget.ChartDetails.PercentFillColumn !== undefined &&\r\n      config.entityWidget.ChartDetails.PercentFillColumn !== null\r\n    ) {\r\n      fillingColumn = config.entityWidget.ChartDetails.PercentFillColumn;\r\n      if (\r\n        inventory[config.entityWidget.ChartDetails.ColorColumn] !== null &&\r\n        inventory[config.entityWidget.ChartDetails.ColorColumn] !== \"\"\r\n      ) {\r\n        productColor = inventory[config.entityWidget.ChartDetails.ColorColumn];\r\n      }\r\n\r\n      //console.log(\"fillerValue\", inventory[fillingColumn]);\r\n    }\r\n    if (\r\n      config.entityWidget.Columns !== undefined &&\r\n      config.entityWidget.Columns !== null\r\n    ) {\r\n      tkDisplayCols = config.entityWidget.Columns.sort(\r\n        (a, b) => a.Position - b.Position\r\n      ).filter((col) => col.IsVisible === \"true\");\r\n    }\r\n    //let test = this.getDetailsFromJSON(tkDisplayCols, inventory);\r\n    return (\r\n      <ErrorBoundary>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <div\r\n              className={\r\n                inventory[config.entityWidget.ChartDetails.StatusColumn] ===\r\n                  true\r\n                  ? \"dbtankForMonitor\"\r\n                  : \"dbtankForMonitorDisabled\"\r\n              }\r\n            >\r\n              <div\r\n                className={\r\n                  inventory[config.entityWidget.ChartDetails.StatusColumn] ===\r\n                    true\r\n                    ? \"dbTankName\"\r\n                    : \"dbTankNameDisabled\"\r\n                }\r\n              >\r\n                <span>\r\n                  {inventory[config.entityWidget.ChartDetails.TitleColumn]}\r\n                </span>\r\n              </div>\r\n              <div className=\"flexWrap\">\r\n                <div className=\"dbtankWidthForMonitor\">\r\n                  <div className=\"tankFilledForMonitor\">\r\n                    <div\r\n                      className=\"tankFillingWithoutColor\"\r\n                      style={{\r\n                        height:\r\n                          (inventory[fillingColumn] * 100) /\r\n                          (inventory[\r\n                            config.entityWidget.ChartDetails.TotalFillColumn\r\n                          ] *\r\n                            1.18) +\r\n                          \"%\",\r\n                        backgroundColor: productColor,\r\n                      }}\r\n                    >\r\n                      <span style={{ fontWeight: \"bold\" }}>\r\n                        {\" \"}\r\n                        {Math.round(\r\n                          (inventory[fillingColumn] * 100) /\r\n                          inventory[\r\n                          config.entityWidget.ChartDetails.TotalFillColumn\r\n                          ]\r\n                        ) + \"%\"}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"dbtankDetailsForMonitor\">\r\n                  {this.getDetailsFromJSON(tkDisplayCols, inventory)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </TranslationConsumer>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n\r\n  getDetailsFromJSON(columns, inventory) {\r\n    let config = JSON.parse(this.props.kpiInfo.JSONFormat);\r\n    return (\r\n      <div className=\"flexWrapTankMonitor\">\r\n        {columns.map((col) => (\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <div className=\"flexWrapTankMonitor\">\r\n                <div\r\n                  className={\r\n                    col.IsHighlight === \"true\"\r\n                      ? \"tankIsHighLight\"\r\n                      : \"flexWrapTankMonitor\"\r\n                  }\r\n                >\r\n                  <span\r\n                    className={\r\n                      inventory[\r\n                        config.entityWidget.ChartDetails.StatusColumn\r\n                      ] === true\r\n                        ? \"dbTankDetails\"\r\n                        : \"dbTankDetailsDisabled\"\r\n                    }\r\n                  >\r\n                    {t(col.localeKey)}:\r\n                  </span>\r\n                  <span\r\n                    className={\r\n                      inventory[\r\n                        config.entityWidget.ChartDetails.StatusColumn\r\n                      ] === true\r\n                        ? \"dbTankDetails\"\r\n                        : \"dbTankDetailsDisabled\"\r\n                    }\r\n                  >\r\n                    &nbsp;&nbsp;\r\n                    {inventory[col.ColName] !== null &&\r\n                      inventory[col.ColName] !== undefined\r\n                      ? inventory[col.ColName].toString()\r\n                      : inventory[col.ColName]}{\" \"}\r\n                    {col.UOMColumn !== null && col.UOMColumn !== \"\"\r\n                      ? inventory[col.UOMColumn]\r\n                      : \"\"}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  handleSearchChange(value) {\r\n    let entityDetails = [];\r\n    try {\r\n      entityDetails = lodash.cloneDeep(this.props.kpiInfo); //this.state.searchResult;\r\n\r\n      if (value !== undefined &&\r\n        value !== null &&\r\n        value !== \"\") {\r\n        if (entityDetails !== undefined &&\r\n          entityDetails !== null &&\r\n          entityDetails !== \"\") {\r\n          //console.log(\"entityDetails\", entityDetails);\r\n          let config = JSON.parse(entityDetails.JSONFormat);\r\n          let tkDisplayCols = null;\r\n          if (\r\n            config.entityWidget.Columns !== undefined &&\r\n            config.entityWidget.Columns !== null\r\n          ) {\r\n            tkDisplayCols = config.entityWidget.Columns.filter(\r\n              (col) => col.IsVisible === \"true\"\r\n            );\r\n          }\r\n          //console.log(\"tkDisplayCols\", tkDisplayCols);\r\n          let validRow = false;\r\n          let filt = [];\r\n          if (value !== undefined) {\r\n            entityDetails.KPIData.Table.forEach((k) => {\r\n              let rowvalues = Object.values(k);\r\n              rowvalues.every((cellvalue) => {\r\n                if (\r\n                  cellvalue !== null &&\r\n                  cellvalue\r\n                    .toString()\r\n                    .toLowerCase()\r\n                    .includes(value.toLowerCase())\r\n                ) {\r\n                  filt.push(k);\r\n                  return false;\r\n                } else {\r\n                  return true;\r\n                }\r\n              });\r\n            });\r\n            entityDetails.KPIData.Table = filt;\r\n            this.setState({ searchResult: entityDetails, pageIndex: 1 }, () =>\r\n              this.fillEntityDetails()\r\n            );\r\n            this.buildPaging(this.state.searchResult);\r\n          }\r\n        }\r\n      } else {\r\n        if (this.props.kpiInfo !== undefined) {\r\n          let n = lodash.cloneDeep(this.props.kpiInfo);\r\n          this.setState({ searchResult: n }, () => this.fillEntityDetails());\r\n          this.buildPaging(this.state.searchResult);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"EntityDetais-> error in handleSearchChange\", error);\r\n    }\r\n  }\r\n  getValues(data) {\r\n    let arr = [];\r\n    arr = Object.keys(data).forEach((key) => {\r\n      <div key={data[key]} className=\"row\">\r\n        <div className=\"col-xs-6\">{key}</div>\r\n        <div className=\"col-xs-6\">{data[key]}</div>\r\n      </div>;\r\n    });\r\n    return arr;\r\n  }\r\n  handleSearchSelect(result) {\r\n    // debugger;\r\n    // this.setState({\r\n    //   searchResult: this.state.entityDetails,\r\n    // });\r\n  }\r\n  render() {\r\n    // this.state.entityDetails = lodash.cloneDeep(this.props.kpiInfo);\r\n    //this.state.searchResult = lodash.cloneDeep(this.props.kpiInfo);\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div className=\"dbTankPane\">\r\n            <div className=\"dbTankPane\">\r\n              {\" \"}\r\n              <Search\r\n                //results={this.state.searchResult}\r\n                results={this.state.results}\r\n                value={this.state.value}\r\n                //onResultSelect={(value) => this.handleSearchSelect(value)}\r\n                onSearchChange={(value) => this.handleSearchChange(value)}\r\n              />\r\n              {this.fillEntityDetails()}\r\n            </div>\r\n            <div>{this.buildPaging(this.state.searchResult)}</div>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EntityDetailsChart;\r\n\r\n// EntityDetailsChart.propTypes = {\r\n//   entityDetails: PropTypes.object.isRequired,\r\n// };\r\n","import React from 'react';\r\nimport { TranslationConsumer } from '@scuf/localization';\r\nimport ErrorBoundary from '../../../ErrorBoundary';\r\nimport { ThemeType } from \"@scuf/common\"\r\nimport { connect } from 'react-redux';\r\n\r\nconst BulletChart = (props) => {\r\n\r\n    const ref = React.useRef(null);\r\n    const jsonData = JSON.parse(props.kpiInfo.JSONFormat);\r\n    React.useEffect(() => {\r\n        if (props.setChartRefs) {\r\n            props.setChartRefs(props.kpiInfo.KPIName, ref, props.kpiInfo.Sequence);\r\n        }\r\n\r\n        if (props.isLiveCheck) {\r\n            props.isLiveCheck(jsonData.Chart.ChartDetails.isLive);\r\n        }\r\n    }, [ref]);\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <div ref={ref}\r\n                        className='dashboardCharts bulletChart pt-3'>\r\n                        <div className='vertical-align-charts'>\r\n                            {props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.TableName].map((row, index) => {\r\n                                let fillPercent = (((row[jsonData.Chart.ChartDetails.bindings.Max] - row[jsonData.Chart.ChartDetails.bindings.Min]) === 0)\r\n                                    || (row[jsonData.Chart.ChartDetails.bindings.Max] < row[jsonData.Chart.ChartDetails.bindings.Min])) ?\r\n                                    0 :\r\n                                    row[jsonData.Chart.ChartDetails.bindings.Current] /\r\n                                    (row[jsonData.Chart.ChartDetails.bindings.Max] - row[jsonData.Chart.ChartDetails.bindings.Min])\r\n                                    * 100;\r\n\r\n                                // if 'FillColor' is unavailable, obtain color from ranges\r\n                                let fillColor =\r\n                                    jsonData.Chart.ChartDetails.bindings.FillColor ?\r\n                                        JSON.parse(row[jsonData.Chart.ChartDetails.bindings.FillColor])\r\n                                        : jsonData.Chart.ChartDetails.ranges.filter(range => fillPercent >= range.min && fillPercent <= range.max)[0].color\r\n\r\n                                return (\r\n                                    <div className={\"row\" + (index !== 0 ? \" mt-3\" : \"\")} >\r\n                                        {\r\n                                            row[jsonData.Chart.ChartDetails.bindings.Name] ?\r\n                                                <div className='col-12 pb-1' style={{ textAlign: \"center\" }}>\r\n                                                    {t(row[jsonData.Chart.ChartDetails.bindings.Name])}\r\n                                                </div>\r\n                                                : null\r\n                                        }\r\n                                        <div className='col-3 pr-0' style={{ textAlign: \"right\" }}>\r\n                                            {row[jsonData.Chart.ChartDetails.bindings.Current]} {row[jsonData.Chart.ChartDetails.bindings.Unit]}\r\n                                        </div>\r\n                                        <div className='col-6'>\r\n                                            <div\r\n                                                className='bullet'\r\n                                                style={{\r\n                                                    backgroundColor: row[jsonData.Chart.ChartDetails.bindings.BackgroundColor]\r\n                                                }}>\r\n                                                <div\r\n                                                    style={{\r\n                                                        width: `${fillPercent}%`,\r\n                                                        maxWidth: \"100%\",\r\n                                                        minWidth: \"0\"\r\n                                                    }}>\r\n                                                    <div\r\n                                                        className='filledBullet'\r\n                                                        style={{\r\n                                                            backgroundColor:\r\n                                                                (\r\n                                                                    props.theme === ThemeType.Dark && fillColor.dark ?\r\n                                                                        fillColor.dark :\r\n                                                                        fillColor.default\r\n                                                                )\r\n                                                        }}></div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='col-3 pl-0'>\r\n                                            {row[jsonData.Chart.ChartDetails.bindings.Max]} {row[jsonData.Chart.ChartDetails.bindings.Unit]}\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </TranslationConsumer>\r\n        </ErrorBoundary>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        theme: state.appTheme.theme\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(BulletChart);","import React from 'react';\r\nimport { TranslationConsumer } from '@scuf/localization';\r\nimport ErrorBoundary from '../../../ErrorBoundary';\r\nimport { LinearGauge, RadialGauge, Range } from '@grapecity/wijmo.react.gauge';\r\nimport { ThemeType } from \"@scuf/common\"\r\nimport { connect } from 'react-redux';\r\n\r\nconst GaugeChart = (props) => {\r\n    const ref = React.useRef(null);\r\n    const jsonData = JSON.parse(props.kpiInfo.JSONFormat);\r\n\r\n    const gauge = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n        if (props.setChartRefs) {\r\n            props.setChartRefs(props.kpiInfo.KPIName, ref, props.kpiInfo.Sequence);\r\n        }\r\n\r\n        if (props.isLiveCheck) {\r\n            props.isLiveCheck(jsonData.Chart.ChartDetails.isLive);\r\n        }\r\n    }, [ref]);\r\n\r\n    const renderRanges = (t) => {\r\n        const maxVal = props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.TableName][0][jsonData.Chart.ChartDetails.bindings.Max];\r\n        // return ranges if configured\r\n        return (\r\n            jsonData.Chart.ChartDetails.ranges &&\r\n                Array.isArray(jsonData.Chart.ChartDetails.ranges) ?\r\n                jsonData.Chart.ChartDetails.ranges.map((range, index) => {\r\n                    let color = (range.color !== null && typeof range.color === 'object') ?\r\n                        (\r\n                            props.theme === ThemeType.Dark && range.color.dark ?\r\n                                range.color.dark :\r\n                                range.color.default\r\n                        )\r\n                        : range.color;\r\n                    return (\r\n                        <Range\r\n                            key={index}\r\n                            // min value configured in json will be considered as percentage value\r\n                            min={(range.min / 100) * maxVal}\r\n                            // max value configured in json will be considered as percentage value\r\n                            max={(range.max / 100) * maxVal}\r\n                            color={color}\r\n                            name={t(range.name)} />\r\n                    );\r\n                })\r\n                : null\r\n        )\r\n    }\r\n\r\n    // corresponds to gauge fill color and width\r\n    const renderPoints = (t) => {\r\n        const pointer = jsonData.Chart.ChartDetails.pointer;\r\n        return (\r\n            pointer ?\r\n                <Range\r\n                    wjProperty=\"pointer\"\r\n                    min={props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.TableName][0][jsonData.Chart.ChartDetails.bindings.Min]}\r\n                    max={props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.TableName][0][jsonData.Chart.ChartDetails.bindings.Max]}\r\n                    {...pointer}\r\n                    color={\r\n                        pointer.color ?\r\n                            (\r\n                                props.theme === ThemeType.Dark && pointer.color.dark ?\r\n                                    pointer.color.dark :\r\n                                    pointer.color.default\r\n                            )\r\n                            : null\r\n                    }></Range>\r\n                : \"\"\r\n        )\r\n    }\r\n\r\n    // corresponds to gauge background color and width\r\n    const renderFace = (t) => {\r\n        const face = jsonData.Chart.ChartDetails.face\r\n        return (\r\n            face ?\r\n                <Range\r\n                    wjProperty=\"face\"\r\n                    {...face}\r\n                    min={props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.TableName][0][jsonData.Chart.ChartDetails.bindings.Min]}\r\n                    max={props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.TableName][0][jsonData.Chart.ChartDetails.bindings.Max]}\r\n                    color={\r\n                        face.color ?\r\n                            (\r\n                                props.theme === ThemeType.Dark && face.color.dark ?\r\n                                    face.color.dark :\r\n                                    face.color.default\r\n                            )\r\n                            : null\r\n                    }>\r\n                </Range>\r\n                : null\r\n        )\r\n    }\r\n\r\n    // refresh gauge when theme changes\r\n    React.useEffect(() => {\r\n        if (gauge.current) {\r\n            gauge.current.refresh();\r\n        }\r\n    }, [props.theme])\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <TranslationConsumer>\r\n                {\r\n                    (t) => (\r\n                        <div\r\n                            ref={ref}\r\n                            className='wijmoCharts'\r\n                            style={{\r\n                                \"display\": \"flex\",\r\n                                \"alignItems\": \"center\"\r\n                            }}>\r\n                            {\r\n                                jsonData.Chart.ChartDetails.common.gaugeType === \"Linear\" ?\r\n                                    <LinearGauge\r\n                                        {...jsonData.Chart.ChartDetails.common}\r\n                                        autoScale={true}\r\n                                        initialized={(sender) => { gauge.current = sender }}\r\n                                        min={props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.TableName][0][jsonData.Chart.ChartDetails.bindings.Min]}\r\n                                        max={props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.TableName][0][jsonData.Chart.ChartDetails.bindings.Max]}\r\n                                        value={props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.TableName][0][jsonData.Chart.ChartDetails.bindings.Value]}>\r\n                                        {renderPoints(t)}\r\n                                        {renderFace(t)}\r\n                                        {renderRanges(t)}\r\n                                    </LinearGauge> :\r\n                                    (\r\n                                        jsonData.Chart.ChartDetails.common.gaugeType === \"Radial\" ?\r\n                                            <RadialGauge\r\n                                                {...jsonData.Chart.ChartDetails.common}\r\n                                                autoScale={true}\r\n                                                initialized={(sender) => { gauge.current = sender }}\r\n                                                min={props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.TableName][0][jsonData.Chart.ChartDetails.bindings.Min]}\r\n                                                max={props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.TableName][0][jsonData.Chart.ChartDetails.bindings.Max]}\r\n                                                value={props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.bindings.TableName][0][jsonData.Chart.ChartDetails.bindings.Value]}>\r\n                                                {renderPoints(t)}\r\n                                                {renderFace(t)}\r\n                                                {renderRanges(t)}\r\n                                            </RadialGauge>\r\n                                            : null\r\n                                    )\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n            </TranslationConsumer>\r\n        </ErrorBoundary>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        theme: state.appTheme.theme\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(GaugeChart);","import React from 'react';\r\nimport { Responsive, WidthProvider } from 'react-grid-layout';\r\nimport '../../../CSS/dashboardGrid/react-grid-layout.css';\r\nimport '../../../CSS/dashboardGrid/react-resizable.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n// WidthProvider HOC automatically calculates the width\r\nconst ResponsiveGridLayout = WidthProvider(Responsive);\r\n\r\n\r\nconst DashboardGrid = (props) => {\r\n    // screenWidth is used to calculate the number of widgets per row and their positions\r\n    let screenWidth = window.screen.width;\r\n\r\n    let yPosFactor = 1;\r\n\r\n    // layout is used to provide the grid layout if available in localStorage\r\n    const [layout, setLayout] = React.useState(\r\n        JSON.parse(JSON.stringify(\r\n            getFromLS(props.pageName + \"layouts\") || {}\r\n        )));\r\n\r\n    // store the changed layout\r\n    const onLayoutChange = (layout, layouts) => {\r\n        saveToLS(props.pageName + \"layouts\", layouts);\r\n        setLayout(\r\n            layouts\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className='col-12 p-0'>\r\n            <ResponsiveGridLayout\r\n                className=\"layout\"\r\n                // configure screen width breakpoints\r\n                breakpoints={{\r\n                    lg: 1300,\r\n                    md: 950,\r\n                    sm: 768,\r\n                    xs: 480,\r\n                    xxs: 0\r\n                }}\r\n                // configure number of columns for each screen width breakpoint\r\n                cols={props.cols}\r\n                layouts={layout}\r\n                isDraggable={props.isDraggable}\r\n                isResizable={props.isResizable}\r\n                rowHeight={props.rowHeight}\r\n                onLayoutChange={(layout, layouts) =>\r\n                    onLayoutChange(layout, layouts)\r\n                }\r\n            >\r\n                {\r\n                    props.children.map((item, index) => {\r\n                        let dimensions = item.props.dimensions;\r\n                        let x = 0;\r\n                        let y = 0;\r\n                        // calculate the x, y positions based on screen size\r\n                        if (screenWidth <= 480) {\r\n                            x = 1;\r\n                            y = index;\r\n                        } else if (screenWidth <= 768) {\r\n                            x = index % 2;\r\n                            // y = index * 1;\r\n                            if (index >= 2 * (yPosFactor)) {\r\n                                yPosFactor += 1;\r\n                            }\r\n\r\n                            y = yPosFactor;\r\n                        } else if (screenWidth <= 1600) {\r\n                            x = index % 3;\r\n                            if (index >= 3 * (yPosFactor)) {\r\n                                yPosFactor += 1;\r\n                            }\r\n\r\n                            y = yPosFactor;\r\n                        } else {\r\n                            x = index % 4;\r\n                            if (index >= 4 * (yPosFactor)) {\r\n                                yPosFactor += 1;\r\n                            }\r\n\r\n                            y = yPosFactor;\r\n                        }\r\n\r\n                        return (\r\n                            <div\r\n                                style={{ height: \"100%\" }}\r\n                                key={`${index}`}\r\n                                data-grid={{\r\n                                    x: x,\r\n                                    y: y,\r\n                                    w: dimensions ? dimensions.width : 1,\r\n                                    h: dimensions ? dimensions.height : props.widgetHeight\r\n                                }}\r\n                            >\r\n                                {item}\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </ResponsiveGridLayout>\r\n        </div >\r\n    );\r\n}\r\n\r\nfunction getFromLS(key) {\r\n    let ls = {};\r\n    if (global.localStorage) {\r\n        try {\r\n            ls = JSON.parse(global.localStorage.getItem(\"rgl-8\")) || {};\r\n        } catch (e) {\r\n            console.log(\"Error fetching grid layout: \", e)\r\n        }\r\n    }\r\n    return ls[key];\r\n}\r\n\r\nfunction saveToLS(key, value) {\r\n    if (global.localStorage) {\r\n        global.localStorage.setItem(\r\n            \"rgl-8\",\r\n            global.localStorage.getItem(\"rgl-8\") ? JSON.stringify({\r\n                ...JSON.parse(global.localStorage.getItem(\"rgl-8\")),\r\n                [key]: value\r\n            })\r\n                :\r\n                JSON.stringify({\r\n                    [key]: value\r\n                })\r\n        );\r\n    }\r\n}\r\n\r\nDashboardGrid.propTypes = {\r\n    isDraggable: PropTypes.bool,\r\n    isResizable: PropTypes.bool,\r\n    rowHeight: PropTypes.number,\r\n    widgetHeight: PropTypes.number,\r\n    pageName: PropTypes.string.isRequired,\r\n    cols: PropTypes.object\r\n}\r\n\r\nDashboardGrid.defaultProps = {\r\n    isDraggable: false,\r\n    isResizable: false,\r\n    rowHeight: 125,\r\n    widgetHeight: 2,\r\n    cols: { lg: 4, md: 3, sm: 2, xs: 2, xxs: 1 }\r\n}\r\n\r\nexport default DashboardGrid;","import React from 'react';\r\nimport { TranslationConsumer } from '@scuf/localization';\r\nimport { connect } from 'react-redux';\r\nimport ErrorBoundary from '../../../ErrorBoundary';\r\nimport { ThemeType, Tooltip } from '@scuf/common';\r\n\r\nconst StackedBullet = (props) => {\r\n\r\n    const stackedBulletRef = React.useRef(null);\r\n\r\n    const jsonData = JSON.parse(props.kpiInfo.JSONFormat);\r\n\r\n    React.useEffect(() => {\r\n        if (props.setChartRefs) {\r\n            props.setChartRefs(props.kpiInfo.KPIName, stackedBulletRef, props.kpiInfo.Sequence);\r\n        }\r\n\r\n        if (props.isLiveCheck) {\r\n            props.isLiveCheck(jsonData.Chart.ChartDetails.isLive);\r\n        }\r\n    }, [stackedBulletRef]);\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <div ref={stackedBulletRef} className='p-2 dashboardCharts stacked-bullet-chart'>\r\n                        <div className='vertical-align-charts'>\r\n                            {\r\n                                jsonData.Chart.ChartDetails.bullets.map((row, index) => {\r\n                                    // check if data is available\r\n                                    if (Array.isArray(props.kpiInfo.KPIData[row.tableName])) {\r\n                                        const labels = [];\r\n                                        let colSum = 0;\r\n\r\n                                        if (props.kpiInfo.KPIData[row.tableName].length !== 0) {\r\n                                            colSum = row.sections.map(section => props.kpiInfo.KPIData[row.tableName][0][section.dbColumn]).reduce((a, b) => a + b);\r\n\r\n                                            row.sections.forEach(section => {\r\n                                                labels.push(\r\n                                                    <Tooltip\r\n                                                        content={props.kpiInfo.KPIData[row.tableName][0][section.dbColumn] + \" \" + t(section.toolTip ? section.toolTip : section.label)}\r\n                                                        element={\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    width: colSum !== 0 ? `${Math.round((props.kpiInfo.KPIData[row.tableName][0][section.dbColumn] / colSum) * 10000) / 100}%` : 0,\r\n                                                                    padding: \"0px 0.75px\"\r\n                                                                }}\r\n                                                                className='stack-bullet-label'\r\n                                                            >\r\n                                                                <div className='stack-bullet-label'>\r\n                                                                    {props.kpiInfo.KPIData[row.tableName][0][section.dbColumn]} {t(section.label)}\r\n                                                                </div>\r\n                                                                <div\r\n                                                                    className='stackedBullets'\r\n                                                                    style={{\r\n                                                                        backgroundColor: props.theme === ThemeType.Dark && section.color.dark ?\r\n                                                                            section.color.dark : section.color.default\r\n                                                                    }}>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        }\r\n                                                        event='hover'\r\n                                                    />\r\n                                                );\r\n                                            });\r\n                                        }\r\n\r\n                                        return (\r\n                                            <div\r\n                                                key={\"stacked_bullet\" + props.kpiInfo.KPIName + String(index)}\r\n                                                className={'vertical-align-center' + (index !== 0 ? \" mt-2\" : \"\")}>\r\n                                                <div style={{ \"width\": \"35%\" }}>\r\n                                                    <div style={{ \"display\": \"flex\" }}>\r\n                                                        <h1 className='p-2 vertical-align-center mb-0'>\r\n                                                            {props.kpiInfo.KPIData[row.tableName].length === 0 ? 0 : props.kpiInfo.KPIData[row.tableName][0][row.totalValDbCol]}\r\n                                                        </h1>\r\n                                                        <span className='my-2 pr-2 my-auto vertical-align-center stacked-bullet-header'>\r\n                                                            {t(row.header)}\r\n                                                        </span>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className='pl-2' style={{ \"width\": \"65%\" }}>\r\n                                                    <div style={{ display: \"flex\" }}>\r\n                                                        {labels}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    }\r\n\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </TranslationConsumer>\r\n        </ErrorBoundary>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        theme: state.appTheme.theme\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(StackedBullet)","import React from 'react';\r\nimport { TranslationConsumer } from '@scuf/localization';\r\nimport ErrorBoundary from '../../../ErrorBoundary';\r\nconst BlockChart = (props) => {\r\n\r\n    const blockChartRef = React.useRef(null);\r\n\r\n    const jsonData = JSON.parse(props.kpiInfo.JSONFormat);\r\n\r\n    React.useEffect(() => {\r\n        if (props.setChartRefs) {\r\n            props.setChartRefs(props.kpiInfo.KPIName, blockChartRef, props.kpiInfo.Sequence);\r\n        }\r\n\r\n        if (props.isLiveCheck) {\r\n            props.isLiveCheck(jsonData.Chart.ChartDetails.isLive);\r\n        }\r\n    }, [blockChartRef]);\r\n\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <TranslationConsumer>\r\n                {\r\n                    (t) => (\r\n                        <div ref={blockChartRef} className='dashboardCharts p-3 blockChart'>\r\n                            <div className='vertical-align-charts'>\r\n                                <div className='row'>\r\n                                    {\r\n                                        jsonData.Chart.ChartDetails.Blocks.map((block, index) => {\r\n                                            let colClass = \"col\";\r\n                                            if (parseInt(jsonData.Chart.ChartDetails.Columns) === 1)\r\n                                                colClass = \"col-12\";\r\n                                            else if (parseInt(jsonData.Chart.ChartDetails.Columns) === 2)\r\n                                                colClass = \"col-6\";\r\n                                            else if (parseInt(jsonData.Chart.ChartDetails.Columns) === 3)\r\n                                                colClass = \"col-4\"\r\n                                            else if (parseInt(jsonData.Chart.ChartDetails.Columns) === 4)\r\n                                                colClass = \"col-3\";\r\n\r\n                                            return (\r\n                                                <div\r\n                                                    key={\"block\" + String(index)}\r\n                                                    className={colClass}>\r\n                                                    <div className=\"\" style={{ display: \"flex\" }}>\r\n                                                        <h1 className=\"mb-0\">\r\n                                                            {t(props.kpiInfo.KPIData[jsonData.Chart.ChartDetails.TableName][0][block.ColName])}\r\n                                                        </h1>\r\n                                                        <span className='my-2 px-2 block-chart-label mt-auto'>\r\n                                                            {t(block.localeKey)}\r\n                                                        </span>\r\n                                                    </div>\r\n                                                </div>\r\n                                            );\r\n                                        })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </TranslationConsumer>\r\n        </ErrorBoundary>\r\n    )\r\n}\r\n\r\nexport default BlockChart","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport ErrorBoundary from \"../../../ErrorBoundary\";\r\nimport SingleValueChart from \"../Charts/SingleValueChart\";\r\nimport EntityDetailsChart from \"../Charts/EntityDetails\";\r\nimport WithDetails from \"../Charts/Wrappers/WithDetails\";\r\nimport { Button, Icon } from \"@scuf/common\";\r\nimport * as wijmoPdf from \"@grapecity/wijmo.pdf\";\r\nimport { toPng } from \"html-to-image\";\r\nimport LACSeriesChart from \"../Charts/LACSeriesChart\";\r\nimport DonutPieChart from \"../Charts/DonutPieChart\";\r\nimport { ChartType } from \"../../../../JS/Constants\";\r\nimport LACDynamicSeriesChart from \"../Charts/LACDynamicSeriesChart\";\r\nimport { ExportChart } from '../../../../JS/DashboardUtilities';\r\nimport BulletChart from \"../Charts/BulletChart\";\r\nimport { TranslationConsumer, useTranslation } from \"@scuf/localization\";\r\nimport GaugeChart from \"../Charts/GaugeChart\";\r\nimport DashboardGrid from \"../../../UIBase/Common/DashboardGrid\";\r\nimport StackedBullet from \"../Charts/StackedBullet\";\r\nimport BlockChart from \"../Charts/BlockChart\";\r\n\r\nclass KPIDashboardLayout extends Component {\r\n  state = {\r\n    modalOpen: false,\r\n    parentKpiName: null,\r\n    chartRefs: {},\r\n    modalContent: null,\r\n    exportLoading: false,\r\n  };\r\n\r\n  // fetch data and show modal\r\n  clickHandler = (parentKpiName) => {\r\n    try {\r\n      if (this.props.fullScreenHandler)\r\n        this.props.fullScreenHandler(true);\r\n\r\n      this.setState({\r\n        modalOpen: true,\r\n        parentKpiName: parentKpiName,\r\n      });\r\n      this.props\r\n        .fetchData(parentKpiName)\r\n        .then((response) => {\r\n          if (response.data.IsSuccess) {\r\n            this.setState({\r\n              modalContent: (\r\n                <TranslationConsumer>\r\n                  {(t) => (\r\n                    <KPIDashboardFunc\r\n                      kpiList={response.data.EntityResult.ListKPIDetails}\r\n                      fetchData={this.props.fetchData}\r\n                      isDetails={true}\r\n                      isDraggable={true}\r\n                      isResizable={true}\r\n                      rowHeight={125}\r\n                      widgetHeight={2}\r\n                      pageName={parentKpiName + \"Dashboard\"}\r\n                      // modal header\r\n                      customControlObject={\r\n                        <div className=\"pl-1\">\r\n                          <span style={{ fontSize: \"1.125rem\" }}>{t(parentKpiName)}</span>\r\n                        </div>\r\n                      }\r\n                      exportRequired={true}\r\n                    />\r\n                  )\r\n                  }\r\n                </TranslationConsumer >\r\n              ),\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error in child KPI data:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(error, \"Error in KPIDashboard clickHandler\");\r\n    }\r\n  };\r\n\r\n  // set chart object references\r\n  setChartRefs = (kpiName, ref, sequence) => {\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      chartRefs: {\r\n        ...prevState.chartRefs,\r\n        [kpiName]: {\r\n          ...prevState.chartRefs[kpiName],\r\n          ref: ref,\r\n          sequence: sequence\r\n        }\r\n      },\r\n    }));\r\n  };\r\n\r\n  getKPIChart = (kpiInfo) => {\r\n    //debugger;\r\n    if (kpiInfo.ChartType === ChartType.SingleValue) {\r\n      return (\r\n        <ErrorBoundary>\r\n          <SingleValueChart kpiInfo={kpiInfo}></SingleValueChart>\r\n        </ErrorBoundary>\r\n      );\r\n    } else if (kpiInfo.ChartType === ChartType.EntityDetails) {\r\n      return (\r\n        <ErrorBoundary>\r\n          <EntityDetailsChart kpiInfo={kpiInfo}></EntityDetailsChart>\r\n        </ErrorBoundary>\r\n      );\r\n    } else if (\r\n      kpiInfo.ChartType === ChartType.FlexSeries ||\r\n      kpiInfo.ChartType === ChartType.FlexPie ||\r\n      kpiInfo.ChartType === ChartType.FlexDynamicSeries ||\r\n      kpiInfo.ChartType === ChartType.Bullet ||\r\n      kpiInfo.ChartType === ChartType.Gauge ||\r\n      kpiInfo.ChartType === ChartType.StackedBullet ||\r\n      kpiInfo.ChartType === ChartType.BlockChart\r\n    ) {\r\n      return (\r\n        <ErrorBoundary>\r\n          <WithDetails\r\n            cardHeader={kpiInfo.KPIName}\r\n            handleClick={() => this.clickHandler(kpiInfo.KPIName)}\r\n            childCount={kpiInfo.ChildCount}\r\n            exportHandler={(kpiName, format) =>\r\n              ExportChart(this.state.chartRefs[kpiName].ref, format, kpiName)\r\n            }\r\n            modalOpen={\r\n              kpiInfo.KPIName === this.state.parentKpiName\r\n                ? this.state.modalOpen\r\n                : false\r\n            }\r\n            handleModalClose={() => {\r\n              this.setState({ modalOpen: false, parentKpiName: null });\r\n              if (this.props.fullScreenHandler)\r\n                this.props.fullScreenHandler(false);\r\n            }}\r\n            modalContent={this.state.modalContent}\r\n            fullScreenHandler={this.props.fullScreenHandler}\r\n            isExportRequired={this.props.isChartExport}\r\n            isFullScreenRequired={this.props.isChartFullscreen}\r\n          >\r\n            {this.getChart(kpiInfo)}\r\n          </WithDetails>\r\n        </ErrorBoundary>\r\n      );\r\n    } else {\r\n      return \"Chart Type not supported\";\r\n    }\r\n  };\r\n\r\n  // return Column, Bar, Line, Area, Pie, Donut, Gauge charts\r\n  getChart = (chartInfo) => {\r\n    if (chartInfo.ChartType === ChartType.FlexSeries) {\r\n      return (\r\n        <LACSeriesChart\r\n          kpiInfo={chartInfo}\r\n          setChartRefs={this.setChartRefs} />\r\n      );\r\n    } else if (chartInfo.ChartType === ChartType.FlexDynamicSeries) {\r\n      return (\r\n        <LACDynamicSeriesChart\r\n          kpiInfo={chartInfo}\r\n          setChartRefs={this.setChartRefs}\r\n        />\r\n      );\r\n    } else if (chartInfo.ChartType === ChartType.FlexPie) {\r\n      return (\r\n        <DonutPieChart\r\n          kpiInfo={chartInfo}\r\n          setChartRefs={this.setChartRefs} />\r\n      );\r\n    } else if (\r\n      chartInfo.ChartType === ChartType.Bullet\r\n    ) {\r\n      return (\r\n        <BulletChart\r\n          kpiInfo={chartInfo}\r\n          setChartRefs={this.setChartRefs}\r\n        />\r\n      )\r\n    } else if (\r\n      chartInfo.ChartType === ChartType.Gauge\r\n    ) {\r\n      return (\r\n        <GaugeChart\r\n          kpiInfo={chartInfo}\r\n          setChartRefs={this.setChartRefs} />\r\n      )\r\n    }\r\n    else if (\r\n      chartInfo.ChartType === ChartType.StackedBullet\r\n    ) {\r\n      return (\r\n        <StackedBullet\r\n          kpiInfo={chartInfo}\r\n          setChartRefs={this.setChartRefs} />\r\n      )\r\n    }\r\n    else if (\r\n      chartInfo.ChartType === ChartType.BlockChart\r\n    ) {\r\n      return (\r\n        <BlockChart\r\n          kpiInfo={chartInfo}\r\n          setChartRefs={this.setChartRefs} />\r\n      )\r\n    }\r\n  };\r\n\r\n  exportAllCharts = () => {\r\n    this.setState({ exportLoading: true }, () => {\r\n      let doc = new wijmoPdf.PdfDocument({\r\n        // method to execute on end\r\n        ended: (s, e) => {\r\n          if (e.blob) {\r\n            this.setState({ exportLoading: false }, () => {\r\n              if (this.props.exportCallback) {\r\n                this.props.exportCallback();\r\n              }\r\n              wijmoPdf.saveBlob(e.blob, \"Dashboard.pdf\");\r\n            })\r\n          }\r\n        },\r\n        pageSettings: {\r\n          margins: {\r\n            left: 5,\r\n            top: 5,\r\n            right: 5,\r\n            bottom: 5,\r\n          },\r\n          layout: wijmoPdf.PdfPageOrientation.Portrait,\r\n        },\r\n      });\r\n\r\n      try {\r\n        let colWidth = 300, rowHeight = 150, y = 0;\r\n\r\n        // sort chartRef keys based on sequence \r\n        let kpiSequence = Object.keys(this.state.chartRefs).sort((a, b) => {\r\n          return this.state.chartRefs[a].sequence - this.state.chartRefs[b].sequence\r\n        })\r\n\r\n        let promises = [];\r\n\r\n        // generate image for each chart\r\n        kpiSequence.forEach((key, index) => {\r\n          // store promise returned by toPng in object\r\n          promises.push(toPng(\r\n            (this.state.chartRefs[key].ref.current ?\r\n              this.state.chartRefs[key].ref.current :\r\n              this.state.chartRefs[key].ref.hostElement),\r\n            {\r\n              cacheBust: true\r\n            }));\r\n        });\r\n\r\n        // wait for all promises to resolve\r\n        Promise.all(promises)\r\n          .then((urls) => {\r\n            // for each url draw the image in pdf\r\n            urls.forEach((url, index) => {\r\n              let x = 0\r\n              // if index is odd, place the image on the right side of the page\r\n              if (index % 2 === 1) {\r\n                x = colWidth;\r\n              }\r\n              // draw cell borders\r\n              doc.paths.rect(x, y, colWidth, rowHeight).stroke()\r\n              // draw line below the widget header\r\n              doc.paths.moveTo(x, y + 19).lineTo(x + colWidth, y + 19).stroke()\r\n\r\n              // draw localized KPI Name text to identify the image\r\n              doc.drawText(this.props.translation(kpiSequence[index]), x + 5, y + 5)\r\n              // draw image\r\n              doc.drawImage(url, x, y + 20, {\r\n                width: colWidth,\r\n                height: rowHeight - 20,\r\n                align: wijmoPdf.PdfImageHorizontalAlign.Center\r\n              });\r\n\r\n              // if index is odd, increase the y position\r\n              if (index % 2 === 1) {\r\n                y += rowHeight;\r\n                // if y position is greater than document height, add a new page\r\n                if (y >= doc.height) {\r\n                  y = 0;\r\n                  doc.addPage();\r\n                }\r\n              }\r\n            });\r\n\r\n            // once all images are drawn, call end() method of document\r\n            doc.end();\r\n          })\r\n          .catch((error) => {\r\n            console.log(\"Error in converting HTML to Image: \", error);\r\n            this.setState({ exportLoading: false })\r\n            if (this.props.exportCallback) {\r\n              this.props.exportCallback();\r\n            }\r\n          });\r\n      } catch (error) {\r\n        console.log(\"Error in exportAllCharts: \", error);\r\n        this.setState({ exportLoading: false })\r\n        if (this.props.exportCallback) {\r\n          this.props.exportCallback();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    //debugger;\r\n    let kpiList = Array.isArray(this.props.kpiList) ? this.props.kpiList : []; //.filter((kpi) => kpi.resultData.IsSuccess);\r\n    let wijmoCharts = Object.values(ChartType).filter(\r\n      (val) => val !== ChartType.SingleValue && val !== ChartType.EntityDetails\r\n    );\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) =>\r\n          <div>\r\n            {\r\n              this.props.exportRequired || this.props.customControlObject ?\r\n                <div className=\"row\">\r\n                  {\r\n                    this.props.customControlObject ?\r\n                      <div className=\"col-12 col-lg-7 pb-1\">\r\n                        {this.props.customControlObject}\r\n                      </div>\r\n                      : null\r\n                  }\r\n                  <div className={this.props.customControlObject ? \"col-12 col-lg-5 pb-1\" : \"col-12 offset-lg-5 col-lg-7 pr-4 pb-1\"}>\r\n                    <span style={{ float: \"right\" }}>\r\n                      <Button\r\n                        type=\"primary\"\r\n                        className=\"dashboardExport\"\r\n                        actionType=\"button\"\r\n                        disabled={this.state.exportLoading}\r\n                        onClick={this.exportAllCharts}>\r\n                        {t(\"WijmoGridExport\")}\r\n                        {\r\n                          this.state.exportLoading ?\r\n                            <span className=\"pl-1\">\r\n                              <Icon name=\"redo\" size=\"small\" loading={true} />\r\n                            </span> :\r\n                            null\r\n                        }\r\n                      </Button>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                : null\r\n            }\r\n            <div className=\"row pr-3 pl-2 kpiSummaryBottomSpace\">\r\n              {\r\n                kpiList.filter(kpi => kpi.ChartType === \"EntityDetails\").length > 0 ?\r\n                  kpiList.map((kpiInfo, index) => {\r\n                    return (\r\n                      <div key={index}>\r\n                        {this.getKPIChart(kpiInfo)}\r\n                      </div>\r\n                    );\r\n                  })\r\n                  :\r\n                  <DashboardGrid\r\n                    isDraggable={this.props.isDraggable}\r\n                    isResizable={this.props.isResizable}\r\n                    rowHeight={this.props.rowHeight}\r\n                    widgetHeight={\r\n                      kpiList.length === 1 && this.props.isDetails\r\n                        ? Number(window.screen.height / 240) < 1 ? 1 : Number(window.screen.height / 240)\r\n                        : this.props.widgetHeight\r\n                    }\r\n                    pageName={this.props.pageName}\r\n                    cols={kpiList.length === 1 && this.props.isDetails ? { lg: 1, md: 1, sm: 1, xs: 1, xxs: 1 } : undefined}\r\n                  >\r\n                    {kpiList.map((kpiInfo, index) => {\r\n                      let json = JSON.parse(kpiInfo.JSONFormat);\r\n                      return (\r\n                        <div\r\n                          dimensions={json.Chart ? json.Chart.dimensions : null}\r\n                          key={index}\r\n                          style={{ height: \"100%\" }}\r\n                          className={\r\n                            !wijmoCharts.includes(kpiInfo.ChartType) ? \"background ml-md-1 mt-1 mt-md-0\" : \"\"\r\n                          }\r\n                        >\r\n                          {this.getKPIChart(kpiInfo)}\r\n                        </div>\r\n                      )\r\n                    }\r\n                    )}\r\n                  </DashboardGrid>\r\n              }\r\n            </div>\r\n          </div>\r\n        }\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\n\r\nKPIDashboardLayout.propTypes = {\r\n  kpiList: PropTypes.array.isRequired,\r\n  fetchData: PropTypes.func,\r\n  exportRequired: PropTypes.bool,\r\n  fullScreenHandler: PropTypes.func,\r\n  isDraggable: PropTypes.bool,\r\n  isResizable: PropTypes.bool,\r\n  rowHeight: PropTypes.number,\r\n  widgetHeight: PropTypes.number,\r\n  pageName: PropTypes.string.isRequired,\r\n  isDetails: PropTypes.bool,\r\n  isChartExport: PropTypes.bool,\r\n  isChartFullscreen: PropTypes.bool\r\n}\r\n\r\nKPIDashboardLayout.defaultProps = {\r\n  exportRequired: false,\r\n  isDraggable: false,\r\n  isResizable: false,\r\n  rowHeight: 90,\r\n  widgetHeight: 1,\r\n  isDetails: false,\r\n  isChartExport: true,\r\n  isChartFullscreen: true\r\n}\r\n\r\nconst KPIDashboardFunc = React.forwardRef((props, ref) => {\r\n  const [t] = useTranslation();\r\n  return <KPIDashboardLayout ref={ref} {...props} translation={t} />\r\n});\r\n\r\nexport default KPIDashboardFunc;\r\n","import { toJpeg, toPng, toSvg } from 'html-to-image'\r\n\r\n// export dashboard charts (grapecity, blocker and KPI)\r\nexport const ExportChart = (chartRef, format, fileName) => {\r\n    try {\r\n        if (chartRef !== null) {\r\n            // check if chart is grapecity chart\r\n            if (chartRef.saveImageToFile) {\r\n                chartRef.saveImageToFile(fileName + \".\" + format);\r\n            }\r\n            // if chart is not a grapecity chart, export HTML chart DOM to image\r\n            else if (chartRef.current !== null) {\r\n                if (format === \"png\") {\r\n                    toPng(chartRef.current, { cacheBust: true })\r\n                        .then((dataUrl) => {\r\n                            const link = document.createElement('a');\r\n                            link.download = fileName + \".png\";\r\n                            link.href = dataUrl;\r\n                            link.click();\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(\"Error converting to png\", error);\r\n                        })\r\n                }\r\n                else if (format === \"jpeg\") {\r\n                    toJpeg(chartRef.current, { cacheBust: true })\r\n                        .then((dataUrl) => {\r\n                            const link = document.createElement('a');\r\n                            link.download = fileName + \".jpeg\";\r\n                            link.href = dataUrl;\r\n                            link.click();\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(\"Error convert to jpeg\", error);\r\n                        })\r\n                }\r\n                else if (format === \"svg\") {\r\n                    toSvg(chartRef.current, { cacheBust: true })\r\n                        .then((dataUrl) => {\r\n                            const link = document.createElement('a');\r\n                            link.download = fileName + \".svg\";\r\n                            link.href = dataUrl;\r\n                            link.click();\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(\"Error convert to svg\", error);\r\n                        })\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            console.log(\"invalid kpi\");\r\n        }\r\n    } catch (error) {\r\n        console.log(error, \"Error in exportChart\");\r\n    }\r\n}","export const kpiDriverList = \"DriverList\"\r\nexport const kpiTerminalDashboardDetails = \"TerminalDashboardDetails\"\r\nexport const kpiTerminalDashboards = \"TerminalDashboards\"\r\nexport const kpiSlotDetailsShipmentList = \"SlotDetailsShipmentList\"\r\nexport const kpiSlotDetailsReceiptList = \"SlotDetailsReceiptList\"\r\nexport const kpiVehicleList = \"VehicleList\";\r\nexport const kpiPrimeMoverList = \"PrimeMoverList\";\r\nexport const kpiTrailerList = \"TrailerList\";\r\nexport const kpiCarrierList = \"CarrierList\";\r\nexport const kpiVesselList = \"VesselList\";\r\nexport const kpiCustomerList = \"CustomerList\";\r\nexport const kpiDestinationList = \"DestinationList\";\r\nexport const kpiSupplierList = \"SupplierList\";\r\nexport const kpiOriginTerminalList = \"OriginTerminalList\";\r\nexport const kpiShareholderList = \"ShareholderList\";\r\nexport const kpiBaseProductList = \"BaseProductList\";\r\nexport const kpiFinishedProductList = \"FinishedProductList\";\r\nexport const kpiTankGroupList = \"TankGroupList\";\r\nexport const kpiTankList = \"TankList\";\r\nexport const kpiOrderList = \"OrderList\";\r\nexport const kpiContractList = \"ContractList\";\r\nexport const kpiRailWagonList = \"RailWagonList\";\r\nexport const kpiRailRouteList = \"RailRouteList\";\r\nexport const kpiTruckShipmentList = \"ShipmentList\";\r\nexport const kpiTruckReceiptList = \"ReceiptList\";\r\nexport const kpiAccessCardList = \"AccessCardList\";\r\nexport const kpiCaptainList = \"CaptainList\";\r\nexport const kpiRailShipmentList = \"RailShipmentList\";\r\nexport const kpiRailReceiptList = \"RailReceiptList\";\r\nexport const kpiMarineShipmentList = \"MarineShipmentList\";\r\nexport const kpiMarineReceiptList = \"MarineReceiptList\";\r\nexport const kpiStaffVisitorList = \"StaffVisitorList\";\r\nexport const kpiDeviceList = \"DeviceList\";\r\nexport const kpiPipelineHeaderSiteViewList = \"PipelineHeaderSiteViewList\";\r\nexport const kpiMeterList = \"MeterList\";\r\nexport const kpiPipelineDispatchList = \"PipelineDispatchList\";\r\nexport const kpiTankMonitor = \"TankMonitor\";\r\nexport const KpiPipelineReceiptList = \"PipelineReceiptList\";\r\nexport const KpiHomePage = \"HomePage\";\r\nexport const KpiBayGroupList = \"BayGroupList\";\r\nexport const kpiDriverDetail = \"DriverDetail\";\r\nexport const kpiVehicleDetail = \"VehicleDetail\";\r\nexport const kpiTrailerDetail = \"TrailerDetail\";\r\nexport const kpiCarrierDetail = \"CarrierDetail\";\r\nexport const kpiVesselDetail = \"VesselDetail\";\r\nexport const kpiPrimeMoverDetail = \"PrimeMoverDetail\";\r\nexport const kpiCustomerDetail = \"CustomerDetail\";\r\nexport const kpiDestinationDetail = \"DestinationDetail\";\r\nexport const kpiSupplierDetail = \"SupplierDetail\";\r\nexport const kpiOriginTerminalDetail = \"OriginTerminalDetail\";\r\nexport const kpiShareholderDetail = \"ShareholderDetail\";\r\nexport const kpiBaseProductDetail = \"BaseProductDetail\";\r\nexport const kpiFinishedProductDetail = \"FinishedProductDetail\";\r\nexport const kpiTankGroupDetail = \"TankGroupDetail\";\r\nexport const kpiTankDetail = \"TankDetail\";\r\nexport const kpiOrderDetail = \"OrderDetail\";\r\nexport const kpiContractDetail = \"ContractDetail\";\r\nexport const kpiRailWagonDetail = \"RailWagonDetail\";\r\nexport const kpiRailRouteDetail = \"RailRouteDetail\";\r\nexport const kpiTruckShipmentDetail = \"ShipmentDetail\";\r\nexport const kpiTruckReceiptDetail = \"ReceiptDetail\";\r\nexport const kpiAccessCardDetail = \"AccessCardDetail\";\r\nexport const kpiCaptainDetail = \"CaptainDetail\";\r\nexport const kpiDeviceDetail = \"DeviceDetail\";\r\nexport const kpiStaffVisitorDetail = \"StaffVisitorDetail\";\r\nexport const kpiPipelineDispatchDetail = \"PipelineDispatchDetail\";\r\nexport const KpiPipelineReceiptDetail = \"PipelineReceiptDetail\";\r\nexport const KpiBayGroupDetail = \"BayGroupDetail\";\r\nexport const kpiRailShipmentDetails = \"RailShipmentDetails\";\r\nexport const kpiRailReceiptDetails = \"RailReceiptDetails\";\r\nexport const kpiMarineShipmentDetails = \"MarineShipmentDetails\";\r\nexport const kpiMarineReceiptDetails = \"MarineReceiptDetails\";\r\nexport const kpiTankShareholderAssociationList = \"TankShareholderAssociationList\";\r\nexport const kpiProductInventory = \"ProductInventory\";\r\nexport const kpiDriverPortal = \"DriverPortal\";\r\n\r\n"],"names":["connect","state","theme","appTheme","props","chartInitialized","flex","setChartRefs","kpiInfo","KPIName","Sequence","isLiveCheck","jsonData","Chart","ChartDetails","isLive","JSON","parse","JSONFormat","getPalettes","chartPalette","common","palette","Array","isArray","ThemeType","Dark","dark","default","bindings","colorsSource","table","columnName","KPIData","map","item","error","console","log","_jsx","ErrorBoundary","children","TranslationConsumer","t","className","_jsxs","wjChart","itemsSource","seriesSource","header","initialized","chartLegend","dataLabel","wjChartAnimate","animationMode","flexRef","React","initGestures","gestures","posX","initialPosition","xPosition","posY","yPosition","scaleX","xScale","scaleY","yScale","setMajorUnitY","current","data","seriesData","Table","length","excludedBinding","columns","Object","keys","key","includes","push","maxs","forEach","ybind","max","row","index","filter","val","axisY","majorUnit","undefined","chartInitiliazed","getFlexChartSeries","flexSeries","binding","name","getPalletes","header_locale_key","position","chartAxis","axis","title","Thresholds","threshold","wjChartAnalytics","Name","style","Styles","min","Min","sampleCount","tooltipContent","Label","Value","func","x","wjChartInteraction","mouseAction","yBindings","col","column","axisFormat","DashboardCard","cardPreview","setCardPreview","useState","setIsLive","childrenWithProps","child","float","width","Tooltip","content","element","fontSize","fontWeight","whiteSpace","overflow","textOverflow","hoverable","event","verticalAlign","isExportRequired","Popup","padding","Icon","root","size","on","VerticalMenu","Item","onClick","exportHandler","exportName","isFullScreenRequired","fullScreenHandler","isNaN","parseInt","childCount","clickHandler","Modal","open","closeOnDimmerClick","closeOnDocumentClick","onClose","closeIcon","Header","Content","defaultProps","menuItems","openModal","closeHandler","menu","maxHeight","height","overflowX","overflowY","Footer","marginTop","borderTop","marginLeft","Button","WithDetails","cardHeader","handleClick","modalOpen","CustomModal","handleModalClose","modalContent","SingleValueChart","Component","constructor","arguments","render","this","config","color","kpiValue","secondaryValue","resultStatus","resultData","IsSuccess","colName","secondaryColName","categories","cat","value","ErrorList","ErrorMessage","borderLeftColor","unit","localeKey","EntityDetailsChart","entityDetails","searchResult","pageResult","results","pageIndex","buildPaging","filteredEntityDetails","Pagination","totalItems","itemsPerPage","activePage","onPageChange","page","setState","fillEntityDetails","tkInventorys","LoadingPage","loadingClass","message","firstIndexInPage","lastIndexInPage","slice","inventory","fillEntityInfo","fillingColumn","productColor","tkDisplayCols","entityWidget","PercentFillColumn","ColorColumn","Columns","sort","a","b","Position","IsVisible","StatusColumn","TitleColumn","TotalFillColumn","backgroundColor","Math","round","getDetailsFromJSON","IsHighlight","ColName","toString","UOMColumn","handleSearchChange","lodash","filt","k","values","every","cellvalue","toLowerCase","n","getValues","arr","handleSearchSelect","result","Search","onSearchChange","ref","TableName","fillPercent","Max","Current","fillColor","FillColor","ranges","range","textAlign","Unit","BackgroundColor","concat","maxWidth","minWidth","gauge","renderRanges","maxVal","Range","renderPoints","pointer","wjProperty","renderFace","face","refresh","gaugeType","LinearGauge","autoScale","sender","RadialGauge","ResponsiveGridLayout","WidthProvider","Responsive","DashboardGrid","screenWidth","window","screen","yPosFactor","layout","setLayout","stringify","ls","global","localStorage","getItem","e","getFromLS","pageName","onLayoutChange","layouts","setItem","breakpoints","lg","md","sm","xs","xxs","cols","isDraggable","isResizable","rowHeight","dimensions","y","w","h","widgetHeight","stackedBulletRef","bullets","tableName","labels","colSum","sections","section","dbColumn","reduce","toolTip","label","totalValDbCol","display","String","blockChartRef","Blocks","block","colClass","KPIDashboardLayout","parentKpiName","chartRefs","exportLoading","fetchData","then","response","KPIDashboardFunc","kpiList","EntityResult","ListKPIDetails","isDetails","customControlObject","exportRequired","catch","kpiName","sequence","prevState","getKPIChart","ChartType","SingleValue","EntityDetails","FlexSeries","FlexPie","FlexDynamicSeries","Bullet","Gauge","StackedBullet","BlockChart","ChildCount","format","ExportChart","isChartExport","isChartFullscreen","getChart","chartInfo","LACSeriesChart","LACDynamicSeriesChart","DonutPieChart","BulletChart","GaugeChart","exportAllCharts","doc","wijmoPdf","ended","s","blob","exportCallback","pageSettings","margins","left","top","right","bottom","Portrait","colWidth","kpiSequence","promises","toPng","hostElement","cacheBust","Promise","all","urls","url","paths","rect","stroke","moveTo","lineTo","drawText","translation","drawImage","align","Center","addPage","end","wijmoCharts","type","actionType","disabled","loading","kpi","Number","json","useTranslation","chartRef","fileName","saveImageToFile","dataUrl","link","document","createElement","download","href","click","toJpeg","toSvg","kpiDriverList","kpiTerminalDashboardDetails","kpiTerminalDashboards","kpiSlotDetailsShipmentList","kpiSlotDetailsReceiptList","kpiVehicleList","kpiPrimeMoverList","kpiTrailerList","kpiCarrierList","kpiVesselList","kpiCustomerList","kpiDestinationList","kpiSupplierList","kpiOriginTerminalList","kpiShareholderList","kpiBaseProductList","kpiFinishedProductList","kpiTankGroupList","kpiTankList","kpiOrderList","kpiContractList","kpiRailWagonList","kpiRailRouteList","kpiTruckShipmentList","kpiTruckReceiptList","kpiAccessCardList","kpiCaptainList","kpiRailShipmentList","kpiRailReceiptList","kpiMarineShipmentList","kpiMarineReceiptList","kpiStaffVisitorList","kpiDeviceList","kpiPipelineHeaderSiteViewList","kpiMeterList","kpiPipelineDispatchList","kpiTankMonitor","KpiPipelineReceiptList","KpiHomePage","KpiBayGroupList","kpiDriverDetail","kpiVehicleDetail","kpiTrailerDetail","kpiCarrierDetail","kpiVesselDetail","kpiPrimeMoverDetail","kpiCustomerDetail","kpiDestinationDetail","kpiSupplierDetail","kpiOriginTerminalDetail","kpiShareholderDetail","kpiBaseProductDetail","kpiFinishedProductDetail","kpiTankGroupDetail","kpiTankDetail","kpiOrderDetail","kpiContractDetail","kpiRailWagonDetail","kpiRailRouteDetail","kpiTruckShipmentDetail","kpiTruckReceiptDetail","kpiAccessCardDetail","kpiCaptainDetail","kpiDeviceDetail","kpiStaffVisitorDetail","kpiPipelineDispatchDetail","KpiPipelineReceiptDetail","KpiBayGroupDetail","kpiRailShipmentDetails","kpiRailReceiptDetails","kpiMarineShipmentDetails","kpiMarineReceiptDetails","kpiTankShareholderAssociationList","kpiProductInventory","kpiDriverPortal"],"sourceRoot":""}