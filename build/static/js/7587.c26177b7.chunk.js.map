{"version":3,"file":"static/js/7587.c26177b7.chunk.js","mappings":"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","sources":["Components/UIBase/Details/ExchangeAgreementDetails.jsx","Components/UIBase/Details/ProductTransferAgreementDetails.jsx","Components/UIBase/Details/ShareholderAgreementViewAuditTrailsDetails.jsx","Components/UIBase/Details/ExchangeAgreementShipmentDetails.jsx","Components/Composite/Details/ShareholderAgreementDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/functionalUtilities.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n    Select,\r\n    Icon,\r\n    Input,\r\n    DatePicker,\r\n    Tab,\r\n    Checkbox,\r\n    Accordion,\r\n    Button,\r\n    Modal,\r\n} from \"@scuf/common\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nimport { getCurrentDateFormat, handleIsRequiredCompartmentCell } from \"../../../JS/functionalUtilities\";\r\n\r\nExchangeAgreementDetails.propTypes = {\r\n    selectedShareholder: PropTypes.array.isRequired,\r\n    isBonded: PropTypes.bool.isRequired,\r\n    modExchangeAgrement: PropTypes.object.isRequired,\r\n    modExchangeAgreementItems: PropTypes.array.isRequired,\r\n    exchangeAgreement: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    selectedAssociations: PropTypes.array.isRequired,\r\n    handleAssociationSelectionChange:PropTypes.func.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        shareholders: PropTypes.array,\r\n        baseProductOptions: PropTypes.array,\r\n        UOMOptions: PropTypes.array,\r\n        currentShareholderAgreementStatusList:PropTypes.array\r\n    }).isRequired,\r\n    onDateTextChange: PropTypes.func.isRequired,\r\n    handleViewAuditTrail: PropTypes.func.isRequired,\r\n    GetExchangeAgreementShipmentItemDetails: PropTypes.func.isRequired,\r\n    UpdateExchangeAgreementStatus: PropTypes.func.isRequired,\r\n    selectedAttributeList: PropTypes.array.isRequired,\r\n    attributeValidationErrors: PropTypes.array.isRequired,\r\n    handleCellAttrinuteDataEdit: PropTypes.func.isRequired,\r\n    isEnterpriseNode: PropTypes.bool.isRequired,\r\n    btnCreatePTAgreement: PropTypes.bool.isRequired,\r\n    btnFroceClose: PropTypes.bool.isRequired,\r\n}\r\n\r\nExchangeAgreementDetails.defaultProps = {\r\n    listOptions: {\r\n        shareholders: [],\r\n        // baseProductOptions: [],\r\n        UOMOptions: [],\r\n        currentShareholderAgreementStatusList:[]\r\n\r\n    },\r\n    isEnterpriseNode: false,\r\n    isBonded: false,\r\n\r\n}\r\nexport  function ExchangeAgreementDetails({ \r\n    isBonded,\r\n    modExchangeAgrement,\r\n    exchangeAgreement,\r\n    modExchangeAgreementItems,\r\n    listOptions,\r\n    onFieldChange,\r\n    selectedAssociations,\r\n    handleAssociationSelectionChange,\r\n    handleCellDataEdit,\r\n    handleAddAssociation,\r\n    handleDeleteAssociation,\r\n    onDateTextChange,\r\n    validationErrors,\r\n    handleViewAuditTrail,\r\n    GetExchangeAgreementShipmentItemDetails,\r\n    UpdateExchangeAgreementStatus,\r\n    selectedAttributeList,\r\n    attributeValidationErrors,\r\n    handleCellAttrinuteDataEdit,\r\n    isEnterpriseNode,\r\n    selectedShareholder,\r\n    btnCreatePTAgreement,\r\n    btnFroceClose,\r\n\r\n}) {\r\n    const handleCustomEditDateSelect = (cellData) => {\r\n        return (\r\n            <DatePicker\r\n                fluid\r\n                value={modExchangeAgreementItems[cellData.rowIndex][cellData.field] === null ?\r\n                    \"\" : new Date(modExchangeAgreementItems[cellData.rowIndex][cellData.field])}\r\n                type=\"date\"\r\n                displayFormat={getCurrentDateFormat()}\r\n                indicator=\"required\"\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                onTextChange={(value, error) => {\r\n                    onDateTextChange(cellData, value, error);\r\n                }}\r\n                reserveSpace={false}\r\n            ></DatePicker>\r\n        );\r\n    }\r\n    const handleCustomEditDropDown = (cellData, listOptions) => {\r\n        return (\r\n            <Select\r\n                className=\"selectDropwdown\"\r\n                value={modExchangeAgreementItems[cellData.rowIndex][cellData.field]}\r\n                fluid\r\n                options={listOptions}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                indicator=\"required\"\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n            />\r\n        );\r\n    };\r\n\r\n    const handleCustomEditTextBox = (cellData) => {\r\n        return (\r\n            <Input\r\n                fluid\r\n                value={modExchangeAgreementItems[cellData.rowIndex][cellData.field]}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n            />\r\n        );\r\n    };\r\n    const dateDisplayValues = (cellData) => {\r\n        const { value } = cellData;\r\n        return value !== null ? new Date(value).toLocaleDateString() : \"\"\r\n    }\r\n    const decimalDisplayValues = (cellData) => {\r\n        const { value } = cellData;\r\n        if (typeof value === \"number\") {\r\n            return value.toLocaleString();\r\n        } else {\r\n            return value;\r\n        }\r\n    };\r\n    const handleDropdownEdit = (cellData) => {\r\n        \r\n        let dropDownOptions = [];\r\n        if (cellData.field === \"QuantityUOM\") {\r\n            dropDownOptions = [\r\n                ...listOptions.UOMOptions,\r\n            ];\r\n        }\r\n        return (\r\n            <Select\r\n                className=\"selectDropwdown\"\r\n                placeholder={t(\"Common_Select\")}\r\n                value={modExchangeAgreementItems[cellData.rowIndex][cellData.field]}\r\n                fluid\r\n                options={dropDownOptions}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                // indicator=\"required\"\r\n                reserveSpace={false}\r\n                search={true}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n            />\r\n        );\r\n    }\r\n    const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n        let attributeValidation = [];\r\n        attributeValidation = attributeValidationErrors.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n        })\r\n        return attributeValidation.attributeValidationErrors;\r\n    }\r\n    const [t] = useTranslation();\r\n    return (\r\n        // <TranslationConsumer>\r\n        //   {(t) => (\r\n        <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={modExchangeAgrement.RequestCode !== \"\" ? modExchangeAgrement.RequestCode:\"\"}\r\n                        label={t(\"ExchangeAgreementDetails_RequestCode\")}\r\n                        indicator=\"required\"\r\n                        onChange={(data) => onFieldChange(\"RequestCode\", data)}\r\n                        disabled={exchangeAgreement.RequestCode !== \"\"}\r\n                        reserveSpace={false}\r\n                        error={t(validationErrors.RequestCode)}\r\n\r\n                    />\r\n                </div>\r\n                {modExchangeAgrement.LenderShareholderCode === selectedShareholder || modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.ACCEPTED || modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.OFFER_REJECTED? <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                        fluid\r\n                        value={modExchangeAgrement.RequestStatus == null ? \"\" : modExchangeAgrement.RequestStatus}\r\n                        placeholder={t(\"FinishedProductInfo_Select\")}\r\n                        label={t(\"ProductTransferAgreementDetails_Status\")}\r\n                        options={listOptions.currentShareholderAgreementStatusList}\r\n                        onChange={(data) => onFieldChange(\"RequestStatus\", data)}\r\n                        indicator=\"required\"   >\r\n                    </Select>\r\n                </div> : <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        // placeholder={t(\"FinishedProductInfo_Select\")}\r\n                        value={modExchangeAgrement.RequestStatus == null ? \"\" : modExchangeAgrement.RequestStatus}\r\n                        label={t(\"ExchangeAgreementDetails_Status\")}\r\n                        disabled={true}\r\n                    />\r\n                </div>}\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                        fluid\r\n                        value={modExchangeAgrement.LenderShareholderCode}\r\n                        placeholder={t(\"FinishedProductInfo_Select\")}\r\n                        label={t(\"ExchangeAgreementDetails_lenderShareHolder\")}\r\n                        options={listOptions.shareholders}\r\n                        onChange={(data) => onFieldChange(\"LenderShareholderCode\", data)}\r\n                        indicator=\"required\"\r\n                        disabled={exchangeAgreement.RequestCode !== \"\"}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4 planneddate\">\r\n                    <DatePicker\r\n                        fluid\r\n                        value={modExchangeAgrement.StartDate}\r\n                        initialWidth=\"160px\"\r\n                        label={t(\"ExchangeAgreementDetails_StartDate\")}\r\n                        displayFormat={getCurrentDateFormat()}\r\n                        type=\"date\"\r\n                        showYearSelector=\"true\"\r\n                        indicator=\"required\"\r\n                        // minuteStep={1}\r\n                        onChange={(data) => onFieldChange(\"StartDate\", data)}\r\n                        // onTextChange={(value, error) => {\r\n                        //     onDateTextChange(\"StartDate\", value, error);\r\n                        // }}\r\n                        reserveSpace={false}\r\n                        error={t(validationErrors.StartDate)}\r\n\r\n                        \r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4 planneddate\">\r\n                    <DatePicker\r\n                        fluid\r\n                        value={modExchangeAgrement.EndDate}\r\n                        initialWidth=\"160px\"\r\n                        label={t(\"ExchangeAgreementDetailsItem_EndDate\")}\r\n                        displayFormat={getCurrentDateFormat()}\r\n                        type=\"date\"\r\n                        showYearSelector=\"true\"\r\n                        indicator=\"required\"\r\n                        // minuteStep={1}\r\n                        onChange={(data) => onFieldChange(\"EndDate\", data)}\r\n                        // onTextChange={(value, error) => {\r\n                        //     onDateTextChange(\"EndDate\", value, error);\r\n                        // }}\r\n                        reserveSpace={false}\r\n                        error={t(validationErrors.EndDate)}\r\n\r\n\r\n                    />\r\n                </div>\r\n               \r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={modExchangeAgrement.Remarks}\r\n                        label={t(\"ExchangeAgreementDetails_Comments\")}\r\n                        reserveSpace={false}\r\n                        onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                        indicator={exchangeAgreement.RequestCode !== \"\" ? \"required\" : \"\"}\r\n                        error={t(validationErrors.Remarks)}\r\n\r\n                    />\r\n                </div>\r\n                {isBonded ? (\r\n                    <div className=\"col-12 col-md-6 col-lg-4 ddlSelectAll\">\r\n                        <Checkbox\r\n                            label={t(\"TankInfo_Bonded\")}\r\n                            checked={modExchangeAgrement.IsBonded }\r\n                            onChange={(data) => onFieldChange(\"IsBonded\", data)}\r\n                        />\r\n                    </div>\r\n                ) : (\"\")}\r\n                {\r\n                    selectedAttributeList.length > 0 ?\r\n                        selectedAttributeList.map((attribute) =>\r\n                            <ErrorBoundary>\r\n                                <Accordion >\r\n                                    <Accordion.Content\r\n                                        className=\"attributeAccordian\"\r\n                                        title={isEnterpriseNode ? (attribute.TerminalCode + ' - ' + t(\"Attributes_Header\")) : (t(\"Attributes_Header\"))}\r\n                                    >\r\n                                        <AttributeDetails\r\n                                            selectedAttributeList={attribute.attributeMetaDataList}\r\n                                            handleCellDataEdit={handleCellAttrinuteDataEdit}\r\n                                            attributeValidationErrors={handleValidationErrorFilter(attributeValidationErrors, attribute.TerminalCode)}\r\n                                        ></AttributeDetails>\r\n                                    </Accordion.Content>\r\n                                </Accordion>\r\n                            </ErrorBoundary>\r\n                        ) : null\r\n                }\r\n               </div>\r\n               \r\n                   \r\n            <div className=\"row compartmentRow\">\r\n                <h3>{t(\"ExchangeAgreementDetails_ExchangeAgreementItem\")} </h3>\r\n                            <div className=\"col\">\r\n                                <div className=\"compartmentIconContainer\">\r\n                                    <div\r\n                                        onClick={handleAddAssociation}\r\n                                        className=\"compartmentIcon\"\r\n                                    >\r\n                                        <div>\r\n                                            <Icon root=\"common\" name=\"badge-plus\" size=\"medium\" />\r\n                                        </div>\r\n                                        <div className=\"margin_l10\">\r\n                                            <h5 className=\"font14\">{t(\"TrailerInfo_Add\")}</h5>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div\r\n                                        onClick={handleDeleteAssociation}\r\n                                        className=\"compartmentIcon margin_l30\"\r\n                                    >\r\n                                        <div>\r\n                                            <Icon root=\"common\" name=\"delete\" size=\"medium\" />\r\n                                        </div>\r\n                                        <div className=\"margin_l10\">\r\n                                            <h5 className=\"font14\">{t(\"TrailerInfo_Delete\")}</h5>\r\n                                        </div>\r\n                                    </div>\r\n                    </div>\r\n                  \r\n                            </div>\r\n                        <div className=\"row marginRightZero tableScroll\">\r\n                            <div className=\"col-12 detailsTable\">\r\n                                <DataTable\r\n                                    data={modExchangeAgreementItems}\r\n                                    selectionMode=\"multiple\"\r\n                                    selection={selectedAssociations}\r\n                                    onSelectionChange={handleAssociationSelectionChange}\r\n                                    scrollable={true}\r\n                                    scrollHeight=\"320px\"\r\n                                    // expandedRows={expandedRows}\r\n                                    // rowExpansionTemplate={rowExpansionAtributeTemplate}\r\n                                >\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight colminWidth\"\r\n                                        key=\"BaseProductCode\"\r\n                                        field=\"BaseProductCode\"\r\n                                        header={handleIsRequiredCompartmentCell(t(\"ExchangeAgreementDetailsItem_Product\"))}\r\n                                        editFieldType=\"text\"\r\n                                        editable={true}\r\n                                        renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                                        customEditRenderer={(celldata) =>\r\n                                            handleCustomEditDropDown(\r\n                                                celldata,\r\n                                                listOptions.baseProductOptions\r\n                                            )\r\n                                        }\r\n                                        \r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight colminWidth\"\r\n                                        key=\"StartDate\"\r\n                                        field=\"StartDate\"\r\n                                        header={handleIsRequiredCompartmentCell(t(\"ExchangeAgreementDetailsItem_StartDate\"))}\r\n                                        editable={true}\r\n                                        editFieldType=\"text\"\r\n                                        renderer={(cellData) => dateDisplayValues(cellData)}\r\n                                        customEditRenderer={(cellData) => handleCustomEditDateSelect(cellData)}\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight colminWidth\"\r\n                                        key=\"EndDate\"\r\n                                        field=\"EndDate\"\r\n                                        header={handleIsRequiredCompartmentCell(t(\"ExchangeAgreementDetailsItem_EndDate\"))}\r\n                                        editFieldType=\"text\"\r\n                                        editable={true}\r\n                                        renderer={(cellData) => dateDisplayValues(cellData)}\r\n                                        customEditRenderer={(cellData) => handleCustomEditDateSelect(cellData)}\r\n                                    ></DataTable.Column>\r\n                                    \r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight colminWidth\"\r\n                                        key=\"Quantity\"\r\n                                        field=\"Quantity\"\r\n                                        header={t(\"ExchangeAgreementDetailsItem_Qty\")}\r\n                                        editable={true}\r\n                                        editFieldType=\"text\"\r\n                                        renderer={(cellData) => decimalDisplayValues(cellData)}\r\n                                        customEditRenderer={handleCustomEditTextBox}\r\n                                    ></DataTable.Column>\r\n                                     <DataTable.Column\r\n                                        className=\"compColHeight colminWidth\"\r\n                                        key=\"AcceptQuantity\"\r\n                                        field=\"AcceptQuantity\"\r\n                                        header={t(\"ExchangeAgreementDetailsItem_AcceptQty\")}\r\n                                        editable={false}\r\n                                    ></DataTable.Column>\r\n                                     <DataTable.Column\r\n                                        className=\"compColHeight colminWidth\"\r\n                                        key=\"QuantityUOM\"\r\n                                        field=\"QuantityUOM\"\r\n                                        header={handleIsRequiredCompartmentCell(t(\"ExchangeAgreementDetailsItem_UOM\"))}\r\n                                        //rowHeader={true}\r\n                                        editable={true}\r\n                                        editFieldType=\"text\"\r\n                                        customEditRenderer={handleDropdownEdit}\r\n                                    ></DataTable.Column>\r\n                                     <DataTable.Column\r\n                                        className=\"compColHeight colminWidth\"\r\n                                        key=\"ConsumedQuantity\"\r\n                                        field=\"ConsumedQuantity\"\r\n                                        header={t(\"ExchangeAgreementDetailsItem_ConsumedQty\")}\r\n                                        editable={false}\r\n                                    ></DataTable.Column>\r\n                                     <DataTable.Column\r\n                                        className=\"compColHeight colminWidth\"\r\n                                        key=\"RemainingQuantity\"\r\n                                        field=\"RemainingQuantity\"\r\n                                        header={t(\"ExchangeAgreementDetailsItem_RemainQty\")}\r\n                                        editable={false}\r\n                                    ></DataTable.Column>\r\n                                </DataTable>\r\n                            </div>\r\n                        </div>\r\n               \r\n            </div>\r\n            <div className=\"row\">\r\n                <div\r\n                    className=\"col col-md-8 col-lg-9 col col-xl-12\"\r\n                    style={{ textAlign: \"right\" }}\r\n                >\r\n                            <Button\r\n                                content={t(\"SharholderAgreement_ViewAuditTrail\")}\r\n                                onClick={handleViewAuditTrail}\r\n                                disabled={exchangeAgreement.RequestCode === \"\"}\r\n                            ></Button>\r\n                        \r\n                    <Button\r\n                        content={t(\"ExchangeAgreementDetails_ViewExagShipmentDetails\")}\r\n                        onClick={GetExchangeAgreementShipmentItemDetails}\r\n                        disabled={exchangeAgreement.RequestCode === \"\"}\r\n                    ></Button>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        onClick={() => UpdateExchangeAgreementStatus(\"FORCECLOSED\")}\r\n                        disabled={!btnFroceClose}\r\n                        content={t(\"ShipmentOrder_BtnForceClose\")}\r\n                    ></Button>\r\n                    <Button\r\n                        content={t(\"ExchangeAgreementDetails_btnCreateAgreement\")}\r\n                        onClick={() => UpdateExchangeAgreementStatus(\"CREATEEA\") }\r\n                        disabled={!btnCreatePTAgreement}\r\n                    ></Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport {\r\n    Select,\r\n    Icon,\r\n    Input,\r\n    DatePicker,\r\n    Tab,\r\n    Checkbox,\r\n    Accordion,\r\n    Button,\r\n    Modal,\r\n} from \"@scuf/common\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { constant, truncate } from \"lodash\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nimport { getCurrentDateFormat, handleIsRequiredCompartmentCell } from \"../../../JS/functionalUtilities\";\r\nProductTransferAgreementDetails.propTypes = {\r\n    selectedShareholder: PropTypes.array.isRequired,\r\n    isBonded: PropTypes.bool.isRequired,\r\n    modExchangeAgrement: PropTypes.object.isRequired,\r\n    exchangeAgreement:PropTypes.object.isRequired,\r\n    modProductAgreementItem: PropTypes.array.isRequired,\r\n    listOptions: PropTypes.shape({\r\n        shareholders: PropTypes.array,\r\n        baseProductOptions: PropTypes.array,\r\n        UOMOptions: PropTypes.array,\r\n        tankCodeOptions: PropTypes.array,\r\n        currentShareholderAgreementStatusList:PropTypes.array\r\n    }).isRequired,\r\n    handleViewAuditTrail: PropTypes.func.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    UpdateProductTransferAgreementStatus: PropTypes.func.isRequired,\r\n    handleCreateAgrement:PropTypes.func.isRequired,\r\n selectedAttributeList: PropTypes.array.isRequired,\r\n    attributeValidationErrors: PropTypes.array.isRequired,\r\n    handleCellAttrinuteDataEdit: PropTypes.func.isRequired,\r\n    isEnterpriseNode: PropTypes.bool.isRequired,\r\n    btnCreatePTAgreement: PropTypes.bool.isRequired,\r\n    btnFroceClose: PropTypes.bool.isRequired,\r\n    btncompltAgreement: PropTypes.bool.isRequired,\r\n    tankShareholderDetails: PropTypes.object.isRequired,\r\n    handleAssociationSelectionChange: PropTypes.func.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    selectedAssociations: PropTypes.array.isRequired,\r\n    isfieldEnable: PropTypes.bool.isRequired,\r\n}\r\nProductTransferAgreementDetails.defaultProps = {\r\n    listOptions: {\r\n        shareholders: [],\r\n        UOMOptions: [],\r\n        tankCodeOptions: [],\r\n        currentShareholderAgreementStatusList:[]\r\n\r\n    },\r\n    isEnterpriseNode: false\r\n}\r\nexport default function ProductTransferAgreementDetails({\r\n    isBonded,\r\n    modProductAgreementItem,\r\n    modExchangeAgrement,\r\n    onFieldChange,\r\n    listOptions,\r\n    validationErrors,\r\n    handleViewAuditTrail,\r\n    exchangeAgreement,\r\n    UpdateProductTransferAgreementStatus,\r\n    selectedAttributeList,\r\n    attributeValidationErrors,\r\n    handleCellAttrinuteDataEdit,\r\n    isEnterpriseNode,\r\n    selectedShareholder,\r\n    btnCreatePTAgreement,\r\n    tankShareholderDetails,\r\n    handleAssociationSelectionChange,\r\n    selectedAssociations,\r\n    btnFroceClose,\r\n    btncompltAgreement,\r\n    isfieldEnable,\r\n    handleCreateAgrement\r\n }) {\r\n    const [t] = useTranslation();\r\n    console.log(tankShareholderDetails)\r\n    const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n        let attributeValidation = [];\r\n        attributeValidation = attributeValidationErrors.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n        })\r\n        return attributeValidation.attributeValidationErrors;\r\n    }\r\n    return (\r\n    <div className=\"detailsContainer\">\r\n        <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <Input\r\n                    fluid\r\n                        label={t(\"ProductTransferAgreementDetails_RequestCode\")}\r\n                        value={modExchangeAgrement.RequestCode !== \"\" ? modExchangeAgrement.RequestCode : \"\"}\r\n                        indicator=\"required\"\r\n                        onChange={(data) => onFieldChange(\"RequestCode\", data)}\r\n                        disabled={exchangeAgreement.RequestCode !== \"\"}\r\n                        reserveSpace={false}\r\n                        error={t(validationErrors.RequestCode)}\r\n                />\r\n                </div>\r\n                {modExchangeAgrement.LenderShareholderCode === selectedShareholder || modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.ACCEPTED || modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.OFFER_REJECTED? <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                        fluid\r\n                        value={modExchangeAgrement.RequestStatus == null ? \"\" : modExchangeAgrement.RequestStatus}\r\n                        placeholder={t(\"FinishedProductInfo_Select\")}\r\n                        label={t(\"ProductTransferAgreementDetails_Status\")}\r\n                        options={listOptions.currentShareholderAgreementStatusList}\r\n                        onChange={(data) => onFieldChange(\"RequestStatus\", data)}\r\n                        indicator=\"required\"   >\r\n                        </Select>\r\n                </div>:<div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        // placeholder={t(\"FinishedProductInfo_Select\")}\r\n                        value={modExchangeAgrement.RequestStatus == null ? \"\" : modExchangeAgrement.RequestStatus}\r\n                        label={t(\"ProductTransferAgreementDetails_Status\")}\r\n                        disabled={true}\r\n                    />\r\n                </div>}\r\n           \r\n                \r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        // placeholder={t(\"FinishedProductInfo_Select\")}\r\n                        value={modExchangeAgrement.RequestType === \"\" ? Constants.AgrementType.PRODUCT_TRANSFER_AGREEMENT : modExchangeAgrement.RequestType}\r\n                        label={t(\"ProductTransferAgreementDetails_RequestType\")}\r\n                        disabled={true}\r\n                        \r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                        fluid\r\n                        value={modExchangeAgrement.LenderShareholderCode}\r\n                        placeholder={t(\"FinishedProductInfo_Select\")}\r\n                        label={t(\"ProductTransferAgreementDetails_PreferredShareHolder\")}\r\n                        options={listOptions.shareholders}\r\n                        onChange={(data) => onFieldChange(\"LenderShareholderCode\", data)}\r\n                        indicator=\"required\" \r\n                        disabled={exchangeAgreement.RequestCode !== \"\"}\r\n\r\n\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                        fluid\r\n                        value={modProductAgreementItem.RequestorTankCode}\r\n                        placeholder={t(\"FinishedProductInfo_Select\")}\r\n                        label={t(\"ProductTransferAgreementDetails_RequestorTankcode\")}\r\n                        options={listOptions.tankCodeOptions}\r\n                        onChange={(data) => onFieldChange(\"RequestorTankCode\", data)}\r\n                        indicator=\"required\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={modProductAgreementItem.TankBaseProductCode}\r\n                        label={t(\"ProductTransferAgreementDetails_ProductCode\")}\r\n                        reserveSpace={false}\r\n                        disabled={true}\r\n\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={modProductAgreementItem.RequestedQuantity}\r\n                        label={t(\"ProductTransferAgreementDetails_RequestedQuantity\")}\r\n                        indicator=\"required\"\r\n                        reserveSpace={false}\r\n                        onChange={(data) => onFieldChange(\"RequestedQuantity\", data)}\r\n\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Select\r\n                        fluid\r\n                        value={modProductAgreementItem.QuantityUOM}\r\n                        placeholder={t(\"FinishedProductInfo_Select\")}\r\n                        label={t(\"ProductTransferAgreementDetails_ProductQuantityUOM\")}\r\n                        options={listOptions.UOMOptions}\r\n                        onChange={(data) => onFieldChange(\"QuantityUOM\", data)}\r\n                        indicator=\"required\"\r\n                        error={t(validationErrors.QuantityUOM)}\r\n\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4 planneddate\">\r\n                    <DatePicker\r\n                        fluid\r\n                        value={new Date(modProductAgreementItem.RequestedCutOff_Date)}\r\n                        initialWidth=\"160px\"\r\n                        label={t(\"ProductTransferAgreementDetails_Cut-offDate\")}\r\n                        displayFormat={getCurrentDateFormat()}\r\n                        type=\"date\"\r\n                        showYearSelector=\"true\"\r\n                        indicator=\"required\"\r\n                        // minuteStep={1}\r\n                        onChange={(data) => onFieldChange(\"RequestedCutOff_Date\", data)}\r\n                        reserveSpace={false}\r\n\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={modExchangeAgrement.Remarks}\r\n                        label={t(\"ExchangeAgreementDetails_Comments\")}\r\n                        reserveSpace={false}\r\n                        onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                        indicator={exchangeAgreement.RequestCode !== \"\" ? \"required\" : \"\"}\r\n                        error={t(validationErrors.Remarks)}\r\n\r\n                    />\r\n                </div>\r\n                {isBonded ? (\r\n                    <div className=\"col-12 col-md-6 col-lg-4 ddlSelectAll\">\r\n                        <Checkbox\r\n                            label={t(\"TankInfo_Bonded\")}\r\n                        checked={modExchangeAgrement.IsBonded ? true : false}\r\n                        onChange={(data) => onFieldChange(\"IsBonded\", data)}\r\n                        />\r\n                    </div>\r\n                ) : (\"\")}\r\n                {modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.ACCEPTED || \r\n                    modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.COMPLETED || modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.REQUEST_REJECTED && modExchangeAgrement.LenderShareholderCode === selectedShareholder?\r\n                      <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                            value={modProductAgreementItem.AcceptedQuantity}\r\n                            label={t(\"ProductTransferAgreementDetails_AcceptedQuantity\")}\r\n                        indicator=\"required\"\r\n                        reserveSpace={false}\r\n                            onChange={(data) => onFieldChange(\"AcceptedQuantity\", data)}\r\n                            error={t(validationErrors.AcceptedQuantity)}\r\n\r\n\r\n                    />\r\n                </div>\r\n                    : \"\"}\r\n                {modExchangeAgrement.LenderShareholderCode === selectedShareholder&&modProductAgreementItem.AcceptedQuantity !== 0 && modProductAgreementItem.AcceptedQuantity !== null && \r\n                    modProductAgreementItem.AcceptedQuantity !== undefined || modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.COMPLETED ?\r\n                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                        <Input\r\n                            fluid\r\n                            value={modProductAgreementItem.LenderTankCode}\r\n                            label={t(\"ProductTransferAgreementDetails_LenderTankcode\")}\r\n                            indicator=\"required\"\r\n                            reserveSpace={false}\r\n                            disabled={true}\r\n                        />\r\n                    </div> : \"\"}\r\n                {isfieldEnable?\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={modProductAgreementItem.ReceivedGrossQty}\r\n                        label={t(\"ProductTransferAgreementDetails_ReceivedGrossQuantity\")}\r\n                        indicator=\"required\"\r\n                        reserveSpace={false}\r\n                        onChange={(data) => onFieldChange(\"ReceivedGrossQty\", data)}\r\n                        disabled={modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.COMPLETED ? true : false}\r\n                        error={t(validationErrors.ReceivedGrossQty)}\r\n\r\n                    />\r\n                </div>:\"\"}\r\n                 {isfieldEnable?\r\n                <div className=\"col-12 col-md-6 col-lg-4\">\r\n                    <Input\r\n                        fluid\r\n                        value={modProductAgreementItem.ReceivedNetQty}\r\n                        label={t(\"ProductTransferAgreementDetails_ReceivedNetQuantity\")}\r\n                        indicator=\"required\"\r\n                        reserveSpace={false}\r\n                        onChange={(data) => onFieldChange(\"ReceivedNetQty\", data)}\r\n                        disabled={modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.COMPLETED?true:false}\r\n                        error={t(validationErrors.ReceivedNetQty)}\r\n\r\n                    />\r\n                </div>:\"\"}\r\n                     {isfieldEnable?\r\n                    <div className=\"col-12 col-md-6 col-lg-4 planneddate\">\r\n                        <DatePicker\r\n                            fluid\r\n                            value={new Date(modProductAgreementItem.ReceivedDate)}\r\n                            initialWidth=\"160px\"\r\n                            label={t(\"ProductTransferAgreementDetails_CompletedDate\")}\r\n                            displayFormat={getCurrentDateFormat()}\r\n                            type=\"date\"\r\n                            showYearSelector=\"true\"\r\n                            indicator=\"required\"\r\n                            // minuteStep={1}\r\n                            onChange={(data) => onFieldChange(\"ReceivedDate\", data)}\r\n                            reserveSpace={false}\r\n                            disabled={modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.COMPLETED ? true : false}\r\n                            error={t(validationErrors.ReceivedDate)}\r\n\r\n                        />\r\n                    </div>: \"\"}\r\n                {modExchangeAgrement.LenderShareholderCode === selectedShareholder && modExchangeAgrement.RequestStatus===\"ACCEPTED\"?\r\n                <div className=\"row col-12 detailsTable\">\r\n                        <h5>{t(\"ProductTransferAgreementDetails_TankShDetails\")}</h5>\r\n                        <DataTable\r\n                            data={tankShareholderDetails}\r\n                            selectionMode=\"multiple\"\r\n                            onSelectionChange={handleAssociationSelectionChange}\r\n                            selection={selectedAssociations}\r\n                            scrollable={true}\r\n                            scrollHeight=\"320px\"\r\n                        >\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"TankCode\"\r\n                            field=\"TankCode\"\r\n                            header={t(\"AtgConfigure_TankCode\")}\r\n                            initialWidth='120px'\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"CalculatedGrossVolume\"\r\n                            field=\"CalculatedGrossVolume\"\r\n                            header={t(\"TankShareholderAssn_CalculatedGrossQuantity\")}\r\n\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"CalculatedNetVolume\"\r\n                            field=\"CalculatedNetVolume\"\r\n                            header={t(\"TankShareholderAssn_CalculatedNetQuantity\")}\r\n\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"VolumeUOM\"\r\n                            field=\"VolumeUOM\"\r\n                            header={t(\"ViewShipmentStatus_QuantityUOM\")}\r\n                            initialWidth='80px'\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"IsBonded\"\r\n                            field=\"IsBonded\"\r\n                            header={t(\"ViewShipmentStatus_ShipmentBond\")}\r\n\r\n                        ></DataTable.Column>\r\n                        \r\n                        \r\n                        </DataTable>\r\n                    </div> : \"\"}\r\n                {\r\n                    selectedAttributeList.length > 0 ?\r\n                        selectedAttributeList.map((attribute) =>\r\n                            <ErrorBoundary>\r\n                                <Accordion >\r\n                                    <Accordion.Content\r\n                                        className=\"attributeAccordian\"\r\n                                        title={isEnterpriseNode ? (attribute.TerminalCode + ' - ' + t(\"Attributes_Header\")) : (t(\"Attributes_Header\"))}\r\n                                    >\r\n                                        <AttributeDetails\r\n                                            selectedAttributeList={attribute.attributeMetaDataList}\r\n                                            handleCellDataEdit={handleCellAttrinuteDataEdit}\r\n                                            attributeValidationErrors={handleValidationErrorFilter(attributeValidationErrors, attribute.TerminalCode)}\r\n                                        ></AttributeDetails>\r\n                                    </Accordion.Content>\r\n                                </Accordion>\r\n                            </ErrorBoundary>\r\n                        ) : null\r\n                }\r\n            </div>\r\n            \r\n            <div className=\"row\">\r\n                <div\r\n                    className=\"col col-md-8 col-lg-9 col col-xl-12\"\r\n                    style={{ textAlign: \"right\" }}\r\n                >\r\n                    <Button\r\n                        content={t(\"SharholderAgreement_ViewAuditTrail\")}\r\n                        onClick={handleViewAuditTrail}\r\n                        disabled={exchangeAgreement.RequestCode === \"\"}\r\n\r\n\r\n                    ></Button>\r\n                    <Button\r\n                        content={t(\"ProductTransferAgreementDetails_btnCompletePTA\")}\r\n                        disabled={!btncompltAgreement}\r\n                        onClick={() => UpdateProductTransferAgreementStatus(modExchangeAgrement,\"COMPLETEPTA\")}\r\n                    ></Button>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        onClick={() => handleCreateAgrement(\"CREATEPTA\")}\r\n                        // disabled={exchangeAgreement.RequestCode === \"\" || exchangeAgreement.RequestStatus === \"FORCE_CLOSED\" || modExchangeAgrement.RequestStatus !==\"ACCEPTED\"&&modExchangeAgrement.LenderShareholderCode!==selectedShareholder}\r\n                        disabled={!btnCreatePTAgreement}\r\n                        content={t(\"ExchangeAgreementDetails_btnCreateAgreement\")}\r\n                    ></Button>\r\n                    <Button\r\n                        content={t(\"ExchangeAgreementDetails_btnForceClose\")}\r\n                        disabled={!btnFroceClose}\r\n                        onClick={() => UpdateProductTransferAgreementStatus(modExchangeAgrement,\"FORCECLOSED\")}\r\n                    ></Button>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            );\r\n}","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Button, Modal, Icon } from \"@scuf/common\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nShareholderAgreementViewAuditTrailDetails.propTypes = {\r\n    handleBack: PropTypes.func.isRequired,\r\n    modViewAuditTrail: PropTypes.array.isRequired,\r\n    RequestCode:PropTypes.string\r\n}\r\nexport function ShareholderAgreementViewAuditTrailDetails({ \r\n    handleBack,\r\n    modViewAuditTrail,\r\n    RequestCode\r\n})\r\n\r\n{\r\n    const [modelOpen, setModelOpen] = useState(false);\r\n    function displayTMModalforPrintConfirm() {\r\n        return (\r\n            <TranslationConsumer>\r\n                {(t) => (\r\n                    <Modal open={modelOpen} className=\"marineModalPrint\">\r\n                        <Modal.Content>\r\n                            <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                                <div className=\"col col-lg-8\">\r\n                                    <h3>\r\n                                        {t(\"ViewEAAuditTrail_ViewAuditTrailForEA\") +\r\n                                            \" : \" +\r\n                                            RequestCode}\r\n                                    </h3>\r\n                                </div>\r\n                                <div className=\"col col-lg-4\" style={{ textAlign: \"right\" }}>\r\n                                    <div\r\n                                        onClick={() => {\r\n                                            setModelOpen(false);\r\n                                        }}\r\n                                    >\r\n                                        <Icon root=\"common\" name=\"close\" />\r\n                                    </div>\r\n                                   \r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 detailsTable\">\r\n                                <DataTable data={modViewAuditTrail}>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"RequestCode\"\r\n                                        field=\"RequestCode\"\r\n                                        header={t(\"ViewEAAuditTrail_EACode\")}\r\n                                       \r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"UpdatedTime\"\r\n                                        field=\"UpdatedTime\"\r\n                                        header={t(\"ViewEAAuditTrail_UpdatedTime\")}\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"ShareholderAgreementStatus\"\r\n                                        field=\"ShareholderAgreementStatus\"\r\n                                        header={t(\"ViewEAAuditTrail_Status\")}\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"LenderShareholderCode\"\r\n                                        field=\"LenderShareholderCode\"\r\n                                        header={t(\"ViewEAAuditTrail_LenderShareholderCode\")}\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"RequestorShareholderCode\"\r\n                                        field=\"RequestorShareholderCode\"\r\n                                        header={t(\"ViewEAAuditTrail_RequestorShareholderCode\")}\r\n                                    ></DataTable.Column>\r\n                                    <DataTable.Column\r\n                                        className=\"compColHeight\"\r\n                                        key=\"LastUpdatedBy\"\r\n                                        field=\"LastUpdatedBy\"\r\n                                        header={t(\"ViewEAAuditTrail_LastUpdatedBy\")}\r\n                                    ></DataTable.Column>\r\n                                </DataTable>\r\n                            </div>\r\n                            <Modal.Footer>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    size=\"small\"\r\n                                    content={t(\"ViewEAAuditTrail_Print\")}\r\n                                    onClick={() => {\r\n                                        let el =\r\n                                            window.document.getElementById(\"printTable\").innerHTML;\r\n                                        const iframe = window.document.createElement(\"IFRAME\");\r\n                                        let doc = null;\r\n                                        window.document.body.appendChild(iframe);\r\n                                        doc = iframe.contentWindow.document;\r\n                                        const str1 = el.substring(0, el.indexOf(\"<table\") + 6);\r\n                                        const str2 = el.substring(\r\n                                            el.indexOf(\"<table\") + 6,\r\n                                            el.length\r\n                                        );\r\n                                        // const str3 =\r\n                                        //     t(\"ViewAuditTrail_ViewAuditTrailForReceipt\") +\r\n                                        //     \" : \" +\r\n                                        //     RequestCode;\r\n                                        // el = str3 + str1 + ' border=\"1\" cellspacing=\"0\"' + str2;\r\n                                        el = str1 + ' border=\"1\" cellspacing=\"1\"' + str2;\r\n\r\n                                        // el = el.replace('<tfoot class=\"p-datatable-tfoot\">', \"\");\r\n                                        // el = el.replace(\r\n                                        //     '<tr><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td><td class=\"compColHeight\"></td></tr>',\r\n                                        //     \"\"\r\n                                        // );\r\n                                        doc.write(el);\r\n                                        // console.info(el);\r\n                                        doc.close();\r\n                                        iframe.contentWindow.focus();\r\n                                        iframe.contentWindow.print();\r\n                                        setTimeout(() => {\r\n                                            window.document.body.removeChild(iframe);\r\n                                        }, 2000);\r\n                                    }}\r\n                                />\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    size=\"small\"\r\n                                    content={t(\"MarineEOD_Close\")}\r\n                                    onClick={() => {\r\n                                        setModelOpen(false);\r\n                                    }}\r\n                                />\r\n                            </Modal.Footer>\r\n                        </Modal.Content>\r\n                    </Modal>\r\n                )}\r\n            </TranslationConsumer>\r\n        );\r\n    }\r\n        return (\r\n            <div>\r\n                <TranslationConsumer>\r\n                    {(t) => (\r\n                        <div>\r\n                            <div className=\"detailsContainer\">\r\n                                <div id=\"printTable\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-12\">\r\n                                            <h3>\r\n                                                {t(\"ViewEAAuditTrail_ViewAuditTrailForEA\") +\r\n                                                    \" : \" +\r\n                                                    RequestCode}\r\n                                            </h3>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row marginRightZero tableScroll\">\r\n                                        <div className=\"col-12 detailsTable\">\r\n                                            <DataTable data={modViewAuditTrail}>\r\n                                                <DataTable.Column\r\n                                                    className=\"compColHeight\"\r\n                                                    key=\"RequestCode\"\r\n                                                    field=\"RequestCode\"\r\n                                                    header={t(\"ViewEAAuditTrail_EACode\")}\r\n                                                ></DataTable.Column>\r\n                                                <DataTable.Column\r\n                                                    className=\"compColHeight\"\r\n                                                    key=\"UpdatedTime\"\r\n                                                    field=\"UpdatedTime\"\r\n                                                    header={t(\"ViewEAAuditTrail_UpdatedTime\")}\r\n                                                ></DataTable.Column>\r\n                                                <DataTable.Column\r\n                                                    className=\"compColHeight\"\r\n                                                    key=\"ShareholderAgreementStatus\"\r\n                                                    field=\"ShareholderAgreementStatus\"\r\n                                                    header={t(\"ViewEAAuditTrail_Status\")}\r\n                                                ></DataTable.Column>\r\n                                                <DataTable.Column\r\n                                                    className=\"compColHeight\"\r\n                                                    key=\"LenderShareholderCode\"\r\n                                                    field=\"LenderShareholderCode\"\r\n                                                    header={t(\"ViewEAAuditTrail_LenderShareholderCode\")}\r\n                                                    \r\n                                                ></DataTable.Column>\r\n                                                <DataTable.Column\r\n                                                    className=\"compColHeight\"\r\n                                                    key=\"RequestorShareholderCode\"\r\n                                                    field=\"RequestorShareholderCode\"\r\n                                                    header={t(\"ViewEAAuditTrail_RequestorShareholderCode\")}\r\n                                                   \r\n                                                ></DataTable.Column>\r\n                                                <DataTable.Column\r\n                                                    className=\"compColHeight\"\r\n                                                    key=\"LastUpdatedBy\"\r\n                                                    field=\"LastUpdatedBy\"\r\n                                                    header={t(\"ViewEAAuditTrail_LastUpdatedBy\")}\r\n                                                    \r\n                                                ></DataTable.Column>\r\n                                            </DataTable>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12 col-sm-6 col-lg-8\">\r\n                                        <Button\r\n                                            className=\"backButton\"\r\n                                            onClick={handleBack}\r\n                                            content={t(\"ViewEAAuditTrail_Back\")}\r\n                                        ></Button>\r\n                                    </div>\r\n                                    <div\r\n                                        className=\"col-12 col-sm-6 col-lg-4\"\r\n                                        style={{ textAlign: \"right\" }}\r\n                                    >\r\n                                        <Button\r\n                                            className=\"printButton\"\r\n                                            onClick={() => {\r\n                                                setModelOpen(true);\r\n                                            }}\r\n                                            content={t(\"ViewAuditTrail_PrintAuditTrail\")}\r\n                                        ></Button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </TranslationConsumer>\r\n                {displayTMModalforPrintConfirm()}\r\n            </div>\r\n        );\r\n    }","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useTranslation } from \"@scuf/localization\";\r\nimport { Button, Modal, Icon } from \"@scuf/common\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nExchangeAgreementShipmentDetails.propTypes = {\r\n    handleBack: PropTypes.func.isRequired,\r\n    modEAShipmentDetails: PropTypes.array.isRequired,\r\n}\r\nexport function ExchangeAgreementShipmentDetails ({\r\n    handleBack,\r\n    modEAShipmentDetails\r\n})\r\n{\r\n    const [t] = useTranslation();\r\n    return (\r\n        <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <h3>\r\n                        {t(\"ExagShipment_HeaderText\")}\r\n                    </h3>\r\n                </div>\r\n            </div>\r\n            <div className=\"row marginRightZero tableScroll\">\r\n                <h5>{t(\"ExagShipment_ExAgDetails\")}</h5>\r\n                <div className=\"detailsTable loadingTable\">\r\n                    <DataTable\r\n                        data={modEAShipmentDetails.EADetails}\r\n                        scrollable={true}\r\n                        bAutoWidth={true}\r\n                        scrollHeight=\"450px\"\r\n                        resizableColumns={true}\r\n                    >\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"trailercode \"\r\n                            field=\"trailercode\"\r\n                            initialWidth=\"125px\"\r\n                            header={t(\"ExagItem_Product\")}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"CompartmentSeqNoInVehicle\"\r\n                            field=\"CompartmentSeqNoInVehicle\"\r\n                            initialWidth=\"146px\"\r\n                            header={t(\"ExagItem_RequestQty\")}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"compartmentcode\"\r\n                            field=\"compartmentcode\"\r\n                            initialWidth=\"165px\"\r\n                            header={t(\"ExagItem_ConsumedQty\")}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"FinishedProductcode\"\r\n                            field=\"FinishedProductcode\"\r\n                            initialWidth=\"130px\"\r\n                            header={t(\"ExagItem_RemainingQty\")}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"baseProductcode\"\r\n                            field=\"baseProductcode\"\r\n                            initialWidth=\"155px\"\r\n                            header={t(\"ExagItem_UOM\")}\r\n                        ></DataTable.Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n            <div className=\"row marginRightZero tableScroll\">\r\n                <h5>{t(\"ExagShipment_ExAgShipmentDetails\")}</h5>\r\n                <div className=\"detailsTable loadingTable\">\r\n                    <DataTable\r\n                        data={modEAShipmentDetails.EALoadedShipments}\r\n                        scrollable={true}\r\n                        bAutoWidth={true}\r\n                        scrollHeight=\"450px\"\r\n                        resizableColumns={true}\r\n                    >\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"trailercode \"\r\n                            field=\"trailercode\"\r\n                            initialWidth=\"125px\"\r\n                            header={t(\"ExagShipment_TransportationType\")}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"CompartmentSeqNoInVehicle\"\r\n                            field=\"CompartmentSeqNoInVehicle\"\r\n                            initialWidth=\"146px\"\r\n                            header={t(\"ExagShipment_ShipmentCode\")}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"compartmentcode\"\r\n                            field=\"compartmentcode\"\r\n                            initialWidth=\"165px\"\r\n                            header={t(\"ExagShipment_ConsumedDate\")}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"FinishedProductcode\"\r\n                            field=\"FinishedProductcode\"\r\n                            initialWidth=\"130px\"\r\n                            header={t(\"ExagShipment_ProductCode\")}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"baseProductcode\"\r\n                            field=\"baseProductcode\"\r\n                            initialWidth=\"155px\"\r\n                            header={t(\"ExagShipment_GrossQty\")}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"Unloadingdetailstype\"\r\n                            field=\"Unloadingdetailstype\"\r\n                            initialWidth=\"190px\"\r\n                            header={t(\"ExagShipment_NetQty\")}\r\n                        ></DataTable.Column>\r\n                        <DataTable.Column\r\n                            className=\"compColHeight\"\r\n                            key=\"TankCode\"\r\n                            field=\"TankCode\"\r\n                            initialWidth=\"105px\"\r\n                            header={t(\"ExagShipment_UOM\")}\r\n                        ></DataTable.Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n            <div className=\"col col-lg-8\">\r\n                <Button\r\n                    className=\"backButton\"\r\n                    onClick={handleBack}\r\n                    content={t(\"Back\")}\r\n                ></Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport {ExchangeAgreementDetails} from \"../../UIBase/Details/ExchangeAgreementDetails\"\r\nimport ProductTransferAgreementDetails from \"../../UIBase/Details/ProductTransferAgreementDetails\"\r\nimport lodash from \"lodash\";\r\nimport { functionGroups, fnShareholderAgreement, fnCustomerAgreement } from \"../../../JS/FunctionGroups\";\r\nimport * as Constants from \"./../../../JS/Constants\";\r\nimport { exchangeAgreementValidationDef } from \"../../../JS/ValidationDef\";\r\nimport { ExchangeAgreementItemsPlanValidation } from \"../../../JS/DetailsTableValidationDef\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { toast } from \"react-toastify\";\r\nimport { emptyShareHolderAgreement } from \"../../../JS/DefaultEntities\";\r\nimport { ShareholderAgreementViewAuditTrailDetails } from \"../../UIBase/Details/ShareholderAgreementViewAuditTrailsDetails\"\r\nimport { Modal, Button, Select, Input, Checkbox } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { ExchangeAgreementShipmentDetails } from \"../../UIBase/Details/ExchangeAgreementShipmentDetails\"\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nimport {\r\n    shareholderAgrementEnity\r\n} from \"../../../JS/AttributeEntity\";\r\nclass ShareholderAgreementDetailsComposite extends Component {\r\n    state = {\r\n        isReadyToRender: true,\r\n        validationErrors: Utilities.getInitialValidationErrors(\r\n            exchangeAgreementValidationDef\r\n        ),\r\n        modExchangeAgrement: {},\r\n        saveEnabled: false,\r\n        exchangeAgreement: { ...emptyShareHolderAgreement },\r\n        modExchangeAgreementItems: [],\r\n        modProductAgreementItem:{},\r\n        selectedAssociations: [],\r\n        baseProductOptions: [],\r\n        UOMOptions: [],\r\n        isViewAuditTrail: false,\r\n        modViewAuditTrail: [],\r\n        auditTrailList: [],\r\n        modEAShipmentDetails: [],\r\n        isViewShipmentDetails: false,\r\n        tankOptions: [],\r\n        isBonded: false,\r\n        isCloseReceipt: true,\r\n        attributeMetaDataList: [],\r\n        attributeValidationErrors: [],\r\n        selectedAttributeList: [],\r\n        tankShareholderDetails: [],\r\n        shareholderStatus: [],\r\n        btnCreatePTAgreement: false,\r\n        btnFroceClose: false,\r\n        btncompltAgreement: false,\r\n        isfieldEnable: false,\r\n        currentShareholderAgreementStatusList : [],\r\n        showAuthenticationLayout: false,\r\n        tempShareholderAgreementInfo: {},\r\n    }\r\n    componentDidMount() {\r\n        try {\r\n            Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n            this.getAttributes(this.props.selectedRow);\r\n            this.IsBonded();\r\n            this.getTank(\"\")\r\n            this.getBaseProducts();\r\n            this.getUOMList();\r\n            this.GetShareholderAgreementStatus();\r\n        } catch (error) {\r\n            console.log(\r\n                \"ShareholderAgreementDetailsComposite:Error occured on componentDidMount\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        try {\r\n            if (\r\n                nextProps.selectedRow.Common_Code === undefined &&\r\n                this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo && this.props.selectedRow.ShareholderAgreement_RequestType && this.props.agreementType === Constants.AgrementType.EXCHANGE_AGREEMENT\r\n            ) {\r\n                this.GetExchangeAgreement(nextProps.selectedRow);\r\n                let validationErrors = { ...this.state.validationErrors };\r\n                Object.keys(validationErrors).forEach((key) => {\r\n                    validationErrors[key] = \"\";\r\n                });\r\n                this.setState({ validationErrors });\r\n            } else \r\n                this.GetProductTransferAgreement(nextProps.selectedRow)\r\n        } catch (error) {\r\n            console.log(\r\n                \"ShareholderAgreementDetailsComposite:Error occured on componentWillReceiveProps\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    getAttributes(selectedRow) {\r\n        \r\n        try {\r\n            axios(\r\n                RestAPIs.GetAttributesMetaData,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    [shareholderAgrementEnity],\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                \r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState(\r\n                        {\r\n                            attributeMetaDataList: lodash.cloneDeep(\r\n                                result.EntityResult\r\n                            ),\r\n                            attributeValidationErrors:\r\n                                Utilities.getAttributeInitialValidationErrors(\r\n                                    result.EntityResult.SHAREHOLDERAGREEMENT\r\n                                ),\r\n                            \r\n                        },\r\n                        () => {\r\n                            if (this.props.selectedRow.ShareholderAgreement_RequestType && this.props.agreementType === Constants.AgrementType.EXCHANGE_AGREEMENT) {\r\n                                this.GetExchangeAgreement(selectedRow);\r\n                            }\r\n                            else {\r\n                                this.GetProductTransferAgreement(selectedRow);\r\n                            }\r\n                        }\r\n                    );\r\n                } else {\r\n                    console.log(\"Failed to get Attributes\");\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(\"Error while getting Attributes:\", error);\r\n        }\r\n    }\r\n    localNodeAttribute() {\r\n        \r\n        try {\r\n            var attributeMetaDataList = lodash.cloneDeep(\r\n                this.state.attributeMetaDataList\r\n            );\r\n            if (Array.isArray(attributeMetaDataList.SHAREHOLDERAGREEMENT) && attributeMetaDataList.SHAREHOLDERAGREEMENT.length > 0) {\r\n                this.terminalSelectionChange([\r\n                    attributeMetaDataList.SHAREHOLDERAGREEMENT[0].TerminalCode,\r\n                ]);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(\r\n                \"ShareholderAgrementDetailsComposite:Error occured on localNodeAttribute\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n\r\n    terminalSelectionChange(selectedTerminals) {\r\n        try {\r\n            if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n                let attributesTerminalsList = [];\r\n                var attributeMetaDataList = [];\r\n                var selectedAttributeList = [];\r\n                attributeMetaDataList = lodash.cloneDeep(\r\n                    this.state.attributeMetaDataList\r\n                );\r\n                selectedAttributeList = lodash.cloneDeep(\r\n                    this.state.selectedAttributeList\r\n                );\r\n                const attributeValidationErrors = lodash.cloneDeep(\r\n                    this.state.attributeValidationErrors\r\n                );\r\n                var modExchangeAgrement = lodash.cloneDeep(this.state.modExchangeAgrement);\r\n\r\n                selectedTerminals.forEach((terminal) => {\r\n                    var existitem = selectedAttributeList.find((selectedAttribute) => {\r\n                        return selectedAttribute.TerminalCode === terminal;\r\n                    });\r\n\r\n                    if (existitem === undefined) {\r\n                        attributeMetaDataList.SHAREHOLDERAGREEMENT.forEach(function (\r\n                            attributeMetaData\r\n                        ) {\r\n                            if (attributeMetaData.TerminalCode === terminal) {\r\n                                var Attributevalue = modExchangeAgrement.Attributes.find(\r\n                                    (ShareholderAttribute) => {\r\n                                        return ShareholderAttribute.TerminalCode === terminal;\r\n                                    }\r\n                                );\r\n                                if (Attributevalue !== undefined) {\r\n                                    attributeMetaData.attributeMetaDataList.forEach(function (\r\n                                        attributeMetaData\r\n                                    ) {\r\n                                        var valueAttribute = Attributevalue.ListOfAttributeData.find(\r\n                                            (x) => {\r\n                                                return x.AttributeCode === attributeMetaData.Code;\r\n                                            }\r\n                                        );\r\n                                        if (valueAttribute !== undefined)\r\n                                            attributeMetaData.DefaultValue =\r\n                                                valueAttribute.AttributeValue;\r\n                                    });\r\n                                }\r\n                                attributesTerminalsList.push(attributeMetaData);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        attributesTerminalsList.push(existitem);\r\n                    }\r\n                });\r\n                selectedAttributeList = [];\r\n                selectedAttributeList = attributesTerminalsList;\r\n                selectedAttributeList = Utilities.attributesConvertoDecimal(\r\n                    selectedAttributeList\r\n                );\r\n                attributeValidationErrors.forEach((attributeValidation) => {\r\n                    var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n                        return attributeValidation.TerminalCode === selectedTerminals;\r\n                    });\r\n                    if (existTerminal === undefined) {\r\n                        Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n                            (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n                        );\r\n                    }\r\n                });\r\n                this.setState({ selectedAttributeList, attributeValidationErrors });\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"ShareholderAgreeemntDetailsComposite:Error occured on terminalSelectionChange\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    handleCellAttrinuteDataEdit = (attribute, value) => {\r\n        try {\r\n            attribute.DefaultValue = value;\r\n            this.setState({\r\n                attribute: attribute,\r\n            });\r\n            const attributeValidationErrors = lodash.cloneDeep(\r\n                this.state.attributeValidationErrors\r\n            );\r\n\r\n            attributeValidationErrors.forEach((attributeValidation) => {\r\n                if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n                    attributeValidation.attributeValidationErrors[\r\n                        attribute.Code\r\n                    ] = Utilities.valiateAttributeField(attribute, value);\r\n                }\r\n            });\r\n            this.setState({ attributeValidationErrors });\r\n        } catch (error) {\r\n            console.log(\r\n                \"ShareholderAgrementDetailsComposite:Error occured on handleCellDataEdit\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    IsBonded() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetLookUpData + \"?LookUpTypeCode=Bonding\",\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    const result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        let bonded = result.EntityResult[\"EnableBondingNon-Bonding\"];\r\n                        this.setState({\r\n                            isBonded: bonded.toUpperCase() === \"TRUE\" ? true : false,\r\n                        });\r\n                    } else {\r\n                        this.setState({\r\n                            isBonded: false,\r\n                        });\r\n                        console.log(\"Error in get IsBonded: \", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        isBonded: false,\r\n                    });\r\n                    console.log(\r\n                        \"ShareholderAgreementDetailsComposite: Error occurred on get IsBonded\",\r\n                        error\r\n                    );\r\n                });\r\n        } catch (error) {\r\n            console.log(\"error is getting isbonded\",error)\r\n        }\r\n    }\r\n    getUOMList() {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetUOMList,\r\n                Utilities.getAuthenticationObjectforGet(\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    if (result.EntityResult !== null) {\r\n                        let UOMOptions = [];\r\n                        let uomOptions = [];\r\n                        if ((Array.isArray(result.EntityResult.VOLUME)) && (Array.isArray(result.EntityResult.MASS))) {\r\n                            uomOptions = result.EntityResult.VOLUME.concat(result.EntityResult.MASS);\r\n                        }\r\n                        uomOptions.forEach((uomOptions) => {\r\n                            UOMOptions.push({\r\n                                text: uomOptions,\r\n                                value: uomOptions,\r\n                            })\r\n                        })\r\n                       \r\n                        this.setState({ UOMOptions });\r\n                    }\r\n                } else {\r\n                    console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(\"LoadingArmDetailsComposite:Error while getting GetUOMList\");\r\n        }\r\n    }\r\n    getBaseProducts() {\r\n        axios(\r\n            RestAPIs.GetAllBaseProduct + \"?TerminalCode=\" ,\r\n            Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n        )\r\n            .then((response) => {\r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    if (\r\n                        result.EntityResult !== null &&\r\n                        Array.isArray(result.EntityResult)\r\n                    ) {\r\n                        let baseProductOptions = Utilities.transferListtoOptions(\r\n                            result.EntityResult\r\n                        );\r\n                        this.setState({ baseProductOptions });\r\n                    }\r\n                } else {\r\n                    console.log(\"Error in getBaseProducts:\", result.ErrorList);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error while getting BaseProducts:\", error);\r\n            });\r\n    }\r\n    GetExchangeAgreement(ExchangeAgrementRow) {\r\n        try {\r\n            if (ExchangeAgrementRow.Common_Code === undefined) {\r\n                emptyShareHolderAgreement.StartDate = new Date();\r\n                emptyShareHolderAgreement.EndDate = new Date();\r\n                emptyShareHolderAgreement.RequestorShareholderCode=this.props.selectedShareholder\r\n                this.setState({\r\n                    exchangeAgreement: lodash.cloneDeep(emptyShareHolderAgreement),\r\n                    modExchangeAgrement: { ...emptyShareHolderAgreement },\r\n                    modExchangeAgreementItems: [],\r\n                    isReadyToRender: true,\r\n                    selectedAttributeList: [],\r\n                    saveEnabled: Utilities.isInFunction(\r\n                        this.props.userDetails.EntityResult.FunctionsList,\r\n                        functionGroups.add,\r\n                        fnShareholderAgreement\r\n                    ),\r\n                },\r\n                    () => {\r\n                        this.localNodeAttribute();\r\n                    }\r\n                );\r\n                return;\r\n            }\r\n            axios(\r\n                RestAPIs.GetExchangeAgreement +\r\n                \"?shareholderCode=\" +\r\n                this.props.selectedShareholder +\r\n                \"&exchangeAgreementCode=\" +\r\n                ExchangeAgrementRow.Common_Code,\r\n                Utilities.getAuthenticationObjectforGet(\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n            \r\n                var result = response.data;\r\n                if (result.IsSuccess === true) {\r\n                    \r\n                    if (\r\n                        result.EntityResult !== null \r\n                    ) {\r\n                        let modExchangeAgrement = result.EntityResult;\r\n                        if (modExchangeAgrement.LenderShareholderCode === this.props.selectedShareholder) {\r\n                            this.setState({ saveEnabled: false })\r\n                        }\r\n                        else {\r\n                            this.setState({\r\n                                saveEnabled: modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.ACCEPTED || modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.COMPLETED || modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.FORCE_CLOSED? false : Utilities.isInFunction(\r\n                                    this.props.userDetails.EntityResult.FunctionsList,\r\n                                    functionGroups.modify,\r\n                                    fnShareholderAgreement\r\n                                ),\r\n                            })\r\n                        }\r\n                        modExchangeAgrement.StartDate = modExchangeAgrement.StartDate === \"\" || modExchangeAgrement.StartDate === null ? new Date() :\r\n                            new Date(\r\n                                modExchangeAgrement.StartDate\r\n                            ).toLocaleDateString()\r\n                        modExchangeAgrement.EndDate = modExchangeAgrement.EndDate === \"\" || modExchangeAgrement.EndDate === null ? new Date() :\r\n                            new Date(\r\n                                modExchangeAgrement.EndDate\r\n                            ).toLocaleDateString()\r\n                        if (Array.isArray(modExchangeAgrement.ExchangeAgreementItems)) {\r\n                            for (let i = 0; i < modExchangeAgrement.ExchangeAgreementItems.length; i++) {\r\n                                modExchangeAgrement.ExchangeAgreementItems[i].StartDate =\r\n                                    new Date(\r\n                                        modExchangeAgrement.ExchangeAgreementItems[i].StartDate\r\n                                    ).toLocaleDateString()\r\n                                modExchangeAgrement.ExchangeAgreementItems[i].EndDate =\r\n                                    new Date(\r\n                                        modExchangeAgrement.ExchangeAgreementItems[i].EndDate\r\n                                    ).toLocaleDateString()\r\n                   \r\n                            }\r\n                        }\r\n                        let currentShareholderAgreementStatusList  =[]\r\n                        if (modExchangeAgrement.LenderShareholderCode === this.props.selectedShareholder) {\r\n                            let shareholderStatus = lodash.cloneDeep(this.state.shareholderStatus)\r\n                            shareholderStatus.forEach((item) => {\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.SUBMITTED ) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.SUBMITTED || item.value === Constants.ShareholderAgreementStatus.ACCEPTED\r\n                                        || item.value === Constants.ShareholderAgreementStatus.REQUEST_REJECTED\r\n                                    ) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.ACCEPTED) {\r\n                                    if ( item.value === Constants.ShareholderAgreementStatus.ACCEPTED\r\n                                    ) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.COMPLETED) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.COMPLETED) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.REQUEST_REJECTED) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.REQUEST_REJECTED) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.IN_PROGRESS || modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.SUSPENDED) {\r\n\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.IN_PROGRESS || item.value === Constants.ShareholderAgreementStatus.SUSPENDED) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.FORCE_CLOSED) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.FORCE_CLOSED) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.OFFER_REJECTED) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.OFFER_REJECTED) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.DEACTIVATED) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.DEACTIVATED) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                \r\n                            })\r\n                        }\r\n                        if (modExchangeAgrement.RequestorShareholderCode === this.props.selectedShareholder) {\r\n                            let shareholderStatus = lodash.cloneDeep(this.state.shareholderStatus)\r\n                            shareholderStatus.forEach((item) => {\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.ACCEPTED) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.ACCEPTED\r\n                                        || item.value === Constants.ShareholderAgreementStatus.OFFER_REJECTED\r\n                                    ) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.OFFER_REJECTED) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.OFFER_REJECTED\r\n                                    ) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.REQUEST_REJECTED) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.REQUEST_REJECTED) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n                        this.setState(\r\n                            {\r\n                                isReadyToRender: true,\r\n                                exchangeAgreement: lodash.cloneDeep(result.EntityResult),\r\n                                modExchangeAgrement,\r\n                                modExchangeAgreementItems: modExchangeAgrement.ExchangeAgreementItems,\r\n                                currentShareholderAgreementStatusList\r\n                            }, () => {\r\n                                this.localNodeAttribute();\r\n                                // this.GetShareholderAgreementStatus()\r\n                                this.controlerForRequestorShareholder(modExchangeAgrement)\r\n\r\n                            }\r\n                        );\r\n                    }\r\n                } else {\r\n                    this.setState({\r\n                        exchangeAgreement: lodash.cloneDeep(emptyShareHolderAgreement),\r\n                        modExchangeAgrement: {},\r\n                        isReadyToRender: true,\r\n                    });\r\n                    console.log(\"Error in getExchangeAgrement:\", result.ErrorList);\r\n                }\r\n            })\r\n                .catch((error) => {\r\n                    console.log(\"Error while getExchangeAgrement:\", error, ExchangeAgrementRow);\r\n                });\r\n        } catch (err) {\r\n            console.log(\"error while getting getexchange agreement\",err)\r\n        }\r\n    }\r\n    handleChange = (propertyName, data) => {\r\n        \r\n        try {\r\n            const modExchangeAgrement = lodash.cloneDeep(\r\n                this.state.modExchangeAgrement)\r\n            modExchangeAgrement[propertyName] = data;\r\n            const modProductAgreementItem = this.state.modProductAgreementItem;\r\n            modProductAgreementItem[propertyName] = data;\r\n            this.setState({\r\n                modExchangeAgrement, modProductAgreementItem\r\n            });\r\n           \r\n            // if (modExchangeAgrement.LenderShareholderCode == this.props.selectedShareholder) {\r\n                if (propertyName === \"RequestStatus\") {\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnShareholderAgreement\r\n                        ), })\r\n                // }\r\n            }\r\n            const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n            if (exchangeAgreementValidationDef[propertyName] !== undefined) {\r\n                validationErrors[propertyName] = Utilities.validateField(\r\n                    exchangeAgreementValidationDef[propertyName],\r\n                    data\r\n                );\r\n                this.setState({ validationErrors });\r\n            };\r\n           \r\n\r\n        }\r\n        catch (error) {\r\n            console.log(\r\n                \"ExchnageAgrementDetailsComposite:Error occured on handleChange\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    fillDetails() {\r\n        let { modExchangeAgrement,modExchangeAgreementItems,modProductAgreementItem,exchangeAgreement } = { ...this.state };\r\n        try {\r\n            // modExchangeAgrement.RequestorShareholderCode = this.props.selectedShareholder;\r\n            modExchangeAgrement.RequestType = this.props.selectedRow.ShareholderAgreement_RequestType === Constants.AgrementType.EXCHANGE_AGREEMENT || this.props.agreementType === Constants.AgrementType.EXCHANGE_AGREEMENT ? Constants.AgrementType.EXCHANGE_AGREEMENT : Constants.AgrementType.PRODUCT_TRANSFER_AGREEMENT;\r\n            if (modExchangeAgrement.RequestorShareholderCode === this.props.selectedShareholder && exchangeAgreement.RequestCode === \"\") {\r\n                modExchangeAgrement.RequestStatus = Constants.ShareholderAgreementStatus.SUBMITTED;\r\n                modExchangeAgrement.RequestorShareholderCode = this.props.selectedShareholder;\r\n                this.setState({ modExchangeAgrement })\r\n            }\r\n            else if (modExchangeAgrement.LenderShareholderCode === this.props.selectedShareholder) {\r\n                this.setState({ modExchangeAgrement })\r\n            }\r\n            else {\r\n                // modExchangeAgrement.RequestorShareholderCode = this.props.selectedShareholder;\r\n                this.setState({ modExchangeAgrement })\r\n\r\n            }\r\n            let exchangeAgrementComps = [];\r\n            if (Array.isArray(modExchangeAgreementItems)) {\r\n                modExchangeAgreementItems.forEach((item) => {\r\n                    if (!(item.BaseProductCode === null || item.BaseProductCode === \"\")\r\n                        || !(item.Quantity === null || item.Quantity === \"\")) {\r\n                        // item.QuantityUOM =\r\n                        //     modExchangeAgreementItems.QuantityUOM;\r\n                        item.Quantity =\r\n                            Utilities.convertStringtoDecimal(\r\n                                item.Quantity\r\n                            );\r\n                        item.StartDate = item.StartDate === null ?\r\n                            modExchangeAgrement.StartDate : item.StartDate\r\n                        item.EndDate = item.EndDate === null ?\r\n                            modExchangeAgrement.EndDate : item.EndDate\r\n                        exchangeAgrementComps.push(item);\r\n                    }\r\n                })\r\n            }\r\n            let productAgreementComp = {\r\n                \"QuantityUOM\": modProductAgreementItem.QuantityUOM,\r\n                \"RequestedQuantity\": modProductAgreementItem.RequestedQuantity,\r\n                \"LenderShareholderCode\": modProductAgreementItem.LenderShareholderCode,\r\n                \"AcceptedQuantity\": modProductAgreementItem.AcceptedQuantity,\r\n                \"RequestorTankCode\": modProductAgreementItem.RequestorTankCode,\r\n                \"RequestedCutOff_Date\": new Date(\r\n                    modProductAgreementItem.RequestedCutOff_Date\r\n                ).toLocaleDateString(),\r\n                \"ReceivedGrossQty\": modProductAgreementItem.ReceivedGrossQty,\r\n                \"ReceivedNetQty\": modProductAgreementItem.ReceivedNetQty,\r\n                \"ReceivedDate\": modProductAgreementItem.ReceivedDate,\r\n                \"LenderTankCode\": modProductAgreementItem.RequestorTankCode\r\n            };\r\n            modExchangeAgrement.ExchangeAgreementItems = exchangeAgrementComps;\r\n            modExchangeAgrement.ProductTransferAgreement = productAgreementComp;\r\n        } catch (error) {\r\n            console.log(\"Error in fillDetails\", error)\r\n        }\r\n        return modExchangeAgrement;\r\n    }\r\n    handleDateTextChange = (cellData, value, error) => {\r\n        \r\n        try {\r\n            // var validationErrors = { ...this.state.validationErrors };\r\n            var modExchangeAgreementItems = lodash.cloneDeep(this.state.modExchangeAgreementItems);\r\n            // validationErrors[propertyName] = error;\r\n            let index = modExchangeAgreementItems.findIndex((item) => {\r\n                return item.sequenceNo === cellData.rowData.sequenceNo\r\n            }\r\n            )\r\n            \r\n            if (index >= 0) {\r\n                if (value === \"\")\r\n                    modExchangeAgreementItems[index][cellData.field] = null;\r\n                else\r\n                    modExchangeAgreementItems[index][cellData.field] = value;\r\n                this.setState({ modExchangeAgreementItems });\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.log(\r\n                \"Error in DateTextChange : Error occured on handleDateTextChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    handleAssociationSelectionChange = (e) => {\r\n        \r\n        try {\r\n            this.setState({ selectedAssociations: e });\r\n        } catch (error) {\r\n            console.log(\"error in handlAssociationselectionchange\", error)\r\n        }\r\n    };\r\n    handleCellDataEdit = (newVal, cellData) => {\r\n        \r\n        try {\r\n            let modExchangeAgrement = lodash.cloneDeep(this.state.modExchangeAgrement);\r\n            let modExchangeAgreementItems=lodash.cloneDeep(this.state.modExchangeAgreementItems)\r\n            modExchangeAgreementItems[cellData.rowIndex][\r\n                cellData.field\r\n            ] = newVal;\r\n            this.setState({ modExchangeAgrement, modExchangeAgreementItems });\r\n        } catch (error) {\r\n            console.log(\"Error in handleCellDataEdit\", error)\r\n        }\r\n    };\r\n    handleAddAssociation = () => {\r\n        \r\n        try {\r\n            if (!this.props.userDetails.EntityResult.IsArchived) {\r\n                try {\r\n                    let modExchangeAgreementItems = lodash.cloneDeep(\r\n                        this.state.modExchangeAgreementItems\r\n                    );\r\n                    let newComp = {\r\n                        BaseProductCode: \"\",\r\n                        Quantity: 0,\r\n                        QuantityUOM: \"\",\r\n                        StartDate: null,\r\n                        EndDate: null,\r\n                        AcceptQuantity: null,\r\n                        RemainingQuantity: null,\r\n                        ConsumedQuantity:null,\r\n                    };\r\n                    modExchangeAgreementItems.push(newComp);\r\n                    this.setState({\r\n                        modExchangeAgreementItems,\r\n                        selectedAssociations: [],\r\n                    });\r\n                } catch (error) {\r\n                    console.log(\r\n                        \"ExchnageAgrementDetailsComposite:Error occured on handleAddAssociation\",\r\n                        error\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(\"ExchnageAgrementDetailsComposite: Error occured on handleAddAssociation\",\r\n                error)\r\n        }\r\n    };\r\n\r\n    handleDeleteAssociation = () => {\r\n        try {\r\n            if (!this.props.userDetails.EntityResult.IsArchived) {\r\n                try {\r\n                    if (\r\n                        this.state.selectedAssociations != null &&\r\n                        this.state.selectedAssociations.length > 0\r\n                    ) {\r\n                        if (\r\n                            this.state.modExchangeAgreementItems.length > 0\r\n                        ) {\r\n                            let modExchangeAgreementItems = lodash.cloneDeep(\r\n                                this.state.modExchangeAgreementItems\r\n                            );\r\n\r\n                            this.state.selectedAssociations.forEach((obj, index) => {\r\n                                modExchangeAgreementItems =\r\n                                    modExchangeAgreementItems.filter(\r\n                                        (com, cindex) => {\r\n                                            return com.BaseProductCode !== obj.BaseProductCode;\r\n                                        }\r\n                                    );\r\n                            });\r\n\r\n                            this.setState({ modExchangeAgreementItems });\r\n                        }\r\n                    }\r\n\r\n                    this.setState({ selectedAssociations: [] });\r\n                } catch (error) {\r\n                    console.log(\r\n                        \"ExchnageAgrementDetailsComposite:Error occured on handleDeleteAssociation\",\r\n                        error\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(\"error in handle Delete Association\", error)\r\n        }\r\n    };\r\n    validateSave(modExchangeAgrement, attributeList) {\r\n        let modProductAgreementItem = lodash.cloneDeep(this.state.modProductAgreementItem)\r\n        let tankShareholderDetails = lodash.cloneDeep(this.state.tankShareholderDetails)\r\n        let selectedAssociations=lodash.cloneDeep(this.state.selectedAssociations)\r\n        try {\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"ExchangeAgreement_savedSucess\",\r\n                messageResultDetails: [],\r\n            };\r\n            var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n            Object.keys(exchangeAgreementValidationDef).forEach(function (key) {\r\n                validationErrors[key] = Utilities.validateField(\r\n                    exchangeAgreementValidationDef[key],\r\n                    modExchangeAgrement[key]\r\n                );\r\n            });\r\n            if (this.state.exchangeAgreement.RequestCode !== \"\") {\r\n                if (modExchangeAgrement.Remarks === null || modExchangeAgrement.Remarks === \"\") {\r\n                    validationErrors[\"Remarks\"] = \"OriginTerminal_RemarksRequired\";\r\n                }\r\n                // if (modExchangeAgrement.RequestorShareholderCode === modExchangeAgrement.LenderShareholderCode) {\r\n                //     validationErrors[\"Shareholder\"] =\"ERRMSG_EXCHANGEAGREEMENTINFO_LENDER_SHAREHOLDER_AND_REQUESTORSHAREHOLDER_SHOULD_NOT_BE_SAME\"\r\n                // }\r\n            }\r\n            if (this.state.exchangeAgreement.RequestType === Constants.AgrementType.EXCHANGE_AGREEMENT) {\r\n                if (modExchangeAgrement.StartDate == null || modExchangeAgrement.StartDate === \"\") {\r\n                    validationErrors[\"StartDate\"] = \"ExchangeAgreement_StartDateRequired\"\r\n                }\r\n                if (modExchangeAgrement.EndDate == null || modExchangeAgrement.EndDate === \"\") {\r\n                    validationErrors[\"EndDate\"] = \"ExchangeAgreement_EndDateRequired\"\r\n                }\r\n            }\r\n            if (this.state.exchangeAgreement.RequestType === Constants.AgrementType.PRODUCT_TRANSFER_AGREEMENT || this.props.agreementType === Constants.AgrementType.PRODUCT_TRANSFER_AGREEMENT) {\r\n                if (modProductAgreementItem.QuantityUOM === null || modProductAgreementItem.QuantityUOM === \"\" || modProductAgreementItem.QuantityUOM === undefined) {\r\n                    validationErrors[\"QuantityUOM\"] = \"MarineReceiptManualEntry_MandatoryQuantityUOM\"\r\n\r\n                }\r\n            }\r\n            if (this.state.modExchangeAgrement.LenderShareholderCode === this.props.selectedShareholder && this.state.modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.ACCEPTED && this.state.exchangeAgreement.RequestType === Constants.AgrementType.PRODUCT_TRANSFER_AGREEMENT) {\r\n               \r\n                if (modProductAgreementItem.AcceptedQuantity === \"\" || modProductAgreementItem.AcceptedQuantity === null || modProductAgreementItem.AcceptedQuantity === 0) {\r\n                    validationErrors[\"AcceptedQuantity\"] = \"ProductTranferAgreementDetails_AcceptedQtyError\";\r\n                }\r\n                if (\r\n                    Array.isArray(tankShareholderDetails) &&\r\n                    tankShareholderDetails.length > 0\r\n                ) {\r\n                    if (selectedAssociations.length < 0) {\r\n                        notification.messageResultDetails.push({\r\n                            keyFields: [\"selectedAssociations\"],\r\n                            // keyValues: [value.BayCode],\r\n                            isSuccess: false,\r\n                            errorMessage:\r\n                                \"ProductTranferAgreementDetails_LenderTankError\",\r\n                        });\r\n                    }\r\n                }\r\n            } if (this.state.modExchangeAgrement.LenderShareholderCode !== this.props.selectedShareholder && this.state.modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.ACCEPTED ) {\r\n                if (modProductAgreementItem.ReceivedGrossQty === \"\" || modProductAgreementItem.ReceivedGrossQty === null  ) {\r\n                    validationErrors[\"ReceivedGrossQty\"] = \"ProductTranferAgreementDetails_EnterReceivedQty\";\r\n                }\r\n                if (modProductAgreementItem.ReceivedNetQty === \"\" || modProductAgreementItem.ReceivedNetQty === null) {\r\n                    validationErrors[\"ReceivedNetQty\"] = \"ProductTranferAgreementDetails_EnterReceivedQty\"\r\n                }\r\n                if (modProductAgreementItem.ReceivedGrossQty <= 0 ) {\r\n                    validationErrors[\"ReceivedGrossQty\"] = \"ProductTranferAgreementDetails_ReceivedQtyError\";\r\n                }\r\n                if ( modProductAgreementItem.ReceivedNetQty <= 0) {\r\n                    validationErrors[\"ReceivedNetQty\"] = \"ProductTranferAgreementDetails_ReceivedQtyError\";\r\n                }\r\n                if (modProductAgreementItem.ReceivedDate === null || modProductAgreementItem.ReceivedDate === undefined) {\r\n                    validationErrors[\"ReceivedDate\"] = \"ProductTranferAgreementDetails_ReceivedDateNeeded\"\r\n                }\r\n                if (new Date(modProductAgreementItem.ReceivedDate).getDate() > new Date(modProductAgreementItem.RequestedCutOff_Date).getDate()) {\r\n                    validationErrors[\"ReceivedDate\"] = \"ProductTranferAgreementDetails_ReceivedDateCutOffError\"\r\n                }\r\n              \r\n            }\r\n\r\n              \r\n            var attributeValidationErrors = lodash.cloneDeep(\r\n                this.state.attributeValidationErrors\r\n            );\r\n\r\n            attributeList.forEach((attribute) => {\r\n                attributeValidationErrors.forEach((attributeValidation) => {\r\n                    if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n                        attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n                            attributeValidation.attributeValidationErrors[\r\n                                attributeMetaData.Code\r\n                            ] = Utilities.valiateAttributeField(\r\n                                attributeMetaData,\r\n                                attributeMetaData.DefaultValue\r\n                            );\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n            this.setState({ validationErrors, attributeValidationErrors });\r\n            let returnValue = true;\r\n            if (returnValue) {\r\n                returnValue = Object.values(validationErrors).every(function (value) {\r\n                    return value === \"\";\r\n                });\r\n            }\r\n            if (returnValue)\r\n                \r\n            if (this.state.exchangeAgreement.RequestType === Constants.AgrementType.EXCHANGE_AGREEMENT || this.props.selectedRow.ShareholderAgreement_RequestType  === Constants.AgrementType.EXCHANGE_AGREEMENT) {\r\n                if (\r\n                    Array.isArray(modExchangeAgrement.ExchangeAgreementItems) &&\r\n                    modExchangeAgrement.ExchangeAgreementItems.length > 0\r\n                ) {\r\n                    modExchangeAgrement.ExchangeAgreementItems.forEach(\r\n                        (AgreementItems) => {\r\n                            ExchangeAgreementItemsPlanValidation.forEach((col) => {\r\n                                let err = \"\";\r\n\r\n                                if (col.validator !== undefined) {\r\n                                    err = Utilities.validateField(\r\n                                        col.validator,\r\n                                        AgreementItems[col.field]\r\n                                    );\r\n                                }\r\n\r\n                                if (err !== \"\") {\r\n                                    notification.messageResultDetails.push({\r\n                                        keyFields: [\"ExchangeAgreementDetailsItem_Product\", col.displayName],\r\n                                        keyValues: [\r\n                                            AgreementItems.BaseProductCode,\r\n                                            AgreementItems[col.field],\r\n                                        ],\r\n                                        isSuccess: false,\r\n                                        errorMessage: err,\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                    );\r\n                } else {\r\n                    notification.messageResultDetails.push({\r\n                        keyFields: [],\r\n                        keyValues: [],\r\n                        isSuccess: false,\r\n                        errorMessage: \"Shipment_Compartment_Association_Require\",\r\n                    });\r\n                }\r\n            } \r\n            else return returnValue;\r\n                \r\n                if (notification.messageResultDetails.length > 0) {\r\n                    this.props.onSaved(modExchangeAgrement, \"update\", notification);\r\n                    return false;\r\n                }\r\n            \r\n            return returnValue;\r\n        } catch (error) {\r\n            console.log(\"error in validate save\", error)\r\n        }\r\n    }\r\n    fillAttributeDetails(ShareholderAgreementInfo, attributeList) {\r\n        try {\r\n            attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n\r\n            ShareholderAgreementInfo.Attributes = [];\r\n            attributeList.forEach((comp) => {\r\n                let attribute = {\r\n                    ListOfAttributeData: [],\r\n                };\r\n                attribute.TerminalCode = comp.TerminalCode;\r\n                comp.attributeMetaDataList.forEach((det) => {\r\n                    attribute.ListOfAttributeData.push({\r\n                        AttributeCode: det.Code,\r\n                        AttributeValue: det.DefaultValue,\r\n                    });\r\n                });\r\n                ShareholderAgreementInfo.Attributes.push(attribute);\r\n            });\r\n            this.setState({ ShareholderAgreementInfo });\r\n            return ShareholderAgreementInfo;\r\n        } catch (error) {\r\n            console.log(\r\n                \"ShareholderAgrementDetailsComposite:Error occured on fillAttributeDetails\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    convertStringtoDecimal(ShareholderAgreementInfo, attributeList) {\r\n        try {\r\n\r\n            ShareholderAgreementInfo = this.fillAttributeDetails(ShareholderAgreementInfo, attributeList);\r\n            return ShareholderAgreementInfo;\r\n        } catch (err) {\r\n            console.log(\"convertStringtoDecimal error ShareholderAgrement Details\", err);\r\n        }\r\n    }\r\n  \r\n    addUpdateShareholderAgreement = () => {\r\n        try {\r\n          this.setState({ saveEnabled: false });\r\n          let tempShareholderAgreementInfo = lodash.cloneDeep(this.state.tempShareholderAgreementInfo);\r\n         \r\n         this.state.exchangeAgreement.RequestCode === \"\"\r\n         ?  this.props.agreementType === Constants.AgrementType.EXCHANGE_AGREEMENT ? this.CreateExchangeAgreement(tempShareholderAgreementInfo) : this.CreateProductTransferAgreement(tempShareholderAgreementInfo)\r\n         : this.props.selectedRow.ShareholderAgreement_RequestType === Constants.AgrementType.EXCHANGE_AGREEMENT ? this.UpdateExchangeAgreement(tempShareholderAgreementInfo) : this.UpdateProductTransferAgreement(tempShareholderAgreementInfo);\r\n    \r\n        } catch (error) {\r\n          console.log(\"Shareholder agreement Details Composite : Error in addUpdateShareholderAgreement\");\r\n        }\r\n      };\r\n      \r\n    handleSave = () => {\r\n        \r\n        try {\r\n         //   this.setState({ saveEnabled: false });\r\n            let ShareholderAgreementInfo = this.fillDetails();\r\n            let attributeList = Utilities.attributesConverttoLocaleString(\r\n                this.state.selectedAttributeList\r\n            );\r\n            if (this.validateSave(ShareholderAgreementInfo, attributeList)) {\r\n                ShareholderAgreementInfo = this.convertStringtoDecimal(\r\n                    ShareholderAgreementInfo,\r\n                    attributeList\r\n                )\r\n             \r\n                let showAuthenticationLayout =\r\n                this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n                  ? true\r\n                  : false;\r\n              let tempShareholderAgreementInfo = lodash.cloneDeep(ShareholderAgreementInfo);\r\n              this.setState({ showAuthenticationLayout, tempShareholderAgreementInfo }, () => {\r\n                if (showAuthenticationLayout === false) {\r\n                  this.addUpdateShareholderAgreement();\r\n                }\r\n            });\r\n        \r\n\r\n        } \r\n            else {\r\n                this.setState({ saveEnabled: true });\r\n            }\r\n        } catch (error) {\r\n            console.log(\r\n                \"shareholderAgreementDetailsComposite:Error occured on handleSave\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    CreateExchangeAgreement(modExchangeAgrement) {\r\n        try {\r\n            this.handleAuthenticationClose();\r\n            let keyCode = [\r\n                {\r\n                    key: KeyCodes.exchangeAgreementCode,\r\n                    value: modExchangeAgrement.RequestCode,\r\n                },\r\n            ];\r\n\r\n            let obj = {\r\n                ShareHolderCode: this.props.selectedShareholder,\r\n                keyDataCode: KeyCodes.exchangeAgreementCode,\r\n                KeyCodes: keyCode,\r\n                Entity: modExchangeAgrement,\r\n            };\r\n\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"ExchangeAgreement_savedSucess\",\r\n                messageResultDetails: [\r\n                    {\r\n                        keyFields: [\"ExchangeAgreementDetails_RequestCode\"],\r\n                        keyValues: [modExchangeAgrement.RequestCode],\r\n                        isSuccess: false,\r\n                        errorMessage: \"\",\r\n                    },\r\n                ],\r\n            };\r\n            axios(\r\n                RestAPIs.CreateExchangeAgreement,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    \r\n                    let result = response.data;\r\n                    notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                    notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                    if (result.IsSuccess === true) {\r\n                        this.setState(\r\n                            {\r\n                                // saveEnabled: Utilities.isInFunction(\r\n                                //   this.props.userDetails.EntityResult.FunctionsList,\r\n                                //   functionGroups.modify,\r\n                                //   fnTruckReceipt\r\n                                // ),\r\n                            },\r\n                            () => this.GetExchangeAgreement({ Common_Code: modExchangeAgrement.RequestCode })\r\n                        );\r\n                    } else {\r\n                        notification.messageResultDetails[0].errorMessage =\r\n                            result.ErrorList[0];\r\n                        this.setState({\r\n                            saveEnabled: true,\r\n                        });\r\n                        console.log(\"Error in ExchangeAgrement:\", result.ErrorList);\r\n                    }\r\n                    this.props.onSaved(modExchangeAgrement, \"add\", notification);\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        saveEnabled: true,\r\n                    });\r\n                    notification.messageResultDetails[0].errorMessage = error;\r\n                    this.props.onSaved(modExchangeAgrement, \"add\", notification);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"Error in ExchangeAgrement:\", error);\r\n        }\r\n    }\r\n    UpdateExchangeAgreement(modExchangeAgrement) {\r\n        \r\n        try {\r\n            this.handleAuthenticationClose();\r\n            let keyCode = [\r\n                {\r\n                    key: KeyCodes.exchangeAgreementCode,\r\n                    value: modExchangeAgrement.RequestCode\r\n                },\r\n            ];\r\n            let obj = {\r\n                keyDataCode: KeyCodes.exchangeAgreementCode,\r\n                KeyCodes: keyCode,\r\n                Entity: modExchangeAgrement,\r\n            };\r\n\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"ExchangeAgreement_savedSucess\",\r\n                messageResultDetails: [\r\n                    {\r\n                        keyFields: [\"ExchangeAgreementDetails_RequestCode\"],\r\n                        keyValues: [modExchangeAgrement.RequestCode],\r\n                        isSuccess: false,\r\n                        errorMessage: \"\",\r\n                    },\r\n                ],\r\n            };\r\n\r\n            axios(\r\n                RestAPIs.UpdateExchangeAgreement,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                \r\n                let result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.GetExchangeAgreement({ Common_Code: modExchangeAgrement.RequestCode })\r\n                } else {\r\n                    notification.messageResultDetails[0].errorMessage =\r\n                        result.ErrorList[0];\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnShareholderAgreement\r\n                        ),\r\n                    });\r\n                    console.log(\"Error in update exchangeagreement:\", result.ErrorList);\r\n                }\r\n                this.props.onSaved(this.state.modExchangeAgrement, \"update\", notification);\r\n            })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnShareholderAgreement\r\n                        ),\r\n                    });\r\n                    notification.messageResultDetails[0].errorMessage = error;\r\n                    this.props.onSaved(this.state.modExchangeAgrement, \"modify\", notification);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"Error while UpdateExchangeAgreement\", error)\r\n        }\r\n    }\r\n    getTank(terminal) {\r\n        try {\r\n            var Shareholder = this.props.selectedShareholder;\r\n            axios(\r\n                RestAPIs.GetTankListForRole + \"?ShareholderCode=\" + Shareholder,\r\n                Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        var tankCodeOptions = [];\r\n                        var tanks = result.EntityResult.Table;\r\n                        if (tanks !== null && Array.isArray(tanks)) {\r\n                            if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                                tanks = tanks.filter((tank) => {\r\n                                    return tank.TerminalCode === terminal;\r\n                                });\r\n                                for (let i = 0; i < tanks.length; i++) {\r\n                                    tankCodeOptions.push(tanks[i].Common_Code);\r\n                                }\r\n                            }\r\n                            else {\r\n                                for (let i = 0; i < tanks.length; i++) {\r\n                                    tankCodeOptions.push(tanks[i].Common_Code);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (tankCodeOptions !== null && Array.isArray(tankCodeOptions)) {\r\n                            let tankOptions = Utilities.transferListtoOptions(\r\n                                tankCodeOptions\r\n                            );\r\n                            this.setState({ tankOptions });\r\n                        }\r\n                    } else {\r\n                        console.log(\"Error in getTankList:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Error in getTankList:\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"Error in getTankList:\", error);\r\n        }\r\n    }\r\n    GetProductTransferAgreement=(ProdAggRow)=> {\r\n        \r\n        try {\r\n            if (ProdAggRow.Common_Code === undefined) {\r\n                let modProductAgreementItem = lodash.cloneDeep(this.state.modProductAgreementItem)\r\n                emptyShareHolderAgreement.RequestorShareholderCode = this.props.selectedShareholder;\r\n                modProductAgreementItem.AcceptedQuantity = '0'\r\n                modProductAgreementItem.LenderTankCode = null\r\n                modProductAgreementItem.QuantityUOM = null\r\n                modProductAgreementItem.RequestedCutOff_Date = new Date()\r\n                modProductAgreementItem.RequestedQuantity = '0'\r\n                modProductAgreementItem.RequestorTankCode = null\r\n                modProductAgreementItem.TankBaseProductCode = \"\"\r\n                this.setState(\r\n                    {\r\n                        exchangeAgreement: lodash.cloneDeep(emptyShareHolderAgreement),\r\n                        modExchangeAgrement: { ...emptyShareHolderAgreement },\r\n                        modProductAgreementItem,\r\n                        isReadyToRender: true,\r\n                        selectedAttributeList: [],\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.add,\r\n                            fnShareholderAgreement\r\n                        ),\r\n                        isReadyToRender: true,\r\n                        btnCreatePTAgreement: false,\r\n                        btnFroceClose: false,\r\n                        btncompltAgreement: false,\r\n                        isfieldEnable: false\r\n                    },()=>this.localNodeAttribute()\r\n                );\r\n                return;\r\n            }\r\n            var keyCode = [\r\n                {\r\n                    key: KeyCodes.ProductTransferAgreementCode,\r\n                    value: ProdAggRow.Common_Code,\r\n                },\r\n            ];\r\n            var obj = {\r\n                ShareHolderCode: this.props.selectedShareholder,\r\n                keyDataCode: KeyCodes.ProductTransferAgreementCode,\r\n                KeyCodes: keyCode,\r\n            };\r\n            axios(\r\n                RestAPIs.GetProductTransferAgreement,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    \r\n                    let modExchangeAgrement = result.EntityResult;\r\n                    if (modExchangeAgrement.LenderShareholderCode === this.props.selectedShareholder) {\r\n                        this.setState({ saveEnabled: false })\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            saveEnabled: modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.ACCEPTED || modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.COMPLETED || modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.FORCE_CLOSED ? false : Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnShareholderAgreement\r\n                            ),\r\n                        })\r\n                    }\r\n                    if (result.IsSuccess === true) {\r\n                        let currentShareholderAgreementStatusList = []\r\n                        if (modExchangeAgrement.LenderShareholderCode === this.props.selectedShareholder) {\r\n                            let shareholderStatus = lodash.cloneDeep(this.state.shareholderStatus)\r\n                            shareholderStatus.forEach((item) => {\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.SUBMITTED ) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.SUBMITTED || item.value === Constants.ShareholderAgreementStatus.ACCEPTED\r\n                                        || item.value === Constants.ShareholderAgreementStatus.REQUEST_REJECTED\r\n                                    ) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.ACCEPTED) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.ACCEPTED\r\n                                       \r\n                                    ) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    } \r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.COMPLETED) {\r\n                               if (item.value === Constants.ShareholderAgreementStatus.COMPLETED) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.REQUEST_REJECTED) {\r\n                                if (item.value === Constants.ShareholderAgreementStatus.REQUEST_REJECTED) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.IN_PROGRESS) {\r\n\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.IN_PROGRESS) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.FORCE_CLOSED) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.FORCE_CLOSED) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.OFFER_REJECTED) { \r\n                             if (item.value === Constants.ShareholderAgreementStatus.OFFER_REJECTED) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n                        if (modExchangeAgrement.RequestorShareholderCode === this.props.selectedShareholder) {\r\n                            let shareholderStatus = lodash.cloneDeep(this.state.shareholderStatus)\r\n                            shareholderStatus.forEach((item) => {\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.ACCEPTED) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.ACCEPTED\r\n                                        || item.value === Constants.ShareholderAgreementStatus.OFFER_REJECTED\r\n                                    ) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                                if (modExchangeAgrement.RequestStatus === Constants.ShareholderAgreementStatus.OFFER_REJECTED) {\r\n                                    if (item.value === Constants.ShareholderAgreementStatus.OFFER_REJECTED\r\n                                    ) {\r\n                                        currentShareholderAgreementStatusList.push(item)\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n                        this.setState(\r\n                            {\r\n                                isReadyToRender: true,\r\n                                exchangeAgreement: lodash.cloneDeep(result.EntityResult),\r\n                                modExchangeAgrement,\r\n                                modProductAgreementItem: modExchangeAgrement.ProductTransferAgreement,\r\n                                currentShareholderAgreementStatusList\r\n                               \r\n                            }, () => {\r\n                                this.controlerForRequestorShareholder(modExchangeAgrement)\r\n                                this.localNodeAttribute()\r\n                                // this.GetShareholderAgreementStatus()\r\n                                this.GetTankShareholderAssociation(modExchangeAgrement.ProductTransferAgreement)\r\n                            }\r\n                        );\r\n                    } else {\r\n                        this.setState({\r\n                            exchangeAgreement: lodash.cloneDeep(emptyShareHolderAgreement),\r\n                            modExchangeAgrement: {},\r\n                            isReadyToRender: true,\r\n                        });\r\n                        console.log(\"Error in Getproductransfer:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Error while Getproductransfer:\", error, ProdAggRow);\r\n                });\r\n        } catch (err) {\r\n            console.log(\"error while getproductagreement\",err)\r\n        }\r\n    }\r\n    CreateProductTransferAgreement(modProdAggrement) {\r\n        try {\r\n            this.handleAuthenticationClose();\r\n            let keyCode = [\r\n                {\r\n                    key: KeyCodes.exchangeAgreementCode,\r\n                    value: modProdAggrement.RequestCode,\r\n                },\r\n            ];\r\n\r\n            let obj = {\r\n                ShareHolderCode: this.props.selectedShareholder,\r\n                keyDataCode: KeyCodes.exchangeAgreementCode,\r\n                KeyCodes: keyCode,\r\n                Entity: modProdAggrement,\r\n            };\r\n\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"ProductTransferAgreement_savedSucess\",\r\n                messageResultDetails: [\r\n                    {\r\n                        keyFields: [\"ExchangeAgreementDetails_RequestCode\"],\r\n                        keyValues: [modProdAggrement.RequestCode],\r\n                        isSuccess: false,\r\n                        errorMessage: \"\",\r\n                    },\r\n                ],\r\n            };\r\n            axios(\r\n                RestAPIs.CreateProductTransferAgreement,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    \r\n                    let result = response.data;\r\n                    notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                    notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                    if (result.IsSuccess === true) {\r\n                        this.GetProductTransferAgreement({ Common_Code: modProdAggrement.RequestCode })\r\n                    } else {\r\n                        notification.messageResultDetails[0].errorMessage =\r\n                            result.ErrorList[0];\r\n                        this.setState({\r\n                            saveEnabled: true,\r\n                        });\r\n                        console.log(\"Error in create ProductTransfer:\", result.ErrorList);\r\n                    }\r\n                    this.props.onSaved(modProdAggrement, \"add\", notification);\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        saveEnabled: true,\r\n                    });\r\n                    notification.messageResultDetails[0].errorMessage = error;\r\n                    this.props.onSaved(modProdAggrement, \"add\", notification);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"Error in create ProductTransfer:\", error);\r\n        }\r\n    }\r\n    UpdateProductTransferAgreement=(modProdAggrement)=> {\r\n       \r\n        try {\r\n            this.handleAuthenticationClose();\r\n            let keyCode = [\r\n                {\r\n                    key: KeyCodes.exchangeAgreementCode,\r\n                    value: modProdAggrement.RequestCode,\r\n                },\r\n            ];\r\n\r\n            let obj = {\r\n                ShareHolderCode: this.props.selectedShareholder,\r\n                keyDataCode: KeyCodes.exchangeAgreementCode,\r\n                KeyCodes: keyCode,\r\n                Entity: modProdAggrement,\r\n            };\r\n\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"ProductTransferAgreement_savedSucess\",\r\n                messageResultDetails: [\r\n                    {\r\n                        keyFields: [\"ExchangeAgreementDetails_RequestCode\"],\r\n                        keyValues: [modProdAggrement.RequestCode],\r\n                        isSuccess: false,\r\n                        errorMessage: \"\",\r\n                    },\r\n                ],\r\n            };\r\n\r\n            axios(\r\n                RestAPIs.UpdateProductTransferAgreement,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                let result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState(\r\n                        {\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnShareholderAgreement\r\n                            ),\r\n                        },\r\n                        () => this.GetProductTransferAgreement({ Common_Code: modProdAggrement.RequestCode })\r\n                    );\r\n                } else {\r\n                    notification.messageResultDetails[0].errorMessage =\r\n                        result.ErrorList[0];\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnShareholderAgreement\r\n                        ),\r\n                    });\r\n                    console.log(\"Error in update ProductTransfer:\", result.ErrorList);\r\n                }\r\n                this.props.onSaved(this.state.modProdAggrement, \"update\", notification);\r\n            })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        saveEnabled: Utilities.isInFunction(\r\n                            this.props.userDetails.EntityResult.FunctionsList,\r\n                            functionGroups.modify,\r\n                            fnShareholderAgreement\r\n                        ),\r\n                    });\r\n                    notification.messageResultDetails[0].errorMessage = error;\r\n                    this.props.onSaved(this.state.modExchangeAgrement, \"modify\", notification);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"Error while UpdateProductAgreement\", error)\r\n        }\r\n    }\r\n    getShareholders() {\r\n        try {\r\n            return Utilities.transferListtoOptions(\r\n                this.props.userDetails.EntityResult.ShareholderList\r\n            );\r\n        } catch (error) {\r\n            console.log(\"ShareholderagreementDetailsComposite:Error occured on getShareholders\", error);\r\n        }\r\n    }\r\n    handleViewAuditTrail=() =>{\r\n        try {\r\n            \r\n            axios(\r\n                RestAPIs.GetEAAuditTrailInfo +\r\n                \"?exchangeAgreementCode=\" + this.state.modExchangeAgrement.RequestCode\r\n                + \"&requestorShareholder=\" +\r\n                this.props.selectedShareholder,\r\n                Utilities.getAuthenticationObjectforGet(\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            ).then((response) => {\r\n                \r\n                var result = response.data;\r\n                let modViewAuditTrail = result.EntityResult;\r\n                for (let i = 0; i < modViewAuditTrail.length; i++) {\r\n                    modViewAuditTrail[i].UpdatedTime =\r\n                        new Date(\r\n                            modViewAuditTrail[i].UpdatedTime\r\n                        ).toLocaleDateString()\r\n                }\r\n                this.setState({ modViewAuditTrail, isViewAuditTrail: true })\r\n            })\r\n                .catch((error) => {\r\n                    console.log(\"Error while getting handleViewAuditTrail:\", error);\r\n                })\r\n        } catch (err) {\r\n            console.log(\"error in view audittrail\",err)\r\n        }\r\n    }\r\n    GetExchangeAgreementShipmentItemDetails = () => {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetExchangeAgreementShipmentItemDetails +\r\n                \"?shareholderCode=\" +\r\n                this.props.selectedShareholder +\r\n                \"&exchangeAgreementCode=\" + this.state.modExchangeAgrement.RequestCode,\r\n                Utilities.getAuthenticationObjectforGet(\r\n                    this.props.tokenDetails.tokenInfo)\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    this.setState({ modEAShipmentDetails: result.EntityResult, isViewShipmentDetails: true })\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Error while exchnageagreementshipment details:\", error);\r\n                });\r\n        } catch (err) {\r\n            console.log(\"error while getting exchnageagreementshipment details\",err)\r\n        }\r\n    }\r\n    UpdateExchangeAgreementStatus = (actionType) => {\r\n        let RequestStatus = actionType\r\n        try {\r\n            let notification = {\r\n                messageType: \"critical\",\r\n                message: \"ExchnageAgreement_StatusSucess\",\r\n                messageResultDetails: [\r\n                    {\r\n                        keyFields: [\"RequestCode\"],\r\n                        keyValues: [this.state.modExchangeAgrement.RequestCode],\r\n                        isSuccess: false,\r\n                        errorMessage: \"\",\r\n                    },\r\n                ],\r\n            };\r\n            var keyCode = [\r\n                {\r\n                    key: KeyCodes.LenderShareholder,\r\n                    value: this.state.modExchangeAgrement.LenderShareholderCode,\r\n                },\r\n                {\r\n                    key: KeyCodes.RequestorShareholder,\r\n                    value: this.props.selectedShareholder,\r\n                },\r\n                {\r\n                    key: KeyCodes.ShareholderAgreementStatus,\r\n                    value: RequestStatus,\r\n                },\r\n                {\r\n                    key: KeyCodes.ProductTransferAgreementCode,\r\n                    value: this.state.modExchangeAgrement.RequestCode,\r\n                },\r\n            ];\r\n            var obj = {\r\n                ShareHolderCode: this.props.selectedShareholder,\r\n                keyDataCode: KeyCodes.requestCode,\r\n                KeyCodes: keyCode,\r\n\r\n            };\r\n            axios(\r\n                RestAPIs.UpdateExchangeAgreementStatus,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    \r\n                    var result = response.data;\r\n                    notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                    notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                    if (result.IsSuccess === true) {\r\n                        this.setState({\r\n                            saveEnabled: false\r\n                        }, () => this.GetExchangeAgreement({ Common_Code: this.state.modExchangeAgrement.RequestCode }))\r\n                    } else {\r\n                        notification.messageResultDetails[0].errorMessage =\r\n                            result.ErrorList[0];\r\n                    }\r\n                    toast(\r\n                        <ErrorBoundary>\r\n                            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                        </ErrorBoundary>,\r\n                        {\r\n                            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n                        }\r\n                    );\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Error while ReceiptClose:\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"Error while closing the shipment:\", error);\r\n        }\r\n    }  \r\n    handleReset = () => {\r\n        try {\r\n            const { validationErrors } = { ...this.state };\r\n            const exchangeAgreement = lodash.cloneDeep(this.state.exchangeAgreement);\r\n            Object.keys(validationErrors).forEach(function (key) {\r\n                validationErrors[key] = \"\";\r\n            });\r\n            this.setState({\r\n                modExchangeAgrement: { ...exchangeAgreement },\r\n                exchangeAgrementComps: [],\r\n                validationErrors,\r\n            });\r\n        } catch (error) {\r\n            console.log(\"ExchangeAgrementDetailsComposite:Error occured on handleReset\", error);\r\n        }\r\n    };\r\n    onBack = () => {\r\n        this.setState({\r\n            saveEnabled: false,\r\n            isViewAuditTrail: false,\r\n            isViewShipmentDetails:false\r\n            \r\n        });\r\n        this.GetExchangeAgreement({ Common_Code: this.state.modExchangeAgrement.RequestCode });\r\n    };\r\n    handleCreateAgrement = (actionType) => {\r\n        let ShareholderAgreementInfo = this.fillDetails();\r\n        let attributeList = Utilities.attributesConverttoLocaleString(\r\n            this.state.selectedAttributeList\r\n        );\r\n        if (this.validateSave(ShareholderAgreementInfo, attributeList)) {\r\n            ShareholderAgreementInfo = this.convertStringtoDecimal(\r\n                ShareholderAgreementInfo,\r\n                attributeList\r\n            )\r\n            this.UpdateProductTransferAgreementStatus(ShareholderAgreementInfo, actionType)\r\n        }\r\n            else {\r\n                console.log(\"Error while UpdateProductAgreementstatus\")\r\n            }\r\n    }\r\n        UpdateProductTransferAgreementStatus = (ShareholderAgreementInfo,actionType) => {\r\n            let RequestStatus = actionType;\r\n            try {\r\n                let keyCode = [\r\n                    {\r\n                        key: KeyCodes.exchangeAgreementCode,\r\n                        value: ShareholderAgreementInfo.RequestCode,\r\n                    },\r\n                    {\r\n                        key: KeyCodes.ShareholderAgreementStatus,\r\n                        value: RequestStatus,\r\n                    },\r\n                ];\r\n\r\n                let obj = {\r\n                    ShareHolderCode: this.props.selectedShareholder,\r\n                    keyDataCode: KeyCodes.exchangeAgreementCode,\r\n                    KeyCodes: keyCode,\r\n                    Entity: ShareholderAgreementInfo,\r\n                };\r\n\r\n                let notification = {\r\n                    messageType: \"critical\",\r\n                    message: \"ProductTransferAgreement_StatusSucess\",\r\n                    messageResultDetails: [\r\n                        {\r\n                            keyFields: [\"ExchangeAgreementDetails_RequestCode\"],\r\n                            keyValues: [ShareholderAgreementInfo.RequestCode],\r\n                            isSuccess: false,\r\n                            errorMessage: \"\",\r\n                        },\r\n                    ],\r\n                };\r\n\r\n                axios(\r\n                    RestAPIs.UpdateProductTransferAgreementStatus,\r\n                    Utilities.getAuthenticationObjectforPost(\r\n                        obj,\r\n                        this.props.tokenDetails.tokenInfo\r\n                    )\r\n                ).then((response) => {\r\n                \r\n                    let result = response.data;\r\n                    notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                    notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                    if (result.IsSuccess === true) {\r\n                        this.setState(\r\n                            {\r\n                                saveEnabled: false\r\n                            },\r\n                            () => this.GetProductTransferAgreement({ Common_Code: ShareholderAgreementInfo.RequestCode })\r\n                        );\r\n                    } else {\r\n                        notification.messageResultDetails[0].errorMessage =\r\n                            result.ErrorList[0];\r\n                        this.setState({\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnShareholderAgreement\r\n                            ),\r\n                        });\r\n                        console.log(\"Error in update ProductTransfer:\", result.ErrorList);\r\n                    }\r\n                    this.props.onSaved(ShareholderAgreementInfo, \"update\", notification);\r\n                })\r\n                    .catch((error) => {\r\n                        this.setState({\r\n                            saveEnabled: Utilities.isInFunction(\r\n                                this.props.userDetails.EntityResult.FunctionsList,\r\n                                functionGroups.modify,\r\n                                fnShareholderAgreement\r\n                            ),\r\n                        });\r\n                        notification.messageResultDetails[0].errorMessage = error;\r\n                        this.props.onSaved(ShareholderAgreementInfo, \"modify\", notification);\r\n                    });\r\n            } catch (error) {\r\n                console.log(\"Error while UpdateProductAgreement\", error)\r\n            }\r\n    }\r\n    GetTankShareholderAssociation(modProdAggrement) {\r\n        \r\n        try {\r\n            let keyCode = [\r\n                {\r\n                    key: KeyCodes.tankCode,\r\n                    value: modProdAggrement.RequestorTankCode,\r\n                },\r\n            ];\r\n\r\n            let obj = {\r\n                ShareHolderCode: this.props.selectedShareholder,\r\n                keyDataCode: KeyCodes.tankCode,\r\n                KeyCodes: keyCode,\r\n                Enity: modProdAggrement\r\n            };\r\n            axios(\r\n                RestAPIs.ComminglingTankShareholderAssociation,\r\n                Utilities.getAuthenticationObjectforPost(\r\n                    obj,\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    \r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        if (\r\n                            Array.isArray(result.EntityResult) &&\r\n                            result.EntityResult.length > 0\r\n                        ) {\r\n                            let tankShareholderDetails = lodash.cloneDeep(result.EntityResult)\r\n                       \r\n                            let tankdetails = tankShareholderDetails.filter((b) => { return b.ShareholderCode == this.props.selectedShareholder; })\r\n                            this.setState({\r\n                                tankShareholderDetails: tankdetails,\r\n                                isDetails: true,\r\n                            });\r\n                        }\r\n                    } else {\r\n                        this.setState({\r\n                            tankShareholderDetails: [],\r\n                            isDetails: false,\r\n                            saveEnabled: false\r\n                        });\r\n                        console.log(\"Error in getTankShareholderAssociationDetails:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        tankShareholderDetails: [],\r\n                        isDetails: false\r\n                    });\r\n                    console.log(\"Error while getting TankShareholderAssociationDetails:\", error);\r\n                });\r\n        }\r\n        catch (error) {\r\n            console.log(\"TankShareholderAssociationComposite: Error in GetTankShareholderAssociation\")\r\n        }\r\n    }\r\n    GetShareholderAgreementStatus = () => {\r\n        \r\n        try {\r\n            \r\n            axios(\r\n                RestAPIs.GetShareholderAgreementStatus ,\r\n                Utilities.getAuthenticationObjectforGet(\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    \r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        let shareholderStatus = Utilities.transferListtoOptions(\r\n                            result.EntityResult,);\r\n                        \r\n                        this.setState({ shareholderStatus, isReadyToRender: true });\r\n                    } else {\r\n                        this.setState({ shareholderStatus: [], isReadyToRender: true });\r\n                        console.log(\"Error in getshareholderagreement:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({ shareholderStatus: [], isReadyToRender: true });\r\n                    console.log(\"Error while getting shareholderagreement:\", error);\r\n                });\r\n        } catch (err) {\r\n            console.log(\"error while getting shareholderagreement\", err)\r\n        }\r\n    }\r\n    controlerForRequestorShareholder = (data) => {\r\n        \r\n        if (data.RequestorShareholderCode === this.props.selectedShareholder) {\r\n            if (data.RequestStatus.toUpperCase() === Constants.ShareholderAgreementStatus.SUBMITTED) {\r\n                this.setState({ saveEnabled: true, btnCreatePTAgreement: false, btnFroceClose: true, btncompltAgreement: false ,isfieldEnable:false})\r\n            } \r\n            else if (data.RequestStatus.toUpperCase() === Constants.ShareholderAgreementStatus.ACCEPTED) {\r\n                this.setState({ saveEnabled: false, btnCreatePTAgreement: true, btnFroceClose: true, btncompltAgreement: false,isfieldEnable:true\r\n})\r\n            }\r\n            else if (data.RequestStatus.toUpperCase() === Constants.ShareholderAgreementStatus.COMPLETED ) {\r\n                this.setState({\r\n                    saveEnabled: false, btnCreatePTAgreement: false, btnFroceClose: false, btncompltAgreement: false, isfieldEnable: true\r\n                })\r\n            }\r\n            else if (data.RequestStatus.toUpperCase() === Constants.ShareholderAgreementStatus.IN_PROGRESS) {\r\n                this.setState({\r\n                    saveEnabled: true, btnCreatePTAgreement: false, btnFroceClose: true, btncompltAgreement: true, isfieldEnable: true\r\n                })\r\n            }\r\n            else if (data.RequestStatus.toUpperCase() === Constants.ShareholderAgreementStatus.OFFER_REJECTED) {\r\n                this.setState({\r\n                    saveEnabled: false, btnCreatePTAgreement: false, btnFroceClose: false, btncompltAgreement: false, isfieldEnable: true\r\n                })\r\n            }\r\n            else if (data.RequestStatus.toUpperCase() === Constants.ShareholderAgreementStatus.FORCE_CLOSED || data.RequestStatus.toUpperCase() === Constants.ShareholderAgreementStatus.REQUEST_REJECTED) {\r\n                this.setState({\r\n                    saveEnabled: false, btnCreatePTAgreement: false, btnFroceClose: false, btncompltAgreement: false, isfieldEnable: false\r\n                })\r\n            }\r\n        }\r\n        else if (data.LenderShareholderCode === this.props.selectedShareholder) {\r\n            if (data.RequestStatus.toUpperCase() === Constants.ShareholderAgreementStatus.SUBMITTED || data.RequestStatus.toUpperCase() === Constants.ShareholderAgreementStatus.ACCEPTED || data.RequestStatus.toUpperCase() === Constants.ShareholderAgreementStatus.OFFER_REJECTED ) {\r\n                this.setState({\r\n                    saveEnabled: false, btnCreatePTAgreement: false, btnFroceClose: false, btncompltAgreement: false, isfieldEnable: false\r\n})\r\n            }\r\n            else if (data.RequestStatus.toUpperCase() === Constants.ShareholderAgreementStatus.COMPLETED ) {\r\n                this.setState({\r\n                    saveEnabled: false, btnCreatePTAgreement: false, btnFroceClose: false, btncompltAgreement: false, isfieldEnable: true\r\n                })  \r\n            }\r\n            else if (data.RequestStatus.toUpperCase() === Constants.ShareholderAgreementStatus.FORCE_CLOSED) {\r\n                this.setState({\r\n                    saveEnabled: false, btnCreatePTAgreement: false, btnFroceClose: false, btncompltAgreement: false, isfieldEnable: false\r\n                })\r\n            }\r\n           \r\n            }\r\n    }\r\n    \r\n    handleAuthenticationClose = () => {\r\n        this.setState({\r\n          showAuthenticationLayout: false,\r\n        });\r\n      };\r\n\r\n     \r\n\r\n    render() {\r\n        const listOptions = {\r\n            shareholders: this.getShareholders(),\r\n            baseProductOptions: this.state.baseProductOptions,\r\n            UOMOptions: this.state.UOMOptions,\r\n            tankCodeOptions: this.state.tankOptions,\r\n            currentShareholderAgreementStatusList: this.state.currentShareholderAgreementStatusList\r\n\r\n        }\r\n      const popUpContents = [\r\n          {\r\n              fieldName: \"ExchangeAgreementDetails_CreatedDate\",\r\n              fieldValue:\r\n                  new Date(\r\n                      this.state.modExchangeAgrement.CreatedTime\r\n                  ).toLocaleDateString() +\r\n                  \" \" +\r\n                  new Date(this.state.modExchangeAgrement.CreatedTime).toLocaleTimeString(),\r\n          },\r\n          {\r\n              fieldName: \"ExchangeAgreementDetails_LastUpdatedDate\",\r\n              fieldValue:\r\n                  this.state.modExchangeAgrement.LastUpdatedTime !== undefined &&\r\n                      this.state.modExchangeAgrement.LastUpdatedTime !== null\r\n                      ? new Date(\r\n                          this.state.modExchangeAgrement.LastUpdatedTime\r\n                      ).toLocaleDateString() +\r\n                      \" \" +\r\n                      new Date(\r\n                          this.state.modExchangeAgrement.LastUpdatedTime\r\n                      ).toLocaleTimeString()\r\n                      : \"\",\r\n          },\r\n          {\r\n              fieldName: \"ExchangeAgreementDetails_StatuschangedDate\",\r\n              fieldValue:\r\n                  new Date(this.state.modExchangeAgrement.CreatedTime).toLocaleDateString() +\r\n                  \" \" +\r\n                  new Date(this.state.modExchangeAgrement.CreatedTime).toLocaleTimeString(),\r\n          },\r\n      ];\r\n    return this.state.isReadyToRender ? (\r\n        <div>\r\n            {this.state.isViewAuditTrail ? (\r\n                <ErrorBoundary>\r\n                    <ShareholderAgreementViewAuditTrailDetails\r\n                        modViewAuditTrail={this.state.modViewAuditTrail}\r\n                        handleBack={this.onBack}\r\n                        RequestCode={this.state.modExchangeAgrement.RequestCode}\r\n                    ></ShareholderAgreementViewAuditTrailDetails>\r\n                </ErrorBoundary>\r\n            ) : this.state.isViewShipmentDetails ? (\r\n                    <ErrorBoundary>\r\n                        <ExchangeAgreementShipmentDetails\r\n                            modEAShipmentDetails={this.state.modEAShipmentDetails}\r\n                            handleBack={this.onBack}\r\n                        >\r\n                        </ExchangeAgreementShipmentDetails>\r\n                    </ErrorBoundary>\r\n            ):( \r\n                    <div>\r\n            <ErrorBoundary>\r\n                <TMDetailsHeader\r\n                    entityCode={this.state.exchangeAgreement.RequestCode}\r\n                    newEntityName={this.props.selectedRow.ShareholderAgreement_RequestType === Constants.AgrementType.EXCHANGE_AGREEMENT||this.props.agreementType === Constants.AgrementType.EXCHANGE_AGREEMENT ? \"ExchangeAgreementDetails_Title\" : \"ProductTransferAgreementDetails_Title\"}\r\n                    popUpContents={popUpContents}\r\n                ></TMDetailsHeader>\r\n            </ErrorBoundary>\r\n            \r\n                <ErrorBoundary>\r\n                    {this.props.selectedRow.ShareholderAgreement_RequestType === Constants.AgrementType.EXCHANGE_AGREEMENT || this.props.agreementType === Constants.AgrementType.EXCHANGE_AGREEMENT ?\r\n                        <ExchangeAgreementDetails\r\n                            isBonded={this.state.isBonded}\r\n                            listOptions={listOptions}\r\n                            modExchangeAgrement={this.state.modExchangeAgrement}\r\n                            exchangeAgreement={this.state.exchangeAgreement}\r\n                            modExchangeAgreementItems={this.state.modExchangeAgreementItems}\r\n                            selectedAssociations={this.state.selectedAssociations}\r\n                            handleAssociationSelectionChange={\r\n                                this.handleAssociationSelectionChange\r\n                            }\r\n                            selectedShareholder={this.props.selectedShareholder}\r\n                            handleCellDataEdit={this.handleCellDataEdit}\r\n                            handleAddAssociation={this.handleAddAssociation}\r\n                            handleDeleteAssociation={this.handleDeleteAssociation}\r\n                            onFieldChange={this.handleChange}\r\n                            onDateTextChange={this.handleDateTextChange}\r\n                            validationErrors={this.state.validationErrors}\r\n                            handleViewAuditTrail={this.handleViewAuditTrail}\r\n                            UpdateExchangeAgreementStatus={this.UpdateExchangeAgreementStatus}\r\n                                        GetExchangeAgreementShipmentItemDetails={this.GetExchangeAgreementShipmentItemDetails}\r\n                                        isEnterpriseNode={this.props.userDetails.EntityResult.IsEnterpriseNode}\r\n                                        attributeValidationErrors={this.state.attributeValidationErrors}\r\n                                        selectedAttributeList={this.state.selectedAttributeList}\r\n                                        handleCellAttrinuteDataEdit={this.handleCellAttrinuteDataEdit}\r\n                                        btnCreatePTAgreement={this.state.btnCreatePTAgreement}\r\n                                        btnFroceClose={this.state.btnFroceClose}\r\n                        >\r\n                        </ExchangeAgreementDetails > :\r\n                                    <ProductTransferAgreementDetails\r\n                                        selectedShareholder={this.props.selectedShareholder}\r\n                           isBonded={this.state.isBonded}\r\n                            modExchangeAgrement={this.state.modExchangeAgrement}\r\n                             onFieldChange={this.handleChange}\r\n                            exchangeAgreement={this.state.exchangeAgreement}\r\n                            onDateTextChange={this.handleDateTextChange}\r\n                            listOptions={listOptions}\r\n                            modProductAgreementItem={this.state.modProductAgreementItem}\r\n                             handleViewAuditTrail={this.handleViewAuditTrail}\r\n                                        validationErrors={this.state.validationErrors}\r\n                                        tankShareholderDetails={this.state.tankShareholderDetails}\r\n                                        UpdateProductTransferAgreementStatus={this.UpdateProductTransferAgreementStatus}\r\n                                        handleCreateAgrement={this.handleCreateAgrement}\r\n                                        isEnterpriseNode={this.props.userDetails.EntityResult.IsEnterpriseNode}\r\n                                        attributeValidationErrors={this.state.attributeValidationErrors}\r\n                                        selectedAttributeList={this.state.selectedAttributeList}\r\n                                        handleCellAttrinuteDataEdit={this.handleCellAttrinuteDataEdit}\r\n                                        btnCreatePTAgreement={this.state.btnCreatePTAgreement}\r\n                                        btnFroceClose={this.state.btnFroceClose}\r\n                                        btncompltAgreement={this.state.btncompltAgreement}\r\n                                        handleAssociationSelectionChange={\r\n                                            this.handleAssociationSelectionChange\r\n                                        }\r\n                                        selectedAssociations={this.state.selectedAssociations}\r\n                                        isfieldEnable={this.state.isfieldEnable}\r\n                        ></ProductTransferAgreementDetails >}\r\n                </ErrorBoundary>\r\n            <ErrorBoundary>\r\n                <TMDetailsUserActions\r\n                    handleBack={this.props.onBack}\r\n                    handleSave={this.handleSave}\r\n                    handleReset={this.handleReset}\r\n                    saveEnabled={this.state.saveEnabled}\r\n                ></TMDetailsUserActions>\r\n                    </ErrorBoundary></div>)}\r\n            {/* {this.state.isCloseReceipt ? this.handleCloseReceipttModal() : null} */}\r\n            {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n                this.state.exchangeAgreement.RequestCode === \"\"\r\n                  ? functionGroups.add\r\n                  : functionGroups.modify\r\n              }\r\n            functionGroup={fnShareholderAgreement}\r\n            handleOperation={this.addUpdateShareholderAgreement}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n        </div>\r\n        \r\n    ) : (\r\n        <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n}\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userDetails: state.getUserDetails.userDetails,\r\n        tokenDetails: state.getUserDetails.TokenAuth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ShareholderAgreementDetailsComposite);\r\n\r\nShareholderAgreementDetailsComposite.propTypes = {\r\n    selectedRow: PropTypes.object.isRequired,\r\n    terminalCodes: PropTypes.array.isRequired,\r\n    onBack: PropTypes.func.isRequired,\r\n    onSaved: PropTypes.func.isRequired,\r\n};","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["ExchangeAgreementDetails","_ref","isBonded","modExchangeAgrement","exchangeAgreement","modExchangeAgreementItems","listOptions","onFieldChange","selectedAssociations","handleAssociationSelectionChange","handleCellDataEdit","handleAddAssociation","handleDeleteAssociation","onDateTextChange","validationErrors","handleViewAuditTrail","GetExchangeAgreementShipmentItemDetails","UpdateExchangeAgreementStatus","selectedAttributeList","attributeValidationErrors","handleCellAttrinuteDataEdit","isEnterpriseNode","selectedShareholder","btnCreatePTAgreement","btnFroceClose","handleCustomEditDateSelect","cellData","_jsx","DatePicker","fluid","value","rowIndex","field","Date","type","displayFormat","getCurrentDateFormat","indicator","onChange","onTextChange","error","reserveSpace","dateDisplayValues","toLocaleDateString","decimalDisplayValues","toLocaleString","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","t","useTranslation","_jsxs","className","children","Input","RequestCode","label","data","disabled","LenderShareholderCode","RequestStatus","Constants","ACCEPTED","OFFER_REJECTED","Select","placeholder","options","currentShareholderAgreementStatusList","shareholders","StartDate","initialWidth","showYearSelector","EndDate","Remarks","Checkbox","checked","IsBonded","length","map","attribute","ErrorBoundary","Accordion","Content","title","AttributeDetails","attributeMetaDataList","onClick","Icon","root","name","size","DataTable","selectionMode","selection","onSelectionChange","scrollable","scrollHeight","Column","header","handleIsRequiredCompartmentCell","editFieldType","editable","renderer","customEditRenderer","celldata","handleCustomEditDropDown","search","noResultsMessage","baseProductOptions","dropDownOptions","UOMOptions","style","textAlign","Button","content","defaultProps","ProductTransferAgreementDetails","modProductAgreementItem","UpdateProductTransferAgreementStatus","tankShareholderDetails","btncompltAgreement","isfieldEnable","handleCreateAgrement","console","log","RequestType","PRODUCT_TRANSFER_AGREEMENT","RequestorTankCode","tankCodeOptions","TankBaseProductCode","RequestedQuantity","QuantityUOM","RequestedCutOff_Date","COMPLETED","REQUEST_REJECTED","AcceptedQuantity","undefined","LenderTankCode","ReceivedGrossQty","ReceivedNetQty","ReceivedDate","ShareholderAgreementViewAuditTrailDetails","handleBack","modViewAuditTrail","modelOpen","setModelOpen","useState","TranslationConsumer","id","Modal","open","display","flexWrap","Footer","el","window","document","getElementById","innerHTML","iframe","createElement","doc","body","appendChild","contentWindow","str1","substring","indexOf","str2","write","close","focus","print","setTimeout","removeChild","ExchangeAgreementShipmentDetails","modEAShipmentDetails","EADetails","bAutoWidth","resizableColumns","EALoadedShipments","ShareholderAgreementDetailsComposite","Component","constructor","arguments","state","isReadyToRender","Utilities","exchangeAgreementValidationDef","saveEnabled","emptyShareHolderAgreement","isViewAuditTrail","auditTrailList","isViewShipmentDetails","tankOptions","isCloseReceipt","shareholderStatus","showAuthenticationLayout","tempShareholderAgreementInfo","DefaultValue","this","setState","lodash","forEach","Code","handleChange","propertyName","props","userDetails","EntityResult","FunctionsList","functionGroups","modify","fnShareholderAgreement","handleDateTextChange","index","findIndex","item","sequenceNo","rowData","e","newVal","IsArchived","newComp","BaseProductCode","Quantity","AcceptQuantity","RemainingQuantity","ConsumedQuantity","push","obj","filter","com","cindex","addUpdateShareholderAgreement","agreementType","EXCHANGE_AGREEMENT","CreateExchangeAgreement","CreateProductTransferAgreement","selectedRow","ShareholderAgreement_RequestType","UpdateExchangeAgreement","UpdateProductTransferAgreement","handleSave","ShareholderAgreementInfo","fillDetails","attributeList","validateSave","convertStringtoDecimal","IsWebPortalUser","GetProductTransferAgreement","ProdAggRow","Common_Code","RequestorShareholderCode","add","localNodeAttribute","keyCode","key","KeyCodes","ShareHolderCode","keyDataCode","axios","RestAPIs","tokenDetails","tokenInfo","then","response","result","FORCE_CLOSED","IsSuccess","SUBMITTED","IN_PROGRESS","ProductTransferAgreement","controlerForRequestorShareholder","GetTankShareholderAssociation","ErrorList","catch","err","modProdAggrement","handleAuthenticationClose","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","onSaved","i","UpdatedTime","actionType","GetExchangeAgreement","toast","NotifyEvent","notificationMessage","autoClose","handleReset","Object","keys","exchangeAgrementComps","onBack","GetShareholderAgreementStatus","toUpperCase","componentDidMount","getAttributes","getTank","getBaseProducts","getUOMList","componentWillReceiveProps","nextProps","shareholderAgrementEnity","SHAREHOLDERAGREEMENT","Array","isArray","terminalSelectionChange","selectedTerminals","attributesTerminalsList","existitem","attributeMetaData","Attributevalue","Attributes","ShareholderAttribute","valueAttribute","ListOfAttributeData","x","AttributeCode","AttributeValue","bonded","uomOptions","VOLUME","MASS","concat","text","ExchangeAgrementRow","ExchangeAgreementItems","SUSPENDED","DEACTIVATED","productAgreementComp","getDate","returnValue","values","every","AgreementItems","ExchangeAgreementItemsPlanValidation","col","validator","displayName","fillAttributeDetails","comp","det","Shareholder","tanks","Table","IsEnterpriseNode","tank","getShareholders","ShareholderList","Enity","tankdetails","b","ShareholderCode","isDetails","render","popUpContents","fieldName","fieldValue","CreatedTime","toLocaleTimeString","LastUpdatedTime","TMDetailsHeader","entityCode","newEntityName","TMDetailsUserActions","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","margin","Popup","element","marginLeft","position","List","float","handleAttributeDateValue","convertAttributeDatetoString","chars","split","Dateval","getFullYear","getMonth","slice","DataType","toLowerCase","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","INT","LONG","FLOAT","DOUBLE","BOOL","toString","DATETIME","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","getOptionsWithSelect","ddlOptions","selectOptionText","option","unshift","language","navigator","userLanguage","moment","longDateFormat","class"],"sourceRoot":""}