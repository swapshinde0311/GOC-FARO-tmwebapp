{"version":3,"file":"static/js/5211.6dd826de.chunk.js","mappings":"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","sources":["Components/Composite/Common/TMDetailsKPILayout.jsx","Components/UIBase/Common/TMUserActions.jsx","Components/Composite/Common/TMUserActionsComposite.jsx","Components/Composite/Common/UserAuthentication.jsx","Components/UIBase/Common/WijmoGrid.jsx","Components/Composite/Common/WijmoGridComposite.jsx","Components/UIBase/Details/ATGInterfaceConfigurationDetails.jsx","Components/Composite/Details/ATGInterfaceConfigurationDetailsComposite.jsx","Components/Composite/Details/TankDetailsComposite.jsx","Components/Composite/Summary/TankSummaryComposite.jsx","Components/Composite/Entity/TankComposite.jsx","JS/AttributeEntity.js","JS/FunctionGroups.js","JS/KeyCodes.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nexport default function TMDetailsKPILayout({\r\n    KPIList,\r\n    pageName,\r\n    rowHeight,\r\n    widgetHeight,\r\n    isDraggable,\r\n    isResizable,\r\n    kpiDisplayTopBreakpoint\r\n}) {\r\n    const [KPIDisplays, setKPIDisplays] = useState(1);\r\n\r\n    const kpiDiv = React.useRef(null);\r\n\r\n    const hideKpis = () => {\r\n        let currentScrollPos = window.pageYOffset;\r\n        let KPIDisplay = KPIDisplays;\r\n\r\n        // hide kpis based on div position to top of the window \r\n        if (kpiDiv.current && kpiDiv.current.getBoundingClientRect().top < kpiDisplayTopBreakpoint) {\r\n            KPIDisplay = 0;\r\n        }\r\n        // show the kpis once at top of the screen\r\n        else if (currentScrollPos === 0) {\r\n            KPIDisplay = 1\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n\r\n        setKPIDisplays(KPIDisplay);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            window.addEventListener(\"scroll\", hideKpis);\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // remove listener on unmount\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", hideKpis)\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div ref={kpiDiv}>\r\n            {KPIDisplays === 1 ? <TranslationConsumer>\r\n                {(t) => (\r\n                    <div style={{ marginTop: \"6px\" }}>\r\n                        <ErrorBoundary>\r\n                            <KPIDashboardLayout\r\n                                kpiList={KPIList}\r\n                                isDraggable={isDraggable}\r\n                                isResizable={isResizable}\r\n                                rowHeight={rowHeight}\r\n                                widgetHeight={widgetHeight}\r\n                                pageName={pageName}\r\n                            ></KPIDashboardLayout>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n\r\n                )}\r\n            </TranslationConsumer> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nTMDetailsKPILayout.propTypes = {\r\n    kpiDisplayTopBreakpoint: PropTypes.number\r\n}\r\n\r\nTMDetailsKPILayout.defaultProps = {\r\n    kpiDisplayTopBreakpoint: 100\r\n}","import React, { useState } from \"react\";\r\nimport {\r\n  Icon,\r\n  Breadcrumb,\r\n  Select,\r\n  Modal,\r\n  Button,\r\n  Popup,\r\n  VerticalMenu,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nTMUserActions.propTypes = {\r\n  operationsVisibilty: PropTypes.shape({\r\n    add: PropTypes.bool,\r\n    delete: PropTypes.bool,\r\n    shareholder: PropTypes.bool,\r\n  }).isRequired,\r\n  breadcrumbItem: PropTypes.shape({\r\n    itemName: PropTypes.string,\r\n    itemCode: PropTypes.string,\r\n    itemProps: PropTypes.any,\r\n    localizedKey: PropTypes.string,\r\n    parents: PropTypes.array,\r\n    isComponent: PropTypes.bool,\r\n  }).isRequired,\r\n  shareholders: PropTypes.array.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  onShareholderChange: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onAdd: PropTypes.func.isRequired,\r\n  popUpContent: PropTypes.array,\r\n};\r\nTMUserActions.defaultProps = {\r\n  operationsVisibilty: { add: false, delete: false, shareholder: false },\r\n  breadcrumbItem: {\r\n    itemName: \"\",\r\n    itemCode: \"\",\r\n    localizedKey: \"\",\r\n    itemProps: {},\r\n    parents: [],\r\n    isComponent: false,\r\n  },\r\n  shareholders: [],\r\n  selectedShareholder: \"\",\r\n  popUpContent: [],\r\n  shrVisible: true,\r\n  addVisible: true,\r\n  deleteVisible: true\r\n};\r\nexport function TMUserActions({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n}) {\r\n  const [modelOpen, setModelOpen] = useState(false);\r\n  const [popUpOpen, setPopUpOpen] = useState(false);\r\n  function getShareholderDropdownOptions() {\r\n    return Utilities.transferListtoOptions(shareholders);\r\n    // var List = [];\r\n    // shareholders.forEach((element) => {\r\n    //   List.push({ text: element, value: element });\r\n    // });\r\n    // return List;\r\n  }\r\n\r\n  function buildBreadcrumb() {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Breadcrumb>\r\n            {breadcrumbItem.parents.map((parentitem) => {\r\n              return (\r\n                <Breadcrumb.Item\r\n                  onClick={() => {\r\n                    if (\r\n                      handleBreadCrumbClick !== undefined &&\r\n                      handleBreadCrumbClick !== null\r\n                    ) {\r\n                      handleBreadCrumbClick(\r\n                        parentitem.itemCode,\r\n                        breadcrumbItem.parents\r\n                      );\r\n                    }\r\n                  }}\r\n                  key={parentitem.itemCode}\r\n                >\r\n                  {t(parentitem.localizedKey)}\r\n                </Breadcrumb.Item>\r\n              );\r\n            })}\r\n            <Breadcrumb.Item key={breadcrumbItem.itemCode}>\r\n              {t(breadcrumbItem.localizedKey)}\r\n            </Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  function handlePopUpClick() {\r\n    if (operationsVisibilty.add) {\r\n      if (popUpContent.length > 0) {\r\n        if (popUpOpen === false) setPopUpOpen(true);\r\n        else setPopUpOpen(false);\r\n      } else {\r\n        onAdd();\r\n      }\r\n    }\r\n  }\r\n\r\n  function popUpMenuClick(menuItem) {\r\n    setPopUpOpen(false);\r\n    onAdd(menuItem);\r\n  }\r\n  function displayIcons() {\r\n    return (\r\n      <div\r\n        style={{ float: \"right\", display: \"inline-block\", marginTop: \"10px\" }}\r\n      >\r\n        {addVisible ? <Popup\r\n          position=\"bottom right\"\r\n          className=\"popup-theme-wrap\"\r\n          element={\r\n            <div\r\n              className={\r\n                (operationsVisibilty.add\r\n                  ? \"iconCircle \"\r\n                  : \"iconCircleDisable \") + \"iconblock\"\r\n              }\r\n              onClick={handlePopUpClick}\r\n            >\r\n              <Icon\r\n                root=\"common\"\r\n                name=\"badge-plus\"\r\n                size=\"small\"\r\n                color=\"white\"\r\n              />\r\n            </div>\r\n          }\r\n          on=\"click\"\r\n          open={popUpOpen}\r\n        >\r\n          <div onMouseLeave={() => setPopUpOpen(false)}>\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <VerticalMenu>\r\n                  <VerticalMenu>\r\n                    <VerticalMenu.Header>\r\n                      {t(\"Common_Create\")}\r\n                    </VerticalMenu.Header>\r\n                    {popUpContent.map((item) => {\r\n                      return (\r\n                        <VerticalMenu.Item\r\n                          onClick={() => popUpMenuClick(item.fieldName)}\r\n                        >\r\n                          {t(item.fieldValue)}\r\n                        </VerticalMenu.Item>\r\n                      );\r\n                    })}\r\n                  </VerticalMenu>\r\n                </VerticalMenu>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n        </Popup> : \"\"}\r\n        {deleteVisible ? <div\r\n          style={{ marginLeft: \"10px\" }}\r\n          onClick={() => {\r\n            if (operationsVisibilty.delete) {\r\n              setModelOpen(true);\r\n              //displayTMModalforDelete();\r\n              //onDelete();\r\n            }\r\n          }}\r\n          className={\r\n            (operationsVisibilty.delete\r\n              ? \"iconCircle \"\r\n              : \"iconCircleDisable \") + \"iconblock\"\r\n          }\r\n        >\r\n          <Icon root=\"common\" name=\"delete\" size=\"small\" color=\"white\" />\r\n        </div> : \"\"}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayTMModalforDelete() {\r\n    //console.log(\"entered to display modal actions\");\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={modelOpen} size=\"small\">\r\n            <Modal.Content>\r\n              <div>\r\n                <b>{t(\"Confirm_Delete\")}</b>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"secondary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => setModelOpen(false)}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"PipelineDispatch_BtnSubmit\")}\r\n                onClick={() => {\r\n                  setModelOpen(false);\r\n                  onDelete();\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n    //return <TMModal open={true}></TMModal>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\" style={{ alignItems: \"flex-start\", padding: \"0px\" }}>\r\n      <div\r\n        className=\"col-9 col-sm-9 col-md-9 col-lg-10 col-xl-10\"\r\n        style={{ padding: \"0px\" }}\r\n      >\r\n        <div className=\"row\" style={{ marginTop: \"10px\", alignItems: \"\" }}>\r\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n            <ErrorBoundary> {buildBreadcrumb()}</ErrorBoundary>\r\n          </div>\r\n          <div\r\n            className=\"col-12 col-sm-12 col-md-12 col-lg-6 col-xl-4\"\r\n          //style={{ verticalAlign: \"middle\" }}\r\n          >\r\n            <TranslationConsumer>\r\n              {(t) => (\r\n                <div\r\n                  className=\"compartmentIcon\"\r\n                  style={{ justifyContent: \"flex-start\" }}\r\n                >\r\n                  {shrVisible === false ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <div>\r\n                        <h4 className=\"shrText\">{t(\"Common_Shareholder\")}:</h4>\r\n                      </div>\r\n                      <div className=\"opSelect\">\r\n                        <Select\r\n                          //className=\"opSelect\"\r\n                          placeholder={t(\"Common_Shareholder\")}\r\n                          value={selectedShareholder}\r\n                          disabled={!operationsVisibilty.shareholder}\r\n                          options={getShareholderDropdownOptions()}\r\n                          onChange={(value) => onShareholderChange(value)}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </TranslationConsumer>\r\n          </div>\r\n\r\n          {displayTMModalforDelete()}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-3 col-sm-3 col-md-3 col-lg-2 col-xl-2\">\r\n        {displayIcons()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TMUserActions } from \"../../UIBase/Common/TMUserActions\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nexport function TMUserActionsComposite({\r\n  operationsVisibilty,\r\n  breadcrumbItem,\r\n  shareholders,\r\n  selectedShareholder,\r\n  onShareholderChange,\r\n  onDelete,\r\n  onAdd,\r\n  popUpContent,\r\n  shrVisible,\r\n  handleBreadCrumbClick,\r\n  addVisible,\r\n  deleteVisible\r\n\r\n}) {\r\n  return (\r\n    <TMUserActions\r\n      operationsVisibilty={operationsVisibilty}\r\n      breadcrumbItem={breadcrumbItem}\r\n      shareholders={shareholders}\r\n      selectedShareholder={selectedShareholder}\r\n      onShareholderChange={onShareholderChange}\r\n      onDelete={onDelete}\r\n      onAdd={onAdd}\r\n      popUpContent={popUpContent}\r\n      shrVisible={shrVisible}\r\n      handleBreadCrumbClick={handleBreadCrumbClick}\r\n      addVisible={addVisible}\r\n      deleteVisible={deleteVisible}\r\n    ></TMUserActions>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Modal, Button, Select, Checkbox, Input, Icon } from \"@scuf/common\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { userAuthenticationValidationDef } from \"../../../JS/ValidationDef\";\r\nimport axios from \"axios\";\r\nimport lodash from \"lodash\";\r\nimport cryptojs from \"crypto-js\";\r\n\r\nclass UserAuthenticationLayout extends Component {\r\n  state = {\r\n    isPasswordRequired: false,\r\n    Password: \"\",\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      userAuthenticationValidationDef\r\n    ),\r\n    authenticationResponse: \"\",\r\n    btnAuthenticateEnabled: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      this.IsPasswordRequired();\r\n    } catch (error) {\r\n      console.log(\r\n        \"BaseProductDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  IsPasswordRequired() {\r\n    try {\r\n      let isPasswordRequired = Utilities.isPasswordEnabled(\r\n        this.props.userDetails.EntityResult.roleFunctionInfo,\r\n        this.props.functionName,\r\n        this.props.functionGroup\r\n      );\r\n      this.setState({ isPasswordRequired });\r\n\r\n      if (isPasswordRequired === false) this.props.handleOperation();\r\n    } catch (error) {\r\n      console.log(\"Error in IsPasswordRequired method:\", error);\r\n    }\r\n  }\r\n\r\n  onFieldChange = (propertyName, data) => {\r\n    this.setState({ Password: data });\r\n    const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    if (userAuthenticationValidationDef[propertyName] !== undefined) {\r\n      validationErrors[propertyName] = Utilities.validateField(\r\n        userAuthenticationValidationDef[propertyName],\r\n        data\r\n      );\r\n      this.setState({ validationErrors, authenticationResponse: \"\" });\r\n    }\r\n\r\n  };\r\n\r\n  validatePassword = (Password) => {\r\n    this.setState({ btnAuthenticateEnabled: false });\r\n    const validationErrors = { ...this.state.validationErrors };\r\n    if (Password === null || Password === \"\") {\r\n      validationErrors[\"Password\"] = \"UserValidationForm_ReqfldValPassword\";\r\n    }\r\n    this.setState({ validationErrors });\r\n    var returnValue = true;\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n\r\n    return returnValue;\r\n  };\r\n\r\n  // AuthenticateUser = () => {\r\n  //     if (this.validatePassword(this.state.Password)) {\r\n  //         this.props.parentCallBack();\r\n  //     }\r\n  // }\r\n  onCloseClick = () => {\r\n    this.setState(\r\n      {\r\n        isPasswordRequired: false,\r\n        authenticationResponse: \"\",\r\n        btnAuthenticateEnabled: true,\r\n      },\r\n      () => this.props.handleClose()\r\n    );\r\n  };\r\n\r\n  // unescapeBase64Url = function (key) {\r\n  //   return key.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n  // };\r\n\r\n  // escapeBase64Url = function (key) {\r\n  //   return key.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\r\n  // };\r\n\r\n  AuthenticateUser = () => {\r\n    if (this.validatePassword(this.state.Password)) {\r\n      this.setState({ authenticationResponse: \"\" });\r\n      // this.props.parentCallBack();\r\n      try {\r\n        var keySize = 256;\r\n        var iterations = 100;\r\n        //assign the entered password\r\n        var msg = this.state.Password;\r\n        //assign the username from GetLoggedInUserDetails\r\n        var pass = this.props.Username;\r\n        var salt = cryptojs.lib.WordArray.random(128 / 8);\r\n\r\n        var key = cryptojs.PBKDF2(pass, salt, {\r\n          keySize: keySize / 32,\r\n          iterations: iterations,\r\n        });\r\n\r\n        var iv = cryptojs.lib.WordArray.random(128 / 8);\r\n\r\n        var encrypted = cryptojs.AES.encrypt(msg, key, {\r\n          iv: iv,\r\n          padding: cryptojs.pad.Pkcs7,\r\n          mode: cryptojs.mode.CBC,\r\n        });\r\n        var transitmessage =\r\n          salt.toString() + iv.toString() + encrypted.toString();\r\n        //console.log(\"EncryptedPWD\", transitmessage);\r\n\r\n        axios(\r\n          RestAPIs.ValidateUserCredentials +\r\n          \"?encryptedPassword=\" +\r\n          encodeURIComponent(transitmessage),\r\n          Utilities.getAuthenticationObjectforGet(\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        )\r\n          .then((response) => {\r\n            var result = response.data;\r\n            if (result.IsSuccess === true) {\r\n              if (result.EntityResult.toLowerCase() === \"true\") {\r\n                this.setState({ isPasswordRequired: false });\r\n                this.props.handleOperation();\r\n              } else {\r\n                this.setState({\r\n                  authenticationResponse: result.ErrorList[0],\r\n                  btnAuthenticateEnabled: true,\r\n                });\r\n              }\r\n            } else {\r\n              this.setState({\r\n                authenticationResponse: result.ErrorList[0],\r\n                btnAuthenticateEnabled: true,\r\n              });\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            this.setState({\r\n              authenticationResponse: error,\r\n              btnAuthenticateEnabled: true,\r\n            });\r\n          });\r\n      } catch (error) {\r\n        this.setState({\r\n          authenticationResponse: error,\r\n          btnAuthenticateEnabled: true,\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({ btnAuthenticateEnabled: true });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.isPasswordRequired === true ? (\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <Modal open={true} size=\"mini\">\r\n                <Modal.Content>\r\n                  <div className=\"row\">\r\n                    <div\r\n                      className=\"col col-lg-8\"\r\n                      style={{ marginLeft: \"10px\" }}\r\n                    >\r\n                      <h4>{t(\"User_Authentication\")}</h4>\r\n                    </div>\r\n                    <div\r\n                      className=\"col-12 col-lg-3\"\r\n                      style={{ textAlign: \"right\" }}\r\n                      onClick={this.onCloseClick}\r\n                    >\r\n                      <Icon root=\"common\" name=\"close\" />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                    <div className=\"col col-lg-12\">\r\n                      <label>\r\n                        <h5>\r\n                          {t(\"UserValidation_Form_AccountName\")}:\r\n                          {this.props.Username}\r\n                        </h5>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"col col-lg-12\">\r\n                      <Input\r\n                        fluid\r\n                        type=\"password\"\r\n                        disablePasswordToggle={false}\r\n                        value={this.state.Password}\r\n                        indicator=\"required\"\r\n                        onChange={(data) =>\r\n                          this.onFieldChange(\"Password\", data)\r\n                        }\r\n                        label={t(\"AccessCardInfo_x_Pwd\")}\r\n                        error={t(this.state.validationErrors.Password)}\r\n                        reserveSpace={false}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </Modal.Content>\r\n                <Modal.Footer>\r\n                  <span className=\"ui error-message autherrormsg\">\r\n                    {t(this.state.authenticationResponse)}\r\n                  </span>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    disabled={!this.state.btnAuthenticateEnabled}\r\n                    content={t(\"UserValidationForm_Authentication\")}\r\n                    onClick={this.AuthenticateUser}\r\n                  />\r\n                </Modal.Footer>\r\n              </Modal>\r\n            )}\r\n          </TranslationConsumer>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(UserAuthenticationLayout);\r\n\r\nUserAuthenticationLayout.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as wjCore from \"@grapecity/wijmo\";\r\nimport * as wjGrid from \"@grapecity/wijmo.grid\";\r\nimport {\r\n  FlexGrid,\r\n  FlexGridColumn,\r\n  FlexGridCellTemplate,\r\n} from \"@grapecity/wijmo.react.grid\";\r\nimport { FlexGridFilter } from \"@grapecity/wijmo.react.grid.filter\";\r\nimport { Operator } from \"@grapecity/wijmo.grid.filter\";\r\nimport { FlexGridSearch } from \"@grapecity/wijmo.react.grid.search\";\r\nimport { CollectionView } from \"@grapecity/wijmo\";\r\nimport { CollectionViewNavigator, ListBox } from \"@grapecity/wijmo.react.input\";\r\nimport { Selector } from \"@grapecity/wijmo.grid.selector\";\r\nimport { HeadersVisibility } from \"@grapecity/wijmo.grid\";\r\nimport { showPopup, hidePopup, PopupPosition } from \"@grapecity/wijmo\";\r\nimport * as wjcGridXlsx from \"@grapecity/wijmo.grid.xlsx\";\r\nimport \"@grapecity/wijmo.styles/wijmo.css\";\r\nimport { GroupPanel } from \"@grapecity/wijmo.react.grid.grouppanel\";\r\nimport { Button, Card, Popup } from \"@scuf/common\";\r\nimport { TranslationConsumer, useTranslation } from \"@scuf/localization\";\r\nimport { Icon } from \"@scuf/common\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport * as loadash from \"lodash\";\r\nimport \"@grapecity/wijmo.touch\";\r\n\r\nconst WijmoGrid = (props) => {\r\n  const [flex, setFlex] = useState(null);\r\n  const [translator] = useTranslation();\r\n  const _getData = (pageLength) => {\r\n    return new CollectionView(props.sourceData, {\r\n      pageSize: pageLength,\r\n    });\r\n  };\r\n\r\n  const [data, setData] = useState(_getData(props.rowsPerPage));\r\n  const theGrid = React.createRef();\r\n  const theSearch = React.createRef();\r\n  const gridFilter = React.createRef();\r\n  const pagingComponent = React.createRef();\r\n  const colPicker = React.useRef();\r\n\r\n  // to keep track of selected rows\r\n  const selectedRows = React.useRef(props.selectionRequired ? [] : null);\r\n\r\n  // to initialize grid checkbox selection\r\n  let selector = null;\r\n\r\n  //Initialize grid\r\n  const gridInitialized = (grid) => {\r\n    try {\r\n      // localize grid filter\r\n      customizeFilterConditions();\r\n\r\n      if (props.onRowClick) {\r\n        // add row click event handler\r\n        grid.addEventListener(grid.hostElement, \"click\", (e) => {\r\n          let ht = grid.hitTest(e);\r\n          // condition to check if cell is not a grouped cell and a data cell\r\n          if (\r\n            ht.target.closest(\".wj-cell\") &&\r\n            ![...ht.target.closest(\".wj-cell\").classList].includes(\r\n              \"wj-group\"\r\n            ) &&\r\n            ht.cellType === wjGrid.CellType.Cell\r\n          ) {\r\n            // fetch row data\r\n            const rowData = grid.rows[ht.row].dataItem;\r\n            props.onRowClick(rowData);\r\n          }\r\n        });\r\n      }\r\n\r\n      grid.selectionMode = wjCore.asEnum(\"None\", wjGrid.SelectionMode);\r\n      grid.select(-1, -1);\r\n\r\n      setFlex(grid);\r\n      if (props.selectionRequired) {\r\n        // enable checkbox selection\r\n        selector = new Selector(grid, {\r\n          itemChecked: (s, e) => {\r\n            // if only single checkbox selection is required\r\n            if (props.singleSelection) {\r\n              grid.rows\r\n                .filter((row) => {\r\n                  return (\r\n                    row.isSelected &&\r\n                    selectedRows.current.filter((item) =>\r\n                      loadash.isEqual(item, row.dataItem)\r\n                    ).length === 1\r\n                  );\r\n                })\r\n                .forEach((row) => {\r\n                  row.isSelected = false;\r\n                });\r\n            }\r\n\r\n            // pass row data as parameter to checkbox selection handler\r\n            props.onSelectionHandle(\r\n              grid.rows\r\n                .filter((r) => r.isSelected)\r\n                .map((selectedRow) => selectedRow.dataItem)\r\n            );\r\n          },\r\n          // if only single checkbox selection is required\r\n          showCheckAll: !props.singleSelection,\r\n        });\r\n\r\n        let theGrid = selector.column.grid;\r\n        selector.column = theGrid.rowHeaders.columns[0];\r\n        theGrid.headersVisibility = HeadersVisibility.All;\r\n        theGrid.selectionMode = wjCore.asEnum(\"None\", wjGrid.SelectionMode);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in gridInitialized: \" + error);\r\n    }\r\n  };\r\n\r\n  //Update grid when data changes\r\n  useEffect(() => {\r\n    try {\r\n      if (theGrid != null) {\r\n        //Connect search to the grid\r\n        let grid = theGrid.current.control;\r\n        let search = theSearch.current.control;\r\n        search.grid = grid;\r\n      }\r\n\r\n      setData(_getData(props.rowsPerPage));\r\n    } catch (error) {\r\n      console.log(\"Error in grid update:\", error);\r\n    }\r\n  }, [props.sourceData]);\r\n\r\n  // Pre-select grid rows based on selectedItems props\r\n  useEffect(() => {\r\n    try {\r\n      if (flex && props.selectionRequired) {\r\n        // clear the selectedRows array\r\n        selectedRows.current.length = 0;\r\n        // add selectedItems array items to selectedRows\r\n        selectedRows.current.push(...props.selectedItems);\r\n\r\n        flex.rows.forEach((row) => {\r\n          if (\r\n            props.selectedItems.filter((item) =>\r\n              loadash.isEqual(item, row.dataItem)\r\n            ).length === 1\r\n          ) {\r\n            // checks the row checkbox\r\n            row.isSelected = true;\r\n          } else {\r\n            // unchecks the row checkbox\r\n            row.isSelected = false;\r\n          }\r\n        });\r\n\r\n        flex.refresh();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in pre-selecting rows:\", error);\r\n    }\r\n  }, [props.selectedItems]);\r\n\r\n  //Load the state of grid\r\n  useEffect(() => {\r\n    try {\r\n      if (\r\n        localStorage.getItem(props.parentComponent + \"GridState\") &&\r\n        localStorage.getItem(props.parentComponent + \"GridState\") !== \"null\" &&\r\n        flex\r\n      ) {\r\n        // restore grid settings\r\n        let gridState = JSON.parse(\r\n          localStorage.getItem(props.parentComponent + \"GridState\")\r\n        );\r\n        let newFlex = flex;\r\n\r\n        // restore column picker settings\r\n        newFlex.columns.forEach((col) => {\r\n          let matchedCol = gridState.columns.filter(\r\n            (colSetting) => colSetting.binding === col.binding\r\n          );\r\n          col.visible =\r\n            matchedCol.length > 0 ? matchedCol[0].visible : col.visible;\r\n        });\r\n\r\n        // restore filter settings\r\n        gridFilter.current.control.filterDefinition =\r\n          gridState.filterDefinition;\r\n\r\n        // restore sort settings\r\n        newFlex.collectionView.deferUpdate(() => {\r\n          newFlex.collectionView.sortDescriptions.clear();\r\n          for (let i = 0; i < gridState.sortDescriptions.length; i++) {\r\n            let sortDesc = gridState.sortDescriptions[i];\r\n            newFlex.collectionView.sortDescriptions.push(\r\n              new wjCore.SortDescription(sortDesc.property, sortDesc.ascending)\r\n            );\r\n          }\r\n        });\r\n\r\n        // restore grouping settings\r\n        for (let i = 0; i < gridState.groupDescriptions.length; i++) {\r\n          newFlex.collectionView.groupDescriptions.push(\r\n            new wjCore.PropertyGroupDescription(gridState.groupDescriptions[i])\r\n          );\r\n          newFlex.columns.filter(\r\n            (col) => col.binding === gridState.groupDescriptions[i]\r\n          )[0].visible = false;\r\n        }\r\n\r\n        if (\r\n          sessionStorage.getItem(props.parentComponent + \"GridState\") &&\r\n          sessionStorage.getItem(props.parentComponent + \"GridState\") !== \"null\"\r\n        ) {\r\n          let gridSessionState = JSON.parse(\r\n            sessionStorage.getItem(props.parentComponent + \"GridState\")\r\n          );\r\n          // restore paging settings\r\n          newFlex.collectionView.moveToPage(\r\n            newFlex.collectionView.pageCount - 1 >= gridSessionState.pageIndex\r\n              ? gridSessionState.pageIndex\r\n              : newFlex.collectionView.pageCount - 1\r\n          );\r\n\r\n          // restore search settings\r\n          if (theSearch) {\r\n            theSearch.current.control.text = gridSessionState.searchText;\r\n          }\r\n        }\r\n\r\n        setFlex(newFlex);\r\n        flex.refresh();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in restoring local storage settings: \", error);\r\n    }\r\n  }, [data]);\r\n\r\n  // Set Column Picker Properties\r\n  useEffect(() => {\r\n    try {\r\n      if (flex && colPicker.current && props.columnPickerRequired) {\r\n        colPicker.current.itemsSource = flex.columns;\r\n        colPicker.current.checkedMemberPath = \"visible\";\r\n        colPicker.current.displayMemberPath = \"header\";\r\n        colPicker.current.lostFocus.addHandler(() => {\r\n          hidePopup(colPicker.current.hostElement);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in initializing column picker properties:\", error);\r\n    }\r\n  }, [colPicker.current]);\r\n\r\n  useEffect(() => {\r\n    // remove column picker pop-up on component unmount\r\n    return () => {\r\n      if (props.columnPickerRequired && colPicker.current) {\r\n        hidePopup(colPicker.current.hostElement);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // export grid data to excel\r\n  const exportExcel = () => {\r\n    try {\r\n      let gridFlex = flex;\r\n      //to download all rows from all pages\r\n      gridFlex.itemsSource.pageSize = props.sourceData.length;\r\n      setFlex(gridFlex);\r\n      wjcGridXlsx.FlexGridXlsxConverter.saveAsync(\r\n        flex,\r\n        {\r\n          includeColumnHeaders: true,\r\n          includeCellStyles: false,\r\n          formatItem: null,\r\n        },\r\n        props.exportFileName\r\n      );\r\n\r\n      //to restore paging\r\n      gridFlex.itemsSource.pageSize = props.rowsPerPage;\r\n      setFlex(gridFlex);\r\n    } catch (error) {\r\n      console.log(\"Error in export grid to excel:\", error);\r\n    }\r\n  };\r\n\r\n  const terminalPopOver = (terminalCodes) => {\r\n    if (terminalCodes.split(\",\").length > props.terminalsToShow) {\r\n      return (\r\n        <Popup\r\n          className=\"popup-theme-wrap\"\r\n          on=\"hover\"\r\n          element={terminalCodes.split(\",\").length}\r\n        >\r\n          <Card>\r\n            <Card.Content>{terminalCodes}</Card.Content>\r\n          </Card>\r\n        </Popup>\r\n      );\r\n    } else {\r\n      return terminalCodes;\r\n    }\r\n  };\r\n\r\n  const displayValues = (value, columnDetail) => {\r\n    if (columnDetail !== undefined && columnDetail !== null) {\r\n      if (typeof value === \"boolean\" || columnDetail.Name === \"Active\") {\r\n        if (value) return <Icon name=\"check\" size=\"small\" color=\"green\" />;\r\n        else return <Icon name=\"close\" size=\"small\" color=\"red\" />;\r\n      } else if (value === \"\" || value === null || value === undefined) {\r\n        return value;\r\n      } else if (\r\n        (columnDetail.Name === \"TerminalCodes\" ||\r\n          columnDetail.PopOver === \"1\") &&\r\n        value !== null\r\n      ) {\r\n        return terminalPopOver(value);\r\n      }\r\n      // var columnType = columnDetails.find(function (detail) {\r\n      //   if (detail.Name === field) {\r\n      //     return detail;\r\n      //   }\r\n      // });\r\n      else if (\r\n        columnDetail.DataType !== undefined &&\r\n        columnDetail.DataType === \"DateTime\"\r\n      ) {\r\n        return (\r\n          new Date(value).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(value).toLocaleTimeString()\r\n        );\r\n      } else if (\r\n        columnDetail.DataType !== undefined &&\r\n        columnDetail.DataType === \"Date\"\r\n      ) {\r\n        return new Date(value).toLocaleDateString();\r\n      } else if (\r\n        columnDetail.DataType !== undefined &&\r\n        columnDetail.DataType === \"Time\"\r\n      ) {\r\n        return new Date(value).toLocaleTimeString();\r\n      }\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  //Initialize Column Picker\r\n  const initializedPicker = (picker) => {\r\n    if (props.columnPickerRequired) {\r\n      colPicker.current = picker;\r\n    }\r\n  };\r\n\r\n  // Column Picker Handler\r\n  const colPickerClickHandler = (event) => {\r\n    try {\r\n      let host = colPicker.current.hostElement;\r\n      if (!host.offsetHeight) {\r\n        showPopup(host, event.target, PopupPosition.Below, true, false);\r\n        colPicker.current.focus();\r\n      } else {\r\n        hidePopup(host, true, true);\r\n        flex.focus();\r\n      }\r\n\r\n      colPicker.current.focus();\r\n      event.preventDefault();\r\n    } catch (error) {\r\n      console.log(\"Error in Column Picker click event:\", error);\r\n    }\r\n  };\r\n\r\n  const saveGridState = () => {\r\n    try {\r\n      if (flex && gridFilter.current) {\r\n        // grid column, filter, sort and grouping settings\r\n        let gridState = {\r\n          columns: flex.columns.map((col) => {\r\n            return {\r\n              binding: col.binding,\r\n              visible: col.visible,\r\n            };\r\n          }),\r\n          filterDefinition: gridFilter.current.control.filterDefinition,\r\n          sortDescriptions: flex.collectionView.sortDescriptions.map(\r\n            (sortDesc) => {\r\n              return {\r\n                property: sortDesc.property,\r\n                ascending: sortDesc.ascending,\r\n              };\r\n            }\r\n          ),\r\n          groupDescriptions: flex.collectionView.groupDescriptions.map(\r\n            (group) => {\r\n              if (group.propertyName) {\r\n                return group.propertyName;\r\n              }\r\n\r\n              return null;\r\n            }\r\n          ),\r\n        };\r\n\r\n        // add class to grouped checkbox div element\r\n        if (\r\n          flex.collectionView.groupDescriptions &&\r\n          flex.collectionView.groupDescriptions.length > 0\r\n        ) {\r\n          let groupedCheckboxes = [\r\n            ...document.getElementsByClassName(\"wj-column-selector-group\"),\r\n          ];\r\n          groupedCheckboxes.forEach((chkbx) => {\r\n            chkbx.parentNode.parentNode.classList.add(\"wj-grouped-checkbox\");\r\n          });\r\n        }\r\n\r\n        // grid paging and search settings\r\n        let sessionState = {\r\n          pageIndex: flex.collectionView.pageIndex,\r\n          searchText: theSearch.current.control.text,\r\n        };\r\n\r\n        localStorage.setItem(\r\n          props.parentComponent + \"GridState\",\r\n          JSON.stringify(gridState)\r\n        );\r\n        sessionStorage.setItem(\r\n          props.parentComponent + \"GridState\",\r\n          JSON.stringify(sessionState)\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in saving grid state\");\r\n    }\r\n  };\r\n\r\n  // customize grid filter text and dropdowns\r\n  const customizeFilterConditions = () => {\r\n    // localize the FlexGrid filter\r\n    let filter = wjCore.culture.FlexGridFilter,\r\n      operator = Operator;\r\n    wjCore.culture.FlexGridFilter.header = translator(\"WijmoGridFilterHeader\");\r\n    wjCore.culture.FlexGridFilter.ascending =\r\n      \"\\u2191 \" + translator(\"WijmoGridFilterAscending\");\r\n    wjCore.culture.FlexGridFilter.descending =\r\n      \"\\u2193 \" + translator(\"WijmoGridFilterDescending\");\r\n    wjCore.culture.FlexGridFilter.apply = translator(\"RoleAdminEdit_Apply\");\r\n    wjCore.culture.FlexGridFilter.clear = translator(\"OrderCreate_btnClear\");\r\n    wjCore.culture.FlexGridFilter.conditions = translator(\r\n      \"WijmoGridFilterCondition\"\r\n    );\r\n    wjCore.culture.FlexGridFilter.values = translator(\"WijmoGridFilterValue\");\r\n    wjCore.culture.FlexGridFilter.search = translator(\r\n      \"LoadingDetailsView_SearchGrid\"\r\n    );\r\n    wjCore.culture.FlexGridFilter.selectAll = translator(\r\n      \"WijmoGridFilterSelectAll\"\r\n    );\r\n    wjCore.culture.FlexGridFilter.and = translator(\"WijmoGridFilterAnd\");\r\n    wjCore.culture.FlexGridFilter.or = translator(\"WijmoGridFilterOr\");\r\n    wjCore.culture.FlexGridFilter.cancel = translator(\"AccessCardInfo_Cancel\");\r\n    // wjCore.culture.FlexGridFilter.null = 'test';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.and = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.asc = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.dialog = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.dsc = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.edit = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.op1 = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.op2 = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.or = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.search = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.val1 = '';\r\n    // wjCore.culture.FlexGridFilter.ariaLabels.val2 = '';\r\n\r\n    // localize FlexGrid filter operators\r\n    filter.stringOperators = [\r\n      { name: translator(\"WijmoGridFilterUnset\"), op: null },\r\n      { name: translator(\"WijmoGridFilterEqual\"), op: operator.EQ },\r\n      { name: translator(\"WijmoGridFilterNotEqual\"), op: operator.NE },\r\n      { name: translator(\"WijmoGridFilterBeginsWith\"), op: operator.BW },\r\n      { name: translator(\"WijmoGridFilterEndsWith\"), op: operator.EW },\r\n      { name: translator(\"WijmoGridFilterContains\"), op: operator.CT },\r\n      { name: translator(\"WijmoGridFilterDoesNotContain\"), op: operator.NC },\r\n    ];\r\n    filter.numberOperators = [\r\n      { name: translator(\"WijmoGridFilterUnset\"), op: null },\r\n      { name: translator(\"WijmoGridFilterEqual\"), op: operator.EQ },\r\n      { name: translator(\"WijmoGridFilterNotEqual\"), op: operator.NE },\r\n      { name: translator(\"WijmoGridFilterGreaterThan\"), op: operator.GT },\r\n      { name: translator(\"WijmoGridFilterLessThan\"), op: operator.LT },\r\n      {\r\n        name: translator(\"WijmoGridFilterGreaterThanOrEqual\"),\r\n        op: operator.GE,\r\n      },\r\n      { name: translator(\"WijmoGridFilterLessThanOrEqual\"), op: operator.LE },\r\n    ];\r\n    filter.dateOperators = [\r\n      { name: translator(\"WijmoGridFilterUnset\"), op: null },\r\n      { name: translator(\"WijmoGridFilterEqual\"), op: operator.EQ },\r\n      { name: translator(\"WijmoGridFilterDateEarlierThan\"), op: operator.LT },\r\n      { name: translator(\"WijmoGridFilterDateLaterThan\"), op: operator.GT },\r\n    ];\r\n    filter.booleanOperators = [\r\n      { name: translator(\"WijmoGridFilterUnset\"), op: null },\r\n      { name: translator(\"WijmoGridFilterEqual\"), op: operator.EQ },\r\n      { name: translator(\"WijmoGridFilterNotEqual\"), op: operator.NE },\r\n    ];\r\n  };\r\n\r\n  // set column width based on screen size\r\n  const getWidth = (columnDetails) => {\r\n    try {\r\n      const screenWidth = window.screen.width;\r\n      if (screenWidth < 1024) {\r\n        if (columnDetails.WidthPx && columnDetails.WidthPx !== \"\")\r\n          return parseInt(columnDetails.WidthPx);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in width:\", error);\r\n    }\r\n\r\n    return columnDetails.WidthPercentage.includes(\"*\")\r\n      ? columnDetails.WidthPercentage\r\n      : parseInt(columnDetails.WidthPercentage);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pl-1\">\r\n      <ErrorBoundary>\r\n        <TranslationConsumer>\r\n          {(t) => (\r\n            <React.Fragment>\r\n              <div className=\"row pl-0\">\r\n                <div className=\"col-10 col-sm-12 col-md-5 col-lg-6\">\r\n                  <FlexGridSearch\r\n                    class=\"ui single-input\"\r\n                    ref={theSearch}\r\n                    placeholder={t(\"LoadingDetailsView_SearchGrid\")}\r\n                  />\r\n                </div>\r\n                <div className=\"col-10 col-sm-12 col-md-7 col-lg-6\">\r\n                  <div style={{ float: \"right\" }}>\r\n                    {props.columnPickerRequired ? (\r\n                      <Button\r\n                        id=\"colPicker\"\r\n                        actionType=\"button\"\r\n                        type=\"primary\"\r\n                        onClick={(event) => colPickerClickHandler(event)}\r\n                      >\r\n                        <div style={{ display: \"inline-block\" }}>\r\n                          {t(\"WijmoGridColumnPicker\")}\r\n                        </div>\r\n                        <div style={{ display: \"inline-block\" }}>\r\n                          <Icon\r\n                            name=\"caret-down\"\r\n                            className=\"btnIcon\"\r\n                            size=\"small\"\r\n                          />\r\n                        </div>\r\n                      </Button>\r\n                    ) : null}\r\n                    {props.exportRequired ? (\r\n                      <Button\r\n                        actionType=\"button\"\r\n                        type=\"primary\"\r\n                        className=\"mt-3 mt-md-0\"\r\n                        onClick={exportExcel}\r\n                      >\r\n                        <div style={{ display: \"inline-block\" }}>\r\n                          {t(\"WijmoGridExport\")}\r\n                        </div>\r\n                        <div\r\n                          style={{\r\n                            display: \"inline-block\",\r\n                            marginLeft: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <span\r\n                            className=\"icon-Xls\"\r\n                            style={{\r\n                              fontSize: \"17px\",\r\n                              position: \"absolute\",\r\n                              top: \"3px\",\r\n                            }}\r\n                          ></span>\r\n                        </div>\r\n                      </Button>\r\n                    ) : null}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"tableScroll\">\r\n                {props.columnGroupingRequired ? (\r\n                  <GroupPanel\r\n                    className=\"group-panel\"\r\n                    grid={flex}\r\n                    placeholder={t(\"WijmoGridGroupPanelPlaceholder\")}\r\n                  />\r\n                ) : null}\r\n                <ErrorBoundary>\r\n                  <FlexGrid\r\n                    ref={theGrid}\r\n                    autoGenerateColumns={false}\r\n                    alternatingRowStep={0}\r\n                    autoRowHeights={true}\r\n                    headersVisibility=\"Column\"\r\n                    itemsSource={data}\r\n                    selectionMode={wjCore.asEnum(\"None\", wjGrid.SelectionMode)}\r\n                    initialized={gridInitialized}\r\n                    virtualizationThreshold={[0, 10000]}\r\n                    onUpdatedView={saveGridState}\r\n                  >\r\n                    <FlexGridFilter ref={gridFilter} />\r\n                    {props.columns.map((column) => {\r\n                      return (\r\n                        <FlexGridColumn\r\n                          header={t(column.Name)}\r\n                          key={column.Name}\r\n                          binding={column.Name}\r\n                          width={getWidth(column)}\r\n                          minWidth={100}\r\n                          isReadOnly={true}\r\n                          wordWrap={true}\r\n                          align=\"left\"\r\n                        >\r\n                          <FlexGridCellTemplate\r\n                            cellType=\"Cell\"\r\n                            template={(context) => {\r\n                              return (\r\n                                <span\r\n                                  style={\r\n                                    props.conditionalRowStyleCheck == null ||\r\n                                    !props.conditionalRowStyleCheck(\r\n                                      context.item\r\n                                    )\r\n                                      ? null\r\n                                      : { ...props.conditionalRowStyles }\r\n                                  }\r\n                                >\r\n                                  {displayValues(\r\n                                    context.item[column.Name],\r\n                                    column\r\n                                  )}\r\n                                </span>\r\n                              );\r\n                            }}\r\n                          />\r\n                        </FlexGridColumn>\r\n                      );\r\n                    })}\r\n                  </FlexGrid>\r\n                </ErrorBoundary>\r\n                {props.columnPickerRequired ? (\r\n                  <div className=\"column-picker-div\">\r\n                    <ListBox\r\n                      className=\"column-picker\"\r\n                      initialized={(picker) => initializedPicker(picker)}\r\n                    />\r\n                  </div>\r\n                ) : null}\r\n              </div>\r\n              <div className=\"row\">\r\n                <CollectionViewNavigator\r\n                  ref={pagingComponent}\r\n                  className=\"ml-auto mr-auto mt-3\"\r\n                  headerFormat={t(\"WijmoGridPagingTemplate\")}\r\n                  byPage={true}\r\n                  cv={data}\r\n                />\r\n              </div>\r\n            </React.Fragment>\r\n          )}\r\n        </TranslationConsumer>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n};\r\n\r\nWijmoGrid.propTypes = {\r\n  sourceData: PropTypes.array.isRequired,\r\n  columns: PropTypes.array.isRequired,\r\n  exportRequired: PropTypes.bool.isRequired,\r\n  exportFileName: PropTypes.string,\r\n  selectionRequired: PropTypes.bool,\r\n  columnPickerRequired: PropTypes.bool,\r\n  columnGroupingRequired: PropTypes.bool,\r\n  conditionalRowStyleCheck: PropTypes.func,\r\n  conditionalRowStyles: PropTypes.object,\r\n  rowsPerPage: PropTypes.number,\r\n  onSelectionHandle: PropTypes.func,\r\n  parentComponent: PropTypes.string.isRequired,\r\n  onRowClick: PropTypes.func,\r\n  terminalsToShow: PropTypes.number,\r\n  singleSelection: PropTypes.bool,\r\n  selectedItems: PropTypes.array,\r\n};\r\n\r\nWijmoGrid.defaultProps = {\r\n  sourceData: [],\r\n  columns: [],\r\n  exportRequired: true,\r\n  exportFileName: \"Grid.xlsx\",\r\n  selectionRequired: false,\r\n  columnPickerRequired: false,\r\n  columnGroupingRequired: false,\r\n  rowsPerPage: 10,\r\n  terminalsToShow: 2,\r\n  singleSelection: false,\r\n  selectedItems: [],\r\n};\r\n\r\nexport default WijmoGrid;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WijmoGrid from '../../UIBase/Common/WijmoGrid';\r\n\r\nconst WijmoGridComposite = (props) => {\r\n    return (\r\n        <WijmoGrid\r\n            sourceData={props.data}\r\n            columns={props.columns}\r\n            exportRequired={props.exportRequired}\r\n            exportFileName={props.exportFileName}\r\n            columnPickerRequired={props.columnPickerRequired}\r\n            selectionRequired={props.selectionRequired}\r\n            columnGroupingRequired={props.columnGroupingRequired}\r\n            conditionalRowStyleCheck={props.conditionalRowStyleCheck}\r\n            conditionalRowStyles={props.conditionalRowStyles}\r\n            rowsPerPage={props.rowsPerPage}\r\n            onSelectionHandle={props.onSelectionHandle}\r\n            onRowClick={props.onRowClick}\r\n            parentComponent={props.parentComponent}\r\n            terminalsToShow={props.terminalsToShow}\r\n            singleSelection={props.singleSelection}\r\n            selectedItems={props.selectedItems}\r\n        />\r\n    )\r\n}\r\n\r\nWijmoGridComposite.propTypes = {\r\n    data: PropTypes.array.isRequired,\r\n    columns: PropTypes.array.isRequired,\r\n    exportRequired: PropTypes.bool.isRequired,\r\n    exportFileName: PropTypes.string,\r\n    selectionRequired: PropTypes.bool,\r\n    columnPickerRequired: PropTypes.bool,\r\n    columnGroupingRequired: PropTypes.bool,\r\n    conditionalRowStyleCheck: PropTypes.func,\r\n    conditionalRowStyles: PropTypes.object,\r\n    rowsPerPage: PropTypes.number,\r\n    onSelectionHandle: PropTypes.func,\r\n    parentComponent: PropTypes.string.isRequired,\r\n    onRowClick: PropTypes.func,\r\n    terminalsToShow: PropTypes.number,\r\n    singleSelection: PropTypes.bool,\r\n    selectedItems: PropTypes.array\r\n}\r\n\r\nexport default WijmoGridComposite;","import React from \"react\";\r\nimport { Select, Input, Checkbox } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\n\r\nATGInterfaceConfigurationDetails.propTypes = {\r\n    AtgAttributeConfigurationData: PropTypes.object.isRequired,\r\n    modATGTankInfo: PropTypes.object.isRequired,\r\n    validationErrors: PropTypes.object.isRequired,\r\n    onFieldChange: PropTypes.func.isRequired,\r\n    isEnterpriseNode: PropTypes.bool.isRequired,\r\n    handleCellCheck: PropTypes.func.isRequired,\r\n    tankObj: PropTypes.array,\r\n    handleCellDataEdit: PropTypes.func.isRequired,\r\n    handleCellParameterDataEdit:PropTypes.func.isRequired\r\n}\r\n\r\nATGInterfaceConfigurationDetails.defaultProps = {\r\n    isEnterpriseNode: false,\r\n}\r\nexport function ATGInterfaceConfigurationDetails({\r\n    AtgAttributeConfigurationData,\r\n    modATGTankInfo,\r\n    onFieldChange,\r\n    tankObj,\r\n    handleCellCheck,\r\n    handleCellDataEdit,\r\n    handleCellParameterDataEdit\r\n}) {\r\n    console.log(AtgAttributeConfigurationData)\r\n    const handleCustomEditTextBox = (cellData) => {\r\n        console.log(cellData.rowData)\r\n        \r\n        return (\r\n            <Input\r\n                fluid\r\n                value={AtgAttributeConfigurationData[cellData.rowIndex][cellData.field].Point}\r\n                onChange={(value) => handleCellDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n            />\r\n        );\r\n    };\r\n    const handleEditTextBox = (cellData) => {\r\n        return (\r\n            <Input\r\n                fluid\r\n                value={AtgAttributeConfigurationData[cellData.rowIndex][cellData.field].Parameter}\r\n                onChange={(value) => handleCellParameterDataEdit(value, cellData)}\r\n                reserveSpace={false}\r\n            />\r\n        );\r\n    };\r\n    const decimalDisplayValues = (cellData) => {\r\n        const  value  = cellData;\r\n        if (typeof value === \"number\") {\r\n            return value.toLocaleString();\r\n        } else {\r\n            return value;\r\n        }\r\n    };\r\n    const handleCheckBox = (data) => {\r\n        return (\r\n            <Checkbox\r\n                className=\"forceCompleteChkBox\"\r\n                checked={data.value}\r\n                onChange={(cellData) => {\r\n                    handleCellCheck(data, cellData);\r\n                }}\r\n            />\r\n        );\r\n    };\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"detailsContainer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h3>\r\n                                {tankObj.Code +\" - \"+  t(\"AtgConfiguration_Title\")\r\n                                }\r\n                            </h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row marginRightZero tableScroll\">\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={modATGTankInfo.TankCode}\r\n                                indicator=\"required\"\r\n                                disabled={modATGTankInfo.TankCode!== \"\"}\r\n                                label={t(\"TankTransaction_TankCode\")}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={tankObj.Name}\r\n                                label={t(\"TankInfo_Name\")}\r\n                                disabled={true}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={tankObj.TankGroupCode}\r\n                                label={t(\"AtgConfigure_TankGroup\")}\r\n                                disabled={true}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={tankObj.Description}\r\n                                label={t(\"TankInfo_Description\")}\r\n                               disabled={true}\r\n                               reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Input\r\n                                fluid\r\n                                value={tankObj.BaseProductCode}\r\n                                label={t(\"AtgConfigure_BaseProduct\")}\r\n                                disabled={true}\r\n                                reserveSpace={false}\r\n                            />\r\n                        </div>\r\n                        \r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <Select\r\n                                fluid\r\n                                placeholder={t(\"Common_Select\")}\r\n                                label={t(\"AtgConfigure_TankStatus\")}\r\n                                value={tankObj.Active}\r\n                                options={[\r\n                                    { text: t(\"ViewShipment_Ok\"), value: true },\r\n                                    { text: t(\"ViewShipmentStatus_Inactive\"), value: false },\r\n                                ]}\r\n                                reserveSpace={false}\r\n                                search={true}\r\n                                disabled={true}\r\n                                noResultsMessage={t(\"noResultsMessage\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 col-lg-4\">\r\n                            <div class=\"ui input-label\">\r\n                                <span className=\"input-label-message\">\r\n                                    {t(\"AtgConfigure_EnableTankScan\")}\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"input-wrap \" style={{marginLeft: \"8rem\",\r\n                            marginTop: \"-1.3rem\"}}>\r\n                                <Checkbox\r\n                                    key=\"EnableTankScan\"\r\n                                    field=\"EnableTankScan\"\r\n                                    onChange={(data) => onFieldChange(\"EnableTankScan\", data)}\r\n                                    checked={modATGTankInfo.EnableTankScan === null ? \"\" : modATGTankInfo.EnableTankScan}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <DataTable\r\n                                data={AtgAttributeConfigurationData}\r\n                                scrollable={true}\r\n                                scrollHeight=\"320px\"\r\n                            >\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"TankAttributeDescription\"\r\n                                    field=\"TankAttributeDescription\"\r\n                                    header={t(\"AtgConfigure_Atg_Data_Description\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"TankAttributeUOM\"\r\n                                    field=\"TankAttributeUOM\"\r\n                                    header={t(\"AtgConfigure_UOM\")}\r\n                                ></DataTable.Column>\r\n                                \r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"Parameter\"\r\n                                    field=\"Parameter\"\r\n                                    renderer={(cellData)=>decimalDisplayValues(cellData.rowData.Parameter.Point)}\r\n                                    editable={true}\r\n                                    customEditRenderer={handleCustomEditTextBox}\r\n                                    header={t(\"AtgConfigure_PointName\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight\"\r\n                                    key=\"Parameter\"\r\n                                    field=\"Parameter\"\r\n                                    renderer={(cellData) => decimalDisplayValues(cellData.rowData.Parameter.Parameter)}\r\n                                    editable={true}\r\n                                    customEditRenderer={handleEditTextBox}\r\n                                    header={t(\"AtgConfigure_ParameterName\")}\r\n                                ></DataTable.Column>\r\n                                <DataTable.Column\r\n                                    className=\"compColHeight colminWidth\"\r\n                                    key=\"EnableScan\"\r\n                                    field=\"EnableScan\"\r\n                                    header={t(\"AtgConfigure_EnableScan\")}\r\n                                    renderer={handleCheckBox}\r\n                                ></DataTable.Column>\r\n                            </DataTable>\r\n                            </div> \r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    )\r\n}","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport lodash from \"lodash\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { emptyATGTank } from \"../../../JS/DefaultEntities\"\r\nimport { ATGInterfaceConfigurationDetails } from \"../../UIBase/Details/ATGInterfaceConfigurationDetails\";\r\nclass ATGInterfaceConfigurationDetailsComposite extends Component {\r\n    state = {\r\n        TankInfo:lodash.cloneDeep(emptyATGTank),\r\n        modATGTankInfo: {},\r\n        AtgAttributeConfigurationData: {},\r\n        saveEnabled: true\r\n    }\r\n    componentDidMount() {\r\n        try {\r\n            Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n            console.log(this.props.tankObj)\r\n            this.GetTankATGConfiguration(this.props.tankObj.Code)\r\n        } catch (error) {\r\n            console.log(\r\n                \"ATGInterfaceConfigurationDetailsComposite:Error occured on componentDidMount\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    handleChange = (propertyName, data) => {\r\n        try {\r\n            const modATGTankInfo = lodash.cloneDeep(this.state.modATGTankInfo);\r\n            modATGTankInfo[propertyName] = data;\r\n            this.setState({ modATGTankInfo });\r\n        } catch (error) {\r\n            console.log(\r\n                \"TruckReceiptDetailsComposite:Error occured on handleChange\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    GetTankATGConfiguration(TankCode) {\r\n        try {\r\n            axios(\r\n                RestAPIs.GetTankATGConfiguration + \"?TankCode=\" + TankCode,\r\n                Utilities.getAuthenticationObjectforGet(\r\n                    this.props.tokenDetails.tokenInfo\r\n                )\r\n            )\r\n                .then((response) => {\r\n                    var result = response.data;\r\n                    if (result.IsSuccess === true) {\r\n                        let AtgAttributeConfigurationData = result.EntityResult.AtgAttributeConfigurationData;\r\n                        for (let i = 0; i < AtgAttributeConfigurationData.length; i++) {\r\n                            AtgAttributeConfigurationData[i].Parameter.Parameter = AtgAttributeConfigurationData[i].Parameter.Parameter\r\n                            AtgAttributeConfigurationData[i].Parameter.Point = AtgAttributeConfigurationData[i].Parameter.Point\r\n                        }\r\n                        this.setState({\r\n                            modATGTankInfo: result.EntityResult,\r\n                            TankInfo: result.EntityResult,\r\n                            AtgAttributeConfigurationData\r\n                        });\r\n                    } else {\r\n                        console.log(\"Error in GetTankATGConfiguration:\", result.ErrorList);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Error while getting GetTankATGConfiguration:\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"Error while getting GetTankATGConfiguration:\", error);\r\n        }\r\n    }\r\n    handleCellCheck = (data, cellData) => {\r\n        \r\n        try {\r\n            let AtgAttributeConfigurationData = lodash.cloneDeep(this.state.AtgAttributeConfigurationData);\r\n            AtgAttributeConfigurationData[data.rowIndex].EnableScan = cellData;\r\n            this.setState({ AtgAttributeConfigurationData });\r\n        } catch (error) {\r\n            console.log(\"Error in handleCellcheck\", error)\r\n        }\r\n    };\r\n    fillDetails() {\r\n        try {\r\n            let modATGTankInfo = lodash.cloneDeep(this.state.modATGTankInfo);\r\n            let AtgAttributeConfigurationData = lodash.cloneDeep(this.state.AtgAttributeConfigurationData)\r\n            let tankComps = [];\r\n            if (Array.isArray(AtgAttributeConfigurationData)) {\r\n                AtgAttributeConfigurationData.forEach((item) => {\r\n                   \r\n                        tankComps.push(item);\r\n                    }\r\n                )\r\n            }\r\n            modATGTankInfo.AtgAttributeConfigurationData = tankComps;\r\n            // this.setState({ modATGTankInfo });\r\n            return modATGTankInfo;\r\n\r\n        } catch (error) {\r\n            console.log(\"ATGInterfaceDetailsComposite:Error occured on fillAttributeDetails\", error);\r\n        }\r\n    }\r\n    handleSave = () => {\r\n        try {\r\n            this.setState({ saveEnabled: true });\r\n            let AtgConfigurationInfo = this.fillDetails()\r\n            this.UpdateATGConfiguration(AtgConfigurationInfo);\r\n            \r\n        } catch (error) {\r\n            console.log(\r\n                \"PipelineReceiptDetailsComposite:Error occured on handleSave\",\r\n                error\r\n            );\r\n        }\r\n    }\r\n    handleReset = () => {\r\n        try {\r\n            let TankInfo = lodash.cloneDeep(this.state.TankInfo)\r\n            this.setState({\r\n                modATGTankInfo: TankInfo,\r\n                AtgAttributeConfigurationData: TankInfo.AtgAttributeConfigurationData\r\n            });\r\n        } catch (error) {\r\n            console.log(\"ATGInterfaceDetailsComposite:Error occured on handleReset\", error);\r\n        }\r\n    }\r\n    handleCellDataEdit = (newVal, cellData) => {\r\n        try {\r\n            let AtgAttributeConfigurationData = lodash.cloneDeep(\r\n                this.state.AtgAttributeConfigurationData\r\n            );\r\n                AtgAttributeConfigurationData[cellData.rowIndex][cellData.field].Point = newVal;\r\n            this.setState({ AtgAttributeConfigurationData });\r\n        } catch (error) {\r\n            console.log(\r\n                \"BayDetailsComposite:Error occured on handleCellDataEdit\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    handleCellParameterDataEdit = (newVal, cellData) => {\r\n        try {\r\n            let AtgAttributeConfigurationData = lodash.cloneDeep(\r\n                this.state.AtgAttributeConfigurationData\r\n            );\r\n            \r\n            AtgAttributeConfigurationData[cellData.rowIndex][cellData.field].Parameter = newVal;\r\n            this.setState({ AtgAttributeConfigurationData });\r\n        } catch (error) {\r\n            console.log(\r\n                \"BayDetailsComposite:Error occured on handleCellDataEdit\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n    UpdateATGConfiguration = (AtgConfigurationInfo) => {\r\n        \r\n        let modATGTankInfo = lodash.cloneDeep(this.state.modATGTankInfo);\r\n        var notification = {\r\n            messageType: \"critical\",\r\n            message: \"ATG_Details_Saved_Success\",\r\n            messageResultDetails: [\r\n                {\r\n                    keyFields: [\"AtgConfigure_TankCode\"],\r\n                    keyValues: [modATGTankInfo.TankCode],\r\n                    isSuccess: false,\r\n                    errorMessage: \"\",\r\n                },\r\n            ],\r\n        };\r\n        var obj = {\r\n            Entity: AtgConfigurationInfo,\r\n        };\r\n        axios(\r\n            RestAPIs.UpdateATGConfiguration,\r\n            Utilities.getAuthenticationObjectforPost(\r\n                obj,\r\n                this.props.tokenDetails.tokenInfo\r\n            )\r\n        )\r\n            .then((response) => {\r\n                \r\n                var result = response.data;\r\n                notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n                notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n                if (result.IsSuccess === true) {\r\n                    this.setState({ modATGTankInfo }, () => {\r\n                        this.GetTankATGConfiguration(\r\n                            { TankCode: modATGTankInfo.TankCode },\r\n                            \r\n                        );\r\n                    });\r\n                } else {\r\n                    notification.messageResultDetails[0].errorMessage =\r\n                        result.ErrorList[0];\r\n                    this.setState({\r\n                        saveEnabled:true\r\n                    });\r\n                    console.log(\"Error in updatePipelineReceipt:\", result.ErrorList);\r\n                }\r\n                toast(\r\n                    <ErrorBoundary>\r\n                        <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                    </ErrorBoundary>,\r\n                    {\r\n                        autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n                    }\r\n                );\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    saveEnabled: true\r\n                });\r\n                notification.messageResultDetails[0].errorMessage = error;\r\n                toast(\r\n                    <ErrorBoundary>\r\n                        <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n                    </ErrorBoundary>,\r\n                    {\r\n                        autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n                    }\r\n                );\r\n            });\r\n        \r\n\r\n        this.setState({\r\n            modATGTankInfo: this.state.modATGTankInfo,\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ATGInterfaceConfigurationDetails\r\n                modATGTankInfo={this.state.modATGTankInfo}\r\n                AtgAttributeConfigurationData={this.state.AtgAttributeConfigurationData}\r\n                tankObj={this.props.tankObj}\r\n                handleCellCheck={this.handleCellCheck}\r\n                handleCellDataEdit={this.handleCellDataEdit}\r\n                handleCellParameterDataEdit={this.handleCellParameterDataEdit}\r\n                onFieldChange={this.handleChange}\r\n            >\r\n            </ATGInterfaceConfigurationDetails>\r\n                <ErrorBoundary>\r\n                    <TMDetailsUserActions\r\n                        handleBack={this.props.onBack}\r\n                        handleSave={this.handleSave}\r\n                        handleReset={this.handleReset}\r\n                        saveEnabled={this.state.saveEnabled}\r\n                    ></TMDetailsUserActions>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <ToastContainer\r\n                        hideProgressBar={true}\r\n                        closeOnClick={false}\r\n                        closeButton={true}\r\n                        newestOnTop={true}\r\n                        position=\"bottom-right\"\r\n                        toastClassName=\"toast-notification-wrap\"\r\n                    />\r\n                </ErrorBoundary>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n    const mapStateToProps = (state) => {\r\n        return {\r\n            userDetails: state.getUserDetails.userDetails,\r\n            tokenDetails: state.getUserDetails.TokenAuth,\r\n        };\r\n    };\r\n\r\nexport default connect(mapStateToProps)(ATGInterfaceConfigurationDetailsComposite);\r\n\r\nATGInterfaceConfigurationDetailsComposite.propTypes = {\r\n    tankObj: PropTypes.object.isRequired,\r\n    onBack: PropTypes.func.isRequired,\r\n    onSaved: PropTypes.func.isRequired,\r\n    terminalCodes: PropTypes.array.isRequired,\r\n    handleATGConfiguration: PropTypes.func.isRequired,\r\n    activeItem: PropTypes.object,\r\n};","import React, { Component } from \"react\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { TankDetails } from \"../../UIBase/Details/TankDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { emptyTank } from \"../../../JS/DefaultEntities\";\r\nimport { tankValidationDef } from \"../../../JS/ValidationDef\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport lodash from \"lodash\";\r\nimport {\r\n  functionGroups,\r\n  fnTank,\r\n  fnKPIInformation,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport { toast } from \"react-toastify\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport { tankAttributeEntity } from \"../../../JS/AttributeEntity\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Modal, Button } from \"@scuf/common\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiTankDetail } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\nclass TankDetailsComposite extends Component {\r\n  state = {\r\n    tank: lodash.cloneDeep(emptyTank),\r\n    modTank: {},\r\n    validationErrors: Utilities.getInitialValidationErrors(tankValidationDef),\r\n    isReadyToRender: false,\r\n    saveEnabled: false,\r\n    terminalOptions: [],\r\n    tankModeOptions: [],\r\n    tankGroupOptions: [],\r\n    attributeMetaDataList: [],\r\n    modAttributeMetaDataList: [],\r\n    attributeValidationErrors: [],\r\n    tankGroupBaseProduts: {},\r\n    volumeUOMOptions: [],\r\n    weightUOMOptions: [],\r\n    lengthUOMOptions: [],\r\n    densityUOMOptions: [],\r\n    massUOMOptions: [],\r\n    temperatureUOMOptions: [],\r\n    pressureUOMOptions: [],\r\n    isEnableATGButton: false,\r\n    isEnableATGConfigButton: false,\r\n    isBondingEnable: false,\r\n    isATGEnabled: false,\r\n    atgInfoDisable: lodash.cloneDeep(Utilities.atgDisableInfo),\r\n    isChangeBondedStatus: false,\r\n    tankKPIList: [],\r\n    showAuthenticationLayout: false,\r\n    tempTank: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getAttributes(this.props.selectedRow);\r\n      this.GetTankMode();\r\n      if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n        this.getTerminal();\r\n      } else {\r\n        this.getLocalNodeTankGroup();\r\n      }\r\n      this.getUOMList();\r\n      this.getLookUpData();\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsCompositeComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.tank.Code !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.getAttributes(nextProps.selectedRow);\r\n        let validationErrors = { ...this.state.validationErrors };\r\n        Object.keys(validationErrors).forEach((key) => {\r\n          validationErrors[key] = \"\";\r\n        });\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getAttributes(tankRow) {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [tankAttributeEntity],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.tank\r\n                ),\r\n            },\r\n            () => this.getTank(tankRow)\r\n          );\r\n        } else {\r\n          console.log(\"Error in getAttributes:\");\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error while getAttributes:\", error);\r\n    }\r\n  }\r\n\r\n  getTank(tankRow) {\r\n    if (tankRow.Common_Code === undefined) {\r\n      this.setState(\r\n        {\r\n          tank: lodash.cloneDeep(emptyTank),\r\n          modTank: lodash.cloneDeep(emptyTank),\r\n          isReadyToRender: true,\r\n          modAttributeMetaDataList: [],\r\n          tankKPIList: [],\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnTank\r\n          ),\r\n          atgInfoDisable: lodash.cloneDeep(Utilities.atgDisableInfo),\r\n          isEnableATGButton: false,\r\n          isEnableATGConfigButton: false,\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange([]);\r\n          } else {\r\n            this.localNodeAttribute();\r\n          }\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    var keyCode = [\r\n      {\r\n        key: KeyCodes.tankCode,\r\n        value: tankRow.Common_Code,\r\n      },\r\n\r\n      {\r\n        key: KeyCodes.terminalCode,\r\n        value: tankRow.TerminalCode !== \"\" ? tankRow.TerminalCode : null,\r\n      },\r\n    ];\r\n    var obj = {\r\n      keyDataCode: KeyCodes.tankCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetTank,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult.GrossVolume === null)\r\n            result.EntityResult.GrossVolumeUOM = null;\r\n          if (result.EntityResult.NetVolume === null)\r\n            result.EntityResult.NetVolumeUOM = null;\r\n          this.setState(\r\n            {\r\n              isReadyToRender: true,\r\n              tank: lodash.cloneDeep(result.EntityResult),\r\n              modTank: lodash.cloneDeep(result.EntityResult),\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnTank\r\n              ),\r\n            },\r\n            () => {\r\n              this.handleTankGroupChange(result.EntityResult.TankGroupCode);\r\n              this.getKPIList(result.EntityResult.Code);\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                this.handleTerminalChange(result.EntityResult.TerminalCode);\r\n                this.terminalSelectionChange([\r\n                  result.EntityResult.TerminalCode,\r\n                ]);\r\n              } else {\r\n                this.localNodeAttribute();\r\n              }\r\n              this.GetTankATGConfiguration(result.EntityResult.Code);\r\n            }\r\n          );\r\n        } else {\r\n          this.setState({\r\n            tank: lodash.cloneDeep(emptyTank),\r\n            modTank: lodash.cloneDeep(emptyTank),\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in getTank:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Tank:\", error, tankRow);\r\n      });\r\n  }\r\n\r\n  GetTankATGConfiguration(TankCode) {\r\n    const atgInfoDisable = lodash.cloneDeep(this.state.atgInfoDisable);\r\n    const isATGEnabled = lodash.cloneDeep(this.state.isATGEnabled);\r\n\r\n    try {\r\n      axios(\r\n        RestAPIs.GetTankATGConfiguration + \"?TankCode=\" + TankCode,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult.EnableTankScan && isATGEnabled === true) {\r\n              result.EntityResult.AtgAttributeConfigurationData.forEach(\r\n                (atgconfig) => {\r\n                  if (atgconfig.EnableScan === true) {\r\n                    if (atgconfig.TankAttributeCode === \"TankMode\")\r\n                      atgInfoDisable[\"TankMode\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"Density\")\r\n                      atgInfoDisable[\"Density\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"AvailableRoom\")\r\n                      atgInfoDisable[\"AvailableRoom\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"Temperature\")\r\n                      atgInfoDisable[\"Temperature\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"TankLevel\")\r\n                      atgInfoDisable[\"TankLevel\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"GrossVolume\")\r\n                      atgInfoDisable[\"GrossVolume\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"NetVolume\")\r\n                      atgInfoDisable[\"NetVolume\"] = true;\r\n                    else if (\r\n                      atgconfig.TankAttributeCode === \"VapourGrossQuantity\"\r\n                    )\r\n                      atgInfoDisable[\"VapourGrossQuantity\"] = true;\r\n                    else if (\r\n                      atgconfig.TankAttributeCode === \"VapourNetQuantity\"\r\n                    )\r\n                      atgInfoDisable[\"VapourNetQuantity\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"Pressure\")\r\n                      atgInfoDisable[\"Pressure\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"WaterLevel\")\r\n                      atgInfoDisable[\"WaterLevel\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"WaterVolume\")\r\n                      atgInfoDisable[\"WaterVolume\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"Mass\")\r\n                      atgInfoDisable[\"Mass\"] = true;\r\n                    else if (atgconfig.TankAttributeCode === \"NetMass\")\r\n                      atgInfoDisable[\"NetMass\"] = true;\r\n                  }\r\n                }\r\n              );\r\n            }\r\n            this.setState({\r\n              isEnableATGButton: result.EntityResult.EnableTankScan,\r\n              atgInfoDisable,\r\n            });\r\n          } else {\r\n            console.log(\"Error in GetTankATGConfiguration:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting GetTankATGConfiguration:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"Error while getting GetTankATGConfiguration:\", error);\r\n    }\r\n  }\r\n\r\n  getTerminal() {\r\n    axios(\r\n      RestAPIs.GetTerminals,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let terminalOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ terminalOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getTerminal:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Terminal:\", error);\r\n      });\r\n  }\r\n\r\n  GetTankMode() {\r\n    axios(\r\n      RestAPIs.GetTankMode,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            let tankModeOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            this.setState({ tankModeOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetTankMode:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting TankMode:\", error);\r\n      });\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modTank = lodash.cloneDeep(this.state.modTank);\r\n      const tank = lodash.cloneDeep(this.state.tank);\r\n\r\n      if (propertyName === \"IsBonded\") {\r\n        if (tank.Code !== \"\") {\r\n          if (tank.IsBonded !== data)\r\n            this.setState({ isChangeBondedStatus: true });\r\n        } else {\r\n          this.setState({ isChangeBondedStatus: true });\r\n        }\r\n      }\r\n\r\n      modTank[propertyName] = data;\r\n      this.setState({ modTank });\r\n\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      if (tankValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          tankValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite:Error occured on handleChange\", error);\r\n    }\r\n  };\r\n\r\n  handleTerminalChange = (data) => {\r\n    try {\r\n      const modTank = lodash.cloneDeep(this.state.modTank);\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      modTank[\"TerminalCode\"] = data;\r\n      // modTank[\"TankGroupCode\"] = \"\";\r\n      //modTank[\"BaseProductCode\"] = \"\";\r\n      modTank[\"BPDensityUOM\"] = \"\";\r\n      modTank[\"BPMinDensity\"] = \"\";\r\n      modTank[\"BPMaxDensity\"] = \"\";\r\n\r\n      validationErrors[\"TerminalCode\"] = \"\";\r\n      this.terminalSelectionChange([data]);\r\n      this.setState({ modTank, validationErrors }, () =>\r\n        this.getTankGroup(data)\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankGroupDetailsComposite:Error occured on handleTerminalChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleTankGroupChange = (data) => {\r\n    try {\r\n      const modTank = lodash.cloneDeep(this.state.modTank);\r\n      const tankGroupBaseProduts = lodash.cloneDeep(\r\n        this.state.tankGroupBaseProduts\r\n      );\r\n\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      modTank[\"TankGroupCode\"] = data;\r\n      modTank[\"BaseProductCode\"] = tankGroupBaseProduts[data];\r\n      modTank[\"BPDensityUOM\"] = \"\";\r\n      modTank[\"BPMinDensity\"] = \"\";\r\n      modTank[\"BPMaxDensity\"] = \"\";\r\n      validationErrors[\"TankGroupCode\"] = \"\";\r\n      this.setState({ modTank, validationErrors }, () =>\r\n        this.GetProductData(data)\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on handleTankGroupChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  GetProductData(TankGroupCode) {\r\n    try {\r\n      const modTank = lodash.cloneDeep(this.state.modTank);\r\n\r\n      axios(\r\n        RestAPIs.GetProductData + \"?TankGroupCode=\" + TankGroupCode,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            if (\r\n              result.EntityResult !== null &&\r\n              result.EntityResult !== undefined\r\n            ) {\r\n              modTank[\"BPDensityUOM\"] = result.EntityResult.DensityUOM;\r\n              if (\r\n                result.EntityResult.MinDensity !== null &&\r\n                result.EntityResult.MinDensity !== \"\"\r\n              )\r\n                modTank[\"BPMinDensity\"] = parseFloat(\r\n                  result.EntityResult.MinDensity\r\n                );\r\n              if (\r\n                result.EntityResult.MaxDensity !== null &&\r\n                result.EntityResult.MaxDensity !== \"\"\r\n              )\r\n                modTank[\"BPMaxDensity\"] = parseFloat(\r\n                  result.EntityResult.MaxDensity\r\n                );\r\n              this.setState({ modTank });\r\n            }\r\n          } else {\r\n            console.log(\"Error in GetProductData:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting ProductData:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on GetProductData\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getTankGroup(terminalcode) {\r\n    axios(\r\n      RestAPIs.GetTankGroupData + \"?terminalcode=\" + terminalcode,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        let tankGroupOptions = [];\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            result.EntityResult !== undefined\r\n          ) {\r\n            Object.keys(result.EntityResult).forEach((element) => {\r\n              tankGroupOptions.push({ text: element, value: element });\r\n            });\r\n          }\r\n          this.setState({\r\n            tankGroupOptions,\r\n            tankGroupBaseProduts: result.EntityResult,\r\n          });\r\n        } else {\r\n          console.log(\"Error in getTankGroup:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting TankGroup:\", error);\r\n      });\r\n  }\r\n\r\n  getLocalNodeTankGroup() {\r\n    axios(\r\n      RestAPIs.GetTankGroupData,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        let tankGroupOptions = [];\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            result.EntityResult !== undefined\r\n          ) {\r\n            Object.keys(result.EntityResult).forEach((element) => {\r\n              tankGroupOptions.push({ text: element, value: element });\r\n            });\r\n          }\r\n          this.setState({\r\n            tankGroupOptions,\r\n            tankGroupBaseProduts: result.EntityResult,\r\n          });\r\n        } else {\r\n          console.log(\"Error in getLocalNodeTankGroup:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting LocalNodeTankGroup:\", error);\r\n      });\r\n  }\r\n\r\n  getUOMList() {\r\n    axios(\r\n      RestAPIs.GetUOMList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            let weightUOMs = result.EntityResult.MASS;\r\n            let volumeUOMOptions = [];\r\n            let massUOMOptions = [];\r\n            weightUOMs.forEach((weightOption) => {\r\n              massUOMOptions.push({\r\n                text: weightOption,\r\n                value: weightOption,\r\n              });\r\n            });\r\n\r\n            let volumeUOMs = result.EntityResult.VOLUME;\r\n\r\n            volumeUOMs.forEach((volumeOption) => {\r\n              volumeUOMOptions.push({\r\n                text: volumeOption,\r\n                value: volumeOption,\r\n              });\r\n            });\r\n\r\n            let lengthUOMs = result.EntityResult.LENGTH;\r\n            let lengthUOMOptions = [];\r\n            lengthUOMs.forEach((lengthOption) => {\r\n              lengthUOMOptions.push({\r\n                text: lengthOption,\r\n                value: lengthOption,\r\n              });\r\n            });\r\n            let densityUOMs = result.EntityResult.DENSITY;\r\n            let densityUOMOptions = [];\r\n            densityUOMs.forEach((densityOption) => {\r\n              densityUOMOptions.push({\r\n                text: densityOption,\r\n                value: densityOption,\r\n              });\r\n            });\r\n\r\n            let temperatureUOMs = result.EntityResult.TEMPERATURE;\r\n            let temperatureUOMOptions = [];\r\n            temperatureUOMs.forEach((temperatureOption) => {\r\n              temperatureUOMOptions.push({\r\n                text: temperatureOption,\r\n                value: temperatureOption,\r\n              });\r\n            });\r\n\r\n            let pressureUOMs = result.EntityResult.PRESSURE;\r\n            let pressureUOMOptions = [];\r\n            pressureUOMs.forEach((pressureOption) => {\r\n              pressureUOMOptions.push({\r\n                text: pressureOption,\r\n                value: pressureOption,\r\n              });\r\n            });\r\n\r\n            this.setState({\r\n              volumeUOMOptions,\r\n              lengthUOMOptions,\r\n              densityUOMOptions,\r\n              massUOMOptions,\r\n              temperatureUOMOptions,\r\n              pressureUOMOptions,\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getUOM:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting getUOM:\", error);\r\n      });\r\n  }\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n      const tank = lodash.cloneDeep(this.state.tank);\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modTank: { ...tank },\r\n          selectedCompRow: [],\r\n          validationErrors,\r\n          modAttributeMetaDataList: [],\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange([tank.TerminalCode]);\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            this.localNodeAttribute();\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite:Error occured on handleReset\", error);\r\n    }\r\n  };\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n  handleSave = () => {\r\n    try {\r\n      let modTank = this.fillDetails();\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      if (this.validateSave(modTank, attributeList)) {\r\n        let showAuthenticationLayout =\r\n          this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n            ? true\r\n            : false;\r\n        let tempTank = lodash.cloneDeep(modTank);\r\n        this.setState({ showAuthenticationLayout, tempTank }, () => {\r\n          if (showAuthenticationLayout === false) {\r\n            this.saveTank();\r\n          }\r\n});\r\n\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite:Error occured on handleSave\", error);\r\n    }\r\n  };\r\n\r\n  saveTank = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempTank = lodash.cloneDeep(this.state.tempTank);\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      tempTank = this.convertStringtoDecimal(tempTank, attributeList);\r\n      this.state.tank.Code === \"\"\r\n        ? this.createTank(tempTank)\r\n        : this.updateTank(tempTank);\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite : Error in saveTank\");\r\n    }\r\n  };\r\n\r\n  fillDetails() {\r\n    try {\r\n      let modTank = lodash.cloneDeep(this.state.modTank);\r\n\r\n      modTank.Capacity =\r\n        modTank.Capacity !== null && modTank.Capacity !== \"\"\r\n          ? modTank.Capacity.toLocaleString()\r\n          : null;\r\n      modTank.AvailableRoom =\r\n        modTank.AvailableRoom !== null && modTank.AvailableRoom !== \"\"\r\n          ? modTank.AvailableRoom.toLocaleString()\r\n          : null;\r\n      modTank.Density =\r\n        modTank.Density !== null && modTank.Density !== \"\"\r\n          ? modTank.Density.toLocaleString()\r\n          : null;\r\n      modTank.GrossMass =\r\n        modTank.GrossMass !== null && modTank.GrossMass !== \"\"\r\n          ? modTank.GrossMass.toLocaleString()\r\n          : null;\r\n      modTank.GrossVolume =\r\n        modTank.GrossVolume !== null && modTank.GrossVolume !== \"\"\r\n          ? modTank.GrossVolume.toLocaleString()\r\n          : null;\r\n      modTank.NetVolume =\r\n        modTank.NetVolume !== null && modTank.NetVolume !== \"\"\r\n          ? modTank.NetVolume.toLocaleString()\r\n          : null;\r\n      modTank.WaterVolume =\r\n        modTank.WaterVolume !== null && modTank.WaterVolume !== \"\"\r\n          ? modTank.WaterVolume.toLocaleString()\r\n          : null;\r\n      modTank.TankLevel =\r\n        modTank.TankLevel !== null && modTank.TankLevel !== \"\"\r\n          ? modTank.TankLevel.toLocaleString()\r\n          : null;\r\n      modTank.WaterLevel =\r\n        modTank.WaterLevel !== null && modTank.WaterLevel !== \"\"\r\n          ? modTank.WaterLevel.toLocaleString()\r\n          : null;\r\n      modTank.Temperature =\r\n        modTank.Temperature !== null && modTank.Temperature !== \"\"\r\n          ? modTank.Temperature.toLocaleString()\r\n          : null;\r\n      modTank.Pressure =\r\n        modTank.Pressure !== null && modTank.Pressure !== \"\"\r\n          ? modTank.Pressure.toLocaleString()\r\n          : null;\r\n      modTank.VapourGrossQuantity =\r\n        modTank.VapourGrossQuantity !== null &&\r\n        modTank.VapourGrossQuantity !== \"\"\r\n          ? modTank.VapourGrossQuantity.toLocaleString()\r\n          : null;\r\n      modTank.VapourNetQuantity =\r\n        modTank.VapourNetQuantity !== null && modTank.VapourNetQuantity !== \"\"\r\n          ? modTank.VapourNetQuantity.toLocaleString()\r\n          : null;\r\n\r\n      if (modTank.GrossMass === null || modTank.GrossMass === \"\")\r\n        modTank.GrossMassUOM = \"\";\r\n      if (modTank.GrossVolume === null || modTank.GrossVolume === \"\")\r\n        modTank.GrossVolumeUOM = \"\";\r\n      if (modTank.NetVolume === null || modTank.NetVolume === \"\")\r\n        modTank.NetVolumeUOM = \"\";\r\n      if (modTank.WaterVolume === null || modTank.WaterVolume === \"\")\r\n        modTank.WaterVolumeUOM = \"\";\r\n      if (modTank.Pressure === null || modTank.Pressure === \"\")\r\n        modTank.PressureUOM = \"\";\r\n\r\n      return modTank;\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite:Error occured on fillDetails\", error);\r\n    }\r\n  }\r\n\r\n  validateSave(modTank, attributeList) {\r\n    const validationErrors = { ...this.state.validationErrors };\r\n    Object.keys(tankValidationDef).forEach(function (key) {\r\n      if (modTank[key] !== undefined)\r\n        validationErrors[key] = Utilities.validateField(\r\n          tankValidationDef[key],\r\n          modTank[key]\r\n        );\r\n    });\r\n\r\n    if (modTank.Active !== this.state.tank.Active) {\r\n      if (modTank.Remarks === null || modTank.Remarks === \"\") {\r\n        validationErrors[\"Remarks\"] = \"BaseProductInfo_EnterRemarks\";\r\n      }\r\n    }\r\n\r\n    if (\r\n      modTank.GrossMass !== null &&\r\n      (modTank.GrossMassUOM === null || modTank.GrossMassUOM === \"\")\r\n    ) {\r\n      validationErrors[\"GrossMassUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      modTank.GrossVolume !== null &&\r\n      (modTank.GrossVolumeUOM === null || modTank.GrossVolumeUOM === \"\")\r\n    ) {\r\n      validationErrors[\"GrossVolumeUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      modTank.NetVolume !== null &&\r\n      (modTank.NetVolumeUOM === null || modTank.NetVolumeUOM === \"\")\r\n    ) {\r\n      validationErrors[\"NetVolumeUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      modTank.WaterVolume !== null &&\r\n      (modTank.WaterVolumeUOM === null || modTank.WaterVolumeUOM === \"\")\r\n    ) {\r\n      validationErrors[\"WaterVolumeUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      (modTank.TankLevel !== null || modTank.WaterLevel !== null) &&\r\n      (modTank.LevelUOM === null || modTank.LevelUOM === \"\")\r\n    ) {\r\n      validationErrors[\"LevelUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      modTank.Temperature !== null &&\r\n      (modTank.TemperatureUOM === null || modTank.TemperatureUOM === \"\")\r\n    ) {\r\n      validationErrors[\"TemperatureUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      modTank.Pressure !== null &&\r\n      (modTank.PressureUOM === null || modTank.PressureUOM === \"\")\r\n    ) {\r\n      validationErrors[\"PressureUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n    if (\r\n      (modTank.VapourGrossQuantity !== null ||\r\n        modTank.VapourNetQuantity !== null) &&\r\n      (modTank.VapourUOM === null || modTank.VapourUOM === \"\")\r\n    ) {\r\n      validationErrors[\"VapourUOM\"] = \"TankInfo_UOMRequired\";\r\n    }\r\n\r\n    if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n      if (modTank.TerminalCode === null || modTank.TerminalCode === \"\") {\r\n        validationErrors[\"TerminalCode\"] = \"TankGroupInfo_TerminalRequired\";\r\n      } else {\r\n        validationErrors[\"TerminalCode\"] = \"\";\r\n      }\r\n    }\r\n\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({ validationErrors, attributeValidationErrors });\r\n\r\n    var returnValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  convertStringtoDecimal(modTank, attributeList) {\r\n    try {\r\n      if (modTank.Capacity !== null && modTank.Capacity !== \"\") {\r\n        modTank.Capacity = Utilities.convertStringtoDecimal(modTank.Capacity);\r\n      }\r\n      if (modTank.AvailableRoom !== null && modTank.AvailableRoom !== \"\") {\r\n        modTank.AvailableRoom = Utilities.convertStringtoDecimal(\r\n          modTank.AvailableRoom\r\n        );\r\n      }\r\n      if (modTank.Density !== null && modTank.Density !== \"\") {\r\n        modTank.Density = Utilities.convertStringtoDecimal(modTank.Density);\r\n      }\r\n      if (modTank.GrossMass !== null && modTank.GrossMass !== \"\") {\r\n        modTank.GrossMass = Utilities.convertStringtoDecimal(modTank.GrossMass);\r\n      }\r\n      if (modTank.GrossVolume !== null && modTank.GrossVolume !== \"\") {\r\n        modTank.GrossVolume = Utilities.convertStringtoDecimal(\r\n          modTank.GrossVolume\r\n        );\r\n      }\r\n      if (modTank.NetVolume !== null && modTank.NetVolume !== \"\") {\r\n        modTank.NetVolume = Utilities.convertStringtoDecimal(modTank.NetVolume);\r\n      }\r\n      if (modTank.WaterVolume !== null && modTank.WaterVolume !== \"\") {\r\n        modTank.WaterVolume = Utilities.convertStringtoDecimal(\r\n          modTank.WaterVolume\r\n        );\r\n      }\r\n      if (modTank.TankLevel !== null && modTank.TankLevel !== \"\") {\r\n        modTank.TankLevel = Utilities.convertStringtoDecimal(modTank.TankLevel);\r\n      }\r\n      if (modTank.WaterLevel !== null && modTank.WaterLevel !== \"\") {\r\n        modTank.WaterLevel = Utilities.convertStringtoDecimal(\r\n          modTank.WaterLevel\r\n        );\r\n      }\r\n      if (modTank.Temperature !== null && modTank.Temperature !== \"\") {\r\n        modTank.Temperature = Utilities.convertStringtoDecimal(\r\n          modTank.Temperature\r\n        );\r\n      }\r\n      if (modTank.Pressure !== null && modTank.Pressure !== \"\") {\r\n        modTank.Pressure = Utilities.convertStringtoDecimal(modTank.Pressure);\r\n      }\r\n      if (\r\n        modTank.VapourGrossQuantity !== null &&\r\n        modTank.VapourGrossQuantity !== \"\"\r\n      ) {\r\n        modTank.VapourGrossQuantity = Utilities.convertStringtoDecimal(\r\n          modTank.VapourGrossQuantity\r\n        );\r\n      }\r\n      if (\r\n        modTank.VapourNetQuantity !== null &&\r\n        modTank.VapourNetQuantity !== \"\"\r\n      ) {\r\n        modTank.VapourNetQuantity = Utilities.convertStringtoDecimal(\r\n          modTank.VapourNetQuantity\r\n        );\r\n      }\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modTank.Attributes = Utilities.fillAttributeDetails(attributeList);\r\n      return modTank;\r\n    } catch (err) {\r\n      console.log(\"convertStringtoDecimal error Tank Details\", err);\r\n    }\r\n  }\r\n\r\n  createTank(modTank) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.tankCode,\r\n        value: modTank.Code,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.tankCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modTank,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"TankInfo_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"TankTransaction_TankCode\"],\r\n          keyValues: [modTank.Code],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.CreateTank,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnTank\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () =>\r\n              this.getTank({\r\n                Common_Code: modTank.Code,\r\n                TerminalCode: modTank.TerminalCode,\r\n              })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnTank\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in createTank:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modTank, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnTank\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modTank, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  updateTank(modTank) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.tankCode,\r\n        value: modTank.Code,\r\n      },\r\n      {\r\n        key: KeyCodes.terminalCode,\r\n        value: modTank.TerminalCode,\r\n      },\r\n    ];\r\n    let obj = {\r\n      keyDataCode: KeyCodes.tankCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modTank,\r\n    };\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"TankInfo_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"TankTransaction_TankCode\"],\r\n          keyValues: [modTank.Code],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateTank,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              saveEnabled: Utilities.isInFunction(\r\n                this.props.userDetails.EntityResult.FunctionsList,\r\n                functionGroups.modify,\r\n                fnTank\r\n              ),\r\n              showAuthenticationLayout: false,\r\n            },\r\n            () =>\r\n              this.getTank({\r\n                Common_Code: modTank.Code,\r\n                TerminalCode: modTank.TerminalCode,\r\n              })\r\n          );\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnTank\r\n            ),\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in update Tank:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(this.state.modTank, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.modify,\r\n            fnTank\r\n          ),\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(this.state.modTank, \"modify\", notification);\r\n      });\r\n  }\r\n\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var modAttributeMetaDataList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.attributeMetaDataList\r\n        );\r\n        modAttributeMetaDataList = lodash.cloneDeep(\r\n          this.state.modAttributeMetaDataList\r\n        );\r\n        const attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        var modTank = lodash.cloneDeep(this.state.modTank);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = modAttributeMetaDataList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.tank.forEach(function (attributeMetaData) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                var Attributevalue = modTank.Attributes.find(\r\n                  (baseproductAttribute) => {\r\n                    return baseproductAttribute.TerminalCode === terminal;\r\n                  }\r\n                );\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute =\r\n                      Attributevalue.ListOfAttributeData.find((x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      });\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        modAttributeMetaDataList = [];\r\n        modAttributeMetaDataList = attributesTerminalsList;\r\n        modAttributeMetaDataList = Utilities.attributesConvertoDecimal(\r\n          modAttributeMetaDataList\r\n        );\r\n\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.setState({ modAttributeMetaDataList, attributeValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleAttributeDataChange = (attribute, value) => {\r\n    try {\r\n      let matchedAttributes = [];\r\n      let modAttributeMetaDataList = lodash.cloneDeep(\r\n        this.state.modAttributeMetaDataList\r\n      );\r\n      let matchedAttributesList = modAttributeMetaDataList.filter(\r\n        (modattribute) => modattribute.TerminalCode === attribute.TerminalCode\r\n      );\r\n      if (\r\n        matchedAttributesList.length > 0 &&\r\n        Array.isArray(matchedAttributesList[0].attributeMetaDataList)\r\n      ) {\r\n        matchedAttributes =\r\n          matchedAttributesList[0].attributeMetaDataList.filter(\r\n            (modattribute) => modattribute.Code === attribute.Code\r\n          );\r\n      }\r\n      if (matchedAttributes.length > 0) {\r\n        matchedAttributes[0].DefaultValue = value;\r\n      }\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors, modAttributeMetaDataList });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on handleAttributeDataChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (\r\n        Array.isArray(attributeMetaDataList.tank) &&\r\n        attributeMetaDataList.tank.length > 0\r\n      ) {\r\n        this.terminalSelectionChange([\r\n          attributeMetaDataList.tank[0].TerminalCode,\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors:\r\n          Utilities.getAttributeInitialValidationErrors(\r\n            attributeMetaDataList.tank\r\n          ),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"handleAttributeValidationError:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleReadATGData = () => {\r\n    try {\r\n      let modTank = lodash.cloneDeep(this.state.modTank);\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"TankInfo_ATGDataUpdateSuccess\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"TankTransaction_TankCode\"],\r\n            keyValues: [modTank.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.GetATGData + \"?TankCode=\" + modTank.Code,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              modTank: lodash.cloneDeep(result.EntityResult),\r\n            },\r\n            () => {\r\n              this.handleUOMValues();\r\n            }\r\n          );\r\n        } else {\r\n          if (result.EntityResult !== null) {\r\n            this.setState(\r\n              {\r\n                modTank: lodash.cloneDeep(result.EntityResult),\r\n              },\r\n              () => {\r\n                this.handleUOMValues();\r\n              }\r\n            );\r\n          }\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on handleReadATGData\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleUOMValues() {\r\n    const modTank = lodash.cloneDeep(this.state.modTank);\r\n    if (modTank.GrossMass === null || modTank.GrossMass === \"\")\r\n      modTank.GrossMassUOM = \"\";\r\n    if (modTank.GrossVolume === null || modTank.GrossVolume === \"\")\r\n      modTank.GrossVolumeUOM = \"\";\r\n    if (modTank.NetVolume === null || modTank.NetVolume === \"\")\r\n      modTank.NetVolumeUOM = \"\";\r\n    if (modTank.WaterVolume === null || modTank.WaterVolume === \"\")\r\n      modTank.WaterVolumeUOM = \"\";\r\n    if (modTank.Pressure === null || modTank.Pressure === \"\")\r\n      modTank.PressureUOM = \"\";\r\n    if (modTank.Temperature === null || modTank.Temperature === \"\")\r\n      modTank.TemperatureUOM = \"\";\r\n    if (\r\n      (modTank.VapourGrossQuantity === null ||\r\n        modTank.VapourGrossQuantity === \"\") &&\r\n      (modTank.VapourNetQuantity === null || modTank.VapourNetQuantity === \"\")\r\n    )\r\n      modTank.VapourUOM = \"\";\r\n    if (\r\n      (modTank.WaterLevel === null || modTank.WaterLevel === \"\") &&\r\n      (modTank.TankLevel === null || modTank.TankLevel === \"\")\r\n    )\r\n      modTank.LevelUOM = \"\";\r\n    this.setState({ modTank });\r\n  }\r\n\r\n  handleSaveATGData = () => {\r\n    try {\r\n      let modTank = lodash.cloneDeep(this.state.modTank);\r\n      let obj = {\r\n        keyDataCode: KeyCodes.tankCode,\r\n        Entity: modTank,\r\n      };\r\n      let notification = {\r\n        messageType: \"critical\",\r\n        message: \"TankInfo_ReadATGDataSuccess\",\r\n        messageResultDetails: [\r\n          {\r\n            keyFields: [\"TankTransaction_TankCode\"],\r\n            keyValues: [modTank.Code],\r\n            isSuccess: false,\r\n            errorMessage: \"\",\r\n          },\r\n        ],\r\n      };\r\n      axios(\r\n        RestAPIs.SaveATGData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          obj,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n        }\r\n        toast(\r\n          <ErrorBoundary>\r\n            <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n          </ErrorBoundary>,\r\n          {\r\n            autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n          }\r\n        );\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankDetailsComposite:Error occured on handleSaveATGData\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getLookUpData() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=Bonding\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            isBondingEnable:\r\n              result.EntityResult[\"EnableBondingNon-Bonding\"] === \"True\"\r\n                ? true\r\n                : false,\r\n          });\r\n        }\r\n      });\r\n\r\n      if (!this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n        axios(\r\n          RestAPIs.GetLookUpData + \"?LookUpTypeCode=ATG\",\r\n          Utilities.getAuthenticationObjectforGet(\r\n            this.props.tokenDetails.tokenInfo\r\n          )\r\n        ).then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              isATGEnabled:\r\n                result.EntityResult[\"ATGEnabled\"] === \"True\" ? true : false,\r\n            });\r\n            if (result.EntityResult[\"ATGEnabled\"] === \"True\") {\r\n              if (\r\n                this.props.selectedRow.TankList_ATGConfiguration !==\r\n                  undefined &&\r\n                this.props.selectedRow.TankList_ATGConfiguration !== null\r\n              ) {\r\n                this.setState({ isEnableATGConfigButton: true });\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(\"TankDetailsComposite:Error occured on getLookUpData\", error);\r\n    }\r\n  }\r\n\r\n  handleActiveStatusChange = (value) => {\r\n    try {\r\n      let modTank = lodash.cloneDeep(this.state.modTank);\r\n      modTank.Active = value;\r\n      if (modTank.Active !== this.state.tank.Active) modTank.Remarks = \"\";\r\n      this.setState({ modTank });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  handleATGConfig = () => {\r\n    try {\r\n      let modTank = lodash.cloneDeep(this.state.modTank);\r\n      this.props.handleATGConfiguration(modTank, this.props.selectedRow);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  confirmChangeBondedStatus = () => {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <Modal open={this.state.isChangeBondedStatus} size=\"small\">\r\n            <Modal.Content>\r\n              <div className=\"col col-lg-12\">\r\n                <h5>{t(\"Tank_ChangeBondedStatus\")}</h5>\r\n              </div>\r\n            </Modal.Content>\r\n            <Modal.Footer>\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"AccessCardInfo_Ok\")}\r\n                onClick={() => {\r\n                  this.setState({ isChangeBondedStatus: false }, () => {\r\n                    this.bondedStatusChanged();\r\n                  });\r\n                }}\r\n              />\r\n              <Button\r\n                type=\"primary\"\r\n                content={t(\"Cancel\")}\r\n                onClick={() => {\r\n                  this.setState({ isChangeBondedStatus: false });\r\n                }}\r\n              />\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  };\r\n\r\n  bondedStatusChanged = () => {\r\n    try {\r\n      let modTank = lodash.cloneDeep(this.state.modTank);\r\n      modTank.Remarks = \"\";\r\n      this.setState({ modTank });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  //Get KPI for Tanks\r\n  getKPIList(tankCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      let objKPIRequestData = {\r\n        PageName: kpiTankDetail,\r\n        InputParameters: [{ key: \"TankCode\", value: tankCode }],\r\n      };\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({ tankKPIList: result.EntityResult.ListKPIDetails });\r\n          } else {\r\n            this.setState({ tankKPIList: [] });\r\n            console.log(\"Error in tank KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Tank KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n  render() {\r\n    const listOptions = {\r\n      terminalCode: this.state.terminalOptions,\r\n      tankMode: this.state.tankModeOptions,\r\n      tankGroup: this.state.tankGroupOptions,\r\n      volumeUOM: this.state.volumeUOMOptions,\r\n      densityUOM: this.state.densityUOMOptions,\r\n      massUOM: this.state.massUOMOptions,\r\n      lengthUOM: this.state.lengthUOMOptions,\r\n      temperatureUOM: this.state.temperatureUOMOptions,\r\n      pressureUOM: this.state.pressureUOMOptions,\r\n    };\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"BaseProductInfo_LastUpdated\",\r\n        fieldValue:\r\n          new Date(this.state.modTank.UpdatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modTank.UpdatedTime).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"BaseProductInfo_LastActivatedTime\",\r\n        fieldValue:\r\n          this.state.modTank.LastActive !== undefined &&\r\n          this.state.modTank.LastActive !== null\r\n            ? new Date(this.state.modTank.LastActive).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(this.state.modTank.LastActive).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"BaseProductInfo_Created\",\r\n        fieldValue:\r\n          new Date(this.state.modTank.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modTank.CreatedTime).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"TankInfo_ATGLastUpdatedTime\",\r\n        fieldValue:\r\n          this.state.modTank.AtgLastUpdatedTime !== undefined &&\r\n          this.state.modTank.AtgLastUpdatedTime !== null\r\n            ? new Date(\r\n                this.state.modTank.AtgLastUpdatedTime\r\n              ).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(\r\n                this.state.modTank.AtgLastUpdatedTime\r\n              ).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n    ];\r\n\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.tank.Code}\r\n            newEntityName=\"TankInfo_NewTank\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <TMDetailsKPILayout KPIList={this.state.tankKPIList}>\r\n          {\" \"}\r\n        </TMDetailsKPILayout>\r\n        <ErrorBoundary>\r\n          <TankDetails\r\n            tank={this.state.tank}\r\n            modTank={this.state.modTank}\r\n            listOptions={listOptions}\r\n            validationErrors={this.state.validationErrors}\r\n            onFieldChange={this.handleChange}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            modAttributeMetaDataList={this.state.modAttributeMetaDataList}\r\n            onAttributeDataChange={this.handleAttributeDataChange}\r\n            onTerminalChange={this.handleTerminalChange}\r\n            onTankGroupChange={this.handleTankGroupChange}\r\n            isEnableATGButton={this.state.isEnableATGButton}\r\n            atgInfoDisable={this.state.atgInfoDisable}\r\n            handleReadATGData={this.handleReadATGData}\r\n            handleSaveATGData={this.handleSaveATGData}\r\n            isBondingEnable={this.state.isBondingEnable}\r\n            isATGEnabled={this.state.isATGEnabled}\r\n            onActiveStatusChange={this.handleActiveStatusChange}\r\n            handleATGConfiguration={this.handleATGConfig}\r\n            isEnableATGConfigButton={this.state.isEnableATGConfigButton}\r\n          ></TankDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.isChangeBondedStatus\r\n          ? this.confirmChangeBondedStatus()\r\n          : null}\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.tank.Code === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnTank}\r\n            handleOperation={this.saveTank}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TankDetailsComposite);\r\n\r\nTankDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n  handleATGConfiguration: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport WijmoGridComposite from \"../Common/WijmoGridComposite\";\r\n\r\nexport function TankSummaryComposite({\r\n    tableData,\r\n    columnDetails,\r\n    pageSize,\r\n    exportRequired,\r\n    exportFileName,\r\n    columnPickerRequired,\r\n    columnGroupingRequired,\r\n    terminalsToShow,\r\n    selectionRequired,     \r\n    onSelectionChange,\r\n    onRowClick,\r\n    parentComponent\r\n}) {\r\n    return (\r\n        <WijmoGridComposite\r\n            data={tableData}\r\n            columns={columnDetails}\r\n            rowsPerPage={pageSize}\r\n            exportRequired={exportRequired}\r\n            exportFileName={exportFileName}\r\n            columnPickerRequired={columnPickerRequired}\r\n            columnGroupingRequired={columnGroupingRequired}\r\n            terminalsToShow={terminalsToShow}\r\n            selectionRequired={selectionRequired}\r\n            onSelectionHandle={onSelectionChange}\r\n            onRowClick={onRowClick}\r\n            parentComponent={parentComponent}\r\n        ></WijmoGridComposite>\r\n         \r\n    );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { TMUserActionsComposite } from \"../Common/TMUserActionsComposite\";\r\nimport TankDetailsComposite from \"../Details/TankDetailsComposite\";\r\nimport { TankSummaryComposite } from \"../Summary/TankSummaryComposite\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../../../CSS/styles.css\";\r\nimport NotifyEvent from \"../../../JS/NotifyEvent\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"../../../JS/KeyCodes\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport { kpiTankList } from \"../../../JS/KPIPageName\";\r\nimport {\r\n  functionGroups,\r\n  fnTank,\r\n  fnKPIInformation,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport ATGInterfaceConfigurationDetailsComposite from \"../Details/ATGInterfaceConfigurationDetailsComposite\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\nclass TankComposite extends Component {\r\n  state = {\r\n    isDetails: false,\r\n    isReadyToRender: false,\r\n    isDetailsModified: false,\r\n    operationsVisibilty: { add: false, delete: false, shareholder: true },\r\n    selectedRow: {},\r\n    selectedItems: [],\r\n    data: {},\r\n    isComminglingEnable: false,\r\n    shareholderVisible: false,\r\n    selectedShareholder: \"\",\r\n    tankKPIList: [],\r\n    isLoadATGConfigurationDetails: false,\r\n    tankObj: {},\r\n    showAuthenticationLayout: false,\r\n  };\r\n\r\n  componentName = \"TankComponent\";\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnTank\r\n      );\r\n      this.setState({\r\n        operationsVisibilty,\r\n        selectedShareholder:\r\n          this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      });\r\n      this.getLookUpData();\r\n      this.getTankList(this.props.userDetails.EntityResult.PrimaryShareholder);\r\n      this.getKPIList(this.props.userDetails.EntityResult.PrimaryShareholder);\r\n    } catch (error) {\r\n      console.log(\"TankComposite:Error occured on componentDidMount\", error);\r\n    }\r\n    // clear session storage on window refresh event\r\n    window.addEventListener(\"beforeunload\", this.clearStorage);\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    // clear session storage\r\n    this.clearStorage();\r\n\r\n    // remove event listener\r\n    window.removeEventListener(\"beforeunload\", this.clearStorage);\r\n  };\r\n\r\n  clearStorage = () => {\r\n    sessionStorage.removeItem(this.componentName + \"GridState\");\r\n  };\r\n\r\n  getTankList(shareholder) {\r\n    axios(\r\n      RestAPIs.GetTankListForRole + \"?ShareholderCode=\" + shareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({ data: result.EntityResult, isReadyToRender: true });\r\n        } else {\r\n          this.setState({ data: [], isReadyToRender: true });\r\n          console.log(\"Error in getTank List:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ data: [], isReadyToRender: true });\r\n        console.log(\"Error while getting Tank List:\", error);\r\n      });\r\n  }\r\n\r\n  handleAdd = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete = false;\r\n      operationsVisibilty.add = false;\r\n      operationsVisibilty.shareholder = false;\r\n      this.setState({\r\n        isDetails: true,\r\n        selectedRow: {},\r\n        operationsVisibilty,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"TankComposite:Error occured on handleAdd\", error);\r\n    }\r\n  };\r\n\r\n  savedEvent = (data, saveType, notification) => {\r\n    try {\r\n      const operationsVisibilty = { ...this.state.operationsVisibilty };\r\n      if (notification.messageType === \"success\") {\r\n        operationsVisibilty.add = Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          fnTank\r\n        );\r\n        operationsVisibilty.delete = Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.remove,\r\n          fnTank\r\n        );\r\n        this.setState({ isDetailsModified: true, operationsVisibilty });\r\n      }\r\n      if (notification.messageType === \"success\" && saveType === \"add\") {\r\n        var selectedItems = [\r\n          {\r\n            Common_Code: data.Code,\r\n            TerminalCode: data.TerminalCode,\r\n          },\r\n        ];\r\n        this.setState({ selectedItems });\r\n      }\r\n      toast(\r\n        <ErrorBoundary>\r\n          <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n        </ErrorBoundary>,\r\n        {\r\n          autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\"TankComposite:Error occured on savedEvent\", error);\r\n    }\r\n  };\r\n\r\n  handleBack = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnTank\r\n      );\r\n      operationsVisibilty.delete = false;\r\n      operationsVisibilty.shareholder = true;\r\n      this.setState({\r\n        isDetails: false,\r\n        selectedRow: {},\r\n        selectedItems: [],\r\n        isReadyToRender: false,\r\n      });\r\n      this.getTankList(this.state.selectedShareholder);\r\n      this.getKPIList();\r\n    } catch (error) {\r\n      console.log(\"TankComposite:Error occured on Back click\", error);\r\n    }\r\n  };\r\n\r\n  handleATGBack = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnTank\r\n      );\r\n      operationsVisibilty.delete = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.remove,\r\n        fnTank\r\n      );\r\n      operationsVisibilty.shareholder = false;\r\n      // let item = {\r\n      //   Common_Code: tankObj.Code,\r\n      //   TerminalCode:tankObj.TerminalCode\r\n      // }\r\n      this.setState({\r\n        isLoadATGConfigurationDetails: false,\r\n        isDetails: true,\r\n        selectedRow: this.state.selectedRow,\r\n        selectedItems: [this.state.selectedRow],\r\n        operationsVisibilty,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"TankComposite:Error occured on Row click\", error);\r\n    }\r\n  };\r\n\r\n  handleRowClick = (item) => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.add = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.add,\r\n        fnTank\r\n      );\r\n      operationsVisibilty.delete = Utilities.isInFunction(\r\n        this.props.userDetails.EntityResult.FunctionsList,\r\n        functionGroups.remove,\r\n        fnTank\r\n      );\r\n      operationsVisibilty.shareholder = false;\r\n      this.setState({\r\n        isDetails: true,\r\n        selectedRow: item,\r\n        selectedItems: [item],\r\n        operationsVisibilty,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"TankComposite:Error occured on Row click\", error);\r\n    }\r\n  };\r\n\r\n  handleSelection = (items) => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n\r\n      operationsVisibilty.delete =\r\n        items.length > 0 &&\r\n        Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.remove,\r\n          fnTank\r\n        );\r\n\r\n      this.setState({ selectedItems: items, operationsVisibilty });\r\n    } catch (error) {\r\n      console.log(\"TankComposite:Error occured on handleSelection\", error);\r\n    }\r\n  };\r\n\r\n  //Get KPI for Tanks\r\n  getKPIList() {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      var notification = {\r\n        message: \"\",\r\n        messageType: \"critical\",\r\n        messageResultDetails: [],\r\n      };\r\n      let objKPIRequestData = {\r\n        PageName: kpiTankList,\r\n        InputParameters: [],\r\n      };\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({ tankKPIList: result.EntityResult.ListKPIDetails });\r\n          } else {\r\n            this.setState({ tankKPIList: [] });\r\n            console.log(\"Error in tank KPIList:\", result.ErrorList);\r\n            notification.messageResultDetails.push({\r\n              keyFields: [],\r\n              keyValues: [],\r\n              isSuccess: false,\r\n              errorMessage: result.ErrorList[0],\r\n            });\r\n          }\r\n          if (notification.messageResultDetails.length > 0) {\r\n            toast(\r\n              <ErrorBoundary>\r\n                <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n              </ErrorBoundary>,\r\n              {\r\n                autoClose:\r\n                  notification.messageType === \"success\" ? 10000 : false,\r\n              }\r\n            );\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Tank KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  authenticateDelete = () => {\r\n    try {\r\n      let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      this.setState({ showAuthenticationLayout });\r\n      if (showAuthenticationLayout === false) {\r\n        this.handleDelete();\r\n      }\r\n    } catch (error) {\r\n      console.log(\"TankComposite : Error in authenticateDelete\");\r\n    }\r\n  };\r\n\r\n  handleDelete = () => {\r\n    try {\r\n      var { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete = false;\r\n      this.setState({ operationsVisibilty });\r\n      var deleteTankKeys = [];\r\n      for (var i = 0; i < this.state.selectedItems.length; i++) {\r\n        var TankCode = this.state.selectedItems[i][\"Common_Code\"];\r\n        var TerminalCode = this.state.selectedItems[i][\"TerminalCode\"];\r\n        var keyData = {\r\n          KeyCodes: [\r\n            { Key: KeyCodes.tankCode, Value: TankCode },\r\n            {\r\n              Key: KeyCodes.terminalCode,\r\n              Value: TerminalCode !== \"\" ? TerminalCode : null,\r\n            },\r\n          ],\r\n        };\r\n        deleteTankKeys.push(keyData);\r\n      }\r\n      axios(\r\n        RestAPIs.DeleteTank,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          deleteTankKeys,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          var isRefreshDataRequire = result.isSuccess;\r\n\r\n          if (\r\n            result.ResultDataList !== null &&\r\n            result.ResultDataList !== undefined\r\n          ) {\r\n            var failedResultsCount = result.ResultDataList.filter(function (\r\n              res\r\n            ) {\r\n              return !res.IsSuccess;\r\n            }).length;\r\n\r\n            if (failedResultsCount === result.ResultDataList.length) {\r\n              isRefreshDataRequire = false;\r\n            } else isRefreshDataRequire = true;\r\n          }\r\n          var notification = Utilities.convertResultsDatatoNotification(\r\n            result,\r\n            \"TankInfo_DeletionStatus\",\r\n            [\"TankCode\"]\r\n          );\r\n\r\n          if (isRefreshDataRequire) {\r\n            this.setState({\r\n              isReadyToRender: false,\r\n              showAuthenticationLayout: false,\r\n            });\r\n            this.getTankList(this.state.selectedShareholder);\r\n            this.getKPIList();\r\n            operationsVisibilty.delete = false;\r\n            this.setState({\r\n              selectedItems: [],\r\n              operationsVisibilty,\r\n              selectedRow: {},\r\n            });\r\n          } else {\r\n            operationsVisibilty.delete = true;\r\n            this.setState({ operationsVisibilty, showAuthenticationLayout: false });\r\n          }\r\n\r\n          notification.messageResultDetails.forEach((messageResult) => {\r\n            if (messageResult.keyFields.length > 0)\r\n              messageResult.keyFields[0] = \"TankTransaction_TankCode\";\r\n          });\r\n\r\n          toast(\r\n            <ErrorBoundary>\r\n              <NotifyEvent notificationMessage={notification}></NotifyEvent>\r\n            </ErrorBoundary>,\r\n            {\r\n              autoClose: notification.messageType === \"success\" ? 10000 : false,\r\n            }\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error occured while deleting:\" + error);\r\n          var { operationsVisibilty } = { ...this.state };\r\n          operationsVisibilty.delete = true;\r\n          this.setState({ operationsVisibilty, showAuthenticationLayout: false });\r\n        });\r\n    } catch (error) {\r\n      console.log(\"TankComposite:Error occured on handleDelet\", error);\r\n    }\r\n  };\r\n\r\n  getLookUpData() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=Commingling\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            isComminglingEnable:\r\n              result.EntityResult[\"EnableCommingling\"] === \"True\"\r\n                ? true\r\n                : false,\r\n            shareholderVisible:\r\n              result.EntityResult[\"EnableCommingling\"] === \"True\"\r\n                ? true\r\n                : false,\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\"TankComposite:Error occured on getLookUpData\", error);\r\n    }\r\n  }\r\n\r\n  handleShareholderSelectionChange = (shareholder) => {\r\n    try {\r\n      let { operationsVisibilty } = { ...this.state };\r\n      operationsVisibilty.delete = false;\r\n      this.setState(\r\n        {\r\n          selectedShareholder: shareholder,\r\n          isReadyToRender: false,\r\n          selectedItems: [],\r\n          operationsVisibilty,\r\n        },\r\n        () => {\r\n          this.getTankList(shareholder);\r\n          this.getKPIList();\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"TankComposite:Error occured on handleShareholderSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleATGConfiguration = (data, selectedItem) => {\r\n    let { operationsVisibilty } = { ...this.state };\r\n    operationsVisibilty.delete = false;\r\n    operationsVisibilty.add = false;\r\n    this.setState({\r\n      isLoadATGConfigurationDetails: true,\r\n      tankObj: data,\r\n      selectedRow: selectedItem,\r\n      operationsVisibilty,\r\n    });\r\n    window.scrollTo(0, 0); //component to scroll from top while switching\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.isLoadATGConfigurationDetails ? (\r\n          <TranslationConsumer>\r\n            {(t) => (\r\n              <div>\r\n                <ErrorBoundary>\r\n                  <TMUserActionsComposite\r\n                    operationsVisibilty={this.state.operationsVisibilty}\r\n                    breadcrumbItem={this.props.activeItem}\r\n                    shareholders={\r\n                      this.props.userDetails.EntityResult.ShareholderList\r\n                    }\r\n                    shrVisible={false}\r\n                    handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n                  ></TMUserActionsComposite>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                  {/* <div\r\n                      className=\"section\"\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => this.handleATGBack}\r\n                    >\r\n                      <Icon\r\n                        root=\"common\"\r\n                        name=\"caret-left\"\r\n                        color=\"black\"\r\n                      ></Icon>{\"Back\"}\r\n                    </div> */}\r\n                  {/* <div className=\"detailsContainer\">\r\n                    <object\r\n                      style={{ position: \"relative\", top: \"-160px\" }}\r\n                      type=\"text/html\"\r\n                      width=\"100%\"\r\n                      height=\"800px\"\r\n                      data={\"http://localhost/tmui/AtgConfigurationDetails.aspx?tnkCode=\" + this.state.tankObj.Code + \"&tankGrpCode=\" + this.state.tankObj.TankGroupCode}\r\n                      // data={\r\n                      //   \"/TMUI/AtgConfigurationDetails.aspx?tnkCode=\" +\r\n                      //   this.state.tankObj.Code +\r\n                      //   \"&tankGrpCode=\" +\r\n                      //   this.state.tankObj.TankGroupCode\r\n                      // }\r\n                    ></object>\r\n                  </div> */}\r\n                  <ATGInterfaceConfigurationDetailsComposite\r\n                    selectedRow={this.state.selectedRow}\r\n                    onBack={this.handleATGBack}\r\n                    onSaved={this.savedEvent}\r\n                    tankObj={this.state.tankObj}\r\n                  ></ATGInterfaceConfigurationDetailsComposite>\r\n                  {/* <Button\r\n                    className=\"backButton\"\r\n                    onClick={this.handleATGBack}\r\n                    content={t(\"Back\")}\r\n                  ></Button> */}\r\n                </ErrorBoundary>\r\n              </div>\r\n            )}\r\n          </TranslationConsumer>\r\n        ) : (\r\n          <div>\r\n            <ErrorBoundary>\r\n              <TMUserActionsComposite\r\n                operationsVisibilty={this.state.operationsVisibilty}\r\n                breadcrumbItem={this.props.activeItem}\r\n                shareholders={\r\n                  this.props.userDetails.EntityResult.ShareholderList\r\n                }\r\n                onDelete={this.authenticateDelete}\r\n                onAdd={this.handleAdd}\r\n                shrVisible={this.state.shareholderVisible}\r\n                onShareholderChange={this.handleShareholderSelectionChange}\r\n                selectedShareholder={this.state.selectedShareholder}\r\n                handleBreadCrumbClick={this.props.handleBreadCrumbClick}\r\n              ></TMUserActionsComposite>\r\n            </ErrorBoundary>\r\n            {this.state.isDetails === true ? (\r\n              <ErrorBoundary>\r\n                <TankDetailsComposite\r\n                  key=\"TankGroupDetails\"\r\n                  selectedRow={this.state.selectedRow}\r\n                  onBack={this.handleBack}\r\n                  onSaved={this.savedEvent}\r\n                  selectedShareholder={this.state.selectedShareholder}\r\n                  handleATGConfiguration={this.handleATGConfiguration}\r\n                ></TankDetailsComposite>\r\n              </ErrorBoundary>\r\n            ) : this.state.isReadyToRender ? (\r\n              <div>\r\n                <ErrorBoundary>\r\n                  <div className=\"kpiSummaryContainer\">\r\n                    <KPIDashboardLayout\r\n                      kpiList={this.state.tankKPIList}\r\n                      pageName=\"Tank\"\r\n                    ></KPIDashboardLayout>\r\n                  </div>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                  <TankSummaryComposite\r\n                    tableData={this.state.data.Table}\r\n                    columnDetails={this.state.data.Column}\r\n                    pageSize={\r\n                      this.props.userDetails.EntityResult.PageAttibutes\r\n                        .WebPortalListPageSize\r\n                    }\r\n                    exportRequired={true}\r\n                    exportFileName=\"TankList\"\r\n                    columnPickerRequired={true}\r\n                    terminalsToShow={\r\n                      this.props.userDetails.EntityResult.PageAttibutes\r\n                        .NoOfTerminalsToShow\r\n                    }\r\n                    selectionRequired={true}\r\n                    columnGroupingRequired={true}\r\n                    onSelectionChange={this.handleSelection}\r\n                    onRowClick={this.handleRowClick}\r\n                    parentComponent={this.componentName}\r\n                  ></TankSummaryComposite>\r\n                </ErrorBoundary>\r\n              </div>\r\n            ) : (\r\n              <LoadingPage message=\"Loading\"></LoadingPage>\r\n            )}\r\n            {this.state.showAuthenticationLayout ? (\r\n              <UserAuthenticationLayout\r\n                Username={this.props.userDetails.EntityResult.UserName}\r\n                functionName={functionGroups.remove}\r\n                functionGroup={fnTank}\r\n                handleClose={this.handleAuthenticationClose}\r\n                handleOperation={this.handleDelete}\r\n              ></UserAuthenticationLayout>\r\n            ) : null}\r\n            <ErrorBoundary>\r\n              <ToastContainer\r\n                hideProgressBar={true}\r\n                closeOnClick={false}\r\n                closeButton={true}\r\n                newestOnTop={true}\r\n                position=\"bottom-right\"\r\n                toastClassName=\"toast-notification-wrap\"\r\n              />\r\n            </ErrorBoundary>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TankComposite);\r\n\r\nTankComposite.propTypes = {\r\n  activeItem: PropTypes.object,\r\n};\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","export const functionGroups = {\r\n  view: \"view\",\r\n  add: \"add\",\r\n  modify: \"modify\",\r\n  remove: \"remove\",\r\n};\r\nexport const fnCarrierCompany = \"carriercompany\";\r\nexport const fnDriver = \"driver\";\r\nexport const fnCustomer = \"customer\";\r\nexport const fnTrailer = \"trailer\";\r\nexport const fnOriginTerminal = \"originterminal\";\r\nexport const fnDestination = \"destination\";\r\nexport const fnPrimeMover = \"primemover\";\r\nexport const fnVehicle = \"vehicle\";\r\nexport const fnSBC = \"shipmentbycompartment\";\r\nexport const fnSBP = \"shipmentbyproduct\";\r\nexport const fnShipmentStatus = \"ViewShipmentStatus\";\r\nexport const fnVessel = \"vessel\";\r\nexport const fnOrder = \"order\";\r\nexport const fnOrderForceClose = \"OrderForceClose\";\r\n\r\nexport const fnContract = \"contract\";\r\nexport const fnTruckReceipt = \"receiptplanbycompartment\";\r\nexport const fnMarineDispatch = \"ViewMarineShipment\";\r\nexport const fnMarineShipmentByCompartment = \"MarineShipmentByCompartment\";\r\nexport const fnMarineReceipt = \"ViewMarineReceipt\";\r\nexport const fnSupplier = \"supplier\";\r\nexport const fnFinishedProduct = \"finishedproduct\";\r\nexport const fnRailDispatch = \"RailDispatch\";\r\nexport const fnRailReceipt = \"RailReceipt\";\r\nexport const fnRailRoute = \"RailRoute\";\r\nexport const fnRailWagon = \"RailWagon\"\r\n\r\nexport const fnCloseRailDispatch = \"CloseRailDispatch\";\r\nexport const fnPrintRailBOL = \"PrintRailBOL\";\r\nexport const fnPrintRailFAN = \"PrintRailFAN\";\r\nexport const fnRailDispatchLoadSpotAssignment = \"RailDispatchLoadSpotAssignment\";\r\nexport const fnRailDispatchProductAssignment = \"RailDispatchProductAssignment\";\r\nexport const fnViewRailDispatch = \"ViewRailDispatch\"\r\nexport const fnViewRailLoadingDetails = \"ViewRailLoadingDetails\"\r\n\r\nexport const fnCloseRailReceipt = \"CloseRailReceipt\";\r\nexport const fnPrintRailBOD = \"PrintRailBOD\";\r\nexport const fnPrintRailRAN = \"PrintRailRAN\";\r\nexport const fnViewRailReceipt = \"ViewRailReceipt\"\r\nexport const fnViewRailUnLoadingDetails = \"ViewRailUnLoadingDetails\"\r\n\r\nexport const fnSMSConfiguration = \"SMS\";\r\nexport const fnUnAccountedTransactionTank = \"UnAccountedTransactionTank\"\r\nexport const fnUnAccountedTransactionMeter = \"UnAccountedTransactionMeter\"\r\nexport const fnPipelineDispatch = \"PipelineDispatch\";\r\nexport const fnPipelineReceipt = \"PipelineReceipt\";\r\n\r\nexport const fnPipelineDispatchManualEntry = \"PipelineDispatchManualEntry\";\r\nexport const fnPipelineReceiptManualEntry = \"PipelineReceiptManualEntry\";\r\n\r\nexport const fnLookUpData = \"LookUpData\";\r\n\r\n\r\n\r\nexport const fnHSEInspection = \"HSEInspection\";\r\nexport const fnHSEConfiguration = \"HSEInspectionConfig\"\r\n\r\nexport const fnEmailConfiguration = \"Email\";\r\nexport const fnShareholder = \"Shareholder\";\r\nexport const fnLocation = \"LocationConfig\";\r\nexport const fnDevice = \"DeviceConfig\";\r\nexport const fnBaseProduct = \"baseproduct\";\r\nexport const fnSiteView = \"SiteView\";\r\nexport const fnLeakageManualEntry = \"LeakageManualEntry\";\r\nexport const fnTerminal = \"Terminal\";\r\nexport const fnSlotInformation = \"SlotInformation\";\r\nexport const fnTankGroup = \"TankGroup\";\r\nexport const fnTank = \"Tank\";\r\nexport const fnSealMaster = \"SealMaster\"\r\nexport const fnTankEODEntry = \"TankEODEntry\";\r\nexport const fnUnmatchedLocalTransactions = \"UnmatchedLocalTransactions\";\r\nexport const fnAccessCard = \"AccessCard\";\r\nexport const fnResetPin = \"ResetPin\";\r\nexport const fnSlotConfiguration = \"SlotConfiguration\";\r\nexport const fnUOM = \"UOM\";\r\nexport const fnPrintMarineFAN = \"PrintMarineFAN\";\r\nexport const fnPrintMarineBOL = \"PrintMarineBOL\";\r\nexport const fnViewMarineLoadingDetails = \"ViewMarineLoadingDetails\";\r\nexport const fnViewMarineShipmentAuditTrail = \"ViewMarineShipmentAuditTrail\";\r\nexport const fnCloseMarineShipment = \"CloseMarineShipment\";\r\nexport const fnIssueCard = \"IssueCard\";\r\nexport const fnActivateCard = \"ActivateCard\";\r\nexport const fnRevokeCard = \"RevokeCard\";\r\nexport const fnAutoIDAssociation = \"AutoIDAssociation\";\r\nexport const fnMarineReceiptByCompartment = \"MarineReceiptByCompartment\";\r\nexport const fnPrintMarineRAN = \"PrintMarineRAN\";\r\nexport const fnPrintMarineBOD = \"PrintMarineBOD\";\r\nexport const fnViewMarineUnloadingDetails = \"ViewMarineUnloadingDetails\";\r\nexport const fnViewMarineReceiptAuditTrail = \"ViewMarineReceiptAuditTrail\";\r\n\r\nexport const fnCloseMarineReceipt = \"CloseMarineReceipt\";\r\nexport const fnWeekendConfig = \"WeekendConfig\";\r\nexport const fnEODAdmin = \"EODAdmin\";\r\nexport const fnPrintBOL = \"PrintBOL\";\r\nexport const fnPrintFAN = \"PrintFAN\";\r\nexport const fnPrintBOD = \"PrintBOD\";\r\nexport const fnCloseShipment = \"CloseShipment\";\r\nexport const fnCloseReceipt = \"CloseReceipt\";\r\nexport const fnContractForceClose = \"CONTRACTFORCECLOSE\";\r\nexport const fnCaptain = \"Captain\";\r\nexport const fnOverrideShipmentSeq = \"OverrideShipmentSequence\";\r\nexport const fnKPIInformation = \"KPIInformation\";\r\n\r\nexport const fnLanguage = \"Language\";\r\nexport const fnWebPortalUserMap = \"WebPortalUserMap\";\r\nexport const fnBayGroup = \"BayGroup\";\r\nexport const fnPipelineHeaderSiteView = \"PipelineHeaderSiteView\";\r\n\r\nexport const fnExchangePartner = \"ExchangePartner\";\r\nexport const fnTankMonitor = \"TankMonitor\";\r\nexport const fnUser = \"PersonAdmin\";\r\nexport const fnProductReconciliationReports = \"ProductReconciliationReports\";\r\n\r\nexport const fnReportConfiguration = \"ReportConfiguration\";\r\nexport const fnProcessConfiguration = \"EXECONFIGURATION\";\r\n\r\nexport const fnShareholderAllocation = \"ShareholderAllocation\";\r\nexport const fnNotificationGroup = \"NotificationGroup\";\r\nexport const fnNotificationRestriction = \"NotificationRestriction\";\r\nexport const fnNotificationConfig = \"NotificationConfig\";\r\n\r\n\r\n\r\nexport const fn_WEIGHBRIDGEMANUALENTRY = \"WEIGHBRIDGEMANUALENTRY\";\r\nexport const fnAllowWeighBridgeManualEntry = \"AllowWeighBridgeManualEntry\";\r\n\r\n\r\nexport const fnProductAllocation = \"ProductAllocation\";\r\nexport const fnMasterDeviceConfiguration = \"MasterDeviceConfiguration\";\r\nexport const fnShareholderAgreement = \"ShareholderAgreement\";\r\nexport const fnTankShareholderPrimeFunction = \"TANKSHAREHOLDERPRIMEFUNCTION\";\r\nexport const fnRoleAdmin = \"ROLEADMIN\";\r\nexport const fnShiftConfig = \"ShiftConfig\";\r\nexport const fnPrinterConfiguration = \"PrinterConfiguration\";\r\nexport const fnCustomerAgreement = \"CustomerAgreement\";\r\nexport const fnbaySCADAConfiguration = \"BaySCADAConfiguration\";\r\nexport const fnRailReceiptUnloadSpotAssignment =\r\n  \"RailReceiptUnloadSpotAssignment\";\r\nexport const fnStaffVisitor = \"STAFF_VISITOR\";\r\nexport const fnPipelineMeterSiteView = \"PipelineMeterSiteView\";\r\nexport const fnRailSiteView = \"RailSiteView\";\r\nexport const fnMarineSiteView = \"MarineSiteView\";\r\nexport const fnLoadingDetails = \"LoadingDetails\";\r\nexport const fnUnloadingDetails = \"UnloadingDetails\";\r\n\r\n\r\n\r\nexport const fnRoadHSEInspection = \"RoadHSEInspection\";\r\nexport const fnRoadHSEConfiguration = \"RoadHSEInspectionConfig\";\r\n\r\nexport const fnMarineHSEInspection = \"MarineHSEInspection\";\r\nexport const fnMarineHSEConfiguration = \"MarineHSEInspectionConfig\";\r\n\r\nexport const fnRailHSEInspection = \"RailHSEInspection\";\r\nexport const fnRailHSEConfiguration = \"RailHSEInspectionConfig\";\r\n\r\nexport const fnPipelineHSEInspection = \"PipelineHSEInspection\";\r\nexport const fnPipelineHSEConfiguration = \"PipelineHSEInspectionConfig\";\r\nexport const fnPrintRAN = \"PrintRAN\";\r\nexport const fnViewReceiptStatus = \"ViewReceiptStatus\";\r\nexport const fnViewReceiptAuditTrail = \"ViewReceiptAuditTrail\";\r\nexport const fnCustomerRecipe = \"customerrecipe\";\r\n\r\nexport const fnCOAParameter = \"COAParameter\";\r\nexport const fnCOATemplate = \"COATemplate\";\r\nexport const fnCOAManagement = \"COAManagement\";\r\nexport const fnCOAManagementFinishedProduct = \"COAManagementFinishedProduct\";\r\nexport const fnCOACustomer = \"COACustomer\";\r\nexport const fnCOAAssignment = \"COAAssignment\";\r\n\r\nexport const fnShipmentDriver = \"ShipmentDriver\";\r\nexport const fnReceiptDriver = \"ReceiptDriver\";\r\n\r\nexport const fnProductForecastConfiguration = \"ProductForecastConfiguration\";","export const carrierCode = \"CarrierCode\";\r\nexport const transportationType = \"TransportationType\";\r\nexport const shareholderCode = \"ShareHolderCode\";\r\nexport const driverCode = \"DriverCode\";\r\nexport const customerCode = \"CustomerCode\";\r\nexport const trailerCode = \"TrailerCode\";\r\nexport const originTerminalCode = \"OriginTerminalCode\";\r\nexport const primeMoverCode = \"PrimeMoverCode\";\r\nexport const vehicleCode = \"VehicleCode\";\r\nexport const destinationCode = \"DestinationCode\";\r\nexport const finishedProductCode = \"FinishedProductCode\";\r\nexport const shipmentCode = \"ShipmentCode\";\r\nexport const orderCode = \"OrderCode\";\r\nexport const receiptCode = \"ReceiptCode\";\r\nexport const suppliercode = \"SupplierCode\";\r\nexport const marineDispatchCode = \"MarineDispatchCode\";\r\nexport const marineReceiptCode = \"MarineReceiptCode\";\r\nexport const supplierCode = \"SupplierCode\";\r\nexport const contractCode = \"ContractCode\";\r\n\r\nexport const railDispatchCode = \"RailDispatchCode\";\r\nexport const railReceiptCode = \"RailReceiptCode\";\r\nexport const railRouteCode = \"RailRouteCode\";\r\nexport const wagonCode = \"WagonCode\";\r\n\r\nexport const compartmentCode = \"CompartmentCode\";\r\n\r\nexport const smsConfigurationCode = \"SMSConfigurationCode\";\r\nexport const pipelineDispatchCode = \"PipelineDispatchCode\";\r\nexport const pipelineReceiptCode = \"PipelineReceiptCode\";\r\nexport const EmailConfigurationCode = \"EmailConfigurationCode\";\r\n\r\nexport const baseProductCode = \"BaseProductCode\";\r\nexport const locationCode = \"LocationCode\";\r\nexport const gantryCode = \"GantryCode\";\r\n\r\nexport const siteViewType = \"SiteViewType\";\r\n\r\nexport const entityCode = \"EntityCode\";\r\n\r\nexport const entityType = \"EntityType\";\r\nexport const cardReaderCode = \"CardReaderCode\";\r\nexport const accessCardCode = \"AccessCardCode\";\r\nexport const bcuCode = \"BcuCode\";\r\nexport const deuCode = \"DeuCode\";\r\nexport const weighBridgeCode = \"WeighBridgeCode\";\r\nexport const weight = \"Weight\";\r\nexport const outOfToleranceAllowed = \"OutOfToleranceAllowed\";\r\n\r\nexport const loadingArmCode = \"LoadingArmCode\";\r\nexport const transportaionType = \"TransportationType\";\r\nexport const bayCode = \"BayCode\";\r\nexport const TransactionNumber = \"TransactionNumber\";\r\nexport const BatchNumber = \"BatchNumber\";\r\nexport const terminalCode = \"TerminalCode\";\r\nexport const tankGroupCode = \"TankGroupCode\";\r\nexport const tankCode = \"TankCode\";\r\nexport const meterCode = \"MeterCode\";\r\n\r\nexport const shipmentType = \"ShipmentType\";\r\nexport const shipmentStatus = \"ShipmentStatus\";\r\nexport const meterLineType = \"MeterLineType\";\r\nexport const dispatchCode = \"DispatchCode\";\r\nexport const railReceiptStatus = \"RailReceiptStatus\";\r\nexport const receiptStatus = \"ReceiptStatus\";\r\nexport const fptTansactionID = \"FPTransactionID\";\r\nexport const productCategoryType = \"ProductCategoryType\";\r\nexport const marineReason = \"Reason\";\r\n\r\nexport const sealMasterCode = \"SealMasterCode\";\r\nexport const marineDispatchReason = \"Reason\";\r\nexport const OperationName = \"OperationName\";\r\nexport const FPTransactionID = \"FPTransactionID\";\r\nexport const ProductCategoryType = \"ProductCategoryType\";\r\nexport const compartmentSeqNoInVehicle = \"CompartmentSeqNoInVehicle\";\r\nexport const adjustedPlanQuantity = \"AdjustedPlanQuantity\";\r\nexport const forceComplete = \"ForceComplete\";\r\nexport const dispatchStatus = \"DispatchStatus\";\r\nexport const HolidayDate = \"HolidayDate\";\r\nexport const ActionID = \"ActionID\";\r\nexport const EODTimePrev = \"EODTimePrev\";\r\nexport const TerminalAction = \"TerminalAction\";\r\nexport const EODTime = \"EODTime\";\r\nexport const MonthStartDay = \"MonthStartDay\";\r\nexport const captainCode = \"CaptainCode\";\r\nexport const userType = \"GeneralTMUserType\";\r\nexport const generalTMUserCode = \"GeneralTMUserCode\";\r\nexport const isPriority = \"IsPriority\";\r\nexport const actualTerminalCode = \"ActualTerminalCode\";\r\nexport const shipmentBondNo = \"ShipmentBondNo\"\r\nexport const receiptBondNo = \"ReceiptBondNo\"\r\nexport const marineReceiptStatus = \"MarineReceiptStatus\";\r\nexport const deviceType = \"DeviceType\";\r\nexport const deviceCode = \"DeviceCode\";\r\nexport const bayGroup = \"BayGroup\";\r\nexport const pipelineHeaderCode = \"PipelineHeaderCode\";\r\nexport const exchangePartnerName = \"ExchangePartner\";\r\nexport const personID = \"PersonID\";\r\nexport const userName = \"UserName\";\r\nexport const pipelinePlanCode = \"PipelinePlanCode\";\r\nexport const pipelinePlanType = \"PipelinePlanType\";\r\nexport const channelCode = \"ChannelCode\";\r\nexport const ProcessName = \"ProcessName\";\r\nexport const reconciliationCode = \"ReconciliationCode\";\r\nexport const NotificationGroupCode = \"NotificationGroupCode\";\r\nexport const NotificationGroupStatus = \"NotificationGroupStatus\";\r\nexport const NotificationGroupDesc = \"NotificationGroupDesc\";\r\nexport const NotificationResSource = \"NotificationResSource\";\r\nexport const NotificationResMsgCode = \"NotificationResMsgCode\";\r\nexport const NotificationOrigResSource = \"NotificationOrigResSource\";\r\nexport const NotificationOrigResMsgCode = \"NotificationOrigResMsgCode\";\r\nexport const NotificationMessageCode = \"NotificationMessageCode\"\r\nexport const positionType = \"PositionType\";\r\nexport const roleName = \"RoleName\";\r\nexport const exchangeAgreementCode = \"ExchangeAgreementCode\";\r\nexport const ProductTransferAgreementCode = \"ProductTransferAgreementCode\";\r\nexport const ShareholderAgreementStatus = \"ShareholderAgreementStatus\";\r\nexport const RequestorShareholder = \"RequestorShareholder\";\r\nexport const LenderShareholder = \"LenderShareholder\";\r\nexport const requestCode = \"RequestCode\";\r\nexport const TransferReferenceCode = \"TransferReferenceCode\";\r\nexport const ShiftID = \"ShiftID\";\r\nexport const ShiftName = \"ShiftName\";\r\nexport const printerName = \"PrinterName\";\r\nexport const locationtype = \"LocationType\";\r\nexport const forceClosureReason = \"ForceClosureReason\";\r\nexport const TransactionType = \"TransactionType\";\r\nexport const CustomerRecipeCode = \"CustomerRecipeCode\";\r\n\r\nexport const coaTemplateCode = \"COATemplateCode\";\r\nexport const coaManagementCode = \"COAManagementCode\";\r\nexport const coaParameterCode = \"COAParameterCode\";\r\nexport const coaManagementFinishedProductCode = \"COAManagementFinishedProductCode\";\r\nexport const coaCustomerCode = \"COACustomerCode\";\r\nexport const coaFinishedProductCode = \"COAFinishedProductCode\";\r\nexport const coaAssignmentCode = \"COAAssignmentCode\";\r\nexport const coaTransportationType = \"COATransportationType\";\r\nexport const coaTransactionType = \"COATransactionType\";\r\nexport const coaSeqNumber = \"COASeqNumber\";\r\nexport const forecastDate = \"ForecastDate\";\r\nexport const forecastTanks = \"ForecastTanks\";"],"names":["TMDetailsKPILayout","_ref","KPIList","pageName","rowHeight","widgetHeight","isDraggable","isResizable","kpiDisplayTopBreakpoint","KPIDisplays","setKPIDisplays","useState","kpiDiv","React","hideKpis","currentScrollPos","window","pageYOffset","KPIDisplay","current","getBoundingClientRect","top","useEffect","addEventListener","removeEventListener","_jsx","ref","children","TranslationConsumer","t","style","marginTop","ErrorBoundary","KPIDashboardLayout","kpiList","defaultProps","TMUserActions","operationsVisibilty","breadcrumbItem","shareholders","selectedShareholder","onShareholderChange","onDelete","onAdd","popUpContent","shrVisible","handleBreadCrumbClick","addVisible","deleteVisible","modelOpen","setModelOpen","popUpOpen","setPopUpOpen","handlePopUpClick","add","length","_jsxs","className","alignItems","padding","Breadcrumb","parents","map","parentitem","Item","onClick","undefined","itemCode","localizedKey","justifyContent","_Fragment","Select","placeholder","value","disabled","shareholder","options","Utilities","onChange","Modal","open","size","Content","Footer","Button","type","content","float","display","Popup","position","element","Icon","root","name","color","on","onMouseLeave","VerticalMenu","Header","item","popUpMenuClick","menuItem","fieldName","fieldValue","marginLeft","delete","itemName","itemProps","isComponent","TMUserActionsComposite","UserAuthenticationLayout","Component","constructor","arguments","state","isPasswordRequired","Password","validationErrors","userAuthenticationValidationDef","authenticationResponse","btnAuthenticateEnabled","onFieldChange","propertyName","data","this","setState","lodash","validatePassword","returnValue","Object","values","every","onCloseClick","props","handleClose","AuthenticateUser","msg","pass","Username","salt","cryptojs","WordArray","random","key","keySize","iterations","iv","encrypted","encrypt","Pkcs7","mode","CBC","transitmessage","toString","axios","RestAPIs","encodeURIComponent","tokenDetails","tokenInfo","then","response","result","IsSuccess","EntityResult","toLowerCase","handleOperation","ErrorList","catch","error","componentDidMount","IsPasswordRequired","console","log","userDetails","roleFunctionInfo","functionName","functionGroup","render","textAlign","flexWrap","Input","fluid","disablePasswordToggle","indicator","label","reserveSpace","connect","getUserDetails","TokenAuth","WijmoGrid","flex","setFlex","translator","useTranslation","_getData","pageLength","CollectionView","sourceData","pageSize","setData","rowsPerPage","theGrid","theSearch","gridFilter","pagingComponent","colPicker","selectedRows","selectionRequired","selector","gridInitialized","grid","customizeFilterConditions","onRowClick","hostElement","e","ht","hitTest","target","closest","classList","includes","cellType","wjGrid","Cell","rowData","rows","row","dataItem","selectionMode","wjCore","select","Selector","itemChecked","s","singleSelection","filter","isSelected","loadash","forEach","onSelectionHandle","r","selectedRow","showCheckAll","column","rowHeaders","columns","headersVisibility","HeadersVisibility","All","control","push","selectedItems","refresh","localStorage","getItem","parentComponent","gridState","JSON","parse","newFlex","col","matchedCol","colSetting","binding","visible","filterDefinition","collectionView","deferUpdate","sortDescriptions","clear","i","sortDesc","property","ascending","groupDescriptions","sessionStorage","gridSessionState","moveToPage","pageCount","pageIndex","text","searchText","columnPickerRequired","itemsSource","checkedMemberPath","displayMemberPath","lostFocus","addHandler","hidePopup","exportExcel","gridFlex","wjcGridXlsx","saveAsync","includeColumnHeaders","includeCellStyles","formatItem","exportFileName","displayValues","columnDetail","Name","PopOver","terminalCodes","split","terminalsToShow","Card","DataType","Date","toLocaleDateString","toLocaleTimeString","saveGridState","group","document","getElementsByClassName","chkbx","parentNode","sessionState","setItem","stringify","FlexGridFilter","operator","Operator","header","descending","apply","conditions","search","selectAll","and","or","cancel","stringOperators","op","EQ","NE","BW","EW","CT","NC","numberOperators","GT","LT","GE","LE","dateOperators","booleanOperators","getWidth","columnDetails","screen","width","WidthPx","parseInt","WidthPercentage","FlexGridSearch","class","id","actionType","event","host","offsetHeight","focus","showPopup","PopupPosition","Below","preventDefault","colPickerClickHandler","exportRequired","fontSize","columnGroupingRequired","GroupPanel","FlexGrid","autoGenerateColumns","alternatingRowStep","autoRowHeights","initialized","virtualizationThreshold","onUpdatedView","FlexGridColumn","minWidth","isReadOnly","wordWrap","align","FlexGridCellTemplate","template","context","conditionalRowStyleCheck","conditionalRowStyles","ListBox","picker","initializedPicker","CollectionViewNavigator","headerFormat","byPage","cv","ATGInterfaceConfigurationDetails","AtgAttributeConfigurationData","modATGTankInfo","tankObj","handleCellCheck","handleCellDataEdit","handleCellParameterDataEdit","handleCustomEditTextBox","cellData","rowIndex","field","Point","handleEditTextBox","Parameter","decimalDisplayValues","toLocaleString","handleCheckBox","Checkbox","checked","Code","TankCode","TankGroupCode","Description","BaseProductCode","Active","noResultsMessage","EnableTankScan","DataTable","scrollable","scrollHeight","Column","renderer","editable","customEditRenderer","isEnterpriseNode","ATGInterfaceConfigurationDetailsComposite","TankInfo","emptyATGTank","saveEnabled","handleChange","EnableScan","handleSave","AtgConfigurationInfo","fillDetails","UpdateATGConfiguration","handleReset","newVal","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","obj","Entity","GetTankATGConfiguration","toast","NotifyEvent","notificationMessage","autoClose","IsArchived","tankComps","Array","isArray","TMDetailsUserActions","handleBack","onBack","ToastContainer","hideProgressBar","closeOnClick","closeButton","newestOnTop","toastClassName","TankDetailsComposite","tank","emptyTank","modTank","tankValidationDef","isReadyToRender","terminalOptions","tankModeOptions","tankGroupOptions","attributeMetaDataList","modAttributeMetaDataList","attributeValidationErrors","tankGroupBaseProduts","volumeUOMOptions","weightUOMOptions","lengthUOMOptions","densityUOMOptions","massUOMOptions","temperatureUOMOptions","pressureUOMOptions","isEnableATGButton","isEnableATGConfigButton","isBondingEnable","isATGEnabled","atgInfoDisable","isChangeBondedStatus","tankKPIList","showAuthenticationLayout","tempTank","IsBonded","handleTerminalChange","terminalSelectionChange","getTankGroup","handleTankGroupChange","GetProductData","keys","selectedCompRow","IsEnterpriseNode","TerminalCode","handleResetAttributeValidationError","localNodeAttribute","handleAuthenticationClose","attributeList","validateSave","IsWebPortalUser","saveTank","convertStringtoDecimal","createTank","updateTank","handleAttributeDataChange","attribute","matchedAttributes","matchedAttributesList","modattribute","DefaultValue","attributeValidation","handleReadATGData","handleUOMValues","handleSaveATGData","keyDataCode","KeyCodes","handleActiveStatusChange","Remarks","handleATGConfig","handleATGConfiguration","confirmChangeBondedStatus","bondedStatusChanged","getAttributes","GetTankMode","getTerminal","getLocalNodeTankGroup","getUOMList","getLookUpData","componentWillReceiveProps","nextProps","Common_Code","tankRow","tankAttributeEntity","getTank","keyCode","GrossVolume","GrossVolumeUOM","NetVolume","NetVolumeUOM","FunctionsList","functionGroups","modify","fnTank","getKPIList","atgconfig","TankAttributeCode","DensityUOM","MinDensity","parseFloat","MaxDensity","terminalcode","weightUOMs","MASS","weightOption","VOLUME","volumeOption","lengthUOMs","LENGTH","lengthOption","densityUOMs","DENSITY","densityOption","temperatureUOMs","TEMPERATURE","temperatureOption","pressureUOMs","PRESSURE","pressureOption","Capacity","AvailableRoom","Density","GrossMass","WaterVolume","TankLevel","WaterLevel","Temperature","Pressure","VapourGrossQuantity","VapourNetQuantity","GrossMassUOM","WaterVolumeUOM","PressureUOM","LevelUOM","TemperatureUOM","VapourUOM","attributeMetaData","x","Attributes","err","onSaved","selectedTerminals","attributesTerminalsList","terminal","existitem","find","selectedAttribute","Attributevalue","baseproductAttribute","valueAttribute","ListOfAttributeData","AttributeCode","AttributeValue","TankList_ATGConfiguration","tankCode","view","fnKPIInformation","objKPIRequestData","PageName","kpiTankDetail","InputParameters","ListKPIDetails","listOptions","terminalCode","tankMode","tankGroup","volumeUOM","densityUOM","massUOM","lengthUOM","temperatureUOM","pressureUOM","popUpContents","UpdatedTime","LastActive","CreatedTime","AtgLastUpdatedTime","TMDetailsHeader","entityCode","newEntityName","TankDetails","onAttributeDataChange","onTerminalChange","onTankGroupChange","onActiveStatusChange","UserName","LoadingPage","TankSummaryComposite","tableData","onSelectionChange","WijmoGridComposite","TankComposite","isDetails","isDetailsModified","isComminglingEnable","shareholderVisible","isLoadATGConfigurationDetails","componentName","componentWillUnmount","clearStorage","removeItem","handleAdd","savedEvent","saveType","remove","getTankList","handleATGBack","handleRowClick","handleSelection","items","authenticateDelete","handleDelete","deleteTankKeys","keyData","Key","Value","isRefreshDataRequire","ResultDataList","res","messageResult","handleShareholderSelectionChange","selectedItem","scrollTo","PrimaryShareholder","kpiTankList","activeItem","ShareholderList","Table","PageAttibutes","WebPortalListPageSize","NoOfTerminalsToShow","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedMeterTransaction","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","fnCarrierCompany","fnDriver","fnCustomer","fnTrailer","fnOriginTerminal","fnDestination","fnPrimeMover","fnVehicle","fnSBC","fnSBP","fnShipmentStatus","fnVessel","fnOrder","fnOrderForceClose","fnContract","fnTruckReceipt","fnMarineDispatch","fnMarineShipmentByCompartment","fnMarineReceipt","fnSupplier","fnFinishedProduct","fnRailDispatch","fnRailReceipt","fnRailRoute","fnRailWagon","fnCloseRailDispatch","fnPrintRailBOL","fnPrintRailFAN","fnRailDispatchLoadSpotAssignment","fnRailDispatchProductAssignment","fnViewRailDispatch","fnViewRailLoadingDetails","fnCloseRailReceipt","fnPrintRailBOD","fnPrintRailRAN","fnViewRailReceipt","fnViewRailUnLoadingDetails","fnSMSConfiguration","fnUnAccountedTransactionTank","fnUnAccountedTransactionMeter","fnPipelineDispatch","fnPipelineReceipt","fnPipelineDispatchManualEntry","fnPipelineReceiptManualEntry","fnLookUpData","fnHSEInspection","fnHSEConfiguration","fnEmailConfiguration","fnShareholder","fnLocation","fnDevice","fnBaseProduct","fnSiteView","fnLeakageManualEntry","fnTerminal","fnSlotInformation","fnTankGroup","fnSealMaster","fnTankEODEntry","fnUnmatchedLocalTransactions","fnAccessCard","fnResetPin","fnSlotConfiguration","fnPrintMarineFAN","fnPrintMarineBOL","fnViewMarineLoadingDetails","fnViewMarineShipmentAuditTrail","fnCloseMarineShipment","fnIssueCard","fnActivateCard","fnRevokeCard","fnAutoIDAssociation","fnMarineReceiptByCompartment","fnPrintMarineRAN","fnPrintMarineBOD","fnViewMarineUnloadingDetails","fnViewMarineReceiptAuditTrail","fnCloseMarineReceipt","fnWeekendConfig","fnEODAdmin","fnPrintBOL","fnPrintFAN","fnPrintBOD","fnCloseShipment","fnCloseReceipt","fnContractForceClose","fnCaptain","fnOverrideShipmentSeq","fnLanguage","fnWebPortalUserMap","fnBayGroup","fnPipelineHeaderSiteView","fnTankMonitor","fnUser","fnProductReconciliationReports","fnReportConfiguration","fnProcessConfiguration","fnShareholderAllocation","fnNotificationGroup","fnNotificationRestriction","fnNotificationConfig","fnAllowWeighBridgeManualEntry","fnProductAllocation","fnMasterDeviceConfiguration","fnShareholderAgreement","fnTankShareholderPrimeFunction","fnRoleAdmin","fnShiftConfig","fnPrinterConfiguration","fnCustomerAgreement","fnbaySCADAConfiguration","fnRailReceiptUnloadSpotAssignment","fnStaffVisitor","fnPipelineMeterSiteView","fnRailSiteView","fnMarineSiteView","fnLoadingDetails","fnUnloadingDetails","fnRoadHSEInspection","fnRoadHSEConfiguration","fnMarineHSEInspection","fnMarineHSEConfiguration","fnRailHSEInspection","fnRailHSEConfiguration","fnPipelineHSEInspection","fnPipelineHSEConfiguration","fnPrintRAN","fnViewReceiptStatus","fnCustomerRecipe","fnCOAParameter","fnCOATemplate","fnCOAManagement","fnCOACustomer","fnCOAAssignment","fnProductForecastConfiguration","carrierCode","transportationType","shareholderCode","driverCode","customerCode","trailerCode","originTerminalCode","primeMoverCode","vehicleCode","destinationCode","finishedProductCode","shipmentCode","orderCode","receiptCode","marineDispatchCode","marineReceiptCode","supplierCode","contractCode","railDispatchCode","railReceiptCode","railRouteCode","wagonCode","compartmentCode","smsConfigurationCode","pipelineDispatchCode","pipelineReceiptCode","EmailConfigurationCode","baseProductCode","locationCode","siteViewType","entityType","cardReaderCode","accessCardCode","bcuCode","deuCode","weighBridgeCode","weight","outOfToleranceAllowed","loadingArmCode","transportaionType","bayCode","TransactionNumber","BatchNumber","tankGroupCode","meterCode","shipmentType","shipmentStatus","meterLineType","dispatchCode","receiptStatus","fptTansactionID","productCategoryType","marineReason","sealMasterCode","marineDispatchReason","OperationName","FPTransactionID","ProductCategoryType","compartmentSeqNoInVehicle","adjustedPlanQuantity","forceComplete","dispatchStatus","HolidayDate","ActionID","EODTimePrev","TerminalAction","EODTime","MonthStartDay","captainCode","userType","generalTMUserCode","isPriority","actualTerminalCode","shipmentBondNo","receiptBondNo","deviceType","deviceCode","bayGroup","pipelineHeaderCode","exchangePartnerName","personID","userName","pipelinePlanCode","pipelinePlanType","channelCode","ProcessName","reconciliationCode","NotificationGroupCode","NotificationGroupStatus","NotificationGroupDesc","NotificationResSource","NotificationResMsgCode","NotificationOrigResSource","NotificationOrigResMsgCode","NotificationMessageCode","positionType","exchangeAgreementCode","ProductTransferAgreementCode","ShareholderAgreementStatus","RequestorShareholder","LenderShareholder","requestCode","TransferReferenceCode","ShiftID","ShiftName","printerName","locationtype","forceClosureReason","TransactionType","CustomerRecipeCode","coaTemplateCode","coaManagementCode","coaParameterCode","coaManagementFinishedProductCode","coaSeqNumber","forecastDate","forecastTanks"],"sourceRoot":""}