{"version":3,"file":"static/js/4515.c91320fd.chunk.js","mappings":"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","sources":["Components/Composite/Common/TMDetailsKPILayout.jsx","Components/UIBase/Details/RailRouteDetails.jsx","Components/Composite/Details/RailRouteDetailsComposite.jsx","Components/UIBase/Common/AssociatedTerminals.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Common/TimePicker.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport KPIDashboardLayout from \"../Common/KPIDashboard/KPIDashboardLayout\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nexport default function TMDetailsKPILayout({\r\n    KPIList,\r\n    pageName,\r\n    rowHeight,\r\n    widgetHeight,\r\n    isDraggable,\r\n    isResizable,\r\n    kpiDisplayTopBreakpoint\r\n}) {\r\n    const [KPIDisplays, setKPIDisplays] = useState(1);\r\n\r\n    const kpiDiv = React.useRef(null);\r\n\r\n    const hideKpis = () => {\r\n        let currentScrollPos = window.pageYOffset;\r\n        let KPIDisplay = KPIDisplays;\r\n\r\n        // hide kpis based on div position to top of the window \r\n        if (kpiDiv.current && kpiDiv.current.getBoundingClientRect().top < kpiDisplayTopBreakpoint) {\r\n            KPIDisplay = 0;\r\n        }\r\n        // show the kpis once at top of the screen\r\n        else if (currentScrollPos === 0) {\r\n            KPIDisplay = 1\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n\r\n        setKPIDisplays(KPIDisplay);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            window.addEventListener(\"scroll\", hideKpis);\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // remove listener on unmount\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", hideKpis)\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div ref={kpiDiv}>\r\n            {KPIDisplays === 1 ? <TranslationConsumer>\r\n                {(t) => (\r\n                    <div style={{ marginTop: \"6px\" }}>\r\n                        <ErrorBoundary>\r\n                            <KPIDashboardLayout\r\n                                kpiList={KPIList}\r\n                                isDraggable={isDraggable}\r\n                                isResizable={isResizable}\r\n                                rowHeight={rowHeight}\r\n                                widgetHeight={widgetHeight}\r\n                                pageName={pageName}\r\n                            ></KPIDashboardLayout>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n\r\n                )}\r\n            </TranslationConsumer> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nTMDetailsKPILayout.propTypes = {\r\n    kpiDisplayTopBreakpoint: PropTypes.number\r\n}\r\n\r\nTMDetailsKPILayout.defaultProps = {\r\n    kpiDisplayTopBreakpoint: 100\r\n}","import React from \"react\";\r\nimport { Input, Select, Icon } from \"@scuf/common\";\r\nimport { TranslationConsumer, useTranslation } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DataTable } from \"@scuf/datatable\";\r\nimport { AssociatedTerminals } from \"../Common/AssociatedTerminals\";\r\n\r\nimport { TimePickerMod as TimePicker } from \"../Common/TimePicker\";\r\nimport moment from \"moment-timezone\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\n\r\nRailRouteDetails.propTypes = {\r\n  railRoute: PropTypes.object.isRequired,\r\n  modRailRoute: PropTypes.object.isRequired,\r\n  modAssociations: PropTypes.array.isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  listOptions: PropTypes.shape({\r\n    shareholders: PropTypes.array,\r\n    terminalCodes: PropTypes.array,\r\n    customerDestinationOptions: PropTypes.object,\r\n  }).isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onAllTerminalsChange: PropTypes.func.isRequired,\r\n  selectedRow: PropTypes.array.isRequired,\r\n  handleAssociationSelectionChange: PropTypes.func.isRequired,\r\n  handleCellDataEdit: PropTypes.func.isRequired,\r\n  handleAddAssociation: PropTypes.func.isRequired,\r\n  handleDeleteAssociation: PropTypes.func.isRequired,\r\n  isEnterpriseNode: PropTypes.bool.isRequired,\r\n};\r\n\r\nRailRouteDetails.defaultProps = {\r\n  isEnterpriseNode: false,\r\n};\r\n\r\nexport function RailRouteDetails({\r\n  railRoute,\r\n  modRailRoute,\r\n  modAssociations,\r\n  validationErrors,\r\n  listOptions,\r\n  onFieldChange,\r\n  onAllTerminalsChange,\r\n  selectedRow,\r\n  handleAssociationSelectionChange,\r\n  handleCellDataEdit,\r\n  handleAddAssociation,\r\n  handleDeleteAssociation,\r\n  isEnterpriseNode,\r\n}) {\r\n  const [t] = useTranslation();\r\n\r\n  const handleCustomEditDropDown = (cellData, dropDownoptions) => {\r\n    return (\r\n      <Select\r\n        className=\"selectDropwdown\"\r\n        value={modAssociations[cellData.rowIndex][cellData.field]}\r\n        fluid\r\n        options={dropDownoptions}\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        indicator=\"required\"\r\n        reserveSpace={false}\r\n        search={true}\r\n        noResultsMessage={t(\"noResultsMessage\")}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleCustomEditTextBox = (cellData) => {\r\n    return (\r\n      <Input\r\n        fluid\r\n        value={modAssociations[cellData.rowIndex][cellData.field]}\r\n        onChange={(value) => handleCellDataEdit(value, cellData)}\r\n        reserveSpace={false}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleDestinationEditDropDown = (cellData) => {\r\n    let destinationList = [];\r\n    if (\r\n      listOptions.customerDestinationOptions[\r\n        cellData.rowData[\"ShareholderCode\"]\r\n      ] !== undefined &&\r\n      listOptions.customerDestinationOptions[\r\n        cellData.rowData[\"ShareholderCode\"]\r\n      ] !== null\r\n    ) {\r\n      for (let customerCode in listOptions.customerDestinationOptions[\r\n        cellData.rowData[\"ShareholderCode\"]\r\n      ]) {\r\n        listOptions.customerDestinationOptions[\r\n          cellData.rowData[\"ShareholderCode\"]\r\n        ][customerCode].forEach((destination) => {\r\n          if (destinationList.indexOf(destination) === -1) {\r\n            destinationList.push(destination);\r\n          }\r\n        });\r\n      }\r\n      destinationList.sort((a, b) => {\r\n        if (a > b) {\r\n          return 1;\r\n        } else if (a < b) {\r\n          return -1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n    }\r\n    return handleCustomEditDropDown(\r\n      cellData,\r\n      Utilities.transferListtoOptions(destinationList)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRailRoute.RouteCode}\r\n                label={t(\"RailRouteConfigurationDetails_RailRouteCode\")}\r\n                indicator=\"required\"\r\n                disabled={railRoute.RouteCode !== \"\"}\r\n                onChange={(data) => onFieldChange(\"RouteCode\", data)}\r\n                error={t(validationErrors.RouteCode)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRailRoute.DestinationCode}\r\n                label={t(\"RailRouteConfigurationDetails_FinalDestinationCode\")}\r\n                reserveSpace={false}\r\n                disabled={true}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              {/*<DatePicker\r\n                                fluid\r\n                                value={modRailRoute.DepartureTime === null ?\r\n                                    \"\" : new Date(modRailRoute.DepartureTime)}\r\n                                label={t(\"RailRouteConfigurationList_DepartureTime\")}\r\n                                type=\"datetime\"\r\n                                displayFormat={getCurrentDateFormat()}\r\n                                onChange={(data) => onFieldChange(\"DepartureTime\", data)}\r\n                                error={t(validationErrors.DepartureTime)}\r\n                                reserveSpace={false}\r\n                                />*/}\r\n              <TimePicker\r\n                value={moment(\r\n                  modRailRoute.DepartureTime === null\r\n                    ? new Date().setSeconds(0)\r\n                    : new Date(modRailRoute.DepartureTime).setSeconds(0)\r\n                )}\r\n                label={t(\"RailRouteConfigurationList_DepartureTime\")}\r\n                displayFormat={\"hh:mm A\"}\r\n                onChange={(data) =>\r\n                  onFieldChange(\"DepartureTime\", moment(data).format())\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRailRoute.Description}\r\n                label={t(\"RailRouteConfigurationDetails_Description\")}\r\n                onChange={(data) => onFieldChange(\"Description\", data)}\r\n                error={t(validationErrors.Description)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder={t(\"Common_Select\")}\r\n                label={t(\"Cust_Status\")}\r\n                value={modRailRoute.Active}\r\n                options={[\r\n                  {\r\n                    text: t(\"RailRouteConfigurationDetails_Active\"),\r\n                    value: true,\r\n                  },\r\n                  {\r\n                    text: t(\"RailRouteConfigurationDetails_Inactive\"),\r\n                    value: false,\r\n                  },\r\n                ]}\r\n                onChange={(data) => onFieldChange(\"Active\", data)}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                value={modRailRoute.Remarks}\r\n                label={t(\"Cust_Remarks\")}\r\n                onChange={(data) => onFieldChange(\"Remarks\", data)}\r\n                indicator={\r\n                  modRailRoute.Active !== railRoute.Active ? \"required\" : \"\"\r\n                }\r\n                error={t(validationErrors.Remarks)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            {isEnterpriseNode ? (\r\n              <div className=\"col-12 col-md-6 col-lg-4\">\r\n                <AssociatedTerminals\r\n                  terminalList={listOptions.terminalCodes}\r\n                  selectedTerminal={modRailRoute.TerminalCodes}\r\n                  error={t(validationErrors.TerminalCodes)}\r\n                  onFieldChange={onFieldChange}\r\n                  onCheckChange={onAllTerminalsChange}\r\n                ></AssociatedTerminals>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"row compartmentRow\">\r\n            <div className=\"col col-md-8 col-lg-9 col col-xl-9\"></div>\r\n            <div className=\"col col-md-4 col-lg-3 col-xl-3\">\r\n              <div className=\"compartmentIconContainer\">\r\n                <div onClick={handleAddAssociation} className=\"compartmentIcon\">\r\n                  <div>\r\n                    <Icon root=\"common\" name=\"badge-plus\" size=\"medium\" />\r\n                  </div>\r\n                  <div className=\"margin_l10\">\r\n                    <h5 className=\"font14\">{t(\"FinishedProductInfo_Add\")}</h5>\r\n                  </div>\r\n                </div>\r\n\r\n                <div\r\n                  onClick={handleDeleteAssociation}\r\n                  className=\"compartmentIcon margin_l30\"\r\n                >\r\n                  <div>\r\n                    <Icon root=\"common\" name=\"delete\" size=\"medium\" />\r\n                  </div>\r\n                  <div className=\"margin_l10\">\r\n                    <h5 className=\"font14\">{t(\"DestAdd_Delete\")}</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row marginRightZero tableScroll\">\r\n            <div className=\"col-12 detailsTable\">\r\n              <DataTable\r\n                data={modAssociations}\r\n                selectionMode=\"multiple\"\r\n                selection={selectedRow}\r\n                onSelectionChange={handleAssociationSelectionChange}\r\n              >\r\n                <DataTable.Column\r\n                  className=\"compColHeight colminWidth\"\r\n                  key=\"SequenceNo\"\r\n                  field=\"SequenceNo\"\r\n                  header={t(\"RailRouteConfigurationDetails_Sequence\")}\r\n                  editable={false}\r\n                  editFieldType=\"text\"\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                  className=\"compColHeight colminWidth\"\r\n                  key=\"ShareholderCode\"\r\n                  field=\"ShareholderCode\"\r\n                  header={t(\"RailRouteConfigurationList_Shareholder\")}\r\n                  editable={true}\r\n                  editFieldType=\"text\"\r\n                  customEditRenderer={(celldata) =>\r\n                    handleCustomEditDropDown(celldata, listOptions.shareholders)\r\n                  }\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                  className=\"compColHeight colminWidth\"\r\n                  key=\"DestinationCode\"\r\n                  field=\"DestinationCode\"\r\n                  header={t(\"RailRouteConfigurationDetails_DestinationCode\")}\r\n                  editable={true}\r\n                  editFieldType=\"text\"\r\n                  customEditRenderer={(celldata) =>\r\n                    handleDestinationEditDropDown(celldata)\r\n                  }\r\n                ></DataTable.Column>\r\n                <DataTable.Column\r\n                  className=\"compColHeight colminWidth\"\r\n                  key=\"Remarks\"\r\n                  field=\"Remarks\"\r\n                  header={t(\"RailRouteConfigurationDetails_Remarks\")}\r\n                  editable={true}\r\n                  editFieldType=\"text\"\r\n                  customEditRenderer={handleCustomEditTextBox}\r\n                ></DataTable.Column>\r\n              </DataTable>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { RailRouteDetails } from \"../../UIBase/Details/RailRouteDetails\";\r\n\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport { railRouteValidationDef } from \"../../../JS/ValidationDef\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { emptyRailRoute } from \"../../../JS/DefaultEntities\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Constants from \"./../../../JS/Constants\";\r\nimport * as getUserDetails from \"../../../Redux/Actions/GetUserDetails\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"./../../../Components/ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as KeyCodes from \"./../../../JS/KeyCodes\";\r\nimport lodash from \"lodash\";\r\nimport { functionGroups, fnRailRoute ,fnKPIInformation} from \"../../../JS/FunctionGroups\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { railRouteDestinationListDef } from \"../../../JS/DetailsTableValidationDef\";\r\nimport TMDetailsKPILayout from \"../Common/TMDetailsKPILayout\";\r\nimport { kpiRailRouteDetail } from \"../../../JS/KPIPageName\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\n\r\nclass RailRouteDetailsComposite extends Component {\r\n  state = {\r\n    railRoute: { ...emptyRailRoute },\r\n    modRailRoute: {},\r\n    modAssociations: [],\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      railRouteValidationDef\r\n    ),\r\n    isReadyToRender: false,\r\n    shareholders: this.getShareholders(),\r\n    terminalCodes: [],\r\n    customerDestinationOptions: {},\r\n    saveEnabled: false,\r\n    selectedRow: [],\r\n    selectedAll: false,\r\n    railRouteKPIList:[],\r\n    showAuthenticationLayout: false,\r\n    tempRailRoute: {},\r\n  };\r\n\r\n  getShareholders() {\r\n    return Utilities.transferListtoOptions(\r\n      this.props.userDetails.EntityResult.ShareholderList\r\n    );\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      let modRailRoute = { ...this.state.modRailRoute };\r\n      modRailRoute[propertyName] = data;\r\n\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      if (modRailRoute.Active === this.state.railRoute.Active) {\r\n        if (\r\n          this.state.railRoute.Remarks === modRailRoute.Remarks ||\r\n          modRailRoute.Remarks === \"\"\r\n        ) {\r\n          validationErrors.Remarks = \"\";\r\n        }\r\n      }\r\n      if (propertyName === \"Active\") {\r\n        if (data !== this.state.railRoute.Active) {\r\n          modRailRoute.Remarks = \"\";\r\n        }\r\n      }\r\n\r\n      if (railRouteValidationDef[propertyName] !== undefined) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          railRouteValidationDef[propertyName],\r\n          data\r\n        );\r\n      }\r\n      this.setState({ validationErrors, modRailRoute });\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailDispatchDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleshareholderChange = (shareholderList) => {\r\n    try {\r\n      this.getTerminalsList(shareholderList);\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailRouteDetailsComposite:Error occured on handleshareholderChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  getTerminalsList(shareholderList) {\r\n    try {\r\n      if (\r\n        shareholderList !== null &&\r\n        shareholderList.length > 0 &&\r\n        shareholderList[0] !== undefined &&\r\n        shareholderList[0] !== \"\"\r\n      ) {\r\n        axios(\r\n          RestAPIs.GetTerminals,\r\n          Utilities.getAuthenticationObjectforPost(shareholderList)\r\n        ).then((response) => {\r\n          if (response.data.IsSuccess) {\r\n            let railRoute = lodash.cloneDeep(this.state.railRoute);\r\n            let modRailRoute = lodash.cloneDeep(this.state.modRailRoute);\r\n            let terminalCodes = response.data.EntityResult;\r\n            this.setState({ terminalCodes });\r\n            if (\r\n              railRoute.RouteCode === undefined ||\r\n              railRoute.RouteCode === \"\" ||\r\n              railRoute.RouteCode === null\r\n            ) {\r\n              if (terminalCodes.length === 1) {\r\n                modRailRoute.TerminalCodes = [...terminalCodes];\r\n              } else {\r\n                modRailRoute.TerminalCodes = [];\r\n              }\r\n            }\r\n            if (Array.isArray(modRailRoute.TerminalCodes)) {\r\n              modRailRoute.TerminalCodes = terminalCodes.filter((x) =>\r\n                modRailRoute.TerminalCodes.includes(x)\r\n              );\r\n            }\r\n            this.setState(modRailRoute);\r\n          }\r\n        });\r\n      } else {\r\n        let modRailRoute = lodash.cloneDeep(this.state.modRailRoute);\r\n        modRailRoute.TerminalCodes = [];\r\n        let terminalCodes = [];\r\n        this.setState({ modRailRoute, terminalCodes });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailRouteDetailsComposite:Error occured on getTerminalsList\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleAllTerminalsChange = (checked) => {\r\n    try {\r\n      let modRailRoute = lodash.cloneDeep(this.state.modRailRoute);\r\n      if (checked) modRailRoute.TerminalCodes = [...this.props.terminalCodes];\r\n      else modRailRoute.TerminalCodes = [];\r\n      this.setState({ modRailRoute });\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailRouteDetailsComposite:Error occured on handleAllTerminasChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  handleAssociationSelectionChange = (e) => {\r\n    this.setState({ selectedRow: e });\r\n  };\r\n\r\n  handleCellDataEdit = (newVal, cellData) => {\r\n    let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n\r\n    if (cellData.field === \"ShareholderCode\") {\r\n      let customerDestinationOptions = lodash.cloneDeep(\r\n        this.state.customerDestinationOptions\r\n      );\r\n      if (\r\n        customerDestinationOptions[\r\n          modAssociations[cellData.rowIndex][\"ShareholderCode\"]\r\n        ] !== undefined &&\r\n        customerDestinationOptions[\r\n          modAssociations[cellData.rowIndex][\"ShareholderCode\"]\r\n        ] !== null\r\n      ) {\r\n        let destinationList = [];\r\n        for (let customerCode in customerDestinationOptions[\r\n          cellData.rowData[\"ShareholderCode\"]\r\n        ]) {\r\n          customerDestinationOptions[cellData.rowData[\"ShareholderCode\"]][\r\n            customerCode\r\n          ].forEach((destination) => {\r\n            if (destinationList.indexOf(destination) === -1) {\r\n              destinationList.push(destination);\r\n            }\r\n          });\r\n        }\r\n        if (destinationList !== undefined && destinationList.length === 1) {\r\n          modAssociations[cellData.rowIndex][\"DestinationCode\"] =\r\n            destinationList[0];\r\n        } else {\r\n          modAssociations[cellData.rowIndex][\"DestinationCode\"] = \"\";\r\n        }\r\n      }\r\n    } else if (cellData.field === \"Capacity\") {\r\n      if (isNaN(parseInt(newVal))) {\r\n        newVal = \"\";\r\n      } else {\r\n        newVal = parseInt(newVal);\r\n      }\r\n    }\r\n    modAssociations[cellData.rowIndex][cellData.field] = newVal;\r\n    this.setState({ modAssociations });\r\n  };\r\n\r\n  handleAddAssociation = () => {\r\n    if (!this.props.userDetails.EntityResult.IsArchived) {\r\n      try {\r\n        let newComp = {\r\n          RouteCode: null,\r\n          ShareholderCode: null,\r\n          DestinationCode: null,\r\n          ProductCode: null,\r\n          SequenceNo: 0,\r\n          Comments: \"\",\r\n          AssociatedOrderItems: null,\r\n          AssociatedContractItems: null,\r\n          Attributes: [],\r\n          RailWagonCode: null,\r\n          SupplierCode: null,\r\n          OriginTerminalCode: null,\r\n        };\r\n        let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n        newComp.ShareholderCode = this.props.selectedShareholder;\r\n        newComp.SequenceNo = modAssociations.length + 1;\r\n        modAssociations.push(newComp);\r\n\r\n        this.setState({\r\n          modAssociations,\r\n          selectedRow: [],\r\n        });\r\n      } catch (error) {\r\n        console.log(\r\n          \"RailRouteDetailsComposite:Error occured on handleAddAssociation\",\r\n          error\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  handleDeleteAssociation = () => {\r\n    if (!this.props.userDetails.EntityResult.IsArchived) {\r\n      try {\r\n        if (\r\n          this.state.selectedRow != null &&\r\n          this.state.selectedRow.length > 0\r\n        ) {\r\n          if (this.state.modAssociations.length > 0) {\r\n            let modAssociations = lodash.cloneDeep(this.state.modAssociations);\r\n\r\n            this.state.selectedRow.forEach((obj, index) => {\r\n              modAssociations = modAssociations.filter((com, cindex) => {\r\n                return com.SequenceNo !== obj.SequenceNo;\r\n              });\r\n            });\r\n\r\n            for (let i = 0; i < modAssociations.length; i++) {\r\n              modAssociations[i].SequenceNo = i + 1;\r\n            }\r\n\r\n            this.setState({ modAssociations });\r\n          }\r\n        }\r\n\r\n        this.setState({ selectedRow: [] });\r\n      } catch (error) {\r\n        console.log(\r\n          \"RailRouteDetailsComposite:Error occured on handleDeleteAssociation\",\r\n          error\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const { validationErrors } = { ...this.state };\r\n      const railRoute = lodash.cloneDeep(this.state.railRoute);\r\n\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState({\r\n        modRailRoute: { ...railRoute },\r\n        modAssociations: this.getAssociationsFromRailRoute(railRoute),\r\n        validationErrors,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailDispatchDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  saveRailRoute = () => {\r\n    try {\r\n      this.setState({ saveEnabled: false });\r\n      let tempRailRoute = lodash.cloneDeep(this.state.tempRailRoute);\r\n\r\n      this.state.railRoute.RouteCode === \"\"\r\n      ? this.createRailRoute(tempRailRoute)\r\n      : this.updateRailRoute(tempRailRoute);\r\n    } catch (error) {\r\n      console.log(\"RailRouteDetailssComposite : Error in saveRailRoute\");\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n    //  this.setState({ saveEnabled: false });\r\n      let modRailRoute = lodash.cloneDeep(this.state.modRailRoute);\r\n      modRailRoute.IntermediateDestinationList = this.getCompartmentsFromAssociations(\r\n        this.state.modAssociations\r\n      );\r\n      if (this.validateSave(modRailRoute)) {\r\n        modRailRoute.DestinationCode =\r\n          modRailRoute.IntermediateDestinationList[\r\n            modRailRoute.IntermediateDestinationList.length - 1\r\n          ].DestinationCode;\r\n        modRailRoute.RouteName = modRailRoute.RouteCode;\r\n      \r\n        let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      let tempRailRoute = lodash.cloneDeep(modRailRoute);\r\n      this.setState({ showAuthenticationLayout, tempRailRoute }, () => {\r\n        if (showAuthenticationLayout === false) {\r\n          this.saveRailRoute();\r\n        }\r\n    });\r\n\r\n        \r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailRouteDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n\r\n  validateSave(modRailRoute) {\r\n    let validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n\r\n    Object.keys(railRouteValidationDef).forEach(function (key) {\r\n      validationErrors[key] = Utilities.validateField(\r\n        railRouteValidationDef[key],\r\n        modRailRoute[key]\r\n      );\r\n    });\r\n\r\n    if (modRailRoute.Active !== this.state.railRoute.Active) {\r\n      if (modRailRoute.Remarks === null || modRailRoute.Remarks === \"\") {\r\n        validationErrors[\"Remarks\"] = \"OriginTerminal_RemarksRequired\";\r\n      }\r\n    }\r\n\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"RailRouteDetails_SavedStatus\",\r\n      messageResultDetails: [],\r\n    };\r\n\r\n    let repeatDestination = \"\";\r\n    let destinationList = [];\r\n    for (let compart of modRailRoute.IntermediateDestinationList) {\r\n      if (destinationList.indexOf(compart.DestinationCode) === -1) {\r\n        destinationList.push(compart.DestinationCode);\r\n      } else {\r\n        repeatDestination = compart.DestinationCode;\r\n        break;\r\n      }\r\n    }\r\n    if (repeatDestination !== \"\") {\r\n      notification.messageResultDetails.push({\r\n        keyFields: [\r\n          \"RailRouteConfigurationDetails_RailRouteCode\",\r\n          \"DestinationCode\",\r\n        ],\r\n        keyValues: [modRailRoute.RouteCode, repeatDestination],\r\n        isSuccess: false,\r\n        errorMessage: \"ERRMSG_RAILROUTE_DESTINATION_REPEATING_\",\r\n      });\r\n      this.props.onSaved(this.state.modRailRoute, \"update\", notification);\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      Array.isArray(modRailRoute.IntermediateDestinationList) &&\r\n      modRailRoute.IntermediateDestinationList.length > 0\r\n    ) {\r\n      modRailRoute.IntermediateDestinationList.forEach((compart) => {\r\n        railRouteDestinationListDef.forEach((col) => {\r\n          let err = \"\";\r\n\r\n          if (col.validator !== undefined) {\r\n            err = Utilities.validateField(col.validator, compart[col.field]);\r\n          }\r\n          if (err !== \"\") {\r\n            notification.messageResultDetails.push({\r\n              keyFields: [\r\n                \"RailRouteConfigurationDetails_RailRouteCode\",\r\n                col.displayName,\r\n              ],\r\n              keyValues: [modRailRoute.RouteCode, compart[col.field]],\r\n              isSuccess: false,\r\n              errorMessage: err,\r\n            });\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      notification.messageResultDetails.push({\r\n        keyFields: [],\r\n        keyValues: [],\r\n        isSuccess: false,\r\n        errorMessage: \"ERRMSG_RAILROUTE_DESTINATION_LIST_EMPTY\",\r\n      });\r\n    }\r\n\r\n    this.setState({ validationErrors });\r\n    let returnValue = Object.values(validationErrors).every(function (value) {\r\n      return value === \"\";\r\n    });\r\n    if (notification.messageResultDetails.length > 0) {\r\n      this.props.onSaved(this.state.modRailRoute, \"update\", notification);\r\n      return false;\r\n    }\r\n    return returnValue;\r\n  }\r\n\r\n  createRailRoute(modRailRoute) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.railRouteCode,\r\n        value: modRailRoute.RouteCode,\r\n      },\r\n    ];\r\n\r\n    let obj = {\r\n      ShareHolderCode: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      keyDataCode: KeyCodes.railRouteCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modRailRoute,\r\n    };\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"RailRouteDetails_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"RailRouteConfigurationDetails_RailRouteCode\"],\r\n          keyValues: [modRailRoute.RouteCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.CreateRailRoute,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            showAuthenticationLayout: false,\r\n          });\r\n          this.getRailRoute({ Common_Code: modRailRoute.RouteCode });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: true,\r\n            showAuthenticationLayout: false,\r\n          });\r\n          console.log(\"Error in CreateRailRoute:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(modRailRoute, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: true,\r\n          showAuthenticationLayout: false,\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(modRailRoute, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  updateRailRoute(modRailRoute) {\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.railRouteCode,\r\n        value: modRailRoute.RouteCode,\r\n      },\r\n    ];\r\n\r\n    let obj = {\r\n      ShareHolderCode: this.props.userDetails.EntityResult.PrimaryShareholder,\r\n      keyDataCode: KeyCodes.railRouteCode,\r\n      KeyCodes: keyCode,\r\n      Entity: modRailRoute,\r\n    };\r\n    let notification = {\r\n      messageType: \"critical\",\r\n      message: \"RailRouteDetails_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"RailRouteConfigurationDetails_RailRouteCode\"],\r\n          keyValues: [modRailRoute.RouteCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    axios(\r\n      RestAPIs.UpdateRailRoute,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            showAuthenticationLayout: false,\r\n          });\r\n\r\n          this.getRailRoute({ Common_Code: modRailRoute.RouteCode });\r\n        } else {\r\n          this.setState({\r\n            saveEnabled: true,\r\n            showAuthenticationLayout: false,\r\n          });\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          console.log(\"Error in UpdateRailRoute:\", result.ErrorList);\r\n        }\r\n        this.props.onSaved(modRailRoute, \"update\", notification);\r\n      })\r\n      .catch((error) => {\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(modRailRoute, \"modify\", notification);\r\n        this.setState({\r\n          saveEnabled: true,\r\n          showAuthenticationLayout: false,\r\n        });\r\n      });\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    try {\r\n      if (\r\n        this.state.railRoute.RouteCode !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined\r\n      )\r\n        this.getRailRoute(nextProps.selectedRow);\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailRouteDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getCustomerDestinations();\r\n      this.getRailRoute(this.props.selectedRow);\r\n    } catch (error) {\r\n      console.log(\r\n        \"RailRouteDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getCustomerDestinations() {\r\n    axios(\r\n      RestAPIs.GetCustomerDestinations +\r\n        \"?ShareholderCode=\" +\r\n        \"&TransportationType=\" +\r\n        Constants.TransportationType.RAIL,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (Array.isArray(result.EntityResult)) {\r\n            let customerDestinationOptions = {};\r\n            result.EntityResult.forEach((entity) => {\r\n              customerDestinationOptions[entity.ShareholderCode] =\r\n                entity.CustomerDestinationsList;\r\n            });\r\n            this.setState({ customerDestinationOptions });\r\n          } else {\r\n            console.log(\"customerdestinations not identified for shareholder\");\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Customer List:\", error);\r\n      });\r\n  }\r\n\r\n  getRailRoute(selectedRow) {\r\n    let transportationType = this.getTransportationType();\r\n    emptyRailRoute.TransportationType = transportationType;\r\n\r\n    if (selectedRow.Common_Code === undefined) {\r\n      this.setState({\r\n        railRoute: { ...emptyRailRoute },\r\n        modRailRoute: { ...emptyRailRoute },\r\n        modAssociations: [],\r\n        isReadyToRender: true,\r\n        railRouteKPIList:[],\r\n        saveEnabled: Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          fnRailRoute\r\n        ),\r\n      });\r\n      return;\r\n    }\r\n    let keyCode = [\r\n      {\r\n        key: KeyCodes.railRouteCode,\r\n        value: selectedRow.Common_Code,\r\n      },\r\n      {\r\n        key: KeyCodes.transportationType,\r\n        value: transportationType,\r\n      },\r\n    ];\r\n    let obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      keyDataCode: KeyCodes.railRouteCode,\r\n      KeyCodes: keyCode,\r\n    };\r\n    axios(\r\n      RestAPIs.GetRailRoute,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.getTerminalsList(\r\n            transportationType === Constants.TransportationType.RAIL\r\n              ? [result.EntityResult.ShareholderCode]\r\n              : result.EntityResult.ShareholderCodes\r\n          );\r\n          this.setState({\r\n            isReadyToRender: true,\r\n            railRoute: lodash.cloneDeep(result.EntityResult),\r\n            modRailRoute: lodash.cloneDeep(result.EntityResult),\r\n            modAssociations: this.getAssociationsFromRailRoute(\r\n              result.EntityResult\r\n            ),\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.modify,\r\n              fnRailRoute\r\n            ),\r\n          });\r\n          this.getKPIList(result.EntityResult.RailRouteCode);\r\n        } else {\r\n          this.setState({\r\n            railRoute: lodash.cloneDeep(emptyRailRoute),\r\n            modRailRoute: lodash.cloneDeep(emptyRailRoute),\r\n            isReadyToRender: true,\r\n          });\r\n          console.log(\"Error in GetRailRoute:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting railRoute:\", error);\r\n      });\r\n  }\r\n\r\n  getTransportationType() {\r\n    let transportationType = Constants.TransportationType.RAIL;\r\n    const { genericProps } = this.props;\r\n    if (\r\n      genericProps !== undefined &&\r\n      genericProps.transportationType !== undefined\r\n    ) {\r\n      transportationType = genericProps.transportationType;\r\n    }\r\n    return transportationType;\r\n  }\r\n\r\n  getAssociationsFromRailRoute(railRoute) {\r\n    let railRouteAssociations = [];\r\n    if (Array.isArray(railRoute.IntermediateDestinationList)) {\r\n      railRoute.IntermediateDestinationList.forEach((destination) => {\r\n        railRouteAssociations.push({\r\n          SequenceNo: destination.SequenceNo,\r\n          Remarks: destination.Remarks,\r\n          DestinationCode: destination.DestinationCode,\r\n          ShareholderCode: destination.ShareholderCode,\r\n        });\r\n      });\r\n    }\r\n    return railRouteAssociations;\r\n  }\r\n\r\n  getCompartmentsFromAssociations(modAssociations) {\r\n    let railRouteDestinations = [];\r\n    if (Array.isArray(modAssociations)) {\r\n      modAssociations.forEach((modAssociation) => {\r\n        if (\r\n          !(\r\n            modAssociation.DestinationCode === null ||\r\n            modAssociation.DestinationCode === \"\"\r\n          )\r\n        ) {\r\n          railRouteDestinations.push({\r\n            SequenceNo: modAssociation.SequenceNo,\r\n            Remarks: modAssociation.Remarks,\r\n            DestinationCode: modAssociation.DestinationCode,\r\n            ShareholderCode: modAssociation.ShareholderCode,\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return railRouteDestinations;\r\n  }\r\n  //Get KPI for Rail Route\r\n  getKPIList(railRouteCode) {\r\n    let KPIView = Utilities.isInFunction(\r\n      this.props.userDetails.EntityResult.FunctionsList,\r\n      functionGroups.view,\r\n      fnKPIInformation\r\n    );\r\n    if (KPIView === true) {\r\n      let objKPIRequestData = {\r\n        PageName: kpiRailRouteDetail,\r\n        InputParameters: [{ key: \"RailRouteCode\", value:railRouteCode}],\r\n      };\r\n      axios(\r\n        RestAPIs.GetKPI,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          objKPIRequestData,\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          if (result.IsSuccess === true) {\r\n            this.setState({\r\n              railRouteKPIList: result.EntityResult.ListKPIDetails,\r\n            });\r\n          } else {\r\n            this.setState({ railRouteKPIList: [] });\r\n            console.log(\"Error in rail route KPIList:\", result.ErrorList);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getting Rail Route KPIList:\", error);\r\n        });\r\n    }\r\n  }\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const popUpContents = [\r\n      {\r\n        fieldName: \"RailRouteConfigurationList_LastUpdatedTime\",\r\n        fieldValue:\r\n          new Date(\r\n            this.state.modRailRoute.LastUpdatedTime\r\n          ).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(\r\n            this.state.modRailRoute.LastUpdatedTime\r\n          ).toLocaleTimeString(),\r\n      },\r\n      {\r\n        fieldName: \"RailRouteConfigurationDetails_LastActiveTime\",\r\n        fieldValue:\r\n          this.state.modRailRoute.LastActiveTime !== undefined &&\r\n          this.state.modRailRoute.LastActiveTime !== null\r\n            ? new Date(\r\n                this.state.modRailRoute.LastActiveTime\r\n              ).toLocaleDateString() +\r\n              \" \" +\r\n              new Date(\r\n                this.state.modRailRoute.LastActiveTime\r\n              ).toLocaleTimeString()\r\n            : \"\",\r\n      },\r\n      {\r\n        fieldName: \"RailRouteConfigurationDetails_CreatedTime\",\r\n        fieldValue:\r\n          new Date(this.state.modRailRoute.CreatedTime).toLocaleDateString() +\r\n          \" \" +\r\n          new Date(this.state.modRailRoute.CreatedTime).toLocaleTimeString(),\r\n      },\r\n    ];\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader\r\n            entityCode={this.state.railRoute.RouteCode}\r\n            newEntityName=\"RailRouteConfigurationDetails_NewRailRoute\"\r\n            popUpContents={popUpContents}\r\n          ></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <TMDetailsKPILayout KPIList={this.state.railRouteKPIList}> </TMDetailsKPILayout>\r\n        <ErrorBoundary>\r\n          <RailRouteDetails\r\n            railRoute={this.state.railRoute}\r\n            modRailRoute={this.state.modRailRoute}\r\n            modAssociations={this.state.modAssociations}\r\n            validationErrors={this.state.validationErrors}\r\n            selectedRow={this.state.selectedRow}\r\n            listOptions={{\r\n              shareholders: this.state.shareholders,\r\n              terminalCodes: this.props.terminalCodes,\r\n              customerDestinationOptions: this.state.customerDestinationOptions,\r\n            }}\r\n            onFieldChange={this.handleChange}\r\n            onAllTerminalsChange={this.handleAllTerminalsChange}\r\n            handleAssociationSelectionChange={\r\n              this.handleAssociationSelectionChange\r\n            }\r\n            handleCellDataEdit={this.handleCellDataEdit}\r\n            handleAddAssociation={this.handleAddAssociation}\r\n            handleDeleteAssociation={this.handleDeleteAssociation}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n          ></RailRouteDetails>\r\n        </ErrorBoundary>\r\n\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={\r\n              this.state.railRoute.RouteCode  === \"\"\r\n                ? functionGroups.add\r\n                : functionGroups.modify\r\n            }\r\n            functionGroup={fnRailRoute}\r\n            handleOperation={this.saveRailRoute}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\nconst mapRouteToProps = (route) => {\r\n  return {\r\n    userAction: bindActionCreators(getUserDetails, route),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapRouteToProps\r\n)(RailRouteDetailsComposite);\r\n\r\nRailRouteDetailsComposite.propTypes = {\r\n  selectedRow: PropTypes.object.isRequired,\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Select, Checkbox } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nAssociatedTerminals.propTypes = {\r\n  terminalList: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  selectedTerminal: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  validationError: PropTypes.string,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  onCheckChange: PropTypes.func.isRequired,\r\n};\r\nAssociatedTerminals.defaultProps = {\r\n  terminalList: [],\r\n  selectedTerminal: [],\r\n  validationError: \"\",\r\n};\r\nexport function AssociatedTerminals({\r\n  terminalList,\r\n  selectedTerminal,\r\n  validationError,\r\n  onFieldChange,\r\n  onCheckChange,\r\n}) {\r\n  //console.log(\"component terminalList\", terminalList);\r\n  if (selectedTerminal === null) selectedTerminal = [];\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <div style={{ width: \"80%\" }}>\r\n            <Select\r\n              fluid\r\n              placeholder={t(\"Common_Select\")}\r\n              label={t(\"TerminalCodes\")}\r\n              value={selectedTerminal}\r\n              multiple={true}\r\n              options={Utilities.transferListtoOptions(terminalList)}\r\n              onChange={(data) => onFieldChange(\"TerminalCodes\", data)}\r\n              error={t(validationError)}\r\n              disabled={terminalList.length === 0}\r\n              reserveSpace={false}\r\n            />\r\n          </div>\r\n          <div className=\"ddlSelectAll\">\r\n            <Checkbox\r\n              label={t(\"Common_All\")}\r\n              checked={\r\n                Array.isArray(selectedTerminal) &&\r\n                selectedTerminal.length === terminalList.length\r\n              }\r\n              onChange={(checked) => onCheckChange(checked)}\r\n            ></Checkbox>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"../../../CSS/timePickerStyles.css\";\r\nimport TimePicker from \"rc-time-picker\";\r\n\r\nTimePickerMod.defaultProps = {\r\n  disabled: false,\r\n};\r\n\r\nexport function TimePickerMod({\r\n  value,\r\n  label,\r\n  displayFormat,\r\n  onChange,\r\n  disabled,\r\n  error,\r\n}) {\r\n  return (\r\n    <div>\r\n      <div className=\"ui input-label\">\r\n        <span className=\"input-label-message\">{label}</span>\r\n      </div>\r\n      <div className=\"ui single-input picker-input datetime-time  fluid has-icon\">\r\n        <TimePicker\r\n          showSecond={false}\r\n          defaultValue={value}\r\n          value={value}\r\n          onChange={onChange}\r\n          format={displayFormat}\r\n          use12Hours\r\n          className=\"input-wrap\"\r\n          disabled={disabled}\r\n          error={error}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["TMDetailsKPILayout","_ref","KPIList","pageName","rowHeight","widgetHeight","isDraggable","isResizable","kpiDisplayTopBreakpoint","KPIDisplays","setKPIDisplays","useState","kpiDiv","React","hideKpis","currentScrollPos","window","pageYOffset","KPIDisplay","current","getBoundingClientRect","top","useEffect","addEventListener","removeEventListener","_jsx","ref","children","TranslationConsumer","t","style","marginTop","ErrorBoundary","KPIDashboardLayout","kpiList","defaultProps","RailRouteDetails","railRoute","modRailRoute","modAssociations","validationErrors","listOptions","onFieldChange","onAllTerminalsChange","selectedRow","handleAssociationSelectionChange","handleCellDataEdit","handleAddAssociation","handleDeleteAssociation","isEnterpriseNode","useTranslation","handleCustomEditDropDown","cellData","dropDownoptions","Select","className","value","rowIndex","field","fluid","options","onChange","indicator","reserveSpace","search","noResultsMessage","handleCustomEditTextBox","Input","_jsxs","RouteCode","label","disabled","data","error","DestinationCode","TimePicker","moment","DepartureTime","Date","setSeconds","displayFormat","format","Description","placeholder","Active","text","Remarks","AssociatedTerminals","terminalList","terminalCodes","selectedTerminal","TerminalCodes","onCheckChange","onClick","Icon","root","name","size","DataTable","selectionMode","selection","onSelectionChange","Column","header","editable","editFieldType","customEditRenderer","celldata","shareholders","destinationList","undefined","customerDestinationOptions","rowData","customerCode","forEach","destination","indexOf","push","sort","a","b","Utilities","handleDestinationEditDropDown","RailRouteDetailsComposite","Component","constructor","arguments","state","emptyRailRoute","railRouteValidationDef","isReadyToRender","this","getShareholders","saveEnabled","selectedAll","railRouteKPIList","showAuthenticationLayout","tempRailRoute","handleChange","propertyName","setState","console","log","handleshareholderChange","shareholderList","getTerminalsList","handleAllTerminalsChange","checked","lodash","props","e","newVal","length","isNaN","parseInt","userDetails","EntityResult","IsArchived","newComp","ShareholderCode","ProductCode","SequenceNo","Comments","AssociatedOrderItems","AssociatedContractItems","Attributes","RailWagonCode","SupplierCode","OriginTerminalCode","selectedShareholder","obj","index","filter","com","cindex","i","handleReset","Object","keys","key","getAssociationsFromRailRoute","saveRailRoute","createRailRoute","updateRailRoute","handleSave","IntermediateDestinationList","getCompartmentsFromAssociations","validateSave","RouteName","IsWebPortalUser","handleAuthenticationClose","ShareholderList","axios","RestAPIs","then","response","IsSuccess","Array","isArray","x","includes","notification","messageType","message","messageResultDetails","repeatDestination","compart","keyFields","keyValues","isSuccess","errorMessage","onSaved","railRouteDestinationListDef","col","err","validator","displayName","returnValue","values","every","keyCode","KeyCodes","ShareHolderCode","PrimaryShareholder","keyDataCode","Entity","tokenDetails","tokenInfo","result","getRailRoute","Common_Code","ErrorList","catch","componentWillReceiveProps","nextProps","componentDidMount","getCustomerDestinations","Constants","RAIL","entity","CustomerDestinationsList","transportationType","getTransportationType","TransportationType","FunctionsList","functionGroups","add","fnRailRoute","ShareholderCodes","modify","getKPIList","RailRouteCode","genericProps","railRouteAssociations","railRouteDestinations","modAssociation","railRouteCode","view","fnKPIInformation","objKPIRequestData","PageName","kpiRailRouteDetail","InputParameters","ListKPIDetails","render","popUpContents","fieldName","fieldValue","LastUpdatedTime","toLocaleDateString","toLocaleTimeString","LastActiveTime","CreatedTime","TMDetailsHeader","entityCode","newEntityName","IsEnterpriseNode","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","route","userAction","bindActionCreators","validationError","display","justifyContent","width","multiple","Checkbox","margin","Popup","element","marginLeft","position","List","map","content","Content","Button","float","TimePickerMod","showSecond","defaultValue","use12Hours"],"sourceRoot":""}