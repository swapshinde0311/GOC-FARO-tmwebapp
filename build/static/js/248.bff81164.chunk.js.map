{"version":3,"file":"static/js/248.bff81164.chunk.js","mappings":"4QAsBA,MAAMA,UAA0BC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KACxCC,MAAQ,CACNC,gBAAiB,GACjBC,UAAW,EACXC,SAAU,GACV,KA+BFC,kBAAqBC,IACnBC,KAAKC,SAAS,CAAEN,gBAAiBI,GAAQ,EACzC,KAEFG,iBAAmB,CAACC,EAASC,KAC3B,IACEJ,KAAKK,MAAMC,YAAYH,EAASC,EAClC,CAAE,MAAOG,GACPC,QAAQC,IAAI,sDAAuDF,EACrE,EACA,CAvCFG,iBAAAA,GACEV,KAAKW,eACP,CAEAA,aAAAA,GACE,IACEC,IACEC,EAAAA,IAAyB,gCACzBC,EAAAA,GACEd,KAAKK,MAAMU,aAAaC,YAE1BC,MAAMC,IACN,IAAIC,EAASD,EAASd,MACG,IAArBe,EAAOC,YACJC,MAAMC,SAASH,EAAOI,aAAuB,YAChDvB,KAAKC,SAAS,CACZJ,SAAUyB,SAASH,EAAOI,aAAuB,YAGvD,GAEJ,CAAE,MAAOhB,GACPC,QAAQC,IACN,+DACAF,EAEJ,CACF,CAcAiB,aAAAA,CAAcpB,GACZ,OACEqB,EAAAA,EAAAA,KAACC,EAAAA,oBAAmB,CAAAC,SAChBC,IACAC,EAAAA,EAAAA,MAAA,OAAAF,SAAA,CACGC,EAAE,wBAAwB,MAAIxB,EAAK0B,QAAQ,KAAEL,EAAAA,EAAAA,KAAA,SAC7CG,EAAE,4BAA4B,MAAIxB,EAAK2B,aACvCN,EAAAA,EAAAA,KAAA,SACAG,EAAE,wBAAwB,MAAIxB,EAAK4B,cACnCP,EAAAA,EAAAA,KAAA,SACAG,EAAE,qBAAqB,MAAIxB,EAAK6B,SAAW,aAAe,QAC1DR,EAAAA,EAAAA,KAAA,SACAG,EAAE,wBAAwB,MAAIxB,EAAK8B,OAAS,OAAS,YAKhE,CAEAC,qBAAAA,CAAsB/B,GACpB,OACEqB,EAAAA,EAAAA,KAACC,EAAAA,oBAAmB,CAAAC,SAChBC,IACAC,EAAAA,EAAAA,MAAA,OAAAF,SAAA,CACyB,OAAtBvB,EAAKgC,aACFR,EAAE,gBACFA,EAAE,mCAAoC,IAAI,KAC3CxB,EAAKiC,KAAK,KAAEZ,EAAAA,EAAAA,KAAA,SACdG,EAAE,uBAAuB,MAAIxB,EAAKkC,iBAClCb,EAAAA,EAAAA,KAAA,SACAG,EAAE,8BAA8B,MAAIxB,EAAKmC,aACzCd,EAAAA,EAAAA,KAAA,SACAG,EAAE,uBAAuB,MAAIxB,EAAKoC,aAClCf,EAAAA,EAAAA,KAAA,SACAG,EAAE,qBAAqB,MAAIxB,EAAKqC,YAChChB,EAAAA,EAAAA,KAAA,SACAG,EAAE,iBAAiB,KAAG,IACtB,IAAIc,KAAKtC,EAAKuC,eAAeC,yBAKxC,CAEAC,iBAAAA,CAAkBzC,GAChB,OACEqB,EAAAA,EAAAA,KAACC,EAAAA,oBAAmB,CAAAC,SAChBC,IACAC,EAAAA,EAAAA,MAAA,OAAAF,SAAA,CACGC,EAAE,iBAAiB,KAAG,IACL,SAAjBxB,EAAK0C,QAAqBlB,EAAE,gBAAkBxB,EAAK0C,YAK9D,CACAC,wBAAAA,CAAyBC,EAAMC,GAG7B,OAAOD,EAAOE,EAAAA,GAAsBD,CACtC,CAEAE,MAAAA,GACE,IAAI,gBAAExD,GAAoBK,KAAKN,MAE3B0D,EADUpD,KAAKK,MAAMgD,QACMC,QAAQC,GAEnCA,EAAOzB,QAAQ0B,cAAcC,SAAS9D,EAAgB6D,gBACtDD,EAAOG,oBAAoBC,MAAK,SAAUC,GACxC,OAAOA,EAAWvB,KAAKmB,cAAcC,SACnC9D,EAAgB6D,cAEpB,MAGAK,EAAiB,GACjBjE,EAAYkE,IAAAA,UAAiB9D,KAAKN,MAAME,WACxCI,KAAKN,MAAMG,UAAYuD,EAAiBW,SAC1CnE,EAAY,GAEd,IAAIoE,GAAoBpE,EAAY,GAAKI,KAAKN,MAAMG,SAChDoE,EAAkBD,EAAmBhE,KAAKN,MAAMG,SAKpD,OAJIoE,GAAmBb,EAAiBW,SACtCE,EAAkBb,EAAiBW,QAErCF,EAAiBT,EAAiBc,MAAMF,EAAkBC,IAExDxC,EAAAA,EAAAA,KAACC,EAAAA,oBAAmB,CAAAC,SAChBC,IACAC,EAAAA,EAAAA,MAAA,OAAKsC,UAAU,mBAAkBxC,SAAA,EAC/BE,EAAAA,EAAAA,MAAA,OAAKsC,UAAU,MAAKxC,SAAA,EAClBF,EAAAA,EAAAA,KAAA,OAAK0C,UAAU,QAAOxC,UACpBF,EAAAA,EAAAA,KAAC2C,EAAAA,MAAK,CACJD,UAAU,gBACVE,YAAazC,EAAE,2BACf0C,QAAQ,EACRC,SAAWnE,GAASJ,KAAKF,kBAAkBM,QAG/CqB,EAAAA,EAAAA,KAAA,OAAK0C,UAAU,QAAOxC,SACnByB,EAAiBW,OAAS/D,KAAKN,MAAMG,UACpC4B,EAAAA,EAAAA,KAAC+C,EAAAA,WAAU,CACTC,WAAYrB,EAAiBW,OAC7BW,aAAc1E,KAAKN,MAAMG,SACzB8E,WAAY3E,KAAKN,MAAME,UACvBgF,aAAeC,IACb7E,KAAKC,SAAS,CAAEL,UAAWiF,GAAO,IAItC,MAIJpD,EAAAA,EAAAA,KAAA,OAAK0C,UAAU,QAAQW,MAAO,CAAEC,UAAW,QAASpD,UAClDE,EAAAA,EAAAA,MAAA,OAAKiD,MAAO,CAAEE,MAAO,SAAUrD,SAAA,CAC5BC,EAAE,sBAAwB,MAAQ5B,KAAKK,MAAM4E,aAC9CxD,EAAAA,EAAAA,KAAA,QACEqD,MAAO,CAAEI,WAAY,OAAQC,OAAQ,WACrCC,QAASA,IAAMpF,KAAKK,MAAMgF,YAAY1D,UAEtCF,EAAAA,EAAAA,KAAA,OACEqD,MAAO,CAAEQ,MAAO,MAChBC,IAAI,eACJC,IAAI,gBAMd/D,EAAAA,EAAAA,KAACgE,EAAAA,EAAa,CAAA9D,SACXkC,EAAeE,OAAS,EACrBF,EAAe6B,KAAI,CAACC,EAAGC,KACrBnE,EAAAA,EAAAA,KAAA,OAAKqD,MAAO,CAAEe,UAAW,QAASlE,UAChCE,EAAAA,EAAAA,MAACiE,EAAAA,MAAK,CAAAnE,SAAA,EACJF,EAAAA,EAAAA,KAACqE,EAAAA,MAAMC,OAAM,CAAApE,UACXF,EAAAA,EAAAA,KAACqE,EAAAA,MAAME,WAAU,CACfC,QAASN,EAAE3D,aAAe,EAC1BkE,QAASP,EAAE7D,QAAQH,UAEnBF,EAAAA,EAAAA,KAAA,OACE0C,UAAU,MACVW,MAAO,CAAEqB,aAAc,SAAUxE,UAEjCE,EAAAA,EAAAA,MAAA,OAAKiD,MAAO,CAAEsB,QAAS,QAASzE,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,OAAAE,SACGgE,EAAE3D,aAAe,IACL,IAAb2D,EAAEzD,SAC6B,IAA/BlC,KAAKK,MAAMgG,iBACT5E,EAAAA,EAAAA,KAAC6E,EAAAA,SAAQ,CACPC,MAAOZ,EAAE7D,QACT0E,SACoB,IAAlBb,EAAEc,YAEJlC,SAAWnE,GACTJ,KAAKE,iBAAiByF,EAAE7D,QAAS1B,MAIrCqB,EAAAA,EAAAA,KAAA,OAAKqD,MAAO,CAAE4B,WAAY,OAAQ/E,UAChCF,EAAAA,EAAAA,KAACkF,EAAAA,WAAU,CACTJ,MAAOZ,EAAE7D,QAAU,aAK3BL,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAACgE,EAAAA,EAAa,CAAA9D,UACZF,EAAAA,EAAAA,KAACmF,EAAAA,QAAO,CACNC,SACEpF,EAAAA,EAAAA,KAACqF,EAAAA,KAAI,CACHhC,MAAO,CAAEiC,cAAe,OACxBC,KAAK,aACLC,KAAK,WAGTf,QAASlG,KAAKwB,cAAcmE,GAC5BuB,KAAK,OACLC,SAAS,sBAIf1F,EAAAA,EAAAA,KAACgE,EAAAA,EAAa,CAAA9D,UACZF,EAAAA,EAAAA,KAACmF,EAAAA,QAAO,CACNC,SACEpF,EAAAA,EAAAA,KAAA,QAAM0C,UAAU,sBAAqBxC,UACnCF,EAAAA,EAAAA,KAAA,QACEqD,MAAO,CAAEsC,SAAU,QACnBjD,UACgB,SAAdwB,EAAE7C,QACE,yBACc,YAAd6C,EAAE7C,QACF,eACA,qBAKZoD,QAASlG,KAAK6C,kBAAkB8C,GAChCuB,KAAK,OACLC,SAAS,oBAGgB,IAA5BnH,KAAKK,MAAMgH,cACV5F,EAAAA,EAAAA,KAAA,OACEqD,MAAO,CACLqC,SAAU,WACVG,MAAO,QACP3F,UAEFF,EAAAA,EAAAA,KAAA,QAAMqD,MAAO,CAAEC,UAAW,WAAYpD,UACpCF,EAAAA,EAAAA,KAACqF,EAAAA,KAAI,CAACE,KAAK,SAASC,KAAK,iBAI7B,aAMVxF,EAAAA,EAAAA,KAACqE,EAAAA,MAAMyB,KAAI,CAAA5F,UACTF,EAAAA,EAAAA,KAACqE,EAAAA,MAAM0B,IAAG,CAAA7F,UACRF,EAAAA,EAAAA,KAACgG,EAAAA,GAAS,CAACC,YAAa/B,EAAE7D,QAAS6F,KAAK,QAAOhG,SAC3CiG,IACA/F,EAAAA,EAAAA,MAAA,OACEgG,IAAKD,EAASE,YACVF,EAASG,eAAcpG,SAAA,CAE1BgE,EAAEjC,oBAAoBK,OAAS,EAC9B4B,EAAEjC,oBAAoBgC,KAAI,CAACsC,EAAGC,KAC5BxG,EAAAA,EAAAA,KAACqE,EAAAA,MAAMoC,KAAI,CACT/D,UACEnE,KAAKK,MAAM8H,4BACR9F,OAAS2F,EAAE3F,KACV,6BACA,kBAEN+C,QAASA,IACPpF,KAAKK,MAAMgG,gBACPrG,KAAKK,MAAM+H,YACTH,EACAtC,EAAE7D,SAEJ,GACLH,UAEDF,EAAAA,EAAAA,KAACgE,EAAAA,EAAa,CAAA9D,UACZF,EAAAA,EAAAA,KAAC4G,EAAAA,GAAS,CACRC,YAAatI,KAAK+C,yBAChBiF,EAAE3F,KACF2F,EAAE1F,iBAGJiG,gBAEE,IADAvI,KAAKK,MAAMgG,gBAEZ1E,SAEAA,CAACiG,EAAUY,KACV3G,EAAAA,EAAAA,MAAA,OACEgG,IAAKD,EAASE,YACVF,EAASa,kBACTb,EAASc,gBAAe/G,SAAA,EAE5BE,EAAAA,EAAAA,MAAA,OAAKsC,UAAU,wBAAuBxC,SAAA,CACnCqG,EAAE3F,MACHZ,EAAAA,EAAAA,KAACgE,EAAAA,EAAa,CAAA9D,UACZF,EAAAA,EAAAA,KAACmF,EAAAA,QAAO,CACNC,SACEpF,EAAAA,EAAAA,KAAA,QAAM0C,UAAU,wBAAuBxC,UACrCF,EAAAA,EAAAA,KAACqF,EAAAA,KAAI,CACHE,KAAK,aACLC,KAAK,aAIXf,QAASlG,KAAKmC,sBACZ6F,GAEFd,KAAK,OACLC,SAAS,uBAIf1F,EAAAA,EAAAA,KAAA,OAAK0C,UAAU,wBAAuBxC,SACnCqG,EAAExF,cAEJyF,EAAQ,GACPxG,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,OACE0C,UAAU,6BACVoB,IAAI,eACJC,IAAI,GACJmD,MAAO,eAIXlH,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,OACE0C,UAAU,6BACVoB,IAAI,sBACJC,IAAI,GACJmD,MAAO,0BAWzBlH,EAAAA,EAAAA,KAACqE,EAAAA,MAAMoC,KAAI,CAAC/D,UAAU,kBAAiBxC,UACrCF,EAAAA,EAAAA,KAAA,OACE0C,UAAU,6BACVoB,IAAI,gBACJC,IAAI,GACJmD,MAAO,UAKZhD,EAAE3D,aAAe,EACd,IACK4G,MAAMC,KACPD,MACEjD,EAAE3D,cAEA,IADC2D,EAAEjC,oBAAoBK,OAEnB,EACA4B,EAAEjC,oBAAoBK,SAC5B+E,SAEJpD,KAAI,CAACqD,EAAKC,KACVvH,EAAAA,EAAAA,KAACqE,EAAAA,MAAMoC,KAAI,CAAC/D,UAAU,sBAExB,IACJ1C,EAAAA,EAAAA,KAACqE,EAAAA,MAAMoC,KAAI,oBAS3BtG,EAAE,4BAMlB,EAGF,MAOA,GAAeqH,EAAAA,EAAAA,KAPUvJ,IAChB,CACLwJ,YAAaxJ,EAAMyJ,eAAeD,YAClCnI,aAAcrB,EAAMyJ,eAAeC,aAIvC,CAAwC9J,E,oLCvaxC,MAAM+J,UAAiC9J,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KAC/C6J,aAAe,KAAK,KACpB5J,MAAQ,CACN2D,QAAS,GACTkG,iBAAiB,EACjBC,eAAe,EACfC,gBAAiB,GACjBpC,cAAc,EACdqC,YAAa,IACbvB,4BAA6B,CAAC,GAC9B,KAkBFwB,kBAAoB,KAClB3J,KAAKsJ,aAAeM,aAAY,KAC9B5J,KAAKC,SAAS,CAAEsJ,iBAAiB,IAAS,KACxCvJ,KAAK6J,SAAS,GACd,GACD7J,KAAKN,MAAMgK,YAAY,EAC1B,KAEFI,iBAAmB,KACS,OAAtB9J,KAAKsJ,cACPS,cAAc/J,KAAKsJ,aACrB,EACA,KAyIFU,cAAgB,KACdhK,KAAKC,SAAS,CAAEsJ,iBAAiB,IAAS,KACxCvJ,KAAK6J,SAAS,GACd,CACF,CA1KFnJ,iBAAAA,GACE,IACEV,KAAK6J,UACL7J,KAAKiK,uBACLjK,KAAKW,eACP,CAAE,MAAOJ,GACPC,QAAQC,IACN,8DACAF,EAEJ,CACF,CAEA2J,oBAAAA,GACElK,KAAK8J,kBACP,CAeAD,OAAAA,GACE,IACEjJ,IACEC,EAAAA,IACAC,EAAAA,GACEd,KAAKK,MAAMU,aAAaC,YAGzBC,MAAMC,IACL,IAAIiJ,GACF,IAAIzH,MAAOE,qBACX,KACA,IAAIF,MAAO0H,qBACb,IAAIjJ,EAASD,EAASd,KAEtB,GADAJ,KAAK8J,oBACoB,IAArB3I,EAAOC,UAAoB,CAC7B,IAAIiJ,EAAgB,GAChBzB,MAAM0B,QAAQnJ,EAAOI,aAAagJ,QAAQzE,QAC5C3E,EAAOI,aAAagJ,QAAQzE,MAAM0E,SAASC,IACzCA,EAAI/G,oBAAsB,GAC1B,IAAIgH,EAAgB,GAChB9B,MAAM0B,QAAQnJ,EAAOI,aAAaoJ,yBACpCD,EACEvJ,EAAOI,aAAaoJ,sBAAsBrH,QACvCsH,GAAYA,EAAQ9I,UAAY2I,EAAI3I,WAGvC4I,EAAc3G,OAAS,GACzB2G,EAAc,GAAGG,gBAAgBC,MAAK,CAACnF,EAAGqC,IACxCrC,EAAEoF,YAAc/C,EAAE+C,YAAc,GAAK,IACrCP,SAASQ,IACT,GAAIpC,MAAM0B,QAAQnJ,EAAOI,aAAagJ,QAAQU,QAAS,CACrD,IAAIC,EACF/J,EAAOI,aAAagJ,QAAQU,OAAO3H,QAChC6H,GACiC,OAA/BH,EAAc5I,cACb4I,EAAc5I,eACZ+I,EAAS/I,cACkB,OAA9B4I,EAAcI,aACbJ,EAAcI,cAAgBD,EAAS9I,OAE/CoI,EAAI/G,oBAAoB2H,KAAKH,EAAoB,GACnD,KAGJb,EAAcgB,KAAKZ,EAAI,IAG3BzK,KAAKC,SAAS,CACZoD,QAASgH,EACTd,iBAAiB,EACjBC,eAAe,EACfC,gBAAiBU,GAErB,MACEnK,KAAKC,SAAS,CACZoD,QAAS,GACTkG,iBAAiB,EACjBC,eAAe,EACfC,gBAAiBU,IAEnB3J,QAAQC,IAAI,oBAAqBU,EAAOmK,WAE1CtL,KAAK2J,mBAAmB,IAEzB4B,OAAOhL,IACNP,KAAKC,SAAS,CACZoD,QAAS,GACTkG,iBAAiB,EACjBC,eAAe,IAEjBhJ,QAAQC,IAAI,uBAAwBF,EAAM,GAEhD,CAAE,MAAOA,GACPC,QAAQC,IAAI,oDAAqDF,EACnE,CACF,CAEA0J,oBAAAA,GACE,IACErJ,IACEC,EAAAA,IACAC,EAAAA,GACEd,KAAKK,MAAMU,aAAaC,YAGzBC,MAAMC,IACL,IAAIC,EAASD,EAASd,KAClBoL,GAAW,GACU,IAArBrK,EAAOC,WACiC,UAAtCD,EAAOI,aAAaiC,gBAA2BgI,GAAW,GAEhExL,KAAKC,SAAS,CAAEoH,aAAcmE,GAAW,IAE1CD,OAAOhL,IACNC,QAAQC,IAAI,oCAAqCF,EAAM,GAE7D,CAAE,MAAOA,GACPC,QAAQC,IACN,iEACAF,EAEJ,CACF,CAEAI,aAAAA,GACE,IACEC,IACEC,EAAAA,IAAyB,gCACzBC,EAAAA,GACEd,KAAKK,MAAMU,aAAaC,YAE1BC,MAAMC,IACN,IAAIC,EAASD,EAASd,MACG,IAArBe,EAAOC,YAENC,MACCC,SAASH,EAAOI,aAA6C,kCAG/DvB,KAAKC,SAAS,CACZyJ,YAAapI,SACXH,EAAOI,aAA6C,kCAI5D,GAEJ,CAAE,MAAOhB,GACPC,QAAQC,IACN,0DACAF,EAEJ,CACF,CAQA4C,MAAAA,GACE,OAAQnD,KAAKN,MAAM8J,eAkCjB/H,EAAAA,EAAAA,KAACgK,EAAAA,EAAW,CAACC,QAAQ,aAjCrBjK,EAAAA,EAAAA,KAACC,EAAAA,oBAAmB,CAAAC,SAChBC,IACAC,EAAAA,EAAAA,MAAA,OAAAF,SAAA,CACI3B,KAAKN,MAAM6J,gBAQX,IAPA9H,EAAAA,EAAAA,KAAA,OAAK0C,UAAS,8BAAgCxC,UAC5CF,EAAAA,EAAAA,KAACkK,EAAAA,OAAM,CACLC,KAAK,IACLzH,UAAS,oCAMf1C,EAAAA,EAAAA,KAAA,OAAK0C,UAAU,2BAA0BxC,UACvCF,EAAAA,EAAAA,KAACoK,EAAAA,GAAe,CAAAlK,UACdF,EAAAA,EAAAA,KAACnC,EAAAA,EAAiB,CAChB+D,QAASrD,KAAKN,MAAM2D,QACpB/C,YAAaN,KAAK8L,gBAClBzE,aAAcrH,KAAKN,MAAM2H,aACzBhC,UAAWrF,KAAKgK,cAChB/E,YAAajF,KAAKN,MAAM+J,gBACxBrB,YAAapI,KAAK+L,gBAClB5D,4BACEnI,KAAKN,MAAMyI,4BAEb9B,iBAAiB,YAUjC,EAEF,MAOA,GAAe4C,EAAAA,EAAAA,KAPUvJ,IAChB,CACLwJ,YAAaxJ,EAAMyJ,eAAeD,YAClCnI,aAAcrB,EAAMyJ,eAAeC,aAIvC,CAAwCC,E","sources":["Components/Composite/Common/BayQueueComposite.jsx","Components/Composite/Details/BayQueueDetailsComposite.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport {\r\n  Icon,\r\n  Table,\r\n  Checkbox,\r\n  Input,\r\n  Modal,\r\n  Tooltip,\r\n  InputLabel,\r\n  Pagination,\r\n} from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport lodash from \"lodash\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\n\r\nclass BayQueueComposite extends Component {\r\n  state = {\r\n    searchBayResult: \"\",\r\n    pageIndex: 1,\r\n    pageSize: 1,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getLookUpData();\r\n  }\r\n\r\n  getLookUpData() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=BayAllocation\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (!isNaN(parseInt(result.EntityResult[\"PageSize\"]))) {\r\n            this.setState({\r\n              pageSize: parseInt(result.EntityResult[\"PageSize\"]),\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"BayAllocationDetailsComposite:Error occured on getLookUpData\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  onBaySearchChange = (value) => {\r\n    this.setState({ searchBayResult: value });\r\n  };\r\n\r\n  onCheckboxChange = (bayCode, data) => {\r\n    try {\r\n      this.props.onBaySelect(bayCode, data);\r\n    } catch (error) {\r\n      console.log(\"BayQueueComposite:Error occured on onCheckboxChange\", error);\r\n    }\r\n  };\r\n\r\n  getBayTooltip(data) {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            {t(\"BayGroupList_BayCode\")} : {data.BayCode} {<br></br>}\r\n            {t(\"BayGroupList_LoadingType\")} : {data.LoadingType}\r\n            {<br></br>}\r\n            {t(\"BayTooltip_QueueSize\")} : {data.MaximumQueue}\r\n            {<br></br>}\r\n            {t(\"BaySearch_BayMode\")} : {data.IsManual ? \"Manual Bay\" : \"Auto\"}\r\n            {<br></br>}\r\n            {t(\"TankGroupInfo_Active\")} : {data.Active ? \"true\" : \"false\"}\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n\r\n  getBayShipmentTooltip(data) {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            {data.ShipmentCode === null\r\n              ? t(\"Receipt_Code\")\r\n              : t(\"ViewShipmentStatus_ShipmentCode\")}{\" \"}\r\n            : {data.Code} {<br></br>}\r\n            {t(\"Receipt_Shareholder\")} : {data.ShareholderCode}\r\n            {<br></br>}\r\n            {t(\"ViewReceipt_CarrierCompany\")} : {data.CarrierCode}\r\n            {<br></br>}\r\n            {t(\"ViewReceipt_Vehicle\")} : {data.VehicleCode}\r\n            {<br></br>}\r\n            {t(\"DriverInfo_Driver\")} : {data.DriverCode}\r\n            {<br></br>}\r\n            {t(\"ScheduledDate\")} :{\" \"}\r\n            {new Date(data.ScheduledDate).toLocaleDateString()}\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n\r\n  getBayTypeTooltip(data) {\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            {t(\"BayType_Title\")} :{\" \"}\r\n            {data.BayType === \"BOTH\" ? t(\"BayType_Both\") : data.BayType}\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n  getTransactionIdentifier(code, shareholder) {\r\n    // let transaction = { code: code, shareholder: shareholder };\r\n    // return JSON.stringify(transaction);\r\n    return code + Constants.delimiter + shareholder;\r\n  }\r\n\r\n  render() {\r\n    let { searchBayResult } = this.state;\r\n    let bayData = this.props.bayData;\r\n    let searchBayResults = bayData.filter((values) => {\r\n      return (\r\n        values.BayCode.toLowerCase().includes(searchBayResult.toLowerCase()) ||\r\n        values.ShipmentReceiptItem.some(function (subElement) {\r\n          return subElement.Code.toLowerCase().includes(\r\n            searchBayResult.toLowerCase()\r\n          );\r\n        })\r\n      );\r\n    });\r\n    let paginationBays = [];\r\n    let pageIndex = lodash.cloneDeep(this.state.pageIndex);\r\n    if (this.state.pageSize >= searchBayResults.length) {\r\n      pageIndex = 1;\r\n    }\r\n    let firstIndexInPage = (pageIndex - 1) * this.state.pageSize;\r\n    let lastIndexInPage = firstIndexInPage + this.state.pageSize;\r\n    if (lastIndexInPage >= searchBayResults.length) {\r\n      lastIndexInPage = searchBayResults.length;\r\n    }\r\n    paginationBays = searchBayResults.slice(firstIndexInPage, lastIndexInPage);\r\n    return (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div className=\"detailsContainer\">\r\n            <div className=\"row\">\r\n              <div className=\"col-4\">\r\n                <Input\r\n                  className=\"input-example\"\r\n                  placeholder={t(\"BayAllocation_SearchBay\")}\r\n                  search={true}\r\n                  onChange={(data) => this.onBaySearchChange(data)}\r\n                />\r\n              </div>\r\n              <div className=\"col-4\">\r\n                {searchBayResults.length > this.state.pageSize ? (\r\n                  <Pagination\r\n                    totalItems={searchBayResults.length}\r\n                    itemsPerPage={this.state.pageSize}\r\n                    activePage={this.state.pageIndex}\r\n                    onPageChange={(page) => {\r\n                      this.setState({ pageIndex: page });\r\n                    }}\r\n                  ></Pagination>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"col-4\" style={{ marginTop: \"1rem\" }}>\r\n                <div style={{ float: \"right\" }}>\r\n                  {t(\"Common_LastUpdated\") + \" : \" + this.props.updatedTime}\r\n                  <span\r\n                    style={{ marginLeft: \"1rem\", cursor: \"pointer\" }}\r\n                    onClick={() => this.props.onRefresh()}\r\n                  >\r\n                    <img\r\n                      style={{ width: \"6%\" }}\r\n                      src=\"/Refresh.png\"\r\n                      alt=\"\"\r\n                    ></img>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <ErrorBoundary>\r\n              {paginationBays.length > 0\r\n                ? paginationBays.map((a, key) => (\r\n                    <div style={{ overflowX: \"auto\" }}>\r\n                      <Table>\r\n                        <Table.Header>\r\n                          <Table.HeaderCell\r\n                            colSpan={a.MaximumQueue + 2}\r\n                            content={a.BayCode}\r\n                          >\r\n                            <div\r\n                              className=\"row\"\r\n                              style={{ marginBottom: \"-1rem\" }}\r\n                            >\r\n                              <div style={{ display: \"flex\" }}>\r\n                                <div>\r\n                                  {a.MaximumQueue > 0 &&\r\n                                  a.Active === true &&\r\n                                  this.props.isBayAllocation === true ? (\r\n                                    <Checkbox\r\n                                      label={a.BayCode}\r\n                                      checked={\r\n                                        a.SelectedBay === true ? true : false\r\n                                      }\r\n                                      onChange={(data) =>\r\n                                        this.onCheckboxChange(a.BayCode, data)\r\n                                      }\r\n                                    ></Checkbox>\r\n                                  ) : (\r\n                                    <div style={{ whiteSpace: \"pre\" }}>\r\n                                      <InputLabel\r\n                                        label={a.BayCode + \"   \"}\r\n                                      ></InputLabel>\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n                                <div>\r\n                                  <ErrorBoundary>\r\n                                    <Tooltip\r\n                                      element={\r\n                                        <Icon\r\n                                          style={{ paddingBottom: \"5px\" }}\r\n                                          name=\"badge-info\"\r\n                                          root=\"common\"\r\n                                        />\r\n                                      }\r\n                                      content={this.getBayTooltip(a)}\r\n                                      size=\"mini\"\r\n                                      position=\"right center\"\r\n                                    ></Tooltip>\r\n                                  </ErrorBoundary>\r\n                                </div>\r\n                                <ErrorBoundary>\r\n                                  <Tooltip\r\n                                    element={\r\n                                      <span className=\"bayTypeIconPosition\">\r\n                                        <icon\r\n                                          style={{ fontSize: \"25px\" }}\r\n                                          className={\r\n                                            a.BayType === \"BOTH\"\r\n                                              ? \"icon-Loading-Unloading\"\r\n                                              : a.BayType === \"LOADING\"\r\n                                              ? \"icon-Loading\"\r\n                                              : \"icon-Unloading\"\r\n                                          }\r\n                                        ></icon>\r\n                                      </span>\r\n                                    }\r\n                                    content={this.getBayTypeTooltip(a)}\r\n                                    size=\"mini\"\r\n                                    position=\"right center\"\r\n                                  ></Tooltip>\r\n                                </ErrorBoundary>\r\n                                {this.props.isManualMode === false ? (\r\n                                  <div\r\n                                    style={{\r\n                                      position: \"absolute\",\r\n                                      right: \"18px\",\r\n                                    }}\r\n                                  >\r\n                                    <span style={{ marginTop: \"-0.3rem\" }}>\r\n                                      <Icon name=\"locked\" root=\"Building\" />\r\n                                    </span>\r\n                                  </div>\r\n                                ) : (\r\n                                  \"\"\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </Table.HeaderCell>\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                          <Table.Row>\r\n                            <Droppable droppableId={a.BayCode} type=\"Type1\">\r\n                              {(provided) => (\r\n                                <div\r\n                                  ref={provided.innerRef}\r\n                                  {...provided.droppableProps}\r\n                                >\r\n                                  {a.ShipmentReceiptItem.length > 0 ? (\r\n                                    a.ShipmentReceiptItem.map((b, index) => (\r\n                                      <Table.Cell\r\n                                        className={\r\n                                          this.props.selectedShipmentReceiptItem\r\n                                            .Code === b.Code\r\n                                            ? \"bayAllocationtd tdSelected\"\r\n                                            : \"bayAllocationtd\"\r\n                                        }\r\n                                        onClick={() =>\r\n                                          this.props.isBayAllocation\r\n                                            ? this.props.onCellClick(\r\n                                                index,\r\n                                                a.BayCode\r\n                                              )\r\n                                            : \"\"\r\n                                        }\r\n                                      >\r\n                                        <ErrorBoundary>\r\n                                          <Draggable\r\n                                            draggableId={this.getTransactionIdentifier(\r\n                                              b.Code,\r\n                                              b.ShareholderCode\r\n                                            )}\r\n                                            // draggableId={b.code}\r\n                                            isDragDisabled={\r\n                                              this.props.isBayAllocation ===\r\n                                              false\r\n                                            }\r\n                                          >\r\n                                            {(provided, snapshot) => (\r\n                                              <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                              >\r\n                                                <div className=\"bayAllocationFontSize\">\r\n                                                  {b.Code}\r\n                                                  <ErrorBoundary>\r\n                                                    <Tooltip\r\n                                                      element={\r\n                                                        <span className=\"bayAllocationInfoIcon\">\r\n                                                          <Icon\r\n                                                            name=\"badge-info\"\r\n                                                            root=\"common\"\r\n                                                          />\r\n                                                        </span>\r\n                                                      }\r\n                                                      content={this.getBayShipmentTooltip(\r\n                                                        b\r\n                                                      )}\r\n                                                      size=\"mini\"\r\n                                                      position=\"right center\"\r\n                                                    ></Tooltip>\r\n                                                  </ErrorBoundary>\r\n                                                </div>\r\n                                                <div className=\"bayAllocationFontSize\">\r\n                                                  {b.VehicleCode}\r\n                                                </div>\r\n                                                {index > 0 ? (\r\n                                                  <div>\r\n                                                    <img\r\n                                                      className=\"bayAllocationImagePosition\"\r\n                                                      src=\"/Vehicle.png\"\r\n                                                      alt=\"\"\r\n                                                      title={\"Vehicle\"}\r\n                                                    ></img>\r\n                                                  </div>\r\n                                                ) : (\r\n                                                  <div>\r\n                                                    <img\r\n                                                      className=\"bayAllocationImagePosition\"\r\n                                                      src=\"/VehiclewithBay.png\"\r\n                                                      alt=\"\"\r\n                                                      title={\"Vehicle\"}\r\n                                                    ></img>\r\n                                                  </div>\r\n                                                )}\r\n                                              </div>\r\n                                            )}\r\n                                          </Draggable>\r\n                                        </ErrorBoundary>\r\n                                      </Table.Cell>\r\n                                    ))\r\n                                  ) : (\r\n                                    <Table.Cell className=\"bayAllocationtd\">\r\n                                      <img\r\n                                        className=\"bayAllocationImagePosition\"\r\n                                        src=\"/BayEmpty.png\"\r\n                                        alt=\"\"\r\n                                        title={\"Bay\"}\r\n                                      ></img>\r\n                                    </Table.Cell>\r\n                                  )}\r\n\r\n                                  {a.MaximumQueue > 0\r\n                                    ? [\r\n                                        ...Array.from(\r\n                                          Array(\r\n                                            a.MaximumQueue -\r\n                                              (a.ShipmentReceiptItem.length ===\r\n                                              0\r\n                                                ? 1\r\n                                                : a.ShipmentReceiptItem.length)\r\n                                          ).keys()\r\n                                        ),\r\n                                      ].map((num, i) => (\r\n                                        <Table.Cell className=\"bayAllocationtd\"></Table.Cell>\r\n                                      ))\r\n                                    : \"\"}\r\n                                  <Table.Cell></Table.Cell>\r\n                                </div>\r\n                              )}\r\n                            </Droppable>\r\n                          </Table.Row>\r\n                        </Table.Body>\r\n                      </Table>\r\n                    </div>\r\n                  ))\r\n                : t(\"BaySearch_NoResult\")}\r\n            </ErrorBoundary>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BayQueueComposite);\r\n\r\nBayQueueComposite.propTypes = {\r\n  onCellClick: PropTypes.func.isRequired,\r\n  onBaySelect: PropTypes.func.isRequired,\r\n  isManualMode: PropTypes.bool.isRequired,\r\n  onRefresh: PropTypes.func.isRequired,\r\n  isBayAllocation: PropTypes.bool.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Loader } from \"@scuf/common\";\r\nimport axios from \"axios\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport BayQueueComposite from \"../Common/BayQueueComposite\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\n\r\nclass BayQueueDetailsComposite extends Component {\r\n  refreshTimer = null;\r\n  state = {\r\n    bayData: [],\r\n    isReadyToRender: false,\r\n    isInitialLoad: true,\r\n    lastUpdatedTime: \"\",\r\n    isManualMode: true,\r\n    refreshTime: 10000,\r\n    selectedShipmentReceiptItem: {},\r\n  };\r\n  componentDidMount() {\r\n    try {\r\n      this.getBays();\r\n      this.getBayAllocationType();\r\n      this.getLookUpData();\r\n    } catch (error) {\r\n      console.log(\r\n        \"BayQueueDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stopRefreshTimer();\r\n  }\r\n\r\n  startRefreshTimer = () => {\r\n    this.refreshTimer = setInterval(() => {\r\n      this.setState({ isReadyToRender: false }, () => {\r\n        this.getBays();\r\n      });\r\n    }, this.state.refreshTime);\r\n  };\r\n\r\n  stopRefreshTimer = () => {\r\n    if (this.refreshTimer !== null) {\r\n      clearInterval(this.refreshTimer);\r\n    }\r\n  };\r\n  getBays() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetBays,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          let updatedtime =\r\n            new Date().toLocaleDateString() +\r\n            \" \" +\r\n            new Date().toLocaleTimeString();\r\n          var result = response.data;\r\n          this.stopRefreshTimer();\r\n          if (result.IsSuccess === true) {\r\n            let bayAllocation = [];\r\n            if (Array.isArray(result.EntityResult.BayData.Table)) {\r\n              result.EntityResult.BayData.Table.forEach((bay) => {\r\n                bay.ShipmentReceiptItem = [];\r\n                let allocatedList = [];\r\n                if (Array.isArray(result.EntityResult.lstBayAllocationQueue)) {\r\n                  allocatedList =\r\n                    result.EntityResult.lstBayAllocationQueue.filter(\r\n                      (bayItem) => bayItem.BayCode === bay.BayCode\r\n                    );\r\n                }\r\n                if (allocatedList.length > 0) {\r\n                  allocatedList[0].AllocationItems.sort((a, b) =>\r\n                    a.QueueNumber > b.QueueNumber ? 1 : -1\r\n                  ).forEach((allocatedItem) => {\r\n                    if (Array.isArray(result.EntityResult.BayData.Table2)) {\r\n                      let shipmentReceiptItem =\r\n                        result.EntityResult.BayData.Table2.filter(\r\n                          (shipment) =>\r\n                            (allocatedItem.ShipmentCode !== null &&\r\n                              allocatedItem.ShipmentCode ===\r\n                                shipment.ShipmentCode) ||\r\n                            (allocatedItem.ReceiptCode !== null &&\r\n                              allocatedItem.ReceiptCode === shipment.Code)\r\n                        );\r\n                      bay.ShipmentReceiptItem.push(shipmentReceiptItem[0]);\r\n                    }\r\n                  });\r\n                }\r\n                bayAllocation.push(bay);\r\n              });\r\n            }\r\n            this.setState({\r\n              bayData: bayAllocation,\r\n              isReadyToRender: true,\r\n              isInitialLoad: false,\r\n              lastUpdatedTime: updatedtime,\r\n            });\r\n          } else {\r\n            this.setState({\r\n              bayData: [],\r\n              isReadyToRender: true,\r\n              isInitialLoad: false,\r\n              lastUpdatedTime: updatedtime,\r\n            });\r\n            console.log(\"Error in getBays:\", result.ErrorList);\r\n          }\r\n          this.startRefreshTimer();\r\n        })\r\n        .catch((error) => {\r\n          this.setState({\r\n            bayData: [],\r\n            isReadyToRender: true,\r\n            isInitialLoad: false,\r\n          });\r\n          console.log(\"Error while getBays:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"BayQueueDetailsComposite:Error occured on getBays\", error);\r\n    }\r\n  }\r\n\r\n  getBayAllocationType() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetBayAllocationType,\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      )\r\n        .then((response) => {\r\n          var result = response.data;\r\n          var isManual = true;\r\n          if (result.IsSuccess === true) {\r\n            if (result.EntityResult.toLowerCase() === \"false\") isManual = false;\r\n          }\r\n          this.setState({ isManualMode: isManual });\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error while getBayAllocationType:\", error);\r\n        });\r\n    } catch (error) {\r\n      console.log(\r\n        \"BayQueueDetailsComposite:Error occured on getBayAllocationType\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  getLookUpData() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetLookUpData + \"?LookUpTypeCode=BayAllocation\",\r\n        Utilities.getAuthenticationObjectforGet(\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            !isNaN(\r\n              parseInt(result.EntityResult[\"BayQueueMonitorRefreshInterval\"])\r\n            )\r\n          ) {\r\n            this.setState({\r\n              refreshTime: parseInt(\r\n                result.EntityResult[\"BayQueueMonitorRefreshInterval\"]\r\n              ),\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"BayQueueDetailsComposite:Error occured on getLookUpData\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleRefresh = () => {\r\n    this.setState({ isReadyToRender: false }, () => {\r\n      this.getBays();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return !this.state.isInitialLoad ? (\r\n      <TranslationConsumer>\r\n        {(t) => (\r\n          <div>\r\n            {!this.state.isReadyToRender ? (\r\n              <div className={`authLoading parameterLoader`}>\r\n                <Loader\r\n                  text=\" \"\r\n                  className={`globalLoaderPositionPosition`}\r\n                ></Loader>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <div className=\"bayQueueMonitorContainer\">\r\n              <DragDropContext>\r\n                <BayQueueComposite\r\n                  bayData={this.state.bayData}\r\n                  onBaySelect={this.handleBaySelect}\r\n                  isManualMode={this.state.isManualMode}\r\n                  onRefresh={this.handleRefresh}\r\n                  updatedTime={this.state.lastUpdatedTime}\r\n                  onCellClick={this.handleCellClick}\r\n                  selectedShipmentReceiptItem={\r\n                    this.state.selectedShipmentReceiptItem\r\n                  }\r\n                  isBayAllocation={false}\r\n                ></BayQueueComposite>\r\n              </DragDropContext>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </TranslationConsumer>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BayQueueDetailsComposite);\r\n"],"names":["BayQueueComposite","Component","constructor","arguments","state","searchBayResult","pageIndex","pageSize","onBaySearchChange","value","this","setState","onCheckboxChange","bayCode","data","props","onBaySelect","error","console","log","componentDidMount","getLookUpData","axios","RestAPIs","Utilities","tokenDetails","tokenInfo","then","response","result","IsSuccess","isNaN","parseInt","EntityResult","getBayTooltip","_jsx","TranslationConsumer","children","t","_jsxs","BayCode","LoadingType","MaximumQueue","IsManual","Active","getBayShipmentTooltip","ShipmentCode","Code","ShareholderCode","CarrierCode","VehicleCode","DriverCode","Date","ScheduledDate","toLocaleDateString","getBayTypeTooltip","BayType","getTransactionIdentifier","code","shareholder","Constants","render","searchBayResults","bayData","filter","values","toLowerCase","includes","ShipmentReceiptItem","some","subElement","paginationBays","lodash","length","firstIndexInPage","lastIndexInPage","slice","className","Input","placeholder","search","onChange","Pagination","totalItems","itemsPerPage","activePage","onPageChange","page","style","marginTop","float","updatedTime","marginLeft","cursor","onClick","onRefresh","width","src","alt","ErrorBoundary","map","a","key","overflowX","Table","Header","HeaderCell","colSpan","content","marginBottom","display","isBayAllocation","Checkbox","label","checked","SelectedBay","whiteSpace","InputLabel","Tooltip","element","Icon","paddingBottom","name","root","size","position","fontSize","isManualMode","right","Body","Row","Droppable","droppableId","type","provided","ref","innerRef","droppableProps","b","index","Cell","selectedShipmentReceiptItem","onCellClick","Draggable","draggableId","isDragDisabled","snapshot","draggableProps","dragHandleProps","title","Array","from","keys","num","i","connect","userDetails","getUserDetails","TokenAuth","BayQueueDetailsComposite","refreshTimer","isReadyToRender","isInitialLoad","lastUpdatedTime","refreshTime","startRefreshTimer","setInterval","getBays","stopRefreshTimer","clearInterval","handleRefresh","getBayAllocationType","componentWillUnmount","updatedtime","toLocaleTimeString","bayAllocation","isArray","BayData","forEach","bay","allocatedList","lstBayAllocationQueue","bayItem","AllocationItems","sort","QueueNumber","allocatedItem","Table2","shipmentReceiptItem","shipment","ReceiptCode","push","ErrorList","catch","isManual","LoadingPage","message","Loader","text","DragDropContext","handleBaySelect","handleCellClick"],"sourceRoot":""}