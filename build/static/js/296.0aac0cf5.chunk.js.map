{"version":3,"file":"static/js/296.0aac0cf5.chunk.js","mappings":"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","sources":["Components/UIBase/Details/UnAccountedTransactionMeterDetails.jsx","Components/Composite/Details/UnAccountedTransactionMeterDetailsComposite.jsx","Components/UIBase/Common/TMDetailsHeader.jsx","Components/UIBase/Common/TMDetailsUserActions.jsx","Components/UIBase/Details/AttributeDetails.jsx","JS/AttributeEntity.js","JS/functionalUtilities.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Input, Select, DatePicker, Accordion } from \"@scuf/common\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport { AttributeDetails } from \"../Details/AttributeDetails\";\r\nUnAccountedTransactionMeterDetails.propTypes = {\r\n  listOptions: PropTypes.shape({\r\n    densityUOMOptions: PropTypes.array,\r\n    quantityUOMOptions: PropTypes.array,\r\n    meterCodeOptions: PropTypes.array,\r\n    tankCodeOption: PropTypes.array,\r\n    transactionTypeOptions: PropTypes.array,\r\n    baseProdcutOptions: PropTypes.array,\r\n    transportationTypeOptions: PropTypes.array,\r\n  }).isRequired,\r\n  validationErrors: PropTypes.object.isRequired,\r\n  modAccountedMeterTransaction: PropTypes.object.isRequired,\r\n  onFieldChange: PropTypes.func.isRequired,\r\n  isEnterpriseNode: PropTypes.bool.isRequired,\r\n  selectedAttributeList: PropTypes.array.isRequired,\r\n  attributeValidationErrors: PropTypes.array.isRequired,\r\n  handleCellDataEdit: PropTypes.func.isRequired,\r\n};\r\nUnAccountedTransactionMeterDetails.defaultProps = {\r\n  listOptions: {\r\n    quantityUOMOptions: [],\r\n    densityUOMOptions: [],\r\n    meterCodeOptions: [],\r\n    transactionTypeOptions: [],\r\n    baseProdcutOptions: [],\r\n    tankCodeOptions: [],\r\n    transportationTypeOptions: [],\r\n  },\r\n};\r\n\r\nexport function UnAccountedTransactionMeterDetails({\r\n  modAccountedMeterTransaction,\r\n  listOptions,\r\n  validationErrors,\r\n  onFieldChange,\r\n  isEnterpriseNode,\r\n  selectedAttributeList,\r\n  attributeValidationErrors,\r\n  handleCellDataEdit,\r\n}) {\r\n  const handleValidationErrorFilter = (attributeValidationErrors, terminal) => {\r\n    let attributeValidation = [];\r\n    attributeValidation = attributeValidationErrors.find(\r\n      (selectedAttribute) => {\r\n        return selectedAttribute.TerminalCode === terminal;\r\n      }\r\n    );\r\n    return attributeValidation.attributeValidationErrors;\r\n  };\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"detailsContainer\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Reconciliation_Meter\")}\r\n                indicator=\"required\"\r\n                value={modAccountedMeterTransaction.MeterCode}\r\n                options={listOptions.meterCodeOptions}\r\n                onChange={(data) => onFieldChange(\"MeterCode\", data)}\r\n                reserveSpace={false}\r\n                error={t(validationErrors.MeterCode)}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Reconciliation_UnAccountedType\")}\r\n                indicator=\"required\"\r\n                options={listOptions.transactionTypeOptions}\r\n                reserveSpace={false}\r\n                onChange={(data) =>\r\n                  onFieldChange(\"UnAccountedTransactionTypeCode\", data)\r\n                }\r\n                value={\r\n                  modAccountedMeterTransaction.UnAccountedTransactionTypeCode\r\n                }\r\n                error={t(validationErrors.UnAccountedTransactionTypeCode)}\r\n                noResultsMessage={t(\"noResultsMessage\")}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Vehicle_Transport\")}\r\n                indicator=\"required\"\r\n                options={listOptions.transportationTypeOptions}\r\n                onChange={(data) => onFieldChange(\"TransportationType\", data)}\r\n                value={modAccountedMeterTransaction.TransportationType}\r\n                error={t(validationErrors.TransportationType)}\r\n                reserveSpace={false}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Reconciliation_QuantityUOM\")}\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"QuantityUOM\", data)}\r\n                search={true}\r\n                options={listOptions.quantityUOMOptions}\r\n                reserveSpace={false}\r\n                value={modAccountedMeterTransaction.QuantityUOM}\r\n                error={t(validationErrors.QuantityUOM)}\r\n\r\n                //error={t(validationErrors.ShipmentQuantityUOM)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"Reconciliation_Quantity\")}\r\n                onChange={(data) =>\r\n                  onFieldChange(\"UnAccountedGrossQuantity\", data)\r\n                }\r\n                reserveSpace={false}\r\n                value={modAccountedMeterTransaction.UnAccountedGrossQuantity}\r\n                error={t(validationErrors.UnAccountedGrossQuantity)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"Reconciliation_NetQuantity\")}\r\n                onChange={(data) =>\r\n                  onFieldChange(\"UnAccountedNetQuantity\", data)\r\n                }\r\n                reserveSpace={false}\r\n                value={modAccountedMeterTransaction.UnAccountedNetQuantity}\r\n                error={t(validationErrors.UnAccountedNetQuantity)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"Reconciliation_Density\")}\r\n                onChange={(data) => onFieldChange(\"Density\", data)}\r\n                reserveSpace={false}\r\n                value={modAccountedMeterTransaction.Density}\r\n                error={t(validationErrors.Density)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Reconciliation_DensityUOM\")}\r\n                indicator=\"required\"\r\n                options={listOptions.densityUOMOptions}\r\n                reserveSpace={false}\r\n                search={true}\r\n                onChange={(data) => onFieldChange(\"DensityUOM\", data)}\r\n                value={modAccountedMeterTransaction.DensityUOM}\r\n                error={t(validationErrors.DensityUOM)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"Reconciliation_StartGrossTotalizer\")}\r\n                onChange={(data) => onFieldChange(\"GrossStartTotalizer\", data)}\r\n                reserveSpace={false}\r\n                value={modAccountedMeterTransaction.GrossStartTotalizer}\r\n                error={t(validationErrors.GrossStartTotalizer)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"Reconciliation_EndGrossTotalizer\")}\r\n                onChange={(data) => onFieldChange(\"GrossEndTotalizer\", data)}\r\n                reserveSpace={false}\r\n                value={modAccountedMeterTransaction.GrossEndTotalizer}\r\n                error={t(validationErrors.GrossEndTotalizer)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"Reconciliation_StartNetTotalizer\")}\r\n                onChange={(data) => onFieldChange(\"NetStartTotalizer\", data)}\r\n                reserveSpace={false}\r\n                value={modAccountedMeterTransaction.NetStartTotalizer}\r\n                error={t(validationErrors.NetStartTotalizer)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                indicator=\"required\"\r\n                label={t(\"Reconciliation_EndNetTotalizer\")}\r\n                onChange={(data) => onFieldChange(\"NetEndTotalizer\", data)}\r\n                reserveSpace={false}\r\n                value={modAccountedMeterTransaction.NetEndTotalizer}\r\n                error={t(validationErrors.NetEndTotalizer)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <DatePicker\r\n                fluid\r\n                //value={modRailWagon.LicenseExpiryDate === null ? \"\" : new Date(modRailWagon.LicenseExpiryDate)}\r\n                label={t(\"Reconciliation_StartTime\")}\r\n                type=\"datetime\"\r\n                minuteStep=\"5\"\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"TransactionStartTime\", data)}\r\n                displayFormat={getCurrentDateFormat()}\r\n                reserveSpace={false}\r\n                value={\r\n                  modAccountedMeterTransaction.TransactionStartTime === null\r\n                    ? \"\"\r\n                    : modAccountedMeterTransaction.TransactionStartTime\r\n                }\r\n                error={t(validationErrors.TransactionStartTime)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <DatePicker\r\n                fluid\r\n                //value={modRailWagon.LicenseExpiryDate === null ? \"\" : new Date(modRailWagon.LicenseExpiryDate)}\r\n                label={t(\"Reconciliation_EndTime\")}\r\n                type=\"datetime\"\r\n                minuteStep=\"5\"\r\n                indicator=\"required\"\r\n                onChange={(data) => onFieldChange(\"TransactionEndTime\", data)}\r\n                displayFormat={getCurrentDateFormat()}\r\n                //error={t(validationErrors.LicenseExpiryDate)}\r\n                reserveSpace={false}\r\n                value={\r\n                  modAccountedMeterTransaction.TransactionEndTime === null\r\n                    ? \"\"\r\n                    : modAccountedMeterTransaction.TransactionEndTime\r\n                }\r\n                error={t(validationErrors.TransactionEndTime)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Reconciliation_Tank\")}\r\n                indicator=\"required\"\r\n                options={listOptions.tankCodeOptions}\r\n                reserveSpace={false}\r\n                onChange={(data) => onFieldChange(\"TankCode\", data)}\r\n                value={modAccountedMeterTransaction.TankCode}\r\n                error={t(validationErrors.TankCode)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Input\r\n                fluid\r\n                label={t(\"Reconciliation_Comments\")}\r\n                onChange={(data) => onFieldChange(\"Comments\", data)}\r\n                reserveSpace={false}\r\n                value={modAccountedMeterTransaction.Comments}\r\n                error={t(validationErrors.Comments)}\r\n              />\r\n            </div>\r\n            <div className=\"col-12 col-md-6 col-lg-4\">\r\n              <Select\r\n                fluid\r\n                placeholder=\"Select\"\r\n                label={t(\"Reconciliation_BaseProduct\")}\r\n                indicator=\"required\"\r\n                options={listOptions.baseProdcutOptions}\r\n                reserveSpace={false}\r\n                onChange={(data) => onFieldChange(\"BaseProductCode\", data)}\r\n                value={modAccountedMeterTransaction.BaseProductCode}\r\n                error={t(validationErrors.BaseProductCode)}\r\n              />\r\n            </div>\r\n          </div>\r\n          {selectedAttributeList.length > 0\r\n            ? selectedAttributeList.map((attribute) => (\r\n                <ErrorBoundary>\r\n                  <Accordion>\r\n                    <Accordion.Content\r\n                      className=\"attributeAccordian\"\r\n                      title={\r\n                        isEnterpriseNode\r\n                          ? attribute.TerminalCode +\r\n                            \" - \" +\r\n                            t(\"Attributes_Header\")\r\n                          : t(\"Attributes_Header\")\r\n                      }\r\n                    >\r\n                      <AttributeDetails\r\n                        selectedAttributeList={attribute.attributeMetaDataList}\r\n                        handleCellDataEdit={handleCellDataEdit}\r\n                        attributeValidationErrors={handleValidationErrorFilter(\r\n                          attributeValidationErrors,\r\n                          attribute.TerminalCode\r\n                        )}\r\n                      ></AttributeDetails>\r\n                    </Accordion.Content>\r\n                  </Accordion>\r\n                </ErrorBoundary>\r\n              ))\r\n            : null}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { UnAccountedTransactionMeterDetails } from \"../../UIBase/Details/UnAccountedTransactionMeterDetails\";\r\nimport { TMDetailsUserActions } from \"../../UIBase/Common/TMDetailsUserActions\";\r\nimport * as Utilities from \"../../../JS/Utilities\";\r\nimport axios from \"axios\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport * as RestAPIs from \"../../../JS/RestApis\";\r\nimport * as getUserDetails from \"../../../Redux/Actions/GetUserDetails\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\r\nimport ErrorBoundary from \"../../ErrorBoundary\";\r\nimport TMDetailsHeader from \"../../UIBase/Common/TMDetailsHeader\";\r\nimport PropTypes from \"prop-types\";\r\nimport { UnAccountedTransactionMeterValidationDef } from \"../../../JS/ValidationDef\";\r\nimport {\r\n  functionGroups,\r\n  fnUnAccountedTransactionMeter,\r\n} from \"../../../JS/FunctionGroups\";\r\nimport lodash from \"lodash\";\r\nimport { emptyAccountedMeterTransaction } from \"../../../JS/DefaultEntities\";\r\nimport { LoadingPage } from \"../../UIBase/Common/LoadingPage\";\r\nimport { unAccountedMeterTransaction } from \"../../../JS/AttributeEntity\";\r\nimport UserAuthenticationLayout from \"../Common/UserAuthentication\";\r\nclass UnAccountedTransactionMeterDetailsComposite extends Component {\r\n  state = {\r\n    AccountedMeterTransaction: lodash.cloneDeep(emptyAccountedMeterTransaction), //{ ...emptyCustomer },\r\n    modAccountedMeterTransaction: lodash.cloneDeep(\r\n      emptyAccountedMeterTransaction\r\n    ),\r\n    emptyAccountedMeterTransaction: lodash.cloneDeep(\r\n      emptyAccountedMeterTransaction\r\n    ), //{ ...emptyCustomer },\r\n\r\n    //isDetails:false,\r\n    isReadyToRender: true,\r\n    saveEnabled: false,\r\n    meterCodeOptions: [],\r\n    meterCodeSearchOptions: [],\r\n    transactionTypeOptions: [],\r\n    baseProdcutOptions: [],\r\n    quantityUOMOptions: [],\r\n    densityUOMOptions: [],\r\n    tankCodeOptions: [],\r\n    transportationTypeOptions: [],\r\n    attributeMetaDataList: [],\r\n    selectedAttributeList: [],\r\n    attributeValidationErrors: [],\r\n    validationErrors: Utilities.getInitialValidationErrors(\r\n      UnAccountedTransactionMeterValidationDef\r\n    ),\r\n    showAuthenticationLayout: false,\r\n    tempAccountedMeterTransaction: {},\r\n  };\r\n\r\n  handleReset = () => {\r\n    try {\r\n      const validationErrors = { ...this.state.validationErrors };\r\n      const AccountedMeterTransaction = lodash.cloneDeep(\r\n        this.state.AccountedMeterTransaction\r\n      );\r\n      Object.keys(validationErrors).forEach(function (key) {\r\n        validationErrors[key] = \"\";\r\n      });\r\n      this.setState(\r\n        {\r\n          modAccountedMeterTransaction: { ...AccountedMeterTransaction },\r\n          validationErrors,\r\n          selectedAttributeList: [],\r\n        },\r\n        () => {\r\n          if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n            this.terminalSelectionChange([]);\r\n            this.handleResetAttributeValidationError();\r\n          } else {\r\n            this.localNodeAttribute();\r\n            this.handleResetAttributeValidationError();\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionMeterDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  componentWillReceiveProps = (nextProps) => {\r\n    try {\r\n      if (\r\n        this.state.AccountedMeterTransaction.MeterCode !== \"\" &&\r\n        nextProps.selectedRow.Common_Code === undefined &&\r\n        this.props.tokenDetails.tokenInfo === nextProps.tokenDetails.tokenInfo\r\n      ) {\r\n        this.setState(\r\n          {\r\n            modAccountedMeterTransaction: emptyAccountedMeterTransaction,\r\n            AccountedMeterTransaction: emptyAccountedMeterTransaction,\r\n            saveEnabled: true,\r\n            selectedAttributeList: [],\r\n          },\r\n          () => {\r\n            if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n              this.terminalSelectionChange([]);\r\n              this.handleResetAttributeValidationError();\r\n            } else {\r\n              this.localNodeAttribute();\r\n              this.handleResetAttributeValidationError();\r\n            }\r\n          }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionMeterDetailsComposite:Error occured on componentWillReceiveProps\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    try {\r\n      this.props.onRef(this);\r\n      Utilities.setArchive(this.props.userDetails.EntityResult.IsArchived);\r\n      this.getAttributes();\r\n      this.GetUOMList();\r\n      this.GetMeterCode();\r\n      this.GetBaseProductsList();\r\n      this.GetUnAccountedTransactionTypeList();\r\n      this.GetTransportationTypeOptions();\r\n      this.GetTankList();\r\n      let modAccountedMeterTransaction = lodash.cloneDeep(\r\n        this.state.emptyAccountedMeterTransaction\r\n      );\r\n      modAccountedMeterTransaction.ShareholderCode =\r\n        this.props.selectedShareholder;\r\n      this.setState({\r\n        saveEnabled: Utilities.isInFunction(\r\n          this.props.userDetails.EntityResult.FunctionsList,\r\n          functionGroups.add,\r\n          fnUnAccountedTransactionMeter\r\n        ),\r\n        modAccountedMeterTransaction: modAccountedMeterTransaction,\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionMeterDetailsComposite:Error occured on componentDidMount\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  ReSetData() {\r\n    this.setState({\r\n      modAccountedMeterTransaction: lodash.cloneDeep(\r\n        emptyAccountedMeterTransaction\r\n      ),\r\n      saveEnabled: true,\r\n    });\r\n  }\r\n  GetTransportationTypeOptions() {\r\n    const transportationTypeList = [];\r\n    for (let key in Constants.TransportationType) {\r\n      if (key !== Constants.TransportationType.PIPELINE) {\r\n        transportationTypeList.push(key);\r\n      }\r\n    }\r\n    this.setState({\r\n      transportationTypeOptions: Utilities.transferListtoOptions(\r\n        transportationTypeList\r\n      ),\r\n    });\r\n  }\r\n\r\n  GetUOMList() {\r\n    axios(\r\n      RestAPIs.GetUOMList,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        //console.log(response);\r\n        var result = response.data;\r\n\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            let quantityUOMOptions = [];\r\n            let densityUOMOptions = [];\r\n            if (Array.isArray(result.EntityResult.VOLUME)) {\r\n              quantityUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.VOLUME\r\n              );\r\n            }\r\n            // debugger;\r\n            if (Array.isArray(result.EntityResult.MASS)) {\r\n              let massUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.MASS\r\n              );\r\n              massUOMOptions.forEach((massUOM) =>\r\n                quantityUOMOptions.push(massUOM)\r\n              );\r\n            }\r\n            if (Array.isArray(result.EntityResult.DENSITY)) {\r\n              densityUOMOptions = Utilities.transferListtoOptions(\r\n                result.EntityResult.DENSITY\r\n              );\r\n            }\r\n            this.setState({ quantityUOMOptions, densityUOMOptions });\r\n\r\n            // this.setState({ quantityUOMOptions, quantityUOMfilteredOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in GetUOMList:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting GetUOMList:\", error);\r\n      });\r\n  }\r\n  GetMeterCode() {\r\n    axios(\r\n      RestAPIs.GetMeters,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        let result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            Array.isArray(result.EntityResult)\r\n          ) {\r\n            const meterCodeOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n            let meterCodeSearchOptions = lodash.cloneDeep(meterCodeOptions);\r\n            if (\r\n              meterCodeSearchOptions.length > Constants.filteredOptionsCount\r\n            ) {\r\n              meterCodeSearchOptions = meterCodeSearchOptions.slice(\r\n                0,\r\n                Constants.filteredOptionsCount\r\n              );\r\n            }\r\n            this.setState({\r\n              meterCodeOptions,\r\n              meterCodeSearchOptions,\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getMeterCode:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error in getMeterCode:\", error);\r\n      });\r\n  }\r\n\r\n  GetUnAccountedTransactionTypeList() {\r\n    axios(\r\n      RestAPIs.GetUnAccountedTransactionTypes,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        //console.log(response);\r\n        var result = response.data;\r\n\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            var transactionTypeOptionList = result.EntityResult.Meter;\r\n            let transactionOptions = [];\r\n            transactionTypeOptionList.forEach((MeterType) => {\r\n              transactionOptions.push({\r\n                text: MeterType,\r\n                value: MeterType,\r\n              });\r\n            });\r\n            this.setState({\r\n              transactionTypeOptions: transactionOptions,\r\n            });\r\n          }\r\n        } else {\r\n          console.log(\r\n            \"Error in GetUnAccountedTransactionTypeList:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"Error while getting GetUnAccountedTransactionTypeList:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n  GetBaseProductsList() {\r\n    axios(\r\n      RestAPIs.GetBaseProducts,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        //console.log(response);\r\n        var result = response.data;\r\n        let baseProdcutOptions = [];\r\n        let MeterWhiteOptions = [];\r\n        if (result.IsSuccess === true) {\r\n          if (result.EntityResult !== null) {\r\n            Object.keys(result.EntityResult).forEach((prodType) => {\r\n              if (\r\n                result.EntityResult[prodType] !== undefined &&\r\n                Array.isArray(result.EntityResult[prodType])\r\n              ) {\r\n                baseProdcutOptions = baseProdcutOptions.concat(\r\n                  Utilities.transferListtoOptions(result.EntityResult[prodType])\r\n                );\r\n              }\r\n            });\r\n\r\n            // if (Array.isArray(result.EntityResult.ALLPROD)) {\r\n            //   baseProdcutOptions = Utilities.transferListtoOptions(\r\n            //     result.EntityResult.ALLPROD\r\n            //   );\r\n            // }\r\n            // if (Array.isArray(result.EntityResult.WHITE)) {\r\n            //   TankWhiteOptions = Utilities.transferListtoOptions(\r\n            //     result.EntityResult.WHITE\r\n            //   );\r\n            //   TankWhiteOptions.forEach((TankWhite) =>\r\n            //     baseProdcutOptions.push(TankWhite)\r\n            //   );\r\n            // }\r\n          }\r\n          this.setState({ baseProdcutOptions });\r\n        } else {\r\n          console.log(\"Error in GetBaseProductsList:\", result.ErrorList);\r\n        }\r\n        this.getAdditivesList(baseProdcutOptions);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting GetBaseProductsList:\", error);\r\n      });\r\n  }\r\n  getAdditivesList(baseProdcutOptions) {\r\n    axios(\r\n      RestAPIs.GetAdditives,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          if (\r\n            result.EntityResult !== null &&\r\n            result.EntityResult !== undefined\r\n          ) {\r\n            let additiveDetails = Utilities.transferListtoOptions(\r\n              result.EntityResult.ALLPROD\r\n            );\r\n            additiveDetails.forEach((additive) =>\r\n              baseProdcutOptions.push(additive)\r\n            );\r\n            this.setState({ baseProdcutOptions });\r\n          }\r\n        } else {\r\n          console.log(\"Error in getAdditivesList:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting Additives List:\", error);\r\n      });\r\n  }\r\n  validateSave(attributeList) {\r\n    const { modAccountedMeterTransaction } = this.state;\r\n    var validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n    Object.keys(UnAccountedTransactionMeterValidationDef).forEach(function (\r\n      key\r\n    ) {\r\n      validationErrors[key] = Utilities.validateField(\r\n        UnAccountedTransactionMeterValidationDef[key],\r\n        modAccountedMeterTransaction[key]\r\n      );\r\n    });\r\n    this.setState({ validationErrors });\r\n\r\n    var attributeValidationErrors = lodash.cloneDeep(\r\n      this.state.attributeValidationErrors\r\n    );\r\n\r\n    attributeList.forEach((attribute) => {\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attribute.attributeMetaDataList.forEach((attributeMetaData) => {\r\n            attributeValidation.attributeValidationErrors[\r\n              attributeMetaData.Code\r\n            ] = Utilities.valiateAttributeField(\r\n              attributeMetaData,\r\n              attributeMetaData.DefaultValue\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({ validationErrors, attributeValidationErrors });\r\n\r\n    var returnValue = true;\r\n    attributeValidationErrors.forEach((x) => {\r\n      if (returnValue) {\r\n        returnValue = Object.values(x.attributeValidationErrors).every(\r\n          function (value) {\r\n            return value === \"\";\r\n          }\r\n        );\r\n      } else {\r\n        return returnValue;\r\n      }\r\n    });\r\n    if (returnValue)\r\n      returnValue = Object.values(validationErrors).every(function (value) {\r\n        return value === \"\";\r\n      });\r\n    return returnValue;\r\n  }\r\n\r\n  CreateUnAccountedMeterTransaction(modAccountedMeterTransaction) {\r\n    this.handleAuthenticationClose();\r\n    this.setState({ saveEnabled: false });\r\n\r\n    var obj = {\r\n      ShareHolderCode: this.props.selectedShareholder,\r\n      Entity: modAccountedMeterTransaction,\r\n    };\r\n    var notification = {\r\n      messageType: \"critical\",\r\n      message: \"UnAccountedTransactionMeter_SavedStatus\",\r\n      messageResultDetails: [\r\n        {\r\n          keyFields: [\"meterCodeOptions\"],\r\n          keyValues: [modAccountedMeterTransaction.MeterCode],\r\n          isSuccess: false,\r\n          errorMessage: \"\",\r\n        },\r\n      ],\r\n    };\r\n    axios(\r\n      RestAPIs.CreateUnAccountedMeterTransaction,\r\n      Utilities.getAuthenticationObjectforPost(\r\n        obj,\r\n        this.props.tokenDetails.tokenInfo\r\n      )\r\n    )\r\n      .then((response) => {\r\n        var result = response.data;\r\n        notification.messageType = result.IsSuccess ? \"success\" : \"critical\";\r\n        notification.messageResultDetails[0].isSuccess = result.IsSuccess;\r\n        if (result.IsSuccess === true) {\r\n          this.setState({\r\n            saveEnabled: false,\r\n            AccountedMeterTransaction: modAccountedMeterTransaction,\r\n          });\r\n        } else {\r\n          notification.messageResultDetails[0].errorMessage =\r\n            result.ErrorList[0];\r\n          this.setState({\r\n            saveEnabled: Utilities.isInFunction(\r\n              this.props.userDetails.EntityResult.FunctionsList,\r\n              functionGroups.add,\r\n              fnUnAccountedTransactionMeter\r\n            ),\r\n          });\r\n          console.log(\r\n            \"Error in createAccountedMeterTransaction:\",\r\n            result.ErrorList\r\n          );\r\n        }\r\n        this.props.onSaved(modAccountedMeterTransaction, \"add\", notification);\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          saveEnabled: Utilities.isInFunction(\r\n            this.props.userDetails.EntityResult.FunctionsList,\r\n            functionGroups.add,\r\n            fnUnAccountedTransactionMeter\r\n          ),\r\n        });\r\n        notification.messageResultDetails[0].errorMessage = error;\r\n        this.props.onSaved(modAccountedMeterTransaction, \"add\", notification);\r\n      });\r\n  }\r\n\r\n  GetTankList() {\r\n    axios(\r\n      RestAPIs.GetTanks + \"?ShareholderCode=\" + this.props.selectedShareholder,\r\n      Utilities.getAuthenticationObjectforGet(this.props.tokenDetails.tokenInfo)\r\n    )\r\n      .then((response) => {\r\n        //console.log(response);\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          let tankCodeOptions = [];\r\n          if (result.EntityResult !== null) {\r\n            tankCodeOptions = Utilities.transferListtoOptions(\r\n              result.EntityResult\r\n            );\r\n          }\r\n          this.setState({ tankCodeOptions });\r\n        } else {\r\n          console.log(\"Error in GetTankList:\", result.ErrorList);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error while getting GetTankList:\", error);\r\n      });\r\n  }\r\n\r\n  handleChange = (propertyName, data) => {\r\n    try {\r\n      const modAccountedMeterTransaction = lodash.cloneDeep(\r\n        this.state.modAccountedMeterTransaction\r\n      );\r\n      const validationErrors = lodash.cloneDeep(this.state.validationErrors);\r\n      modAccountedMeterTransaction[propertyName] = data;\r\n      this.setState({ modAccountedMeterTransaction });\r\n      if (\r\n        UnAccountedTransactionMeterValidationDef[propertyName] !== undefined\r\n      ) {\r\n        validationErrors[propertyName] = Utilities.validateField(\r\n          UnAccountedTransactionMeterValidationDef[propertyName],\r\n          data\r\n        );\r\n        this.setState({ validationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CustomerDetailsComposite:Error occured on handleChange\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  fillDetails() {\r\n    try {\r\n      let modAccountedMeterTransaction = lodash.cloneDeep(\r\n        this.state.modAccountedMeterTransaction\r\n      );\r\n      //let attributeList = lodash.cloneDeep(this.state.selectedAttributeList);\r\n\r\n      modAccountedMeterTransaction.ShareholderCode =\r\n        this.props.selectedShareholder;\r\n\r\n      if (\r\n        modAccountedMeterTransaction.Density !== null &&\r\n        modAccountedMeterTransaction.Density !== \"\"\r\n      )\r\n        modAccountedMeterTransaction.Density =\r\n          modAccountedMeterTransaction.Density.toLocaleString();\r\n      if (\r\n        modAccountedMeterTransaction.UnAccountedNetQuantity !== null &&\r\n        modAccountedMeterTransaction.UnAccountedNetQuantity !== \"\"\r\n      )\r\n        modAccountedMeterTransaction.UnAccountedNetQuantity =\r\n          modAccountedMeterTransaction.UnAccountedNetQuantity.toLocaleString();\r\n      if (\r\n        modAccountedMeterTransaction.UnAccountedGrossQuantity !== null &&\r\n        modAccountedMeterTransaction.UnAccountedGrossQuantity !== \"\"\r\n      )\r\n        modAccountedMeterTransaction.UnAccountedGrossQuantity =\r\n          modAccountedMeterTransaction.UnAccountedGrossQuantity.toLocaleString();\r\n      if (\r\n        modAccountedMeterTransaction.GrossStartTotalizer !== null &&\r\n        modAccountedMeterTransaction.GrossStartTotalizer !== \"\"\r\n      )\r\n        modAccountedMeterTransaction.GrossStartTotalizer =\r\n          modAccountedMeterTransaction.GrossStartTotalizer.toLocaleString();\r\n      if (\r\n        modAccountedMeterTransaction.GrossEndTotalizer !== null &&\r\n        modAccountedMeterTransaction.GrossEndTotalizer !== \"\"\r\n      )\r\n        modAccountedMeterTransaction.GrossEndTotalizer =\r\n          modAccountedMeterTransaction.GrossEndTotalizer.toLocaleString();\r\n      if (\r\n        modAccountedMeterTransaction.NetStartTotalizer !== null &&\r\n        modAccountedMeterTransaction.NetStartTotalizer !== \"\"\r\n      )\r\n        modAccountedMeterTransaction.NetStartTotalizer =\r\n          modAccountedMeterTransaction.NetStartTotalizer.toLocaleString();\r\n      if (\r\n        modAccountedMeterTransaction.NetEndTotalizer !== null &&\r\n        modAccountedMeterTransaction.NetEndTotalizer !== \"\"\r\n      )\r\n        modAccountedMeterTransaction.NetEndTotalizer =\r\n          modAccountedMeterTransaction.NetEndTotalizer.toLocaleString();\r\n      //attributeList = Utilities.attributesConverttoLocaleString(attributeList);\r\n      this.setState({ modAccountedMeterTransaction });\r\n      return modAccountedMeterTransaction;\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionMeterDetailsComposite:Error occured on fillDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleAddTransaction = () => {\r\n    let tempAccountedMeterTransaction = lodash.cloneDeep(this.state.tempAccountedMeterTransaction);\r\n    this.CreateUnAccountedMeterTransaction(tempAccountedMeterTransaction);\r\n  };\r\n\r\n  handleSave = () => {\r\n    try {\r\n      let modAccountedMeterTransaction = this.fillDetails();\r\n\r\n      let attributeList = Utilities.attributesConverttoLocaleString(\r\n        this.state.selectedAttributeList\r\n      );\r\n     // this.setState({ saveEnabled: false });\r\n      if (this.validateSave(attributeList)) {\r\n        modAccountedMeterTransaction = this.convertStringtoDecimal(\r\n          modAccountedMeterTransaction,\r\n          attributeList\r\n        );\r\n        \r\n        let showAuthenticationLayout =\r\n        this.props.userDetails.EntityResult.IsWebPortalUser !== true\r\n          ? true\r\n          : false;\r\n      let tempAccountedMeterTransaction = lodash.cloneDeep(modAccountedMeterTransaction);\r\n      this.setState({ showAuthenticationLayout, tempAccountedMeterTransaction }, () => {\r\n        if (showAuthenticationLayout === false) {\r\n          this.handleAddTransaction();\r\n        }\r\n    });\r\n\r\n      } else {\r\n        this.setState({ saveEnabled: true });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"CustomerDetailsComposite:Error occured on handleSave\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  getAttributes() {\r\n    try {\r\n      axios(\r\n        RestAPIs.GetAttributesMetaData,\r\n        Utilities.getAuthenticationObjectforPost(\r\n          [unAccountedMeterTransaction],\r\n          this.props.tokenDetails.tokenInfo\r\n        )\r\n      ).then((response) => {\r\n        var result = response.data;\r\n        if (result.IsSuccess === true) {\r\n          this.setState(\r\n            {\r\n              attributeMetaDataList: lodash.cloneDeep(result.EntityResult),\r\n              attributeValidationErrors:\r\n                Utilities.getAttributeInitialValidationErrors(\r\n                  result.EntityResult.UNACCOUNTEDMETERTRANSACTION\r\n                ),\r\n            },\r\n            () => {\r\n              if (this.props.userDetails.EntityResult.IsEnterpriseNode) {\r\n                this.terminalSelectionChange([]);\r\n              } else {\r\n                this.localNodeAttribute();\r\n              }\r\n            }\r\n          );\r\n        } else {\r\n          console.log(\r\n            \"UnAccountedTransactionMeterDetailsComposite:Error in getAttributes:\"\r\n          );\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionMeterDetailsComposite:Error while getAttributes:\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  convertStringtoDecimal(modAccountedMeterTransaction, attributeList) {\r\n    try {\r\n      if (\r\n        modAccountedMeterTransaction.UnAccountedGrossQuantity !== null &&\r\n        modAccountedMeterTransaction.UnAccountedGrossQuantity !== \"\"\r\n      ) {\r\n        modAccountedMeterTransaction.UnAccountedGrossQuantity =\r\n          Utilities.convertStringtoDecimal(\r\n            modAccountedMeterTransaction.UnAccountedGrossQuantity\r\n          );\r\n      }\r\n      if (\r\n        modAccountedMeterTransaction.UnAccountedNetQuantity !== null &&\r\n        modAccountedMeterTransaction.UnAccountedNetQuantity !== \"\"\r\n      ) {\r\n        modAccountedMeterTransaction.UnAccountedNetQuantity =\r\n          Utilities.convertStringtoDecimal(\r\n            modAccountedMeterTransaction.UnAccountedNetQuantity\r\n          );\r\n      }\r\n      if (\r\n        modAccountedMeterTransaction.Density !== null &&\r\n        modAccountedMeterTransaction.Density !== \"\"\r\n      ) {\r\n        modAccountedMeterTransaction.Density = Utilities.convertStringtoDecimal(\r\n          modAccountedMeterTransaction.Density\r\n        );\r\n      }\r\n      if (\r\n        modAccountedMeterTransaction.GrossStartTotalizer !== null &&\r\n        modAccountedMeterTransaction.GrossStartTotalizer !== \"\"\r\n      ) {\r\n        modAccountedMeterTransaction.GrossStartTotalizer =\r\n          Utilities.convertStringtoDecimal(\r\n            modAccountedMeterTransaction.GrossStartTotalizer\r\n          );\r\n      }\r\n      if (\r\n        modAccountedMeterTransaction.GrossEndTotalizer !== null &&\r\n        modAccountedMeterTransaction.GrossEndTotalizer !== \"\"\r\n      ) {\r\n        modAccountedMeterTransaction.GrossEndTotalizer =\r\n          Utilities.convertStringtoDecimal(\r\n            modAccountedMeterTransaction.GrossEndTotalizer\r\n          );\r\n      }\r\n      if (\r\n        modAccountedMeterTransaction.NetStartTotalizer !== null &&\r\n        modAccountedMeterTransaction.NetStartTotalizer !== \"\"\r\n      ) {\r\n        modAccountedMeterTransaction.NetStartTotalizer =\r\n          Utilities.convertStringtoDecimal(\r\n            modAccountedMeterTransaction.NetStartTotalizer\r\n          );\r\n      }\r\n      if (\r\n        modAccountedMeterTransaction.NetEndTotalizer !== null &&\r\n        modAccountedMeterTransaction.NetEndTotalizer !== \"\"\r\n      ) {\r\n        modAccountedMeterTransaction.NetEndTotalizer =\r\n          Utilities.convertStringtoDecimal(\r\n            modAccountedMeterTransaction.NetEndTotalizer\r\n          );\r\n      }\r\n      modAccountedMeterTransaction = this.fillAttributeDetails(\r\n        modAccountedMeterTransaction,\r\n        attributeList\r\n      );\r\n      return modAccountedMeterTransaction;\r\n    } catch (err) {\r\n      console.log(\r\n        \"UnAccountedTransactionMeterDetailsComposite:convertStringtoDecimal error modAccountedMeterTransaction Details\",\r\n        err\r\n      );\r\n    }\r\n  }\r\n\r\n  fillAttributeDetails(modAccountedMeterTransaction, attributeList) {\r\n    try {\r\n      attributeList = Utilities.attributesDatatypeConversion(attributeList);\r\n      modAccountedMeterTransaction.Attributes = [];\r\n      attributeList.forEach((comp) => {\r\n        let attribute = {\r\n          ListOfAttributeData: [],\r\n        };\r\n        attribute.TerminalCode = comp.TerminalCode;\r\n        comp.attributeMetaDataList.forEach((det) => {\r\n          attribute.ListOfAttributeData.push({\r\n            AttributeCode: det.Code,\r\n            AttributeValue: det.DefaultValue,\r\n          });\r\n        });\r\n        modAccountedMeterTransaction.Attributes.push(attribute);\r\n      });\r\n      this.setState({ modAccountedMeterTransaction });\r\n      return modAccountedMeterTransaction;\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionMeterDetailsComposite:Error occured on fillAttributeDetails\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  handleCellDataEdit = (attribute, value) => {\r\n    try {\r\n      attribute.DefaultValue = value;\r\n      this.setState({\r\n        attribute: attribute,\r\n      });\r\n      const attributeValidationErrors = lodash.cloneDeep(\r\n        this.state.attributeValidationErrors\r\n      );\r\n\r\n      attributeValidationErrors.forEach((attributeValidation) => {\r\n        if (attributeValidation.TerminalCode === attribute.TerminalCode) {\r\n          attributeValidation.attributeValidationErrors[attribute.Code] =\r\n            Utilities.valiateAttributeField(attribute, value);\r\n        }\r\n      });\r\n      this.setState({ attributeValidationErrors });\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionMeterDetailsComposite:Error occured on handleCellDataEdit\",\r\n        error\r\n      );\r\n    }\r\n  };\r\n  terminalSelectionChange(selectedTerminals) {\r\n    try {\r\n      if (selectedTerminals !== undefined && selectedTerminals !== null) {\r\n        let attributesTerminalsList = [];\r\n        var attributeMetaDataList = [];\r\n        var selectedAttributeList = [];\r\n        attributeMetaDataList = lodash.cloneDeep(\r\n          this.state.attributeMetaDataList\r\n        );\r\n        selectedAttributeList = lodash.cloneDeep(\r\n          this.state.selectedAttributeList\r\n        );\r\n        const attributeValidationErrors = lodash.cloneDeep(\r\n          this.state.attributeValidationErrors\r\n        );\r\n        var modTank = lodash.cloneDeep(this.state.modAccountedMeterTransaction);\r\n\r\n        selectedTerminals.forEach((terminal) => {\r\n          var existitem = selectedAttributeList.find((selectedAttribute) => {\r\n            return selectedAttribute.TerminalCode === terminal;\r\n          });\r\n\r\n          if (existitem === undefined) {\r\n            attributeMetaDataList.UNACCOUNTEDMETERTRANSACTION.forEach(function (\r\n              attributeMetaData\r\n            ) {\r\n              if (attributeMetaData.TerminalCode === terminal) {\r\n                var Attributevalue = modTank.Attributes.find(\r\n                  (baseproductAttribute) => {\r\n                    return baseproductAttribute.TerminalCode === terminal;\r\n                  }\r\n                );\r\n                if (Attributevalue !== undefined) {\r\n                  attributeMetaData.attributeMetaDataList.forEach(function (\r\n                    attributeMetaData\r\n                  ) {\r\n                    var valueAttribute =\r\n                      Attributevalue.ListOfAttributeData.find((x) => {\r\n                        return x.AttributeCode === attributeMetaData.Code;\r\n                      });\r\n                    if (valueAttribute !== undefined)\r\n                      attributeMetaData.DefaultValue =\r\n                        valueAttribute.AttributeValue;\r\n                  });\r\n                }\r\n                attributesTerminalsList.push(attributeMetaData);\r\n              }\r\n            });\r\n          } else {\r\n            attributesTerminalsList.push(existitem);\r\n          }\r\n        });\r\n        selectedAttributeList = [];\r\n        selectedAttributeList = attributesTerminalsList;\r\n        selectedAttributeList = Utilities.attributesConvertoDecimal(\r\n          selectedAttributeList\r\n        );\r\n\r\n        attributeValidationErrors.forEach((attributeValidation) => {\r\n          var existTerminal = selectedTerminals.find((selectedTerminals) => {\r\n            return attributeValidation.TerminalCode === selectedTerminals;\r\n          });\r\n          if (existTerminal === undefined) {\r\n            Object.keys(attributeValidation.attributeValidationErrors).forEach(\r\n              (key) => (attributeValidation.attributeValidationErrors[key] = \"\")\r\n            );\r\n          }\r\n        });\r\n        this.setState({ selectedAttributeList, attributeValidationErrors });\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionMeterDetailsComposite:Error occured on terminalSelectionChange\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n  localNodeAttribute() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      if (Array.isArray(attributeMetaDataList.UNACCOUNTEDMETERTRANSACTION) && attributeMetaDataList.UNACCOUNTEDMETERTRANSACTION.length > 0) {\r\n        this.terminalSelectionChange([\r\n          attributeMetaDataList.UNACCOUNTEDMETERTRANSACTION[0].TerminalCode,\r\n        ]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionMeterDetailsComposite:Error occured on localNodeAttribute\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleResetAttributeValidationError() {\r\n    try {\r\n      var attributeMetaDataList = lodash.cloneDeep(\r\n        this.state.attributeMetaDataList\r\n      );\r\n      this.setState({\r\n        attributeValidationErrors:\r\n          Utilities.getAttributeInitialValidationErrors(\r\n            attributeMetaDataList.UNACCOUNTEDMETERTRANSACTION\r\n          ),\r\n      });\r\n    } catch (error) {\r\n      console.log(\r\n        \"UnAccountedTransactionMeterDetailsComposite:Error occured on handleReset\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  handleAuthenticationClose = () => {\r\n    this.setState({\r\n      showAuthenticationLayout: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return this.state.isReadyToRender ? (\r\n      <div>\r\n        <ErrorBoundary>\r\n          <TMDetailsHeader newEntityName=\"MeterUnaccountedTransaction_Header\"></TMDetailsHeader>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <UnAccountedTransactionMeterDetails\r\n            modAccountedMeterTransaction={\r\n              this.state.modAccountedMeterTransaction\r\n            }\r\n            listOptions={{\r\n              quantityUOMOptions: this.state.quantityUOMOptions,\r\n              densityUOMOptions: this.state.densityUOMOptions,\r\n              meterCodeOptions: this.state.meterCodeOptions,\r\n              transactionTypeOptions: this.state.transactionTypeOptions,\r\n              baseProdcutOptions: this.state.baseProdcutOptions,\r\n              tankCodeOptions: this.state.tankCodeOptions,\r\n              transportationTypeOptions: this.state.transportationTypeOptions,\r\n            }}\r\n            onFieldChange={this.handleChange}\r\n            validationErrors={this.state.validationErrors}\r\n            isEnterpriseNode={\r\n              this.props.userDetails.EntityResult.IsEnterpriseNode\r\n            }\r\n            attributeValidationErrors={this.state.attributeValidationErrors}\r\n            selectedAttributeList={this.state.selectedAttributeList}\r\n            handleCellDataEdit={this.handleCellDataEdit}\r\n          ></UnAccountedTransactionMeterDetails>\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <TMDetailsUserActions\r\n            handleBack={this.props.onBack}\r\n            handleSave={this.handleSave}\r\n            handleReset={this.handleReset}\r\n            saveEnabled={this.state.saveEnabled}\r\n          ></TMDetailsUserActions>\r\n        </ErrorBoundary>\r\n        {this.state.showAuthenticationLayout ? (\r\n          <UserAuthenticationLayout\r\n            Username={this.props.userDetails.EntityResult.UserName}\r\n            functionName={functionGroups.add}\r\n            functionGroup={fnUnAccountedTransactionMeter}\r\n            handleOperation={this.handleAddTransaction}\r\n            handleClose={this.handleAuthenticationClose}\r\n          ></UserAuthenticationLayout>\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <LoadingPage message=\"Loading\"></LoadingPage>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userDetails: state.getUserDetails.userDetails,\r\n    tokenDetails: state.getUserDetails.TokenAuth,\r\n  };\r\n};\r\nconst mapReceiptToProps = (receipt) => {\r\n  return {\r\n    userActions: bindActionCreators(getUserDetails, receipt),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapReceiptToProps\r\n)(UnAccountedTransactionMeterDetailsComposite);\r\nUnAccountedTransactionMeterDetailsComposite.propTypes = {\r\n  selectedShareholder: PropTypes.string.isRequired,\r\n  selectedRow: PropTypes.object.isRequired,\r\n  terminalCodes: PropTypes.array.isRequired,\r\n  onBack: PropTypes.func.isRequired,\r\n  onSaved: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport { Popup, List, Icon } from \"@scuf/common\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nTMDetailsHeader.propTypes = {\r\n  entityCode: PropTypes.string,\r\n  newEntityName: PropTypes.string,\r\n  popUpContents: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      fieldName: PropTypes.string,\r\n      fieldValue: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nTMDetailsHeader.defaultProps = {\r\n  entityCode: \"\",\r\n  newEntityName: \"\",\r\n  popUpContents: [],\r\n};\r\n\r\nexport function TMDetailsHeader({ entityCode, newEntityName, popUpContents }) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"headerContainer\">\r\n          <div className=\"row headerSpacing\">\r\n            <div className=\"col paddingHeaderItemLeft\">\r\n              <span style={{ margin: \"auto\" }} className=\"headerLabel\">\r\n                {entityCode === \"\" || entityCode === undefined                 \r\n                  ? t(newEntityName)\r\n                  : entityCode}\r\n              </span>\r\n            </div>\r\n            {entityCode !== \"\" &&\r\n            entityCode !== undefined &&\r\n            popUpContents.length > 0 ? (\r\n              <div className=\"headerItemRight\">\r\n                <Popup\r\n                  element={\r\n                    <div>\r\n                      {t(popUpContents[0].fieldName) + \" \"}:\r\n                      {\" \" + popUpContents[0].fieldValue}\r\n                      <Icon\r\n                        style={{ marginLeft: \"10px\" }}\r\n                        root=\"common\"\r\n                        name=\"caret-down\"\r\n                        size=\"small\"\r\n                      />\r\n                    </div>\r\n                  }\r\n                  position=\"bottom left\"\r\n                  // on=\"click\"\r\n                >\r\n                  <List className=\"detailsHeaderPopUp\">\r\n                    {popUpContents.map((content) => (\r\n                      <List.Content\r\n                        key=\"content.fieldName\"\r\n                        className=\"detailsHeaderPopUpListPadding\"\r\n                      >\r\n                        {t(content.fieldName) + \" \"}:{\" \" + content.fieldValue}\r\n                      </List.Content>\r\n                    ))}\r\n                  </List>\r\n                </Popup>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n\r\nexport default TMDetailsHeader;","import React from \"react\";\r\nimport { Button } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport PropTypes from \"prop-types\";\r\nTMDetailsUserActions.propTypes = {\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired,\r\n  saveEnabled: PropTypes.bool,\r\n};\r\nTMDetailsUserActions.defaultProps = { saveEnabled: false };\r\nexport function TMDetailsUserActions({\r\n  handleBack,\r\n  handleSave,\r\n  handleReset,\r\n  saveEnabled,\r\n}) {\r\n  return (\r\n    <TranslationConsumer>\r\n      {(t) => (\r\n        <div className=\"row userActionPosition\">\r\n          <div className=\"col-12 col-md-3 col-lg-4\">\r\n            <Button\r\n              className=\"backButton\"\r\n              onClick={handleBack}\r\n              content={t(\"Back\")}\r\n            ></Button>\r\n          </div>\r\n          <div className=\"col-12 col-md-9 col-lg-8\">\r\n            <div style={{ float: \"right\" }}>\r\n              <Button\r\n                content={t(\"LookUpData_btnReset\")}\r\n                className=\"cancelButton\"\r\n                onClick={handleReset}\r\n              ></Button>\r\n              <Button\r\n                content={t(\"Save\")}\r\n                disabled={!saveEnabled}\r\n                onClick={handleSave}\r\n              ></Button>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col col-lg-2\">\r\n    \r\n  </div> */}\r\n        </div>\r\n      )}\r\n    </TranslationConsumer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Checkbox } from \"@scuf/common\";\r\nimport { Input, DatePicker } from \"@scuf/common\";\r\nimport { TranslationConsumer } from \"@scuf/localization\";\r\nimport * as Constants from \"../../../JS/Constants\";\r\nimport { getCurrentDateFormat } from \"../../../JS/functionalUtilities\";\r\n\r\nexport function AttributeDetails({\r\n    selectedAttributeList,\r\n    handleCellDataEdit,\r\n    attributeValidationErrors,\r\n}) {\r\n    const handleAttributeDateValue = (attribute) => {\r\n        if (attribute.DefaultValue === '0000-00-00') {\r\n            convertAttributeDatetoString(attribute,new Date());\r\n            return new Date();\r\n        } else {\r\n            var chars = attribute.DefaultValue.split('-');\r\n            return new Date(chars[0],chars[1]-1,chars[2]);\r\n        }\r\n    } \r\n    const convertAttributeDatetoString = (attribute, value) => {\r\n        var Dateval = new Date(value);\r\n        value = Dateval.getFullYear() + \"-\" + (\"0\" + (Dateval.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + Dateval.getDate()).slice(-2);\r\n        handleCellDataEdit(attribute,value);\r\n    }\r\n    return (\r\n        <TranslationConsumer>\r\n            {(t) => (\r\n                <div className=\"row\" >\r\n                    <div className=\"col-md-12 attributeDetails-wrap\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                selectedAttributeList.map((attribute) =>\r\n                                    attribute.DataType.toLowerCase() === Constants.DataType.STRING.toLowerCase() && attribute.IsVisible === true ?\r\n                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                            <Input\r\n                                                fluid\r\n                                                label={t(attribute.DisplayName)}\r\n                                                value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                reserveSpace={false}\r\n                                            />\r\n                                        </div> : (attribute.DataType.toLowerCase() === Constants.DataType.INT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.LONG.toLowerCase()) && attribute.IsVisible === true  ?\r\n                                            <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                <Input\r\n                                                    fluid\r\n                                                    label={t(attribute.DisplayName)}\r\n                                                    value={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue}\r\n\r\n                                                    indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                    disabled={attribute.IsReadonly === true ? true : false}\r\n                                                    onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                    error={t(attributeValidationErrors[attribute.Code])}\r\n                                                    reserveSpace={false}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            : (attribute.DataType.toLowerCase() === Constants.DataType.FLOAT.toLowerCase() || attribute.DataType.toLowerCase() === Constants.DataType.DOUBLE.toLowerCase()) && attribute.IsVisible === true ?\r\n                                                <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                    <Input\r\n                                                        fluid\r\n                                                        label={t(attribute.DisplayName)}\r\n                                                        value={\r\n                                                            //parseFloat\r\n                                                            (attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\" : (attribute.DefaultValue).toLocaleString()\r\n                                                        }\r\n                                                        indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                        disabled={attribute.IsReadonly === true ? true : false}\r\n                                                        onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        error={t(attributeValidationErrors[attribute.Code])}\r\n                                                        reserveSpace={false}\r\n                                                    />\r\n                                                </div> :\r\n                                                attribute.DataType.toLowerCase() === Constants.DataType.BOOL.toLowerCase() && attribute.IsVisible === true ?\r\n                                                    <div className=\"col-12 col-md-6 col-lg-4\">\r\n                                                        <Checkbox className=\"deviceCheckBox customDeviceCheckBox\"\r\n                                                            label={t(attribute.DisplayName)}\r\n                                                            checked={attribute.DefaultValue === null ? \"\" : attribute.DefaultValue.toString().toLowerCase() === \"true\" ? true : false}\r\n                                                            disabled={attribute.IsReadonly === true ? true : false}\r\n                                                            onChange={(value) => handleCellDataEdit(attribute, value)}\r\n                                                        >\r\n                                                        </Checkbox>\r\n                                                    </div>\r\n                                                    : attribute.DataType.toLowerCase() === Constants.DataType.DATETIME.toLowerCase() && attribute.IsVisible === true ?\r\n                                                   \r\n                                                        <div className=\"col-12 col-md-6 col-lg-4\" >\r\n                                                            <DatePicker\r\n                                                                fluid\r\n                                                                value={(attribute.DefaultValue === null || attribute.DefaultValue === \"\") ? \"\"\r\n                                                                    : handleAttributeDateValue(attribute)\r\n                                                                }\r\n                                                                label={t(attribute.DisplayName)}\r\n                                                                displayFormat={getCurrentDateFormat()}\r\n                                                                showYearSelector=\"true\"\r\n                                                                indicator={attribute.IsMandatory === true ? \"required\" : null}\r\n                                                                disabled={attribute.IsReadonly === true ? true : false}\r\n                                                                onChange={(value) => \r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }\r\n                                                                onTextChange={(value) => {\r\n                                                                    convertAttributeDatetoString(attribute, value)\r\n                                                                }}\r\n                                                                error={t(attributeValidationErrors[attribute.Code])}\r\n                                                                reserveSpace={false}\r\n                                                            />\r\n                                                        </div> : null\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TranslationConsumer>\r\n    );\r\n}\r\n","export const driverAttributeEntity = \"driver\";\r\nexport const carrierAttributeEntity = \"carriercompany\";\r\nexport const shareholderAttributeEntity = \"shareholder\";\r\nexport const baseProductAttributeEntity = \"baseProduct\";\r\nexport const trailerAttributeEntity = \"TRAILER\";\r\nexport const trailerCompAttributeEntity = \"TRAILERCOMPARTMENT\";\r\nexport const terminalAttributeEntity = \"terminal\";\r\nexport const customerAttributeEntity = \"customer\";\r\nexport const destinationAttributeEntity = \"destination\";\r\nexport const finishedProductAttributeEntity = \"finishedproduct\";\r\nexport const tankAttributeEntity = \"tank\";\r\nexport const vesselAttributeEntity = \"marine_vessel\";\r\nexport const vesselCompartmentAttributeEntity = \"marine_trailercompartment\";\r\nexport const supplierAttributeEntity = \"supplier\";\r\nexport const vehicleAttributeEntity = \"vehicle\";\r\nexport const vehicleTrailerAttributeEntity = \"vehicletrailer\";\r\nexport const originTerminalAttributeEntity = \"originterminal\";\r\nexport const bayAttributeEntity = \"bay\";\r\nexport const loadingArmAttributeEntity = \"loadingArm\";\r\nexport const cardReaderAttributeEntity = \"cardreader\";\r\nexport const vehiclePrimeMoverAttributeEntity = \"vehicleprimemover\";\r\nexport const meterAttributeEntity = \"meter\";\r\nexport const shipmentAttributeEntity = \"SHIPMENT\";\r\nexport const shipmentCompartmentAttributeEntity = \"SHIPMENTCOMPARTMENT\";\r\nexport const shipmentDestinationCompartmentAttributeEntity = \"SHIPMENTDESTINATIONCOMPARTMENT\";\r\nexport const shipmentDetailsAttributeEntity = \"SHIPMENTDETAILS\";\r\nexport const shipmentTrailerWeighBridgeAttributeEntity = \"SHIPMENTTRAILERWEIGHBRIDGE\";\r\nexport const shipmentTrailerAttributeEntity = \"SHIPMENTTRAILER\";\r\nexport const shipmentStatusTimeAttributeEntity = \"SHIPMENTSTATUSTIME\";\r\nexport const marineDispatchAttributeEntity = \"MARINEDISPATCH\";\r\nexport const marineDispatchCompAttributeEntity = \"MARINEDISPATCHCOMPARTMENTDETAIL\";\r\nexport const railWagonAttributeEntity = \"railwagon\";\r\nexport const primeMoverAttributeEntity = \"primemover\";\r\nexport const bcuAttributeEntity = \"bcu\";\r\nexport const railReceiptAttributeEntity = \"RAILRECEIPTPLAN\";\r\n\r\nexport const railReceiptComAttributeEntity = \"RAILRECEIPTWAGONDETAILPLAN\";\r\n\r\nexport const railReceiptManualEntryFPAttributeEntity = \"RAILUNLOADINGDETAILSFP\";\r\nexport const railReceiptManualEntryBPAttributeEntity = \"RAILUNLOADINGDETAILSBP\";\r\nexport const railReceiptManualEntryAddAttributeEntity = \"RAILUNLOADINGDETAILSADDITIVE\";\r\n\r\n//export const marineReceiptAttributeEntity = \"MARINERECEIPT\";\r\n//export const marineReceiptCompAttributeEntity = \"MARINERECEIPTCOMPARTMENT\";\r\nexport const railDispatchPlanAttributeEntity = \"RAILDISPATCHPLAN\";\r\nexport const railDispatchItemAttributeEntity = \"RAILDISPATCHITEM\";\r\nexport const railDispatchStatusChangeAttributeEntity = \"RAILDISPATCHSTATUSCHANGE\";\r\nexport const railDispatchWagonAttributeEntity = \"RAILDISPATCHWAGON\";\r\nexport const railDispatchWagonDetailPlanAttributeEntity = \"RAILDISPATCHWAGONDETAILPLAN\";\r\nexport const railDispatchWagonWeightBridgeAttributeEntity = \"RAILDISPATCHWAGONWEIGHBRIDGE\";\r\nexport const railDispatchWagonCompAttributeEntity = \"RAILDISPATCHWAGONCOMPARTMENT\";\r\nexport const railLoadingDetailsFPAttributeEntity = \"RAILLOADINGDETAILSFP\";\r\nexport const railLoadingDetailsBPAttributeEntity = \"RAILLOADINGDETAILSBP\";\r\nexport const railLoadingDetailsAdditiveAttributeEntity = \"RAILLOADINGDETAILSADDITIVE\";\r\nexport const marineReceiptAttributeEntity = \"marineReceipt\";\r\nexport const unAccountedMeterTransaction = \"UNACCOUNTEDMETERTRANSACTION\";\r\nexport const unAccountedTankTransaction = \"UNACCOUNTEDTANKTRANSACTION\";\r\nexport const marineManualEntryFPAttributeEntity = \"marineLoadingDetailsFP\";\r\nexport const marineLoadingDetailsAdditiveAttributeEntity = \"marineLoadingDetailsAdditive\";\r\nexport const marineLoadingDetailsBPAttributeEntity = \"marineLoadingDetailsBP\";\r\n\r\nexport const marineReceiptCompAttributeEntity = \"marineReceiptCompartmentDetail\";\r\nexport const marineUnloadingSFPAttributeEntity = \"marineUnloadingDetailsFP\";\r\nexport const marineUnloadingSBPAttributeEntity = \"marineUnloadingDetailsBP\";\r\nexport const accessCardAttributeEntity = \"accessCard\";\r\n\r\n\r\nexport const shipmentLoadingDetailsFPAttributeEntity = \"LOADINGDETAILSFP\";\r\nexport const shipmentLoadingDetailsBPAttributeEntity = \"LOADINGDETAILSBP\";\r\nexport const shipmentLoadingDetailsAdvAttributeEntity = \"LOADINGDETAILSADDITIVE\";\r\nexport const MARINERECEIPTSTATUSTIME = \"MARINERECEIPTSTATUSTIME\";\r\nexport const MARINEDISPATCHSTATUSTIME = \"MARINEDISPATCHSTATUSTIME\";\r\nexport const receiptAttributeEntity = \"RECEIPT\";\r\nexport const receiptManualEntryBPAttributeEntity = \"UNLOADINGTRANSACTIONS\";\r\n\r\nexport const orderAttributeEntity = \"ORDER\";\r\nexport const orderItemAttributeEntity = \"ORDERITEM\";\r\nexport const contractAttributeEntity = \"CONTRACT\";\r\nexport const contractItemAttributeEntity = \"CONTRACT_ITEM\";\r\nexport const receiptOriginTerminalCompartment = \"RECEIPTORIGINTERMINALCOMPARTMENT\";\r\nexport const captainAttributeEntity = \"GeneralTMUser_CAPTAIN\";\r\nexport const weighBridgeAttributeEntity = \"weighbridge\";\r\nexport const deuAttributeEntity = \"deu\";\r\n\r\nexport const staffAttributeEntity = \"GeneralTMUser_STAFF\";\r\nexport const visitorAttributeEntity = \"GeneralTMUser_VISITOR\";\r\nexport const pipelineHeaderAttributeEntity = \"PIPELINEHEADER\";\r\nexport const sealMasterAttributeEntity = \"SEALMASTER\";\r\nexport const pipelineReceiptEntity = \"PIPELINERECEIPT\"\r\nexport const slotInfoRoadShipment = \"ROADSHIPMENTSLOTINFO\";\r\nexport const slotInfoRoadReceipt = \"ROADRECEIPTSLOTINFO\";\r\n\r\nexport const slotInfoMarineShipment = \"MARINESHIPMENTSLOTINFO\";\r\nexport const slotInfoMarineReceipt = \"MARINERECEIPTSLOTINFO\";\r\n\r\nexport const pipelineDispatchAttributeEntity = \"PIPELINEDISPATCH\";\r\nexport const pipelineTransactionsAttributeEntity = \"PIPELINETRANSACTIONS\";\r\nexport const pipelineDispatchStatusTimeAttributeEntity = \"PIPELINEDISPATCHSTATUSTIME\";\r\nexport const pipelineReceiptStatusTimeAttributeEntity = \"PIPELINERECEIPTSTATUSTIME\";\r\nexport const processConfigAttributeEntity = \"PROCESSCONFIG\";\r\n\r\nexport const productAllocationItemAttributeEntity = \"PRODUCTALLOCATIONITEM\"\r\n\r\n\r\nexport const hseInspectionShipmentRigidTruckAttributeEntity = \"HSEINSPECTIONSHIPMENTRIGIDTRUCK\";\r\nexport const hseInspectionShipmentTrailerAttributeEntity = \"HSEINSPECTIONSHIPMENTTRAILER\";\r\nexport const hseInspectionShipmentPrimeMoverAttributeEntity = \"HSEINSPECTIONSHIPMENTPRIMEMOVER\";\r\nexport const hseInspectionShipmentNonFillingVehicleAttributeEntity = \"HSEINSPECTIONSHIPMENTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineShipmentBargeAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTBARGE\";\r\nexport const hseInspectionMarineShipmentShipAttributeEntity = \"HSEINSPECTIONMARINESHIPMENTSHIP\";\r\nexport const hseInspectionShipmentRailWagonAttributeEntity = \"HSEINSPECTIONSHIPMENTRAILWAGON\";\r\nexport const hseInspectionShipmentPipelineAttributeEntity = \"HSEINSPECTIONSHIPMENTPIPELINE\";\r\nexport const hseInspectionReceiptRigidTruckAttributeEntity = \"HSEINSPECTIONRECEIPTRIGIDTRUCK\";\r\nexport const hseInspectionReceiptTrailerAttributeEntity = \"HSEINSPECTIONRECEIPTTRAILER\";\r\nexport const hseInspectionReceiptPrimeMoverAttributeEntity = \"HSEINSPECTIONRECEIPTPRIMEMOVER\";\r\nexport const hseInspectionReceiptNonFillingVehicleAttributeEntity = \"HSEINSPECTIONRECEIPTNONFILLINGVEHICLE\";\r\nexport const hseInspectionMarineReceiptBargeAttributeEntity = \"HSEINSPECTIONMARINERECEIPTBARGE\";\r\nexport const hseInspectionMarineReceiptShipAttributeEntity = \"HSEINSPECTIONMARINERECEIPTSHIP\";\r\nexport const hseInspectionReceiptRailWagonAttributeEntity = \"HSEINSPECTIONRECEIPTRAILWAGON\";\r\nexport const hseInspectionReceiptPipelineAttributeEntity = \"HSEINSPECTIONRECEIPTPIPELINE\";\r\n\r\nexport const shareholderAgrementEnity = \"SHAREHOLDERAGREEMENT\";\r\n\r\nexport const coaTemplateAttributeEntity = \"COATEMPLATE\";\r\nexport const coaManagementAttributeEntity = \"COAMANAGEMENT\";\r\nexport const coaCustomerAttributeEntity = \"COACUSTOMER\";\r\nexport const coaManagementFinishedProductAttributeEntity = \"COAMANAGEMENT\";\r\n\r\n\r\nexport const coaAssignmentAttributeEntity = \"COAASSIGNMENT\";","import moment from \"moment\";\r\nimport \"moment/min/locales\";\r\nimport React from \"react\";\r\nexport function getOptionsWithSelect(ddlOptions, selectOptionText) {\r\n  if (Array.isArray(ddlOptions)) {\r\n    let selectOptions = ddlOptions.filter(\r\n      (option) => option.text === selectOptionText\r\n    );\r\n    if (selectOptions.length === 0)\r\n      ddlOptions.unshift({\r\n        value: null,\r\n        text: selectOptionText,\r\n      });\r\n  }\r\n  return ddlOptions;\r\n}\r\n\r\nexport function getCurrentDateFormat() {\r\n  let language = window.navigator.userLanguage || window.navigator.language;\r\n  moment.locale(language);\r\n  let localeData = moment.localeData();\r\n  // console.log(localeData);\r\n  var format = localeData.longDateFormat(\"L\");\r\n  //console.log(format);\r\n  return format;\r\n}\r\n\r\n\r\nexport function handleIsRequiredCompartmentCell(data) {\r\n  return (\r\n    <div><span>{data}</span><div class=\"ui red circular empty label badge  circle-padding\" /></div>\r\n  );\r\n}"],"names":["UnAccountedTransactionMeterDetails","_ref","modAccountedMeterTransaction","listOptions","validationErrors","onFieldChange","isEnterpriseNode","selectedAttributeList","attributeValidationErrors","handleCellDataEdit","handleValidationErrorFilter","terminal","attributeValidation","find","selectedAttribute","TerminalCode","_jsx","TranslationConsumer","children","t","_jsxs","className","Select","fluid","placeholder","label","indicator","value","MeterCode","options","meterCodeOptions","onChange","data","reserveSpace","error","noResultsMessage","transactionTypeOptions","UnAccountedTransactionTypeCode","transportationTypeOptions","TransportationType","search","quantityUOMOptions","QuantityUOM","Input","UnAccountedGrossQuantity","UnAccountedNetQuantity","Density","densityUOMOptions","DensityUOM","GrossStartTotalizer","GrossEndTotalizer","NetStartTotalizer","NetEndTotalizer","DatePicker","type","minuteStep","displayFormat","getCurrentDateFormat","TransactionStartTime","TransactionEndTime","tankCodeOptions","TankCode","Comments","baseProdcutOptions","BaseProductCode","length","map","attribute","ErrorBoundary","Accordion","Content","title","AttributeDetails","attributeMetaDataList","defaultProps","UnAccountedTransactionMeterDetailsComposite","Component","constructor","arguments","state","AccountedMeterTransaction","lodash","emptyAccountedMeterTransaction","isReadyToRender","saveEnabled","meterCodeSearchOptions","Utilities","UnAccountedTransactionMeterValidationDef","showAuthenticationLayout","tempAccountedMeterTransaction","handleReset","this","Object","keys","forEach","key","setState","props","userDetails","EntityResult","IsEnterpriseNode","terminalSelectionChange","handleResetAttributeValidationError","localNodeAttribute","console","log","componentWillReceiveProps","nextProps","undefined","selectedRow","Common_Code","tokenDetails","tokenInfo","handleChange","propertyName","handleAddTransaction","CreateUnAccountedMeterTransaction","handleSave","fillDetails","attributeList","validateSave","convertStringtoDecimal","IsWebPortalUser","DefaultValue","Code","handleAuthenticationClose","componentDidMount","onRef","IsArchived","getAttributes","GetUOMList","GetMeterCode","GetBaseProductsList","GetUnAccountedTransactionTypeList","GetTransportationTypeOptions","GetTankList","ShareholderCode","selectedShareholder","FunctionsList","functionGroups","add","fnUnAccountedTransactionMeter","ReSetData","transportationTypeList","Constants","PIPELINE","push","axios","RestAPIs","then","response","result","IsSuccess","Array","isArray","VOLUME","MASS","massUOM","DENSITY","ErrorList","catch","slice","transactionTypeOptionList","Meter","transactionOptions","MeterType","text","prodType","concat","getAdditivesList","ALLPROD","additive","attributeMetaData","returnValue","x","values","every","obj","ShareHolderCode","Entity","notification","messageType","message","messageResultDetails","keyFields","keyValues","isSuccess","errorMessage","onSaved","toLocaleString","unAccountedMeterTransaction","UNACCOUNTEDMETERTRANSACTION","fillAttributeDetails","err","Attributes","comp","ListOfAttributeData","det","AttributeCode","AttributeValue","selectedTerminals","attributesTerminalsList","modTank","existitem","Attributevalue","baseproductAttribute","valueAttribute","render","TMDetailsHeader","newEntityName","TMDetailsUserActions","handleBack","onBack","UserAuthenticationLayout","Username","UserName","functionName","functionGroup","handleOperation","handleClose","LoadingPage","connect","getUserDetails","TokenAuth","receipt","userActions","bindActionCreators","entityCode","popUpContents","style","margin","Popup","element","fieldName","fieldValue","Icon","marginLeft","root","name","size","position","List","content","Button","onClick","float","disabled","handleAttributeDateValue","convertAttributeDatetoString","Date","chars","split","Dateval","getFullYear","getMonth","getDate","DataType","toLowerCase","STRING","IsVisible","DisplayName","IsMandatory","IsReadonly","INT","LONG","FLOAT","DOUBLE","BOOL","Checkbox","checked","toString","DATETIME","showYearSelector","onTextChange","driverAttributeEntity","carrierAttributeEntity","shareholderAttributeEntity","baseProductAttributeEntity","trailerAttributeEntity","trailerCompAttributeEntity","terminalAttributeEntity","customerAttributeEntity","destinationAttributeEntity","finishedProductAttributeEntity","tankAttributeEntity","vesselAttributeEntity","vesselCompartmentAttributeEntity","supplierAttributeEntity","vehicleAttributeEntity","vehicleTrailerAttributeEntity","originTerminalAttributeEntity","bayAttributeEntity","loadingArmAttributeEntity","cardReaderAttributeEntity","vehiclePrimeMoverAttributeEntity","meterAttributeEntity","shipmentAttributeEntity","shipmentCompartmentAttributeEntity","shipmentDestinationCompartmentAttributeEntity","shipmentDetailsAttributeEntity","shipmentTrailerWeighBridgeAttributeEntity","shipmentTrailerAttributeEntity","shipmentStatusTimeAttributeEntity","marineDispatchAttributeEntity","marineDispatchCompAttributeEntity","railWagonAttributeEntity","primeMoverAttributeEntity","bcuAttributeEntity","railReceiptAttributeEntity","railReceiptComAttributeEntity","railReceiptManualEntryFPAttributeEntity","railReceiptManualEntryBPAttributeEntity","railReceiptManualEntryAddAttributeEntity","railDispatchPlanAttributeEntity","railDispatchItemAttributeEntity","railDispatchStatusChangeAttributeEntity","railDispatchWagonAttributeEntity","railDispatchWagonDetailPlanAttributeEntity","railDispatchWagonWeightBridgeAttributeEntity","railDispatchWagonCompAttributeEntity","railLoadingDetailsFPAttributeEntity","railLoadingDetailsBPAttributeEntity","railLoadingDetailsAdditiveAttributeEntity","marineReceiptAttributeEntity","unAccountedTankTransaction","marineManualEntryFPAttributeEntity","marineLoadingDetailsAdditiveAttributeEntity","marineLoadingDetailsBPAttributeEntity","marineReceiptCompAttributeEntity","marineUnloadingSFPAttributeEntity","marineUnloadingSBPAttributeEntity","accessCardAttributeEntity","shipmentLoadingDetailsFPAttributeEntity","shipmentLoadingDetailsBPAttributeEntity","shipmentLoadingDetailsAdvAttributeEntity","MARINERECEIPTSTATUSTIME","MARINEDISPATCHSTATUSTIME","receiptAttributeEntity","receiptManualEntryBPAttributeEntity","orderAttributeEntity","orderItemAttributeEntity","contractAttributeEntity","contractItemAttributeEntity","receiptOriginTerminalCompartment","captainAttributeEntity","weighBridgeAttributeEntity","deuAttributeEntity","staffAttributeEntity","visitorAttributeEntity","pipelineHeaderAttributeEntity","sealMasterAttributeEntity","pipelineReceiptEntity","slotInfoRoadShipment","slotInfoRoadReceipt","slotInfoMarineShipment","slotInfoMarineReceipt","pipelineDispatchAttributeEntity","pipelineTransactionsAttributeEntity","pipelineDispatchStatusTimeAttributeEntity","pipelineReceiptStatusTimeAttributeEntity","processConfigAttributeEntity","productAllocationItemAttributeEntity","hseInspectionShipmentRigidTruckAttributeEntity","hseInspectionShipmentTrailerAttributeEntity","hseInspectionShipmentPrimeMoverAttributeEntity","hseInspectionShipmentNonFillingVehicleAttributeEntity","hseInspectionMarineShipmentBargeAttributeEntity","hseInspectionMarineShipmentShipAttributeEntity","hseInspectionShipmentRailWagonAttributeEntity","hseInspectionShipmentPipelineAttributeEntity","hseInspectionReceiptRigidTruckAttributeEntity","hseInspectionReceiptTrailerAttributeEntity","hseInspectionReceiptPrimeMoverAttributeEntity","hseInspectionReceiptNonFillingVehicleAttributeEntity","hseInspectionMarineReceiptBargeAttributeEntity","hseInspectionMarineReceiptShipAttributeEntity","hseInspectionReceiptRailWagonAttributeEntity","hseInspectionReceiptPipelineAttributeEntity","shareholderAgrementEnity","coaTemplateAttributeEntity","coaManagementAttributeEntity","coaCustomerAttributeEntity","coaAssignmentAttributeEntity","getOptionsWithSelect","ddlOptions","selectOptionText","filter","option","unshift","language","window","navigator","userLanguage","moment","longDateFormat","handleIsRequiredCompartmentCell","class"],"sourceRoot":""}